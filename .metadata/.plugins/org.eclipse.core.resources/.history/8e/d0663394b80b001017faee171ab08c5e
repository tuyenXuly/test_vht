/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "keypad.h"
#include "LCD_I2C.h"
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* USER CODE BEGIN PV */
CLCD_I2C_Name LCD1;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2C3_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



typedef struct{
	uint8_t payload[20];
	uint16_t len;
}parameter_t;

parameter_t data;

void delete_data(parameter_t *data) {
    if (data->len > 0) { // Kiểm tra xem có dữ liệu để xóa không
        data->len--; // Giảm độ dài
        data->payload[data->len] = '\0'; // �?ặt ký tự cuối thành '\0'
    }
}

void add_data(parameter_t *data, char c) {
    if (data->len < 10) { // �?ảm bảo không vượt quá mảng
        data->payload[data->len] = c; // Thêm ký tự vào vị trí tiếp theo
        data->len++;                   // Cập nhật độ dài
        data->payload[data->len] = '\0'; // �?ảm bảo kết thúc chuỗi
    }
}

void set_cow(uint8_t prev_state, uint8_t new_state) {
    CLCD_I2C_SetCursor(&LCD1, 19, prev_state); // Xóa ký tự "<" ở vị trí cũ
    CLCD_I2C_WriteString(&LCD1, " ");

    CLCD_I2C_SetCursor(&LCD1, 19, new_state); // Hiển thị ký tự "<" ở vị trí mới
    CLCD_I2C_WriteString(&LCD1, "<");
}




/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_I2C3_Init();
  /* USER CODE BEGIN 2 */
  CLCD_I2C_Init(&LCD1,&hi2c1,0x4e,20,4);
  CLCD_I2C_SetCursor(&LCD1, 0, 0);
  CLCD_I2C_WriteString(&LCD1,"s1:");
  CLCD_I2C_SetCursor(&LCD1, 0, 1);
  CLCD_I2C_WriteString(&LCD1,"t1:");
  CLCD_I2C_SetCursor(&LCD1, 0, 2);
  CLCD_I2C_WriteString(&LCD1,"s2:");
  CLCD_I2C_SetCursor(&LCD1, 0, 3);
  CLCD_I2C_WriteString(&LCD1,"t2:");
  CLCD_I2C_SetCursor(&LCD1, 19, 0);
  CLCD_I2C_WriteString(&LCD1, "<");

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

#define s1_s 0
#define t1_s 1
#define s2_s 2
#define t2_s 3

#define ENTER_PASSWORD 0
#define SET_PARAMETER 1
#define SAVE_PARAMETER 2

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	      static parameter_t data[4] = {{{0}, 0}}; // Mảng chứa 4 cấu hình
	  	  static uint8_t state = 0;
	  	  static parameter_t password = {{0},0};

	  	  uint16_t btn_value;
	  	  btn_value = process_button_pad_value(read_keypad());
	  	  static uint16_t menu_state = SET_PARAMETER;

	  	if (btn_value) {
	  		printf("%d\n",btn_value);
		  	uint8_t prev_state;
		  	switch(menu_state){
				case SET_PARAMETER:
					switch (btn_value) {
						case BUTTON_A_3:
							CLCD_I2C_WriteString(&LCD1, "config state");
							break;

						case BUTTON_1:
							add_data(&data[state], '1');
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
							CLCD_I2C_SetCursor(&LCD1, 3, state);
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
							break;

						case BUTTON_2:
							add_data(&data[state], '2');
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
							CLCD_I2C_SetCursor(&LCD1, 3, state);
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
							break;

						case BUTTON_3:
							add_data(&data[state], '3');
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
							CLCD_I2C_SetCursor(&LCD1, 3, state);
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
							break;

						case BUTTON_A:
							prev_state = state; // save old position
							if (state == s1_s) state = t2_s;
							else state--; // new postion
							set_cow(prev_state, state);
							break;

						case BUTTON_4:
							add_data(&data[state], '4');
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
							CLCD_I2C_SetCursor(&LCD1, 3, state);
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
							break;

						case BUTTON_5:
							add_data(&data[state], '5');
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
							CLCD_I2C_SetCursor(&LCD1, 3, state);
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
							break;

						case BUTTON_6:
							add_data(&data[state], '6');
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
							CLCD_I2C_SetCursor(&LCD1, 3, state);
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
							break;

						case BUTTON_B:
							prev_state = state; // save old position
							if (state == t2_s) state = s1_s;
							else state++; // new position
							set_cow(prev_state, state);
							break;

						case BUTTON_7:
							add_data(&data[state], '7');
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
							CLCD_I2C_SetCursor(&LCD1, 3, state);
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
							break;

						case BUTTON_8:
							add_data(&data[state], '8');
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
							CLCD_I2C_SetCursor(&LCD1, 3, state);
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
							break;

						case BUTTON_9:
							add_data(&data[state], '9');
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
							CLCD_I2C_SetCursor(&LCD1, 3, state);
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
							break;

						case BUTTON_C:
							delete_data(&data[state]);
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
							CLCD_I2C_SetCursor(&LCD1, 3+data[state].len, state);
							CLCD_I2C_WriteString(&LCD1, " ");
							CLCD_I2C_SetCursor(&LCD1, 3, state);
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
							break;

						case BUTTON_Star:
							CLCD_I2C_WriteString(&LCD1, "*");
							break;

						case BUTTON_0:
							add_data(&data[state], '0');
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
							CLCD_I2C_SetCursor(&LCD1, 3, state);
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
							break;

						case BUTTON_Hash:
							CLCD_I2C_WriteString(&LCD1, "#");
							break;

						case BUTTON_D:
							 menu_state = ENTER_PASSWORD;
							 CLCD_I2C_Clear(&LCD1);
							 CLCD_I2C_SetCursor(&LCD1, 2, 0);
							 CLCD_I2C_WriteString(&LCD1, "change password");
							 CLCD_I2C_SetCursor(&LCD1, 0, 1);
							 CLCD_I2C_WriteString(&LCD1, "Enter:");
							 CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							 break;

						default:
							 break;
							 }// end switch
					break;
				case SAVE_PARAMETER:
					switch (btn_value) {
							case BUTTON_A:
								break;
							case BUTTON_B:
								break;
							case BUTTON_Star:
								 CLCD_I2C_WriteString(&LCD1, "*");
								break;

							case BUTTON_Hash:
								 CLCD_I2C_WriteString(&LCD1, "#");
								break;

							case BUTTON_D:
								 menu_state = SET_PARAMETER;
								 CLCD_I2C_Clear(&LCD1);
								 CLCD_I2C_SetCursor(&LCD1, 0, 0);
								 CLCD_I2C_WriteString(&LCD1, "s1:");
								 CLCD_I2C_SetCursor(&LCD1, 19, state);
								 CLCD_I2C_WriteString(&LCD1, "<");
								 CLCD_I2C_SetCursor(&LCD1, 3, 0);
								 CLCD_I2C_WriteString(&LCD1, (char*)data[0].payload);
								 CLCD_I2C_SetCursor(&LCD1, 0, 1);
								 CLCD_I2C_WriteString(&LCD1, "t1:");
								 CLCD_I2C_SetCursor(&LCD1, 3, 1);
								 CLCD_I2C_WriteString(&LCD1, (char*)data[1].payload);
								 CLCD_I2C_SetCursor(&LCD1, 0, 2);
								 CLCD_I2C_WriteString(&LCD1, "s1:");
								 CLCD_I2C_SetCursor(&LCD1, 3, 2);
								 CLCD_I2C_WriteString(&LCD1, (char*)data[2].payload);
								 CLCD_I2C_SetCursor(&LCD1, 0, 3);
								 CLCD_I2C_WriteString(&LCD1, "s1:");
								 CLCD_I2C_SetCursor(&LCD1, 3, 3);
								 CLCD_I2C_WriteString(&LCD1, (char*)data[3].payload);
								 break;

							 default:
								 break;
						 }// end switch
					break;
				case ENTER_PASSWORD:
					switch (btn_value) {
						case BUTTON_1:
							add_data(&password, '1');
							printf("len=%d, payload=%s\n", password.len, password.payload);
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							break;

						case BUTTON_2:
							add_data(&password, '2');
							printf("len=%d, payload=%s\n", password.len, password.payload);
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							break;

						case BUTTON_3:
							add_data(&password, '3');
							printf("len=%d, payload=%s\n", password.len, password.payload);
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							break;

						case BUTTON_4:
							add_data(&password, '4');
							printf("len=%d, payload=%s\n", password.len, password.payload);
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							break;

						case BUTTON_5:
							add_data(&password, '5');
							printf("len=%d, payload=%s\n", password.len, password.payload);
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							break;

						 case BUTTON_6:
							add_data(&password, '6');
							printf("len=%d, payload=%s\n", password.len, password.payload);
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							break;

						 case BUTTON_7:
							add_data(&password, '7');
							printf("len=%d, payload=%s\n", password.len, password.payload);
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							break;

						 case BUTTON_8:
							add_data(&password, '8');
							printf("len=%d, payload=%s\n", password.len, password.payload);
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							break;

						 case BUTTON_9:
							add_data(&password, '9');
							printf("len=%d, payload=%s\n", password.len, password.payload);
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							break;

						 case BUTTON_C:
							delete_data(&password);
							printf("len=%d, payload=%s\n", password.len, password.payload);
							CLCD_I2C_SetCursor(&LCD1, 6+password.len, 1);
							CLCD_I2C_WriteString(&LCD1, " ");
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							break;

						 case BUTTON_Star:
							 CLCD_I2C_WriteString(&LCD1, "*");
							 break;

						 case BUTTON_0:
							add_data(&password, '0');
							printf("len=%d, payload=%s\n", password.len, password.payload);
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							 break;

						 case BUTTON_Hash:
							 CLCD_I2C_WriteString(&LCD1, "#");
							 break;

						 case BUTTON_D:
							 menu_state = SAVE_PARAMETER;
							 CLCD_I2C_Clear(&LCD1);
							 CLCD_I2C_SetCursor(&LCD1, 0, 0);
							 CLCD_I2C_WriteString(&LCD1, "Save new parameter?");
							 CLCD_I2C_SetCursor(&LCD1, 2, 1);
							 CLCD_I2C_WriteString(&LCD1, "YES(A)");
							 CLCD_I2C_SetCursor(&LCD1, 10, 1);
							 CLCD_I2C_WriteString(&LCD1, "NO(B)");
							 break;

						 default:
							 break;
						 }// end switch
					break;
	  		     }
	  	}
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
  hi2c3.Init.ClockSpeed = 100000;
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
