/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "fatfs_sd.h"
#include <string.h>
#include <stdio.h>
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "LCD_I2C.h"
#include "print_cli.h"
#include "flash.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI2_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
FATFS fs;  // file system
FIL fil; // File
FILINFO fno;
FRESULT fresult;  // result
UINT br, bw;  // File read/write count

/**** capacity related *****/
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

#define BUFFER_SIZE 128
char buffer[BUFFER_SIZE];  // to store strings..

TaskHandle_t handle_sensor_task;
TaskHandle_t handle_print_task;
TaskHandle_t handle_scan_keypad_task;
TaskHandle_t handle_config_task;

void sensor_task(void *param);
void print_task(void *param);
void scan_keypad_task(void *param);
void config_task(void *param);

QueueHandle_t q_print;

CLCD_I2C_Name LCD1;

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
  if(Timer1 > 0)
    Timer1--;

  if(Timer2 > 0)
    Timer2--;
}
int bufsize (char *buf)
{
	int i=0;
	while (*buf++ != '\0') i++;
	return i;
}
typedef struct
{
	uint8_t password[11];
	uint8_t s1;
	uint8_t t1;
	uint8_t s2;
	uint8_t t2;
	uint16_t file_counter;
}__attribute__((packed))Parameter_Infor;

void clear_buffer (void)
{
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
}

Parameter_Infor parameter =
{
		"123123",
		80,
		5,
		20,
		5,
		0
};

Parameter_Infor parameter_read;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	BaseType_t status;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI2_Init();
  MX_FATFS_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
//    fresult = f_mount(&fs, "/", 1);
//  	if (fresult != FR_OK)  printf("ERROR!!! in mounting SD CARD...\n\n");
//  	else printf("SD CARD mounted successfully...\n\n");
//
//
//  	/*************** Card capacity details ********************/
//
//  	/* Check free space */
//  	f_getfree("", &fre_clust, &pfs);
//
//  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
//  	printf("SD CARD Total Size: \t%lu\n",total);
//  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
//  	printf("SD CARD Free Space: \t%lu\n\n",free_space);
//
//
//
//  	/************* The following operation is using PUTS and GETS *********************/
//
//  	/* Open file to write/ create a file if it doesn't exist */
//      fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
//
//  	/* Writing text */
//  	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
//
//  	/* Close file */
//  	fresult = f_close(&fil);
//
//  	if (fresult == FR_OK) printf("File1.txt created and the data is written \n");
//
//  	/* Open file to read */
//  	fresult = f_open(&fil, "file1.txt", FA_READ);
//
//  	/* Read string from the file */
//  	f_gets(buffer, f_size(&fil), &fil);
//
//  	printf("File1.txt is opened and it contains the data as shown below\n");
//  	printf("%s",buffer);
//  	printf("\n\n");
//
//  	/* Close file */
//  	f_close(&fil);
  // write parameter into flash
     flash_unlock();
     flash_erease(FLASH_SECTOR_7);
     flash_write_arr(0x08060000,(uint8_t *)&parameter,sizeof(parameter));
     flash_lock();

  // read parameter from flash
//  flash_unlock();
  flash_read_arr(0x08060000, (uint8_t*)&parameter_read, sizeof(parameter_read));
//  flash_lock();
  print_cli("read first - s1:%d s2:%d s3:%d s4:%d count:%d\n",parameter_read.s1,parameter_read.t1,parameter_read.s2,parameter_read.t2,parameter_read.file_counter);
  char str[10];
  sprintf(str, "file%d", parameter_read.file_counter++);
  print_cli("%s\n",str);
    fresult = f_mount(&fs, "/", 1);
	if (fresult != FR_OK)  print_cli("ERROR!!! in mounting SD CARD...\n\n");
	else print_cli("SD CARD mounted successfully...\n\n");

	CLCD_I2C_Init(&LCD1,&hi2c1,0x4e,20,4);
	CLCD_I2C_SetCursor(&LCD1, 0, 0);

    status = xTaskCreate(sensor_task, "sensor_task", 250, NULL, 2, &handle_sensor_task);

    configASSERT(status);

    status = xTaskCreate(scan_keypad_task, "scan_keypad_task", 250, NULL, 2, &handle_scan_keypad_task);

    configASSERT(status);

    status = xTaskCreate(config_task, "config_task", 250, NULL, 2, &handle_config_task);

    configASSERT(status);

    status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);

    configASSERT(status);

    q_print = xQueueCreate(10, sizeof(size_t));

    configASSERT(q_print != NULL);

    printf("created tasks sucessfully\n");



    vTaskStartScheduler();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void sensor_task(void *param){
	while(1){
		CLCD_I2C_WriteString(&LCD1, "sensor");
		printf("sensor task\n");
		vTaskDelay(1000);
	}
}
void print_task(void *param){
	while(1){
//	    fresult = f_mount(&fs, "/", 1);
//	  	if (fresult != FR_OK)  printf("ERROR!!! in mounting SD CARD...\n\n");
//	  	else printf("SD CARD mounted successfully...\n\n");


//	  	/*************** Card capacity details ********************/
//
//	  	/* Check free space */
//	  	f_getfree("", &fre_clust, &pfs);
//
//	  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
//	  	printf("SD CARD Total Size: \t%lu\n",total);
//	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
//	  	printf("SD CARD Free Space: \t%lu\n\n",free_space);
//
//
//
//	  	/************* The following operation is using PUTS and GETS *********************/
//
//	  	/* Open file to write/ create a file if it doesn't exist */
//	      fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
//
//	  	/* Writing text */
//	  	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
//
//	  	/* Close file */
//	  	fresult = f_close(&fil);
//
//	  	if (fresult == FR_OK) printf("File1.txt created and the data is written \n");
//
//	  	/* Open file to read */
//	  	fresult = f_open(&fil, "file1.txt", FA_READ);
//
//	  	/* Read string from the file */
//	  	f_gets(buffer, f_size(&fil), &fil);
//
//	  	printf("File1.txt is opened and it contains the data as shown below\n");
//	  	printf("%s",buffer);
//	  	CLCD_I2C_Clear(&LCD1);
//	  	CLCD_I2C_WriteString(&LCD1, buffer);
//	  	printf("\n\n");
//
//	  	/* Close file */
//	  	f_close(&fil);

	  	/**************** The following operation is using f_write and f_read **************************/

	  	/* Create second file with read write access and open it */
	  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);

	  	/* Writing text */
	  	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");

	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);

	  	printf("File2.txt created and data is written\n");

	  	/* Close file */
	  	f_close(&fil);



	  	// clearing buffer to show that result obtained is from the file
	  	clear_buffer();

	  	/* Open second file to read */
	  	fresult = f_open(&fil, "file2.txt", FA_READ);
	  	if (fresult == FR_OK) printf("file2.txt is open and the data is shown below\n");

	  	/* Read data from the file
	  	 * Please see the function details for the arguments */
	  	f_read (&fil, buffer, f_size(&fil), &br);
	  		  	CLCD_I2C_Clear(&LCD1);
	  		  	CLCD_I2C_WriteString(&LCD1, buffer);
	  	printf("%s\n",buffer);
	  	printf("\n\n");

	  	/* Close file */
	  	f_close(&fil);

	  	clear_buffer();

	  	vTaskDelay(pdMS_TO_TICKS(5000));


	}

}
void scan_keypad_task(void *param){
	while(1){

	}
}
void config_task(void *param){

	while(1){

	}

}
/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM4 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */
	  FatFsCnt++;
	  if(FatFsCnt >= 10)
	  {
	    FatFsCnt = 0;
	    SDTimer_Handler();
	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
