/*
 * flash.c
 *
 *  Created on: Mar 26, 2025
 *      Author: Pham Huy Tuyen
 */

#include "flash.h"

void flash_unlock()
{
	HAL_FLASH_Unlock();
}

void flash_lock()
{
  HAL_FLASH_Lock();
}
HAL_StatusTypeDef status flash_erease(uint32_t sector)
{
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.Sector = sector;  //This parameter must be a value of @ref FLASHEx_Sectors
	eraseInit.NbSectors = 1;
	eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
	eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	uint32_t PageError;
	return HAL_FLASHEx_Erase(&eraseInit,&PageError);
}
void flash_write_arr(uint32_t addr,uint8_t *data,uint16_t len)
{
	 for(uint16_t i=0;i<len;i+=2)
	{
		 HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr+i ,*(data + i) | (uint16_t)*(data+i+1)<<8);
	 }
}
void flash_read_arr(uint32_t addr,uint8_t *data,uint16_t len)
{
	 for(uint16_t i=0;i<len;i+=2){
		 volatile uint32_t *p= (volatile uint32_t *)(addr+i);
		 uint16_t data_temp=*p;
		 //cach 1
//		 data[i] = data_temp;
//		 data[i+1] = data_temp>>8;
		 //cach 2
		 *(data+i) = data_temp;
		 *(data+i+1) = data_temp>>8;
	 }
}
