
lcd_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007f90  08007f90  00008f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080b8  080080b8  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  080080b8  080080b8  000090b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080c0  080080c0  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080c0  080080c0  000090c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080c4  080080c4  000090c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080080c8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001369c  20000070  08008138  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001370c  08008138  0000a70c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c25  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ba4  00000000  00000000  00023cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  00027870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f7  00000000  00000000  000290f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bff1  00000000  00000000  0002a3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c61a  00000000  00000000  000463e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b092d  00000000  00000000  000629fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113327  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf0  00000000  00000000  0011336c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0011a05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f78 	.word	0x08007f78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007f78 	.word	0x08007f78

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ff4 	.word	0x20012ff4

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <CLCD_Delay>:
******************************************************************************************************************/
#include "LCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 ff9f 	bl	80014b4 <HAL_Delay>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b086      	sub	sp, #24
 8000582:	af02      	add	r7, sp, #8
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	460b      	mov	r3, r1
 8000588:	70fb      	strb	r3, [r7, #3]
 800058a:	4613      	mov	r3, r2
 800058c:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800058e:	78fb      	ldrb	r3, [r7, #3]
 8000590:	f023 030f 	bic.w	r3, r3, #15
 8000594:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000596:	78fb      	ldrb	r3, [r7, #3]
 8000598:	011b      	lsls	r3, r3, #4
 800059a:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7adb      	ldrb	r3, [r3, #11]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d007      	beq.n	80005b4 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	f043 0308 	orr.w	r3, r3, #8
 80005aa:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 80005ac:	7bbb      	ldrb	r3, [r7, #14]
 80005ae:	f043 0308 	orr.w	r3, r3, #8
 80005b2:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80005b4:	78bb      	ldrb	r3, [r7, #2]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d108      	bne.n	80005cc <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80005c2:	7bbb      	ldrb	r3, [r7, #14]
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	73bb      	strb	r3, [r7, #14]
 80005ca:	e00a      	b.n	80005e2 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80005cc:	78bb      	ldrb	r3, [r7, #2]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d107      	bne.n	80005e2 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	f023 0301 	bic.w	r3, r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80005da:	7bbb      	ldrb	r3, [r7, #14]
 80005dc:	f023 0301 	bic.w	r3, r3, #1
 80005e0:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f7ff ffb9 	bl	8000564 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f7ff ffaf 	bl	8000564 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	4619      	mov	r1, r3
 8000614:	f107 0208 	add.w	r2, r7, #8
 8000618:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2304      	movs	r3, #4
 8000620:	f001 fb48 	bl	8001cb4 <HAL_I2C_Master_Transmit>
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	4611      	mov	r1, r2
 8000638:	461a      	mov	r2, r3
 800063a:	460b      	mov	r3, r1
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	4613      	mov	r3, r2
 8000640:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	79fa      	ldrb	r2, [r7, #7]
 800064c:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	79ba      	ldrb	r2, [r7, #6]
 8000652:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	7e3a      	ldrb	r2, [r7, #24]
 8000658:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2228      	movs	r2, #40	@ 0x28
 800065e:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2206      	movs	r2, #6
 8000664:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	220c      	movs	r2, #12
 800066a:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2214      	movs	r2, #20
 8000670:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2208      	movs	r2, #8
 8000676:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000678:	2032      	movs	r0, #50	@ 0x32
 800067a:	f7ff ff73 	bl	8000564 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800067e:	2200      	movs	r2, #0
 8000680:	2133      	movs	r1, #51	@ 0x33
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	f7ff ff7b 	bl	800057e <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000688:	2200      	movs	r2, #0
 800068a:	2133      	movs	r1, #51	@ 0x33
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f7ff ff76 	bl	800057e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000692:	2005      	movs	r0, #5
 8000694:	f7ff ff66 	bl	8000564 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000698:	2200      	movs	r2, #0
 800069a:	2132      	movs	r1, #50	@ 0x32
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f7ff ff6e 	bl	800057e <CLCD_WriteI2C>
	CLCD_Delay(5);
 80006a2:	2005      	movs	r0, #5
 80006a4:	f7ff ff5e 	bl	8000564 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2120      	movs	r1, #32
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f7ff ff66 	bl	800057e <CLCD_WriteI2C>
	CLCD_Delay(5);
 80006b2:	2005      	movs	r0, #5
 80006b4:	f7ff ff56 	bl	8000564 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	79db      	ldrb	r3, [r3, #7]
 80006bc:	2200      	movs	r2, #0
 80006be:	4619      	mov	r1, r3
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f7ff ff5c 	bl	800057e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	7a1b      	ldrb	r3, [r3, #8]
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f7ff ff55 	bl	800057e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	7a5b      	ldrb	r3, [r3, #9]
 80006d8:	2200      	movs	r2, #0
 80006da:	4619      	mov	r1, r3
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	f7ff ff4e 	bl	800057e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	7a9b      	ldrb	r3, [r3, #10]
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f7ff ff47 	bl	800057e <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2101      	movs	r1, #1
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f7ff ff42 	bl	800057e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2102      	movs	r1, #2
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f7ff ff3d 	bl	800057e <CLCD_WriteI2C>
}
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
 8000718:	4613      	mov	r3, r2
 800071a:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 800071c:	2300      	movs	r3, #0
 800071e:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	795b      	ldrb	r3, [r3, #5]
 8000724:	78fa      	ldrb	r2, [r7, #3]
 8000726:	429a      	cmp	r2, r3
 8000728:	d303      	bcc.n	8000732 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	795b      	ldrb	r3, [r3, #5]
 800072e:	3b01      	subs	r3, #1
 8000730:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	799b      	ldrb	r3, [r3, #6]
 8000736:	78ba      	ldrb	r2, [r7, #2]
 8000738:	429a      	cmp	r2, r3
 800073a:	d303      	bcc.n	8000744 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	799b      	ldrb	r3, [r3, #6]
 8000740:	3b01      	subs	r3, #1
 8000742:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000744:	78bb      	ldrb	r3, [r7, #2]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d102      	bne.n	8000750 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 800074a:	78fb      	ldrb	r3, [r7, #3]
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	e013      	b.n	8000778 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000750:	78bb      	ldrb	r3, [r7, #2]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d103      	bne.n	800075e <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	3340      	adds	r3, #64	@ 0x40
 800075a:	73fb      	strb	r3, [r7, #15]
 800075c:	e00c      	b.n	8000778 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800075e:	78bb      	ldrb	r3, [r7, #2]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d103      	bne.n	800076c <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	3314      	adds	r3, #20
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	e005      	b.n	8000778 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 800076c:	78bb      	ldrb	r3, [r7, #2]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d102      	bne.n	8000778 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	3354      	adds	r3, #84	@ 0x54
 8000776:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2200      	movs	r2, #0
 8000782:	4619      	mov	r1, r3
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fefa 	bl	800057e <CLCD_WriteI2C>
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	460b      	mov	r3, r1
 800079c:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff feea 	bl	800057e <CLCD_WriteI2C>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80007bc:	e007      	b.n	80007ce <CLCD_I2C_WriteString+0x1c>
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	603a      	str	r2, [r7, #0]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4619      	mov	r1, r3
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ffe2 	bl	8000792 <CLCD_I2C_WriteChar>
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f3      	bne.n	80007be <CLCD_I2C_WriteString+0xc>
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <process_button_pad_value>:
 *
 */
#include "keypad.h"
//////////////////////button fuctions/////////////////////////////
uint16_t process_button_pad_value(uint16_t btn_pad_value)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]
  static button_state_t btn_sm_state = NOT_PRESSED;
  static uint32_t curr_time = 0;

  switch(btn_sm_state){
 80007ea:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <process_button_pad_value+0xb0>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d026      	beq.n	8000840 <process_button_pad_value+0x60>
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	dc47      	bgt.n	8000886 <process_button_pad_value+0xa6>
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <process_button_pad_value+0x20>
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d00c      	beq.n	8000818 <process_button_pad_value+0x38>
 80007fe:	e042      	b.n	8000886 <process_button_pad_value+0xa6>
    case NOT_PRESSED:{
      if(btn_pad_value){
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d03a      	beq.n	800087c <process_button_pad_value+0x9c>
        btn_sm_state = BOUNCE;
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <process_button_pad_value+0xb0>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
        curr_time = HAL_GetTick();
 800080c:	f000 fe46 	bl	800149c <HAL_GetTick>
 8000810:	4603      	mov	r3, r0
 8000812:	4a20      	ldr	r2, [pc, #128]	@ (8000894 <process_button_pad_value+0xb4>)
 8000814:	6013      	str	r3, [r2, #0]
      }
      break;
 8000816:	e031      	b.n	800087c <process_button_pad_value+0x9c>
    }
    case BOUNCE:{
      if(HAL_GetTick() - curr_time >= 50 ){
 8000818:	f000 fe40 	bl	800149c <HAL_GetTick>
 800081c:	4602      	mov	r2, r0
 800081e:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <process_button_pad_value+0xb4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	2b31      	cmp	r3, #49	@ 0x31
 8000826:	d92b      	bls.n	8000880 <process_button_pad_value+0xa0>
        //50ms has passed
        if(btn_pad_value){
 8000828:	88fb      	ldrh	r3, [r7, #6]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d004      	beq.n	8000838 <process_button_pad_value+0x58>
          btn_sm_state = PRESSED;
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <process_button_pad_value+0xb0>)
 8000830:	2202      	movs	r2, #2
 8000832:	701a      	strb	r2, [r3, #0]
          return btn_pad_value;
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	e027      	b.n	8000888 <process_button_pad_value+0xa8>
        }
        else
          btn_sm_state = NOT_PRESSED;
 8000838:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <process_button_pad_value+0xb0>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800083e:	e01f      	b.n	8000880 <process_button_pad_value+0xa0>
    }
    case PRESSED:{
      if(!btn_pad_value){
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d108      	bne.n	8000858 <process_button_pad_value+0x78>
        btn_sm_state = BOUNCE;
 8000846:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <process_button_pad_value+0xb0>)
 8000848:	2201      	movs	r2, #1
 800084a:	701a      	strb	r2, [r3, #0]
        curr_time = HAL_GetTick();
 800084c:	f000 fe26 	bl	800149c <HAL_GetTick>
 8000850:	4603      	mov	r3, r0
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <process_button_pad_value+0xb4>)
 8000854:	6013      	str	r3, [r2, #0]
				if(HAL_GetTick() - curr_time >= 300 ){
					btn_sm_state = BOUNCE;
					curr_time = HAL_GetTick();
				}
			}
      break;
 8000856:	e015      	b.n	8000884 <process_button_pad_value+0xa4>
				if(HAL_GetTick() - curr_time >= 300 ){
 8000858:	f000 fe20 	bl	800149c <HAL_GetTick>
 800085c:	4602      	mov	r2, r0
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <process_button_pad_value+0xb4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000868:	d30c      	bcc.n	8000884 <process_button_pad_value+0xa4>
					btn_sm_state = BOUNCE;
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <process_button_pad_value+0xb0>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
					curr_time = HAL_GetTick();
 8000870:	f000 fe14 	bl	800149c <HAL_GetTick>
 8000874:	4603      	mov	r3, r0
 8000876:	4a07      	ldr	r2, [pc, #28]	@ (8000894 <process_button_pad_value+0xb4>)
 8000878:	6013      	str	r3, [r2, #0]
      break;
 800087a:	e003      	b.n	8000884 <process_button_pad_value+0xa4>
      break;
 800087c:	bf00      	nop
 800087e:	e002      	b.n	8000886 <process_button_pad_value+0xa6>
      break;
 8000880:	bf00      	nop
 8000882:	e000      	b.n	8000886 <process_button_pad_value+0xa6>
      break;
 8000884:	bf00      	nop
    }

  }

  return 0;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000008c 	.word	0x2000008c
 8000894:	20000090 	.word	0x20000090

08000898 <read_keypad>:


uint16_t read_keypad (void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint16_t key_state = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	80fb      	strh	r3, [r7, #6]
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  //Pull the R1 low
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008a8:	488d      	ldr	r0, [pc, #564]	@ (8000ae0 <read_keypad+0x248>)
 80008aa:	f001 f8a5 	bl	80019f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008b4:	488a      	ldr	r0, [pc, #552]	@ (8000ae0 <read_keypad+0x248>)
 80008b6:	f001 f89f 	bl	80019f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c0:	4887      	ldr	r0, [pc, #540]	@ (8000ae0 <read_keypad+0x248>)
 80008c2:	f001 f899 	bl	80019f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008cc:	4884      	ldr	r0, [pc, #528]	@ (8000ae0 <read_keypad+0x248>)
 80008ce:	f001 f893 	bl	80019f8 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 80008d2:	2140      	movs	r1, #64	@ 0x40
 80008d4:	4883      	ldr	r0, [pc, #524]	@ (8000ae4 <read_keypad+0x24c>)
 80008d6:	f001 f877 	bl	80019c8 <HAL_GPIO_ReadPin>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d103      	bne.n	80008e8 <read_keypad+0x50>
	{
		key_state |= (1 << 0); // button 1
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 80008e8:	2180      	movs	r1, #128	@ 0x80
 80008ea:	487e      	ldr	r0, [pc, #504]	@ (8000ae4 <read_keypad+0x24c>)
 80008ec:	f001 f86c 	bl	80019c8 <HAL_GPIO_ReadPin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d103      	bne.n	80008fe <read_keypad+0x66>
	{
		key_state |= (1 << 1); // button 2
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 80008fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000902:	4878      	ldr	r0, [pc, #480]	@ (8000ae4 <read_keypad+0x24c>)
 8000904:	f001 f860 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d103      	bne.n	8000916 <read_keypad+0x7e>
	{
		key_state |= (1 << 2); // button 3
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8000916:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800091a:	4872      	ldr	r0, [pc, #456]	@ (8000ae4 <read_keypad+0x24c>)
 800091c:	f001 f854 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d103      	bne.n	800092e <read_keypad+0x96>
	{
		key_state |= (1 << 3); // button A
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	80fb      	strh	r3, [r7, #6]
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000934:	486a      	ldr	r0, [pc, #424]	@ (8000ae0 <read_keypad+0x248>)
 8000936:	f001 f85f 	bl	80019f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Pull the R2 High
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000940:	4867      	ldr	r0, [pc, #412]	@ (8000ae0 <read_keypad+0x248>)
 8000942:	f001 f859 	bl	80019f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800094c:	4864      	ldr	r0, [pc, #400]	@ (8000ae0 <read_keypad+0x248>)
 800094e:	f001 f853 	bl	80019f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000958:	4861      	ldr	r0, [pc, #388]	@ (8000ae0 <read_keypad+0x248>)
 800095a:	f001 f84d 	bl	80019f8 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 800095e:	2140      	movs	r1, #64	@ 0x40
 8000960:	4860      	ldr	r0, [pc, #384]	@ (8000ae4 <read_keypad+0x24c>)
 8000962:	f001 f831 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d103      	bne.n	8000974 <read_keypad+0xdc>
	{
		key_state |= (1 << 4); // button 4
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	f043 0310 	orr.w	r3, r3, #16
 8000972:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8000974:	2180      	movs	r1, #128	@ 0x80
 8000976:	485b      	ldr	r0, [pc, #364]	@ (8000ae4 <read_keypad+0x24c>)
 8000978:	f001 f826 	bl	80019c8 <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d103      	bne.n	800098a <read_keypad+0xf2>
	{
		key_state |= (1 << 5); // button 5
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	f043 0320 	orr.w	r3, r3, #32
 8000988:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 800098a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800098e:	4855      	ldr	r0, [pc, #340]	@ (8000ae4 <read_keypad+0x24c>)
 8000990:	f001 f81a 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d103      	bne.n	80009a2 <read_keypad+0x10a>
	{
		key_state |= (1 << 6); // button 6
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009a0:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 80009a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009a6:	484f      	ldr	r0, [pc, #316]	@ (8000ae4 <read_keypad+0x24c>)
 80009a8:	f001 f80e 	bl	80019c8 <HAL_GPIO_ReadPin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d103      	bne.n	80009ba <read_keypad+0x122>
	{
		key_state |= (1 << 7); // button B
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b8:	80fb      	strh	r3, [r7, #6]
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009c0:	4847      	ldr	r0, [pc, #284]	@ (8000ae0 <read_keypad+0x248>)
 80009c2:	f001 f819 	bl	80019f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009cc:	4844      	ldr	r0, [pc, #272]	@ (8000ae0 <read_keypad+0x248>)
 80009ce:	f001 f813 	bl	80019f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Pull the R3 High
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d8:	4841      	ldr	r0, [pc, #260]	@ (8000ae0 <read_keypad+0x248>)
 80009da:	f001 f80d 	bl	80019f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e4:	483e      	ldr	r0, [pc, #248]	@ (8000ae0 <read_keypad+0x248>)
 80009e6:	f001 f807 	bl	80019f8 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 80009ea:	2140      	movs	r1, #64	@ 0x40
 80009ec:	483d      	ldr	r0, [pc, #244]	@ (8000ae4 <read_keypad+0x24c>)
 80009ee:	f000 ffeb 	bl	80019c8 <HAL_GPIO_ReadPin>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d103      	bne.n	8000a00 <read_keypad+0x168>
	{
		key_state |= (1 << 8); // button 7
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009fe:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8000a00:	2180      	movs	r1, #128	@ 0x80
 8000a02:	4838      	ldr	r0, [pc, #224]	@ (8000ae4 <read_keypad+0x24c>)
 8000a04:	f000 ffe0 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d103      	bne.n	8000a16 <read_keypad+0x17e>
	{
		key_state |= (1 << 9); // button 8
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a14:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8000a16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a1a:	4832      	ldr	r0, [pc, #200]	@ (8000ae4 <read_keypad+0x24c>)
 8000a1c:	f000 ffd4 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d103      	bne.n	8000a2e <read_keypad+0x196>
	{
		key_state |= (1 << 10); // button 9
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a2c:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8000a2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a32:	482c      	ldr	r0, [pc, #176]	@ (8000ae4 <read_keypad+0x24c>)
 8000a34:	f000 ffc8 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d103      	bne.n	8000a46 <read_keypad+0x1ae>
	{
		key_state |= (1 << 11); // button C
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a44:	80fb      	strh	r3, [r7, #6]
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a4c:	4824      	ldr	r0, [pc, #144]	@ (8000ae0 <read_keypad+0x248>)
 8000a4e:	f000 ffd3 	bl	80019f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8000a52:	2201      	movs	r2, #1
 8000a54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a58:	4821      	ldr	r0, [pc, #132]	@ (8000ae0 <read_keypad+0x248>)
 8000a5a:	f000 ffcd 	bl	80019f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a64:	481e      	ldr	r0, [pc, #120]	@ (8000ae0 <read_keypad+0x248>)
 8000a66:	f000 ffc7 	bl	80019f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Pull the R4 High
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a70:	481b      	ldr	r0, [pc, #108]	@ (8000ae0 <read_keypad+0x248>)
 8000a72:	f000 ffc1 	bl	80019f8 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8000a76:	2140      	movs	r1, #64	@ 0x40
 8000a78:	481a      	ldr	r0, [pc, #104]	@ (8000ae4 <read_keypad+0x24c>)
 8000a7a:	f000 ffa5 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d103      	bne.n	8000a8c <read_keypad+0x1f4>
	{
		key_state |= (1 << 12); // button *
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a8a:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8000a8c:	2180      	movs	r1, #128	@ 0x80
 8000a8e:	4815      	ldr	r0, [pc, #84]	@ (8000ae4 <read_keypad+0x24c>)
 8000a90:	f000 ff9a 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d103      	bne.n	8000aa2 <read_keypad+0x20a>
	{
		key_state |= (1 << 13); // button 0
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000aa0:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8000aa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aa6:	480f      	ldr	r0, [pc, #60]	@ (8000ae4 <read_keypad+0x24c>)
 8000aa8:	f000 ff8e 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d103      	bne.n	8000aba <read_keypad+0x222>
	{
		key_state |= (1 << 14); // button #
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab8:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8000aba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000abe:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <read_keypad+0x24c>)
 8000ac0:	f000 ff82 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d105      	bne.n	8000ad6 <read_keypad+0x23e>
	{
		key_state |= (1 << 15); // button D
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ad4:	80fb      	strh	r3, [r7, #6]
	}

	return key_state ;
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40020400 	.word	0x40020400
 8000ae4:	40020800 	.word	0x40020800

08000ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aee:	f000 fc9f 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af2:	f000 f8c1 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af6:	f000 f9a9 	bl	8000e4c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000afa:	f000 f957 	bl	8000dac <MX_TIM1_Init>
  MX_I2C1_Init();
 8000afe:	f000 f927 	bl	8000d50 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  CLCD_I2C_Init(&LCD1,&hi2c1,0x4e,20,4);
 8000b02:	2304      	movs	r3, #4
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2314      	movs	r3, #20
 8000b08:	224e      	movs	r2, #78	@ 0x4e
 8000b0a:	494a      	ldr	r1, [pc, #296]	@ (8000c34 <main+0x14c>)
 8000b0c:	484a      	ldr	r0, [pc, #296]	@ (8000c38 <main+0x150>)
 8000b0e:	f7ff fd8d 	bl	800062c <CLCD_I2C_Init>
  CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	4848      	ldr	r0, [pc, #288]	@ (8000c38 <main+0x150>)
 8000b18:	f7ff fdf8 	bl	800070c <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1,"key:");
 8000b1c:	4947      	ldr	r1, [pc, #284]	@ (8000c3c <main+0x154>)
 8000b1e:	4846      	ldr	r0, [pc, #280]	@ (8000c38 <main+0x150>)
 8000b20:	f7ff fe47 	bl	80007b2 <CLCD_I2C_WriteString>
  /* USER CODE END 2 */
  status = xTaskCreate(sensor_task, "sensor_task", 250, NULL, 2, &handle_sensor_task);
 8000b24:	4b46      	ldr	r3, [pc, #280]	@ (8000c40 <main+0x158>)
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	2302      	movs	r3, #2
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	22fa      	movs	r2, #250	@ 0xfa
 8000b30:	4944      	ldr	r1, [pc, #272]	@ (8000c44 <main+0x15c>)
 8000b32:	4845      	ldr	r0, [pc, #276]	@ (8000c48 <main+0x160>)
 8000b34:	f003 f8f5 	bl	8003d22 <xTaskCreate>
 8000b38:	6178      	str	r0, [r7, #20]

  configASSERT(status);
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10b      	bne.n	8000b58 <main+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <main+0x6c>

  status = xTaskCreate(scan_keypad_task, "scan_keypad_task", 250, NULL, 2, &handle_scan_keypad_task);
 8000b58:	4b3c      	ldr	r3, [pc, #240]	@ (8000c4c <main+0x164>)
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2300      	movs	r3, #0
 8000b62:	22fa      	movs	r2, #250	@ 0xfa
 8000b64:	493a      	ldr	r1, [pc, #232]	@ (8000c50 <main+0x168>)
 8000b66:	483b      	ldr	r0, [pc, #236]	@ (8000c54 <main+0x16c>)
 8000b68:	f003 f8db 	bl	8003d22 <xTaskCreate>
 8000b6c:	6178      	str	r0, [r7, #20]

  configASSERT(status);
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10b      	bne.n	8000b8c <main+0xa4>
    __asm volatile
 8000b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b78:	f383 8811 	msr	BASEPRI, r3
 8000b7c:	f3bf 8f6f 	isb	sy
 8000b80:	f3bf 8f4f 	dsb	sy
 8000b84:	60fb      	str	r3, [r7, #12]
}
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <main+0xa0>

  status = xTaskCreate(config_task, "config_task", 250, NULL, 2, &handle_config_task);
 8000b8c:	4b32      	ldr	r3, [pc, #200]	@ (8000c58 <main+0x170>)
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	2302      	movs	r3, #2
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2300      	movs	r3, #0
 8000b96:	22fa      	movs	r2, #250	@ 0xfa
 8000b98:	4930      	ldr	r1, [pc, #192]	@ (8000c5c <main+0x174>)
 8000b9a:	4831      	ldr	r0, [pc, #196]	@ (8000c60 <main+0x178>)
 8000b9c:	f003 f8c1 	bl	8003d22 <xTaskCreate>
 8000ba0:	6178      	str	r0, [r7, #20]

  configASSERT(status);
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d10b      	bne.n	8000bc0 <main+0xd8>
    __asm volatile
 8000ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bac:	f383 8811 	msr	BASEPRI, r3
 8000bb0:	f3bf 8f6f 	isb	sy
 8000bb4:	f3bf 8f4f 	dsb	sy
 8000bb8:	60bb      	str	r3, [r7, #8]
}
 8000bba:	bf00      	nop
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <main+0xd4>

  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8000bc0:	4b28      	ldr	r3, [pc, #160]	@ (8000c64 <main+0x17c>)
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	22fa      	movs	r2, #250	@ 0xfa
 8000bcc:	4926      	ldr	r1, [pc, #152]	@ (8000c68 <main+0x180>)
 8000bce:	4827      	ldr	r0, [pc, #156]	@ (8000c6c <main+0x184>)
 8000bd0:	f003 f8a7 	bl	8003d22 <xTaskCreate>
 8000bd4:	6178      	str	r0, [r7, #20]

  configASSERT(status);
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d10b      	bne.n	8000bf4 <main+0x10c>
    __asm volatile
 8000bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000be0:	f383 8811 	msr	BASEPRI, r3
 8000be4:	f3bf 8f6f 	isb	sy
 8000be8:	f3bf 8f4f 	dsb	sy
 8000bec:	607b      	str	r3, [r7, #4]
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <main+0x108>

  q_print = xQueueCreate(10, sizeof(size_t));
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	200a      	movs	r0, #10
 8000bfa:	f002 fdd7 	bl	80037ac <xQueueGenericCreate>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a1b      	ldr	r2, [pc, #108]	@ (8000c70 <main+0x188>)
 8000c02:	6013      	str	r3, [r2, #0]

  configASSERT(q_print != NULL);
 8000c04:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <main+0x188>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d10b      	bne.n	8000c24 <main+0x13c>
    __asm volatile
 8000c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c10:	f383 8811 	msr	BASEPRI, r3
 8000c14:	f3bf 8f6f 	isb	sy
 8000c18:	f3bf 8f4f 	dsb	sy
 8000c1c:	603b      	str	r3, [r7, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <main+0x138>

  printf("created tasks sucessfully\n");
 8000c24:	4813      	ldr	r0, [pc, #76]	@ (8000c74 <main+0x18c>)
 8000c26:	f006 fe07 	bl	8007838 <puts>

  vTaskStartScheduler();
 8000c2a:	f003 fa6b 	bl	8004104 <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000c2e:	bf00      	nop
 8000c30:	e7fd      	b.n	8000c2e <main+0x146>
 8000c32:	bf00      	nop
 8000c34:	20000094 	.word	0x20000094
 8000c38:	20000130 	.word	0x20000130
 8000c3c:	08007f90 	.word	0x08007f90
 8000c40:	2000013c 	.word	0x2000013c
 8000c44:	08007f98 	.word	0x08007f98
 8000c48:	08000f91 	.word	0x08000f91
 8000c4c:	20000144 	.word	0x20000144
 8000c50:	08007fa4 	.word	0x08007fa4
 8000c54:	08000fc1 	.word	0x08000fc1
 8000c58:	20000148 	.word	0x20000148
 8000c5c:	08007fb8 	.word	0x08007fb8
 8000c60:	08001005 	.word	0x08001005
 8000c64:	20000140 	.word	0x20000140
 8000c68:	08007fc4 	.word	0x08007fc4
 8000c6c:	08000fb5 	.word	0x08000fb5
 8000c70:	2000014c 	.word	0x2000014c
 8000c74:	08007fd0 	.word	0x08007fd0

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b094      	sub	sp, #80	@ 0x50
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	2230      	movs	r2, #48	@ 0x30
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f006 fec6 	bl	8007a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	4b29      	ldr	r3, [pc, #164]	@ (8000d48 <SystemClock_Config+0xd0>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca4:	4a28      	ldr	r2, [pc, #160]	@ (8000d48 <SystemClock_Config+0xd0>)
 8000ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000caa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cac:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <SystemClock_Config+0xd0>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	4b23      	ldr	r3, [pc, #140]	@ (8000d4c <SystemClock_Config+0xd4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cc4:	4a21      	ldr	r2, [pc, #132]	@ (8000d4c <SystemClock_Config+0xd4>)
 8000cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <SystemClock_Config+0xd4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cec:	2310      	movs	r3, #16
 8000cee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cf0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cf4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cfa:	2307      	movs	r3, #7
 8000cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 fb30 	bl	8002368 <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d0e:	f000 f991 	bl	8001034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d12:	230f      	movs	r3, #15
 8000d14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d16:	2302      	movs	r3, #2
 8000d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fd92 	bl	8002858 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d3a:	f000 f97b 	bl	8001034 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3750      	adds	r7, #80	@ 0x50
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40007000 	.word	0x40007000

08000d50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d54:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <MX_I2C1_Init+0x50>)
 8000d56:	4a13      	ldr	r2, [pc, #76]	@ (8000da4 <MX_I2C1_Init+0x54>)
 8000d58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_I2C1_Init+0x50>)
 8000d5c:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <MX_I2C1_Init+0x58>)
 8000d5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <MX_I2C1_Init+0x50>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_I2C1_Init+0x50>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <MX_I2C1_Init+0x50>)
 8000d6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <MX_I2C1_Init+0x50>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_I2C1_Init+0x50>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d80:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <MX_I2C1_Init+0x50>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_I2C1_Init+0x50>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <MX_I2C1_Init+0x50>)
 8000d8e:	f000 fe4d 	bl	8001a2c <HAL_I2C_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d98:	f000 f94c 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000094 	.word	0x20000094
 8000da4:	40005400 	.word	0x40005400
 8000da8:	000186a0 	.word	0x000186a0

08000dac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e44 <MX_TIM1_Init+0x98>)
 8000dca:	4a1f      	ldr	r2, [pc, #124]	@ (8000e48 <MX_TIM1_Init+0x9c>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000dce:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <MX_TIM1_Init+0x98>)
 8000dd0:	2253      	movs	r2, #83	@ 0x53
 8000dd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e44 <MX_TIM1_Init+0x98>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <MX_TIM1_Init+0x98>)
 8000ddc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000de0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <MX_TIM1_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de8:	4b16      	ldr	r3, [pc, #88]	@ (8000e44 <MX_TIM1_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <MX_TIM1_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000df4:	4813      	ldr	r0, [pc, #76]	@ (8000e44 <MX_TIM1_Init+0x98>)
 8000df6:	f001 ff6d 	bl	8002cd4 <HAL_TIM_Base_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e00:	f000 f918 	bl	8001034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <MX_TIM1_Init+0x98>)
 8000e12:	f002 f901 	bl	8003018 <HAL_TIM_ConfigClockSource>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e1c:	f000 f90a 	bl	8001034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <MX_TIM1_Init+0x98>)
 8000e2e:	f002 fb09 	bl	8003444 <HAL_TIMEx_MasterConfigSynchronization>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e38:	f000 f8fc 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200000e8 	.word	0x200000e8
 8000e48:	40010000 	.word	0x40010000

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b46      	ldr	r3, [pc, #280]	@ (8000f80 <MX_GPIO_Init+0x134>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a45      	ldr	r2, [pc, #276]	@ (8000f80 <MX_GPIO_Init+0x134>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b43      	ldr	r3, [pc, #268]	@ (8000f80 <MX_GPIO_Init+0x134>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b3f      	ldr	r3, [pc, #252]	@ (8000f80 <MX_GPIO_Init+0x134>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a3e      	ldr	r2, [pc, #248]	@ (8000f80 <MX_GPIO_Init+0x134>)
 8000e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f80 <MX_GPIO_Init+0x134>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <MX_GPIO_Init+0x134>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a37      	ldr	r2, [pc, #220]	@ (8000f80 <MX_GPIO_Init+0x134>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b35      	ldr	r3, [pc, #212]	@ (8000f80 <MX_GPIO_Init+0x134>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b31      	ldr	r3, [pc, #196]	@ (8000f80 <MX_GPIO_Init+0x134>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a30      	ldr	r2, [pc, #192]	@ (8000f80 <MX_GPIO_Init+0x134>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f80 <MX_GPIO_Init+0x134>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	482b      	ldr	r0, [pc, #172]	@ (8000f84 <MX_GPIO_Init+0x138>)
 8000ed8:	f000 fd8e 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000ee2:	4829      	ldr	r0, [pc, #164]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000ee4:	f000 fd88 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ee8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4823      	ldr	r0, [pc, #140]	@ (8000f8c <MX_GPIO_Init+0x140>)
 8000f00:	f000 fbde 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f04:	230c      	movs	r3, #12
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f14:	2307      	movs	r3, #7
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4819      	ldr	r0, [pc, #100]	@ (8000f84 <MX_GPIO_Init+0x138>)
 8000f20:	f000 fbce 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f24:	2320      	movs	r3, #32
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4812      	ldr	r0, [pc, #72]	@ (8000f84 <MX_GPIO_Init+0x138>)
 8000f3c:	f000 fbc0 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f40:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	480b      	ldr	r0, [pc, #44]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000f5a:	f000 fbb1 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f5e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <MX_GPIO_Init+0x140>)
 8000f74:	f000 fba4 	bl	80016c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	@ 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40020800 	.word	0x40020800

08000f90 <sensor_task>:

/* USER CODE BEGIN 4 */
void sensor_task(void *param){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	while(1){
		CLCD_I2C_WriteString(&LCD1, "sensor");
 8000f98:	4904      	ldr	r1, [pc, #16]	@ (8000fac <sensor_task+0x1c>)
 8000f9a:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <sensor_task+0x20>)
 8000f9c:	f7ff fc09 	bl	80007b2 <CLCD_I2C_WriteString>
		vTaskDelay(1000);
 8000fa0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa4:	f003 f82c 	bl	8004000 <vTaskDelay>
		CLCD_I2C_WriteString(&LCD1, "sensor");
 8000fa8:	bf00      	nop
 8000faa:	e7f5      	b.n	8000f98 <sensor_task+0x8>
 8000fac:	08007fec 	.word	0x08007fec
 8000fb0:	20000130 	.word	0x20000130

08000fb4 <print_task>:
	}
}
void print_task(void *param){
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	while(1){
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <print_task+0x8>

08000fc0 <scan_keypad_task>:

	}

}
void scan_keypad_task(void *param){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	uint16_t btn_value;
	while(1){
		btn_value = process_button_pad_value(read_keypad());
 8000fc8:	f7ff fc66 	bl	8000898 <read_keypad>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fc06 	bl	80007e0 <process_button_pad_value>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	81fb      	strh	r3, [r7, #14]
		if(curr_state == sRunning){
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <scan_keypad_task+0x38>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d106      	bne.n	8000fee <scan_keypad_task+0x2e>
			if(btn_value == BUTTON_A_3){
 8000fe0:	89fb      	ldrh	r3, [r7, #14]
 8000fe2:	2b0c      	cmp	r3, #12
 8000fe4:	d103      	bne.n	8000fee <scan_keypad_task+0x2e>
				CLCD_I2C_WriteString(&LCD1, "config state");
 8000fe6:	4905      	ldr	r1, [pc, #20]	@ (8000ffc <scan_keypad_task+0x3c>)
 8000fe8:	4805      	ldr	r0, [pc, #20]	@ (8001000 <scan_keypad_task+0x40>)
 8000fea:	f7ff fbe2 	bl	80007b2 <CLCD_I2C_WriteString>
			}
		}
		else{

		}
		vTaskDelay(20);
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f003 f806 	bl	8004000 <vTaskDelay>
		btn_value = process_button_pad_value(read_keypad());
 8000ff4:	e7e8      	b.n	8000fc8 <scan_keypad_task+0x8>
 8000ff6:	bf00      	nop
 8000ff8:	20000150 	.word	0x20000150
 8000ffc:	08007ff4 	.word	0x08007ff4
 8001000:	20000130 	.word	0x20000130

08001004 <config_task>:
	}
}
void config_task(void *param){
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

	while(1){
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <config_task+0x8>

08001010 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001022:	f000 fa27 	bl	8001474 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40000800 	.word	0x40000800

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <Error_Handler+0x8>

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <HAL_MspInit+0x4c>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001054:	6453      	str	r3, [r2, #68]	@ 0x44
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <HAL_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	4a08      	ldr	r2, [pc, #32]	@ (800108c <HAL_MspInit+0x4c>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001070:	6413      	str	r3, [r2, #64]	@ 0x40
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_MspInit+0x4c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800

08001090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	@ 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a19      	ldr	r2, [pc, #100]	@ (8001114 <HAL_I2C_MspInit+0x84>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d12b      	bne.n	800110a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <HAL_I2C_MspInit+0x88>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <HAL_I2C_MspInit+0x88>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <HAL_I2C_MspInit+0x88>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ce:	23c0      	movs	r3, #192	@ 0xc0
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d2:	2312      	movs	r3, #18
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010de:	2304      	movs	r3, #4
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	@ (800111c <HAL_I2C_MspInit+0x8c>)
 80010ea:	f000 fae9 	bl	80016c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <HAL_I2C_MspInit+0x88>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	@ (8001118 <HAL_I2C_MspInit+0x88>)
 80010f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_I2C_MspInit+0x88>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	@ 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40005400 	.word	0x40005400
 8001118:	40023800 	.word	0x40023800
 800111c:	40020400 	.word	0x40020400

08001120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0b      	ldr	r2, [pc, #44]	@ (800115c <HAL_TIM_Base_MspInit+0x3c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d10d      	bne.n	800114e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_TIM_Base_MspInit+0x40>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <HAL_TIM_Base_MspInit+0x40>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <HAL_TIM_Base_MspInit+0x40>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40010000 	.word	0x40010000
 8001160:	40023800 	.word	0x40023800

08001164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	@ 0x38
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	4b33      	ldr	r3, [pc, #204]	@ (8001248 <HAL_InitTick+0xe4>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	4a32      	ldr	r2, [pc, #200]	@ (8001248 <HAL_InitTick+0xe4>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6413      	str	r3, [r2, #64]	@ 0x40
 8001184:	4b30      	ldr	r3, [pc, #192]	@ (8001248 <HAL_InitTick+0xe4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001190:	f107 0210 	add.w	r2, r7, #16
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fd68 	bl	8002c70 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d103      	bne.n	80011b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011aa:	f001 fd4d 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 80011ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80011b0:	e004      	b.n	80011bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011b2:	f001 fd49 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 80011b6:	4603      	mov	r3, r0
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011be:	4a23      	ldr	r2, [pc, #140]	@ (800124c <HAL_InitTick+0xe8>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	0c9b      	lsrs	r3, r3, #18
 80011c6:	3b01      	subs	r3, #1
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <HAL_InitTick+0xec>)
 80011cc:	4a21      	ldr	r2, [pc, #132]	@ (8001254 <HAL_InitTick+0xf0>)
 80011ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <HAL_InitTick+0xec>)
 80011d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011d6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80011d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001250 <HAL_InitTick+0xec>)
 80011da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011dc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80011de:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <HAL_InitTick+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <HAL_InitTick+0xec>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_InitTick+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80011f0:	4817      	ldr	r0, [pc, #92]	@ (8001250 <HAL_InitTick+0xec>)
 80011f2:	f001 fd6f 	bl	8002cd4 <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80011fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001200:	2b00      	cmp	r3, #0
 8001202:	d11b      	bne.n	800123c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001204:	4812      	ldr	r0, [pc, #72]	@ (8001250 <HAL_InitTick+0xec>)
 8001206:	f001 fdb5 	bl	8002d74 <HAL_TIM_Base_Start_IT>
 800120a:	4603      	mov	r3, r0
 800120c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001210:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001214:	2b00      	cmp	r3, #0
 8001216:	d111      	bne.n	800123c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001218:	201e      	movs	r0, #30
 800121a:	f000 fa43 	bl	80016a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d808      	bhi.n	8001236 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	201e      	movs	r0, #30
 800122a:	f000 fa1f 	bl	800166c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800122e:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <HAL_InitTick+0xf4>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	e002      	b.n	800123c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800123c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001240:	4618      	mov	r0, r3
 8001242:	3738      	adds	r7, #56	@ 0x38
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	431bde83 	.word	0x431bde83
 8001250:	20000154 	.word	0x20000154
 8001254:	40000800 	.word	0x40000800
 8001258:	20000004 	.word	0x20000004

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <NMI_Handler+0x4>

08001264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <MemManage_Handler+0x4>

08001274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <UsageFault_Handler+0x4>

08001284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <TIM4_IRQHandler+0x10>)
 800129a:	f001 fdcd 	bl	8002e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000154 	.word	0x20000154

080012a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e00a      	b.n	80012d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ba:	f3af 8000 	nop.w
 80012be:	4601      	mov	r1, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf0      	blt.n	80012ba <_read+0x12>
  }

  return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800130a:	605a      	str	r2, [r3, #4]
  return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_isatty>:

int _isatty(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001354:	4a14      	ldr	r2, [pc, #80]	@ (80013a8 <_sbrk+0x5c>)
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <_sbrk+0x60>)
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <_sbrk+0x64>)
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <_sbrk+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800137c:	f006 fb88 	bl	8007a90 <__errno>
 8001380:	4603      	mov	r3, r0
 8001382:	220c      	movs	r2, #12
 8001384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	e009      	b.n	80013a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <_sbrk+0x64>)
 800139c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20018000 	.word	0x20018000
 80013ac:	00000400 	.word	0x00000400
 80013b0:	2000019c 	.word	0x2000019c
 80013b4:	20013710 	.word	0x20013710

080013b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <SystemInit+0x20>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c2:	4a05      	ldr	r2, [pc, #20]	@ (80013d8 <SystemInit+0x20>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001414 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013e0:	f7ff ffea 	bl	80013b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e6:	490d      	ldr	r1, [pc, #52]	@ (800141c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800140a:	f006 fb47 	bl	8007a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140e:	f7ff fb6b 	bl	8000ae8 <main>
  bx  lr    
 8001412:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001414:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001420:	080080c8 	.word	0x080080c8
  ldr r2, =_sbss
 8001424:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001428:	2001370c 	.word	0x2001370c

0800142c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001434:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0d      	ldr	r2, [pc, #52]	@ (8001470 <HAL_Init+0x40>)
 800143a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800143e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001440:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <HAL_Init+0x40>)
 8001446:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800144a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <HAL_Init+0x40>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <HAL_Init+0x40>)
 8001452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001458:	2003      	movs	r0, #3
 800145a:	f000 f8fc 	bl	8001656 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fe80 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001464:	f7ff fdec 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023c00 	.word	0x40023c00

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008
 8001498:	200001a0 	.word	0x200001a0

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	200001a0 	.word	0x200001a0

080014b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff ffee 	bl	800149c <HAL_GetTick>
 80014c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014cc:	d005      	beq.n	80014da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_Delay+0x44>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014da:	bf00      	nop
 80014dc:	f7ff ffde 	bl	800149c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8f7      	bhi.n	80014dc <HAL_Delay+0x28>
  {
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	@ (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4907      	ldr	r1, [pc, #28]	@ (8001598 <__NVIC_EnableIRQ+0x38>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	@ (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	@ 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	@ 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ff4c 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167e:	f7ff ff61 	bl	8001544 <__NVIC_GetPriorityGrouping>
 8001682:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	6978      	ldr	r0, [r7, #20]
 800168a:	f7ff ffb1 	bl	80015f0 <NVIC_EncodePriority>
 800168e:	4602      	mov	r2, r0
 8001690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff80 	bl	800159c <__NVIC_SetPriority>
}
 800169c:	bf00      	nop
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff54 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	@ 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e159      	b.n	8001990 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f040 8148 	bne.w	800198a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d005      	beq.n	8001712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800170e:	2b02      	cmp	r3, #2
 8001710:	d130      	bne.n	8001774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	f003 0201 	and.w	r2, r3, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b03      	cmp	r3, #3
 800177e:	d017      	beq.n	80017b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d123      	bne.n	8001804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	69b9      	ldr	r1, [r7, #24]
 8001800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0203 	and.w	r2, r3, #3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a2 	beq.w	800198a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b57      	ldr	r3, [pc, #348]	@ (80019a8 <HAL_GPIO_Init+0x2e8>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	4a56      	ldr	r2, [pc, #344]	@ (80019a8 <HAL_GPIO_Init+0x2e8>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001854:	6453      	str	r3, [r2, #68]	@ 0x44
 8001856:	4b54      	ldr	r3, [pc, #336]	@ (80019a8 <HAL_GPIO_Init+0x2e8>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001862:	4a52      	ldr	r2, [pc, #328]	@ (80019ac <HAL_GPIO_Init+0x2ec>)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a49      	ldr	r2, [pc, #292]	@ (80019b0 <HAL_GPIO_Init+0x2f0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d019      	beq.n	80018c2 <HAL_GPIO_Init+0x202>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a48      	ldr	r2, [pc, #288]	@ (80019b4 <HAL_GPIO_Init+0x2f4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0x1fe>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a47      	ldr	r2, [pc, #284]	@ (80019b8 <HAL_GPIO_Init+0x2f8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00d      	beq.n	80018ba <HAL_GPIO_Init+0x1fa>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a46      	ldr	r2, [pc, #280]	@ (80019bc <HAL_GPIO_Init+0x2fc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d007      	beq.n	80018b6 <HAL_GPIO_Init+0x1f6>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a45      	ldr	r2, [pc, #276]	@ (80019c0 <HAL_GPIO_Init+0x300>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_GPIO_Init+0x1f2>
 80018ae:	2304      	movs	r3, #4
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018b2:	2307      	movs	r3, #7
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018c2:	2300      	movs	r3, #0
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d4:	4935      	ldr	r1, [pc, #212]	@ (80019ac <HAL_GPIO_Init+0x2ec>)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e2:	4b38      	ldr	r3, [pc, #224]	@ (80019c4 <HAL_GPIO_Init+0x304>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001906:	4a2f      	ldr	r2, [pc, #188]	@ (80019c4 <HAL_GPIO_Init+0x304>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800190c:	4b2d      	ldr	r3, [pc, #180]	@ (80019c4 <HAL_GPIO_Init+0x304>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001930:	4a24      	ldr	r2, [pc, #144]	@ (80019c4 <HAL_GPIO_Init+0x304>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001936:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <HAL_GPIO_Init+0x304>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195a:	4a1a      	ldr	r2, [pc, #104]	@ (80019c4 <HAL_GPIO_Init+0x304>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <HAL_GPIO_Init+0x304>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001984:	4a0f      	ldr	r2, [pc, #60]	@ (80019c4 <HAL_GPIO_Init+0x304>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	f67f aea2 	bls.w	80016dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3724      	adds	r7, #36	@ 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40013c00 	.word	0x40013c00

080019c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	e001      	b.n	80019ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
 8001a04:	4613      	mov	r3, r2
 8001a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a08:	787b      	ldrb	r3, [r7, #1]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a14:	e003      	b.n	8001a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	041a      	lsls	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	619a      	str	r2, [r3, #24]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e12b      	b.n	8001c96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fb1c 	bl	8001090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2224      	movs	r2, #36	@ 0x24
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0201 	bic.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a90:	f001 f8da 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 8001a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a81      	ldr	r2, [pc, #516]	@ (8001ca0 <HAL_I2C_Init+0x274>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d807      	bhi.n	8001ab0 <HAL_I2C_Init+0x84>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a80      	ldr	r2, [pc, #512]	@ (8001ca4 <HAL_I2C_Init+0x278>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	bf94      	ite	ls
 8001aa8:	2301      	movls	r3, #1
 8001aaa:	2300      	movhi	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	e006      	b.n	8001abe <HAL_I2C_Init+0x92>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4a7d      	ldr	r2, [pc, #500]	@ (8001ca8 <HAL_I2C_Init+0x27c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	bf94      	ite	ls
 8001ab8:	2301      	movls	r3, #1
 8001aba:	2300      	movhi	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0e7      	b.n	8001c96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4a78      	ldr	r2, [pc, #480]	@ (8001cac <HAL_I2C_Init+0x280>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0c9b      	lsrs	r3, r3, #18
 8001ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a6a      	ldr	r2, [pc, #424]	@ (8001ca0 <HAL_I2C_Init+0x274>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d802      	bhi.n	8001b00 <HAL_I2C_Init+0xd4>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3301      	adds	r3, #1
 8001afe:	e009      	b.n	8001b14 <HAL_I2C_Init+0xe8>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b06:	fb02 f303 	mul.w	r3, r2, r3
 8001b0a:	4a69      	ldr	r2, [pc, #420]	@ (8001cb0 <HAL_I2C_Init+0x284>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	3301      	adds	r3, #1
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	495c      	ldr	r1, [pc, #368]	@ (8001ca0 <HAL_I2C_Init+0x274>)
 8001b30:	428b      	cmp	r3, r1
 8001b32:	d819      	bhi.n	8001b68 <HAL_I2C_Init+0x13c>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1e59      	subs	r1, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b42:	1c59      	adds	r1, r3, #1
 8001b44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b48:	400b      	ands	r3, r1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <HAL_I2C_Init+0x138>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1e59      	subs	r1, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b62:	e051      	b.n	8001c08 <HAL_I2C_Init+0x1dc>
 8001b64:	2304      	movs	r3, #4
 8001b66:	e04f      	b.n	8001c08 <HAL_I2C_Init+0x1dc>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d111      	bne.n	8001b94 <HAL_I2C_Init+0x168>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	440b      	add	r3, r1
 8001b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b82:	3301      	adds	r3, #1
 8001b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	e012      	b.n	8001bba <HAL_I2C_Init+0x18e>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1e58      	subs	r0, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	0099      	lsls	r1, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_Init+0x196>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e022      	b.n	8001c08 <HAL_I2C_Init+0x1dc>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10e      	bne.n	8001be8 <HAL_I2C_Init+0x1bc>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1e58      	subs	r0, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6859      	ldr	r1, [r3, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	440b      	add	r3, r1
 8001bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001be6:	e00f      	b.n	8001c08 <HAL_I2C_Init+0x1dc>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	1e58      	subs	r0, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	0099      	lsls	r1, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	6809      	ldr	r1, [r1, #0]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6911      	ldr	r1, [r2, #16]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68d2      	ldr	r2, [r2, #12]
 8001c42:	4311      	orrs	r1, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2220      	movs	r2, #32
 8001c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	000186a0 	.word	0x000186a0
 8001ca4:	001e847f 	.word	0x001e847f
 8001ca8:	003d08ff 	.word	0x003d08ff
 8001cac:	431bde83 	.word	0x431bde83
 8001cb0:	10624dd3 	.word	0x10624dd3

08001cb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	817b      	strh	r3, [r7, #10]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff fbe8 	bl	800149c <HAL_GetTick>
 8001ccc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	f040 80e0 	bne.w	8001e9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2319      	movs	r3, #25
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4970      	ldr	r1, [pc, #448]	@ (8001ea8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f964 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e0d3      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_I2C_Master_Transmit+0x50>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e0cc      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ea>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d007      	beq.n	8001d2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2221      	movs	r2, #33	@ 0x21
 8001d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2210      	movs	r2, #16
 8001d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	893a      	ldrh	r2, [r7, #8]
 8001d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4a50      	ldr	r2, [pc, #320]	@ (8001eac <HAL_I2C_Master_Transmit+0x1f8>)
 8001d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d6c:	8979      	ldrh	r1, [r7, #10]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	6a3a      	ldr	r2, [r7, #32]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f89c 	bl	8001eb0 <I2C_MasterRequestWrite>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e08d      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d98:	e066      	b.n	8001e68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	6a39      	ldr	r1, [r7, #32]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 fa22 	bl	80021e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d107      	bne.n	8001dc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e06b      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	781a      	ldrb	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d11b      	bne.n	8001e3c <HAL_I2C_Master_Transmit+0x188>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d017      	beq.n	8001e3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	781a      	ldrb	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	6a39      	ldr	r1, [r7, #32]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 fa19 	bl	8002278 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00d      	beq.n	8001e68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d107      	bne.n	8001e64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e01a      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d194      	bne.n	8001d9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
  }
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	00100002 	.word	0x00100002
 8001eac:	ffff0000 	.word	0xffff0000

08001eb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d006      	beq.n	8001eda <I2C_MasterRequestWrite+0x2a>
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d003      	beq.n	8001eda <I2C_MasterRequestWrite+0x2a>
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ed8:	d108      	bne.n	8001eec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e00b      	b.n	8001f04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef0:	2b12      	cmp	r3, #18
 8001ef2:	d107      	bne.n	8001f04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f84f 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00d      	beq.n	8001f38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f2a:	d103      	bne.n	8001f34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e035      	b.n	8001fa4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f40:	d108      	bne.n	8001f54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f42:	897b      	ldrh	r3, [r7, #10]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f50:	611a      	str	r2, [r3, #16]
 8001f52:	e01b      	b.n	8001f8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f54:	897b      	ldrh	r3, [r7, #10]
 8001f56:	11db      	asrs	r3, r3, #7
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f003 0306 	and.w	r3, r3, #6
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f063 030f 	orn	r3, r3, #15
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	490e      	ldr	r1, [pc, #56]	@ (8001fac <I2C_MasterRequestWrite+0xfc>)
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f898 	bl	80020a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e010      	b.n	8001fa4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f82:	897b      	ldrh	r3, [r7, #10]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4907      	ldr	r1, [pc, #28]	@ (8001fb0 <I2C_MasterRequestWrite+0x100>)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f888 	bl	80020a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	00010008 	.word	0x00010008
 8001fb0:	00010002 	.word	0x00010002

08001fb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fc4:	e048      	b.n	8002058 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d044      	beq.n	8002058 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fce:	f7ff fa65 	bl	800149c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d302      	bcc.n	8001fe4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d139      	bne.n	8002058 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	0c1b      	lsrs	r3, r3, #16
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d10d      	bne.n	800200a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	e00c      	b.n	8002024 <I2C_WaitOnFlagUntilTimeout+0x70>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	43da      	mvns	r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	4013      	ands	r3, r2
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	429a      	cmp	r2, r3
 8002028:	d116      	bne.n	8002058 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	f043 0220 	orr.w	r2, r3, #32
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e023      	b.n	80020a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	0c1b      	lsrs	r3, r3, #16
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10d      	bne.n	800207e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	43da      	mvns	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	4013      	ands	r3, r2
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	e00c      	b.n	8002098 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	43da      	mvns	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4013      	ands	r3, r2
 800208a:	b29b      	uxth	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	429a      	cmp	r2, r3
 800209c:	d093      	beq.n	8001fc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020b6:	e071      	b.n	800219c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c6:	d123      	bne.n	8002110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	f043 0204 	orr.w	r2, r3, #4
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e067      	b.n	80021e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002116:	d041      	beq.n	800219c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002118:	f7ff f9c0 	bl	800149c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	d302      	bcc.n	800212e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d136      	bne.n	800219c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10c      	bne.n	8002152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4013      	ands	r3, r2
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf14      	ite	ne
 800214a:	2301      	movne	r3, #1
 800214c:	2300      	moveq	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	e00b      	b.n	800216a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	43da      	mvns	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4013      	ands	r3, r2
 800215e:	b29b      	uxth	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf14      	ite	ne
 8002164:	2301      	movne	r3, #1
 8002166:	2300      	moveq	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d016      	beq.n	800219c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	f043 0220 	orr.w	r2, r3, #32
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e021      	b.n	80021e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	0c1b      	lsrs	r3, r3, #16
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d10c      	bne.n	80021c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	43da      	mvns	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4013      	ands	r3, r2
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	e00b      	b.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4013      	ands	r3, r2
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf14      	ite	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	2300      	moveq	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f47f af6d 	bne.w	80020b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021f4:	e034      	b.n	8002260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f886 	bl	8002308 <I2C_IsAcknowledgeFailed>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e034      	b.n	8002270 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d028      	beq.n	8002260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220e:	f7ff f945 	bl	800149c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d11d      	bne.n	8002260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222e:	2b80      	cmp	r3, #128	@ 0x80
 8002230:	d016      	beq.n	8002260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e007      	b.n	8002270 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800226a:	2b80      	cmp	r3, #128	@ 0x80
 800226c:	d1c3      	bne.n	80021f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002284:	e034      	b.n	80022f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f83e 	bl	8002308 <I2C_IsAcknowledgeFailed>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e034      	b.n	8002300 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d028      	beq.n	80022f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229e:	f7ff f8fd 	bl	800149c <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d302      	bcc.n	80022b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d11d      	bne.n	80022f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d016      	beq.n	80022f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	f043 0220 	orr.w	r2, r3, #32
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e007      	b.n	8002300 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d1c3      	bne.n	8002286 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800231e:	d11b      	bne.n	8002358 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002328:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	f043 0204 	orr.w	r2, r3, #4
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e267      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d075      	beq.n	8002472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002386:	4b88      	ldr	r3, [pc, #544]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b04      	cmp	r3, #4
 8002390:	d00c      	beq.n	80023ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002392:	4b85      	ldr	r3, [pc, #532]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800239a:	2b08      	cmp	r3, #8
 800239c:	d112      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239e:	4b82      	ldr	r3, [pc, #520]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023aa:	d10b      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	4b7e      	ldr	r3, [pc, #504]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d05b      	beq.n	8002470 <HAL_RCC_OscConfig+0x108>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d157      	bne.n	8002470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e242      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x74>
 80023ce:	4b76      	ldr	r3, [pc, #472]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a75      	ldr	r2, [pc, #468]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x98>
 80023e6:	4b70      	ldr	r3, [pc, #448]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6f      	ldr	r2, [pc, #444]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b6d      	ldr	r3, [pc, #436]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6c      	ldr	r2, [pc, #432]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 8002400:	4b69      	ldr	r3, [pc, #420]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a68      	ldr	r2, [pc, #416]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b66      	ldr	r3, [pc, #408]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a65      	ldr	r2, [pc, #404]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff f83c 	bl	800149c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff f838 	bl	800149c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	@ 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e207      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b5b      	ldr	r3, [pc, #364]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0xc0>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7ff f828 	bl	800149c <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7ff f824 	bl	800149c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	@ 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e1f3      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	4b51      	ldr	r3, [pc, #324]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0xe8>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d063      	beq.n	8002546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800247e:	4b4a      	ldr	r3, [pc, #296]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248a:	4b47      	ldr	r3, [pc, #284]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002492:	2b08      	cmp	r3, #8
 8002494:	d11c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002496:	4b44      	ldr	r3, [pc, #272]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d116      	bne.n	80024d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a2:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_RCC_OscConfig+0x152>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e1c7      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ba:	4b3b      	ldr	r3, [pc, #236]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4937      	ldr	r1, [pc, #220]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	e03a      	b.n	8002546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d8:	4b34      	ldr	r3, [pc, #208]	@ (80025ac <HAL_RCC_OscConfig+0x244>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe ffdd 	bl	800149c <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e6:	f7fe ffd9 	bl	800149c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e1a8      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	4b2b      	ldr	r3, [pc, #172]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b28      	ldr	r3, [pc, #160]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4925      	ldr	r1, [pc, #148]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
 8002518:	e015      	b.n	8002546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251a:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <HAL_RCC_OscConfig+0x244>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe ffbc 	bl	800149c <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002528:	f7fe ffb8 	bl	800149c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e187      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	4b1b      	ldr	r3, [pc, #108]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d036      	beq.n	80025c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255a:	4b15      	ldr	r3, [pc, #84]	@ (80025b0 <HAL_RCC_OscConfig+0x248>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe ff9c 	bl	800149c <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe ff98 	bl	800149c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e167      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257a:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 800257c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x200>
 8002586:	e01b      	b.n	80025c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002588:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <HAL_RCC_OscConfig+0x248>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258e:	f7fe ff85 	bl	800149c <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002594:	e00e      	b.n	80025b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002596:	f7fe ff81 	bl	800149c <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d907      	bls.n	80025b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e150      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	42470000 	.word	0x42470000
 80025b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	4b88      	ldr	r3, [pc, #544]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ea      	bne.n	8002596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8097 	beq.w	80026fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b81      	ldr	r3, [pc, #516]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10f      	bne.n	80025fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b7d      	ldr	r3, [pc, #500]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	4a7c      	ldr	r2, [pc, #496]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ee:	4b7a      	ldr	r3, [pc, #488]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b77      	ldr	r3, [pc, #476]	@ (80027dc <HAL_RCC_OscConfig+0x474>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260a:	4b74      	ldr	r3, [pc, #464]	@ (80027dc <HAL_RCC_OscConfig+0x474>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a73      	ldr	r2, [pc, #460]	@ (80027dc <HAL_RCC_OscConfig+0x474>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002616:	f7fe ff41 	bl	800149c <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7fe ff3d 	bl	800149c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e10c      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b6a      	ldr	r3, [pc, #424]	@ (80027dc <HAL_RCC_OscConfig+0x474>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x2ea>
 8002644:	4b64      	ldr	r3, [pc, #400]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002648:	4a63      	ldr	r2, [pc, #396]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002650:	e01c      	b.n	800268c <HAL_RCC_OscConfig+0x324>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b05      	cmp	r3, #5
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x30c>
 800265a:	4b5f      	ldr	r3, [pc, #380]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265e:	4a5e      	ldr	r2, [pc, #376]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6713      	str	r3, [r2, #112]	@ 0x70
 8002666:	4b5c      	ldr	r3, [pc, #368]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266a:	4a5b      	ldr	r2, [pc, #364]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6713      	str	r3, [r2, #112]	@ 0x70
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0x324>
 8002674:	4b58      	ldr	r3, [pc, #352]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002678:	4a57      	ldr	r2, [pc, #348]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002680:	4b55      	ldr	r3, [pc, #340]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002684:	4a54      	ldr	r2, [pc, #336]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002686:	f023 0304 	bic.w	r3, r3, #4
 800268a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d015      	beq.n	80026c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe ff02 	bl	800149c <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7fe fefe 	bl	800149c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0cb      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b2:	4b49      	ldr	r3, [pc, #292]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0ee      	beq.n	800269c <HAL_RCC_OscConfig+0x334>
 80026be:	e014      	b.n	80026ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c0:	f7fe feec 	bl	800149c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c6:	e00a      	b.n	80026de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7fe fee8 	bl	800149c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e0b5      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026de:	4b3e      	ldr	r3, [pc, #248]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1ee      	bne.n	80026c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f0:	4b39      	ldr	r3, [pc, #228]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	4a38      	ldr	r2, [pc, #224]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80a1 	beq.w	8002848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002706:	4b34      	ldr	r3, [pc, #208]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b08      	cmp	r3, #8
 8002710:	d05c      	beq.n	80027cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d141      	bne.n	800279e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b31      	ldr	r3, [pc, #196]	@ (80027e0 <HAL_RCC_OscConfig+0x478>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe febc 	bl	800149c <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe feb8 	bl	800149c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e087      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	4b27      	ldr	r3, [pc, #156]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69da      	ldr	r2, [r3, #28]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	019b      	lsls	r3, r3, #6
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275c:	085b      	lsrs	r3, r3, #1
 800275e:	3b01      	subs	r3, #1
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	061b      	lsls	r3, r3, #24
 800276a:	491b      	ldr	r1, [pc, #108]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002770:	4b1b      	ldr	r3, [pc, #108]	@ (80027e0 <HAL_RCC_OscConfig+0x478>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002776:	f7fe fe91 	bl	800149c <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277e:	f7fe fe8d 	bl	800149c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e05c      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002790:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x416>
 800279c:	e054      	b.n	8002848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279e:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <HAL_RCC_OscConfig+0x478>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe fe7a 	bl	800149c <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fe fe76 	bl	800149c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e045      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x444>
 80027ca:	e03d      	b.n	8002848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d107      	bne.n	80027e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e038      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40007000 	.word	0x40007000
 80027e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <HAL_RCC_OscConfig+0x4ec>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d028      	beq.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d121      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d11a      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002814:	4013      	ands	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800281a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800281c:	4293      	cmp	r3, r2
 800281e:	d111      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	3b01      	subs	r3, #1
 800282e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d107      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800

08002858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0cc      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800286c:	4b68      	ldr	r3, [pc, #416]	@ (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d90c      	bls.n	8002894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b65      	ldr	r3, [pc, #404]	@ (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b63      	ldr	r3, [pc, #396]	@ (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0b8      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ac:	4b59      	ldr	r3, [pc, #356]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a58      	ldr	r2, [pc, #352]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c4:	4b53      	ldr	r3, [pc, #332]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a52      	ldr	r2, [pc, #328]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d0:	4b50      	ldr	r3, [pc, #320]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	494d      	ldr	r1, [pc, #308]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d044      	beq.n	8002978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	4b47      	ldr	r3, [pc, #284]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d119      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e07f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d003      	beq.n	8002916 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002912:	2b03      	cmp	r3, #3
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002916:	4b3f      	ldr	r3, [pc, #252]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e06f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002926:	4b3b      	ldr	r3, [pc, #236]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e067      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002936:	4b37      	ldr	r3, [pc, #220]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 0203 	bic.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4934      	ldr	r1, [pc, #208]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002948:	f7fe fda8 	bl	800149c <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7fe fda4 	bl	800149c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e04f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	4b2b      	ldr	r3, [pc, #172]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 020c 	and.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	429a      	cmp	r2, r3
 8002976:	d1eb      	bne.n	8002950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d20c      	bcs.n	80029a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b20      	ldr	r3, [pc, #128]	@ (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e032      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ac:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4916      	ldr	r1, [pc, #88]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ca:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	490e      	ldr	r1, [pc, #56]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029de:	f000 f821 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80029e2:	4602      	mov	r2, r0
 80029e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	490a      	ldr	r1, [pc, #40]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	5ccb      	ldrb	r3, [r1, r3]
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	4a09      	ldr	r2, [pc, #36]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029fa:	4b09      	ldr	r3, [pc, #36]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe fbb0 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023c00 	.word	0x40023c00
 8002a14:	40023800 	.word	0x40023800
 8002a18:	08008080 	.word	0x08008080
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	20000004 	.word	0x20000004

08002a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a28:	b094      	sub	sp, #80	@ 0x50
 8002a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a3c:	4b79      	ldr	r3, [pc, #484]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d00d      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x40>
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	f200 80e1 	bhi.w	8002c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x34>
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d003      	beq.n	8002a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a56:	e0db      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b73      	ldr	r3, [pc, #460]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a5c:	e0db      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a5e:	4b73      	ldr	r3, [pc, #460]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a62:	e0d8      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a64:	4b6f      	ldr	r3, [pc, #444]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d063      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	099b      	lsrs	r3, r3, #6
 8002a80:	2200      	movs	r2, #0
 8002a82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a8e:	2300      	movs	r3, #0
 8002a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a96:	4622      	mov	r2, r4
 8002a98:	462b      	mov	r3, r5
 8002a9a:	f04f 0000 	mov.w	r0, #0
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	0159      	lsls	r1, r3, #5
 8002aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa8:	0150      	lsls	r0, r2, #5
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4621      	mov	r1, r4
 8002ab0:	1a51      	subs	r1, r2, r1
 8002ab2:	6139      	str	r1, [r7, #16]
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ac8:	4659      	mov	r1, fp
 8002aca:	018b      	lsls	r3, r1, #6
 8002acc:	4651      	mov	r1, sl
 8002ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ad2:	4651      	mov	r1, sl
 8002ad4:	018a      	lsls	r2, r1, #6
 8002ad6:	4651      	mov	r1, sl
 8002ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8002adc:	4659      	mov	r1, fp
 8002ade:	eb63 0901 	sbc.w	r9, r3, r1
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002af6:	4690      	mov	r8, r2
 8002af8:	4699      	mov	r9, r3
 8002afa:	4623      	mov	r3, r4
 8002afc:	eb18 0303 	adds.w	r3, r8, r3
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	462b      	mov	r3, r5
 8002b04:	eb49 0303 	adc.w	r3, r9, r3
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b16:	4629      	mov	r1, r5
 8002b18:	024b      	lsls	r3, r1, #9
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b20:	4621      	mov	r1, r4
 8002b22:	024a      	lsls	r2, r1, #9
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b34:	f7fd fb9e 	bl	8000274 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b40:	e058      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b42:	4b38      	ldr	r3, [pc, #224]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	2300      	movs	r3, #0
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b5c:	4642      	mov	r2, r8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	f04f 0000 	mov.w	r0, #0
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	0159      	lsls	r1, r3, #5
 8002b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b6e:	0150      	lsls	r0, r2, #5
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4641      	mov	r1, r8
 8002b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b94:	ebb2 040a 	subs.w	r4, r2, sl
 8002b98:	eb63 050b 	sbc.w	r5, r3, fp
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	00eb      	lsls	r3, r5, #3
 8002ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002baa:	00e2      	lsls	r2, r4, #3
 8002bac:	4614      	mov	r4, r2
 8002bae:	461d      	mov	r5, r3
 8002bb0:	4643      	mov	r3, r8
 8002bb2:	18e3      	adds	r3, r4, r3
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	eb45 0303 	adc.w	r3, r5, r3
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bca:	4629      	mov	r1, r5
 8002bcc:	028b      	lsls	r3, r1, #10
 8002bce:	4621      	mov	r1, r4
 8002bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	028a      	lsls	r2, r1, #10
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bde:	2200      	movs	r2, #0
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	61fa      	str	r2, [r7, #28]
 8002be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002be8:	f7fd fb44 	bl	8000274 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3750      	adds	r7, #80	@ 0x50
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	007a1200 	.word	0x007a1200

08002c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c34:	4b03      	ldr	r3, [pc, #12]	@ (8002c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000000 	.word	0x20000000

08002c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c4c:	f7ff fff0 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	0a9b      	lsrs	r3, r3, #10
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4903      	ldr	r1, [pc, #12]	@ (8002c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	08008090 	.word	0x08008090

08002c70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	220f      	movs	r2, #15
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c80:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <HAL_RCC_GetClockConfig+0x5c>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0203 	and.w	r2, r3, #3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ccc <HAL_RCC_GetClockConfig+0x5c>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <HAL_RCC_GetClockConfig+0x5c>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <HAL_RCC_GetClockConfig+0x5c>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	08db      	lsrs	r3, r3, #3
 8002caa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cb2:	4b07      	ldr	r3, [pc, #28]	@ (8002cd0 <HAL_RCC_GetClockConfig+0x60>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0207 	and.w	r2, r3, #7
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	601a      	str	r2, [r3, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40023c00 	.word	0x40023c00

08002cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e041      	b.n	8002d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe fa10 	bl	8001120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f000 fa70 	bl	80031f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d001      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e044      	b.n	8002e16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e24 <HAL_TIM_Base_Start_IT+0xb0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d018      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x6c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db6:	d013      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x6c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8002e28 <HAL_TIM_Base_Start_IT+0xb4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00e      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x6c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a19      	ldr	r2, [pc, #100]	@ (8002e2c <HAL_TIM_Base_Start_IT+0xb8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d009      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x6c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a17      	ldr	r2, [pc, #92]	@ (8002e30 <HAL_TIM_Base_Start_IT+0xbc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x6c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a16      	ldr	r2, [pc, #88]	@ (8002e34 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d111      	bne.n	8002e04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d010      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e02:	e007      	b.n	8002e14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40010000 	.word	0x40010000
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40000800 	.word	0x40000800
 8002e30:	40000c00 	.word	0x40000c00
 8002e34:	40014000 	.word	0x40014000

08002e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d020      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01b      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0202 	mvn.w	r2, #2
 8002e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f999 	bl	80031ba <HAL_TIM_IC_CaptureCallback>
 8002e88:	e005      	b.n	8002e96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f98b 	bl	80031a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f99c 	bl	80031ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d020      	beq.n	8002ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d01b      	beq.n	8002ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f06f 0204 	mvn.w	r2, #4
 8002eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f973 	bl	80031ba <HAL_TIM_IC_CaptureCallback>
 8002ed4:	e005      	b.n	8002ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f965 	bl	80031a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f976 	bl	80031ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d020      	beq.n	8002f34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01b      	beq.n	8002f34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0208 	mvn.w	r2, #8
 8002f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2204      	movs	r2, #4
 8002f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f94d 	bl	80031ba <HAL_TIM_IC_CaptureCallback>
 8002f20:	e005      	b.n	8002f2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f93f 	bl	80031a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f950 	bl	80031ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d020      	beq.n	8002f80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01b      	beq.n	8002f80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0210 	mvn.w	r2, #16
 8002f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2208      	movs	r2, #8
 8002f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f927 	bl	80031ba <HAL_TIM_IC_CaptureCallback>
 8002f6c:	e005      	b.n	8002f7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f919 	bl	80031a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f92a 	bl	80031ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00c      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0201 	mvn.w	r2, #1
 8002f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe f836 	bl	8001010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00c      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fab6 	bl	8003534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00c      	beq.n	8002fec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8fb 	bl	80031e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00c      	beq.n	8003010 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0220 	mvn.w	r2, #32
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa88 	bl	8003520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_TIM_ConfigClockSource+0x1c>
 8003030:	2302      	movs	r3, #2
 8003032:	e0b4      	b.n	800319e <HAL_TIM_ConfigClockSource+0x186>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800305a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800306c:	d03e      	beq.n	80030ec <HAL_TIM_ConfigClockSource+0xd4>
 800306e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003072:	f200 8087 	bhi.w	8003184 <HAL_TIM_ConfigClockSource+0x16c>
 8003076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800307a:	f000 8086 	beq.w	800318a <HAL_TIM_ConfigClockSource+0x172>
 800307e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003082:	d87f      	bhi.n	8003184 <HAL_TIM_ConfigClockSource+0x16c>
 8003084:	2b70      	cmp	r3, #112	@ 0x70
 8003086:	d01a      	beq.n	80030be <HAL_TIM_ConfigClockSource+0xa6>
 8003088:	2b70      	cmp	r3, #112	@ 0x70
 800308a:	d87b      	bhi.n	8003184 <HAL_TIM_ConfigClockSource+0x16c>
 800308c:	2b60      	cmp	r3, #96	@ 0x60
 800308e:	d050      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0x11a>
 8003090:	2b60      	cmp	r3, #96	@ 0x60
 8003092:	d877      	bhi.n	8003184 <HAL_TIM_ConfigClockSource+0x16c>
 8003094:	2b50      	cmp	r3, #80	@ 0x50
 8003096:	d03c      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0xfa>
 8003098:	2b50      	cmp	r3, #80	@ 0x50
 800309a:	d873      	bhi.n	8003184 <HAL_TIM_ConfigClockSource+0x16c>
 800309c:	2b40      	cmp	r3, #64	@ 0x40
 800309e:	d058      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x13a>
 80030a0:	2b40      	cmp	r3, #64	@ 0x40
 80030a2:	d86f      	bhi.n	8003184 <HAL_TIM_ConfigClockSource+0x16c>
 80030a4:	2b30      	cmp	r3, #48	@ 0x30
 80030a6:	d064      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x15a>
 80030a8:	2b30      	cmp	r3, #48	@ 0x30
 80030aa:	d86b      	bhi.n	8003184 <HAL_TIM_ConfigClockSource+0x16c>
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d060      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x15a>
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d867      	bhi.n	8003184 <HAL_TIM_ConfigClockSource+0x16c>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d05c      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x15a>
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d05a      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x15a>
 80030bc:	e062      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030ce:	f000 f999 	bl	8003404 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	609a      	str	r2, [r3, #8]
      break;
 80030ea:	e04f      	b.n	800318c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030fc:	f000 f982 	bl	8003404 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800310e:	609a      	str	r2, [r3, #8]
      break;
 8003110:	e03c      	b.n	800318c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800311e:	461a      	mov	r2, r3
 8003120:	f000 f8f6 	bl	8003310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2150      	movs	r1, #80	@ 0x50
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f94f 	bl	80033ce <TIM_ITRx_SetConfig>
      break;
 8003130:	e02c      	b.n	800318c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800313e:	461a      	mov	r2, r3
 8003140:	f000 f915 	bl	800336e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2160      	movs	r1, #96	@ 0x60
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f93f 	bl	80033ce <TIM_ITRx_SetConfig>
      break;
 8003150:	e01c      	b.n	800318c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800315e:	461a      	mov	r2, r3
 8003160:	f000 f8d6 	bl	8003310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2140      	movs	r1, #64	@ 0x40
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f92f 	bl	80033ce <TIM_ITRx_SetConfig>
      break;
 8003170:	e00c      	b.n	800318c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4619      	mov	r1, r3
 800317c:	4610      	mov	r0, r2
 800317e:	f000 f926 	bl	80033ce <TIM_ITRx_SetConfig>
      break;
 8003182:	e003      	b.n	800318c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
      break;
 8003188:	e000      	b.n	800318c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800318a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a3a      	ldr	r2, [pc, #232]	@ (80032f4 <TIM_Base_SetConfig+0xfc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00f      	beq.n	8003230 <TIM_Base_SetConfig+0x38>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003216:	d00b      	beq.n	8003230 <TIM_Base_SetConfig+0x38>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a37      	ldr	r2, [pc, #220]	@ (80032f8 <TIM_Base_SetConfig+0x100>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <TIM_Base_SetConfig+0x38>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a36      	ldr	r2, [pc, #216]	@ (80032fc <TIM_Base_SetConfig+0x104>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_Base_SetConfig+0x38>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a35      	ldr	r2, [pc, #212]	@ (8003300 <TIM_Base_SetConfig+0x108>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d108      	bne.n	8003242 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a2b      	ldr	r2, [pc, #172]	@ (80032f4 <TIM_Base_SetConfig+0xfc>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01b      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003250:	d017      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a28      	ldr	r2, [pc, #160]	@ (80032f8 <TIM_Base_SetConfig+0x100>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d013      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a27      	ldr	r2, [pc, #156]	@ (80032fc <TIM_Base_SetConfig+0x104>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00f      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a26      	ldr	r2, [pc, #152]	@ (8003300 <TIM_Base_SetConfig+0x108>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00b      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a25      	ldr	r2, [pc, #148]	@ (8003304 <TIM_Base_SetConfig+0x10c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a24      	ldr	r2, [pc, #144]	@ (8003308 <TIM_Base_SetConfig+0x110>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d003      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a23      	ldr	r2, [pc, #140]	@ (800330c <TIM_Base_SetConfig+0x114>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d108      	bne.n	8003294 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a0e      	ldr	r2, [pc, #56]	@ (80032f4 <TIM_Base_SetConfig+0xfc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d103      	bne.n	80032c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d105      	bne.n	80032e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f023 0201 	bic.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	611a      	str	r2, [r3, #16]
  }
}
 80032e6:	bf00      	nop
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800
 8003300:	40000c00 	.word	0x40000c00
 8003304:	40014000 	.word	0x40014000
 8003308:	40014400 	.word	0x40014400
 800330c:	40014800 	.word	0x40014800

08003310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f023 0201 	bic.w	r2, r3, #1
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800333a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f023 030a 	bic.w	r3, r3, #10
 800334c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	621a      	str	r2, [r3, #32]
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800336e:	b480      	push	{r7}
 8003370:	b087      	sub	sp, #28
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f023 0210 	bic.w	r2, r3, #16
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	031b      	lsls	r3, r3, #12
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f043 0307 	orr.w	r3, r3, #7
 80033f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	609a      	str	r2, [r3, #8]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800341e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	021a      	lsls	r2, r3, #8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	431a      	orrs	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4313      	orrs	r3, r2
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	609a      	str	r2, [r3, #8]
}
 8003438:	bf00      	nop
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003458:	2302      	movs	r3, #2
 800345a:	e050      	b.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1c      	ldr	r2, [pc, #112]	@ (800350c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d018      	beq.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a8:	d013      	beq.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a18      	ldr	r2, [pc, #96]	@ (8003510 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00e      	beq.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a16      	ldr	r2, [pc, #88]	@ (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d009      	beq.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a15      	ldr	r2, [pc, #84]	@ (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a13      	ldr	r2, [pc, #76]	@ (800351c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d10c      	bne.n	80034ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	40000c00 	.word	0x40000c00
 800351c:	40014000 	.word	0x40014000

08003520 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f103 0208 	add.w	r2, r3, #8
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f04f 32ff 	mov.w	r2, #4294967295
 8003560:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f103 0208 	add.w	r2, r3, #8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f103 0208 	add.w	r2, r3, #8
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 800357c:	f240 1019 	movw	r0, #281	@ 0x119
 8003580:	f003 fd08 	bl	8006f94 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800359a:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 800359e:	f003 fcf9 	bl	8006f94 <SEGGER_SYSVIEW_RecordEndCall>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d103      	bne.n	80035ca <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e00c      	b.n	80035e4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3308      	adds	r3, #8
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e002      	b.n	80035d8 <vListInsert+0x2e>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d2f6      	bcs.n	80035d2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8003610:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8003614:	f003 fcbe 	bl	8006f94 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6892      	ldr	r2, [r2, #8]
 8003636:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6852      	ldr	r2, [r2, #4]
 8003640:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	d103      	bne.n	8003654 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4619      	mov	r1, r3
 800366a:	f240 101d 	movw	r0, #285	@ 0x11d
 800366e:	f003 fccd 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800368a:	2301      	movs	r3, #1
 800368c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <xQueueGenericReset+0x30>
    __asm volatile
 8003698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369c:	f383 8811 	msr	BASEPRI, r3
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	60fb      	str	r3, [r7, #12]
}
 80036aa:	bf00      	nop
 80036ac:	bf00      	nop
 80036ae:	e7fd      	b.n	80036ac <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d05d      	beq.n	8003772 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d059      	beq.n	8003772 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c6:	2100      	movs	r1, #0
 80036c8:	fba3 2302 	umull	r2, r3, r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d000      	beq.n	80036d2 <xQueueGenericReset+0x52>
 80036d0:	2101      	movs	r1, #1
 80036d2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d14c      	bne.n	8003772 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80036d8:	f001 ff8c 	bl	80055f4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e4:	6939      	ldr	r1, [r7, #16]
 80036e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	441a      	add	r2, r3
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2200      	movs	r2, #0
 80036f6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003708:	3b01      	subs	r3, #1
 800370a:	6939      	ldr	r1, [r7, #16]
 800370c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	441a      	add	r2, r3
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	22ff      	movs	r2, #255	@ 0xff
 800371c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	22ff      	movs	r2, #255	@ 0xff
 8003724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d114      	bne.n	8003758 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01a      	beq.n	800376c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	3310      	adds	r3, #16
 800373a:	4618      	mov	r0, r3
 800373c:	f001 f86e 	bl	800481c <xTaskRemoveFromEventList>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d012      	beq.n	800376c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003746:	4b18      	ldr	r3, [pc, #96]	@ (80037a8 <xQueueGenericReset+0x128>)
 8003748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	e009      	b.n	800376c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	3310      	adds	r3, #16
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fef3 	bl	8003548 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3324      	adds	r3, #36	@ 0x24
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff feee 	bl	8003548 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800376c:	f001 ff74 	bl	8005658 <vPortExitCritical>
 8003770:	e001      	b.n	8003776 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10b      	bne.n	8003794 <xQueueGenericReset+0x114>
    __asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	60bb      	str	r3, [r7, #8]
}
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	e7fd      	b.n	8003790 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	4619      	mov	r1, r3
 8003798:	2096      	movs	r0, #150	@ 0x96
 800379a:	f003 fc37 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800379e:	697b      	ldr	r3, [r7, #20]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	e000ed04 	.word	0xe000ed04

080037ac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	@ 0x28
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	4613      	mov	r3, r2
 80037b8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02e      	beq.n	8003822 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80037c4:	2100      	movs	r1, #0
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	fba3 2302 	umull	r2, r3, r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d000      	beq.n	80037d4 <xQueueGenericCreate+0x28>
 80037d2:	2101      	movs	r1, #1
 80037d4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d123      	bne.n	8003822 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80037e2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80037e6:	d81c      	bhi.n	8003822 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	fb02 f303 	mul.w	r3, r2, r3
 80037f0:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	3350      	adds	r3, #80	@ 0x50
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 ffe8 	bl	80057cc <pvPortMalloc>
 80037fc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01d      	beq.n	8003840 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	3350      	adds	r3, #80	@ 0x50
 800380c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800380e:	79fa      	ldrb	r2, [r7, #7]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f81e 	bl	800385c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003820:	e00e      	b.n	8003840 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <xQueueGenericCreate+0x94>
    __asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	613b      	str	r3, [r7, #16]
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	e7fd      	b.n	800383c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4618      	mov	r0, r3
 8003844:	f003 fd7c 	bl	8007340 <SEGGER_SYSVIEW_ShrinkId>
 8003848:	4603      	mov	r3, r0
 800384a:	4619      	mov	r1, r3
 800384c:	2098      	movs	r0, #152	@ 0x98
 800384e:	f003 fbdd 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8003852:	69fb      	ldr	r3, [r7, #28]
    }
 8003854:	4618      	mov	r0, r3
 8003856:	3720      	adds	r7, #32
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d103      	bne.n	8003878 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e002      	b.n	800387e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800388a:	2101      	movs	r1, #1
 800388c:	69b8      	ldr	r0, [r7, #24]
 800388e:	f7ff fef7 	bl	8003680 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08c      	sub	sp, #48	@ 0x30
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80038b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10b      	bne.n	80038d6 <xQueueReceive+0x32>
    __asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	623b      	str	r3, [r7, #32]
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	e7fd      	b.n	80038d2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d103      	bne.n	80038e4 <xQueueReceive+0x40>
 80038dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <xQueueReceive+0x44>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <xQueueReceive+0x46>
 80038e8:	2300      	movs	r3, #0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <xQueueReceive+0x62>
    __asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	61fb      	str	r3, [r7, #28]
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	e7fd      	b.n	8003902 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003906:	f001 f9ab 	bl	8004c60 <xTaskGetSchedulerState>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <xQueueReceive+0x72>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <xQueueReceive+0x76>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <xQueueReceive+0x78>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10b      	bne.n	8003938 <xQueueReceive+0x94>
    __asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	61bb      	str	r3, [r7, #24]
}
 8003932:	bf00      	nop
 8003934:	bf00      	nop
 8003936:	e7fd      	b.n	8003934 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003938:	f001 fe5c 	bl	80055f4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800393c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	2b00      	cmp	r3, #0
 8003946:	d023      	beq.n	8003990 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800394c:	f000 f898 	bl	8003a80 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	1e5a      	subs	r2, r3, #1
 8003954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003956:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00f      	beq.n	8003980 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003962:	3310      	adds	r3, #16
 8003964:	4618      	mov	r0, r3
 8003966:	f000 ff59 	bl	800481c <xTaskRemoveFromEventList>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003970:	4b42      	ldr	r3, [pc, #264]	@ (8003a7c <xQueueReceive+0x1d8>)
 8003972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003980:	f001 fe6a 	bl	8005658 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8003984:	2101      	movs	r1, #1
 8003986:	20a4      	movs	r0, #164	@ 0xa4
 8003988:	f003 fb40 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 800398c:	2301      	movs	r3, #1
 800398e:	e071      	b.n	8003a74 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d107      	bne.n	80039a6 <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003996:	f001 fe5f 	bl	8005658 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800399a:	2100      	movs	r1, #0
 800399c:	20a4      	movs	r0, #164	@ 0xa4
 800399e:	f003 fb35 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e066      	b.n	8003a74 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80039a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80039ac:	f107 0310 	add.w	r3, r7, #16
 80039b0:	4618      	mov	r0, r3
 80039b2:	f001 f813 	bl	80049dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80039b6:	2301      	movs	r3, #1
 80039b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80039ba:	f001 fe4d 	bl	8005658 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80039be:	f000 fbfb 	bl	80041b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80039c2:	f001 fe17 	bl	80055f4 <vPortEnterCritical>
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039cc:	b25b      	sxtb	r3, r3
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d2:	d103      	bne.n	80039dc <xQueueReceive+0x138>
 80039d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039e2:	b25b      	sxtb	r3, r3
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d103      	bne.n	80039f2 <xQueueReceive+0x14e>
 80039ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039f2:	f001 fe31 	bl	8005658 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039f6:	1d3a      	adds	r2, r7, #4
 80039f8:	f107 0310 	add.w	r3, r7, #16
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 f804 	bl	8004a0c <xTaskCheckForTimeOut>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d123      	bne.n	8003a52 <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a0c:	f000 f8b0 	bl	8003b70 <prvIsQueueEmpty>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d017      	beq.n	8003a46 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a18:	3324      	adds	r3, #36	@ 0x24
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fe8a 	bl	8004738 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003a24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a26:	f000 f851 	bl	8003acc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003a2a:	f000 fbd3 	bl	80041d4 <xTaskResumeAll>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d181      	bne.n	8003938 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8003a34:	4b11      	ldr	r3, [pc, #68]	@ (8003a7c <xQueueReceive+0x1d8>)
 8003a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	e778      	b.n	8003938 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a48:	f000 f840 	bl	8003acc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003a4c:	f000 fbc2 	bl	80041d4 <xTaskResumeAll>
 8003a50:	e772      	b.n	8003938 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003a52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a54:	f000 f83a 	bl	8003acc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003a58:	f000 fbbc 	bl	80041d4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a5e:	f000 f887 	bl	8003b70 <prvIsQueueEmpty>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f43f af67 	beq.w	8003938 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	20a4      	movs	r0, #164	@ 0xa4
 8003a6e:	f003 facd 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8003a72:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3730      	adds	r7, #48	@ 0x30
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	e000ed04 	.word	0xe000ed04

08003a80 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d018      	beq.n	8003ac4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	441a      	add	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d303      	bcc.n	8003ab4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68d9      	ldr	r1, [r3, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abc:	461a      	mov	r2, r3
 8003abe:	6838      	ldr	r0, [r7, #0]
 8003ac0:	f004 f813 	bl	8007aea <memcpy>
    }
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003ad4:	f001 fd8e 	bl	80055f4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ade:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ae0:	e011      	b.n	8003b06 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d012      	beq.n	8003b10 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3324      	adds	r3, #36	@ 0x24
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fe94 	bl	800481c <xTaskRemoveFromEventList>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003afa:	f000 fff3 	bl	8004ae4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	dce9      	bgt.n	8003ae2 <prvUnlockQueue+0x16>
 8003b0e:	e000      	b.n	8003b12 <prvUnlockQueue+0x46>
                    break;
 8003b10:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	22ff      	movs	r2, #255	@ 0xff
 8003b16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003b1a:	f001 fd9d 	bl	8005658 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003b1e:	f001 fd69 	bl	80055f4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b28:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b2a:	e011      	b.n	8003b50 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d012      	beq.n	8003b5a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3310      	adds	r3, #16
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fe6f 	bl	800481c <xTaskRemoveFromEventList>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003b44:	f000 ffce 	bl	8004ae4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003b48:	7bbb      	ldrb	r3, [r7, #14]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	dce9      	bgt.n	8003b2c <prvUnlockQueue+0x60>
 8003b58:	e000      	b.n	8003b5c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003b5a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	22ff      	movs	r2, #255	@ 0xff
 8003b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003b64:	f001 fd78 	bl	8005658 <vPortExitCritical>
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003b78:	f001 fd3c 	bl	80055f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003b84:	2301      	movs	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e001      	b.n	8003b8e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003b8e:	f001 fd63 	bl	8005658 <vPortExitCritical>

    return xReturn;
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10b      	bne.n	8003bc8 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	60fb      	str	r3, [r7, #12]
}
 8003bc2:	bf00      	nop
 8003bc4:	bf00      	nop
 8003bc6:	e7fd      	b.n	8003bc4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d024      	beq.n	8003c18 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	e01e      	b.n	8003c12 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003bd4:	4a18      	ldr	r2, [pc, #96]	@ (8003c38 <vQueueAddToRegistry+0x9c>)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d105      	bne.n	8003bf0 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4a13      	ldr	r2, [pc, #76]	@ (8003c38 <vQueueAddToRegistry+0x9c>)
 8003bea:	4413      	add	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
                    break;
 8003bee:	e013      	b.n	8003c18 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <vQueueAddToRegistry+0x70>
 8003bf6:	4a10      	ldr	r2, [pc, #64]	@ (8003c38 <vQueueAddToRegistry+0x9c>)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d104      	bne.n	8003c0c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4a0c      	ldr	r2, [pc, #48]	@ (8003c38 <vQueueAddToRegistry+0x9c>)
 8003c08:	4413      	add	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b07      	cmp	r3, #7
 8003c16:	d9dd      	bls.n	8003bd4 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8003c2a:	20b6      	movs	r0, #182	@ 0xb6
 8003c2c:	f003 f9b2 	bl	8006f94 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003c30:	bf00      	nop
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	200001a4 	.word	0x200001a4

08003c3c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003c4c:	f001 fcd2 	bl	80055f4 <vPortEnterCritical>
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c56:	b25b      	sxtb	r3, r3
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d103      	bne.n	8003c66 <vQueueWaitForMessageRestricted+0x2a>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c6c:	b25b      	sxtb	r3, r3
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d103      	bne.n	8003c7c <vQueueWaitForMessageRestricted+0x40>
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c7c:	f001 fcec 	bl	8005658 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	3324      	adds	r3, #36	@ 0x24
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fd79 	bl	8004788 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003c96:	6978      	ldr	r0, [r7, #20]
 8003c98:	f7ff ff18 	bl	8003acc <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8003c9c:	20b9      	movs	r0, #185	@ 0xb9
 8003c9e:	f003 f979 	bl	8006f94 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003ca2:	bf00      	nop
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b08a      	sub	sp, #40	@ 0x28
 8003cae:	af04      	add	r7, sp, #16
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f001 fd85 	bl	80057cc <pvPortMalloc>
 8003cc2:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d013      	beq.n	8003cf2 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003cca:	2058      	movs	r0, #88	@ 0x58
 8003ccc:	f001 fd7e 	bl	80057cc <pvPortMalloc>
 8003cd0:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003cd8:	2258      	movs	r2, #88	@ 0x58
 8003cda:	2100      	movs	r1, #0
 8003cdc:	6978      	ldr	r0, [r7, #20]
 8003cde:	f003 fe9b 	bl	8007a18 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ce8:	e005      	b.n	8003cf6 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003cea:	6938      	ldr	r0, [r7, #16]
 8003cec:	f001 fea0 	bl	8005a30 <vPortFree>
 8003cf0:	e001      	b.n	8003cf6 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00d      	beq.n	8003d18 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	9303      	str	r3, [sp, #12]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	9302      	str	r3, [sp, #8]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f82d 	bl	8003d72 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8003d18:	697b      	ldr	r3, [r7, #20]
    }
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b088      	sub	sp, #32
 8003d26:	af02      	add	r7, sp, #8
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7ff ffb3 	bl	8003caa <prvCreateTask>
 8003d44:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003d4c:	6938      	ldr	r0, [r7, #16]
 8003d4e:	f000 f8a1 	bl	8003e94 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003d52:	2301      	movs	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e002      	b.n	8003d5e <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d58:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5c:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4619      	mov	r1, r3
 8003d62:	20c2      	movs	r0, #194	@ 0xc2
 8003d64:	f003 f952 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003d68:	697b      	ldr	r3, [r7, #20]
    }
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b088      	sub	sp, #32
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	21a5      	movs	r1, #165	@ 0xa5
 8003d8c:	f003 fe44 	bl	8007a18 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f023 0307 	bic.w	r3, r3, #7
 8003da8:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00b      	beq.n	8003dcc <prvInitialiseNewTask+0x5a>
    __asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	617b      	str	r3, [r7, #20]
}
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	e7fd      	b.n	8003dc8 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01e      	beq.n	8003e10 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	e012      	b.n	8003dfe <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	7819      	ldrb	r1, [r3, #0]
 8003de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	3334      	adds	r3, #52	@ 0x34
 8003de8:	460a      	mov	r2, r1
 8003dea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d006      	beq.n	8003e06 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	2b09      	cmp	r3, #9
 8003e02:	d9e9      	bls.n	8003dd8 <prvInitialiseNewTask+0x66>
 8003e04:	e000      	b.n	8003e08 <prvInitialiseNewTask+0x96>
            {
                break;
 8003e06:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d90b      	bls.n	8003e2e <prvInitialiseNewTask+0xbc>
    __asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	613b      	str	r3, [r7, #16]
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	e7fd      	b.n	8003e2a <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d901      	bls.n	8003e38 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e34:	2304      	movs	r3, #4
 8003e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e42:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e46:	3304      	adds	r3, #4
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fb9f 	bl	800358c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e50:	3318      	adds	r3, #24
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fb9a 	bl	800358c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e5c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e60:	f1c3 0205 	rsb	r2, r3, #5
 8003e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e66:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e6c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	68f9      	ldr	r1, [r7, #12]
 8003e72:	69b8      	ldr	r0, [r7, #24]
 8003e74:	f001 fa3c 	bl	80052f0 <pxPortInitialiseStack>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e88:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e8a:	bf00      	nop
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003e94:	b5b0      	push	{r4, r5, r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003e9c:	f001 fbaa 	bl	80055f4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003ea0:	4b50      	ldr	r3, [pc, #320]	@ (8003fe4 <prvAddNewTaskToReadyList+0x150>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	4a4f      	ldr	r2, [pc, #316]	@ (8003fe4 <prvAddNewTaskToReadyList+0x150>)
 8003ea8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8003eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8003fe8 <prvAddNewTaskToReadyList+0x154>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003eb2:	4a4d      	ldr	r2, [pc, #308]	@ (8003fe8 <prvAddNewTaskToReadyList+0x154>)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003eb8:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe4 <prvAddNewTaskToReadyList+0x150>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d110      	bne.n	8003ee2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003ec0:	f000 fe34 	bl	8004b2c <prvInitialiseTaskLists>
 8003ec4:	e00d      	b.n	8003ee2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003ec6:	4b49      	ldr	r3, [pc, #292]	@ (8003fec <prvAddNewTaskToReadyList+0x158>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ece:	4b46      	ldr	r3, [pc, #280]	@ (8003fe8 <prvAddNewTaskToReadyList+0x154>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d802      	bhi.n	8003ee2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003edc:	4a42      	ldr	r2, [pc, #264]	@ (8003fe8 <prvAddNewTaskToReadyList+0x154>)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003ee2:	4b43      	ldr	r3, [pc, #268]	@ (8003ff0 <prvAddNewTaskToReadyList+0x15c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	4a41      	ldr	r2, [pc, #260]	@ (8003ff0 <prvAddNewTaskToReadyList+0x15c>)
 8003eea:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003eec:	4b40      	ldr	r3, [pc, #256]	@ (8003ff0 <prvAddNewTaskToReadyList+0x15c>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <prvAddNewTaskToReadyList+0x94>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f003 f8f9 	bl	80070f4 <SEGGER_SYSVIEW_OnTaskCreate>
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	461d      	mov	r5, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461c      	mov	r4, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	1ae3      	subs	r3, r4, r3
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	462b      	mov	r3, r5
 8003f24:	f001 fed2 	bl	8005ccc <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f003 f966 	bl	80071fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f34:	2201      	movs	r2, #1
 8003f36:	409a      	lsls	r2, r3
 8003f38:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff4 <prvAddNewTaskToReadyList+0x160>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff4 <prvAddNewTaskToReadyList+0x160>)
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f46:	492c      	ldr	r1, [pc, #176]	@ (8003ff8 <prvAddNewTaskToReadyList+0x164>)
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	3304      	adds	r3, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	609a      	str	r2, [r3, #8]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	3204      	adds	r2, #4
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	1d1a      	adds	r2, r3, #4
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff8 <prvAddNewTaskToReadyList+0x164>)
 8003f86:	441a      	add	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	615a      	str	r2, [r3, #20]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f90:	4919      	ldr	r1, [pc, #100]	@ (8003ff8 <prvAddNewTaskToReadyList+0x164>)
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fa2:	1c59      	adds	r1, r3, #1
 8003fa4:	4814      	ldr	r0, [pc, #80]	@ (8003ff8 <prvAddNewTaskToReadyList+0x164>)
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4403      	add	r3, r0
 8003fb0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003fb2:	f001 fb51 	bl	8005658 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <prvAddNewTaskToReadyList+0x158>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00e      	beq.n	8003fdc <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe8 <prvAddNewTaskToReadyList+0x154>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d207      	bcs.n	8003fdc <prvAddNewTaskToReadyList+0x148>
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <prvAddNewTaskToReadyList+0x168>)
 8003fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bdb0      	pop	{r4, r5, r7, pc}
 8003fe4:	200002bc 	.word	0x200002bc
 8003fe8:	200001e4 	.word	0x200001e4
 8003fec:	200002c8 	.word	0x200002c8
 8003ff0:	200002d8 	.word	0x200002d8
 8003ff4:	200002c4 	.word	0x200002c4
 8003ff8:	200001e8 	.word	0x200001e8
 8003ffc:	e000ed04 	.word	0xe000ed04

08004000 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d018      	beq.n	8004044 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8004012:	f000 f8d1 	bl	80041b8 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8004016:	4b14      	ldr	r3, [pc, #80]	@ (8004068 <vTaskDelay+0x68>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d00b      	beq.n	8004036 <vTaskDelay+0x36>
    __asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	60bb      	str	r3, [r7, #8]
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	e7fd      	b.n	8004032 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004036:	2100      	movs	r1, #0
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fe33 	bl	8004ca4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800403e:	f000 f8c9 	bl	80041d4 <xTaskResumeAll>
 8004042:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d107      	bne.n	800405a <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 800404a:	4b08      	ldr	r3, [pc, #32]	@ (800406c <vTaskDelay+0x6c>)
 800404c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 800405a:	20c5      	movs	r0, #197	@ 0xc5
 800405c:	f002 ff9a 	bl	8006f94 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8004060:	bf00      	nop
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	200002e4 	.word	0x200002e4
 800406c:	e000ed04 	.word	0xe000ed04

08004070 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	@ 0x28
 8004074:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8004076:	2301      	movs	r3, #1
 8004078:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	e011      	b.n	80040a8 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8004084:	4a1c      	ldr	r2, [pc, #112]	@ (80040f8 <prvCreateIdleTasks+0x88>)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	4413      	add	r3, r2
 800408a:	7819      	ldrb	r1, [r3, #0]
 800408c:	1d3a      	adds	r2, r7, #4
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	4413      	add	r3, r2
 8004092:	460a      	mov	r2, r1
 8004094:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8004096:	1d3a      	adds	r2, r7, #4
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	4413      	add	r3, r2
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d006      	beq.n	80040b0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	3301      	adds	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b09      	cmp	r3, #9
 80040ac:	ddea      	ble.n	8004084 <prvCreateIdleTasks+0x14>
 80040ae:	e000      	b.n	80040b2 <prvCreateIdleTasks+0x42>
        {
            break;
 80040b0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	e015      	b.n	80040e4 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80040b8:	4b10      	ldr	r3, [pc, #64]	@ (80040fc <prvCreateIdleTasks+0x8c>)
 80040ba:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4a0f      	ldr	r2, [pc, #60]	@ (8004100 <prvCreateIdleTasks+0x90>)
 80040c2:	4413      	add	r3, r2
 80040c4:	1d39      	adds	r1, r7, #4
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	2300      	movs	r3, #0
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2300      	movs	r3, #0
 80040ce:	2282      	movs	r2, #130	@ 0x82
 80040d0:	6938      	ldr	r0, [r7, #16]
 80040d2:	f7ff fe26 	bl	8003d22 <xTaskCreate>
 80040d6:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d006      	beq.n	80040ec <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	3301      	adds	r3, #1
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	dde6      	ble.n	80040b8 <prvCreateIdleTasks+0x48>
 80040ea:	e000      	b.n	80040ee <prvCreateIdleTasks+0x7e>
        {
            break;
 80040ec:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80040ee:	69fb      	ldr	r3, [r7, #28]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3720      	adds	r7, #32
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	08008004 	.word	0x08008004
 80040fc:	08004afd 	.word	0x08004afd
 8004100:	200002e0 	.word	0x200002e0

08004104 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800410a:	f7ff ffb1 	bl	8004070 <prvCreateIdleTasks>
 800410e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d102      	bne.n	800411c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8004116:	f000 fe53 	bl	8004dc0 <xTimerCreateTimerTask>
 800411a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d124      	bne.n	800416c <vTaskStartScheduler+0x68>
    __asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	60bb      	str	r3, [r7, #8]
}
 8004134:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004136:	4b1a      	ldr	r3, [pc, #104]	@ (80041a0 <vTaskStartScheduler+0x9c>)
 8004138:	f04f 32ff 	mov.w	r2, #4294967295
 800413c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800413e:	4b19      	ldr	r3, [pc, #100]	@ (80041a4 <vTaskStartScheduler+0xa0>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004144:	4b18      	ldr	r3, [pc, #96]	@ (80041a8 <vTaskStartScheduler+0xa4>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800414a:	4b18      	ldr	r3, [pc, #96]	@ (80041ac <vTaskStartScheduler+0xa8>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b18      	ldr	r3, [pc, #96]	@ (80041b0 <vTaskStartScheduler+0xac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d102      	bne.n	800415c <vTaskStartScheduler+0x58>
 8004156:	f002 ffb1 	bl	80070bc <SEGGER_SYSVIEW_OnIdle>
 800415a:	e004      	b.n	8004166 <vTaskStartScheduler+0x62>
 800415c:	4b14      	ldr	r3, [pc, #80]	@ (80041b0 <vTaskStartScheduler+0xac>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f003 f809 	bl	8007178 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8004166:	f001 f955 	bl	8005414 <xPortStartScheduler>
 800416a:	e00f      	b.n	800418c <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d10b      	bne.n	800418c <vTaskStartScheduler+0x88>
    __asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	607b      	str	r3, [r7, #4]
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800418c:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <vTaskStartScheduler+0xb0>)
 800418e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8004190:	20cd      	movs	r0, #205	@ 0xcd
 8004192:	f002 feff 	bl	8006f94 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	200002dc 	.word	0x200002dc
 80041a4:	200002c8 	.word	0x200002c8
 80041a8:	200002c0 	.word	0x200002c0
 80041ac:	200002e0 	.word	0x200002e0
 80041b0:	200001e4 	.word	0x200001e4
 80041b4:	2000000c 	.word	0x2000000c

080041b8 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80041bc:	4b04      	ldr	r3, [pc, #16]	@ (80041d0 <vTaskSuspendAll+0x18>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3301      	adds	r3, #1
 80041c2:	4a03      	ldr	r2, [pc, #12]	@ (80041d0 <vTaskSuspendAll+0x18>)
 80041c4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 80041c6:	20cf      	movs	r0, #207	@ 0xcf
 80041c8:	f002 fee4 	bl	8006f94 <SEGGER_SYSVIEW_RecordEndCall>
}
 80041cc:	bf00      	nop
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	200002e4 	.word	0x200002e4

080041d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80041de:	2300      	movs	r3, #0
 80041e0:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80041e2:	f001 fa07 	bl	80055f4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80041ea:	4b7a      	ldr	r3, [pc, #488]	@ (80043d4 <xTaskResumeAll+0x200>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <xTaskResumeAll+0x36>
    __asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	603b      	str	r3, [r7, #0]
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	e7fd      	b.n	8004206 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800420a:	4b72      	ldr	r3, [pc, #456]	@ (80043d4 <xTaskResumeAll+0x200>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3b01      	subs	r3, #1
 8004210:	4a70      	ldr	r2, [pc, #448]	@ (80043d4 <xTaskResumeAll+0x200>)
 8004212:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004214:	4b6f      	ldr	r3, [pc, #444]	@ (80043d4 <xTaskResumeAll+0x200>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f040 80ce 	bne.w	80043ba <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800421e:	4b6e      	ldr	r3, [pc, #440]	@ (80043d8 <xTaskResumeAll+0x204>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80c9 	beq.w	80043ba <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004228:	e092      	b.n	8004350 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800422a:	4b6c      	ldr	r3, [pc, #432]	@ (80043dc <xTaskResumeAll+0x208>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	6a12      	ldr	r2, [r2, #32]
 8004240:	609a      	str	r2, [r3, #8]
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	69d2      	ldr	r2, [r2, #28]
 800424a:	605a      	str	r2, [r3, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	3318      	adds	r3, #24
 8004254:	429a      	cmp	r2, r3
 8004256:	d103      	bne.n	8004260 <xTaskResumeAll+0x8c>
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	6a1a      	ldr	r2, [r3, #32]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	605a      	str	r2, [r3, #4]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2200      	movs	r2, #0
 8004264:	629a      	str	r2, [r3, #40]	@ 0x28
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	1e5a      	subs	r2, r3, #1
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	68d2      	ldr	r2, [r2, #12]
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	6892      	ldr	r2, [r2, #8]
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3304      	adds	r3, #4
 8004292:	429a      	cmp	r2, r3
 8004294:	d103      	bne.n	800429e <xTaskResumeAll+0xca>
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	2200      	movs	r2, #0
 80042a2:	615a      	str	r2, [r3, #20]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	1e5a      	subs	r2, r3, #1
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f002 ffa3 	bl	80071fc <SEGGER_SYSVIEW_OnTaskStartReady>
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	2201      	movs	r2, #1
 80042bc:	409a      	lsls	r2, r3
 80042be:	4b48      	ldr	r3, [pc, #288]	@ (80043e0 <xTaskResumeAll+0x20c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	4a46      	ldr	r2, [pc, #280]	@ (80043e0 <xTaskResumeAll+0x20c>)
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042cc:	4945      	ldr	r1, [pc, #276]	@ (80043e4 <xTaskResumeAll+0x210>)
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	3304      	adds	r3, #4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	609a      	str	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	60da      	str	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	3204      	adds	r2, #4
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	1d1a      	adds	r2, r3, #4
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	609a      	str	r2, [r3, #8]
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4a36      	ldr	r2, [pc, #216]	@ (80043e4 <xTaskResumeAll+0x210>)
 800430c:	441a      	add	r2, r3
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	615a      	str	r2, [r3, #20]
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004316:	4933      	ldr	r1, [pc, #204]	@ (80043e4 <xTaskResumeAll+0x210>)
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004328:	1c59      	adds	r1, r3, #1
 800432a:	482e      	ldr	r0, [pc, #184]	@ (80043e4 <xTaskResumeAll+0x210>)
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4403      	add	r3, r0
 8004336:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433c:	4b2a      	ldr	r3, [pc, #168]	@ (80043e8 <xTaskResumeAll+0x214>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004342:	429a      	cmp	r2, r3
 8004344:	d904      	bls.n	8004350 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8004346:	4a29      	ldr	r2, [pc, #164]	@ (80043ec <xTaskResumeAll+0x218>)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2101      	movs	r1, #1
 800434c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004350:	4b22      	ldr	r3, [pc, #136]	@ (80043dc <xTaskResumeAll+0x208>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f47f af68 	bne.w	800422a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004360:	f000 fc62 	bl	8004c28 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004364:	4b22      	ldr	r3, [pc, #136]	@ (80043f0 <xTaskResumeAll+0x21c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d012      	beq.n	8004396 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004370:	f000 f854 	bl	800441c <xTaskIncrementTick>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d004      	beq.n	8004384 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800437a:	4a1c      	ldr	r2, [pc, #112]	@ (80043ec <xTaskResumeAll+0x218>)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2101      	movs	r1, #1
 8004380:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3b01      	subs	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1ef      	bne.n	8004370 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8004390:	4b17      	ldr	r3, [pc, #92]	@ (80043f0 <xTaskResumeAll+0x21c>)
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8004396:	4a15      	ldr	r2, [pc, #84]	@ (80043ec <xTaskResumeAll+0x218>)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80043a6:	4b10      	ldr	r3, [pc, #64]	@ (80043e8 <xTaskResumeAll+0x214>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4b12      	ldr	r3, [pc, #72]	@ (80043f4 <xTaskResumeAll+0x220>)
 80043ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80043ba:	f001 f94d 	bl	8005658 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	4619      	mov	r1, r3
 80043c2:	20d0      	movs	r0, #208	@ 0xd0
 80043c4:	f002 fe22 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 80043c8:	69bb      	ldr	r3, [r7, #24]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200002e4 	.word	0x200002e4
 80043d8:	200002bc 	.word	0x200002bc
 80043dc:	2000027c 	.word	0x2000027c
 80043e0:	200002c4 	.word	0x200002c4
 80043e4:	200001e8 	.word	0x200001e8
 80043e8:	200001e4 	.word	0x200001e4
 80043ec:	200002d0 	.word	0x200002d0
 80043f0:	200002cc 	.word	0x200002cc
 80043f4:	e000ed04 	.word	0xe000ed04

080043f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80043fe:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <xTaskGetTickCount+0x20>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	20d1      	movs	r0, #209	@ 0xd1
 8004408:	f002 fe00 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 800440c:	687b      	ldr	r3, [r7, #4]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	200002c0 	.word	0x200002c0

0800441c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	@ 0x28
 8004420:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004426:	4b83      	ldr	r3, [pc, #524]	@ (8004634 <xTaskIncrementTick+0x218>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f040 80f3 	bne.w	8004616 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004430:	4b81      	ldr	r3, [pc, #516]	@ (8004638 <xTaskIncrementTick+0x21c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3301      	adds	r3, #1
 8004436:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004438:	4a7f      	ldr	r2, [pc, #508]	@ (8004638 <xTaskIncrementTick+0x21c>)
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d121      	bne.n	8004488 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8004444:	4b7d      	ldr	r3, [pc, #500]	@ (800463c <xTaskIncrementTick+0x220>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <xTaskIncrementTick+0x4a>
    __asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	607b      	str	r3, [r7, #4]
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	e7fd      	b.n	8004462 <xTaskIncrementTick+0x46>
 8004466:	4b75      	ldr	r3, [pc, #468]	@ (800463c <xTaskIncrementTick+0x220>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	4b74      	ldr	r3, [pc, #464]	@ (8004640 <xTaskIncrementTick+0x224>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a72      	ldr	r2, [pc, #456]	@ (800463c <xTaskIncrementTick+0x220>)
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	4a72      	ldr	r2, [pc, #456]	@ (8004640 <xTaskIncrementTick+0x224>)
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	4b72      	ldr	r3, [pc, #456]	@ (8004644 <xTaskIncrementTick+0x228>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3301      	adds	r3, #1
 8004480:	4a70      	ldr	r2, [pc, #448]	@ (8004644 <xTaskIncrementTick+0x228>)
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	f000 fbd0 	bl	8004c28 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004488:	4b6f      	ldr	r3, [pc, #444]	@ (8004648 <xTaskIncrementTick+0x22c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6a3a      	ldr	r2, [r7, #32]
 800448e:	429a      	cmp	r2, r3
 8004490:	f0c0 80ac 	bcc.w	80045ec <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004494:	4b69      	ldr	r3, [pc, #420]	@ (800463c <xTaskIncrementTick+0x220>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d104      	bne.n	80044a8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800449e:	4b6a      	ldr	r3, [pc, #424]	@ (8004648 <xTaskIncrementTick+0x22c>)
 80044a0:	f04f 32ff 	mov.w	r2, #4294967295
 80044a4:	601a      	str	r2, [r3, #0]
                    break;
 80044a6:	e0a1      	b.n	80045ec <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044a8:	4b64      	ldr	r3, [pc, #400]	@ (800463c <xTaskIncrementTick+0x220>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80044b8:	6a3a      	ldr	r2, [r7, #32]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d203      	bcs.n	80044c8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80044c0:	4a61      	ldr	r2, [pc, #388]	@ (8004648 <xTaskIncrementTick+0x22c>)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	6013      	str	r3, [r2, #0]
                        break;
 80044c6:	e091      	b.n	80045ec <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	68d2      	ldr	r2, [r2, #12]
 80044d6:	609a      	str	r2, [r3, #8]
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	6892      	ldr	r2, [r2, #8]
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	3304      	adds	r3, #4
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d103      	bne.n	80044f6 <xTaskIncrementTick+0xda>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2200      	movs	r2, #0
 80044fa:	615a      	str	r2, [r3, #20]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	1e5a      	subs	r2, r3, #1
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01e      	beq.n	800454c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	6a12      	ldr	r2, [r2, #32]
 800451c:	609a      	str	r2, [r3, #8]
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	69d2      	ldr	r2, [r2, #28]
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	3318      	adds	r3, #24
 8004530:	429a      	cmp	r2, r3
 8004532:	d103      	bne.n	800453c <xTaskIncrementTick+0x120>
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	605a      	str	r2, [r3, #4]
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	2200      	movs	r2, #0
 8004540:	629a      	str	r2, [r3, #40]	@ 0x28
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	1e5a      	subs	r2, r3, #1
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	4618      	mov	r0, r3
 8004550:	f002 fe54 	bl	80071fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	2201      	movs	r2, #1
 800455a:	409a      	lsls	r2, r3
 800455c:	4b3b      	ldr	r3, [pc, #236]	@ (800464c <xTaskIncrementTick+0x230>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4313      	orrs	r3, r2
 8004562:	4a3a      	ldr	r2, [pc, #232]	@ (800464c <xTaskIncrementTick+0x230>)
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456a:	4939      	ldr	r1, [pc, #228]	@ (8004650 <xTaskIncrementTick+0x234>)
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	3304      	adds	r3, #4
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	609a      	str	r2, [r3, #8]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	3204      	adds	r2, #4
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	1d1a      	adds	r2, r3, #4
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	609a      	str	r2, [r3, #8]
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4a29      	ldr	r2, [pc, #164]	@ (8004650 <xTaskIncrementTick+0x234>)
 80045aa:	441a      	add	r2, r3
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	615a      	str	r2, [r3, #20]
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b4:	4926      	ldr	r1, [pc, #152]	@ (8004650 <xTaskIncrementTick+0x234>)
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80045c6:	1c59      	adds	r1, r3, #1
 80045c8:	4821      	ldr	r0, [pc, #132]	@ (8004650 <xTaskIncrementTick+0x234>)
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4403      	add	r3, r0
 80045d4:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045da:	4b1e      	ldr	r3, [pc, #120]	@ (8004654 <xTaskIncrementTick+0x238>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	429a      	cmp	r2, r3
 80045e2:	f67f af57 	bls.w	8004494 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80045e6:	2301      	movs	r3, #1
 80045e8:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ea:	e753      	b.n	8004494 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80045ec:	4b19      	ldr	r3, [pc, #100]	@ (8004654 <xTaskIncrementTick+0x238>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f2:	4917      	ldr	r1, [pc, #92]	@ (8004650 <xTaskIncrementTick+0x234>)
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d901      	bls.n	8004608 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004608:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <xTaskIncrementTick+0x23c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d007      	beq.n	8004620 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8004610:	2301      	movs	r3, #1
 8004612:	627b      	str	r3, [r7, #36]	@ 0x24
 8004614:	e004      	b.n	8004620 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004616:	4b11      	ldr	r3, [pc, #68]	@ (800465c <xTaskIncrementTick+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3301      	adds	r3, #1
 800461c:	4a0f      	ldr	r2, [pc, #60]	@ (800465c <xTaskIncrementTick+0x240>)
 800461e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	4619      	mov	r1, r3
 8004624:	20db      	movs	r0, #219	@ 0xdb
 8004626:	f002 fcf1 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800462c:	4618      	mov	r0, r3
 800462e:	3728      	adds	r7, #40	@ 0x28
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	200002e4 	.word	0x200002e4
 8004638:	200002c0 	.word	0x200002c0
 800463c:	20000274 	.word	0x20000274
 8004640:	20000278 	.word	0x20000278
 8004644:	200002d4 	.word	0x200002d4
 8004648:	200002dc 	.word	0x200002dc
 800464c:	200002c4 	.word	0x200002c4
 8004650:	200001e8 	.word	0x200001e8
 8004654:	200001e4 	.word	0x200001e4
 8004658:	200002d0 	.word	0x200002d0
 800465c:	200002cc 	.word	0x200002cc

08004660 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004666:	4b2e      	ldr	r3, [pc, #184]	@ (8004720 <vTaskSwitchContext+0xc0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800466e:	4b2d      	ldr	r3, [pc, #180]	@ (8004724 <vTaskSwitchContext+0xc4>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004674:	e04f      	b.n	8004716 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8004676:	4b2b      	ldr	r3, [pc, #172]	@ (8004724 <vTaskSwitchContext+0xc4>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800467c:	4b2a      	ldr	r3, [pc, #168]	@ (8004728 <vTaskSwitchContext+0xc8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	fab3 f383 	clz	r3, r3
 8004688:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800468a:	7afb      	ldrb	r3, [r7, #11]
 800468c:	f1c3 031f 	rsb	r3, r3, #31
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	4926      	ldr	r1, [pc, #152]	@ (800472c <vTaskSwitchContext+0xcc>)
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <vTaskSwitchContext+0x5e>
    __asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	607b      	str	r3, [r7, #4]
}
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop
 80046bc:	e7fd      	b.n	80046ba <vTaskSwitchContext+0x5a>
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4a18      	ldr	r2, [pc, #96]	@ (800472c <vTaskSwitchContext+0xcc>)
 80046ca:	4413      	add	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	605a      	str	r2, [r3, #4]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	3308      	adds	r3, #8
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d103      	bne.n	80046ec <vTaskSwitchContext+0x8c>
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	605a      	str	r2, [r3, #4]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	4a0f      	ldr	r2, [pc, #60]	@ (8004730 <vTaskSwitchContext+0xd0>)
 80046f4:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80046f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004734 <vTaskSwitchContext+0xd4>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004730 <vTaskSwitchContext+0xd0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d102      	bne.n	8004708 <vTaskSwitchContext+0xa8>
 8004702:	f002 fcdb 	bl	80070bc <SEGGER_SYSVIEW_OnIdle>
 8004706:	e004      	b.n	8004712 <vTaskSwitchContext+0xb2>
 8004708:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <vTaskSwitchContext+0xd0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f002 fd33 	bl	8007178 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004712:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <vTaskSwitchContext+0xd0>)
 8004714:	681b      	ldr	r3, [r3, #0]
    }
 8004716:	bf00      	nop
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200002e4 	.word	0x200002e4
 8004724:	200002d0 	.word	0x200002d0
 8004728:	200002c4 	.word	0x200002c4
 800472c:	200001e8 	.word	0x200001e8
 8004730:	200001e4 	.word	0x200001e4
 8004734:	200002e0 	.word	0x200002e0

08004738 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10b      	bne.n	8004760 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	60fb      	str	r3, [r7, #12]
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	e7fd      	b.n	800475c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004760:	4b08      	ldr	r3, [pc, #32]	@ (8004784 <vTaskPlaceOnEventList+0x4c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3318      	adds	r3, #24
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7fe ff1e 	bl	80035aa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800476e:	2101      	movs	r1, #1
 8004770:	6838      	ldr	r0, [r7, #0]
 8004772:	f000 fa97 	bl	8004ca4 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8004776:	20e1      	movs	r0, #225	@ 0xe1
 8004778:	f002 fc0c 	bl	8006f94 <SEGGER_SYSVIEW_RecordEndCall>
}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	200001e4 	.word	0x200001e4

08004788 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10b      	bne.n	80047b2 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	613b      	str	r3, [r7, #16]
}
 80047ac:	bf00      	nop
 80047ae:	bf00      	nop
 80047b0:	e7fd      	b.n	80047ae <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	4b17      	ldr	r3, [pc, #92]	@ (8004818 <vTaskPlaceOnEventListRestricted+0x90>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	61da      	str	r2, [r3, #28]
 80047c0:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <vTaskPlaceOnEventListRestricted+0x90>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	6892      	ldr	r2, [r2, #8]
 80047c8:	621a      	str	r2, [r3, #32]
 80047ca:	4b13      	ldr	r3, [pc, #76]	@ (8004818 <vTaskPlaceOnEventListRestricted+0x90>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	3218      	adds	r2, #24
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	4b10      	ldr	r3, [pc, #64]	@ (8004818 <vTaskPlaceOnEventListRestricted+0x90>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f103 0218 	add.w	r2, r3, #24
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	609a      	str	r2, [r3, #8]
 80047e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004818 <vTaskPlaceOnEventListRestricted+0x90>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80047fa:	f04f 33ff 	mov.w	r3, #4294967295
 80047fe:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	68b8      	ldr	r0, [r7, #8]
 8004804:	f000 fa4e 	bl	8004ca4 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8004808:	20e3      	movs	r0, #227	@ 0xe3
 800480a:	f002 fbc3 	bl	8006f94 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800480e:	bf00      	nop
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	200001e4 	.word	0x200001e4

0800481c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	@ 0x28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	60fb      	str	r3, [r7, #12]
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	e7fd      	b.n	8004846 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	6a3a      	ldr	r2, [r7, #32]
 8004856:	6a12      	ldr	r2, [r2, #32]
 8004858:	609a      	str	r2, [r3, #8]
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	6a3a      	ldr	r2, [r7, #32]
 8004860:	69d2      	ldr	r2, [r2, #28]
 8004862:	605a      	str	r2, [r3, #4]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	3318      	adds	r3, #24
 800486c:	429a      	cmp	r2, r3
 800486e:	d103      	bne.n	8004878 <xTaskRemoveFromEventList+0x5c>
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	6a1a      	ldr	r2, [r3, #32]
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	605a      	str	r2, [r3, #4]
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	2200      	movs	r2, #0
 800487c:	629a      	str	r2, [r3, #40]	@ 0x28
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	1e5a      	subs	r2, r3, #1
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004888:	4b4e      	ldr	r3, [pc, #312]	@ (80049c4 <xTaskRemoveFromEventList+0x1a8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d164      	bne.n	800495a <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	6a3a      	ldr	r2, [r7, #32]
 800489c:	68d2      	ldr	r2, [r2, #12]
 800489e:	609a      	str	r2, [r3, #8]
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	6a3a      	ldr	r2, [r7, #32]
 80048a6:	6892      	ldr	r2, [r2, #8]
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	3304      	adds	r3, #4
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d103      	bne.n	80048be <xTaskRemoveFromEventList+0xa2>
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	2200      	movs	r2, #0
 80048c2:	615a      	str	r2, [r3, #20]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	1e5a      	subs	r2, r3, #1
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f002 fc93 	bl	80071fc <SEGGER_SYSVIEW_OnTaskStartReady>
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048da:	2201      	movs	r2, #1
 80048dc:	409a      	lsls	r2, r3
 80048de:	4b3a      	ldr	r3, [pc, #232]	@ (80049c8 <xTaskRemoveFromEventList+0x1ac>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	4a38      	ldr	r2, [pc, #224]	@ (80049c8 <xTaskRemoveFromEventList+0x1ac>)
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ec:	4937      	ldr	r1, [pc, #220]	@ (80049cc <xTaskRemoveFromEventList+0x1b0>)
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	3304      	adds	r3, #4
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	60da      	str	r2, [r3, #12]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	6a3a      	ldr	r2, [r7, #32]
 8004912:	3204      	adds	r2, #4
 8004914:	605a      	str	r2, [r3, #4]
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	1d1a      	adds	r2, r3, #4
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	609a      	str	r2, [r3, #8]
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4a28      	ldr	r2, [pc, #160]	@ (80049cc <xTaskRemoveFromEventList+0x1b0>)
 800492c:	441a      	add	r2, r3
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	615a      	str	r2, [r3, #20]
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004936:	4925      	ldr	r1, [pc, #148]	@ (80049cc <xTaskRemoveFromEventList+0x1b0>)
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6a3a      	ldr	r2, [r7, #32]
 8004946:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004948:	1c59      	adds	r1, r3, #1
 800494a:	4820      	ldr	r0, [pc, #128]	@ (80049cc <xTaskRemoveFromEventList+0x1b0>)
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4403      	add	r3, r0
 8004956:	6019      	str	r1, [r3, #0]
 8004958:	e01b      	b.n	8004992 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800495a:	4b1d      	ldr	r3, [pc, #116]	@ (80049d0 <xTaskRemoveFromEventList+0x1b4>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	61bb      	str	r3, [r7, #24]
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	61da      	str	r2, [r3, #28]
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	621a      	str	r2, [r3, #32]
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	6a3a      	ldr	r2, [r7, #32]
 8004974:	3218      	adds	r2, #24
 8004976:	605a      	str	r2, [r3, #4]
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	f103 0218 	add.w	r2, r3, #24
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	609a      	str	r2, [r3, #8]
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	4a12      	ldr	r2, [pc, #72]	@ (80049d0 <xTaskRemoveFromEventList+0x1b4>)
 8004986:	629a      	str	r2, [r3, #40]	@ 0x28
 8004988:	4b11      	ldr	r3, [pc, #68]	@ (80049d0 <xTaskRemoveFromEventList+0x1b4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3301      	adds	r3, #1
 800498e:	4a10      	ldr	r2, [pc, #64]	@ (80049d0 <xTaskRemoveFromEventList+0x1b4>)
 8004990:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004996:	4b0f      	ldr	r3, [pc, #60]	@ (80049d4 <xTaskRemoveFromEventList+0x1b8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	429a      	cmp	r2, r3
 800499e:	d905      	bls.n	80049ac <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80049a4:	4b0c      	ldr	r3, [pc, #48]	@ (80049d8 <xTaskRemoveFromEventList+0x1bc>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e001      	b.n	80049b0 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 80049ac:	2300      	movs	r3, #0
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 80049b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b2:	4619      	mov	r1, r3
 80049b4:	20e4      	movs	r0, #228	@ 0xe4
 80049b6:	f002 fb29 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3728      	adds	r7, #40	@ 0x28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	200002e4 	.word	0x200002e4
 80049c8:	200002c4 	.word	0x200002c4
 80049cc:	200001e8 	.word	0x200001e8
 80049d0:	2000027c 	.word	0x2000027c
 80049d4:	200001e4 	.word	0x200001e4
 80049d8:	200002d0 	.word	0x200002d0

080049dc <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049e4:	4b07      	ldr	r3, [pc, #28]	@ (8004a04 <vTaskInternalSetTimeOutState+0x28>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80049ec:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <vTaskInternalSetTimeOutState+0x2c>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 80049f4:	20e7      	movs	r0, #231	@ 0xe7
 80049f6:	f002 facd 	bl	8006f94 <SEGGER_SYSVIEW_RecordEndCall>
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	200002d4 	.word	0x200002d4
 8004a08:	200002c0 	.word	0x200002c0

08004a0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10b      	bne.n	8004a34 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	613b      	str	r3, [r7, #16]
}
 8004a2e:	bf00      	nop
 8004a30:	bf00      	nop
 8004a32:	e7fd      	b.n	8004a30 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10b      	bne.n	8004a52 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	60fb      	str	r3, [r7, #12]
}
 8004a4c:	bf00      	nop
 8004a4e:	bf00      	nop
 8004a50:	e7fd      	b.n	8004a4e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004a52:	f000 fdcf 	bl	80055f4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004a56:	4b21      	ldr	r3, [pc, #132]	@ (8004adc <xTaskCheckForTimeOut+0xd0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	d102      	bne.n	8004a76 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	e026      	b.n	8004ac4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b19      	ldr	r3, [pc, #100]	@ (8004ae0 <xTaskCheckForTimeOut+0xd4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d00a      	beq.n	8004a98 <xTaskCheckForTimeOut+0x8c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d305      	bcc.n	8004a98 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	e015      	b.n	8004ac4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d20b      	bcs.n	8004aba <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	1ad2      	subs	r2, r2, r3
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff ff94 	bl	80049dc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	e004      	b.n	8004ac4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004ac4:	f000 fdc8 	bl	8005658 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4619      	mov	r1, r3
 8004acc:	20e8      	movs	r0, #232	@ 0xe8
 8004ace:	f002 fa9d 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	200002c0 	.word	0x200002c0
 8004ae0:	200002d4 	.word	0x200002d4

08004ae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	@ (8004af8 <vTaskMissedYield+0x14>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8004aee:	20e9      	movs	r0, #233	@ 0xe9
 8004af0:	f002 fa50 	bl	8006f94 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004af4:	bf00      	nop
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	200002d0 	.word	0x200002d0

08004afc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004b04:	f000 f852 	bl	8004bac <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004b08:	4b06      	ldr	r3, [pc, #24]	@ (8004b24 <prvIdleTask+0x28>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d9f9      	bls.n	8004b04 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004b10:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <prvIdleTask+0x2c>)
 8004b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004b20:	e7f0      	b.n	8004b04 <prvIdleTask+0x8>
 8004b22:	bf00      	nop
 8004b24:	200001e8 	.word	0x200001e8
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	e00c      	b.n	8004b52 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4a12      	ldr	r2, [pc, #72]	@ (8004b8c <prvInitialiseTaskLists+0x60>)
 8004b44:	4413      	add	r3, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fcfe 	bl	8003548 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d9ef      	bls.n	8004b38 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004b58:	480d      	ldr	r0, [pc, #52]	@ (8004b90 <prvInitialiseTaskLists+0x64>)
 8004b5a:	f7fe fcf5 	bl	8003548 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004b5e:	480d      	ldr	r0, [pc, #52]	@ (8004b94 <prvInitialiseTaskLists+0x68>)
 8004b60:	f7fe fcf2 	bl	8003548 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004b64:	480c      	ldr	r0, [pc, #48]	@ (8004b98 <prvInitialiseTaskLists+0x6c>)
 8004b66:	f7fe fcef 	bl	8003548 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004b6a:	480c      	ldr	r0, [pc, #48]	@ (8004b9c <prvInitialiseTaskLists+0x70>)
 8004b6c:	f7fe fcec 	bl	8003548 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004b70:	480b      	ldr	r0, [pc, #44]	@ (8004ba0 <prvInitialiseTaskLists+0x74>)
 8004b72:	f7fe fce9 	bl	8003548 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004b76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <prvInitialiseTaskLists+0x78>)
 8004b78:	4a05      	ldr	r2, [pc, #20]	@ (8004b90 <prvInitialiseTaskLists+0x64>)
 8004b7a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba8 <prvInitialiseTaskLists+0x7c>)
 8004b7e:	4a05      	ldr	r2, [pc, #20]	@ (8004b94 <prvInitialiseTaskLists+0x68>)
 8004b80:	601a      	str	r2, [r3, #0]
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200001e8 	.word	0x200001e8
 8004b90:	2000024c 	.word	0x2000024c
 8004b94:	20000260 	.word	0x20000260
 8004b98:	2000027c 	.word	0x2000027c
 8004b9c:	20000290 	.word	0x20000290
 8004ba0:	200002a8 	.word	0x200002a8
 8004ba4:	20000274 	.word	0x20000274
 8004ba8:	20000278 	.word	0x20000278

08004bac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bb2:	e019      	b.n	8004be8 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004bb4:	f000 fd1e 	bl	80055f4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004bb8:	4b10      	ldr	r3, [pc, #64]	@ (8004bfc <prvCheckTasksWaitingTermination+0x50>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fd2b 	bl	8003620 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8004bca:	4b0d      	ldr	r3, [pc, #52]	@ (8004c00 <prvCheckTasksWaitingTermination+0x54>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8004c00 <prvCheckTasksWaitingTermination+0x54>)
 8004bd2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004c04 <prvCheckTasksWaitingTermination+0x58>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	4a0a      	ldr	r2, [pc, #40]	@ (8004c04 <prvCheckTasksWaitingTermination+0x58>)
 8004bdc:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8004bde:	f000 fd3b 	bl	8005658 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f810 	bl	8004c08 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004be8:	4b06      	ldr	r3, [pc, #24]	@ (8004c04 <prvCheckTasksWaitingTermination+0x58>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e1      	bne.n	8004bb4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000290 	.word	0x20000290
 8004c00:	200002bc 	.word	0x200002bc
 8004c04:	200002a4 	.word	0x200002a4

08004c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 ff0b 	bl	8005a30 <vPortFree>
            vPortFree( pxTCB );
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 ff08 	bl	8005a30 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <prvResetNextTaskUnblockTime+0x30>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d104      	bne.n	8004c40 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004c36:	4b09      	ldr	r3, [pc, #36]	@ (8004c5c <prvResetNextTaskUnblockTime+0x34>)
 8004c38:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004c3e:	e005      	b.n	8004c4c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c40:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <prvResetNextTaskUnblockTime+0x30>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a04      	ldr	r2, [pc, #16]	@ (8004c5c <prvResetNextTaskUnblockTime+0x34>)
 8004c4a:	6013      	str	r3, [r2, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	20000274 	.word	0x20000274
 8004c5c:	200002dc 	.word	0x200002dc

08004c60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8004c66:	4b0d      	ldr	r3, [pc, #52]	@ (8004c9c <xTaskGetSchedulerState+0x3c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	e008      	b.n	8004c86 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004c74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca0 <xTaskGetSchedulerState+0x40>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	607b      	str	r3, [r7, #4]
 8004c80:	e001      	b.n	8004c86 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8004c82:	2300      	movs	r3, #0
 8004c84:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	20f5      	movs	r0, #245	@ 0xf5
 8004c8c:	f002 f9be 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004c90:	687b      	ldr	r3, [r7, #4]
    }
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200002c8 	.word	0x200002c8
 8004ca0:	200002e4 	.word	0x200002e4

08004ca4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004cae:	4b3d      	ldr	r3, [pc, #244]	@ (8004da4 <prvAddCurrentTaskToDelayedList+0x100>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8004cb4:	4b3c      	ldr	r3, [pc, #240]	@ (8004da8 <prvAddCurrentTaskToDelayedList+0x104>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8004cba:	4b3c      	ldr	r3, [pc, #240]	@ (8004dac <prvAddCurrentTaskToDelayedList+0x108>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe fcaa 	bl	8003620 <uxListRemove>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004cd2:	4b37      	ldr	r3, [pc, #220]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd8:	2201      	movs	r2, #1
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43da      	mvns	r2, r3
 8004ce0:	4b34      	ldr	r3, [pc, #208]	@ (8004db4 <prvAddCurrentTaskToDelayedList+0x110>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	4a33      	ldr	r2, [pc, #204]	@ (8004db4 <prvAddCurrentTaskToDelayedList+0x110>)
 8004ce8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf0:	d124      	bne.n	8004d3c <prvAddCurrentTaskToDelayedList+0x98>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d021      	beq.n	8004d3c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8004db8 <prvAddCurrentTaskToDelayedList+0x114>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	609a      	str	r2, [r3, #8]
 8004d06:	4b2a      	ldr	r3, [pc, #168]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	6892      	ldr	r2, [r2, #8]
 8004d0e:	60da      	str	r2, [r3, #12]
 8004d10:	4b27      	ldr	r3, [pc, #156]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	3204      	adds	r2, #4
 8004d1a:	605a      	str	r2, [r3, #4]
 8004d1c:	4b24      	ldr	r3, [pc, #144]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	1d1a      	adds	r2, r3, #4
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	609a      	str	r2, [r3, #8]
 8004d26:	4b22      	ldr	r3, [pc, #136]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a23      	ldr	r2, [pc, #140]	@ (8004db8 <prvAddCurrentTaskToDelayedList+0x114>)
 8004d2c:	615a      	str	r2, [r3, #20]
 8004d2e:	4b22      	ldr	r3, [pc, #136]	@ (8004db8 <prvAddCurrentTaskToDelayedList+0x114>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3301      	adds	r3, #1
 8004d34:	4a20      	ldr	r2, [pc, #128]	@ (8004db8 <prvAddCurrentTaskToDelayedList+0x114>)
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004d3a:	e02e      	b.n	8004d9a <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004d3c:	69fa      	ldr	r2, [r7, #28]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4413      	add	r3, r2
 8004d42:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d44:	4b1a      	ldr	r3, [pc, #104]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d20d      	bcs.n	8004d70 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004d54:	4b16      	ldr	r3, [pc, #88]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2104      	movs	r1, #4
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f002 fa90 	bl	8007280 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004d60:	4b13      	ldr	r3, [pc, #76]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3304      	adds	r3, #4
 8004d66:	4619      	mov	r1, r3
 8004d68:	6978      	ldr	r0, [r7, #20]
 8004d6a:	f7fe fc1e 	bl	80035aa <vListInsert>
}
 8004d6e:	e014      	b.n	8004d9a <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004d70:	4b0f      	ldr	r3, [pc, #60]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2104      	movs	r1, #4
 8004d76:	4618      	mov	r0, r3
 8004d78:	f002 fa82 	bl	8007280 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004db0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3304      	adds	r3, #4
 8004d82:	4619      	mov	r1, r3
 8004d84:	69b8      	ldr	r0, [r7, #24]
 8004d86:	f7fe fc10 	bl	80035aa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004dbc <prvAddCurrentTaskToDelayedList+0x118>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d202      	bcs.n	8004d9a <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8004d94:	4a09      	ldr	r2, [pc, #36]	@ (8004dbc <prvAddCurrentTaskToDelayedList+0x118>)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6013      	str	r3, [r2, #0]
}
 8004d9a:	bf00      	nop
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	200002c0 	.word	0x200002c0
 8004da8:	20000274 	.word	0x20000274
 8004dac:	20000278 	.word	0x20000278
 8004db0:	200001e4 	.word	0x200001e4
 8004db4:	200002c4 	.word	0x200002c4
 8004db8:	200002a8 	.word	0x200002a8
 8004dbc:	200002dc 	.word	0x200002dc

08004dc0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004dca:	f000 fa5b 	bl	8005284 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004dce:	4b15      	ldr	r3, [pc, #84]	@ (8004e24 <xTimerCreateTimerTask+0x64>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004dd6:	4b14      	ldr	r3, [pc, #80]	@ (8004e28 <xTimerCreateTimerTask+0x68>)
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	2302      	movs	r3, #2
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	2300      	movs	r3, #0
 8004de0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004de4:	4911      	ldr	r1, [pc, #68]	@ (8004e2c <xTimerCreateTimerTask+0x6c>)
 8004de6:	4812      	ldr	r0, [pc, #72]	@ (8004e30 <xTimerCreateTimerTask+0x70>)
 8004de8:	f7fe ff9b 	bl	8003d22 <xTaskCreate>
 8004dec:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	603b      	str	r3, [r7, #0]
}
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
 8004e0a:	e7fd      	b.n	8004e08 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8004e14:	f002 f8fa 	bl	800700c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004e18:	687b      	ldr	r3, [r7, #4]
    }
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000318 	.word	0x20000318
 8004e28:	2000031c 	.word	0x2000031c
 8004e2c:	0800800c 	.word	0x0800800c
 8004e30:	08004ed9 	.word	0x08004ed9

08004e34 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004e40:	e008      	b.n	8004e54 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	4413      	add	r3, r2
 8004e4a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	18d1      	adds	r1, r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f8df 	bl	8005024 <prvInsertTimerInActiveList>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1ea      	bne.n	8004e42 <prvReloadTimer+0xe>
        }
    }
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e82:	4b14      	ldr	r3, [pc, #80]	@ (8004ed4 <prvProcessExpiredTimer+0x5c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fe fbc5 	bl	8003620 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7ff ffc3 	bl	8004e34 <prvReloadTimer>
 8004eae:	e008      	b.n	8004ec2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004eb6:	f023 0301 	bic.w	r3, r3, #1
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	4798      	blx	r3
    }
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000310 	.word	0x20000310

08004ed8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ee0:	f107 0308 	add.w	r3, r7, #8
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 f859 	bl	8004f9c <prvGetNextExpireTime>
 8004eea:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f805 	bl	8004f00 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004ef6:	f000 f8d7 	bl	80050a8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004efa:	bf00      	nop
 8004efc:	e7f0      	b.n	8004ee0 <prvTimerTask+0x8>
	...

08004f00 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004f0a:	f7ff f955 	bl	80041b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f0e:	f107 0308 	add.w	r3, r7, #8
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 f866 	bl	8004fe4 <prvSampleTimeNow>
 8004f18:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d130      	bne.n	8004f82 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <prvProcessTimerOrBlockTask+0x3c>
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d806      	bhi.n	8004f3c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004f2e:	f7ff f951 	bl	80041d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f32:	68f9      	ldr	r1, [r7, #12]
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff ff9f 	bl	8004e78 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004f3a:	e024      	b.n	8004f86 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f42:	4b13      	ldr	r3, [pc, #76]	@ (8004f90 <prvProcessTimerOrBlockTask+0x90>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <prvProcessTimerOrBlockTask+0x50>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <prvProcessTimerOrBlockTask+0x52>
 8004f50:	2300      	movs	r3, #0
 8004f52:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f54:	4b0f      	ldr	r3, [pc, #60]	@ (8004f94 <prvProcessTimerOrBlockTask+0x94>)
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	4619      	mov	r1, r3
 8004f62:	f7fe fe6b 	bl	8003c3c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004f66:	f7ff f935 	bl	80041d4 <xTaskResumeAll>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004f70:	4b09      	ldr	r3, [pc, #36]	@ (8004f98 <prvProcessTimerOrBlockTask+0x98>)
 8004f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	f3bf 8f6f 	isb	sy
    }
 8004f80:	e001      	b.n	8004f86 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004f82:	f7ff f927 	bl	80041d4 <xTaskResumeAll>
    }
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000314 	.word	0x20000314
 8004f94:	20000318 	.word	0x20000318
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe0 <prvGetNextExpireTime+0x44>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <prvGetNextExpireTime+0x16>
 8004fae:	2201      	movs	r2, #1
 8004fb0:	e000      	b.n	8004fb4 <prvGetNextExpireTime+0x18>
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fc0:	4b07      	ldr	r3, [pc, #28]	@ (8004fe0 <prvGetNextExpireTime+0x44>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e001      	b.n	8004fd0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
    }
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000310 	.word	0x20000310

08004fe4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004fec:	f7ff fa04 	bl	80043f8 <xTaskGetTickCount>
 8004ff0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8005020 <prvSampleTimeNow+0x3c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d205      	bcs.n	8005008 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004ffc:	f000 f91c 	bl	8005238 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e002      	b.n	800500e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800500e:	4a04      	ldr	r2, [pc, #16]	@ (8005020 <prvSampleTimeNow+0x3c>)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005014:	68fb      	ldr	r3, [r7, #12]
    }
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000320 	.word	0x20000320

08005024 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	429a      	cmp	r2, r3
 8005048:	d812      	bhi.n	8005070 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	429a      	cmp	r2, r3
 8005056:	d302      	bcc.n	800505e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005058:	2301      	movs	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	e01b      	b.n	8005096 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800505e:	4b10      	ldr	r3, [pc, #64]	@ (80050a0 <prvInsertTimerInActiveList+0x7c>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3304      	adds	r3, #4
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f7fe fa9e 	bl	80035aa <vListInsert>
 800506e:	e012      	b.n	8005096 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d206      	bcs.n	8005086 <prvInsertTimerInActiveList+0x62>
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d302      	bcc.n	8005086 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005080:	2301      	movs	r3, #1
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e007      	b.n	8005096 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005086:	4b07      	ldr	r3, [pc, #28]	@ (80050a4 <prvInsertTimerInActiveList+0x80>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3304      	adds	r3, #4
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f7fe fa8a 	bl	80035aa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005096:	697b      	ldr	r3, [r7, #20]
    }
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20000314 	.word	0x20000314
 80050a4:	20000310 	.word	0x20000310

080050a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80050ae:	f107 0308 	add.w	r3, r7, #8
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	605a      	str	r2, [r3, #4]
 80050b8:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80050ba:	e0a9      	b.n	8005210 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f2c0 80a6 	blt.w	8005210 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d004      	beq.n	80050da <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	3304      	adds	r3, #4
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fe faa3 	bl	8003620 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050da:	1d3b      	adds	r3, r7, #4
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff ff81 	bl	8004fe4 <prvSampleTimeNow>
 80050e2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	f200 808e 	bhi.w	800520a <prvProcessReceivedCommands+0x162>
 80050ee:	a201      	add	r2, pc, #4	@ (adr r2, 80050f4 <prvProcessReceivedCommands+0x4c>)
 80050f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f4:	08005119 	.word	0x08005119
 80050f8:	08005119 	.word	0x08005119
 80050fc:	08005181 	.word	0x08005181
 8005100:	08005195 	.word	0x08005195
 8005104:	080051e1 	.word	0x080051e1
 8005108:	08005119 	.word	0x08005119
 800510c:	08005119 	.word	0x08005119
 8005110:	08005181 	.word	0x08005181
 8005114:	08005195 	.word	0x08005195
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800511e:	f043 0301 	orr.w	r3, r3, #1
 8005122:	b2da      	uxtb	r2, r3
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	18d1      	adds	r1, r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	69f8      	ldr	r0, [r7, #28]
 8005138:	f7ff ff74 	bl	8005024 <prvInsertTimerInActiveList>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d065      	beq.n	800520e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d009      	beq.n	8005164 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	4413      	add	r3, r2
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4619      	mov	r1, r3
 800515c:	69f8      	ldr	r0, [r7, #28]
 800515e:	f7ff fe69 	bl	8004e34 <prvReloadTimer>
 8005162:	e008      	b.n	8005176 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800516a:	f023 0301 	bic.w	r3, r3, #1
 800516e:	b2da      	uxtb	r2, r3
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	69f8      	ldr	r0, [r7, #28]
 800517c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800517e:	e046      	b.n	800520e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005186:	f023 0301 	bic.w	r3, r3, #1
 800518a:	b2da      	uxtb	r2, r3
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005192:	e03d      	b.n	8005210 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10b      	bne.n	80051cc <prvProcessReceivedCommands+0x124>
    __asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	617b      	str	r3, [r7, #20]
}
 80051c6:	bf00      	nop
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	699a      	ldr	r2, [r3, #24]
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	18d1      	adds	r1, r2, r3
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	69f8      	ldr	r0, [r7, #28]
 80051da:	f7ff ff23 	bl	8005024 <prvInsertTimerInActiveList>
                        break;
 80051de:	e017      	b.n	8005210 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d103      	bne.n	80051f6 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 80051ee:	69f8      	ldr	r0, [r7, #28]
 80051f0:	f000 fc1e 	bl	8005a30 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80051f4:	e00c      	b.n	8005210 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	b2da      	uxtb	r2, r3
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005208:	e002      	b.n	8005210 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 800520a:	bf00      	nop
 800520c:	e000      	b.n	8005210 <prvProcessReceivedCommands+0x168>
                        break;
 800520e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8005210:	4b08      	ldr	r3, [pc, #32]	@ (8005234 <prvProcessReceivedCommands+0x18c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f107 0108 	add.w	r1, r7, #8
 8005218:	2200      	movs	r2, #0
 800521a:	4618      	mov	r0, r3
 800521c:	f7fe fb42 	bl	80038a4 <xQueueReceive>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	f47f af4a 	bne.w	80050bc <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8005228:	bf00      	nop
 800522a:	bf00      	nop
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000318 	.word	0x20000318

08005238 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800523e:	e009      	b.n	8005254 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005240:	4b0e      	ldr	r3, [pc, #56]	@ (800527c <prvSwitchTimerLists+0x44>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800524a:	f04f 31ff 	mov.w	r1, #4294967295
 800524e:	6838      	ldr	r0, [r7, #0]
 8005250:	f7ff fe12 	bl	8004e78 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005254:	4b09      	ldr	r3, [pc, #36]	@ (800527c <prvSwitchTimerLists+0x44>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f0      	bne.n	8005240 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800525e:	4b07      	ldr	r3, [pc, #28]	@ (800527c <prvSwitchTimerLists+0x44>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005264:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <prvSwitchTimerLists+0x48>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a04      	ldr	r2, [pc, #16]	@ (800527c <prvSwitchTimerLists+0x44>)
 800526a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800526c:	4a04      	ldr	r2, [pc, #16]	@ (8005280 <prvSwitchTimerLists+0x48>)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6013      	str	r3, [r2, #0]
    }
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000310 	.word	0x20000310
 8005280:	20000314 	.word	0x20000314

08005284 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005288:	f000 f9b4 	bl	80055f4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800528c:	4b12      	ldr	r3, [pc, #72]	@ (80052d8 <prvCheckForValidListAndQueue+0x54>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d11d      	bne.n	80052d0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005294:	4811      	ldr	r0, [pc, #68]	@ (80052dc <prvCheckForValidListAndQueue+0x58>)
 8005296:	f7fe f957 	bl	8003548 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800529a:	4811      	ldr	r0, [pc, #68]	@ (80052e0 <prvCheckForValidListAndQueue+0x5c>)
 800529c:	f7fe f954 	bl	8003548 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80052a0:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <prvCheckForValidListAndQueue+0x60>)
 80052a2:	4a0e      	ldr	r2, [pc, #56]	@ (80052dc <prvCheckForValidListAndQueue+0x58>)
 80052a4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80052a6:	4b10      	ldr	r3, [pc, #64]	@ (80052e8 <prvCheckForValidListAndQueue+0x64>)
 80052a8:	4a0d      	ldr	r2, [pc, #52]	@ (80052e0 <prvCheckForValidListAndQueue+0x5c>)
 80052aa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80052ac:	2200      	movs	r2, #0
 80052ae:	210c      	movs	r1, #12
 80052b0:	200a      	movs	r0, #10
 80052b2:	f7fe fa7b 	bl	80037ac <xQueueGenericCreate>
 80052b6:	4603      	mov	r3, r0
 80052b8:	4a07      	ldr	r2, [pc, #28]	@ (80052d8 <prvCheckForValidListAndQueue+0x54>)
 80052ba:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80052bc:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <prvCheckForValidListAndQueue+0x54>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052c4:	4b04      	ldr	r3, [pc, #16]	@ (80052d8 <prvCheckForValidListAndQueue+0x54>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4908      	ldr	r1, [pc, #32]	@ (80052ec <prvCheckForValidListAndQueue+0x68>)
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fe fc66 	bl	8003b9c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80052d0:	f000 f9c2 	bl	8005658 <vPortExitCritical>
    }
 80052d4:	bf00      	nop
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000318 	.word	0x20000318
 80052dc:	200002e8 	.word	0x200002e8
 80052e0:	200002fc 	.word	0x200002fc
 80052e4:	20000310 	.word	0x20000310
 80052e8:	20000314 	.word	0x20000314
 80052ec:	08008014 	.word	0x08008014

080052f0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3b04      	subs	r3, #4
 8005300:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005308:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3b04      	subs	r3, #4
 800530e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f023 0201 	bic.w	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3b04      	subs	r3, #4
 800531e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005320:	4a0c      	ldr	r2, [pc, #48]	@ (8005354 <pxPortInitialiseStack+0x64>)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3b14      	subs	r3, #20
 800532a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3b04      	subs	r3, #4
 8005336:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f06f 0202 	mvn.w	r2, #2
 800533e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3b20      	subs	r3, #32
 8005344:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005346:	68fb      	ldr	r3, [r7, #12]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	08005359 	.word	0x08005359

08005358 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005362:	4b13      	ldr	r3, [pc, #76]	@ (80053b0 <prvTaskExitError+0x58>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536a:	d00b      	beq.n	8005384 <prvTaskExitError+0x2c>
    __asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60fb      	str	r3, [r7, #12]
}
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	e7fd      	b.n	8005380 <prvTaskExitError+0x28>
    __asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	60bb      	str	r3, [r7, #8]
}
 8005396:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005398:	bf00      	nop
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0fc      	beq.n	800539a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000010 	.word	0x20000010
	...

080053c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80053c0:	4b07      	ldr	r3, [pc, #28]	@ (80053e0 <pxCurrentTCBConst2>)
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	6808      	ldr	r0, [r1, #0]
 80053c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	f380 8809 	msr	PSP, r0
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8811 	msr	BASEPRI, r0
 80053da:	4770      	bx	lr
 80053dc:	f3af 8000 	nop.w

080053e0 <pxCurrentTCBConst2>:
 80053e0:	200001e4 	.word	0x200001e4
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80053e8:	4808      	ldr	r0, [pc, #32]	@ (800540c <prvPortStartFirstTask+0x24>)
 80053ea:	6800      	ldr	r0, [r0, #0]
 80053ec:	6800      	ldr	r0, [r0, #0]
 80053ee:	f380 8808 	msr	MSP, r0
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8814 	msr	CONTROL, r0
 80053fa:	b662      	cpsie	i
 80053fc:	b661      	cpsie	f
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	df00      	svc	0
 8005408:	bf00      	nop
 800540a:	0000      	.short	0x0000
 800540c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop

08005414 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08c      	sub	sp, #48	@ 0x30
 8005418:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800541a:	4b69      	ldr	r3, [pc, #420]	@ (80055c0 <xPortStartScheduler+0x1ac>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a69      	ldr	r2, [pc, #420]	@ (80055c4 <xPortStartScheduler+0x1b0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d10b      	bne.n	800543c <xPortStartScheduler+0x28>
    __asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800543c:	4b60      	ldr	r3, [pc, #384]	@ (80055c0 <xPortStartScheduler+0x1ac>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a61      	ldr	r2, [pc, #388]	@ (80055c8 <xPortStartScheduler+0x1b4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d10b      	bne.n	800545e <xPortStartScheduler+0x4a>
    __asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	623b      	str	r3, [r7, #32]
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	e7fd      	b.n	800545a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800545e:	4b5b      	ldr	r3, [pc, #364]	@ (80055cc <xPortStartScheduler+0x1b8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8005464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005466:	332c      	adds	r3, #44	@ 0x2c
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a59      	ldr	r2, [pc, #356]	@ (80055d0 <xPortStartScheduler+0x1bc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00b      	beq.n	8005488 <xPortStartScheduler+0x74>
    __asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	61fb      	str	r3, [r7, #28]
}
 8005482:	bf00      	nop
 8005484:	bf00      	nop
 8005486:	e7fd      	b.n	8005484 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8005488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548a:	3338      	adds	r3, #56	@ 0x38
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a51      	ldr	r2, [pc, #324]	@ (80055d4 <xPortStartScheduler+0x1c0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00b      	beq.n	80054ac <xPortStartScheduler+0x98>
    __asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	61bb      	str	r3, [r7, #24]
}
 80054a6:	bf00      	nop
 80054a8:	bf00      	nop
 80054aa:	e7fd      	b.n	80054a8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054b0:	4b49      	ldr	r3, [pc, #292]	@ (80055d8 <xPortStartScheduler+0x1c4>)
 80054b2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80054b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054be:	22ff      	movs	r2, #255	@ 0xff
 80054c0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	4b41      	ldr	r3, [pc, #260]	@ (80055dc <xPortStartScheduler+0x1c8>)
 80054d6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80054d8:	4b40      	ldr	r3, [pc, #256]	@ (80055dc <xPortStartScheduler+0x1c8>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10b      	bne.n	80054f8 <xPortStartScheduler+0xe4>
    __asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	617b      	str	r3, [r7, #20]
}
 80054f2:	bf00      	nop
 80054f4:	bf00      	nop
 80054f6:	e7fd      	b.n	80054f4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80054f8:	79fb      	ldrb	r3, [r7, #7]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	43db      	mvns	r3, r3
 80054fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005502:	2b00      	cmp	r3, #0
 8005504:	d013      	beq.n	800552e <xPortStartScheduler+0x11a>
    __asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	613b      	str	r3, [r7, #16]
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	e7fd      	b.n	800551a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	3301      	adds	r3, #1
 8005522:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	b2db      	uxtb	r3, r3
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	b2db      	uxtb	r3, r3
 800552c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005536:	2b80      	cmp	r3, #128	@ 0x80
 8005538:	d0f1      	beq.n	800551e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b08      	cmp	r3, #8
 800553e:	d103      	bne.n	8005548 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005540:	4b27      	ldr	r3, [pc, #156]	@ (80055e0 <xPortStartScheduler+0x1cc>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e004      	b.n	8005552 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f1c3 0307 	rsb	r3, r3, #7
 800554e:	4a24      	ldr	r2, [pc, #144]	@ (80055e0 <xPortStartScheduler+0x1cc>)
 8005550:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005552:	4b23      	ldr	r3, [pc, #140]	@ (80055e0 <xPortStartScheduler+0x1cc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	4a21      	ldr	r2, [pc, #132]	@ (80055e0 <xPortStartScheduler+0x1cc>)
 800555a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800555c:	4b20      	ldr	r3, [pc, #128]	@ (80055e0 <xPortStartScheduler+0x1cc>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005564:	4a1e      	ldr	r2, [pc, #120]	@ (80055e0 <xPortStartScheduler+0x1cc>)
 8005566:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	b2da      	uxtb	r2, r3
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005570:	4b1c      	ldr	r3, [pc, #112]	@ (80055e4 <xPortStartScheduler+0x1d0>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1b      	ldr	r2, [pc, #108]	@ (80055e4 <xPortStartScheduler+0x1d0>)
 8005576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800557a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800557c:	4b19      	ldr	r3, [pc, #100]	@ (80055e4 <xPortStartScheduler+0x1d0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a18      	ldr	r2, [pc, #96]	@ (80055e4 <xPortStartScheduler+0x1d0>)
 8005582:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005586:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8005588:	4b17      	ldr	r3, [pc, #92]	@ (80055e8 <xPortStartScheduler+0x1d4>)
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800558e:	f000 f8ed 	bl	800576c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005592:	4b16      	ldr	r3, [pc, #88]	@ (80055ec <xPortStartScheduler+0x1d8>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005598:	f000 f90c 	bl	80057b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800559c:	4b14      	ldr	r3, [pc, #80]	@ (80055f0 <xPortStartScheduler+0x1dc>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a13      	ldr	r2, [pc, #76]	@ (80055f0 <xPortStartScheduler+0x1dc>)
 80055a2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80055a6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80055a8:	f7ff ff1e 	bl	80053e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80055ac:	f7ff f858 	bl	8004660 <vTaskSwitchContext>
    prvTaskExitError();
 80055b0:	f7ff fed2 	bl	8005358 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3730      	adds	r7, #48	@ 0x30
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	e000ed00 	.word	0xe000ed00
 80055c4:	410fc271 	.word	0x410fc271
 80055c8:	410fc270 	.word	0x410fc270
 80055cc:	e000ed08 	.word	0xe000ed08
 80055d0:	080053c1 	.word	0x080053c1
 80055d4:	080056b1 	.word	0x080056b1
 80055d8:	e000e400 	.word	0xe000e400
 80055dc:	20000324 	.word	0x20000324
 80055e0:	20000328 	.word	0x20000328
 80055e4:	e000ed20 	.word	0xe000ed20
 80055e8:	e000ed1c 	.word	0xe000ed1c
 80055ec:	20000010 	.word	0x20000010
 80055f0:	e000ef34 	.word	0xe000ef34

080055f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
    __asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	607b      	str	r3, [r7, #4]
}
 800560c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800560e:	4b10      	ldr	r3, [pc, #64]	@ (8005650 <vPortEnterCritical+0x5c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3301      	adds	r3, #1
 8005614:	4a0e      	ldr	r2, [pc, #56]	@ (8005650 <vPortEnterCritical+0x5c>)
 8005616:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005618:	4b0d      	ldr	r3, [pc, #52]	@ (8005650 <vPortEnterCritical+0x5c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d110      	bne.n	8005642 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005620:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <vPortEnterCritical+0x60>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00b      	beq.n	8005642 <vPortEnterCritical+0x4e>
    __asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	603b      	str	r3, [r7, #0]
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	e7fd      	b.n	800563e <vPortEnterCritical+0x4a>
    }
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000010 	.word	0x20000010
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800565e:	4b12      	ldr	r3, [pc, #72]	@ (80056a8 <vPortExitCritical+0x50>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10b      	bne.n	800567e <vPortExitCritical+0x26>
    __asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	607b      	str	r3, [r7, #4]
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	e7fd      	b.n	800567a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800567e:	4b0a      	ldr	r3, [pc, #40]	@ (80056a8 <vPortExitCritical+0x50>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3b01      	subs	r3, #1
 8005684:	4a08      	ldr	r2, [pc, #32]	@ (80056a8 <vPortExitCritical+0x50>)
 8005686:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005688:	4b07      	ldr	r3, [pc, #28]	@ (80056a8 <vPortExitCritical+0x50>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d105      	bne.n	800569c <vPortExitCritical+0x44>
 8005690:	2300      	movs	r3, #0
 8005692:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800569a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	20000010 	.word	0x20000010
 80056ac:	00000000 	.word	0x00000000

080056b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80056b0:	f3ef 8009 	mrs	r0, PSP
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	4b15      	ldr	r3, [pc, #84]	@ (8005710 <pxCurrentTCBConst>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	f01e 0f10 	tst.w	lr, #16
 80056c0:	bf08      	it	eq
 80056c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ca:	6010      	str	r0, [r2, #0]
 80056cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80056d4:	f380 8811 	msr	BASEPRI, r0
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f7fe ffbe 	bl	8004660 <vTaskSwitchContext>
 80056e4:	f04f 0000 	mov.w	r0, #0
 80056e8:	f380 8811 	msr	BASEPRI, r0
 80056ec:	bc09      	pop	{r0, r3}
 80056ee:	6819      	ldr	r1, [r3, #0]
 80056f0:	6808      	ldr	r0, [r1, #0]
 80056f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f6:	f01e 0f10 	tst.w	lr, #16
 80056fa:	bf08      	it	eq
 80056fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005700:	f380 8809 	msr	PSP, r0
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	f3af 8000 	nop.w

08005710 <pxCurrentTCBConst>:
 8005710:	200001e4 	.word	0x200001e4
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop

08005718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
    __asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	607b      	str	r3, [r7, #4]
}
 8005730:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8005732:	f001 fbb5 	bl	8006ea0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005736:	f7fe fe71 	bl	800441c <xTaskIncrementTick>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d006      	beq.n	800574e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8005740:	f001 fc0c 	bl	8006f5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005744:	4b08      	ldr	r3, [pc, #32]	@ (8005768 <SysTick_Handler+0x50>)
 8005746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	e001      	b.n	8005752 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800574e:	f001 fbe9 	bl	8006f24 <SEGGER_SYSVIEW_RecordExitISR>
 8005752:	2300      	movs	r3, #0
 8005754:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f383 8811 	msr	BASEPRI, r3
}
 800575c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005770:	4b0b      	ldr	r3, [pc, #44]	@ (80057a0 <vPortSetupTimerInterrupt+0x34>)
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005776:	4b0b      	ldr	r3, [pc, #44]	@ (80057a4 <vPortSetupTimerInterrupt+0x38>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800577c:	4b0a      	ldr	r3, [pc, #40]	@ (80057a8 <vPortSetupTimerInterrupt+0x3c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a0a      	ldr	r2, [pc, #40]	@ (80057ac <vPortSetupTimerInterrupt+0x40>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	099b      	lsrs	r3, r3, #6
 8005788:	4a09      	ldr	r2, [pc, #36]	@ (80057b0 <vPortSetupTimerInterrupt+0x44>)
 800578a:	3b01      	subs	r3, #1
 800578c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800578e:	4b04      	ldr	r3, [pc, #16]	@ (80057a0 <vPortSetupTimerInterrupt+0x34>)
 8005790:	2207      	movs	r2, #7
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	e000e010 	.word	0xe000e010
 80057a4:	e000e018 	.word	0xe000e018
 80057a8:	20000000 	.word	0x20000000
 80057ac:	10624dd3 	.word	0x10624dd3
 80057b0:	e000e014 	.word	0xe000e014

080057b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80057b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80057c4 <vPortEnableVFP+0x10>
 80057b8:	6801      	ldr	r1, [r0, #0]
 80057ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80057be:	6001      	str	r1, [r0, #0]
 80057c0:	4770      	bx	lr
 80057c2:	0000      	.short	0x0000
 80057c4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop

080057cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08e      	sub	sp, #56	@ 0x38
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d022      	beq.n	8005824 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80057de:	2308      	movs	r3, #8
 80057e0:	43db      	mvns	r3, r3
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d81b      	bhi.n	8005820 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80057e8:	2208      	movs	r2, #8
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d014      	beq.n	8005824 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	f1c3 0308 	rsb	r3, r3, #8
 8005804:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005808:	43db      	mvns	r3, r3
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	d804      	bhi.n	800581a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005814:	4413      	add	r3, r2
 8005816:	607b      	str	r3, [r7, #4]
 8005818:	e004      	b.n	8005824 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
 800581e:	e001      	b.n	8005824 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8005824:	f7fe fcc8 	bl	80041b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005828:	4b7a      	ldr	r3, [pc, #488]	@ (8005a14 <pvPortMalloc+0x248>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8005830:	f000 f978 	bl	8005b24 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f2c0 80d3 	blt.w	80059e2 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80cf 	beq.w	80059e2 <pvPortMalloc+0x216>
 8005844:	4b74      	ldr	r3, [pc, #464]	@ (8005a18 <pvPortMalloc+0x24c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	429a      	cmp	r2, r3
 800584c:	f200 80c9 	bhi.w	80059e2 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005850:	4b72      	ldr	r3, [pc, #456]	@ (8005a1c <pvPortMalloc+0x250>)
 8005852:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005854:	4b71      	ldr	r3, [pc, #452]	@ (8005a1c <pvPortMalloc+0x250>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800585a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800585c:	4a70      	ldr	r2, [pc, #448]	@ (8005a20 <pvPortMalloc+0x254>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d305      	bcc.n	800586e <pvPortMalloc+0xa2>
 8005862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005864:	4a6f      	ldr	r2, [pc, #444]	@ (8005a24 <pvPortMalloc+0x258>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d801      	bhi.n	800586e <pvPortMalloc+0xa2>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <pvPortMalloc+0xa4>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d129      	bne.n	80058c8 <pvPortMalloc+0xfc>
    __asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	623b      	str	r3, [r7, #32]
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 800588c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588e:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8005896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005898:	4a61      	ldr	r2, [pc, #388]	@ (8005a20 <pvPortMalloc+0x254>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d305      	bcc.n	80058aa <pvPortMalloc+0xde>
 800589e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a0:	4a60      	ldr	r2, [pc, #384]	@ (8005a24 <pvPortMalloc+0x258>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d801      	bhi.n	80058aa <pvPortMalloc+0xde>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <pvPortMalloc+0xe0>
 80058aa:	2300      	movs	r3, #0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10b      	bne.n	80058c8 <pvPortMalloc+0xfc>
    __asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	61fb      	str	r3, [r7, #28]
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	e7fd      	b.n	80058c4 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80058c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d903      	bls.n	80058da <pvPortMalloc+0x10e>
 80058d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1d8      	bne.n	800588c <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80058da:	4b4e      	ldr	r3, [pc, #312]	@ (8005a14 <pvPortMalloc+0x248>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d07e      	beq.n	80059e2 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2208      	movs	r2, #8
 80058ea:	4413      	add	r3, r2
 80058ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80058ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f0:	4a4b      	ldr	r2, [pc, #300]	@ (8005a20 <pvPortMalloc+0x254>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d305      	bcc.n	8005902 <pvPortMalloc+0x136>
 80058f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f8:	4a4a      	ldr	r2, [pc, #296]	@ (8005a24 <pvPortMalloc+0x258>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d801      	bhi.n	8005902 <pvPortMalloc+0x136>
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <pvPortMalloc+0x138>
 8005902:	2300      	movs	r3, #0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10b      	bne.n	8005920 <pvPortMalloc+0x154>
    __asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	61bb      	str	r3, [r7, #24]
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	e7fd      	b.n	800591c <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8005928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	429a      	cmp	r2, r3
 8005930:	d90b      	bls.n	800594a <pvPortMalloc+0x17e>
    __asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	617b      	str	r3, [r7, #20]
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	e7fd      	b.n	8005946 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800594a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	1ad2      	subs	r2, r2, r3
 8005952:	2308      	movs	r3, #8
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	429a      	cmp	r2, r3
 8005958:	d924      	bls.n	80059a4 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800595a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4413      	add	r3, r2
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <pvPortMalloc+0x1b8>
    __asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	613b      	str	r3, [r7, #16]
}
 800597e:	bf00      	nop
 8005980:	bf00      	nop
 8005982:	e7fd      	b.n	8005980 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	1ad2      	subs	r2, r2, r3
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 800599e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a2:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a18 <pvPortMalloc+0x24c>)
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005a18 <pvPortMalloc+0x24c>)
 80059b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059b2:	4b19      	ldr	r3, [pc, #100]	@ (8005a18 <pvPortMalloc+0x24c>)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005a28 <pvPortMalloc+0x25c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d203      	bcs.n	80059c6 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059be:	4b16      	ldr	r3, [pc, #88]	@ (8005a18 <pvPortMalloc+0x24c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a19      	ldr	r2, [pc, #100]	@ (8005a28 <pvPortMalloc+0x25c>)
 80059c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80059c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80059ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80059d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80059d8:	4b14      	ldr	r3, [pc, #80]	@ (8005a2c <pvPortMalloc+0x260>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3301      	adds	r3, #1
 80059de:	4a13      	ldr	r2, [pc, #76]	@ (8005a2c <pvPortMalloc+0x260>)
 80059e0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80059e2:	f7fe fbf7 	bl	80041d4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00b      	beq.n	8005a08 <pvPortMalloc+0x23c>
    __asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	60fb      	str	r3, [r7, #12]
}
 8005a02:	bf00      	nop
 8005a04:	bf00      	nop
 8005a06:	e7fd      	b.n	8005a04 <pvPortMalloc+0x238>
    return pvReturn;
 8005a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3738      	adds	r7, #56	@ 0x38
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20012f34 	.word	0x20012f34
 8005a18:	20012f38 	.word	0x20012f38
 8005a1c:	20012f2c 	.word	0x20012f2c
 8005a20:	2000032c 	.word	0x2000032c
 8005a24:	20012f2b 	.word	0x20012f2b
 8005a28:	20012f3c 	.word	0x20012f3c
 8005a2c:	20012f40 	.word	0x20012f40

08005a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d064      	beq.n	8005b0c <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005a42:	2308      	movs	r3, #8
 8005a44:	425b      	negs	r3, r3
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	4a30      	ldr	r2, [pc, #192]	@ (8005b14 <vPortFree+0xe4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d305      	bcc.n	8005a64 <vPortFree+0x34>
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8005b18 <vPortFree+0xe8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d801      	bhi.n	8005a64 <vPortFree+0x34>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <vPortFree+0x36>
 8005a64:	2300      	movs	r3, #0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10b      	bne.n	8005a82 <vPortFree+0x52>
    __asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	617b      	str	r3, [r7, #20]
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	e7fd      	b.n	8005a7e <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	db0b      	blt.n	8005aa2 <vPortFree+0x72>
    __asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	613b      	str	r3, [r7, #16]
}
 8005a9c:	bf00      	nop
 8005a9e:	bf00      	nop
 8005aa0:	e7fd      	b.n	8005a9e <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00b      	beq.n	8005ac2 <vPortFree+0x92>
    __asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	60fb      	str	r3, [r7, #12]
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	e7fd      	b.n	8005abe <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	0fdb      	lsrs	r3, r3, #31
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d01c      	beq.n	8005b0c <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d118      	bne.n	8005b0c <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8005ae6:	f7fe fb67 	bl	80041b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	4b0b      	ldr	r3, [pc, #44]	@ (8005b1c <vPortFree+0xec>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4413      	add	r3, r2
 8005af4:	4a09      	ldr	r2, [pc, #36]	@ (8005b1c <vPortFree+0xec>)
 8005af6:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005af8:	69b8      	ldr	r0, [r7, #24]
 8005afa:	f000 f86d 	bl	8005bd8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005afe:	4b08      	ldr	r3, [pc, #32]	@ (8005b20 <vPortFree+0xf0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3301      	adds	r3, #1
 8005b04:	4a06      	ldr	r2, [pc, #24]	@ (8005b20 <vPortFree+0xf0>)
 8005b06:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005b08:	f7fe fb64 	bl	80041d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005b0c:	bf00      	nop
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	2000032c 	.word	0x2000032c
 8005b18:	20012f2b 	.word	0x20012f2b
 8005b1c:	20012f38 	.word	0x20012f38
 8005b20:	20012f44 	.word	0x20012f44

08005b24 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b2a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005b2e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005b30:	4b24      	ldr	r3, [pc, #144]	@ (8005bc4 <prvHeapInit+0xa0>)
 8005b32:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3307      	adds	r3, #7
 8005b42:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0307 	bic.w	r3, r3, #7
 8005b4a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc4 <prvHeapInit+0xa0>)
 8005b54:	4413      	add	r3, r2
 8005b56:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc8 <prvHeapInit+0xa4>)
 8005b5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc8 <prvHeapInit+0xa4>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	4413      	add	r3, r2
 8005b6a:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005b6c:	2208      	movs	r2, #8
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f023 0307 	bic.w	r3, r3, #7
 8005b7a:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a13      	ldr	r2, [pc, #76]	@ (8005bcc <prvHeapInit+0xa8>)
 8005b80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005b82:	4b12      	ldr	r3, [pc, #72]	@ (8005bcc <prvHeapInit+0xa8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2200      	movs	r2, #0
 8005b88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8005b8a:	4b10      	ldr	r3, [pc, #64]	@ (8005bcc <prvHeapInit+0xa8>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	1ad2      	subs	r2, r2, r3
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <prvHeapInit+0xa8>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	4a08      	ldr	r2, [pc, #32]	@ (8005bd0 <prvHeapInit+0xac>)
 8005bae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	4a07      	ldr	r2, [pc, #28]	@ (8005bd4 <prvHeapInit+0xb0>)
 8005bb6:	6013      	str	r3, [r2, #0]
}
 8005bb8:	bf00      	nop
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	2000032c 	.word	0x2000032c
 8005bc8:	20012f2c 	.word	0x20012f2c
 8005bcc:	20012f34 	.word	0x20012f34
 8005bd0:	20012f3c 	.word	0x20012f3c
 8005bd4:	20012f38 	.word	0x20012f38

08005bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005be0:	4b36      	ldr	r3, [pc, #216]	@ (8005cbc <prvInsertBlockIntoFreeList+0xe4>)
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	e002      	b.n	8005bec <prvInsertBlockIntoFreeList+0x14>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d8f7      	bhi.n	8005be6 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	4a30      	ldr	r2, [pc, #192]	@ (8005cbc <prvInsertBlockIntoFreeList+0xe4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d018      	beq.n	8005c30 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4a2f      	ldr	r2, [pc, #188]	@ (8005cc0 <prvInsertBlockIntoFreeList+0xe8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d305      	bcc.n	8005c12 <prvInsertBlockIntoFreeList+0x3a>
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4a2e      	ldr	r2, [pc, #184]	@ (8005cc4 <prvInsertBlockIntoFreeList+0xec>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d801      	bhi.n	8005c12 <prvInsertBlockIntoFreeList+0x3a>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <prvInsertBlockIntoFreeList+0x3c>
 8005c12:	2300      	movs	r3, #0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10b      	bne.n	8005c30 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	60fb      	str	r3, [r7, #12]
}
 8005c2a:	bf00      	nop
 8005c2c:	bf00      	nop
 8005c2e:	e7fd      	b.n	8005c2c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d108      	bne.n	8005c54 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	441a      	add	r2, r3
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	441a      	add	r2, r3
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d118      	bne.n	8005c9a <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	4b16      	ldr	r3, [pc, #88]	@ (8005cc8 <prvInsertBlockIntoFreeList+0xf0>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d00d      	beq.n	8005c90 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	441a      	add	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	e008      	b.n	8005ca2 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005c90:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc8 <prvInsertBlockIntoFreeList+0xf0>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	e003      	b.n	8005ca2 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d002      	beq.n	8005cb0 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005cb0:	bf00      	nop
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	20012f2c 	.word	0x20012f2c
 8005cc0:	2000032c 	.word	0x2000032c
 8005cc4:	20012f2b 	.word	0x20012f2b
 8005cc8:	20012f34 	.word	0x20012f34

08005ccc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005cda:	2205      	movs	r2, #5
 8005cdc:	492b      	ldr	r1, [pc, #172]	@ (8005d8c <SYSVIEW_AddTask+0xc0>)
 8005cde:	68b8      	ldr	r0, [r7, #8]
 8005ce0:	f001 fe8a 	bl	80079f8 <memcmp>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d04b      	beq.n	8005d82 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005cea:	4b29      	ldr	r3, [pc, #164]	@ (8005d90 <SYSVIEW_AddTask+0xc4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b07      	cmp	r3, #7
 8005cf0:	d903      	bls.n	8005cfa <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005cf2:	4828      	ldr	r0, [pc, #160]	@ (8005d94 <SYSVIEW_AddTask+0xc8>)
 8005cf4:	f001 fc1a 	bl	800752c <SEGGER_SYSVIEW_Warn>
    return;
 8005cf8:	e044      	b.n	8005d84 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005cfa:	4b25      	ldr	r3, [pc, #148]	@ (8005d90 <SYSVIEW_AddTask+0xc4>)
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4926      	ldr	r1, [pc, #152]	@ (8005d98 <SYSVIEW_AddTask+0xcc>)
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	440b      	add	r3, r1
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005d0e:	4b20      	ldr	r3, [pc, #128]	@ (8005d90 <SYSVIEW_AddTask+0xc4>)
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4921      	ldr	r1, [pc, #132]	@ (8005d98 <SYSVIEW_AddTask+0xcc>)
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	3304      	adds	r3, #4
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005d24:	4b1a      	ldr	r3, [pc, #104]	@ (8005d90 <SYSVIEW_AddTask+0xc4>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	491b      	ldr	r1, [pc, #108]	@ (8005d98 <SYSVIEW_AddTask+0xcc>)
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	3308      	adds	r3, #8
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005d3a:	4b15      	ldr	r3, [pc, #84]	@ (8005d90 <SYSVIEW_AddTask+0xc4>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4916      	ldr	r1, [pc, #88]	@ (8005d98 <SYSVIEW_AddTask+0xcc>)
 8005d40:	4613      	mov	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005d50:	4b0f      	ldr	r3, [pc, #60]	@ (8005d90 <SYSVIEW_AddTask+0xc4>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	4910      	ldr	r1, [pc, #64]	@ (8005d98 <SYSVIEW_AddTask+0xcc>)
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	3310      	adds	r3, #16
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005d66:	4b0a      	ldr	r3, [pc, #40]	@ (8005d90 <SYSVIEW_AddTask+0xc4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	4a08      	ldr	r2, [pc, #32]	@ (8005d90 <SYSVIEW_AddTask+0xc4>)
 8005d6e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f80e 	bl	8005d9c <SYSVIEW_SendTaskInfo>
 8005d80:	e000      	b.n	8005d84 <SYSVIEW_AddTask+0xb8>
    return;
 8005d82:	bf00      	nop

}
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	0800801c 	.word	0x0800801c
 8005d90:	20012fe8 	.word	0x20012fe8
 8005d94:	08008024 	.word	0x08008024
 8005d98:	20012f48 	.word	0x20012f48

08005d9c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	@ 0x28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005daa:	f107 0310 	add.w	r3, r7, #16
 8005dae:	2218      	movs	r2, #24
 8005db0:	2100      	movs	r1, #0
 8005db2:	4618      	mov	r0, r3
 8005db4:	f001 fe30 	bl	8007a18 <memset>
  TaskInfo.TaskID     = TaskID;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dca:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005dcc:	f107 0310 	add.w	r3, r7, #16
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 ff3b 	bl	8006c4c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005dd6:	bf00      	nop
 8005dd8:	3728      	adds	r7, #40	@ 0x28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005de6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e60 <USART2_IRQHandler+0x80>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d011      	beq.n	8005e1a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005df6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e64 <USART2_IRQHandler+0x84>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f003 030b 	and.w	r3, r3, #11
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d108      	bne.n	8005e1a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005e08:	4b17      	ldr	r3, [pc, #92]	@ (8005e68 <USART2_IRQHandler+0x88>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005e10:	4b15      	ldr	r3, [pc, #84]	@ (8005e68 <USART2_IRQHandler+0x88>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	79fa      	ldrb	r2, [r7, #7]
 8005e16:	4610      	mov	r0, r2
 8005e18:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01a      	beq.n	8005e5a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005e24:	4b11      	ldr	r3, [pc, #68]	@ (8005e6c <USART2_IRQHandler+0x8c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e6c <USART2_IRQHandler+0x8c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	1dfa      	adds	r2, r7, #7
 8005e32:	4610      	mov	r0, r2
 8005e34:	4798      	blx	r3
 8005e36:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e70 <USART2_IRQHandler+0x90>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a0b      	ldr	r2, [pc, #44]	@ (8005e70 <USART2_IRQHandler+0x90>)
 8005e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e006      	b.n	8005e5a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005e4c:	4b04      	ldr	r3, [pc, #16]	@ (8005e60 <USART2_IRQHandler+0x80>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005e50:	79fa      	ldrb	r2, [r7, #7]
 8005e52:	4b04      	ldr	r3, [pc, #16]	@ (8005e64 <USART2_IRQHandler+0x84>)
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	e000      	b.n	8005e5a <USART2_IRQHandler+0x7a>
      return;
 8005e58:	bf00      	nop
    }
  }
}
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40004400 	.word	0x40004400
 8005e64:	40004404 	.word	0x40004404
 8005e68:	20012fec 	.word	0x20012fec
 8005e6c:	20012ff0 	.word	0x20012ff0
 8005e70:	4000440c 	.word	0x4000440c

08005e74 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005e78:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a04      	ldr	r2, [pc, #16]	@ (8005e90 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e82:	6013      	str	r3, [r2, #0]
}
 8005e84:	bf00      	nop
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	4000440c 	.word	0x4000440c

08005e94 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005e9a:	4b26      	ldr	r3, [pc, #152]	@ (8005f34 <_DoInit+0xa0>)
 8005e9c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005e9e:	22a8      	movs	r2, #168	@ 0xa8
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	6838      	ldr	r0, [r7, #0]
 8005ea4:	f001 fdb8 	bl	8007a18 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2203      	movs	r2, #3
 8005eac:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	4a20      	ldr	r2, [pc, #128]	@ (8005f38 <_DoInit+0xa4>)
 8005eb8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8005f3c <_DoInit+0xa8>)
 8005ebe:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ec6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	4a16      	ldr	r2, [pc, #88]	@ (8005f38 <_DoInit+0xa4>)
 8005ede:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	4a17      	ldr	r2, [pc, #92]	@ (8005f40 <_DoInit+0xac>)
 8005ee4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2210      	movs	r2, #16
 8005eea:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2200      	movs	r2, #0
 8005efc:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005efe:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005f02:	2300      	movs	r3, #0
 8005f04:	607b      	str	r3, [r7, #4]
 8005f06:	e00c      	b.n	8005f22 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1c3 030f 	rsb	r3, r3, #15
 8005f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8005f44 <_DoInit+0xb0>)
 8005f10:	5cd1      	ldrb	r1, [r2, r3]
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4413      	add	r3, r2
 8005f18:	460a      	mov	r2, r1
 8005f1a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b0f      	cmp	r3, #15
 8005f26:	d9ef      	bls.n	8005f08 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005f28:	f3bf 8f5f 	dmb	sy
}
 8005f2c:	bf00      	nop
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20012ff4 	.word	0x20012ff4
 8005f38:	08008074 	.word	0x08008074
 8005f3c:	2001309c 	.word	0x2001309c
 8005f40:	2001349c 	.word	0x2001349c
 8005f44:	08008098 	.word	0x08008098

08005f48 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	@ 0x28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005f54:	2300      	movs	r3, #0
 8005f56:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d905      	bls.n	8005f78 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f76:	e007      	b.n	8005f88 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	69b9      	ldr	r1, [r7, #24]
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	1acb      	subs	r3, r1, r3
 8005f82:	4413      	add	r3, r2
 8005f84:	3b01      	subs	r3, #1
 8005f86:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f92:	4293      	cmp	r3, r2
 8005f94:	bf28      	it	cs
 8005f96:	4613      	movcs	r3, r2
 8005f98:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	bf28      	it	cs
 8005fa2:	4613      	movcs	r3, r2
 8005fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	4413      	add	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	6978      	ldr	r0, [r7, #20]
 8005fb6:	f001 fd98 	bl	8007aea <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005fba:	6a3a      	ldr	r2, [r7, #32]
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	4413      	add	r3, r2
 8005fc0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	4413      	add	r3, r2
 8005fc8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	4413      	add	r3, r2
 8005fd8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d101      	bne.n	8005fe8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005fe8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1b2      	bne.n	8005f5e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3728      	adds	r7, #40	@ 0x28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8006002:	b580      	push	{r7, lr}
 8006004:	b088      	sub	sp, #32
 8006006:	af00      	add	r7, sp, #0
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d911      	bls.n	800604a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	4413      	add	r3, r2
 800602e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	68b9      	ldr	r1, [r7, #8]
 8006034:	6938      	ldr	r0, [r7, #16]
 8006036:	f001 fd58 	bl	8007aea <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800603a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	441a      	add	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8006048:	e01f      	b.n	800608a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	6938      	ldr	r0, [r7, #16]
 800605e:	f001 fd44 	bl	8007aea <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	4413      	add	r3, r2
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4619      	mov	r1, r3
 800607a:	6938      	ldr	r0, [r7, #16]
 800607c:	f001 fd35 	bl	8007aea <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006080:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	60da      	str	r2, [r3, #12]
}
 800608a:	bf00      	nop
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8006092:	b480      	push	{r7}
 8006094:	b087      	sub	sp, #28
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d808      	bhi.n	80060c0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	1ad2      	subs	r2, r2, r3
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4413      	add	r3, r2
 80060ba:	3b01      	subs	r3, #1
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	e004      	b.n	80060ca <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80060ca:	697b      	ldr	r3, [r7, #20]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08c      	sub	sp, #48	@ 0x30
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80060e4:	4b3e      	ldr	r3, [pc, #248]	@ (80061e0 <SEGGER_RTT_ReadNoLock+0x108>)
 80060e6:	623b      	str	r3, [r7, #32]
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b53      	cmp	r3, #83	@ 0x53
 80060f0:	d001      	beq.n	80060f6 <SEGGER_RTT_ReadNoLock+0x1e>
 80060f2:	f7ff fecf 	bl	8005e94 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4613      	mov	r3, r2
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	4413      	add	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	3360      	adds	r3, #96	@ 0x60
 8006102:	4a37      	ldr	r2, [pc, #220]	@ (80061e0 <SEGGER_RTT_ReadNoLock+0x108>)
 8006104:	4413      	add	r3, r2
 8006106:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006118:	2300      	movs	r3, #0
 800611a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800611c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	429a      	cmp	r2, r3
 8006122:	d92b      	bls.n	800617c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4293      	cmp	r3, r2
 8006134:	bf28      	it	cs
 8006136:	4613      	movcs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006140:	4413      	add	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	6939      	ldr	r1, [r7, #16]
 8006148:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800614a:	f001 fcce 	bl	8007aea <memcpy>
    NumBytesRead += NumBytesRem;
 800614e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	4413      	add	r3, r2
 8006154:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8006156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	4413      	add	r3, r2
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	4413      	add	r3, r2
 800616c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006174:	429a      	cmp	r2, r3
 8006176:	d101      	bne.n	800617c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006178:	2300      	movs	r3, #0
 800617a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4293      	cmp	r3, r2
 800618a:	bf28      	it	cs
 800618c:	4613      	movcs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d019      	beq.n	80061ca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619c:	4413      	add	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	6939      	ldr	r1, [r7, #16]
 80061a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061a6:	f001 fca0 	bl	8007aea <memcpy>
    NumBytesRead += NumBytesRem;
 80061aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	4413      	add	r3, r2
 80061b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80061b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4413      	add	r3, r2
 80061b8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80061c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	4413      	add	r3, r2
 80061c8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80061ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061d4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80061d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3730      	adds	r7, #48	@ 0x30
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20012ff4 	.word	0x20012ff4

080061e4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	4613      	mov	r3, r2
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	4413      	add	r3, r2
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	4a1f      	ldr	r2, [pc, #124]	@ (8006280 <SEGGER_RTT_WriteNoLock+0x9c>)
 8006202:	4413      	add	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d029      	beq.n	8006262 <SEGGER_RTT_WriteNoLock+0x7e>
 800620e:	2b02      	cmp	r3, #2
 8006210:	d82e      	bhi.n	8006270 <SEGGER_RTT_WriteNoLock+0x8c>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <SEGGER_RTT_WriteNoLock+0x38>
 8006216:	2b01      	cmp	r3, #1
 8006218:	d013      	beq.n	8006242 <SEGGER_RTT_WriteNoLock+0x5e>
 800621a:	e029      	b.n	8006270 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800621c:	6978      	ldr	r0, [r7, #20]
 800621e:	f7ff ff38 	bl	8006092 <_GetAvailWriteSpace>
 8006222:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	429a      	cmp	r2, r3
 800622a:	d202      	bcs.n	8006232 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800622c:	2300      	movs	r3, #0
 800622e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006230:	e021      	b.n	8006276 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	69b9      	ldr	r1, [r7, #24]
 800623a:	6978      	ldr	r0, [r7, #20]
 800623c:	f7ff fee1 	bl	8006002 <_WriteNoCheck>
    break;
 8006240:	e019      	b.n	8006276 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006242:	6978      	ldr	r0, [r7, #20]
 8006244:	f7ff ff25 	bl	8006092 <_GetAvailWriteSpace>
 8006248:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	4293      	cmp	r3, r2
 8006250:	bf28      	it	cs
 8006252:	4613      	movcs	r3, r2
 8006254:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	69b9      	ldr	r1, [r7, #24]
 800625a:	6978      	ldr	r0, [r7, #20]
 800625c:	f7ff fed1 	bl	8006002 <_WriteNoCheck>
    break;
 8006260:	e009      	b.n	8006276 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	69b9      	ldr	r1, [r7, #24]
 8006266:	6978      	ldr	r0, [r7, #20]
 8006268:	f7ff fe6e 	bl	8005f48 <_WriteBlocking>
 800626c:	61f8      	str	r0, [r7, #28]
    break;
 800626e:	e002      	b.n	8006276 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006270:	2300      	movs	r3, #0
 8006272:	61fb      	str	r3, [r7, #28]
    break;
 8006274:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8006276:	69fb      	ldr	r3, [r7, #28]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3720      	adds	r7, #32
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20012ff4 	.word	0x20012ff4

08006284 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006290:	4b0e      	ldr	r3, [pc, #56]	@ (80062cc <SEGGER_RTT_Write+0x48>)
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b53      	cmp	r3, #83	@ 0x53
 800629c:	d001      	beq.n	80062a2 <SEGGER_RTT_Write+0x1e>
 800629e:	f7ff fdf9 	bl	8005e94 <_DoInit>
  SEGGER_RTT_LOCK();
 80062a2:	f3ef 8311 	mrs	r3, BASEPRI
 80062a6:	f04f 0120 	mov.w	r1, #32
 80062aa:	f381 8811 	msr	BASEPRI, r1
 80062ae:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f7ff ff95 	bl	80061e4 <SEGGER_RTT_WriteNoLock>
 80062ba:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80062c2:	697b      	ldr	r3, [r7, #20]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3720      	adds	r7, #32
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20012ff4 	.word	0x20012ff4

080062d0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	60fa      	str	r2, [r7, #12]
 80062e6:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b80      	cmp	r3, #128	@ 0x80
 80062ec:	d90a      	bls.n	8006304 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80062ee:	2380      	movs	r3, #128	@ 0x80
 80062f0:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80062f2:	e007      	b.n	8006304 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	1c53      	adds	r3, r2, #1
 80062f8:	60bb      	str	r3, [r7, #8]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1c59      	adds	r1, r3, #1
 80062fe:	60f9      	str	r1, [r7, #12]
 8006300:	7812      	ldrb	r2, [r2, #0]
 8006302:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	1e5a      	subs	r2, r3, #1
 8006308:	607a      	str	r2, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <_EncodeStr+0x46>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1ee      	bne.n	80062f4 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	b2da      	uxtb	r2, r3
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8006322:	68fb      	ldr	r3, [r7, #12]
}
 8006324:	4618      	mov	r0, r3
 8006326:	371c      	adds	r7, #28
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3307      	adds	r3, #7
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800634e:	4b34      	ldr	r3, [pc, #208]	@ (8006420 <_HandleIncomingPacket+0xd8>)
 8006350:	7e1b      	ldrb	r3, [r3, #24]
 8006352:	4618      	mov	r0, r3
 8006354:	1cfb      	adds	r3, r7, #3
 8006356:	2201      	movs	r2, #1
 8006358:	4619      	mov	r1, r3
 800635a:	f7ff febd 	bl	80060d8 <SEGGER_RTT_ReadNoLock>
 800635e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d057      	beq.n	8006416 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8006366:	78fb      	ldrb	r3, [r7, #3]
 8006368:	2b80      	cmp	r3, #128	@ 0x80
 800636a:	d031      	beq.n	80063d0 <_HandleIncomingPacket+0x88>
 800636c:	2b80      	cmp	r3, #128	@ 0x80
 800636e:	dc40      	bgt.n	80063f2 <_HandleIncomingPacket+0xaa>
 8006370:	2b07      	cmp	r3, #7
 8006372:	dc15      	bgt.n	80063a0 <_HandleIncomingPacket+0x58>
 8006374:	2b00      	cmp	r3, #0
 8006376:	dd3c      	ble.n	80063f2 <_HandleIncomingPacket+0xaa>
 8006378:	3b01      	subs	r3, #1
 800637a:	2b06      	cmp	r3, #6
 800637c:	d839      	bhi.n	80063f2 <_HandleIncomingPacket+0xaa>
 800637e:	a201      	add	r2, pc, #4	@ (adr r2, 8006384 <_HandleIncomingPacket+0x3c>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	080063a7 	.word	0x080063a7
 8006388:	080063ad 	.word	0x080063ad
 800638c:	080063b3 	.word	0x080063b3
 8006390:	080063b9 	.word	0x080063b9
 8006394:	080063bf 	.word	0x080063bf
 8006398:	080063c5 	.word	0x080063c5
 800639c:	080063cb 	.word	0x080063cb
 80063a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80063a2:	d033      	beq.n	800640c <_HandleIncomingPacket+0xc4>
 80063a4:	e025      	b.n	80063f2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80063a6:	f000 fad5 	bl	8006954 <SEGGER_SYSVIEW_Start>
      break;
 80063aa:	e034      	b.n	8006416 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80063ac:	f000 fb8e 	bl	8006acc <SEGGER_SYSVIEW_Stop>
      break;
 80063b0:	e031      	b.n	8006416 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80063b2:	f000 fd43 	bl	8006e3c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80063b6:	e02e      	b.n	8006416 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80063b8:	f000 fd2c 	bl	8006e14 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80063bc:	e02b      	b.n	8006416 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80063be:	f000 fbab 	bl	8006b18 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80063c2:	e028      	b.n	8006416 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80063c4:	f001 f874 	bl	80074b0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80063c8:	e025      	b.n	8006416 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80063ca:	f001 f853 	bl	8007474 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80063ce:	e022      	b.n	8006416 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80063d0:	4b13      	ldr	r3, [pc, #76]	@ (8006420 <_HandleIncomingPacket+0xd8>)
 80063d2:	7e1b      	ldrb	r3, [r3, #24]
 80063d4:	4618      	mov	r0, r3
 80063d6:	1cfb      	adds	r3, r7, #3
 80063d8:	2201      	movs	r2, #1
 80063da:	4619      	mov	r1, r3
 80063dc:	f7ff fe7c 	bl	80060d8 <SEGGER_RTT_ReadNoLock>
 80063e0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d013      	beq.n	8006410 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 ffb8 	bl	8007360 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80063f0:	e00e      	b.n	8006410 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	b25b      	sxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da0c      	bge.n	8006414 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80063fa:	4b09      	ldr	r3, [pc, #36]	@ (8006420 <_HandleIncomingPacket+0xd8>)
 80063fc:	7e1b      	ldrb	r3, [r3, #24]
 80063fe:	4618      	mov	r0, r3
 8006400:	1cfb      	adds	r3, r7, #3
 8006402:	2201      	movs	r2, #1
 8006404:	4619      	mov	r1, r3
 8006406:	f7ff fe67 	bl	80060d8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800640a:	e003      	b.n	8006414 <_HandleIncomingPacket+0xcc>
      break;
 800640c:	bf00      	nop
 800640e:	e002      	b.n	8006416 <_HandleIncomingPacket+0xce>
      break;
 8006410:	bf00      	nop
 8006412:	e000      	b.n	8006416 <_HandleIncomingPacket+0xce>
      break;
 8006414:	bf00      	nop
    }
  }
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	200134ac 	.word	0x200134ac

08006424 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b08c      	sub	sp, #48	@ 0x30
 8006428:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800642a:	2301      	movs	r3, #1
 800642c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800642e:	1d3b      	adds	r3, r7, #4
 8006430:	3301      	adds	r3, #1
 8006432:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006438:	4b32      	ldr	r3, [pc, #200]	@ (8006504 <_TrySendOverflowPacket+0xe0>)
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800643e:	e00b      	b.n	8006458 <_TrySendOverflowPacket+0x34>
 8006440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006442:	b2da      	uxtb	r2, r3
 8006444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006446:	1c59      	adds	r1, r3, #1
 8006448:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800644a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006454:	09db      	lsrs	r3, r3, #7
 8006456:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645a:	2b7f      	cmp	r3, #127	@ 0x7f
 800645c:	d8f0      	bhi.n	8006440 <_TrySendOverflowPacket+0x1c>
 800645e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006464:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800646e:	4b26      	ldr	r3, [pc, #152]	@ (8006508 <_TrySendOverflowPacket+0xe4>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006474:	4b23      	ldr	r3, [pc, #140]	@ (8006504 <_TrySendOverflowPacket+0xe0>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	627b      	str	r3, [r7, #36]	@ 0x24
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	623b      	str	r3, [r7, #32]
 8006486:	e00b      	b.n	80064a0 <_TrySendOverflowPacket+0x7c>
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	1c59      	adds	r1, r3, #1
 8006490:	6279      	str	r1, [r7, #36]	@ 0x24
 8006492:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	09db      	lsrs	r3, r3, #7
 800649e:	623b      	str	r3, [r7, #32]
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80064a4:	d8f0      	bhi.n	8006488 <_TrySendOverflowPacket+0x64>
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80064ac:	6a3a      	ldr	r2, [r7, #32]
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80064b6:	4b13      	ldr	r3, [pc, #76]	@ (8006504 <_TrySendOverflowPacket+0xe0>)
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	4618      	mov	r0, r3
 80064bc:	1d3b      	adds	r3, r7, #4
 80064be:	69fa      	ldr	r2, [r7, #28]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	1d3b      	adds	r3, r7, #4
 80064c6:	4619      	mov	r1, r3
 80064c8:	f7f9 fe8a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80064cc:	4603      	mov	r3, r0
 80064ce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80064d0:	f7ff fcd0 	bl	8005e74 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80064da:	4a0a      	ldr	r2, [pc, #40]	@ (8006504 <_TrySendOverflowPacket+0xe0>)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80064e0:	4b08      	ldr	r3, [pc, #32]	@ (8006504 <_TrySendOverflowPacket+0xe0>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	4b06      	ldr	r3, [pc, #24]	@ (8006504 <_TrySendOverflowPacket+0xe0>)
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	e004      	b.n	80064f8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80064ee:	4b05      	ldr	r3, [pc, #20]	@ (8006504 <_TrySendOverflowPacket+0xe0>)
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	3301      	adds	r3, #1
 80064f4:	4a03      	ldr	r2, [pc, #12]	@ (8006504 <_TrySendOverflowPacket+0xe0>)
 80064f6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80064f8:	693b      	ldr	r3, [r7, #16]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3730      	adds	r7, #48	@ 0x30
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	200134ac 	.word	0x200134ac
 8006508:	e0001004 	.word	0xe0001004

0800650c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	@ 0x28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006518:	4b96      	ldr	r3, [pc, #600]	@ (8006774 <_SendPacket+0x268>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d010      	beq.n	8006542 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006520:	4b94      	ldr	r3, [pc, #592]	@ (8006774 <_SendPacket+0x268>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8130 	beq.w	800678a <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800652a:	4b92      	ldr	r3, [pc, #584]	@ (8006774 <_SendPacket+0x268>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d109      	bne.n	8006546 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006532:	f7ff ff77 	bl	8006424 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006536:	4b8f      	ldr	r3, [pc, #572]	@ (8006774 <_SendPacket+0x268>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b01      	cmp	r3, #1
 800653c:	f040 8127 	bne.w	800678e <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8006540:	e001      	b.n	8006546 <_SendPacket+0x3a>
    goto Send;
 8006542:	bf00      	nop
 8006544:	e000      	b.n	8006548 <_SendPacket+0x3c>
Send:
 8006546:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b1f      	cmp	r3, #31
 800654c:	d809      	bhi.n	8006562 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800654e:	4b89      	ldr	r3, [pc, #548]	@ (8006774 <_SendPacket+0x268>)
 8006550:	69da      	ldr	r2, [r3, #28]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	fa22 f303 	lsr.w	r3, r2, r3
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	f040 8118 	bne.w	8006792 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b17      	cmp	r3, #23
 8006566:	d807      	bhi.n	8006578 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3b01      	subs	r3, #1
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	e0c4      	b.n	8006702 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	2b7f      	cmp	r3, #127	@ 0x7f
 8006584:	d912      	bls.n	80065ac <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	09da      	lsrs	r2, r3, #7
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3b01      	subs	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	3a01      	subs	r2, #1
 800659e:	60fa      	str	r2, [r7, #12]
 80065a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e006      	b.n	80065ba <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b7e      	cmp	r3, #126	@ 0x7e
 80065be:	d807      	bhi.n	80065d0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	e098      	b.n	8006702 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065d6:	d212      	bcs.n	80065fe <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	09da      	lsrs	r2, r3, #7
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3b01      	subs	r3, #1
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	3a01      	subs	r2, #1
 80065f0:	60fa      	str	r2, [r7, #12]
 80065f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	e081      	b.n	8006702 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006604:	d21d      	bcs.n	8006642 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	0b9a      	lsrs	r2, r3, #14
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3b01      	subs	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	09db      	lsrs	r3, r3, #7
 800661a:	b2db      	uxtb	r3, r3
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	3a01      	subs	r2, #1
 8006620:	60fa      	str	r2, [r7, #12]
 8006622:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006626:	b2da      	uxtb	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	3a01      	subs	r2, #1
 8006634:	60fa      	str	r2, [r7, #12]
 8006636:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800663a:	b2da      	uxtb	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	e05f      	b.n	8006702 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006648:	d228      	bcs.n	800669c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	0d5a      	lsrs	r2, r3, #21
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3b01      	subs	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	0b9b      	lsrs	r3, r3, #14
 800665e:	b2db      	uxtb	r3, r3
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	3a01      	subs	r2, #1
 8006664:	60fa      	str	r2, [r7, #12]
 8006666:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800666a:	b2da      	uxtb	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	09db      	lsrs	r3, r3, #7
 8006674:	b2db      	uxtb	r3, r3
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	3a01      	subs	r2, #1
 800667a:	60fa      	str	r2, [r7, #12]
 800667c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006680:	b2da      	uxtb	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	3a01      	subs	r2, #1
 800668e:	60fa      	str	r2, [r7, #12]
 8006690:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006694:	b2da      	uxtb	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	e032      	b.n	8006702 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	0f1a      	lsrs	r2, r3, #28
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	0d5b      	lsrs	r3, r3, #21
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	3a01      	subs	r2, #1
 80066b6:	60fa      	str	r2, [r7, #12]
 80066b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	0b9b      	lsrs	r3, r3, #14
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	3a01      	subs	r2, #1
 80066cc:	60fa      	str	r2, [r7, #12]
 80066ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	09db      	lsrs	r3, r3, #7
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	3a01      	subs	r2, #1
 80066e2:	60fa      	str	r2, [r7, #12]
 80066e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	3a01      	subs	r2, #1
 80066f6:	60fa      	str	r2, [r7, #12]
 80066f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006702:	4b1d      	ldr	r3, [pc, #116]	@ (8006778 <_SendPacket+0x26c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006708:	4b1a      	ldr	r3, [pc, #104]	@ (8006774 <_SendPacket+0x268>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	623b      	str	r3, [r7, #32]
 800671a:	e00b      	b.n	8006734 <_SendPacket+0x228>
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	b2da      	uxtb	r2, r3
 8006720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006722:	1c59      	adds	r1, r3, #1
 8006724:	6279      	str	r1, [r7, #36]	@ 0x24
 8006726:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	09db      	lsrs	r3, r3, #7
 8006732:	623b      	str	r3, [r7, #32]
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	2b7f      	cmp	r3, #127	@ 0x7f
 8006738:	d8f0      	bhi.n	800671c <_SendPacket+0x210>
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006740:	6a3a      	ldr	r2, [r7, #32]
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800674a:	4b0a      	ldr	r3, [pc, #40]	@ (8006774 <_SendPacket+0x268>)
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	4618      	mov	r0, r3
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	461a      	mov	r2, r3
 8006758:	68f9      	ldr	r1, [r7, #12]
 800675a:	f7f9 fd41 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800675e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006760:	f7ff fb88 	bl	8005e74 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d008      	beq.n	800677c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800676a:	4a02      	ldr	r2, [pc, #8]	@ (8006774 <_SendPacket+0x268>)
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	60d3      	str	r3, [r2, #12]
 8006770:	e010      	b.n	8006794 <_SendPacket+0x288>
 8006772:	bf00      	nop
 8006774:	200134ac 	.word	0x200134ac
 8006778:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800677c:	4b19      	ldr	r3, [pc, #100]	@ (80067e4 <_SendPacket+0x2d8>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	3301      	adds	r3, #1
 8006782:	b2da      	uxtb	r2, r3
 8006784:	4b17      	ldr	r3, [pc, #92]	@ (80067e4 <_SendPacket+0x2d8>)
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	e004      	b.n	8006794 <_SendPacket+0x288>
    goto SendDone;
 800678a:	bf00      	nop
 800678c:	e002      	b.n	8006794 <_SendPacket+0x288>
      goto SendDone;
 800678e:	bf00      	nop
 8006790:	e000      	b.n	8006794 <_SendPacket+0x288>
      goto SendDone;
 8006792:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006794:	4b13      	ldr	r3, [pc, #76]	@ (80067e4 <_SendPacket+0x2d8>)
 8006796:	7e1b      	ldrb	r3, [r3, #24]
 8006798:	4619      	mov	r1, r3
 800679a:	4a13      	ldr	r2, [pc, #76]	@ (80067e8 <_SendPacket+0x2dc>)
 800679c:	460b      	mov	r3, r1
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	440b      	add	r3, r1
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	4413      	add	r3, r2
 80067a6:	336c      	adds	r3, #108	@ 0x6c
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b0e      	ldr	r3, [pc, #56]	@ (80067e4 <_SendPacket+0x2d8>)
 80067ac:	7e1b      	ldrb	r3, [r3, #24]
 80067ae:	4618      	mov	r0, r3
 80067b0:	490d      	ldr	r1, [pc, #52]	@ (80067e8 <_SendPacket+0x2dc>)
 80067b2:	4603      	mov	r3, r0
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	4403      	add	r3, r0
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	440b      	add	r3, r1
 80067bc:	3370      	adds	r3, #112	@ 0x70
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d00b      	beq.n	80067dc <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80067c4:	4b07      	ldr	r3, [pc, #28]	@ (80067e4 <_SendPacket+0x2d8>)
 80067c6:	789b      	ldrb	r3, [r3, #2]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d107      	bne.n	80067dc <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80067cc:	4b05      	ldr	r3, [pc, #20]	@ (80067e4 <_SendPacket+0x2d8>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80067d2:	f7ff fdb9 	bl	8006348 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80067d6:	4b03      	ldr	r3, [pc, #12]	@ (80067e4 <_SendPacket+0x2d8>)
 80067d8:	2200      	movs	r2, #0
 80067da:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80067dc:	bf00      	nop
 80067de:	3728      	adds	r7, #40	@ 0x28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	200134ac 	.word	0x200134ac
 80067e8:	20012ff4 	.word	0x20012ff4

080067ec <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067f4:	f3ef 8311 	mrs	r3, BASEPRI
 80067f8:	f04f 0120 	mov.w	r1, #32
 80067fc:	f381 8811 	msr	BASEPRI, r1
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	4808      	ldr	r0, [pc, #32]	@ (8006824 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006804:	f7ff fd94 	bl	8006330 <_PreparePacket>
 8006808:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	68b8      	ldr	r0, [r7, #8]
 8006810:	f7ff fe7c 	bl	800650c <_SendPacket>
  RECORD_END();
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f383 8811 	msr	BASEPRI, r3
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	200134dc 	.word	0x200134dc

08006828 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006832:	f3ef 8311 	mrs	r3, BASEPRI
 8006836:	f04f 0120 	mov.w	r1, #32
 800683a:	f381 8811 	msr	BASEPRI, r1
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	4816      	ldr	r0, [pc, #88]	@ (800689c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006842:	f7ff fd75 	bl	8006330 <_PreparePacket>
 8006846:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	e00b      	b.n	800686e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	b2da      	uxtb	r2, r3
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	1c59      	adds	r1, r3, #1
 800685e:	61f9      	str	r1, [r7, #28]
 8006860:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	09db      	lsrs	r3, r3, #7
 800686c:	61bb      	str	r3, [r7, #24]
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b7f      	cmp	r3, #127	@ 0x7f
 8006872:	d8f0      	bhi.n	8006856 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	61fa      	str	r2, [r7, #28]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	68f9      	ldr	r1, [r7, #12]
 8006888:	6938      	ldr	r0, [r7, #16]
 800688a:	f7ff fe3f 	bl	800650c <_SendPacket>
  RECORD_END();
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f383 8811 	msr	BASEPRI, r3
}
 8006894:	bf00      	nop
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	200134dc 	.word	0x200134dc

080068a0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08c      	sub	sp, #48	@ 0x30
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80068ac:	f3ef 8311 	mrs	r3, BASEPRI
 80068b0:	f04f 0120 	mov.w	r1, #32
 80068b4:	f381 8811 	msr	BASEPRI, r1
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	4825      	ldr	r0, [pc, #148]	@ (8006950 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80068bc:	f7ff fd38 	bl	8006330 <_PreparePacket>
 80068c0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068ce:	e00b      	b.n	80068e8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80068d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d6:	1c59      	adds	r1, r3, #1
 80068d8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80068da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e4:	09db      	lsrs	r3, r3, #7
 80068e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80068ec:	d8f0      	bhi.n	80068d0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80068ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	627b      	str	r3, [r7, #36]	@ 0x24
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	623b      	str	r3, [r7, #32]
 8006906:	e00b      	b.n	8006920 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	b2da      	uxtb	r2, r3
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	1c59      	adds	r1, r3, #1
 8006910:	6279      	str	r1, [r7, #36]	@ 0x24
 8006912:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	09db      	lsrs	r3, r3, #7
 800691e:	623b      	str	r3, [r7, #32]
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	2b7f      	cmp	r3, #127	@ 0x7f
 8006924:	d8f0      	bhi.n	8006908 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	627a      	str	r2, [r7, #36]	@ 0x24
 800692c:	6a3a      	ldr	r2, [r7, #32]
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	6979      	ldr	r1, [r7, #20]
 800693a:	69b8      	ldr	r0, [r7, #24]
 800693c:	f7ff fde6 	bl	800650c <_SendPacket>
  RECORD_END();
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	f383 8811 	msr	BASEPRI, r3
}
 8006946:	bf00      	nop
 8006948:	3730      	adds	r7, #48	@ 0x30
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	200134dc 	.word	0x200134dc

08006954 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b08c      	sub	sp, #48	@ 0x30
 8006958:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800695a:	4b59      	ldr	r3, [pc, #356]	@ (8006ac0 <SEGGER_SYSVIEW_Start+0x16c>)
 800695c:	2201      	movs	r2, #1
 800695e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006960:	f3ef 8311 	mrs	r3, BASEPRI
 8006964:	f04f 0120 	mov.w	r1, #32
 8006968:	f381 8811 	msr	BASEPRI, r1
 800696c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800696e:	4b54      	ldr	r3, [pc, #336]	@ (8006ac0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006970:	785b      	ldrb	r3, [r3, #1]
 8006972:	220a      	movs	r2, #10
 8006974:	4953      	ldr	r1, [pc, #332]	@ (8006ac4 <SEGGER_SYSVIEW_Start+0x170>)
 8006976:	4618      	mov	r0, r3
 8006978:	f7f9 fc32 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006982:	f7ff fa77 	bl	8005e74 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006986:	200a      	movs	r0, #10
 8006988:	f7ff ff30 	bl	80067ec <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800698c:	f3ef 8311 	mrs	r3, BASEPRI
 8006990:	f04f 0120 	mov.w	r1, #32
 8006994:	f381 8811 	msr	BASEPRI, r1
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	484b      	ldr	r0, [pc, #300]	@ (8006ac8 <SEGGER_SYSVIEW_Start+0x174>)
 800699c:	f7ff fcc8 	bl	8006330 <_PreparePacket>
 80069a0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069aa:	4b45      	ldr	r3, [pc, #276]	@ (8006ac0 <SEGGER_SYSVIEW_Start+0x16c>)
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069b0:	e00b      	b.n	80069ca <SEGGER_SYSVIEW_Start+0x76>
 80069b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b8:	1c59      	adds	r1, r3, #1
 80069ba:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80069bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c6:	09db      	lsrs	r3, r3, #7
 80069c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80069ce:	d8f0      	bhi.n	80069b2 <SEGGER_SYSVIEW_Start+0x5e>
 80069d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	701a      	strb	r2, [r3, #0]
 80069dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80069e4:	4b36      	ldr	r3, [pc, #216]	@ (8006ac0 <SEGGER_SYSVIEW_Start+0x16c>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	623b      	str	r3, [r7, #32]
 80069ea:	e00b      	b.n	8006a04 <SEGGER_SYSVIEW_Start+0xb0>
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	1c59      	adds	r1, r3, #1
 80069f4:	6279      	str	r1, [r7, #36]	@ 0x24
 80069f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	09db      	lsrs	r3, r3, #7
 8006a02:	623b      	str	r3, [r7, #32]
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a08:	d8f0      	bhi.n	80069ec <SEGGER_SYSVIEW_Start+0x98>
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a10:	6a3a      	ldr	r2, [r7, #32]
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	61fb      	str	r3, [r7, #28]
 8006a1e:	4b28      	ldr	r3, [pc, #160]	@ (8006ac0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	61bb      	str	r3, [r7, #24]
 8006a24:	e00b      	b.n	8006a3e <SEGGER_SYSVIEW_Start+0xea>
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	1c59      	adds	r1, r3, #1
 8006a2e:	61f9      	str	r1, [r7, #28]
 8006a30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	09db      	lsrs	r3, r3, #7
 8006a3c:	61bb      	str	r3, [r7, #24]
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a42:	d8f0      	bhi.n	8006a26 <SEGGER_SYSVIEW_Start+0xd2>
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	61fa      	str	r2, [r7, #28]
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	e00b      	b.n	8006a76 <SEGGER_SYSVIEW_Start+0x122>
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	1c59      	adds	r1, r3, #1
 8006a66:	6179      	str	r1, [r7, #20]
 8006a68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	09db      	lsrs	r3, r3, #7
 8006a74:	613b      	str	r3, [r7, #16]
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a7a:	d8f0      	bhi.n	8006a5e <SEGGER_SYSVIEW_Start+0x10a>
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	617a      	str	r2, [r7, #20]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006a8c:	2218      	movs	r2, #24
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff fd3b 	bl	800650c <_SendPacket>
      RECORD_END();
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006a9c:	4b08      	ldr	r3, [pc, #32]	@ (8006ac0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006aa4:	4b06      	ldr	r3, [pc, #24]	@ (8006ac0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006aaa:	f000 f9c7 	bl	8006e3c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006aae:	f000 f9b1 	bl	8006e14 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006ab2:	f000 fcfd 	bl	80074b0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006ab6:	bf00      	nop
 8006ab8:	3730      	adds	r7, #48	@ 0x30
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	200134ac 	.word	0x200134ac
 8006ac4:	080080ac 	.word	0x080080ac
 8006ac8:	200134dc 	.word	0x200134dc

08006acc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ad2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad6:	f04f 0120 	mov.w	r1, #32
 8006ada:	f381 8811 	msr	BASEPRI, r1
 8006ade:	607b      	str	r3, [r7, #4]
 8006ae0:	480b      	ldr	r0, [pc, #44]	@ (8006b10 <SEGGER_SYSVIEW_Stop+0x44>)
 8006ae2:	f7ff fc25 	bl	8006330 <_PreparePacket>
 8006ae6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8006b14 <SEGGER_SYSVIEW_Stop+0x48>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d007      	beq.n	8006b00 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006af0:	220b      	movs	r2, #11
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6838      	ldr	r0, [r7, #0]
 8006af6:	f7ff fd09 	bl	800650c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006afa:	4b06      	ldr	r3, [pc, #24]	@ (8006b14 <SEGGER_SYSVIEW_Stop+0x48>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f383 8811 	msr	BASEPRI, r3
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	200134dc 	.word	0x200134dc
 8006b14:	200134ac 	.word	0x200134ac

08006b18 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08c      	sub	sp, #48	@ 0x30
 8006b1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b22:	f04f 0120 	mov.w	r1, #32
 8006b26:	f381 8811 	msr	BASEPRI, r1
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	4845      	ldr	r0, [pc, #276]	@ (8006c44 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006b2e:	f7ff fbff 	bl	8006330 <_PreparePacket>
 8006b32:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b3c:	4b42      	ldr	r3, [pc, #264]	@ (8006c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b42:	e00b      	b.n	8006b5c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4a:	1c59      	adds	r1, r3, #1
 8006b4c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006b4e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b58:	09db      	lsrs	r3, r3, #7
 8006b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b60:	d8f0      	bhi.n	8006b44 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b76:	4b34      	ldr	r3, [pc, #208]	@ (8006c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	623b      	str	r3, [r7, #32]
 8006b7c:	e00b      	b.n	8006b96 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	1c59      	adds	r1, r3, #1
 8006b86:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	09db      	lsrs	r3, r3, #7
 8006b94:	623b      	str	r3, [r7, #32]
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b9a:	d8f0      	bhi.n	8006b7e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ba2:	6a3a      	ldr	r2, [r7, #32]
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006baa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	4b25      	ldr	r3, [pc, #148]	@ (8006c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	61bb      	str	r3, [r7, #24]
 8006bb6:	e00b      	b.n	8006bd0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	61f9      	str	r1, [r7, #28]
 8006bc2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	09db      	lsrs	r3, r3, #7
 8006bce:	61bb      	str	r3, [r7, #24]
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bd4:	d8f0      	bhi.n	8006bb8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	61fa      	str	r2, [r7, #28]
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	2300      	movs	r3, #0
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	e00b      	b.n	8006c08 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	1c59      	adds	r1, r3, #1
 8006bf8:	6179      	str	r1, [r7, #20]
 8006bfa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	09db      	lsrs	r3, r3, #7
 8006c06:	613b      	str	r3, [r7, #16]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c0c:	d8f0      	bhi.n	8006bf0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	617a      	str	r2, [r7, #20]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c1e:	2218      	movs	r2, #24
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	68b8      	ldr	r0, [r7, #8]
 8006c24:	f7ff fc72 	bl	800650c <_SendPacket>
  RECORD_END();
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c2e:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006c36:	4b04      	ldr	r3, [pc, #16]	@ (8006c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3a:	4798      	blx	r3
  }
}
 8006c3c:	bf00      	nop
 8006c3e:	3730      	adds	r7, #48	@ 0x30
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	200134dc 	.word	0x200134dc
 8006c48:	200134ac 	.word	0x200134ac

08006c4c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b092      	sub	sp, #72	@ 0x48
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006c54:	f3ef 8311 	mrs	r3, BASEPRI
 8006c58:	f04f 0120 	mov.w	r1, #32
 8006c5c:	f381 8811 	msr	BASEPRI, r1
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	486a      	ldr	r0, [pc, #424]	@ (8006e0c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006c64:	f7ff fb64 	bl	8006330 <_PreparePacket>
 8006c68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	4b66      	ldr	r3, [pc, #408]	@ (8006e10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c7e:	e00b      	b.n	8006c98 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c86:	1c59      	adds	r1, r3, #1
 8006c88:	6479      	str	r1, [r7, #68]	@ 0x44
 8006c8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c94:	09db      	lsrs	r3, r3, #7
 8006c96:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c9c:	d8f0      	bhi.n	8006c80 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ca4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cb8:	e00b      	b.n	8006cd2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc0:	1c59      	adds	r1, r3, #1
 8006cc2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006cc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cce:	09db      	lsrs	r3, r3, #7
 8006cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cd6:	d8f0      	bhi.n	8006cba <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006cde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	4619      	mov	r1, r3
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f7ff faed 	bl	80062d0 <_EncodeStr>
 8006cf6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006cf8:	2209      	movs	r2, #9
 8006cfa:	68f9      	ldr	r1, [r7, #12]
 8006cfc:	6938      	ldr	r0, [r7, #16]
 8006cfe:	f7ff fc05 	bl	800650c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4b40      	ldr	r3, [pc, #256]	@ (8006e10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d16:	e00b      	b.n	8006d30 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d1e:	1c59      	adds	r1, r3, #1
 8006d20:	6379      	str	r1, [r7, #52]	@ 0x34
 8006d22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d26:	b2d2      	uxtb	r2, r2
 8006d28:	701a      	strb	r2, [r3, #0]
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	09db      	lsrs	r3, r3, #7
 8006d2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d34:	d8f0      	bhi.n	8006d18 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	637a      	str	r2, [r7, #52]	@ 0x34
 8006d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d50:	e00b      	b.n	8006d6a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d58:	1c59      	adds	r1, r3, #1
 8006d5a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006d5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d60:	b2d2      	uxtb	r2, r2
 8006d62:	701a      	strb	r2, [r3, #0]
 8006d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d66:	09db      	lsrs	r3, r3, #7
 8006d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d6e:	d8f0      	bhi.n	8006d52 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	623b      	str	r3, [r7, #32]
 8006d8a:	e00b      	b.n	8006da4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d92:	1c59      	adds	r1, r3, #1
 8006d94:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	09db      	lsrs	r3, r3, #7
 8006da2:	623b      	str	r3, [r7, #32]
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006da8:	d8f0      	bhi.n	8006d8c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	627a      	str	r2, [r7, #36]	@ 0x24
 8006db0:	6a3a      	ldr	r2, [r7, #32]
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	61bb      	str	r3, [r7, #24]
 8006dc4:	e00b      	b.n	8006dde <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	1c59      	adds	r1, r3, #1
 8006dce:	61f9      	str	r1, [r7, #28]
 8006dd0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	09db      	lsrs	r3, r3, #7
 8006ddc:	61bb      	str	r3, [r7, #24]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006de2:	d8f0      	bhi.n	8006dc6 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	61fa      	str	r2, [r7, #28]
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006df4:	2215      	movs	r2, #21
 8006df6:	68f9      	ldr	r1, [r7, #12]
 8006df8:	6938      	ldr	r0, [r7, #16]
 8006dfa:	f7ff fb87 	bl	800650c <_SendPacket>
  RECORD_END();
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f383 8811 	msr	BASEPRI, r3
}
 8006e04:	bf00      	nop
 8006e06:	3748      	adds	r7, #72	@ 0x48
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	200134dc 	.word	0x200134dc
 8006e10:	200134ac 	.word	0x200134ac

08006e14 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006e18:	4b07      	ldr	r3, [pc, #28]	@ (8006e38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d008      	beq.n	8006e32 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006e20:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006e2a:	4b03      	ldr	r3, [pc, #12]	@ (8006e38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	4798      	blx	r3
  }
}
 8006e32:	bf00      	nop
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	200134ac 	.word	0x200134ac

08006e3c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006e3c:	b590      	push	{r4, r7, lr}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006e42:	4b15      	ldr	r3, [pc, #84]	@ (8006e98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d01a      	beq.n	8006e80 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006e4a:	4b13      	ldr	r3, [pc, #76]	@ (8006e98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d015      	beq.n	8006e80 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006e54:	4b10      	ldr	r3, [pc, #64]	@ (8006e98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4798      	blx	r3
 8006e5c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e60:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006e62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	000a      	movs	r2, r1
 8006e70:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e72:	4613      	mov	r3, r2
 8006e74:	461a      	mov	r2, r3
 8006e76:	4621      	mov	r1, r4
 8006e78:	200d      	movs	r0, #13
 8006e7a:	f7ff fd11 	bl	80068a0 <SEGGER_SYSVIEW_RecordU32x2>
 8006e7e:	e006      	b.n	8006e8e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006e80:	4b06      	ldr	r3, [pc, #24]	@ (8006e9c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4619      	mov	r1, r3
 8006e86:	200c      	movs	r0, #12
 8006e88:	f7ff fcce 	bl	8006828 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd90      	pop	{r4, r7, pc}
 8006e96:	bf00      	nop
 8006e98:	200134ac 	.word	0x200134ac
 8006e9c:	e0001004 	.word	0xe0001004

08006ea0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8006eaa:	f04f 0120 	mov.w	r1, #32
 8006eae:	f381 8811 	msr	BASEPRI, r1
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	4819      	ldr	r0, [pc, #100]	@ (8006f1c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006eb6:	f7ff fa3b 	bl	8006330 <_PreparePacket>
 8006eba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006ec0:	4b17      	ldr	r3, [pc, #92]	@ (8006f20 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	e00b      	b.n	8006eec <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	1c59      	adds	r1, r3, #1
 8006edc:	6179      	str	r1, [r7, #20]
 8006ede:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	09db      	lsrs	r3, r3, #7
 8006eea:	613b      	str	r3, [r7, #16]
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ef0:	d8f0      	bhi.n	8006ed4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	617a      	str	r2, [r7, #20]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	701a      	strb	r2, [r3, #0]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006f02:	2202      	movs	r2, #2
 8006f04:	6879      	ldr	r1, [r7, #4]
 8006f06:	68b8      	ldr	r0, [r7, #8]
 8006f08:	f7ff fb00 	bl	800650c <_SendPacket>
  RECORD_END();
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f383 8811 	msr	BASEPRI, r3
}
 8006f12:	bf00      	nop
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200134dc 	.word	0x200134dc
 8006f20:	e000ed04 	.word	0xe000ed04

08006f24 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f2e:	f04f 0120 	mov.w	r1, #32
 8006f32:	f381 8811 	msr	BASEPRI, r1
 8006f36:	607b      	str	r3, [r7, #4]
 8006f38:	4807      	ldr	r0, [pc, #28]	@ (8006f58 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006f3a:	f7ff f9f9 	bl	8006330 <_PreparePacket>
 8006f3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006f40:	2203      	movs	r2, #3
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6838      	ldr	r0, [r7, #0]
 8006f46:	f7ff fae1 	bl	800650c <_SendPacket>
  RECORD_END();
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f383 8811 	msr	BASEPRI, r3
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	200134dc 	.word	0x200134dc

08006f5c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f62:	f3ef 8311 	mrs	r3, BASEPRI
 8006f66:	f04f 0120 	mov.w	r1, #32
 8006f6a:	f381 8811 	msr	BASEPRI, r1
 8006f6e:	607b      	str	r3, [r7, #4]
 8006f70:	4807      	ldr	r0, [pc, #28]	@ (8006f90 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006f72:	f7ff f9dd 	bl	8006330 <_PreparePacket>
 8006f76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006f78:	2212      	movs	r2, #18
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6838      	ldr	r0, [r7, #0]
 8006f7e:	f7ff fac5 	bl	800650c <_SendPacket>
  RECORD_END();
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f383 8811 	msr	BASEPRI, r3
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	200134dc 	.word	0x200134dc

08006f94 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa0:	f04f 0120 	mov.w	r1, #32
 8006fa4:	f381 8811 	msr	BASEPRI, r1
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	4817      	ldr	r0, [pc, #92]	@ (8007008 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006fac:	f7ff f9c0 	bl	8006330 <_PreparePacket>
 8006fb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	61fb      	str	r3, [r7, #28]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	e00b      	b.n	8006fd8 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	1c59      	adds	r1, r3, #1
 8006fc8:	61f9      	str	r1, [r7, #28]
 8006fca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	09db      	lsrs	r3, r3, #7
 8006fd6:	61bb      	str	r3, [r7, #24]
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fdc:	d8f0      	bhi.n	8006fc0 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	61fa      	str	r2, [r7, #28]
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006fee:	221c      	movs	r2, #28
 8006ff0:	68f9      	ldr	r1, [r7, #12]
 8006ff2:	6938      	ldr	r0, [r7, #16]
 8006ff4:	f7ff fa8a 	bl	800650c <_SendPacket>
  RECORD_END();
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f383 8811 	msr	BASEPRI, r3
}
 8006ffe:	bf00      	nop
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	200134dc 	.word	0x200134dc

0800700c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 800700c:	b580      	push	{r7, lr}
 800700e:	b08a      	sub	sp, #40	@ 0x28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007016:	f3ef 8311 	mrs	r3, BASEPRI
 800701a:	f04f 0120 	mov.w	r1, #32
 800701e:	f381 8811 	msr	BASEPRI, r1
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	4824      	ldr	r0, [pc, #144]	@ (80070b8 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8007026:	f7ff f983 	bl	8006330 <_PreparePacket>
 800702a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	627b      	str	r3, [r7, #36]	@ 0x24
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	623b      	str	r3, [r7, #32]
 8007038:	e00b      	b.n	8007052 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	b2da      	uxtb	r2, r3
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	1c59      	adds	r1, r3, #1
 8007042:	6279      	str	r1, [r7, #36]	@ 0x24
 8007044:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	09db      	lsrs	r3, r3, #7
 8007050:	623b      	str	r3, [r7, #32]
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	2b7f      	cmp	r3, #127	@ 0x7f
 8007056:	d8f0      	bhi.n	800703a <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8007058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	627a      	str	r2, [r7, #36]	@ 0x24
 800705e:	6a3a      	ldr	r2, [r7, #32]
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007066:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	61fb      	str	r3, [r7, #28]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	61bb      	str	r3, [r7, #24]
 8007070:	e00b      	b.n	800708a <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	b2da      	uxtb	r2, r3
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	1c59      	adds	r1, r3, #1
 800707a:	61f9      	str	r1, [r7, #28]
 800707c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007080:	b2d2      	uxtb	r2, r2
 8007082:	701a      	strb	r2, [r3, #0]
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	09db      	lsrs	r3, r3, #7
 8007088:	61bb      	str	r3, [r7, #24]
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	2b7f      	cmp	r3, #127	@ 0x7f
 800708e:	d8f0      	bhi.n	8007072 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	61fa      	str	r2, [r7, #28]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80070a0:	221c      	movs	r2, #28
 80070a2:	68f9      	ldr	r1, [r7, #12]
 80070a4:	6938      	ldr	r0, [r7, #16]
 80070a6:	f7ff fa31 	bl	800650c <_SendPacket>
  RECORD_END();
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f383 8811 	msr	BASEPRI, r3
}
 80070b0:	bf00      	nop
 80070b2:	3728      	adds	r7, #40	@ 0x28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	200134dc 	.word	0x200134dc

080070bc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80070c2:	f3ef 8311 	mrs	r3, BASEPRI
 80070c6:	f04f 0120 	mov.w	r1, #32
 80070ca:	f381 8811 	msr	BASEPRI, r1
 80070ce:	607b      	str	r3, [r7, #4]
 80070d0:	4807      	ldr	r0, [pc, #28]	@ (80070f0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80070d2:	f7ff f92d 	bl	8006330 <_PreparePacket>
 80070d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80070d8:	2211      	movs	r2, #17
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6838      	ldr	r0, [r7, #0]
 80070de:	f7ff fa15 	bl	800650c <_SendPacket>
  RECORD_END();
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f383 8811 	msr	BASEPRI, r3
}
 80070e8:	bf00      	nop
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	200134dc 	.word	0x200134dc

080070f4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007100:	f04f 0120 	mov.w	r1, #32
 8007104:	f381 8811 	msr	BASEPRI, r1
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	4819      	ldr	r0, [pc, #100]	@ (8007170 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800710c:	f7ff f910 	bl	8006330 <_PreparePacket>
 8007110:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007116:	4b17      	ldr	r3, [pc, #92]	@ (8007174 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	61fb      	str	r3, [r7, #28]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	61bb      	str	r3, [r7, #24]
 8007128:	e00b      	b.n	8007142 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	b2da      	uxtb	r2, r3
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	1c59      	adds	r1, r3, #1
 8007132:	61f9      	str	r1, [r7, #28]
 8007134:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007138:	b2d2      	uxtb	r2, r2
 800713a:	701a      	strb	r2, [r3, #0]
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	09db      	lsrs	r3, r3, #7
 8007140:	61bb      	str	r3, [r7, #24]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	2b7f      	cmp	r3, #127	@ 0x7f
 8007146:	d8f0      	bhi.n	800712a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	61fa      	str	r2, [r7, #28]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007158:	2208      	movs	r2, #8
 800715a:	68f9      	ldr	r1, [r7, #12]
 800715c:	6938      	ldr	r0, [r7, #16]
 800715e:	f7ff f9d5 	bl	800650c <_SendPacket>
  RECORD_END();
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f383 8811 	msr	BASEPRI, r3
}
 8007168:	bf00      	nop
 800716a:	3720      	adds	r7, #32
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	200134dc 	.word	0x200134dc
 8007174:	200134ac 	.word	0x200134ac

08007178 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007180:	f3ef 8311 	mrs	r3, BASEPRI
 8007184:	f04f 0120 	mov.w	r1, #32
 8007188:	f381 8811 	msr	BASEPRI, r1
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	4819      	ldr	r0, [pc, #100]	@ (80071f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007190:	f7ff f8ce 	bl	8006330 <_PreparePacket>
 8007194:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800719a:	4b17      	ldr	r3, [pc, #92]	@ (80071f8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	61bb      	str	r3, [r7, #24]
 80071ac:	e00b      	b.n	80071c6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	1c59      	adds	r1, r3, #1
 80071b6:	61f9      	str	r1, [r7, #28]
 80071b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	09db      	lsrs	r3, r3, #7
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ca:	d8f0      	bhi.n	80071ae <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	61fa      	str	r2, [r7, #28]
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80071dc:	2204      	movs	r2, #4
 80071de:	68f9      	ldr	r1, [r7, #12]
 80071e0:	6938      	ldr	r0, [r7, #16]
 80071e2:	f7ff f993 	bl	800650c <_SendPacket>
  RECORD_END();
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f383 8811 	msr	BASEPRI, r3
}
 80071ec:	bf00      	nop
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	200134dc 	.word	0x200134dc
 80071f8:	200134ac 	.word	0x200134ac

080071fc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007204:	f3ef 8311 	mrs	r3, BASEPRI
 8007208:	f04f 0120 	mov.w	r1, #32
 800720c:	f381 8811 	msr	BASEPRI, r1
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	4819      	ldr	r0, [pc, #100]	@ (8007278 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007214:	f7ff f88c 	bl	8006330 <_PreparePacket>
 8007218:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800721e:	4b17      	ldr	r3, [pc, #92]	@ (800727c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	61fb      	str	r3, [r7, #28]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	61bb      	str	r3, [r7, #24]
 8007230:	e00b      	b.n	800724a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	b2da      	uxtb	r2, r3
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	1c59      	adds	r1, r3, #1
 800723a:	61f9      	str	r1, [r7, #28]
 800723c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007240:	b2d2      	uxtb	r2, r2
 8007242:	701a      	strb	r2, [r3, #0]
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	09db      	lsrs	r3, r3, #7
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	2b7f      	cmp	r3, #127	@ 0x7f
 800724e:	d8f0      	bhi.n	8007232 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	61fa      	str	r2, [r7, #28]
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	b2d2      	uxtb	r2, r2
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007260:	2206      	movs	r2, #6
 8007262:	68f9      	ldr	r1, [r7, #12]
 8007264:	6938      	ldr	r0, [r7, #16]
 8007266:	f7ff f951 	bl	800650c <_SendPacket>
  RECORD_END();
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f383 8811 	msr	BASEPRI, r3
}
 8007270:	bf00      	nop
 8007272:	3720      	adds	r7, #32
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	200134dc 	.word	0x200134dc
 800727c:	200134ac 	.word	0x200134ac

08007280 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	@ 0x28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800728a:	f3ef 8311 	mrs	r3, BASEPRI
 800728e:	f04f 0120 	mov.w	r1, #32
 8007292:	f381 8811 	msr	BASEPRI, r1
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	4827      	ldr	r0, [pc, #156]	@ (8007338 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800729a:	f7ff f849 	bl	8006330 <_PreparePacket>
 800729e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80072a4:	4b25      	ldr	r3, [pc, #148]	@ (800733c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	623b      	str	r3, [r7, #32]
 80072b6:	e00b      	b.n	80072d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	1c59      	adds	r1, r3, #1
 80072c0:	6279      	str	r1, [r7, #36]	@ 0x24
 80072c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	09db      	lsrs	r3, r3, #7
 80072ce:	623b      	str	r3, [r7, #32]
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80072d4:	d8f0      	bhi.n	80072b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	627a      	str	r2, [r7, #36]	@ 0x24
 80072dc:	6a3a      	ldr	r2, [r7, #32]
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	701a      	strb	r2, [r3, #0]
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	61fb      	str	r3, [r7, #28]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	61bb      	str	r3, [r7, #24]
 80072ee:	e00b      	b.n	8007308 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	1c59      	adds	r1, r3, #1
 80072f8:	61f9      	str	r1, [r7, #28]
 80072fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072fe:	b2d2      	uxtb	r2, r2
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	09db      	lsrs	r3, r3, #7
 8007306:	61bb      	str	r3, [r7, #24]
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	2b7f      	cmp	r3, #127	@ 0x7f
 800730c:	d8f0      	bhi.n	80072f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	61fa      	str	r2, [r7, #28]
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	b2d2      	uxtb	r2, r2
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800731e:	2207      	movs	r2, #7
 8007320:	68f9      	ldr	r1, [r7, #12]
 8007322:	6938      	ldr	r0, [r7, #16]
 8007324:	f7ff f8f2 	bl	800650c <_SendPacket>
  RECORD_END();
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f383 8811 	msr	BASEPRI, r3
}
 800732e:	bf00      	nop
 8007330:	3728      	adds	r7, #40	@ 0x28
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	200134dc 	.word	0x200134dc
 800733c:	200134ac 	.word	0x200134ac

08007340 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007348:	4b04      	ldr	r3, [pc, #16]	@ (800735c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	1ad3      	subs	r3, r2, r3
}
 8007350:	4618      	mov	r0, r3
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	200134ac 	.word	0x200134ac

08007360 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007360:	b580      	push	{r7, lr}
 8007362:	b08c      	sub	sp, #48	@ 0x30
 8007364:	af00      	add	r7, sp, #0
 8007366:	4603      	mov	r3, r0
 8007368:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800736a:	4b40      	ldr	r3, [pc, #256]	@ (800746c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d077      	beq.n	8007462 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007372:	4b3e      	ldr	r3, [pc, #248]	@ (800746c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007378:	2300      	movs	r3, #0
 800737a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800737c:	e008      	b.n	8007390 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800737e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d007      	beq.n	800739a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800738a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738c:	3301      	adds	r3, #1
 800738e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007394:	429a      	cmp	r2, r3
 8007396:	d3f2      	bcc.n	800737e <SEGGER_SYSVIEW_SendModule+0x1e>
 8007398:	e000      	b.n	800739c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800739a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800739c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d055      	beq.n	800744e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073a2:	f3ef 8311 	mrs	r3, BASEPRI
 80073a6:	f04f 0120 	mov.w	r1, #32
 80073aa:	f381 8811 	msr	BASEPRI, r1
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	482f      	ldr	r0, [pc, #188]	@ (8007470 <SEGGER_SYSVIEW_SendModule+0x110>)
 80073b2:	f7fe ffbd 	bl	8006330 <_PreparePacket>
 80073b6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	627b      	str	r3, [r7, #36]	@ 0x24
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	623b      	str	r3, [r7, #32]
 80073c4:	e00b      	b.n	80073de <SEGGER_SYSVIEW_SendModule+0x7e>
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	1c59      	adds	r1, r3, #1
 80073ce:	6279      	str	r1, [r7, #36]	@ 0x24
 80073d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073d4:	b2d2      	uxtb	r2, r2
 80073d6:	701a      	strb	r2, [r3, #0]
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	09db      	lsrs	r3, r3, #7
 80073dc:	623b      	str	r3, [r7, #32]
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80073e2:	d8f0      	bhi.n	80073c6 <SEGGER_SYSVIEW_SendModule+0x66>
 80073e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80073ea:	6a3a      	ldr	r2, [r7, #32]
 80073ec:	b2d2      	uxtb	r2, r2
 80073ee:	701a      	strb	r2, [r3, #0]
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	61fb      	str	r3, [r7, #28]
 80073f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	e00b      	b.n	8007418 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	b2da      	uxtb	r2, r3
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	1c59      	adds	r1, r3, #1
 8007408:	61f9      	str	r1, [r7, #28]
 800740a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	09db      	lsrs	r3, r3, #7
 8007416:	61bb      	str	r3, [r7, #24]
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b7f      	cmp	r3, #127	@ 0x7f
 800741c:	d8f0      	bhi.n	8007400 <SEGGER_SYSVIEW_SendModule+0xa0>
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	61fa      	str	r2, [r7, #28]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800742e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2280      	movs	r2, #128	@ 0x80
 8007434:	4619      	mov	r1, r3
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7fe ff4a 	bl	80062d0 <_EncodeStr>
 800743c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800743e:	2216      	movs	r2, #22
 8007440:	68f9      	ldr	r1, [r7, #12]
 8007442:	6938      	ldr	r0, [r7, #16]
 8007444:	f7ff f862 	bl	800650c <_SendPacket>
      RECORD_END();
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800744e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007450:	2b00      	cmp	r3, #0
 8007452:	d006      	beq.n	8007462 <SEGGER_SYSVIEW_SendModule+0x102>
 8007454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800745c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	4798      	blx	r3
    }
  }
}
 8007462:	bf00      	nop
 8007464:	3730      	adds	r7, #48	@ 0x30
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	200134d4 	.word	0x200134d4
 8007470:	200134dc 	.word	0x200134dc

08007474 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800747a:	4b0c      	ldr	r3, [pc, #48]	@ (80074ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00f      	beq.n	80074a2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007482:	4b0a      	ldr	r3, [pc, #40]	@ (80074ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f2      	bne.n	8007488 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80074a2:	bf00      	nop
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	200134d4 	.word	0x200134d4

080074b0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80074b6:	f3ef 8311 	mrs	r3, BASEPRI
 80074ba:	f04f 0120 	mov.w	r1, #32
 80074be:	f381 8811 	msr	BASEPRI, r1
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	4817      	ldr	r0, [pc, #92]	@ (8007524 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80074c6:	f7fe ff33 	bl	8006330 <_PreparePacket>
 80074ca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	4b14      	ldr	r3, [pc, #80]	@ (8007528 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	e00b      	b.n	80074f4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	1c59      	adds	r1, r3, #1
 80074e4:	6179      	str	r1, [r7, #20]
 80074e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	09db      	lsrs	r3, r3, #7
 80074f2:	613b      	str	r3, [r7, #16]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80074f8:	d8f0      	bhi.n	80074dc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	617a      	str	r2, [r7, #20]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	b2d2      	uxtb	r2, r2
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800750a:	221b      	movs	r2, #27
 800750c:	6879      	ldr	r1, [r7, #4]
 800750e:	68b8      	ldr	r0, [r7, #8]
 8007510:	f7fe fffc 	bl	800650c <_SendPacket>
  RECORD_END();
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f383 8811 	msr	BASEPRI, r3
}
 800751a:	bf00      	nop
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	200134dc 	.word	0x200134dc
 8007528:	200134d8 	.word	0x200134d8

0800752c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800752c:	b580      	push	{r7, lr}
 800752e:	b08a      	sub	sp, #40	@ 0x28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007534:	f3ef 8311 	mrs	r3, BASEPRI
 8007538:	f04f 0120 	mov.w	r1, #32
 800753c:	f381 8811 	msr	BASEPRI, r1
 8007540:	617b      	str	r3, [r7, #20]
 8007542:	4827      	ldr	r0, [pc, #156]	@ (80075e0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007544:	f7fe fef4 	bl	8006330 <_PreparePacket>
 8007548:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800754a:	2280      	movs	r2, #128	@ 0x80
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	6938      	ldr	r0, [r7, #16]
 8007550:	f7fe febe 	bl	80062d0 <_EncodeStr>
 8007554:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	627b      	str	r3, [r7, #36]	@ 0x24
 800755a:	2301      	movs	r3, #1
 800755c:	623b      	str	r3, [r7, #32]
 800755e:	e00b      	b.n	8007578 <SEGGER_SYSVIEW_Warn+0x4c>
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	b2da      	uxtb	r2, r3
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	1c59      	adds	r1, r3, #1
 8007568:	6279      	str	r1, [r7, #36]	@ 0x24
 800756a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	09db      	lsrs	r3, r3, #7
 8007576:	623b      	str	r3, [r7, #32]
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	2b7f      	cmp	r3, #127	@ 0x7f
 800757c:	d8f0      	bhi.n	8007560 <SEGGER_SYSVIEW_Warn+0x34>
 800757e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	627a      	str	r2, [r7, #36]	@ 0x24
 8007584:	6a3a      	ldr	r2, [r7, #32]
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	61fb      	str	r3, [r7, #28]
 8007592:	2300      	movs	r3, #0
 8007594:	61bb      	str	r3, [r7, #24]
 8007596:	e00b      	b.n	80075b0 <SEGGER_SYSVIEW_Warn+0x84>
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	b2da      	uxtb	r2, r3
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	1c59      	adds	r1, r3, #1
 80075a0:	61f9      	str	r1, [r7, #28]
 80075a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	09db      	lsrs	r3, r3, #7
 80075ae:	61bb      	str	r3, [r7, #24]
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80075b4:	d8f0      	bhi.n	8007598 <SEGGER_SYSVIEW_Warn+0x6c>
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	1c5a      	adds	r2, r3, #1
 80075ba:	61fa      	str	r2, [r7, #28]
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80075c6:	221a      	movs	r2, #26
 80075c8:	68f9      	ldr	r1, [r7, #12]
 80075ca:	6938      	ldr	r0, [r7, #16]
 80075cc:	f7fe ff9e 	bl	800650c <_SendPacket>
  RECORD_END();
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f383 8811 	msr	BASEPRI, r3
}
 80075d6:	bf00      	nop
 80075d8:	3728      	adds	r7, #40	@ 0x28
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	200134dc 	.word	0x200134dc

080075e4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	2000      	movs	r0, #0
 80075f8:	f7fe fe44 	bl	8006284 <SEGGER_RTT_Write>
  return len;
 80075fc:	683b      	ldr	r3, [r7, #0]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
	...

08007608 <std>:
 8007608:	2300      	movs	r3, #0
 800760a:	b510      	push	{r4, lr}
 800760c:	4604      	mov	r4, r0
 800760e:	e9c0 3300 	strd	r3, r3, [r0]
 8007612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007616:	6083      	str	r3, [r0, #8]
 8007618:	8181      	strh	r1, [r0, #12]
 800761a:	6643      	str	r3, [r0, #100]	@ 0x64
 800761c:	81c2      	strh	r2, [r0, #14]
 800761e:	6183      	str	r3, [r0, #24]
 8007620:	4619      	mov	r1, r3
 8007622:	2208      	movs	r2, #8
 8007624:	305c      	adds	r0, #92	@ 0x5c
 8007626:	f000 f9f7 	bl	8007a18 <memset>
 800762a:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <std+0x58>)
 800762c:	6263      	str	r3, [r4, #36]	@ 0x24
 800762e:	4b0d      	ldr	r3, [pc, #52]	@ (8007664 <std+0x5c>)
 8007630:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007632:	4b0d      	ldr	r3, [pc, #52]	@ (8007668 <std+0x60>)
 8007634:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007636:	4b0d      	ldr	r3, [pc, #52]	@ (800766c <std+0x64>)
 8007638:	6323      	str	r3, [r4, #48]	@ 0x30
 800763a:	4b0d      	ldr	r3, [pc, #52]	@ (8007670 <std+0x68>)
 800763c:	6224      	str	r4, [r4, #32]
 800763e:	429c      	cmp	r4, r3
 8007640:	d006      	beq.n	8007650 <std+0x48>
 8007642:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007646:	4294      	cmp	r4, r2
 8007648:	d002      	beq.n	8007650 <std+0x48>
 800764a:	33d0      	adds	r3, #208	@ 0xd0
 800764c:	429c      	cmp	r4, r3
 800764e:	d105      	bne.n	800765c <std+0x54>
 8007650:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007658:	f000 ba44 	b.w	8007ae4 <__retarget_lock_init_recursive>
 800765c:	bd10      	pop	{r4, pc}
 800765e:	bf00      	nop
 8007660:	08007849 	.word	0x08007849
 8007664:	0800786b 	.word	0x0800786b
 8007668:	080078a3 	.word	0x080078a3
 800766c:	080078c7 	.word	0x080078c7
 8007670:	200135c0 	.word	0x200135c0

08007674 <stdio_exit_handler>:
 8007674:	4a02      	ldr	r2, [pc, #8]	@ (8007680 <stdio_exit_handler+0xc>)
 8007676:	4903      	ldr	r1, [pc, #12]	@ (8007684 <stdio_exit_handler+0x10>)
 8007678:	4803      	ldr	r0, [pc, #12]	@ (8007688 <stdio_exit_handler+0x14>)
 800767a:	f000 b869 	b.w	8007750 <_fwalk_sglue>
 800767e:	bf00      	nop
 8007680:	20000014 	.word	0x20000014
 8007684:	08007e01 	.word	0x08007e01
 8007688:	20000024 	.word	0x20000024

0800768c <cleanup_stdio>:
 800768c:	6841      	ldr	r1, [r0, #4]
 800768e:	4b0c      	ldr	r3, [pc, #48]	@ (80076c0 <cleanup_stdio+0x34>)
 8007690:	4299      	cmp	r1, r3
 8007692:	b510      	push	{r4, lr}
 8007694:	4604      	mov	r4, r0
 8007696:	d001      	beq.n	800769c <cleanup_stdio+0x10>
 8007698:	f000 fbb2 	bl	8007e00 <_fflush_r>
 800769c:	68a1      	ldr	r1, [r4, #8]
 800769e:	4b09      	ldr	r3, [pc, #36]	@ (80076c4 <cleanup_stdio+0x38>)
 80076a0:	4299      	cmp	r1, r3
 80076a2:	d002      	beq.n	80076aa <cleanup_stdio+0x1e>
 80076a4:	4620      	mov	r0, r4
 80076a6:	f000 fbab 	bl	8007e00 <_fflush_r>
 80076aa:	68e1      	ldr	r1, [r4, #12]
 80076ac:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <cleanup_stdio+0x3c>)
 80076ae:	4299      	cmp	r1, r3
 80076b0:	d004      	beq.n	80076bc <cleanup_stdio+0x30>
 80076b2:	4620      	mov	r0, r4
 80076b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076b8:	f000 bba2 	b.w	8007e00 <_fflush_r>
 80076bc:	bd10      	pop	{r4, pc}
 80076be:	bf00      	nop
 80076c0:	200135c0 	.word	0x200135c0
 80076c4:	20013628 	.word	0x20013628
 80076c8:	20013690 	.word	0x20013690

080076cc <global_stdio_init.part.0>:
 80076cc:	b510      	push	{r4, lr}
 80076ce:	4b0b      	ldr	r3, [pc, #44]	@ (80076fc <global_stdio_init.part.0+0x30>)
 80076d0:	4c0b      	ldr	r4, [pc, #44]	@ (8007700 <global_stdio_init.part.0+0x34>)
 80076d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007704 <global_stdio_init.part.0+0x38>)
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	4620      	mov	r0, r4
 80076d8:	2200      	movs	r2, #0
 80076da:	2104      	movs	r1, #4
 80076dc:	f7ff ff94 	bl	8007608 <std>
 80076e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076e4:	2201      	movs	r2, #1
 80076e6:	2109      	movs	r1, #9
 80076e8:	f7ff ff8e 	bl	8007608 <std>
 80076ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076f0:	2202      	movs	r2, #2
 80076f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f6:	2112      	movs	r1, #18
 80076f8:	f7ff bf86 	b.w	8007608 <std>
 80076fc:	200136f8 	.word	0x200136f8
 8007700:	200135c0 	.word	0x200135c0
 8007704:	08007675 	.word	0x08007675

08007708 <__sfp_lock_acquire>:
 8007708:	4801      	ldr	r0, [pc, #4]	@ (8007710 <__sfp_lock_acquire+0x8>)
 800770a:	f000 b9ec 	b.w	8007ae6 <__retarget_lock_acquire_recursive>
 800770e:	bf00      	nop
 8007710:	20013701 	.word	0x20013701

08007714 <__sfp_lock_release>:
 8007714:	4801      	ldr	r0, [pc, #4]	@ (800771c <__sfp_lock_release+0x8>)
 8007716:	f000 b9e7 	b.w	8007ae8 <__retarget_lock_release_recursive>
 800771a:	bf00      	nop
 800771c:	20013701 	.word	0x20013701

08007720 <__sinit>:
 8007720:	b510      	push	{r4, lr}
 8007722:	4604      	mov	r4, r0
 8007724:	f7ff fff0 	bl	8007708 <__sfp_lock_acquire>
 8007728:	6a23      	ldr	r3, [r4, #32]
 800772a:	b11b      	cbz	r3, 8007734 <__sinit+0x14>
 800772c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007730:	f7ff bff0 	b.w	8007714 <__sfp_lock_release>
 8007734:	4b04      	ldr	r3, [pc, #16]	@ (8007748 <__sinit+0x28>)
 8007736:	6223      	str	r3, [r4, #32]
 8007738:	4b04      	ldr	r3, [pc, #16]	@ (800774c <__sinit+0x2c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1f5      	bne.n	800772c <__sinit+0xc>
 8007740:	f7ff ffc4 	bl	80076cc <global_stdio_init.part.0>
 8007744:	e7f2      	b.n	800772c <__sinit+0xc>
 8007746:	bf00      	nop
 8007748:	0800768d 	.word	0x0800768d
 800774c:	200136f8 	.word	0x200136f8

08007750 <_fwalk_sglue>:
 8007750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007754:	4607      	mov	r7, r0
 8007756:	4688      	mov	r8, r1
 8007758:	4614      	mov	r4, r2
 800775a:	2600      	movs	r6, #0
 800775c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007760:	f1b9 0901 	subs.w	r9, r9, #1
 8007764:	d505      	bpl.n	8007772 <_fwalk_sglue+0x22>
 8007766:	6824      	ldr	r4, [r4, #0]
 8007768:	2c00      	cmp	r4, #0
 800776a:	d1f7      	bne.n	800775c <_fwalk_sglue+0xc>
 800776c:	4630      	mov	r0, r6
 800776e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007772:	89ab      	ldrh	r3, [r5, #12]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d907      	bls.n	8007788 <_fwalk_sglue+0x38>
 8007778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800777c:	3301      	adds	r3, #1
 800777e:	d003      	beq.n	8007788 <_fwalk_sglue+0x38>
 8007780:	4629      	mov	r1, r5
 8007782:	4638      	mov	r0, r7
 8007784:	47c0      	blx	r8
 8007786:	4306      	orrs	r6, r0
 8007788:	3568      	adds	r5, #104	@ 0x68
 800778a:	e7e9      	b.n	8007760 <_fwalk_sglue+0x10>

0800778c <_puts_r>:
 800778c:	6a03      	ldr	r3, [r0, #32]
 800778e:	b570      	push	{r4, r5, r6, lr}
 8007790:	6884      	ldr	r4, [r0, #8]
 8007792:	4605      	mov	r5, r0
 8007794:	460e      	mov	r6, r1
 8007796:	b90b      	cbnz	r3, 800779c <_puts_r+0x10>
 8007798:	f7ff ffc2 	bl	8007720 <__sinit>
 800779c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800779e:	07db      	lsls	r3, r3, #31
 80077a0:	d405      	bmi.n	80077ae <_puts_r+0x22>
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	0598      	lsls	r0, r3, #22
 80077a6:	d402      	bmi.n	80077ae <_puts_r+0x22>
 80077a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077aa:	f000 f99c 	bl	8007ae6 <__retarget_lock_acquire_recursive>
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	0719      	lsls	r1, r3, #28
 80077b2:	d502      	bpl.n	80077ba <_puts_r+0x2e>
 80077b4:	6923      	ldr	r3, [r4, #16]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d135      	bne.n	8007826 <_puts_r+0x9a>
 80077ba:	4621      	mov	r1, r4
 80077bc:	4628      	mov	r0, r5
 80077be:	f000 f8c5 	bl	800794c <__swsetup_r>
 80077c2:	b380      	cbz	r0, 8007826 <_puts_r+0x9a>
 80077c4:	f04f 35ff 	mov.w	r5, #4294967295
 80077c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077ca:	07da      	lsls	r2, r3, #31
 80077cc:	d405      	bmi.n	80077da <_puts_r+0x4e>
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	059b      	lsls	r3, r3, #22
 80077d2:	d402      	bmi.n	80077da <_puts_r+0x4e>
 80077d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077d6:	f000 f987 	bl	8007ae8 <__retarget_lock_release_recursive>
 80077da:	4628      	mov	r0, r5
 80077dc:	bd70      	pop	{r4, r5, r6, pc}
 80077de:	2b00      	cmp	r3, #0
 80077e0:	da04      	bge.n	80077ec <_puts_r+0x60>
 80077e2:	69a2      	ldr	r2, [r4, #24]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	dc17      	bgt.n	8007818 <_puts_r+0x8c>
 80077e8:	290a      	cmp	r1, #10
 80077ea:	d015      	beq.n	8007818 <_puts_r+0x8c>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	6022      	str	r2, [r4, #0]
 80077f2:	7019      	strb	r1, [r3, #0]
 80077f4:	68a3      	ldr	r3, [r4, #8]
 80077f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077fa:	3b01      	subs	r3, #1
 80077fc:	60a3      	str	r3, [r4, #8]
 80077fe:	2900      	cmp	r1, #0
 8007800:	d1ed      	bne.n	80077de <_puts_r+0x52>
 8007802:	2b00      	cmp	r3, #0
 8007804:	da11      	bge.n	800782a <_puts_r+0x9e>
 8007806:	4622      	mov	r2, r4
 8007808:	210a      	movs	r1, #10
 800780a:	4628      	mov	r0, r5
 800780c:	f000 f85f 	bl	80078ce <__swbuf_r>
 8007810:	3001      	adds	r0, #1
 8007812:	d0d7      	beq.n	80077c4 <_puts_r+0x38>
 8007814:	250a      	movs	r5, #10
 8007816:	e7d7      	b.n	80077c8 <_puts_r+0x3c>
 8007818:	4622      	mov	r2, r4
 800781a:	4628      	mov	r0, r5
 800781c:	f000 f857 	bl	80078ce <__swbuf_r>
 8007820:	3001      	adds	r0, #1
 8007822:	d1e7      	bne.n	80077f4 <_puts_r+0x68>
 8007824:	e7ce      	b.n	80077c4 <_puts_r+0x38>
 8007826:	3e01      	subs	r6, #1
 8007828:	e7e4      	b.n	80077f4 <_puts_r+0x68>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	6022      	str	r2, [r4, #0]
 8007830:	220a      	movs	r2, #10
 8007832:	701a      	strb	r2, [r3, #0]
 8007834:	e7ee      	b.n	8007814 <_puts_r+0x88>
	...

08007838 <puts>:
 8007838:	4b02      	ldr	r3, [pc, #8]	@ (8007844 <puts+0xc>)
 800783a:	4601      	mov	r1, r0
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	f7ff bfa5 	b.w	800778c <_puts_r>
 8007842:	bf00      	nop
 8007844:	20000020 	.word	0x20000020

08007848 <__sread>:
 8007848:	b510      	push	{r4, lr}
 800784a:	460c      	mov	r4, r1
 800784c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007850:	f000 f90c 	bl	8007a6c <_read_r>
 8007854:	2800      	cmp	r0, #0
 8007856:	bfab      	itete	ge
 8007858:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800785a:	89a3      	ldrhlt	r3, [r4, #12]
 800785c:	181b      	addge	r3, r3, r0
 800785e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007862:	bfac      	ite	ge
 8007864:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007866:	81a3      	strhlt	r3, [r4, #12]
 8007868:	bd10      	pop	{r4, pc}

0800786a <__swrite>:
 800786a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800786e:	461f      	mov	r7, r3
 8007870:	898b      	ldrh	r3, [r1, #12]
 8007872:	05db      	lsls	r3, r3, #23
 8007874:	4605      	mov	r5, r0
 8007876:	460c      	mov	r4, r1
 8007878:	4616      	mov	r6, r2
 800787a:	d505      	bpl.n	8007888 <__swrite+0x1e>
 800787c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007880:	2302      	movs	r3, #2
 8007882:	2200      	movs	r2, #0
 8007884:	f000 f8e0 	bl	8007a48 <_lseek_r>
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800788e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007892:	81a3      	strh	r3, [r4, #12]
 8007894:	4632      	mov	r2, r6
 8007896:	463b      	mov	r3, r7
 8007898:	4628      	mov	r0, r5
 800789a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800789e:	f7ff bea1 	b.w	80075e4 <_write_r>

080078a2 <__sseek>:
 80078a2:	b510      	push	{r4, lr}
 80078a4:	460c      	mov	r4, r1
 80078a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078aa:	f000 f8cd 	bl	8007a48 <_lseek_r>
 80078ae:	1c43      	adds	r3, r0, #1
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	bf15      	itete	ne
 80078b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078be:	81a3      	strheq	r3, [r4, #12]
 80078c0:	bf18      	it	ne
 80078c2:	81a3      	strhne	r3, [r4, #12]
 80078c4:	bd10      	pop	{r4, pc}

080078c6 <__sclose>:
 80078c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ca:	f000 b8ad 	b.w	8007a28 <_close_r>

080078ce <__swbuf_r>:
 80078ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d0:	460e      	mov	r6, r1
 80078d2:	4614      	mov	r4, r2
 80078d4:	4605      	mov	r5, r0
 80078d6:	b118      	cbz	r0, 80078e0 <__swbuf_r+0x12>
 80078d8:	6a03      	ldr	r3, [r0, #32]
 80078da:	b90b      	cbnz	r3, 80078e0 <__swbuf_r+0x12>
 80078dc:	f7ff ff20 	bl	8007720 <__sinit>
 80078e0:	69a3      	ldr	r3, [r4, #24]
 80078e2:	60a3      	str	r3, [r4, #8]
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	071a      	lsls	r2, r3, #28
 80078e8:	d501      	bpl.n	80078ee <__swbuf_r+0x20>
 80078ea:	6923      	ldr	r3, [r4, #16]
 80078ec:	b943      	cbnz	r3, 8007900 <__swbuf_r+0x32>
 80078ee:	4621      	mov	r1, r4
 80078f0:	4628      	mov	r0, r5
 80078f2:	f000 f82b 	bl	800794c <__swsetup_r>
 80078f6:	b118      	cbz	r0, 8007900 <__swbuf_r+0x32>
 80078f8:	f04f 37ff 	mov.w	r7, #4294967295
 80078fc:	4638      	mov	r0, r7
 80078fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	6922      	ldr	r2, [r4, #16]
 8007904:	1a98      	subs	r0, r3, r2
 8007906:	6963      	ldr	r3, [r4, #20]
 8007908:	b2f6      	uxtb	r6, r6
 800790a:	4283      	cmp	r3, r0
 800790c:	4637      	mov	r7, r6
 800790e:	dc05      	bgt.n	800791c <__swbuf_r+0x4e>
 8007910:	4621      	mov	r1, r4
 8007912:	4628      	mov	r0, r5
 8007914:	f000 fa74 	bl	8007e00 <_fflush_r>
 8007918:	2800      	cmp	r0, #0
 800791a:	d1ed      	bne.n	80078f8 <__swbuf_r+0x2a>
 800791c:	68a3      	ldr	r3, [r4, #8]
 800791e:	3b01      	subs	r3, #1
 8007920:	60a3      	str	r3, [r4, #8]
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	6022      	str	r2, [r4, #0]
 8007928:	701e      	strb	r6, [r3, #0]
 800792a:	6962      	ldr	r2, [r4, #20]
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	429a      	cmp	r2, r3
 8007930:	d004      	beq.n	800793c <__swbuf_r+0x6e>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	07db      	lsls	r3, r3, #31
 8007936:	d5e1      	bpl.n	80078fc <__swbuf_r+0x2e>
 8007938:	2e0a      	cmp	r6, #10
 800793a:	d1df      	bne.n	80078fc <__swbuf_r+0x2e>
 800793c:	4621      	mov	r1, r4
 800793e:	4628      	mov	r0, r5
 8007940:	f000 fa5e 	bl	8007e00 <_fflush_r>
 8007944:	2800      	cmp	r0, #0
 8007946:	d0d9      	beq.n	80078fc <__swbuf_r+0x2e>
 8007948:	e7d6      	b.n	80078f8 <__swbuf_r+0x2a>
	...

0800794c <__swsetup_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4b29      	ldr	r3, [pc, #164]	@ (80079f4 <__swsetup_r+0xa8>)
 8007950:	4605      	mov	r5, r0
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	460c      	mov	r4, r1
 8007956:	b118      	cbz	r0, 8007960 <__swsetup_r+0x14>
 8007958:	6a03      	ldr	r3, [r0, #32]
 800795a:	b90b      	cbnz	r3, 8007960 <__swsetup_r+0x14>
 800795c:	f7ff fee0 	bl	8007720 <__sinit>
 8007960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007964:	0719      	lsls	r1, r3, #28
 8007966:	d422      	bmi.n	80079ae <__swsetup_r+0x62>
 8007968:	06da      	lsls	r2, r3, #27
 800796a:	d407      	bmi.n	800797c <__swsetup_r+0x30>
 800796c:	2209      	movs	r2, #9
 800796e:	602a      	str	r2, [r5, #0]
 8007970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007974:	81a3      	strh	r3, [r4, #12]
 8007976:	f04f 30ff 	mov.w	r0, #4294967295
 800797a:	e033      	b.n	80079e4 <__swsetup_r+0x98>
 800797c:	0758      	lsls	r0, r3, #29
 800797e:	d512      	bpl.n	80079a6 <__swsetup_r+0x5a>
 8007980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007982:	b141      	cbz	r1, 8007996 <__swsetup_r+0x4a>
 8007984:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007988:	4299      	cmp	r1, r3
 800798a:	d002      	beq.n	8007992 <__swsetup_r+0x46>
 800798c:	4628      	mov	r0, r5
 800798e:	f000 f8bb 	bl	8007b08 <_free_r>
 8007992:	2300      	movs	r3, #0
 8007994:	6363      	str	r3, [r4, #52]	@ 0x34
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800799c:	81a3      	strh	r3, [r4, #12]
 800799e:	2300      	movs	r3, #0
 80079a0:	6063      	str	r3, [r4, #4]
 80079a2:	6923      	ldr	r3, [r4, #16]
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	89a3      	ldrh	r3, [r4, #12]
 80079a8:	f043 0308 	orr.w	r3, r3, #8
 80079ac:	81a3      	strh	r3, [r4, #12]
 80079ae:	6923      	ldr	r3, [r4, #16]
 80079b0:	b94b      	cbnz	r3, 80079c6 <__swsetup_r+0x7a>
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079bc:	d003      	beq.n	80079c6 <__swsetup_r+0x7a>
 80079be:	4621      	mov	r1, r4
 80079c0:	4628      	mov	r0, r5
 80079c2:	f000 fa6b 	bl	8007e9c <__smakebuf_r>
 80079c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ca:	f013 0201 	ands.w	r2, r3, #1
 80079ce:	d00a      	beq.n	80079e6 <__swsetup_r+0x9a>
 80079d0:	2200      	movs	r2, #0
 80079d2:	60a2      	str	r2, [r4, #8]
 80079d4:	6962      	ldr	r2, [r4, #20]
 80079d6:	4252      	negs	r2, r2
 80079d8:	61a2      	str	r2, [r4, #24]
 80079da:	6922      	ldr	r2, [r4, #16]
 80079dc:	b942      	cbnz	r2, 80079f0 <__swsetup_r+0xa4>
 80079de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80079e2:	d1c5      	bne.n	8007970 <__swsetup_r+0x24>
 80079e4:	bd38      	pop	{r3, r4, r5, pc}
 80079e6:	0799      	lsls	r1, r3, #30
 80079e8:	bf58      	it	pl
 80079ea:	6962      	ldrpl	r2, [r4, #20]
 80079ec:	60a2      	str	r2, [r4, #8]
 80079ee:	e7f4      	b.n	80079da <__swsetup_r+0x8e>
 80079f0:	2000      	movs	r0, #0
 80079f2:	e7f7      	b.n	80079e4 <__swsetup_r+0x98>
 80079f4:	20000020 	.word	0x20000020

080079f8 <memcmp>:
 80079f8:	b510      	push	{r4, lr}
 80079fa:	3901      	subs	r1, #1
 80079fc:	4402      	add	r2, r0
 80079fe:	4290      	cmp	r0, r2
 8007a00:	d101      	bne.n	8007a06 <memcmp+0xe>
 8007a02:	2000      	movs	r0, #0
 8007a04:	e005      	b.n	8007a12 <memcmp+0x1a>
 8007a06:	7803      	ldrb	r3, [r0, #0]
 8007a08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	d001      	beq.n	8007a14 <memcmp+0x1c>
 8007a10:	1b18      	subs	r0, r3, r4
 8007a12:	bd10      	pop	{r4, pc}
 8007a14:	3001      	adds	r0, #1
 8007a16:	e7f2      	b.n	80079fe <memcmp+0x6>

08007a18 <memset>:
 8007a18:	4402      	add	r2, r0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d100      	bne.n	8007a22 <memset+0xa>
 8007a20:	4770      	bx	lr
 8007a22:	f803 1b01 	strb.w	r1, [r3], #1
 8007a26:	e7f9      	b.n	8007a1c <memset+0x4>

08007a28 <_close_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d06      	ldr	r5, [pc, #24]	@ (8007a44 <_close_r+0x1c>)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	602b      	str	r3, [r5, #0]
 8007a34:	f7f9 fc55 	bl	80012e2 <_close>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_close_r+0x1a>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_close_r+0x1a>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	200136fc 	.word	0x200136fc

08007a48 <_lseek_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4d07      	ldr	r5, [pc, #28]	@ (8007a68 <_lseek_r+0x20>)
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	4608      	mov	r0, r1
 8007a50:	4611      	mov	r1, r2
 8007a52:	2200      	movs	r2, #0
 8007a54:	602a      	str	r2, [r5, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	f7f9 fc6a 	bl	8001330 <_lseek>
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	d102      	bne.n	8007a66 <_lseek_r+0x1e>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	b103      	cbz	r3, 8007a66 <_lseek_r+0x1e>
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	200136fc 	.word	0x200136fc

08007a6c <_read_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d07      	ldr	r5, [pc, #28]	@ (8007a8c <_read_r+0x20>)
 8007a70:	4604      	mov	r4, r0
 8007a72:	4608      	mov	r0, r1
 8007a74:	4611      	mov	r1, r2
 8007a76:	2200      	movs	r2, #0
 8007a78:	602a      	str	r2, [r5, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f7f9 fc14 	bl	80012a8 <_read>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_read_r+0x1e>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_read_r+0x1e>
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	200136fc 	.word	0x200136fc

08007a90 <__errno>:
 8007a90:	4b01      	ldr	r3, [pc, #4]	@ (8007a98 <__errno+0x8>)
 8007a92:	6818      	ldr	r0, [r3, #0]
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	20000020 	.word	0x20000020

08007a9c <__libc_init_array>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	4d0d      	ldr	r5, [pc, #52]	@ (8007ad4 <__libc_init_array+0x38>)
 8007aa0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ad8 <__libc_init_array+0x3c>)
 8007aa2:	1b64      	subs	r4, r4, r5
 8007aa4:	10a4      	asrs	r4, r4, #2
 8007aa6:	2600      	movs	r6, #0
 8007aa8:	42a6      	cmp	r6, r4
 8007aaa:	d109      	bne.n	8007ac0 <__libc_init_array+0x24>
 8007aac:	4d0b      	ldr	r5, [pc, #44]	@ (8007adc <__libc_init_array+0x40>)
 8007aae:	4c0c      	ldr	r4, [pc, #48]	@ (8007ae0 <__libc_init_array+0x44>)
 8007ab0:	f000 fa62 	bl	8007f78 <_init>
 8007ab4:	1b64      	subs	r4, r4, r5
 8007ab6:	10a4      	asrs	r4, r4, #2
 8007ab8:	2600      	movs	r6, #0
 8007aba:	42a6      	cmp	r6, r4
 8007abc:	d105      	bne.n	8007aca <__libc_init_array+0x2e>
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac4:	4798      	blx	r3
 8007ac6:	3601      	adds	r6, #1
 8007ac8:	e7ee      	b.n	8007aa8 <__libc_init_array+0xc>
 8007aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ace:	4798      	blx	r3
 8007ad0:	3601      	adds	r6, #1
 8007ad2:	e7f2      	b.n	8007aba <__libc_init_array+0x1e>
 8007ad4:	080080c0 	.word	0x080080c0
 8007ad8:	080080c0 	.word	0x080080c0
 8007adc:	080080c0 	.word	0x080080c0
 8007ae0:	080080c4 	.word	0x080080c4

08007ae4 <__retarget_lock_init_recursive>:
 8007ae4:	4770      	bx	lr

08007ae6 <__retarget_lock_acquire_recursive>:
 8007ae6:	4770      	bx	lr

08007ae8 <__retarget_lock_release_recursive>:
 8007ae8:	4770      	bx	lr

08007aea <memcpy>:
 8007aea:	440a      	add	r2, r1
 8007aec:	4291      	cmp	r1, r2
 8007aee:	f100 33ff 	add.w	r3, r0, #4294967295
 8007af2:	d100      	bne.n	8007af6 <memcpy+0xc>
 8007af4:	4770      	bx	lr
 8007af6:	b510      	push	{r4, lr}
 8007af8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007afc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b00:	4291      	cmp	r1, r2
 8007b02:	d1f9      	bne.n	8007af8 <memcpy+0xe>
 8007b04:	bd10      	pop	{r4, pc}
	...

08007b08 <_free_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	2900      	cmp	r1, #0
 8007b0e:	d041      	beq.n	8007b94 <_free_r+0x8c>
 8007b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b14:	1f0c      	subs	r4, r1, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	bfb8      	it	lt
 8007b1a:	18e4      	addlt	r4, r4, r3
 8007b1c:	f000 f8e0 	bl	8007ce0 <__malloc_lock>
 8007b20:	4a1d      	ldr	r2, [pc, #116]	@ (8007b98 <_free_r+0x90>)
 8007b22:	6813      	ldr	r3, [r2, #0]
 8007b24:	b933      	cbnz	r3, 8007b34 <_free_r+0x2c>
 8007b26:	6063      	str	r3, [r4, #4]
 8007b28:	6014      	str	r4, [r2, #0]
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b30:	f000 b8dc 	b.w	8007cec <__malloc_unlock>
 8007b34:	42a3      	cmp	r3, r4
 8007b36:	d908      	bls.n	8007b4a <_free_r+0x42>
 8007b38:	6820      	ldr	r0, [r4, #0]
 8007b3a:	1821      	adds	r1, r4, r0
 8007b3c:	428b      	cmp	r3, r1
 8007b3e:	bf01      	itttt	eq
 8007b40:	6819      	ldreq	r1, [r3, #0]
 8007b42:	685b      	ldreq	r3, [r3, #4]
 8007b44:	1809      	addeq	r1, r1, r0
 8007b46:	6021      	streq	r1, [r4, #0]
 8007b48:	e7ed      	b.n	8007b26 <_free_r+0x1e>
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	b10b      	cbz	r3, 8007b54 <_free_r+0x4c>
 8007b50:	42a3      	cmp	r3, r4
 8007b52:	d9fa      	bls.n	8007b4a <_free_r+0x42>
 8007b54:	6811      	ldr	r1, [r2, #0]
 8007b56:	1850      	adds	r0, r2, r1
 8007b58:	42a0      	cmp	r0, r4
 8007b5a:	d10b      	bne.n	8007b74 <_free_r+0x6c>
 8007b5c:	6820      	ldr	r0, [r4, #0]
 8007b5e:	4401      	add	r1, r0
 8007b60:	1850      	adds	r0, r2, r1
 8007b62:	4283      	cmp	r3, r0
 8007b64:	6011      	str	r1, [r2, #0]
 8007b66:	d1e0      	bne.n	8007b2a <_free_r+0x22>
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	6053      	str	r3, [r2, #4]
 8007b6e:	4408      	add	r0, r1
 8007b70:	6010      	str	r0, [r2, #0]
 8007b72:	e7da      	b.n	8007b2a <_free_r+0x22>
 8007b74:	d902      	bls.n	8007b7c <_free_r+0x74>
 8007b76:	230c      	movs	r3, #12
 8007b78:	602b      	str	r3, [r5, #0]
 8007b7a:	e7d6      	b.n	8007b2a <_free_r+0x22>
 8007b7c:	6820      	ldr	r0, [r4, #0]
 8007b7e:	1821      	adds	r1, r4, r0
 8007b80:	428b      	cmp	r3, r1
 8007b82:	bf04      	itt	eq
 8007b84:	6819      	ldreq	r1, [r3, #0]
 8007b86:	685b      	ldreq	r3, [r3, #4]
 8007b88:	6063      	str	r3, [r4, #4]
 8007b8a:	bf04      	itt	eq
 8007b8c:	1809      	addeq	r1, r1, r0
 8007b8e:	6021      	streq	r1, [r4, #0]
 8007b90:	6054      	str	r4, [r2, #4]
 8007b92:	e7ca      	b.n	8007b2a <_free_r+0x22>
 8007b94:	bd38      	pop	{r3, r4, r5, pc}
 8007b96:	bf00      	nop
 8007b98:	20013708 	.word	0x20013708

08007b9c <sbrk_aligned>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	4e0f      	ldr	r6, [pc, #60]	@ (8007bdc <sbrk_aligned+0x40>)
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	6831      	ldr	r1, [r6, #0]
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	b911      	cbnz	r1, 8007bae <sbrk_aligned+0x12>
 8007ba8:	f000 f9d6 	bl	8007f58 <_sbrk_r>
 8007bac:	6030      	str	r0, [r6, #0]
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f000 f9d1 	bl	8007f58 <_sbrk_r>
 8007bb6:	1c43      	adds	r3, r0, #1
 8007bb8:	d103      	bne.n	8007bc2 <sbrk_aligned+0x26>
 8007bba:	f04f 34ff 	mov.w	r4, #4294967295
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	bd70      	pop	{r4, r5, r6, pc}
 8007bc2:	1cc4      	adds	r4, r0, #3
 8007bc4:	f024 0403 	bic.w	r4, r4, #3
 8007bc8:	42a0      	cmp	r0, r4
 8007bca:	d0f8      	beq.n	8007bbe <sbrk_aligned+0x22>
 8007bcc:	1a21      	subs	r1, r4, r0
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 f9c2 	bl	8007f58 <_sbrk_r>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d1f2      	bne.n	8007bbe <sbrk_aligned+0x22>
 8007bd8:	e7ef      	b.n	8007bba <sbrk_aligned+0x1e>
 8007bda:	bf00      	nop
 8007bdc:	20013704 	.word	0x20013704

08007be0 <_malloc_r>:
 8007be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be4:	1ccd      	adds	r5, r1, #3
 8007be6:	f025 0503 	bic.w	r5, r5, #3
 8007bea:	3508      	adds	r5, #8
 8007bec:	2d0c      	cmp	r5, #12
 8007bee:	bf38      	it	cc
 8007bf0:	250c      	movcc	r5, #12
 8007bf2:	2d00      	cmp	r5, #0
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	db01      	blt.n	8007bfc <_malloc_r+0x1c>
 8007bf8:	42a9      	cmp	r1, r5
 8007bfa:	d904      	bls.n	8007c06 <_malloc_r+0x26>
 8007bfc:	230c      	movs	r3, #12
 8007bfe:	6033      	str	r3, [r6, #0]
 8007c00:	2000      	movs	r0, #0
 8007c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007cdc <_malloc_r+0xfc>
 8007c0a:	f000 f869 	bl	8007ce0 <__malloc_lock>
 8007c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c12:	461c      	mov	r4, r3
 8007c14:	bb44      	cbnz	r4, 8007c68 <_malloc_r+0x88>
 8007c16:	4629      	mov	r1, r5
 8007c18:	4630      	mov	r0, r6
 8007c1a:	f7ff ffbf 	bl	8007b9c <sbrk_aligned>
 8007c1e:	1c43      	adds	r3, r0, #1
 8007c20:	4604      	mov	r4, r0
 8007c22:	d158      	bne.n	8007cd6 <_malloc_r+0xf6>
 8007c24:	f8d8 4000 	ldr.w	r4, [r8]
 8007c28:	4627      	mov	r7, r4
 8007c2a:	2f00      	cmp	r7, #0
 8007c2c:	d143      	bne.n	8007cb6 <_malloc_r+0xd6>
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	d04b      	beq.n	8007cca <_malloc_r+0xea>
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	4639      	mov	r1, r7
 8007c36:	4630      	mov	r0, r6
 8007c38:	eb04 0903 	add.w	r9, r4, r3
 8007c3c:	f000 f98c 	bl	8007f58 <_sbrk_r>
 8007c40:	4581      	cmp	r9, r0
 8007c42:	d142      	bne.n	8007cca <_malloc_r+0xea>
 8007c44:	6821      	ldr	r1, [r4, #0]
 8007c46:	1a6d      	subs	r5, r5, r1
 8007c48:	4629      	mov	r1, r5
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7ff ffa6 	bl	8007b9c <sbrk_aligned>
 8007c50:	3001      	adds	r0, #1
 8007c52:	d03a      	beq.n	8007cca <_malloc_r+0xea>
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	442b      	add	r3, r5
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	bb62      	cbnz	r2, 8007cbc <_malloc_r+0xdc>
 8007c62:	f8c8 7000 	str.w	r7, [r8]
 8007c66:	e00f      	b.n	8007c88 <_malloc_r+0xa8>
 8007c68:	6822      	ldr	r2, [r4, #0]
 8007c6a:	1b52      	subs	r2, r2, r5
 8007c6c:	d420      	bmi.n	8007cb0 <_malloc_r+0xd0>
 8007c6e:	2a0b      	cmp	r2, #11
 8007c70:	d917      	bls.n	8007ca2 <_malloc_r+0xc2>
 8007c72:	1961      	adds	r1, r4, r5
 8007c74:	42a3      	cmp	r3, r4
 8007c76:	6025      	str	r5, [r4, #0]
 8007c78:	bf18      	it	ne
 8007c7a:	6059      	strne	r1, [r3, #4]
 8007c7c:	6863      	ldr	r3, [r4, #4]
 8007c7e:	bf08      	it	eq
 8007c80:	f8c8 1000 	streq.w	r1, [r8]
 8007c84:	5162      	str	r2, [r4, r5]
 8007c86:	604b      	str	r3, [r1, #4]
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f000 f82f 	bl	8007cec <__malloc_unlock>
 8007c8e:	f104 000b 	add.w	r0, r4, #11
 8007c92:	1d23      	adds	r3, r4, #4
 8007c94:	f020 0007 	bic.w	r0, r0, #7
 8007c98:	1ac2      	subs	r2, r0, r3
 8007c9a:	bf1c      	itt	ne
 8007c9c:	1a1b      	subne	r3, r3, r0
 8007c9e:	50a3      	strne	r3, [r4, r2]
 8007ca0:	e7af      	b.n	8007c02 <_malloc_r+0x22>
 8007ca2:	6862      	ldr	r2, [r4, #4]
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	bf0c      	ite	eq
 8007ca8:	f8c8 2000 	streq.w	r2, [r8]
 8007cac:	605a      	strne	r2, [r3, #4]
 8007cae:	e7eb      	b.n	8007c88 <_malloc_r+0xa8>
 8007cb0:	4623      	mov	r3, r4
 8007cb2:	6864      	ldr	r4, [r4, #4]
 8007cb4:	e7ae      	b.n	8007c14 <_malloc_r+0x34>
 8007cb6:	463c      	mov	r4, r7
 8007cb8:	687f      	ldr	r7, [r7, #4]
 8007cba:	e7b6      	b.n	8007c2a <_malloc_r+0x4a>
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	42a3      	cmp	r3, r4
 8007cc2:	d1fb      	bne.n	8007cbc <_malloc_r+0xdc>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	6053      	str	r3, [r2, #4]
 8007cc8:	e7de      	b.n	8007c88 <_malloc_r+0xa8>
 8007cca:	230c      	movs	r3, #12
 8007ccc:	6033      	str	r3, [r6, #0]
 8007cce:	4630      	mov	r0, r6
 8007cd0:	f000 f80c 	bl	8007cec <__malloc_unlock>
 8007cd4:	e794      	b.n	8007c00 <_malloc_r+0x20>
 8007cd6:	6005      	str	r5, [r0, #0]
 8007cd8:	e7d6      	b.n	8007c88 <_malloc_r+0xa8>
 8007cda:	bf00      	nop
 8007cdc:	20013708 	.word	0x20013708

08007ce0 <__malloc_lock>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	@ (8007ce8 <__malloc_lock+0x8>)
 8007ce2:	f7ff bf00 	b.w	8007ae6 <__retarget_lock_acquire_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	20013700 	.word	0x20013700

08007cec <__malloc_unlock>:
 8007cec:	4801      	ldr	r0, [pc, #4]	@ (8007cf4 <__malloc_unlock+0x8>)
 8007cee:	f7ff befb 	b.w	8007ae8 <__retarget_lock_release_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	20013700 	.word	0x20013700

08007cf8 <__sflush_r>:
 8007cf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d00:	0716      	lsls	r6, r2, #28
 8007d02:	4605      	mov	r5, r0
 8007d04:	460c      	mov	r4, r1
 8007d06:	d454      	bmi.n	8007db2 <__sflush_r+0xba>
 8007d08:	684b      	ldr	r3, [r1, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	dc02      	bgt.n	8007d14 <__sflush_r+0x1c>
 8007d0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	dd48      	ble.n	8007da6 <__sflush_r+0xae>
 8007d14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d16:	2e00      	cmp	r6, #0
 8007d18:	d045      	beq.n	8007da6 <__sflush_r+0xae>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d20:	682f      	ldr	r7, [r5, #0]
 8007d22:	6a21      	ldr	r1, [r4, #32]
 8007d24:	602b      	str	r3, [r5, #0]
 8007d26:	d030      	beq.n	8007d8a <__sflush_r+0x92>
 8007d28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	0759      	lsls	r1, r3, #29
 8007d2e:	d505      	bpl.n	8007d3c <__sflush_r+0x44>
 8007d30:	6863      	ldr	r3, [r4, #4]
 8007d32:	1ad2      	subs	r2, r2, r3
 8007d34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d36:	b10b      	cbz	r3, 8007d3c <__sflush_r+0x44>
 8007d38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d3a:	1ad2      	subs	r2, r2, r3
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d40:	6a21      	ldr	r1, [r4, #32]
 8007d42:	4628      	mov	r0, r5
 8007d44:	47b0      	blx	r6
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	d106      	bne.n	8007d5a <__sflush_r+0x62>
 8007d4c:	6829      	ldr	r1, [r5, #0]
 8007d4e:	291d      	cmp	r1, #29
 8007d50:	d82b      	bhi.n	8007daa <__sflush_r+0xb2>
 8007d52:	4a2a      	ldr	r2, [pc, #168]	@ (8007dfc <__sflush_r+0x104>)
 8007d54:	410a      	asrs	r2, r1
 8007d56:	07d6      	lsls	r6, r2, #31
 8007d58:	d427      	bmi.n	8007daa <__sflush_r+0xb2>
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	6062      	str	r2, [r4, #4]
 8007d5e:	04d9      	lsls	r1, r3, #19
 8007d60:	6922      	ldr	r2, [r4, #16]
 8007d62:	6022      	str	r2, [r4, #0]
 8007d64:	d504      	bpl.n	8007d70 <__sflush_r+0x78>
 8007d66:	1c42      	adds	r2, r0, #1
 8007d68:	d101      	bne.n	8007d6e <__sflush_r+0x76>
 8007d6a:	682b      	ldr	r3, [r5, #0]
 8007d6c:	b903      	cbnz	r3, 8007d70 <__sflush_r+0x78>
 8007d6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d72:	602f      	str	r7, [r5, #0]
 8007d74:	b1b9      	cbz	r1, 8007da6 <__sflush_r+0xae>
 8007d76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d7a:	4299      	cmp	r1, r3
 8007d7c:	d002      	beq.n	8007d84 <__sflush_r+0x8c>
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f7ff fec2 	bl	8007b08 <_free_r>
 8007d84:	2300      	movs	r3, #0
 8007d86:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d88:	e00d      	b.n	8007da6 <__sflush_r+0xae>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	47b0      	blx	r6
 8007d90:	4602      	mov	r2, r0
 8007d92:	1c50      	adds	r0, r2, #1
 8007d94:	d1c9      	bne.n	8007d2a <__sflush_r+0x32>
 8007d96:	682b      	ldr	r3, [r5, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d0c6      	beq.n	8007d2a <__sflush_r+0x32>
 8007d9c:	2b1d      	cmp	r3, #29
 8007d9e:	d001      	beq.n	8007da4 <__sflush_r+0xac>
 8007da0:	2b16      	cmp	r3, #22
 8007da2:	d11e      	bne.n	8007de2 <__sflush_r+0xea>
 8007da4:	602f      	str	r7, [r5, #0]
 8007da6:	2000      	movs	r0, #0
 8007da8:	e022      	b.n	8007df0 <__sflush_r+0xf8>
 8007daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dae:	b21b      	sxth	r3, r3
 8007db0:	e01b      	b.n	8007dea <__sflush_r+0xf2>
 8007db2:	690f      	ldr	r7, [r1, #16]
 8007db4:	2f00      	cmp	r7, #0
 8007db6:	d0f6      	beq.n	8007da6 <__sflush_r+0xae>
 8007db8:	0793      	lsls	r3, r2, #30
 8007dba:	680e      	ldr	r6, [r1, #0]
 8007dbc:	bf08      	it	eq
 8007dbe:	694b      	ldreq	r3, [r1, #20]
 8007dc0:	600f      	str	r7, [r1, #0]
 8007dc2:	bf18      	it	ne
 8007dc4:	2300      	movne	r3, #0
 8007dc6:	eba6 0807 	sub.w	r8, r6, r7
 8007dca:	608b      	str	r3, [r1, #8]
 8007dcc:	f1b8 0f00 	cmp.w	r8, #0
 8007dd0:	dde9      	ble.n	8007da6 <__sflush_r+0xae>
 8007dd2:	6a21      	ldr	r1, [r4, #32]
 8007dd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007dd6:	4643      	mov	r3, r8
 8007dd8:	463a      	mov	r2, r7
 8007dda:	4628      	mov	r0, r5
 8007ddc:	47b0      	blx	r6
 8007dde:	2800      	cmp	r0, #0
 8007de0:	dc08      	bgt.n	8007df4 <__sflush_r+0xfc>
 8007de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dea:	81a3      	strh	r3, [r4, #12]
 8007dec:	f04f 30ff 	mov.w	r0, #4294967295
 8007df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df4:	4407      	add	r7, r0
 8007df6:	eba8 0800 	sub.w	r8, r8, r0
 8007dfa:	e7e7      	b.n	8007dcc <__sflush_r+0xd4>
 8007dfc:	dfbffffe 	.word	0xdfbffffe

08007e00 <_fflush_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	690b      	ldr	r3, [r1, #16]
 8007e04:	4605      	mov	r5, r0
 8007e06:	460c      	mov	r4, r1
 8007e08:	b913      	cbnz	r3, 8007e10 <_fflush_r+0x10>
 8007e0a:	2500      	movs	r5, #0
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	b118      	cbz	r0, 8007e1a <_fflush_r+0x1a>
 8007e12:	6a03      	ldr	r3, [r0, #32]
 8007e14:	b90b      	cbnz	r3, 8007e1a <_fflush_r+0x1a>
 8007e16:	f7ff fc83 	bl	8007720 <__sinit>
 8007e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0f3      	beq.n	8007e0a <_fflush_r+0xa>
 8007e22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e24:	07d0      	lsls	r0, r2, #31
 8007e26:	d404      	bmi.n	8007e32 <_fflush_r+0x32>
 8007e28:	0599      	lsls	r1, r3, #22
 8007e2a:	d402      	bmi.n	8007e32 <_fflush_r+0x32>
 8007e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e2e:	f7ff fe5a 	bl	8007ae6 <__retarget_lock_acquire_recursive>
 8007e32:	4628      	mov	r0, r5
 8007e34:	4621      	mov	r1, r4
 8007e36:	f7ff ff5f 	bl	8007cf8 <__sflush_r>
 8007e3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e3c:	07da      	lsls	r2, r3, #31
 8007e3e:	4605      	mov	r5, r0
 8007e40:	d4e4      	bmi.n	8007e0c <_fflush_r+0xc>
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	059b      	lsls	r3, r3, #22
 8007e46:	d4e1      	bmi.n	8007e0c <_fflush_r+0xc>
 8007e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e4a:	f7ff fe4d 	bl	8007ae8 <__retarget_lock_release_recursive>
 8007e4e:	e7dd      	b.n	8007e0c <_fflush_r+0xc>

08007e50 <__swhatbuf_r>:
 8007e50:	b570      	push	{r4, r5, r6, lr}
 8007e52:	460c      	mov	r4, r1
 8007e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e58:	2900      	cmp	r1, #0
 8007e5a:	b096      	sub	sp, #88	@ 0x58
 8007e5c:	4615      	mov	r5, r2
 8007e5e:	461e      	mov	r6, r3
 8007e60:	da0d      	bge.n	8007e7e <__swhatbuf_r+0x2e>
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e68:	f04f 0100 	mov.w	r1, #0
 8007e6c:	bf14      	ite	ne
 8007e6e:	2340      	movne	r3, #64	@ 0x40
 8007e70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e74:	2000      	movs	r0, #0
 8007e76:	6031      	str	r1, [r6, #0]
 8007e78:	602b      	str	r3, [r5, #0]
 8007e7a:	b016      	add	sp, #88	@ 0x58
 8007e7c:	bd70      	pop	{r4, r5, r6, pc}
 8007e7e:	466a      	mov	r2, sp
 8007e80:	f000 f848 	bl	8007f14 <_fstat_r>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	dbec      	blt.n	8007e62 <__swhatbuf_r+0x12>
 8007e88:	9901      	ldr	r1, [sp, #4]
 8007e8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e92:	4259      	negs	r1, r3
 8007e94:	4159      	adcs	r1, r3
 8007e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e9a:	e7eb      	b.n	8007e74 <__swhatbuf_r+0x24>

08007e9c <__smakebuf_r>:
 8007e9c:	898b      	ldrh	r3, [r1, #12]
 8007e9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ea0:	079d      	lsls	r5, r3, #30
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	d507      	bpl.n	8007eb8 <__smakebuf_r+0x1c>
 8007ea8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	6123      	str	r3, [r4, #16]
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	6163      	str	r3, [r4, #20]
 8007eb4:	b003      	add	sp, #12
 8007eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb8:	ab01      	add	r3, sp, #4
 8007eba:	466a      	mov	r2, sp
 8007ebc:	f7ff ffc8 	bl	8007e50 <__swhatbuf_r>
 8007ec0:	9f00      	ldr	r7, [sp, #0]
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7ff fe8a 	bl	8007be0 <_malloc_r>
 8007ecc:	b948      	cbnz	r0, 8007ee2 <__smakebuf_r+0x46>
 8007ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ed2:	059a      	lsls	r2, r3, #22
 8007ed4:	d4ee      	bmi.n	8007eb4 <__smakebuf_r+0x18>
 8007ed6:	f023 0303 	bic.w	r3, r3, #3
 8007eda:	f043 0302 	orr.w	r3, r3, #2
 8007ede:	81a3      	strh	r3, [r4, #12]
 8007ee0:	e7e2      	b.n	8007ea8 <__smakebuf_r+0xc>
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	6020      	str	r0, [r4, #0]
 8007ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	9b01      	ldr	r3, [sp, #4]
 8007eee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ef2:	b15b      	cbz	r3, 8007f0c <__smakebuf_r+0x70>
 8007ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f000 f81d 	bl	8007f38 <_isatty_r>
 8007efe:	b128      	cbz	r0, 8007f0c <__smakebuf_r+0x70>
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	f023 0303 	bic.w	r3, r3, #3
 8007f06:	f043 0301 	orr.w	r3, r3, #1
 8007f0a:	81a3      	strh	r3, [r4, #12]
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	431d      	orrs	r5, r3
 8007f10:	81a5      	strh	r5, [r4, #12]
 8007f12:	e7cf      	b.n	8007eb4 <__smakebuf_r+0x18>

08007f14 <_fstat_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d07      	ldr	r5, [pc, #28]	@ (8007f34 <_fstat_r+0x20>)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	f7f9 f9ea 	bl	80012fa <_fstat>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	d102      	bne.n	8007f30 <_fstat_r+0x1c>
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	b103      	cbz	r3, 8007f30 <_fstat_r+0x1c>
 8007f2e:	6023      	str	r3, [r4, #0]
 8007f30:	bd38      	pop	{r3, r4, r5, pc}
 8007f32:	bf00      	nop
 8007f34:	200136fc 	.word	0x200136fc

08007f38 <_isatty_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d06      	ldr	r5, [pc, #24]	@ (8007f54 <_isatty_r+0x1c>)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	602b      	str	r3, [r5, #0]
 8007f44:	f7f9 f9e9 	bl	800131a <_isatty>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_isatty_r+0x1a>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_isatty_r+0x1a>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	200136fc 	.word	0x200136fc

08007f58 <_sbrk_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d06      	ldr	r5, [pc, #24]	@ (8007f74 <_sbrk_r+0x1c>)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4608      	mov	r0, r1
 8007f62:	602b      	str	r3, [r5, #0]
 8007f64:	f7f9 f9f2 	bl	800134c <_sbrk>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d102      	bne.n	8007f72 <_sbrk_r+0x1a>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	b103      	cbz	r3, 8007f72 <_sbrk_r+0x1a>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	200136fc 	.word	0x200136fc

08007f78 <_init>:
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	bf00      	nop
 8007f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7e:	bc08      	pop	{r3}
 8007f80:	469e      	mov	lr, r3
 8007f82:	4770      	bx	lr

08007f84 <_fini>:
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	bf00      	nop
 8007f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8a:	bc08      	pop	{r3}
 8007f8c:	469e      	mov	lr, r3
 8007f8e:	4770      	bx	lr
