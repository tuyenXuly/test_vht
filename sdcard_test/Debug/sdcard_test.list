
sdcard_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d31c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  0800d4bc  0800d4bc  0000e4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc30  0800dc30  0000f088  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc30  0800dc30  0000ec30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc38  0800dc38  0000f088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc38  0800dc38  0000ec38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dc3c  0800dc3c  0000ec3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800dc40  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016d68  20000088  0800dcc8  0000f088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20016df0  0800dcc8  0000fdf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024529  00000000  00000000  0000f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053f7  00000000  00000000  000335e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002200  00000000  00000000  000389d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a67  00000000  00000000  0003abd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea83  00000000  00000000  0003c63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ad21  00000000  00000000  0005b0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6ba2  00000000  00000000  00085de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c985  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009738  00000000  00000000  0013c9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00146100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d4a4 	.word	0x0800d4a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800d4a4 	.word	0x0800d4a4

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200166d4 	.word	0x200166d4
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <CLCD_Delay>:
******************************************************************************************************************/
#include "LCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fd65 	bl	80020ec <HAL_Delay>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b086      	sub	sp, #24
 800062e:	af02      	add	r7, sp, #8
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	460b      	mov	r3, r1
 8000634:	70fb      	strb	r3, [r7, #3]
 8000636:	4613      	mov	r3, r2
 8000638:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800063a:	78fb      	ldrb	r3, [r7, #3]
 800063c:	f023 030f 	bic.w	r3, r3, #15
 8000640:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000642:	78fb      	ldrb	r3, [r7, #3]
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7adb      	ldrb	r3, [r3, #11]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d007      	beq.n	8000660 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 8000658:	7bbb      	ldrb	r3, [r7, #14]
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8000660:	78bb      	ldrb	r3, [r7, #2]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d108      	bne.n	8000678 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	73bb      	strb	r3, [r7, #14]
 8000676:	e00a      	b.n	800068e <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8000678:	78bb      	ldrb	r3, [r7, #2]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d107      	bne.n	800068e <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	f023 0301 	bic.w	r3, r3, #1
 8000684:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8000686:	7bbb      	ldrb	r3, [r7, #14]
 8000688:	f023 0301 	bic.w	r3, r3, #1
 800068c:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	b2db      	uxtb	r3, r3
 8000696:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8000698:	2001      	movs	r0, #1
 800069a:	f7ff ffb9 	bl	8000610 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff ffaf 	bl	8000610 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6818      	ldr	r0, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	4619      	mov	r1, r3
 80006c0:	f107 0208 	add.w	r2, r7, #8
 80006c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2304      	movs	r3, #4
 80006cc:	f002 fbde 	bl	8002e8c <HAL_I2C_Master_Transmit>
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	4611      	mov	r1, r2
 80006e4:	461a      	mov	r2, r3
 80006e6:	460b      	mov	r3, r1
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	4613      	mov	r3, r2
 80006ec:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	79fa      	ldrb	r2, [r7, #7]
 80006f8:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	79ba      	ldrb	r2, [r7, #6]
 80006fe:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	7e3a      	ldrb	r2, [r7, #24]
 8000704:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2228      	movs	r2, #40	@ 0x28
 800070a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2206      	movs	r2, #6
 8000710:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	220c      	movs	r2, #12
 8000716:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2214      	movs	r2, #20
 800071c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2208      	movs	r2, #8
 8000722:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000724:	2032      	movs	r0, #50	@ 0x32
 8000726:	f7ff ff73 	bl	8000610 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800072a:	2200      	movs	r2, #0
 800072c:	2133      	movs	r1, #51	@ 0x33
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f7ff ff7b 	bl	800062a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000734:	2200      	movs	r2, #0
 8000736:	2133      	movs	r1, #51	@ 0x33
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	f7ff ff76 	bl	800062a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800073e:	2005      	movs	r0, #5
 8000740:	f7ff ff66 	bl	8000610 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000744:	2200      	movs	r2, #0
 8000746:	2132      	movs	r1, #50	@ 0x32
 8000748:	68f8      	ldr	r0, [r7, #12]
 800074a:	f7ff ff6e 	bl	800062a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800074e:	2005      	movs	r0, #5
 8000750:	f7ff ff5e 	bl	8000610 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000754:	2200      	movs	r2, #0
 8000756:	2120      	movs	r1, #32
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f7ff ff66 	bl	800062a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800075e:	2005      	movs	r0, #5
 8000760:	f7ff ff56 	bl	8000610 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	79db      	ldrb	r3, [r3, #7]
 8000768:	2200      	movs	r2, #0
 800076a:	4619      	mov	r1, r3
 800076c:	68f8      	ldr	r0, [r7, #12]
 800076e:	f7ff ff5c 	bl	800062a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	7a1b      	ldrb	r3, [r3, #8]
 8000776:	2200      	movs	r2, #0
 8000778:	4619      	mov	r1, r3
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f7ff ff55 	bl	800062a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	7a5b      	ldrb	r3, [r3, #9]
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	68f8      	ldr	r0, [r7, #12]
 800078a:	f7ff ff4e 	bl	800062a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	7a9b      	ldrb	r3, [r3, #10]
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f7ff ff47 	bl	800062a <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 800079c:	2200      	movs	r2, #0
 800079e:	2101      	movs	r1, #1
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f7ff ff42 	bl	800062a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2102      	movs	r1, #2
 80007aa:	68f8      	ldr	r0, [r7, #12]
 80007ac:	f7ff ff3d 	bl	800062a <CLCD_WriteI2C>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
 80007c4:	4613      	mov	r3, r2
 80007c6:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	795b      	ldrb	r3, [r3, #5]
 80007d0:	78fa      	ldrb	r2, [r7, #3]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d303      	bcc.n	80007de <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	795b      	ldrb	r3, [r3, #5]
 80007da:	3b01      	subs	r3, #1
 80007dc:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	799b      	ldrb	r3, [r3, #6]
 80007e2:	78ba      	ldrb	r2, [r7, #2]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d303      	bcc.n	80007f0 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	799b      	ldrb	r3, [r3, #6]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 80007f0:	78bb      	ldrb	r3, [r7, #2]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d102      	bne.n	80007fc <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 80007f6:	78fb      	ldrb	r3, [r7, #3]
 80007f8:	73fb      	strb	r3, [r7, #15]
 80007fa:	e013      	b.n	8000824 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 80007fc:	78bb      	ldrb	r3, [r7, #2]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d103      	bne.n	800080a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	3340      	adds	r3, #64	@ 0x40
 8000806:	73fb      	strb	r3, [r7, #15]
 8000808:	e00c      	b.n	8000824 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800080a:	78bb      	ldrb	r3, [r7, #2]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d103      	bne.n	8000818 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	3314      	adds	r3, #20
 8000814:	73fb      	strb	r3, [r7, #15]
 8000816:	e005      	b.n	8000824 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000818:	78bb      	ldrb	r3, [r7, #2]
 800081a:	2b03      	cmp	r3, #3
 800081c:	d102      	bne.n	8000824 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800081e:	78fb      	ldrb	r3, [r7, #3]
 8000820:	3354      	adds	r3, #84	@ 0x54
 8000822:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2200      	movs	r2, #0
 800082e:	4619      	mov	r1, r3
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff fefa 	bl	800062a <CLCD_WriteI2C>
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	460b      	mov	r3, r1
 8000848:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	2201      	movs	r2, #1
 800084e:	4619      	mov	r1, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff feea 	bl	800062a <CLCD_WriteI2C>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 8000868:	e007      	b.n	800087a <CLCD_I2C_WriteString+0x1c>
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	603a      	str	r2, [r7, #0]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4619      	mov	r1, r3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ffe2 	bl	800083e <CLCD_I2C_WriteChar>
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1f3      	bne.n	800086a <CLCD_I2C_WriteString+0xc>
}
 8000882:	bf00      	nop
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2140      	movs	r1, #64	@ 0x40
 8000894:	4803      	ldr	r0, [pc, #12]	@ (80008a4 <SELECT+0x18>)
 8000896:	f002 f99b 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800089a:	2001      	movs	r0, #1
 800089c:	f001 fc26 	bl	80020ec <HAL_Delay>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40020000 	.word	0x40020000

080008a8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2140      	movs	r1, #64	@ 0x40
 80008b0:	4803      	ldr	r0, [pc, #12]	@ (80008c0 <DESELECT+0x18>)
 80008b2:	f002 f98d 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f001 fc18 	bl	80020ec <HAL_Delay>
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40020000 	.word	0x40020000

080008c4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008ce:	bf00      	nop
 80008d0:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <SPI_TxByte+0x30>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d1f8      	bne.n	80008d0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80008de:	1df9      	adds	r1, r7, #7
 80008e0:	2364      	movs	r3, #100	@ 0x64
 80008e2:	2201      	movs	r2, #1
 80008e4:	4803      	ldr	r0, [pc, #12]	@ (80008f4 <SPI_TxByte+0x30>)
 80008e6:	f003 fb7e 	bl	8003fe6 <HAL_SPI_Transmit>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000fc 	.word	0x200000fc

080008f8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000904:	bf00      	nop
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <SPI_TxBuffer+0x30>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f003 0302 	and.w	r3, r3, #2
 8000910:	2b02      	cmp	r3, #2
 8000912:	d1f8      	bne.n	8000906 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000914:	887a      	ldrh	r2, [r7, #2]
 8000916:	2364      	movs	r3, #100	@ 0x64
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	4803      	ldr	r0, [pc, #12]	@ (8000928 <SPI_TxBuffer+0x30>)
 800091c:	f003 fb63 	bl	8003fe6 <HAL_SPI_Transmit>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200000fc 	.word	0x200000fc

0800092c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000932:	23ff      	movs	r3, #255	@ 0xff
 8000934:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000936:	bf00      	nop
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <SPI_RxByte+0x34>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	2b02      	cmp	r3, #2
 8000944:	d1f8      	bne.n	8000938 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000946:	1dba      	adds	r2, r7, #6
 8000948:	1df9      	adds	r1, r7, #7
 800094a:	2364      	movs	r3, #100	@ 0x64
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2301      	movs	r3, #1
 8000950:	4803      	ldr	r0, [pc, #12]	@ (8000960 <SPI_RxByte+0x34>)
 8000952:	f003 fc8c 	bl	800426e <HAL_SPI_TransmitReceive>

	return data;
 8000956:	79bb      	ldrb	r3, [r7, #6]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200000fc 	.word	0x200000fc

08000964 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800096c:	f7ff ffde 	bl	800092c <SPI_RxByte>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	701a      	strb	r2, [r3, #0]
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <SD_ReadyWait+0x30>)
 8000988:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800098c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800098e:	f7ff ffcd 	bl	800092c <SPI_RxByte>
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2bff      	cmp	r3, #255	@ 0xff
 800099a:	d004      	beq.n	80009a6 <SD_ReadyWait+0x26>
 800099c:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <SD_ReadyWait+0x30>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1f3      	bne.n	800098e <SD_ReadyWait+0xe>

	return res;
 80009a6:	79fb      	ldrb	r3, [r7, #7]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000019e 	.word	0x2000019e

080009b4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80009ba:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80009be:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80009c0:	f7ff ff72 	bl	80008a8 <DESELECT>
	for(int i = 0; i < 10; i++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	e005      	b.n	80009d6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80009ca:	20ff      	movs	r0, #255	@ 0xff
 80009cc:	f7ff ff7a 	bl	80008c4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	2b09      	cmp	r3, #9
 80009da:	ddf6      	ble.n	80009ca <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80009dc:	f7ff ff56 	bl	800088c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80009e0:	2340      	movs	r3, #64	@ 0x40
 80009e2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80009f4:	2395      	movs	r3, #149	@ 0x95
 80009f6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80009f8:	463b      	mov	r3, r7
 80009fa:	2106      	movs	r1, #6
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff7b 	bl	80008f8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a02:	e002      	b.n	8000a0a <SD_PowerOn+0x56>
	{
		cnt--;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a0a:	f7ff ff8f 	bl	800092c <SPI_RxByte>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d002      	beq.n	8000a1a <SD_PowerOn+0x66>
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1f4      	bne.n	8000a04 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000a1a:	f7ff ff45 	bl	80008a8 <DESELECT>
	SPI_TxByte(0XFF);
 8000a1e:	20ff      	movs	r0, #255	@ 0xff
 8000a20:	f7ff ff50 	bl	80008c4 <SPI_TxByte>

	PowerFlag = 1;
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <SD_PowerOn+0x80>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000a5 	.word	0x200000a5

08000a38 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <SD_PowerOff+0x14>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	200000a5 	.word	0x200000a5

08000a50 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000a54:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <SD_CheckPower+0x14>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	200000a5 	.word	0x200000a5

08000a68 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000a72:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <SD_RxDataBlock+0x5c>)
 8000a74:	22c8      	movs	r2, #200	@ 0xc8
 8000a76:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000a78:	f7ff ff58 	bl	800092c <SPI_RxByte>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	2bff      	cmp	r3, #255	@ 0xff
 8000a84:	d104      	bne.n	8000a90 <SD_RxDataBlock+0x28>
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <SD_RxDataBlock+0x5c>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1f3      	bne.n	8000a78 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a94:	d001      	beq.n	8000a9a <SD_RxDataBlock+0x32>
 8000a96:	2300      	movs	r3, #0
 8000a98:	e00f      	b.n	8000aba <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff5f 	bl	8000964 <SPI_RxBytePtr>
	} while(len--);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	1e5a      	subs	r2, r3, #1
 8000aaa:	603a      	str	r2, [r7, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f4      	bne.n	8000a9a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000ab0:	f7ff ff3c 	bl	800092c <SPI_RxByte>
	SPI_RxByte();
 8000ab4:	f7ff ff3a 	bl	800092c <SPI_RxByte>

	return TRUE;
 8000ab8:	2301      	movs	r3, #1
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000019d 	.word	0x2000019d

08000ac8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000ad8:	f7ff ff52 	bl	8000980 <SD_ReadyWait>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2bff      	cmp	r3, #255	@ 0xff
 8000ae0:	d001      	beq.n	8000ae6 <SD_TxDataBlock+0x1e>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e02f      	b.n	8000b46 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff feeb 	bl	80008c4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000aee:	78fb      	ldrb	r3, [r7, #3]
 8000af0:	2bfd      	cmp	r3, #253	@ 0xfd
 8000af2:	d020      	beq.n	8000b36 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000af4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff fefd 	bl	80008f8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000afe:	f7ff ff15 	bl	800092c <SPI_RxByte>
		SPI_RxByte();
 8000b02:	f7ff ff13 	bl	800092c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000b06:	e00b      	b.n	8000b20 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000b08:	f7ff ff10 	bl	800092c <SPI_RxByte>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	f003 031f 	and.w	r3, r3, #31
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	d006      	beq.n	8000b28 <SD_TxDataBlock+0x60>
			i++;
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	2b40      	cmp	r3, #64	@ 0x40
 8000b24:	d9f0      	bls.n	8000b08 <SD_TxDataBlock+0x40>
 8000b26:	e000      	b.n	8000b2a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000b28:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000b2a:	bf00      	nop
 8000b2c:	f7ff fefe 	bl	800092c <SPI_RxByte>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0fa      	beq.n	8000b2c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	f003 031f 	and.w	r3, r3, #31
 8000b3c:	2b05      	cmp	r3, #5
 8000b3e:	d101      	bne.n	8000b44 <SD_TxDataBlock+0x7c>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	6039      	str	r1, [r7, #0]
 8000b58:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000b5a:	f7ff ff11 	bl	8000980 <SD_ReadyWait>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2bff      	cmp	r3, #255	@ 0xff
 8000b62:	d001      	beq.n	8000b68 <SD_SendCmd+0x1a>
 8000b64:	23ff      	movs	r3, #255	@ 0xff
 8000b66:	e042      	b.n	8000bee <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff feaa 	bl	80008c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	0e1b      	lsrs	r3, r3, #24
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fea4 	bl	80008c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	0c1b      	lsrs	r3, r3, #16
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe9e 	bl	80008c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fe98 	bl	80008c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fe93 	bl	80008c4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b40      	cmp	r3, #64	@ 0x40
 8000ba2:	d102      	bne.n	8000baa <SD_SendCmd+0x5c>
 8000ba4:	2395      	movs	r3, #149	@ 0x95
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e007      	b.n	8000bba <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b48      	cmp	r3, #72	@ 0x48
 8000bae:	d102      	bne.n	8000bb6 <SD_SendCmd+0x68>
 8000bb0:	2387      	movs	r3, #135	@ 0x87
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e001      	b.n	8000bba <SD_SendCmd+0x6c>
	else crc = 1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fe81 	bl	80008c4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b4c      	cmp	r3, #76	@ 0x4c
 8000bc6:	d101      	bne.n	8000bcc <SD_SendCmd+0x7e>
 8000bc8:	f7ff feb0 	bl	800092c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000bcc:	230a      	movs	r3, #10
 8000bce:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000bd0:	f7ff feac 	bl	800092c <SPI_RxByte>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000bd8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	da05      	bge.n	8000bec <SD_SendCmd+0x9e>
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	73bb      	strb	r3, [r7, #14]
 8000be6:	7bbb      	ldrb	r3, [r7, #14]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1f1      	bne.n	8000bd0 <SD_SendCmd+0x82>

	return res;
 8000bec:	7b7b      	ldrb	r3, [r7, #13]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SD_disk_initialize+0x14>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e0d6      	b.n	8000dba <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000c0c:	4b6d      	ldr	r3, [pc, #436]	@ (8000dc4 <SD_disk_initialize+0x1cc>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <SD_disk_initialize+0x2a>
 8000c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8000dc4 <SD_disk_initialize+0x1cc>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	e0cb      	b.n	8000dba <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000c22:	f7ff fec7 	bl	80009b4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000c26:	f7ff fe31 	bl	800088c <SELECT>

	/* check disk type */
	type = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2040      	movs	r0, #64	@ 0x40
 8000c32:	f7ff ff8c 	bl	8000b4e <SD_SendCmd>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	f040 80a6 	bne.w	8000d8a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000c3e:	4b62      	ldr	r3, [pc, #392]	@ (8000dc8 <SD_disk_initialize+0x1d0>)
 8000c40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c44:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000c46:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000c4a:	2048      	movs	r0, #72	@ 0x48
 8000c4c:	f7ff ff7f 	bl	8000b4e <SD_SendCmd>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d158      	bne.n	8000d08 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e00c      	b.n	8000c76 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000c5c:	7bfc      	ldrb	r4, [r7, #15]
 8000c5e:	f7ff fe65 	bl	800092c <SPI_RxByte>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	f104 0310 	add.w	r3, r4, #16
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	3301      	adds	r3, #1
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d9ef      	bls.n	8000c5c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000c7c:	7abb      	ldrb	r3, [r7, #10]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	f040 8083 	bne.w	8000d8a <SD_disk_initialize+0x192>
 8000c84:	7afb      	ldrb	r3, [r7, #11]
 8000c86:	2baa      	cmp	r3, #170	@ 0xaa
 8000c88:	d17f      	bne.n	8000d8a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2077      	movs	r0, #119	@ 0x77
 8000c8e:	f7ff ff5e 	bl	8000b4e <SD_SendCmd>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d807      	bhi.n	8000ca8 <SD_disk_initialize+0xb0>
 8000c98:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000c9c:	2069      	movs	r0, #105	@ 0x69
 8000c9e:	f7ff ff56 	bl	8000b4e <SD_SendCmd>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d005      	beq.n	8000cb4 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000ca8:	4b47      	ldr	r3, [pc, #284]	@ (8000dc8 <SD_disk_initialize+0x1d0>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1eb      	bne.n	8000c8a <SD_disk_initialize+0x92>
 8000cb2:	e000      	b.n	8000cb6 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000cb4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000cb6:	4b44      	ldr	r3, [pc, #272]	@ (8000dc8 <SD_disk_initialize+0x1d0>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d064      	beq.n	8000d8a <SD_disk_initialize+0x192>
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	207a      	movs	r0, #122	@ 0x7a
 8000cc4:	f7ff ff43 	bl	8000b4e <SD_SendCmd>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d15d      	bne.n	8000d8a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e00c      	b.n	8000cee <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000cd4:	7bfc      	ldrb	r4, [r7, #15]
 8000cd6:	f7ff fe29 	bl	800092c <SPI_RxByte>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f104 0310 	add.w	r3, r4, #16
 8000ce2:	443b      	add	r3, r7
 8000ce4:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	3301      	adds	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d9ef      	bls.n	8000cd4 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000cf4:	7a3b      	ldrb	r3, [r7, #8]
 8000cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SD_disk_initialize+0x10a>
 8000cfe:	230c      	movs	r3, #12
 8000d00:	e000      	b.n	8000d04 <SD_disk_initialize+0x10c>
 8000d02:	2304      	movs	r3, #4
 8000d04:	73bb      	strb	r3, [r7, #14]
 8000d06:	e040      	b.n	8000d8a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2077      	movs	r0, #119	@ 0x77
 8000d0c:	f7ff ff1f 	bl	8000b4e <SD_SendCmd>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d808      	bhi.n	8000d28 <SD_disk_initialize+0x130>
 8000d16:	2100      	movs	r1, #0
 8000d18:	2069      	movs	r0, #105	@ 0x69
 8000d1a:	f7ff ff18 	bl	8000b4e <SD_SendCmd>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d801      	bhi.n	8000d28 <SD_disk_initialize+0x130>
 8000d24:	2302      	movs	r3, #2
 8000d26:	e000      	b.n	8000d2a <SD_disk_initialize+0x132>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d10e      	bne.n	8000d50 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000d32:	2100      	movs	r1, #0
 8000d34:	2077      	movs	r0, #119	@ 0x77
 8000d36:	f7ff ff0a 	bl	8000b4e <SD_SendCmd>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d80e      	bhi.n	8000d5e <SD_disk_initialize+0x166>
 8000d40:	2100      	movs	r1, #0
 8000d42:	2069      	movs	r0, #105	@ 0x69
 8000d44:	f7ff ff03 	bl	8000b4e <SD_SendCmd>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d107      	bne.n	8000d5e <SD_disk_initialize+0x166>
 8000d4e:	e00d      	b.n	8000d6c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d50:	2100      	movs	r1, #0
 8000d52:	2041      	movs	r0, #65	@ 0x41
 8000d54:	f7ff fefb 	bl	8000b4e <SD_SendCmd>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d005      	beq.n	8000d6a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <SD_disk_initialize+0x1d0>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1e1      	bne.n	8000d2c <SD_disk_initialize+0x134>
 8000d68:	e000      	b.n	8000d6c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d6a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <SD_disk_initialize+0x1d0>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d007      	beq.n	8000d86 <SD_disk_initialize+0x18e>
 8000d76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d7a:	2050      	movs	r0, #80	@ 0x50
 8000d7c:	f7ff fee7 	bl	8000b4e <SD_SendCmd>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SD_disk_initialize+0x192>
 8000d86:	2300      	movs	r3, #0
 8000d88:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000d8a:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <SD_disk_initialize+0x1d4>)
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000d90:	f7ff fd8a 	bl	80008a8 <DESELECT>
	SPI_RxByte();
 8000d94:	f7ff fdca 	bl	800092c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000d98:	7bbb      	ldrb	r3, [r7, #14]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d008      	beq.n	8000db0 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <SD_disk_initialize+0x1cc>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	f023 0301 	bic.w	r3, r3, #1
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <SD_disk_initialize+0x1cc>)
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e001      	b.n	8000db4 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000db0:	f7ff fe42 	bl	8000a38 <SD_PowerOff>
	}

	return Stat;
 8000db4:	4b03      	ldr	r3, [pc, #12]	@ (8000dc4 <SD_disk_initialize+0x1cc>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd90      	pop	{r4, r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	2000019d 	.word	0x2000019d
 8000dcc:	200000a4 	.word	0x200000a4

08000dd0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SD_disk_status+0x14>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e002      	b.n	8000dea <SD_disk_status+0x1a>
	return Stat;
 8000de4:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <SD_disk_status+0x28>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000000 	.word	0x20000000

08000dfc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d102      	bne.n	8000e18 <SD_disk_read+0x1c>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <SD_disk_read+0x20>
 8000e18:	2304      	movs	r3, #4
 8000e1a:	e051      	b.n	8000ec0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec8 <SD_disk_read+0xcc>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SD_disk_read+0x32>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e048      	b.n	8000ec0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000e2e:	4b27      	ldr	r3, [pc, #156]	@ (8000ecc <SD_disk_read+0xd0>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <SD_disk_read+0x44>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	025b      	lsls	r3, r3, #9
 8000e3e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000e40:	f7ff fd24 	bl	800088c <SELECT>

	if (count == 1)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d111      	bne.n	8000e6e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	2051      	movs	r0, #81	@ 0x51
 8000e4e:	f7ff fe7e 	bl	8000b4e <SD_SendCmd>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d129      	bne.n	8000eac <SD_disk_read+0xb0>
 8000e58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e5c:	68b8      	ldr	r0, [r7, #8]
 8000e5e:	f7ff fe03 	bl	8000a68 <SD_RxDataBlock>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d021      	beq.n	8000eac <SD_disk_read+0xb0>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	e01e      	b.n	8000eac <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	2052      	movs	r0, #82	@ 0x52
 8000e72:	f7ff fe6c 	bl	8000b4e <SD_SendCmd>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d117      	bne.n	8000eac <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000e7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e80:	68b8      	ldr	r0, [r7, #8]
 8000e82:	f7ff fdf1 	bl	8000a68 <SD_RxDataBlock>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00a      	beq.n	8000ea2 <SD_disk_read+0xa6>
				buff += 512;
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000e92:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1ed      	bne.n	8000e7c <SD_disk_read+0x80>
 8000ea0:	e000      	b.n	8000ea4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ea2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	204c      	movs	r0, #76	@ 0x4c
 8000ea8:	f7ff fe51 	bl	8000b4e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000eac:	f7ff fcfc 	bl	80008a8 <DESELECT>
	SPI_RxByte();
 8000eb0:	f7ff fd3c 	bl	800092c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf14      	ite	ne
 8000eba:	2301      	movne	r3, #1
 8000ebc:	2300      	moveq	r3, #0
 8000ebe:	b2db      	uxtb	r3, r3
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	200000a4 	.word	0x200000a4

08000ed0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	4603      	mov	r3, r0
 8000ede:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <SD_disk_write+0x1c>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <SD_disk_write+0x20>
 8000eec:	2304      	movs	r3, #4
 8000eee:	e06b      	b.n	8000fc8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ef0:	4b37      	ldr	r3, [pc, #220]	@ (8000fd0 <SD_disk_write+0x100>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SD_disk_write+0x32>
 8000efe:	2303      	movs	r3, #3
 8000f00:	e062      	b.n	8000fc8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f02:	4b33      	ldr	r3, [pc, #204]	@ (8000fd0 <SD_disk_write+0x100>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SD_disk_write+0x44>
 8000f10:	2302      	movs	r3, #2
 8000f12:	e059      	b.n	8000fc8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f14:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <SD_disk_write+0x104>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <SD_disk_write+0x56>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	025b      	lsls	r3, r3, #9
 8000f24:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f26:	f7ff fcb1 	bl	800088c <SELECT>

	if (count == 1)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d110      	bne.n	8000f52 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	2058      	movs	r0, #88	@ 0x58
 8000f34:	f7ff fe0b 	bl	8000b4e <SD_SendCmd>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d13a      	bne.n	8000fb4 <SD_disk_write+0xe4>
 8000f3e:	21fe      	movs	r1, #254	@ 0xfe
 8000f40:	68b8      	ldr	r0, [r7, #8]
 8000f42:	f7ff fdc1 	bl	8000ac8 <SD_TxDataBlock>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d033      	beq.n	8000fb4 <SD_disk_write+0xe4>
			count = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	e030      	b.n	8000fb4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <SD_disk_write+0x104>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d007      	beq.n	8000f6e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2077      	movs	r0, #119	@ 0x77
 8000f62:	f7ff fdf4 	bl	8000b4e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000f66:	6839      	ldr	r1, [r7, #0]
 8000f68:	2057      	movs	r0, #87	@ 0x57
 8000f6a:	f7ff fdf0 	bl	8000b4e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	2059      	movs	r0, #89	@ 0x59
 8000f72:	f7ff fdec 	bl	8000b4e <SD_SendCmd>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d11b      	bne.n	8000fb4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000f7c:	21fc      	movs	r1, #252	@ 0xfc
 8000f7e:	68b8      	ldr	r0, [r7, #8]
 8000f80:	f7ff fda2 	bl	8000ac8 <SD_TxDataBlock>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00a      	beq.n	8000fa0 <SD_disk_write+0xd0>
				buff += 512;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f90:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1ee      	bne.n	8000f7c <SD_disk_write+0xac>
 8000f9e:	e000      	b.n	8000fa2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fa0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000fa2:	21fd      	movs	r1, #253	@ 0xfd
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fd8f 	bl	8000ac8 <SD_TxDataBlock>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <SD_disk_write+0xe4>
			{
				count = 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000fb4:	f7ff fc78 	bl	80008a8 <DESELECT>
	SPI_RxByte();
 8000fb8:	f7ff fcb8 	bl	800092c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bf14      	ite	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	2300      	moveq	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	200000a4 	.word	0x200000a4

08000fd8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b08b      	sub	sp, #44	@ 0x2c
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	603a      	str	r2, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SD_disk_ioctl+0x1e>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e113      	b.n	800121e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d124      	bne.n	800104c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d012      	beq.n	8001030 <SD_disk_ioctl+0x58>
 800100a:	2b02      	cmp	r3, #2
 800100c:	dc1a      	bgt.n	8001044 <SD_disk_ioctl+0x6c>
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <SD_disk_ioctl+0x40>
 8001012:	2b01      	cmp	r3, #1
 8001014:	d006      	beq.n	8001024 <SD_disk_ioctl+0x4c>
 8001016:	e015      	b.n	8001044 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001018:	f7ff fd0e 	bl	8000a38 <SD_PowerOff>
			res = RES_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001022:	e0fa      	b.n	800121a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001024:	f7ff fcc6 	bl	80009b4 <SD_PowerOn>
			res = RES_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800102e:	e0f4      	b.n	800121a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	1c5c      	adds	r4, r3, #1
 8001034:	f7ff fd0c 	bl	8000a50 <SD_CheckPower>
 8001038:	4603      	mov	r3, r0
 800103a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800103c:	2300      	movs	r3, #0
 800103e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001042:	e0ea      	b.n	800121a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001044:	2304      	movs	r3, #4
 8001046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800104a:	e0e6      	b.n	800121a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800104c:	4b76      	ldr	r3, [pc, #472]	@ (8001228 <SD_disk_ioctl+0x250>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SD_disk_ioctl+0x86>
 800105a:	2303      	movs	r3, #3
 800105c:	e0df      	b.n	800121e <SD_disk_ioctl+0x246>

		SELECT();
 800105e:	f7ff fc15 	bl	800088c <SELECT>

		switch (ctrl)
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	2b0d      	cmp	r3, #13
 8001066:	f200 80c9 	bhi.w	80011fc <SD_disk_ioctl+0x224>
 800106a:	a201      	add	r2, pc, #4	@ (adr r2, 8001070 <SD_disk_ioctl+0x98>)
 800106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001070:	08001167 	.word	0x08001167
 8001074:	080010a9 	.word	0x080010a9
 8001078:	08001157 	.word	0x08001157
 800107c:	080011fd 	.word	0x080011fd
 8001080:	080011fd 	.word	0x080011fd
 8001084:	080011fd 	.word	0x080011fd
 8001088:	080011fd 	.word	0x080011fd
 800108c:	080011fd 	.word	0x080011fd
 8001090:	080011fd 	.word	0x080011fd
 8001094:	080011fd 	.word	0x080011fd
 8001098:	080011fd 	.word	0x080011fd
 800109c:	08001179 	.word	0x08001179
 80010a0:	0800119d 	.word	0x0800119d
 80010a4:	080011c1 	.word	0x080011c1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80010a8:	2100      	movs	r1, #0
 80010aa:	2049      	movs	r0, #73	@ 0x49
 80010ac:	f7ff fd4f 	bl	8000b4e <SD_SendCmd>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f040 80a6 	bne.w	8001204 <SD_disk_ioctl+0x22c>
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2110      	movs	r1, #16
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fcd2 	bl	8000a68 <SD_RxDataBlock>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 809c 	beq.w	8001204 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80010cc:	7b3b      	ldrb	r3, [r7, #12]
 80010ce:	099b      	lsrs	r3, r3, #6
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d10d      	bne.n	80010f2 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80010d6:	7d7b      	ldrb	r3, [r7, #21]
 80010d8:	461a      	mov	r2, r3
 80010da:	7d3b      	ldrb	r3, [r7, #20]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80010e8:	8bfb      	ldrh	r3, [r7, #30]
 80010ea:	029a      	lsls	r2, r3, #10
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e02d      	b.n	800114e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80010f2:	7c7b      	ldrb	r3, [r7, #17]
 80010f4:	f003 030f 	and.w	r3, r3, #15
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	7dbb      	ldrb	r3, [r7, #22]
 80010fc:	09db      	lsrs	r3, r3, #7
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4413      	add	r3, r2
 8001102:	b2da      	uxtb	r2, r3
 8001104:	7d7b      	ldrb	r3, [r7, #21]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	f003 0306 	and.w	r3, r3, #6
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4413      	add	r3, r2
 8001112:	b2db      	uxtb	r3, r3
 8001114:	3302      	adds	r3, #2
 8001116:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800111a:	7d3b      	ldrb	r3, [r7, #20]
 800111c:	099b      	lsrs	r3, r3, #6
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	7cfb      	ldrb	r3, [r7, #19]
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	b29b      	uxth	r3, r3
 8001128:	4413      	add	r3, r2
 800112a:	b29a      	uxth	r2, r3
 800112c:	7cbb      	ldrb	r3, [r7, #18]
 800112e:	029b      	lsls	r3, r3, #10
 8001130:	b29b      	uxth	r3, r3
 8001132:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001136:	b29b      	uxth	r3, r3
 8001138:	4413      	add	r3, r2
 800113a:	b29b      	uxth	r3, r3
 800113c:	3301      	adds	r3, #1
 800113e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001140:	8bfa      	ldrh	r2, [r7, #30]
 8001142:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001146:	3b09      	subs	r3, #9
 8001148:	409a      	lsls	r2, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001154:	e056      	b.n	8001204 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800115c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001164:	e055      	b.n	8001212 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001166:	f7ff fc0b 	bl	8000980 <SD_ReadyWait>
 800116a:	4603      	mov	r3, r0
 800116c:	2bff      	cmp	r3, #255	@ 0xff
 800116e:	d14b      	bne.n	8001208 <SD_disk_ioctl+0x230>
 8001170:	2300      	movs	r3, #0
 8001172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001176:	e047      	b.n	8001208 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001178:	2100      	movs	r1, #0
 800117a:	2049      	movs	r0, #73	@ 0x49
 800117c:	f7ff fce7 	bl	8000b4e <SD_SendCmd>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d142      	bne.n	800120c <SD_disk_ioctl+0x234>
 8001186:	2110      	movs	r1, #16
 8001188:	6a38      	ldr	r0, [r7, #32]
 800118a:	f7ff fc6d 	bl	8000a68 <SD_RxDataBlock>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d03b      	beq.n	800120c <SD_disk_ioctl+0x234>
 8001194:	2300      	movs	r3, #0
 8001196:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800119a:	e037      	b.n	800120c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800119c:	2100      	movs	r1, #0
 800119e:	204a      	movs	r0, #74	@ 0x4a
 80011a0:	f7ff fcd5 	bl	8000b4e <SD_SendCmd>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d132      	bne.n	8001210 <SD_disk_ioctl+0x238>
 80011aa:	2110      	movs	r1, #16
 80011ac:	6a38      	ldr	r0, [r7, #32]
 80011ae:	f7ff fc5b 	bl	8000a68 <SD_RxDataBlock>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d02b      	beq.n	8001210 <SD_disk_ioctl+0x238>
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011be:	e027      	b.n	8001210 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80011c0:	2100      	movs	r1, #0
 80011c2:	207a      	movs	r0, #122	@ 0x7a
 80011c4:	f7ff fcc3 	bl	8000b4e <SD_SendCmd>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d116      	bne.n	80011fc <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80011d4:	e00b      	b.n	80011ee <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80011d6:	6a3c      	ldr	r4, [r7, #32]
 80011d8:	1c63      	adds	r3, r4, #1
 80011da:	623b      	str	r3, [r7, #32]
 80011dc:	f7ff fba6 	bl	800092c <SPI_RxByte>
 80011e0:	4603      	mov	r3, r0
 80011e2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80011e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011e8:	3301      	adds	r3, #1
 80011ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80011ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d9ef      	bls.n	80011d6 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80011fc:	2304      	movs	r3, #4
 80011fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001202:	e006      	b.n	8001212 <SD_disk_ioctl+0x23a>
			break;
 8001204:	bf00      	nop
 8001206:	e004      	b.n	8001212 <SD_disk_ioctl+0x23a>
			break;
 8001208:	bf00      	nop
 800120a:	e002      	b.n	8001212 <SD_disk_ioctl+0x23a>
			break;
 800120c:	bf00      	nop
 800120e:	e000      	b.n	8001212 <SD_disk_ioctl+0x23a>
			break;
 8001210:	bf00      	nop
		}

		DESELECT();
 8001212:	f7ff fb49 	bl	80008a8 <DESELECT>
		SPI_RxByte();
 8001216:	f7ff fb89 	bl	800092c <SPI_RxByte>
	}

	return res;
 800121a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800121e:	4618      	mov	r0, r3
 8001220:	372c      	adds	r7, #44	@ 0x2c
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	bf00      	nop
 8001228:	20000000 	.word	0x20000000

0800122c <flash_unlock>:
 */

#include "flash.h"

void flash_unlock()
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001230:	f001 f8b6 	bl	80023a0 <HAL_FLASH_Unlock>
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <flash_lock>:

void flash_lock()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  HAL_FLASH_Lock();
 800123c:	f001 f8d2 	bl	80023e4 <HAL_FLASH_Lock>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <flash_erease>:
HAL_StatusTypeDef flash_erease(uint32_t sector)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.Sector = sector;  //This parameter must be a value of @ref FLASHEx_Sectors
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	617b      	str	r3, [r7, #20]
	eraseInit.NbSectors = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]
	eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
	eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001258:	2302      	movs	r3, #2
 800125a:	61fb      	str	r3, [r7, #28]
	uint32_t PageError;
	return HAL_FLASHEx_Erase(&eraseInit,&PageError);
 800125c:	f107 0208 	add.w	r2, r7, #8
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fa0c 	bl	8002684 <HAL_FLASHEx_Erase>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <flash_write_arr>:
void flash_write_arr(uint32_t addr,uint8_t *data,uint16_t len)
{
 8001276:	b5b0      	push	{r4, r5, r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	4613      	mov	r3, r2
 8001282:	80fb      	strh	r3, [r7, #6]
	 for(uint16_t i=0;i<len;i+=2)
 8001284:	2300      	movs	r3, #0
 8001286:	82fb      	strh	r3, [r7, #22]
 8001288:	e019      	b.n	80012be <flash_write_arr+0x48>
	{
		 HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr+i ,*(data + i) | (uint16_t)*(data+i+1)<<8);
 800128a:	8afa      	ldrh	r2, [r7, #22]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	18d1      	adds	r1, r2, r3
 8001290:	8afb      	ldrh	r3, [r7, #22]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	4413      	add	r3, r2
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	8afb      	ldrh	r3, [r7, #22]
 800129c:	3301      	adds	r3, #1
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	4303      	orrs	r3, r0
 80012a8:	17da      	asrs	r2, r3, #31
 80012aa:	461c      	mov	r4, r3
 80012ac:	4615      	mov	r5, r2
 80012ae:	4622      	mov	r2, r4
 80012b0:	462b      	mov	r3, r5
 80012b2:	2001      	movs	r0, #1
 80012b4:	f001 f820 	bl	80022f8 <HAL_FLASH_Program>
	 for(uint16_t i=0;i<len;i+=2)
 80012b8:	8afb      	ldrh	r3, [r7, #22]
 80012ba:	3302      	adds	r3, #2
 80012bc:	82fb      	strh	r3, [r7, #22]
 80012be:	8afa      	ldrh	r2, [r7, #22]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d3e1      	bcc.n	800128a <flash_write_arr+0x14>
	 }
}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bdb0      	pop	{r4, r5, r7, pc}

080012d0 <flash_read_arr>:
void flash_read_arr(uint32_t addr,uint8_t *data,uint16_t len)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	@ 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	4613      	mov	r3, r2
 80012dc:	80fb      	strh	r3, [r7, #6]
	 for(uint16_t i=0;i<len;i+=2){
 80012de:	2300      	movs	r3, #0
 80012e0:	83fb      	strh	r3, [r7, #30]
 80012e2:	e018      	b.n	8001316 <flash_read_arr+0x46>
		 volatile uint32_t *p= (volatile uint32_t *)(addr+i);
 80012e4:	8bfa      	ldrh	r2, [r7, #30]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
		 uint16_t data_temp=*p;
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	82fb      	strh	r3, [r7, #22]
		 //cach 1
//		 data[i] = data_temp;
//		 data[i+1] = data_temp>>8;
		 //cach 2
		 *(data+i) = data_temp;
 80012f2:	8bfb      	ldrh	r3, [r7, #30]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	4413      	add	r3, r2
 80012f8:	8afa      	ldrh	r2, [r7, #22]
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	701a      	strb	r2, [r3, #0]
		 *(data+i+1) = data_temp>>8;
 80012fe:	8afb      	ldrh	r3, [r7, #22]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	b299      	uxth	r1, r3
 8001304:	8bfb      	ldrh	r3, [r7, #30]
 8001306:	3301      	adds	r3, #1
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	4413      	add	r3, r2
 800130c:	b2ca      	uxtb	r2, r1
 800130e:	701a      	strb	r2, [r3, #0]
	 for(uint16_t i=0;i<len;i+=2){
 8001310:	8bfb      	ldrh	r3, [r7, #30]
 8001312:	3302      	adds	r3, #2
 8001314:	83fb      	strh	r3, [r7, #30]
 8001316:	8bfa      	ldrh	r2, [r7, #30]
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	429a      	cmp	r2, r3
 800131c:	d3e2      	bcc.n	80012e4 <flash_read_arr+0x14>
	 }
}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	3724      	adds	r7, #36	@ 0x24
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001330:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <SDTimer_Handler+0x40>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d006      	beq.n	8001348 <SDTimer_Handler+0x1c>
    Timer1--;
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <SDTimer_Handler+0x40>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	3b01      	subs	r3, #1
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <SDTimer_Handler+0x40>)
 8001346:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <SDTimer_Handler+0x44>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <SDTimer_Handler+0x34>
    Timer2--;
 8001352:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <SDTimer_Handler+0x44>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	3b01      	subs	r3, #1
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <SDTimer_Handler+0x44>)
 800135e:	701a      	strb	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	2000019d 	.word	0x2000019d
 8001370:	2000019e 	.word	0x2000019e

08001374 <clear_buffer>:
	uint8_t t2;
	uint16_t file_counter;
}__attribute__((packed))Parameter_Infor;

void clear_buffer (void)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	e007      	b.n	8001390 <clear_buffer+0x1c>
 8001380:	4a09      	ldr	r2, [pc, #36]	@ (80013a8 <clear_buffer+0x34>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3301      	adds	r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001396:	4293      	cmp	r3, r2
 8001398:	ddf2      	ble.n	8001380 <clear_buffer+0xc>
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	20002210 	.word	0x20002210

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b08b      	sub	sp, #44	@ 0x2c
 80013b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b2:	f000 fe59 	bl	8002068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b6:	f000 f975 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ba:	f000 fa6d 	bl	8001898 <MX_GPIO_Init>
  MX_SPI2_Init();
 80013be:	f000 fa0b 	bl	80017d8 <MX_SPI2_Init>
  MX_FATFS_Init();
 80013c2:	f004 f859 	bl	8005478 <MX_FATFS_Init>
  MX_I2C1_Init();
 80013c6:	f000 f9d9 	bl	800177c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80013ca:	f000 fa3b 	bl	8001844 <MX_USART1_UART_Init>
//     flash_write_arr(0x08040000,(uint8_t *)&parameter,sizeof(parameter));
//     flash_lock();

  // read parameter from flash
//  flash_unlock();
  flash_read_arr(0x08040000, (uint8_t*)&parameter_read, sizeof(parameter_read));
 80013ce:	2211      	movs	r2, #17
 80013d0:	4992      	ldr	r1, [pc, #584]	@ (800161c <main+0x270>)
 80013d2:	4893      	ldr	r0, [pc, #588]	@ (8001620 <main+0x274>)
 80013d4:	f7ff ff7c 	bl	80012d0 <flash_read_arr>
//  flash_lock();
  print_cli("read first - s1:%d s2:%d s3:%d s4:%d count:%d\n",parameter_read.s1,parameter_read.t1,parameter_read.s2,parameter_read.t2,parameter_read.file_counter);
 80013d8:	4b90      	ldr	r3, [pc, #576]	@ (800161c <main+0x270>)
 80013da:	7adb      	ldrb	r3, [r3, #11]
 80013dc:	4619      	mov	r1, r3
 80013de:	4b8f      	ldr	r3, [pc, #572]	@ (800161c <main+0x270>)
 80013e0:	7b1b      	ldrb	r3, [r3, #12]
 80013e2:	4618      	mov	r0, r3
 80013e4:	4b8d      	ldr	r3, [pc, #564]	@ (800161c <main+0x270>)
 80013e6:	7b5b      	ldrb	r3, [r3, #13]
 80013e8:	461c      	mov	r4, r3
 80013ea:	4b8c      	ldr	r3, [pc, #560]	@ (800161c <main+0x270>)
 80013ec:	7b9b      	ldrb	r3, [r3, #14]
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b8a      	ldr	r3, [pc, #552]	@ (800161c <main+0x270>)
 80013f2:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	9200      	str	r2, [sp, #0]
 80013fc:	4623      	mov	r3, r4
 80013fe:	4602      	mov	r2, r0
 8001400:	4888      	ldr	r0, [pc, #544]	@ (8001624 <main+0x278>)
 8001402:	f000 fbb5 	bl	8001b70 <print_cli>

  sprintf(str, "file%d.txt", parameter_read.file_counter);
 8001406:	4b85      	ldr	r3, [pc, #532]	@ (800161c <main+0x270>)
 8001408:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800140c:	b29b      	uxth	r3, r3
 800140e:	461a      	mov	r2, r3
 8001410:	4985      	ldr	r1, [pc, #532]	@ (8001628 <main+0x27c>)
 8001412:	4886      	ldr	r0, [pc, #536]	@ (800162c <main+0x280>)
 8001414:	f00b f930 	bl	800c678 <siprintf>
  print_cli("%s\n",str);
 8001418:	4984      	ldr	r1, [pc, #528]	@ (800162c <main+0x280>)
 800141a:	4885      	ldr	r0, [pc, #532]	@ (8001630 <main+0x284>)
 800141c:	f000 fba8 	bl	8001b70 <print_cli>
  parameter_read.file_counter = parameter_read.file_counter + 1;
 8001420:	4b7e      	ldr	r3, [pc, #504]	@ (800161c <main+0x270>)
 8001422:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8001426:	b29b      	uxth	r3, r3
 8001428:	3301      	adds	r3, #1
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b7b      	ldr	r3, [pc, #492]	@ (800161c <main+0x270>)
 800142e:	f8a3 200f 	strh.w	r2, [r3, #15]
       flash_unlock();
 8001432:	f7ff fefb 	bl	800122c <flash_unlock>
       if(flash_erease(FLASH_SECTOR_6) != HAL_OK){
 8001436:	2006      	movs	r0, #6
 8001438:	f7ff ff04 	bl	8001244 <flash_erease>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <main+0x9c>
      	 flash_erease(FLASH_SECTOR_6);
 8001442:	2006      	movs	r0, #6
 8001444:	f7ff fefe 	bl	8001244 <flash_erease>
       }
       flash_write_arr(0x08040000,(uint8_t *)&parameter_read,sizeof(parameter_read));
 8001448:	2211      	movs	r2, #17
 800144a:	4974      	ldr	r1, [pc, #464]	@ (800161c <main+0x270>)
 800144c:	4874      	ldr	r0, [pc, #464]	@ (8001620 <main+0x274>)
 800144e:	f7ff ff12 	bl	8001276 <flash_write_arr>
       flash_lock();
 8001452:	f7ff fef1 	bl	8001238 <flash_lock>

    fresult = f_mount(&fs, "/", 1);
 8001456:	2201      	movs	r2, #1
 8001458:	4976      	ldr	r1, [pc, #472]	@ (8001634 <main+0x288>)
 800145a:	4877      	ldr	r0, [pc, #476]	@ (8001638 <main+0x28c>)
 800145c:	f006 fa54 	bl	8007908 <f_mount>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b75      	ldr	r3, [pc, #468]	@ (800163c <main+0x290>)
 8001466:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)  print_cli("ERROR!!! in mounting SD CARD...\n\n");
 8001468:	4b74      	ldr	r3, [pc, #464]	@ (800163c <main+0x290>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <main+0xcc>
 8001470:	4873      	ldr	r0, [pc, #460]	@ (8001640 <main+0x294>)
 8001472:	f000 fb7d 	bl	8001b70 <print_cli>
 8001476:	e002      	b.n	800147e <main+0xd2>
	else print_cli("SD CARD mounted successfully...\n\n");
 8001478:	4872      	ldr	r0, [pc, #456]	@ (8001644 <main+0x298>)
 800147a:	f000 fb79 	bl	8001b70 <print_cli>

				  	fresult = f_open(&fil, "file80.txt", FA_READ);
 800147e:	2201      	movs	r2, #1
 8001480:	4971      	ldr	r1, [pc, #452]	@ (8001648 <main+0x29c>)
 8001482:	4872      	ldr	r0, [pc, #456]	@ (800164c <main+0x2a0>)
 8001484:	f006 fa86 	bl	8007994 <f_open>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b6b      	ldr	r3, [pc, #428]	@ (800163c <main+0x290>)
 800148e:	701a      	strb	r2, [r3, #0]
				  	if (fresult == FR_OK) print_cli("file2.txt is open and the data is shown below\n");
 8001490:	4b6a      	ldr	r3, [pc, #424]	@ (800163c <main+0x290>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <main+0xf2>
 8001498:	486d      	ldr	r0, [pc, #436]	@ (8001650 <main+0x2a4>)
 800149a:	f000 fb69 	bl	8001b70 <print_cli>

				  	UINT file_size = f_size(&fil);
 800149e:	4b6b      	ldr	r3, [pc, #428]	@ (800164c <main+0x2a0>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	61fb      	str	r3, [r7, #28]
					if (file_size == 0 || file_size > sizeof(buffer)) {
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d004      	beq.n	80014b4 <main+0x108>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d907      	bls.n	80014c4 <main+0x118>
					    print_cli("File size is invalid! %u\n",file_size);
 80014b4:	69f9      	ldr	r1, [r7, #28]
 80014b6:	4867      	ldr	r0, [pc, #412]	@ (8001654 <main+0x2a8>)
 80014b8:	f000 fb5a 	bl	8001b70 <print_cli>
					    f_close(&fil);
 80014bc:	4863      	ldr	r0, [pc, #396]	@ (800164c <main+0x2a0>)
 80014be:	f006 fe0e 	bl	80080de <f_close>
					    return;
 80014c2:	e0a6      	b.n	8001612 <main+0x266>
					}
				  	/* Read data from the file
				  	 * Please see the function details for the arguments */
				  	f_read (&fil, buffer, f_size(&fil), &br);
 80014c4:	4b61      	ldr	r3, [pc, #388]	@ (800164c <main+0x2a0>)
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	4b63      	ldr	r3, [pc, #396]	@ (8001658 <main+0x2ac>)
 80014ca:	4964      	ldr	r1, [pc, #400]	@ (800165c <main+0x2b0>)
 80014cc:	485f      	ldr	r0, [pc, #380]	@ (800164c <main+0x2a0>)
 80014ce:	f006 fc29 	bl	8007d24 <f_read>
				  	print_cli(buffer);
 80014d2:	4862      	ldr	r0, [pc, #392]	@ (800165c <main+0x2b0>)
 80014d4:	f000 fb4c 	bl	8001b70 <print_cli>
				  	print_cli("\n\n");
 80014d8:	4861      	ldr	r0, [pc, #388]	@ (8001660 <main+0x2b4>)
 80014da:	f000 fb49 	bl	8001b70 <print_cli>

				  	/* Close file */
				  	f_close(&fil);
 80014de:	485b      	ldr	r0, [pc, #364]	@ (800164c <main+0x2a0>)
 80014e0:	f006 fdfd 	bl	80080de <f_close>

				  	clear_buffer();
 80014e4:	f7ff ff46 	bl	8001374 <clear_buffer>
	CLCD_I2C_Init(&LCD1,&hi2c1,0x4e,20,4);
 80014e8:	2304      	movs	r3, #4
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2314      	movs	r3, #20
 80014ee:	224e      	movs	r2, #78	@ 0x4e
 80014f0:	495c      	ldr	r1, [pc, #368]	@ (8001664 <main+0x2b8>)
 80014f2:	485d      	ldr	r0, [pc, #372]	@ (8001668 <main+0x2bc>)
 80014f4:	f7ff f8f0 	bl	80006d8 <CLCD_I2C_Init>
	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	485a      	ldr	r0, [pc, #360]	@ (8001668 <main+0x2bc>)
 80014fe:	f7ff f95b 	bl	80007b8 <CLCD_I2C_SetCursor>

    status = xTaskCreate(sensor_task, "sensor_task", 250, NULL, 2, &handle_sensor_task);
 8001502:	4b5a      	ldr	r3, [pc, #360]	@ (800166c <main+0x2c0>)
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	2302      	movs	r3, #2
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2300      	movs	r3, #0
 800150c:	22fa      	movs	r2, #250	@ 0xfa
 800150e:	4958      	ldr	r1, [pc, #352]	@ (8001670 <main+0x2c4>)
 8001510:	4858      	ldr	r0, [pc, #352]	@ (8001674 <main+0x2c8>)
 8001512:	f007 fb1e 	bl	8008b52 <xTaskCreate>
 8001516:	61b8      	str	r0, [r7, #24]

    configASSERT(status);
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10b      	bne.n	8001536 <main+0x18a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800151e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001522:	f383 8811 	msr	BASEPRI, r3
 8001526:	f3bf 8f6f 	isb	sy
 800152a:	f3bf 8f4f 	dsb	sy
 800152e:	617b      	str	r3, [r7, #20]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	e7fd      	b.n	8001532 <main+0x186>

    status = xTaskCreate(scan_keypad_task, "scan_keypad_task", 250, NULL, 2, &handle_scan_keypad_task);
 8001536:	4b50      	ldr	r3, [pc, #320]	@ (8001678 <main+0x2cc>)
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	2302      	movs	r3, #2
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2300      	movs	r3, #0
 8001540:	22fa      	movs	r2, #250	@ 0xfa
 8001542:	494e      	ldr	r1, [pc, #312]	@ (800167c <main+0x2d0>)
 8001544:	484e      	ldr	r0, [pc, #312]	@ (8001680 <main+0x2d4>)
 8001546:	f007 fb04 	bl	8008b52 <xTaskCreate>
 800154a:	61b8      	str	r0, [r7, #24]

    configASSERT(status);
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10b      	bne.n	800156a <main+0x1be>
    __asm volatile
 8001552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001556:	f383 8811 	msr	BASEPRI, r3
 800155a:	f3bf 8f6f 	isb	sy
 800155e:	f3bf 8f4f 	dsb	sy
 8001562:	613b      	str	r3, [r7, #16]
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	e7fd      	b.n	8001566 <main+0x1ba>

    status = xTaskCreate(config_task, "config_task", 250, NULL, 2, &handle_config_task);
 800156a:	4b46      	ldr	r3, [pc, #280]	@ (8001684 <main+0x2d8>)
 800156c:	9301      	str	r3, [sp, #4]
 800156e:	2302      	movs	r3, #2
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2300      	movs	r3, #0
 8001574:	22fa      	movs	r2, #250	@ 0xfa
 8001576:	4944      	ldr	r1, [pc, #272]	@ (8001688 <main+0x2dc>)
 8001578:	4844      	ldr	r0, [pc, #272]	@ (800168c <main+0x2e0>)
 800157a:	f007 faea 	bl	8008b52 <xTaskCreate>
 800157e:	61b8      	str	r0, [r7, #24]

    configASSERT(status);
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10b      	bne.n	800159e <main+0x1f2>
    __asm volatile
 8001586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800158a:	f383 8811 	msr	BASEPRI, r3
 800158e:	f3bf 8f6f 	isb	sy
 8001592:	f3bf 8f4f 	dsb	sy
 8001596:	60fb      	str	r3, [r7, #12]
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	e7fd      	b.n	800159a <main+0x1ee>

    status = xTaskCreate(print_task, "print_task", 500, NULL, 2, &handle_print_task);
 800159e:	4b3c      	ldr	r3, [pc, #240]	@ (8001690 <main+0x2e4>)
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	2302      	movs	r3, #2
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2300      	movs	r3, #0
 80015a8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015ac:	4939      	ldr	r1, [pc, #228]	@ (8001694 <main+0x2e8>)
 80015ae:	483a      	ldr	r0, [pc, #232]	@ (8001698 <main+0x2ec>)
 80015b0:	f007 facf 	bl	8008b52 <xTaskCreate>
 80015b4:	61b8      	str	r0, [r7, #24]

    configASSERT(status);
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10b      	bne.n	80015d4 <main+0x228>
    __asm volatile
 80015bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015c0:	f383 8811 	msr	BASEPRI, r3
 80015c4:	f3bf 8f6f 	isb	sy
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	60bb      	str	r3, [r7, #8]
}
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <main+0x224>

    q_print = xQueueCreate(10, sizeof(size_t));
 80015d4:	2200      	movs	r2, #0
 80015d6:	2104      	movs	r1, #4
 80015d8:	200a      	movs	r0, #10
 80015da:	f006 ffff 	bl	80085dc <xQueueGenericCreate>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a2e      	ldr	r2, [pc, #184]	@ (800169c <main+0x2f0>)
 80015e2:	6013      	str	r3, [r2, #0]

    configASSERT(q_print != NULL);
 80015e4:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <main+0x2f0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10b      	bne.n	8001604 <main+0x258>
    __asm volatile
 80015ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015f0:	f383 8811 	msr	BASEPRI, r3
 80015f4:	f3bf 8f6f 	isb	sy
 80015f8:	f3bf 8f4f 	dsb	sy
 80015fc:	607b      	str	r3, [r7, #4]
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <main+0x254>

    printf("created tasks sucessfully\n");
 8001604:	4826      	ldr	r0, [pc, #152]	@ (80016a0 <main+0x2f4>)
 8001606:	f00b f82f 	bl	800c668 <puts>



    vTaskStartScheduler();
 800160a:	f007 fc93 	bl	8008f34 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800160e:	bf00      	nop
 8001610:	e7fd      	b.n	800160e <main+0x262>
					    return;
 8001612:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001614:	4618      	mov	r0, r3
 8001616:	3724      	adds	r7, #36	@ 0x24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	200035b8 	.word	0x200035b8
 8001620:	08040000 	.word	0x08040000
 8001624:	0800d4bc 	.word	0x0800d4bc
 8001628:	0800d4ec 	.word	0x0800d4ec
 800162c:	200035cc 	.word	0x200035cc
 8001630:	0800d4f8 	.word	0x0800d4f8
 8001634:	0800d4fc 	.word	0x0800d4fc
 8001638:	200001a0 	.word	0x200001a0
 800163c:	20002208 	.word	0x20002208
 8001640:	0800d500 	.word	0x0800d500
 8001644:	0800d524 	.word	0x0800d524
 8001648:	0800d548 	.word	0x0800d548
 800164c:	200011d8 	.word	0x200011d8
 8001650:	0800d554 	.word	0x0800d554
 8001654:	0800d584 	.word	0x0800d584
 8001658:	2000220c 	.word	0x2000220c
 800165c:	20002210 	.word	0x20002210
 8001660:	0800d5a0 	.word	0x0800d5a0
 8001664:	200000a8 	.word	0x200000a8
 8001668:	200035ac 	.word	0x200035ac
 800166c:	20003598 	.word	0x20003598
 8001670:	0800d5a4 	.word	0x0800d5a4
 8001674:	08001995 	.word	0x08001995
 8001678:	200035a0 	.word	0x200035a0
 800167c:	0800d5b0 	.word	0x0800d5b0
 8001680:	08001b05 	.word	0x08001b05
 8001684:	200035a4 	.word	0x200035a4
 8001688:	0800d5c4 	.word	0x0800d5c4
 800168c:	08001b11 	.word	0x08001b11
 8001690:	2000359c 	.word	0x2000359c
 8001694:	0800d5d0 	.word	0x0800d5d0
 8001698:	080019c5 	.word	0x080019c5
 800169c:	200035a8 	.word	0x200035a8
 80016a0:	0800d5dc 	.word	0x0800d5dc

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b094      	sub	sp, #80	@ 0x50
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0320 	add.w	r3, r7, #32
 80016ae:	2230      	movs	r2, #48	@ 0x30
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f00b f908 	bl	800c8c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <SystemClock_Config+0xd0>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	4a28      	ldr	r2, [pc, #160]	@ (8001774 <SystemClock_Config+0xd0>)
 80016d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d8:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <SystemClock_Config+0xd0>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	4b23      	ldr	r3, [pc, #140]	@ (8001778 <SystemClock_Config+0xd4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016f0:	4a21      	ldr	r2, [pc, #132]	@ (8001778 <SystemClock_Config+0xd4>)
 80016f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <SystemClock_Config+0xd4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001704:	2302      	movs	r3, #2
 8001706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001708:	2301      	movs	r3, #1
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800170c:	2310      	movs	r3, #16
 800170e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001710:	2302      	movs	r3, #2
 8001712:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001714:	2300      	movs	r3, #0
 8001716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001718:	2310      	movs	r3, #16
 800171a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800171c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001720:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001722:	2304      	movs	r3, #4
 8001724:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001726:	2307      	movs	r3, #7
 8001728:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172a:	f107 0320 	add.w	r3, r7, #32
 800172e:	4618      	mov	r0, r3
 8001730:	f001 ff06 	bl	8003540 <HAL_RCC_OscConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800173a:	f000 fa13 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173e:	230f      	movs	r3, #15
 8001740:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001742:	2302      	movs	r3, #2
 8001744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800174a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2102      	movs	r1, #2
 800175a:	4618      	mov	r0, r3
 800175c:	f002 f968 	bl	8003a30 <HAL_RCC_ClockConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001766:	f000 f9fd 	bl	8001b64 <Error_Handler>
  }
}
 800176a:	bf00      	nop
 800176c:	3750      	adds	r7, #80	@ 0x50
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40007000 	.word	0x40007000

0800177c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <MX_I2C1_Init+0x50>)
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <MX_I2C1_Init+0x54>)
 8001784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_I2C1_Init+0x50>)
 8001788:	4a12      	ldr	r2, [pc, #72]	@ (80017d4 <MX_I2C1_Init+0x58>)
 800178a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <MX_I2C1_Init+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_I2C1_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_I2C1_Init+0x50>)
 800179a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800179e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <MX_I2C1_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_I2C1_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <MX_I2C1_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_I2C1_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	@ (80017cc <MX_I2C1_Init+0x50>)
 80017ba:	f001 fa23 	bl	8002c04 <HAL_I2C_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017c4:	f000 f9ce 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200000a8 	.word	0x200000a8
 80017d0:	40005400 	.word	0x40005400
 80017d4:	000186a0 	.word	0x000186a0

080017d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <MX_SPI2_Init+0x64>)
 80017de:	4a18      	ldr	r2, [pc, #96]	@ (8001840 <MX_SPI2_Init+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017e2:	4b16      	ldr	r3, [pc, #88]	@ (800183c <MX_SPI2_Init+0x64>)
 80017e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ea:	4b14      	ldr	r3, [pc, #80]	@ (800183c <MX_SPI2_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <MX_SPI2_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <MX_SPI2_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <MX_SPI2_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <MX_SPI2_Init+0x64>)
 8001804:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001808:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <MX_SPI2_Init+0x64>)
 800180c:	2210      	movs	r2, #16
 800180e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001810:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <MX_SPI2_Init+0x64>)
 8001812:	2200      	movs	r2, #0
 8001814:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <MX_SPI2_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <MX_SPI2_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <MX_SPI2_Init+0x64>)
 8001824:	220a      	movs	r2, #10
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001828:	4804      	ldr	r0, [pc, #16]	@ (800183c <MX_SPI2_Init+0x64>)
 800182a:	f002 fb53 	bl	8003ed4 <HAL_SPI_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001834:	f000 f996 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200000fc 	.word	0x200000fc
 8001840:	40003800 	.word	0x40003800

08001844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 800184a:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <MX_USART1_UART_Init+0x50>)
 800184c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 800187c:	f003 f9f0 	bl	8004c60 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001886:	f000 f96d 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000154 	.word	0x20000154
 8001894:	40011000 	.word	0x40011000

08001898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b35      	ldr	r3, [pc, #212]	@ (8001988 <MX_GPIO_Init+0xf0>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a34      	ldr	r2, [pc, #208]	@ (8001988 <MX_GPIO_Init+0xf0>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b32      	ldr	r3, [pc, #200]	@ (8001988 <MX_GPIO_Init+0xf0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001988 <MX_GPIO_Init+0xf0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001988 <MX_GPIO_Init+0xf0>)
 80018d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b2b      	ldr	r3, [pc, #172]	@ (8001988 <MX_GPIO_Init+0xf0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <MX_GPIO_Init+0xf0>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a26      	ldr	r2, [pc, #152]	@ (8001988 <MX_GPIO_Init+0xf0>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <MX_GPIO_Init+0xf0>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <MX_GPIO_Init+0xf0>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a1f      	ldr	r2, [pc, #124]	@ (8001988 <MX_GPIO_Init+0xf0>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b1d      	ldr	r3, [pc, #116]	@ (8001988 <MX_GPIO_Init+0xf0>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2160      	movs	r1, #96	@ 0x60
 8001922:	481a      	ldr	r0, [pc, #104]	@ (800198c <MX_GPIO_Init+0xf4>)
 8001924:	f001 f954 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001928:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800192c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800192e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4814      	ldr	r0, [pc, #80]	@ (8001990 <MX_GPIO_Init+0xf8>)
 8001940:	f000 ffc2 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001944:	230c      	movs	r3, #12
 8001946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001954:	2307      	movs	r3, #7
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	480b      	ldr	r0, [pc, #44]	@ (800198c <MX_GPIO_Init+0xf4>)
 8001960:	f000 ffb2 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8001964:	2360      	movs	r3, #96	@ 0x60
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4804      	ldr	r0, [pc, #16]	@ (800198c <MX_GPIO_Init+0xf4>)
 800197c:	f000 ffa4 	bl	80028c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	@ 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020800 	.word	0x40020800

08001994 <sensor_task>:

/* USER CODE BEGIN 4 */
void sensor_task(void *param){
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	while(1){
		CLCD_I2C_WriteString(&LCD1, "sensor");
 800199c:	4906      	ldr	r1, [pc, #24]	@ (80019b8 <sensor_task+0x24>)
 800199e:	4807      	ldr	r0, [pc, #28]	@ (80019bc <sensor_task+0x28>)
 80019a0:	f7fe ff5d 	bl	800085e <CLCD_I2C_WriteString>
		printf("sensor task\n");
 80019a4:	4806      	ldr	r0, [pc, #24]	@ (80019c0 <sensor_task+0x2c>)
 80019a6:	f00a fe5f 	bl	800c668 <puts>
		vTaskDelay(1000);
 80019aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ae:	f007 fa3f 	bl	8008e30 <vTaskDelay>
		CLCD_I2C_WriteString(&LCD1, "sensor");
 80019b2:	bf00      	nop
 80019b4:	e7f2      	b.n	800199c <sensor_task+0x8>
 80019b6:	bf00      	nop
 80019b8:	0800d5f8 	.word	0x0800d5f8
 80019bc:	200035ac 	.word	0x200035ac
 80019c0:	0800d600 	.word	0x0800d600

080019c4 <print_task>:
	}
}
void print_task(void *param){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80019d0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80019d4:	6018      	str	r0, [r3, #0]
//
//			  	/* Close file */
//			  	f_close(&fil);
//
//			  	clear_buffer();
		fresult = f_open(&fil, "file79.txt", FA_READ);
 80019d6:	2201      	movs	r2, #1
 80019d8:	4940      	ldr	r1, [pc, #256]	@ (8001adc <print_task+0x118>)
 80019da:	4841      	ldr	r0, [pc, #260]	@ (8001ae0 <print_task+0x11c>)
 80019dc:	f005 ffda 	bl	8007994 <f_open>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae4 <print_task+0x120>)
 80019e6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 80019e8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae4 <print_task+0x120>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <print_task+0x3a>
		    print_cli("Failed to open file79.txt! Error code: %d\n", fresult);
 80019f0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ae4 <print_task+0x120>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	483c      	ldr	r0, [pc, #240]	@ (8001ae8 <print_task+0x124>)
 80019f8:	f000 f8ba 	bl	8001b70 <print_cli>
		    return;
 80019fc:	e069      	b.n	8001ad2 <print_task+0x10e>
		}
		print_cli("file79.txt is open and the data is shown below\n");
 80019fe:	483b      	ldr	r0, [pc, #236]	@ (8001aec <print_task+0x128>)
 8001a00:	f000 f8b6 	bl	8001b70 <print_cli>

		UINT file_size = f_size(&fil);
 8001a04:	4b36      	ldr	r3, [pc, #216]	@ (8001ae0 <print_task+0x11c>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
		print_cli("File size: %u bytes\n", file_size);
 8001a0c:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 8001a10:	4837      	ldr	r0, [pc, #220]	@ (8001af0 <print_task+0x12c>)
 8001a12:	f000 f8ad 	bl	8001b70 <print_cli>

		if (file_size == 0 || file_size > sizeof(buffer)) {
 8001a16:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <print_task+0x66>
 8001a1e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d906      	bls.n	8001a38 <print_task+0x74>
		    print_cli("File size is invalid!\n");
 8001a2a:	4832      	ldr	r0, [pc, #200]	@ (8001af4 <print_task+0x130>)
 8001a2c:	f000 f8a0 	bl	8001b70 <print_cli>
		    f_close(&fil);
 8001a30:	482b      	ldr	r0, [pc, #172]	@ (8001ae0 <print_task+0x11c>)
 8001a32:	f006 fb54 	bl	80080de <f_close>
		    return;
 8001a36:	e04c      	b.n	8001ad2 <print_task+0x10e>
		}

		// Đọc file từng khối nhỏ
		UINT bytes_read_total = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		#define CHUNK_SIZE 512
		char buffer[CHUNK_SIZE + 1];

		while (bytes_read_total < file_size) {
 8001a3e:	e035      	b.n	8001aac <print_task+0xe8>
		    UINT bytes_to_read = (file_size - bytes_read_total > CHUNK_SIZE) ? CHUNK_SIZE : (file_size - bytes_read_total);
 8001a40:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001a44:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a4e:	bf28      	it	cs
 8001a50:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8001a54:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
		    FRESULT res = f_read(&fil, buffer, bytes_to_read, &br);
 8001a58:	f107 0108 	add.w	r1, r7, #8
 8001a5c:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <print_task+0x134>)
 8001a5e:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8001a62:	481f      	ldr	r0, [pc, #124]	@ (8001ae0 <print_task+0x11c>)
 8001a64:	f006 f95e 	bl	8007d24 <f_read>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b

		    if (res != FR_OK) {
 8001a6e:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <print_task+0xc0>
		        print_cli("f_read failed! Error: %d\n", res);
 8001a76:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	481f      	ldr	r0, [pc, #124]	@ (8001afc <print_task+0x138>)
 8001a7e:	f000 f877 	bl	8001b70 <print_cli>
		        break;
 8001a82:	e019      	b.n	8001ab8 <print_task+0xf4>
		    }

		    buffer[br] = '\0';
 8001a84:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <print_task+0x134>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001a8c:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8001a90:	2100      	movs	r1, #0
 8001a92:	54d1      	strb	r1, [r2, r3]
		    print_cli(buffer);
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f869 	bl	8001b70 <print_cli>
		    bytes_read_total += br;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <print_task+0x134>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		while (bytes_read_total < file_size) {
 8001aac:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8001ab0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d3c3      	bcc.n	8001a40 <print_task+0x7c>
		}

		f_close(&fil);
 8001ab8:	4809      	ldr	r0, [pc, #36]	@ (8001ae0 <print_task+0x11c>)
 8001aba:	f006 fb10 	bl	80080de <f_close>
		print_cli("\n\n");
 8001abe:	4810      	ldr	r0, [pc, #64]	@ (8001b00 <print_task+0x13c>)
 8001ac0:	f000 f856 	bl	8001b70 <print_cli>
		clear_buffer();
 8001ac4:	f7ff fc56 	bl	8001374 <clear_buffer>


				vTaskDelay(pdMS_TO_TICKS(10000));
 8001ac8:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001acc:	f007 f9b0 	bl	8008e30 <vTaskDelay>
	while(1){
 8001ad0:	e781      	b.n	80019d6 <print_task+0x12>
			}


}
 8001ad2:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	0800d60c 	.word	0x0800d60c
 8001ae0:	200011d8 	.word	0x200011d8
 8001ae4:	20002208 	.word	0x20002208
 8001ae8:	0800d618 	.word	0x0800d618
 8001aec:	0800d644 	.word	0x0800d644
 8001af0:	0800d674 	.word	0x0800d674
 8001af4:	0800d68c 	.word	0x0800d68c
 8001af8:	2000220c 	.word	0x2000220c
 8001afc:	0800d6a4 	.word	0x0800d6a4
 8001b00:	0800d5a0 	.word	0x0800d5a0

08001b04 <scan_keypad_task>:
void scan_keypad_task(void *param){
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	while(1){
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <scan_keypad_task+0x8>

08001b10 <config_task>:

	}
}
void config_task(void *param){
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

	while(1){
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <config_task+0x8>

08001b1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	  FatFsCnt++;
 8001b24:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b30:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001b32:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b09      	cmp	r3, #9
 8001b3a:	d904      	bls.n	8001b46 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  {
	    FatFsCnt = 0;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001b42:	f7ff fbf3 	bl	800132c <SDTimer_Handler>
	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d101      	bne.n	8001b54 <HAL_TIM_PeriodElapsedCallback+0x38>
    HAL_IncTick();
 8001b50:	f000 faac 	bl	80020ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000019c 	.word	0x2000019c
 8001b60:	40000800 	.word	0x40000800

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <Error_Handler+0x8>

08001b70 <print_cli>:
#include "stdarg.h"
#include "stdio.h"
extern UART_HandleTypeDef huart1;

void print_cli(const char* str, ...)
{
 8001b70:	b40f      	push	{r0, r1, r2, r3}
 8001b72:	b580      	push	{r7, lr}
 8001b74:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8001b78:	af00      	add	r7, sp, #0
  char stringArray[600];
	
	va_list args;
	va_start(args,str);
 8001b7a:	f507 721b 	add.w	r2, r7, #620	@ 0x26c
 8001b7e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b82:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b86:	601a      	str	r2, [r3, #0]
	uint8_t len_str = vsprintf(stringArray,str,args);
 8001b88:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b8c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b90:	1d38      	adds	r0, r7, #4
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	f8d7 1268 	ldr.w	r1, [r7, #616]	@ 0x268
 8001b98:	f00a fde8 	bl	800c76c <vsiprintf>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f
	va_end(args);
	
	HAL_UART_Transmit(&huart1,(uint8_t *)stringArray,len_str,200);
 8001ba2:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	1d39      	adds	r1, r7, #4
 8001baa:	23c8      	movs	r3, #200	@ 0xc8
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <print_cli+0x54>)
 8001bae:	f003 f8a7 	bl	8004d00 <HAL_UART_Transmit>
}
 8001bb2:	bf00      	nop
 8001bb4:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bbe:	b004      	add	sp, #16
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000154 	.word	0x20000154

08001bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <HAL_MspInit+0x4c>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c14 <HAL_MspInit+0x4c>)
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bde:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <HAL_MspInit+0x4c>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <HAL_MspInit+0x4c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	4a08      	ldr	r2, [pc, #32]	@ (8001c14 <HAL_MspInit+0x4c>)
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfa:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_MspInit+0x4c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	@ (8001c9c <HAL_I2C_MspInit+0x84>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12b      	bne.n	8001c92 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <HAL_I2C_MspInit+0x88>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	4a17      	ldr	r2, [pc, #92]	@ (8001ca0 <HAL_I2C_MspInit+0x88>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <HAL_I2C_MspInit+0x88>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c56:	23c0      	movs	r3, #192	@ 0xc0
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5a:	2312      	movs	r3, #18
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c66:	2304      	movs	r3, #4
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <HAL_I2C_MspInit+0x8c>)
 8001c72:	f000 fe29 	bl	80028c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <HAL_I2C_MspInit+0x88>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ca0 <HAL_I2C_MspInit+0x88>)
 8001c80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c86:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <HAL_I2C_MspInit+0x88>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	@ 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40005400 	.word	0x40005400
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020400 	.word	0x40020400

08001ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	@ 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a28      	ldr	r2, [pc, #160]	@ (8001d68 <HAL_SPI_MspInit+0xc0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d14a      	bne.n	8001d60 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b27      	ldr	r3, [pc, #156]	@ (8001d6c <HAL_SPI_MspInit+0xc4>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	4a26      	ldr	r2, [pc, #152]	@ (8001d6c <HAL_SPI_MspInit+0xc4>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cda:	4b24      	ldr	r3, [pc, #144]	@ (8001d6c <HAL_SPI_MspInit+0xc4>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <HAL_SPI_MspInit+0xc4>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a1f      	ldr	r2, [pc, #124]	@ (8001d6c <HAL_SPI_MspInit+0xc4>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <HAL_SPI_MspInit+0xc4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <HAL_SPI_MspInit+0xc4>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a18      	ldr	r2, [pc, #96]	@ (8001d6c <HAL_SPI_MspInit+0xc4>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <HAL_SPI_MspInit+0xc4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d1e:	230c      	movs	r3, #12
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d2e:	2305      	movs	r3, #5
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <HAL_SPI_MspInit+0xc8>)
 8001d3a:	f000 fdc5 	bl	80028c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d50:	2305      	movs	r3, #5
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4806      	ldr	r0, [pc, #24]	@ (8001d74 <HAL_SPI_MspInit+0xcc>)
 8001d5c:	f000 fdb4 	bl	80028c8 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40003800 	.word	0x40003800
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020400 	.word	0x40020400

08001d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	@ 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a19      	ldr	r2, [pc, #100]	@ (8001dfc <HAL_UART_MspInit+0x84>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d12c      	bne.n	8001df4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <HAL_UART_MspInit+0x88>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	4a17      	ldr	r2, [pc, #92]	@ (8001e00 <HAL_UART_MspInit+0x88>)
 8001da4:	f043 0310 	orr.w	r3, r3, #16
 8001da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <HAL_UART_MspInit+0x88>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <HAL_UART_MspInit+0x88>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	4a10      	ldr	r2, [pc, #64]	@ (8001e00 <HAL_UART_MspInit+0x88>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <HAL_UART_MspInit+0x88>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dd2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001de4:	2307      	movs	r3, #7
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4619      	mov	r1, r3
 8001dee:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <HAL_UART_MspInit+0x8c>)
 8001df0:	f000 fd6a 	bl	80028c8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001df4:	bf00      	nop
 8001df6:	3728      	adds	r7, #40	@ 0x28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40011000 	.word	0x40011000
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020000 	.word	0x40020000

08001e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08e      	sub	sp, #56	@ 0x38
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	4b33      	ldr	r3, [pc, #204]	@ (8001eec <HAL_InitTick+0xe4>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e20:	4a32      	ldr	r2, [pc, #200]	@ (8001eec <HAL_InitTick+0xe4>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e28:	4b30      	ldr	r3, [pc, #192]	@ (8001eec <HAL_InitTick+0xe4>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e34:	f107 0210 	add.w	r2, r7, #16
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f002 f816 	bl	8003e70 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d103      	bne.n	8001e56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e4e:	f001 ffe7 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 8001e52:	6378      	str	r0, [r7, #52]	@ 0x34
 8001e54:	e004      	b.n	8001e60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e56:	f001 ffe3 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e62:	4a23      	ldr	r2, [pc, #140]	@ (8001ef0 <HAL_InitTick+0xe8>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	0c9b      	lsrs	r3, r3, #18
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001e6e:	4b21      	ldr	r3, [pc, #132]	@ (8001ef4 <HAL_InitTick+0xec>)
 8001e70:	4a21      	ldr	r2, [pc, #132]	@ (8001ef8 <HAL_InitTick+0xf0>)
 8001e72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001e74:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <HAL_InitTick+0xec>)
 8001e76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e7a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef4 <HAL_InitTick+0xec>)
 8001e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e80:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001e82:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef4 <HAL_InitTick+0xec>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <HAL_InitTick+0xec>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8e:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <HAL_InitTick+0xec>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001e94:	4817      	ldr	r0, [pc, #92]	@ (8001ef4 <HAL_InitTick+0xec>)
 8001e96:	f002 fc6f 	bl	8004778 <HAL_TIM_Base_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001ea8:	4812      	ldr	r0, [pc, #72]	@ (8001ef4 <HAL_InitTick+0xec>)
 8001eaa:	f002 fcbf 	bl	800482c <HAL_TIM_Base_Start_IT>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d111      	bne.n	8001ee0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ebc:	201e      	movs	r0, #30
 8001ebe:	f000 fa0d 	bl	80022dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d808      	bhi.n	8001eda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	201e      	movs	r0, #30
 8001ece:	f000 f9e9 	bl	80022a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <HAL_InitTick+0xf4>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	e002      	b.n	8001ee0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3738      	adds	r7, #56	@ 0x38
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	431bde83 	.word	0x431bde83
 8001ef4:	200035dc 	.word	0x200035dc
 8001ef8:	40000800 	.word	0x40000800
 8001efc:	20000008 	.word	0x20000008

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <NMI_Handler+0x4>

08001f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <HardFault_Handler+0x4>

08001f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <MemManage_Handler+0x4>

08001f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <BusFault_Handler+0x4>

08001f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <UsageFault_Handler+0x4>

08001f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <TIM4_IRQHandler+0x10>)
 8001f3e:	f002 fcd7 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200035dc 	.word	0x200035dc

08001f4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	e00a      	b.n	8001f74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f5e:	f3af 8000 	nop.w
 8001f62:	4601      	mov	r1, r0
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	60ba      	str	r2, [r7, #8]
 8001f6a:	b2ca      	uxtb	r2, r1
 8001f6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3301      	adds	r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	dbf0      	blt.n	8001f5e <_read+0x12>
  }

  return len;
 8001f7c:	687b      	ldr	r3, [r7, #4]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fae:	605a      	str	r2, [r3, #4]
  return 0;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <_isatty>:

int _isatty(int file)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <SystemInit+0x20>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffa:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <SystemInit+0x20>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800204c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002018:	f7ff ffea 	bl	8001ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800201c:	480c      	ldr	r0, [pc, #48]	@ (8002050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800201e:	490d      	ldr	r1, [pc, #52]	@ (8002054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002020:	4a0d      	ldr	r2, [pc, #52]	@ (8002058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002024:	e002      	b.n	800202c <LoopCopyDataInit>

08002026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202a:	3304      	adds	r3, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800202c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002030:	d3f9      	bcc.n	8002026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002034:	4c0a      	ldr	r4, [pc, #40]	@ (8002060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002038:	e001      	b.n	800203e <LoopFillZerobss>

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800203c:	3204      	adds	r2, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002042:	f00a fc7d 	bl	800c940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7ff f9b1 	bl	80013ac <main>
  bx  lr    
 800204a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800204c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002058:	0800dc40 	.word	0x0800dc40
  ldr r2, =_sbss
 800205c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002060:	20016df0 	.word	0x20016df0

08002064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC_IRQHandler>
	...

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <HAL_Init+0x40>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <HAL_Init+0x40>)
 800207e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002084:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a07      	ldr	r2, [pc, #28]	@ (80020a8 <HAL_Init+0x40>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f000 f8fc 	bl	800228e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002096:	200f      	movs	r0, #15
 8002098:	f7ff feb6 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800209c:	f7ff fd94 	bl	8001bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023c00 	.word	0x40023c00

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	2000000c 	.word	0x2000000c
 80020d0:	20003624 	.word	0x20003624

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20003624 	.word	0x20003624

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff ffee 	bl	80020d4 <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <HAL_Delay+0x44>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002112:	bf00      	nop
 8002114:	f7ff ffde 	bl	80020d4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000000c 	.word	0x2000000c

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800215c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002166:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	60d3      	str	r3, [r2, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0b      	blt.n	80021c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4907      	ldr	r1, [pc, #28]	@ (80021d0 <__NVIC_EnableIRQ+0x38>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000e100 	.word	0xe000e100

080021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	@ (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	@ (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
         );
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	@ 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff4c 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b6:	f7ff ff61 	bl	800217c <__NVIC_GetPriorityGrouping>
 80022ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	6978      	ldr	r0, [r7, #20]
 80022c2:	f7ff ffb1 	bl	8002228 <NVIC_EncodePriority>
 80022c6:	4602      	mov	r2, r0
 80022c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff80 	bl	80021d4 <__NVIC_SetPriority>
}
 80022d4:	bf00      	nop
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff54 	bl	8002198 <__NVIC_EnableIRQ>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800230a:	4b23      	ldr	r3, [pc, #140]	@ (8002398 <HAL_FLASH_Program+0xa0>)
 800230c:	7e1b      	ldrb	r3, [r3, #24]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_FLASH_Program+0x1e>
 8002312:	2302      	movs	r3, #2
 8002314:	e03b      	b.n	800238e <HAL_FLASH_Program+0x96>
 8002316:	4b20      	ldr	r3, [pc, #128]	@ (8002398 <HAL_FLASH_Program+0xa0>)
 8002318:	2201      	movs	r2, #1
 800231a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800231c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002320:	f000 f870 	bl	8002404 <FLASH_WaitForLastOperation>
 8002324:	4603      	mov	r3, r0
 8002326:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d12b      	bne.n	8002386 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002334:	783b      	ldrb	r3, [r7, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	68b8      	ldr	r0, [r7, #8]
 800233a:	f000 f91b 	bl	8002574 <FLASH_Program_Byte>
 800233e:	e016      	b.n	800236e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d105      	bne.n	8002352 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002346:	883b      	ldrh	r3, [r7, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	68b8      	ldr	r0, [r7, #8]
 800234c:	f000 f8ee 	bl	800252c <FLASH_Program_HalfWord>
 8002350:	e00d      	b.n	800236e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d105      	bne.n	8002364 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	68b8      	ldr	r0, [r7, #8]
 800235e:	f000 f8c3 	bl	80024e8 <FLASH_Program_Word>
 8002362:	e004      	b.n	800236e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002368:	68b8      	ldr	r0, [r7, #8]
 800236a:	f000 f88b 	bl	8002484 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800236e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002372:	f000 f847 	bl	8002404 <FLASH_WaitForLastOperation>
 8002376:	4603      	mov	r3, r0
 8002378:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800237a:	4b08      	ldr	r3, [pc, #32]	@ (800239c <HAL_FLASH_Program+0xa4>)
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	4a07      	ldr	r2, [pc, #28]	@ (800239c <HAL_FLASH_Program+0xa4>)
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002386:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <HAL_FLASH_Program+0xa0>)
 8002388:	2200      	movs	r2, #0
 800238a:	761a      	strb	r2, [r3, #24]

  return status;
 800238c:	7dfb      	ldrb	r3, [r7, #23]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20003628 	.word	0x20003628
 800239c:	40023c00 	.word	0x40023c00

080023a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80023aa:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <HAL_FLASH_Unlock+0x38>)
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	da0b      	bge.n	80023ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80023b2:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_FLASH_Unlock+0x38>)
 80023b4:	4a09      	ldr	r2, [pc, #36]	@ (80023dc <HAL_FLASH_Unlock+0x3c>)
 80023b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80023b8:	4b07      	ldr	r3, [pc, #28]	@ (80023d8 <HAL_FLASH_Unlock+0x38>)
 80023ba:	4a09      	ldr	r2, [pc, #36]	@ (80023e0 <HAL_FLASH_Unlock+0x40>)
 80023bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_FLASH_Unlock+0x38>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	da01      	bge.n	80023ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80023ca:	79fb      	ldrb	r3, [r7, #7]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	40023c00 	.word	0x40023c00
 80023dc:	45670123 	.word	0x45670123
 80023e0:	cdef89ab 	.word	0xcdef89ab

080023e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <HAL_FLASH_Lock+0x1c>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <HAL_FLASH_Lock+0x1c>)
 80023ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023f2:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40023c00 	.word	0x40023c00

08002404 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002410:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <FLASH_WaitForLastOperation+0x78>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002416:	f7ff fe5d 	bl	80020d4 <HAL_GetTick>
 800241a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800241c:	e010      	b.n	8002440 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d00c      	beq.n	8002440 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <FLASH_WaitForLastOperation+0x38>
 800242c:	f7ff fe52 	bl	80020d4 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	d201      	bcs.n	8002440 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e019      	b.n	8002474 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002440:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <FLASH_WaitForLastOperation+0x7c>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e8      	bne.n	800241e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <FLASH_WaitForLastOperation+0x7c>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002458:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <FLASH_WaitForLastOperation+0x7c>)
 800245a:	2201      	movs	r2, #1
 800245c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800245e:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <FLASH_WaitForLastOperation+0x7c>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800246a:	f000 f8a5 	bl	80025b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002472:	2300      	movs	r3, #0

}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20003628 	.word	0x20003628
 8002480:	40023c00 	.word	0x40023c00

08002484 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002490:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <FLASH_Program_DoubleWord+0x60>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	4a13      	ldr	r2, [pc, #76]	@ (80024e4 <FLASH_Program_DoubleWord+0x60>)
 8002496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800249a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800249c:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <FLASH_Program_DoubleWord+0x60>)
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	4a10      	ldr	r2, [pc, #64]	@ (80024e4 <FLASH_Program_DoubleWord+0x60>)
 80024a2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80024a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80024a8:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <FLASH_Program_DoubleWord+0x60>)
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <FLASH_Program_DoubleWord+0x60>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80024ba:	f3bf 8f6f 	isb	sy
}
 80024be:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80024c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	000a      	movs	r2, r1
 80024ce:	2300      	movs	r3, #0
 80024d0:	68f9      	ldr	r1, [r7, #12]
 80024d2:	3104      	adds	r1, #4
 80024d4:	4613      	mov	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	40023c00 	.word	0x40023c00

080024e8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <FLASH_Program_Word+0x40>)
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002528 <FLASH_Program_Word+0x40>)
 80024f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <FLASH_Program_Word+0x40>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	4a09      	ldr	r2, [pc, #36]	@ (8002528 <FLASH_Program_Word+0x40>)
 8002504:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002508:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800250a:	4b07      	ldr	r3, [pc, #28]	@ (8002528 <FLASH_Program_Word+0x40>)
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	4a06      	ldr	r2, [pc, #24]	@ (8002528 <FLASH_Program_Word+0x40>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	601a      	str	r2, [r3, #0]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40023c00 	.word	0x40023c00

0800252c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002538:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <FLASH_Program_HalfWord+0x44>)
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	4a0c      	ldr	r2, [pc, #48]	@ (8002570 <FLASH_Program_HalfWord+0x44>)
 800253e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002542:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002544:	4b0a      	ldr	r3, [pc, #40]	@ (8002570 <FLASH_Program_HalfWord+0x44>)
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	4a09      	ldr	r2, [pc, #36]	@ (8002570 <FLASH_Program_HalfWord+0x44>)
 800254a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800254e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002550:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <FLASH_Program_HalfWord+0x44>)
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	4a06      	ldr	r2, [pc, #24]	@ (8002570 <FLASH_Program_HalfWord+0x44>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	801a      	strh	r2, [r3, #0]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40023c00 	.word	0x40023c00

08002574 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002580:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <FLASH_Program_Byte+0x40>)
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	4a0b      	ldr	r2, [pc, #44]	@ (80025b4 <FLASH_Program_Byte+0x40>)
 8002586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800258a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800258c:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <FLASH_Program_Byte+0x40>)
 800258e:	4a09      	ldr	r2, [pc, #36]	@ (80025b4 <FLASH_Program_Byte+0x40>)
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002594:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <FLASH_Program_Byte+0x40>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	4a06      	ldr	r2, [pc, #24]	@ (80025b4 <FLASH_Program_Byte+0x40>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	701a      	strb	r2, [r3, #0]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40023c00 	.word	0x40023c00

080025b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80025bc:	4b2f      	ldr	r3, [pc, #188]	@ (800267c <FLASH_SetErrorCode+0xc4>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002680 <FLASH_SetErrorCode+0xc8>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f043 0310 	orr.w	r3, r3, #16
 80025d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002680 <FLASH_SetErrorCode+0xc8>)
 80025d2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80025d4:	4b29      	ldr	r3, [pc, #164]	@ (800267c <FLASH_SetErrorCode+0xc4>)
 80025d6:	2210      	movs	r2, #16
 80025d8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80025da:	4b28      	ldr	r3, [pc, #160]	@ (800267c <FLASH_SetErrorCode+0xc4>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80025e6:	4b26      	ldr	r3, [pc, #152]	@ (8002680 <FLASH_SetErrorCode+0xc8>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	4a24      	ldr	r2, [pc, #144]	@ (8002680 <FLASH_SetErrorCode+0xc8>)
 80025f0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80025f2:	4b22      	ldr	r3, [pc, #136]	@ (800267c <FLASH_SetErrorCode+0xc4>)
 80025f4:	2220      	movs	r2, #32
 80025f6:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80025f8:	4b20      	ldr	r3, [pc, #128]	@ (800267c <FLASH_SetErrorCode+0xc4>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002604:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <FLASH_SetErrorCode+0xc8>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	4a1c      	ldr	r2, [pc, #112]	@ (8002680 <FLASH_SetErrorCode+0xc8>)
 800260e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <FLASH_SetErrorCode+0xc4>)
 8002612:	2240      	movs	r2, #64	@ 0x40
 8002614:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <FLASH_SetErrorCode+0xc4>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002622:	4b17      	ldr	r3, [pc, #92]	@ (8002680 <FLASH_SetErrorCode+0xc8>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f043 0302 	orr.w	r3, r3, #2
 800262a:	4a15      	ldr	r2, [pc, #84]	@ (8002680 <FLASH_SetErrorCode+0xc8>)
 800262c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800262e:	4b13      	ldr	r3, [pc, #76]	@ (800267c <FLASH_SetErrorCode+0xc4>)
 8002630:	2280      	movs	r2, #128	@ 0x80
 8002632:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <FLASH_SetErrorCode+0xc4>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d009      	beq.n	8002654 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002640:	4b0f      	ldr	r3, [pc, #60]	@ (8002680 <FLASH_SetErrorCode+0xc8>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	4a0d      	ldr	r2, [pc, #52]	@ (8002680 <FLASH_SetErrorCode+0xc8>)
 800264a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800264c:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <FLASH_SetErrorCode+0xc4>)
 800264e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002652:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002654:	4b09      	ldr	r3, [pc, #36]	@ (800267c <FLASH_SetErrorCode+0xc4>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002660:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <FLASH_SetErrorCode+0xc8>)
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	f043 0320 	orr.w	r3, r3, #32
 8002668:	4a05      	ldr	r2, [pc, #20]	@ (8002680 <FLASH_SetErrorCode+0xc8>)
 800266a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800266c:	4b03      	ldr	r3, [pc, #12]	@ (800267c <FLASH_SetErrorCode+0xc4>)
 800266e:	2202      	movs	r2, #2
 8002670:	60da      	str	r2, [r3, #12]
  }
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	40023c00 	.word	0x40023c00
 8002680:	20003628 	.word	0x20003628

08002684 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002696:	4b31      	ldr	r3, [pc, #196]	@ (800275c <HAL_FLASHEx_Erase+0xd8>)
 8002698:	7e1b      	ldrb	r3, [r3, #24]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_FLASHEx_Erase+0x1e>
 800269e:	2302      	movs	r3, #2
 80026a0:	e058      	b.n	8002754 <HAL_FLASHEx_Erase+0xd0>
 80026a2:	4b2e      	ldr	r3, [pc, #184]	@ (800275c <HAL_FLASHEx_Erase+0xd8>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026ac:	f7ff feaa 	bl	8002404 <FLASH_WaitForLastOperation>
 80026b0:	4603      	mov	r3, r0
 80026b2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d148      	bne.n	800274c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d115      	bne.n	80026f6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4619      	mov	r1, r3
 80026d6:	4610      	mov	r0, r2
 80026d8:	f000 f844 	bl	8002764 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026e0:	f7ff fe90 	bl	8002404 <FLASH_WaitForLastOperation>
 80026e4:	4603      	mov	r3, r0
 80026e6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80026e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <HAL_FLASHEx_Erase+0xdc>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002760 <HAL_FLASHEx_Erase+0xdc>)
 80026ee:	f023 0304 	bic.w	r3, r3, #4
 80026f2:	6113      	str	r3, [r2, #16]
 80026f4:	e028      	b.n	8002748 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	e01c      	b.n	8002738 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	4619      	mov	r1, r3
 8002706:	68b8      	ldr	r0, [r7, #8]
 8002708:	f000 f850 	bl	80027ac <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800270c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002710:	f7ff fe78 	bl	8002404 <FLASH_WaitForLastOperation>
 8002714:	4603      	mov	r3, r0
 8002716:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <HAL_FLASHEx_Erase+0xdc>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	4a10      	ldr	r2, [pc, #64]	@ (8002760 <HAL_FLASHEx_Erase+0xdc>)
 800271e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002722:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	601a      	str	r2, [r3, #0]
          break;
 8002730:	e00a      	b.n	8002748 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	3301      	adds	r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4413      	add	r3, r2
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	429a      	cmp	r2, r3
 8002746:	d3da      	bcc.n	80026fe <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002748:	f000 f878 	bl	800283c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800274c:	4b03      	ldr	r3, [pc, #12]	@ (800275c <HAL_FLASHEx_Erase+0xd8>)
 800274e:	2200      	movs	r2, #0
 8002750:	761a      	strb	r2, [r3, #24]

  return status;
 8002752:	7bfb      	ldrb	r3, [r7, #15]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20003628 	.word	0x20003628
 8002760:	40023c00 	.word	0x40023c00

08002764 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002770:	4b0d      	ldr	r3, [pc, #52]	@ (80027a8 <FLASH_MassErase+0x44>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	4a0c      	ldr	r2, [pc, #48]	@ (80027a8 <FLASH_MassErase+0x44>)
 8002776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800277a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800277c:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <FLASH_MassErase+0x44>)
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	4a09      	ldr	r2, [pc, #36]	@ (80027a8 <FLASH_MassErase+0x44>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002788:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <FLASH_MassErase+0x44>)
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	4313      	orrs	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	@ (80027a8 <FLASH_MassErase+0x44>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002798:	6113      	str	r3, [r2, #16]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00

080027ac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e010      	b.n	80027ea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d103      	bne.n	80027d6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80027ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	e009      	b.n	80027ea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d103      	bne.n	80027e4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80027dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	e002      	b.n	80027ea <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80027e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027e8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027ea:	4b13      	ldr	r3, [pc, #76]	@ (8002838 <FLASH_Erase_Sector+0x8c>)
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	4a12      	ldr	r2, [pc, #72]	@ (8002838 <FLASH_Erase_Sector+0x8c>)
 80027f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <FLASH_Erase_Sector+0x8c>)
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	490f      	ldr	r1, [pc, #60]	@ (8002838 <FLASH_Erase_Sector+0x8c>)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002802:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <FLASH_Erase_Sector+0x8c>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	4a0c      	ldr	r2, [pc, #48]	@ (8002838 <FLASH_Erase_Sector+0x8c>)
 8002808:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800280c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800280e:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <FLASH_Erase_Sector+0x8c>)
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4313      	orrs	r3, r2
 8002818:	4a07      	ldr	r2, [pc, #28]	@ (8002838 <FLASH_Erase_Sector+0x8c>)
 800281a:	f043 0302 	orr.w	r3, r3, #2
 800281e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <FLASH_Erase_Sector+0x8c>)
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	4a04      	ldr	r2, [pc, #16]	@ (8002838 <FLASH_Erase_Sector+0x8c>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282a:	6113      	str	r3, [r2, #16]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	40023c00 	.word	0x40023c00

0800283c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002840:	4b20      	ldr	r3, [pc, #128]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002848:	2b00      	cmp	r3, #0
 800284a:	d017      	beq.n	800287c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800284c:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1c      	ldr	r2, [pc, #112]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 8002852:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002856:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002858:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a19      	ldr	r2, [pc, #100]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 800285e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b17      	ldr	r3, [pc, #92]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a16      	ldr	r2, [pc, #88]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 800286a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800286e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002870:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a13      	ldr	r2, [pc, #76]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 8002876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800287a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d017      	beq.n	80028b8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002888:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 800288e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002892:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002894:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 800289a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 80028a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028aa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <FLASH_FlushCaches+0x88>)
 80028b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028b6:	6013      	str	r3, [r2, #0]
  }
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00

080028c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	@ 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	e159      	b.n	8002b98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028e4:	2201      	movs	r2, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	f040 8148 	bne.w	8002b92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d005      	beq.n	800291a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002916:	2b02      	cmp	r3, #2
 8002918:	d130      	bne.n	800297c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2203      	movs	r2, #3
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002950:	2201      	movs	r2, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 0201 	and.w	r2, r3, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b03      	cmp	r3, #3
 8002986:	d017      	beq.n	80029b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d123      	bne.n	8002a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	08da      	lsrs	r2, r3, #3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3208      	adds	r2, #8
 80029cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	220f      	movs	r2, #15
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	08da      	lsrs	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3208      	adds	r2, #8
 8002a06:	69b9      	ldr	r1, [r7, #24]
 8002a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0203 	and.w	r2, r3, #3
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80a2 	beq.w	8002b92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b57      	ldr	r3, [pc, #348]	@ (8002bb0 <HAL_GPIO_Init+0x2e8>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a56:	4a56      	ldr	r2, [pc, #344]	@ (8002bb0 <HAL_GPIO_Init+0x2e8>)
 8002a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a5e:	4b54      	ldr	r3, [pc, #336]	@ (8002bb0 <HAL_GPIO_Init+0x2e8>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a6a:	4a52      	ldr	r2, [pc, #328]	@ (8002bb4 <HAL_GPIO_Init+0x2ec>)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	3302      	adds	r3, #2
 8002a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a49      	ldr	r2, [pc, #292]	@ (8002bb8 <HAL_GPIO_Init+0x2f0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d019      	beq.n	8002aca <HAL_GPIO_Init+0x202>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a48      	ldr	r2, [pc, #288]	@ (8002bbc <HAL_GPIO_Init+0x2f4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_GPIO_Init+0x1fe>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a47      	ldr	r2, [pc, #284]	@ (8002bc0 <HAL_GPIO_Init+0x2f8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00d      	beq.n	8002ac2 <HAL_GPIO_Init+0x1fa>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a46      	ldr	r2, [pc, #280]	@ (8002bc4 <HAL_GPIO_Init+0x2fc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d007      	beq.n	8002abe <HAL_GPIO_Init+0x1f6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a45      	ldr	r2, [pc, #276]	@ (8002bc8 <HAL_GPIO_Init+0x300>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_GPIO_Init+0x1f2>
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	e008      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002aba:	2307      	movs	r3, #7
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e004      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_GPIO_Init+0x204>
 8002aca:	2300      	movs	r3, #0
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	f002 0203 	and.w	r2, r2, #3
 8002ad2:	0092      	lsls	r2, r2, #2
 8002ad4:	4093      	lsls	r3, r2
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002adc:	4935      	ldr	r1, [pc, #212]	@ (8002bb4 <HAL_GPIO_Init+0x2ec>)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aea:	4b38      	ldr	r3, [pc, #224]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b0e:	4a2f      	ldr	r2, [pc, #188]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b14:	4b2d      	ldr	r3, [pc, #180]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b38:	4a24      	ldr	r2, [pc, #144]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b3e:	4b23      	ldr	r3, [pc, #140]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b62:	4a1a      	ldr	r2, [pc, #104]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b68:	4b18      	ldr	r3, [pc, #96]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b8c:	4a0f      	ldr	r2, [pc, #60]	@ (8002bcc <HAL_GPIO_Init+0x304>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3301      	adds	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b0f      	cmp	r3, #15
 8002b9c:	f67f aea2 	bls.w	80028e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3724      	adds	r7, #36	@ 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40013800 	.word	0x40013800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	40020400 	.word	0x40020400
 8002bc0:	40020800 	.word	0x40020800
 8002bc4:	40020c00 	.word	0x40020c00
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40013c00 	.word	0x40013c00

08002bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be0:	787b      	ldrb	r3, [r7, #1]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bec:	e003      	b.n	8002bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	041a      	lsls	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	619a      	str	r2, [r3, #24]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e12b      	b.n	8002e6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe fff4 	bl	8001c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2224      	movs	r2, #36	@ 0x24
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c68:	f001 f8da 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 8002c6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4a81      	ldr	r2, [pc, #516]	@ (8002e78 <HAL_I2C_Init+0x274>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d807      	bhi.n	8002c88 <HAL_I2C_Init+0x84>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a80      	ldr	r2, [pc, #512]	@ (8002e7c <HAL_I2C_Init+0x278>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	bf94      	ite	ls
 8002c80:	2301      	movls	r3, #1
 8002c82:	2300      	movhi	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	e006      	b.n	8002c96 <HAL_I2C_Init+0x92>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a7d      	ldr	r2, [pc, #500]	@ (8002e80 <HAL_I2C_Init+0x27c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	bf94      	ite	ls
 8002c90:	2301      	movls	r3, #1
 8002c92:	2300      	movhi	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0e7      	b.n	8002e6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4a78      	ldr	r2, [pc, #480]	@ (8002e84 <HAL_I2C_Init+0x280>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	0c9b      	lsrs	r3, r3, #18
 8002ca8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4a6a      	ldr	r2, [pc, #424]	@ (8002e78 <HAL_I2C_Init+0x274>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d802      	bhi.n	8002cd8 <HAL_I2C_Init+0xd4>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	e009      	b.n	8002cec <HAL_I2C_Init+0xe8>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	4a69      	ldr	r2, [pc, #420]	@ (8002e88 <HAL_I2C_Init+0x284>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	3301      	adds	r3, #1
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	495c      	ldr	r1, [pc, #368]	@ (8002e78 <HAL_I2C_Init+0x274>)
 8002d08:	428b      	cmp	r3, r1
 8002d0a:	d819      	bhi.n	8002d40 <HAL_I2C_Init+0x13c>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1e59      	subs	r1, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d1a:	1c59      	adds	r1, r3, #1
 8002d1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d20:	400b      	ands	r3, r1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_I2C_Init+0x138>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1e59      	subs	r1, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d34:	3301      	adds	r3, #1
 8002d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3a:	e051      	b.n	8002de0 <HAL_I2C_Init+0x1dc>
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	e04f      	b.n	8002de0 <HAL_I2C_Init+0x1dc>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d111      	bne.n	8002d6c <HAL_I2C_Init+0x168>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1e58      	subs	r0, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	440b      	add	r3, r1
 8002d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e012      	b.n	8002d92 <HAL_I2C_Init+0x18e>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1e58      	subs	r0, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	0099      	lsls	r1, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_I2C_Init+0x196>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e022      	b.n	8002de0 <HAL_I2C_Init+0x1dc>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10e      	bne.n	8002dc0 <HAL_I2C_Init+0x1bc>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1e58      	subs	r0, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6859      	ldr	r1, [r3, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	440b      	add	r3, r1
 8002db0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dbe:	e00f      	b.n	8002de0 <HAL_I2C_Init+0x1dc>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1e58      	subs	r0, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	0099      	lsls	r1, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ddc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	6809      	ldr	r1, [r1, #0]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6911      	ldr	r1, [r2, #16]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68d2      	ldr	r2, [r2, #12]
 8002e1a:	4311      	orrs	r1, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	000186a0 	.word	0x000186a0
 8002e7c:	001e847f 	.word	0x001e847f
 8002e80:	003d08ff 	.word	0x003d08ff
 8002e84:	431bde83 	.word	0x431bde83
 8002e88:	10624dd3 	.word	0x10624dd3

08002e8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	461a      	mov	r2, r3
 8002e98:	460b      	mov	r3, r1
 8002e9a:	817b      	strh	r3, [r7, #10]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ea0:	f7ff f918 	bl	80020d4 <HAL_GetTick>
 8002ea4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	f040 80e0 	bne.w	8003074 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	2319      	movs	r3, #25
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4970      	ldr	r1, [pc, #448]	@ (8003080 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f964 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0d3      	b.n	8003076 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_I2C_Master_Transmit+0x50>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e0cc      	b.n	8003076 <HAL_I2C_Master_Transmit+0x1ea>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d007      	beq.n	8002f02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0201 	orr.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2221      	movs	r2, #33	@ 0x21
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	893a      	ldrh	r2, [r7, #8]
 8002f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4a50      	ldr	r2, [pc, #320]	@ (8003084 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f44:	8979      	ldrh	r1, [r7, #10]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	6a3a      	ldr	r2, [r7, #32]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f89c 	bl	8003088 <I2C_MasterRequestWrite>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e08d      	b.n	8003076 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f70:	e066      	b.n	8003040 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	6a39      	ldr	r1, [r7, #32]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fa22 	bl	80033c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d107      	bne.n	8002f9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e06b      	b.n	8003076 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	781a      	ldrb	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d11b      	bne.n	8003014 <HAL_I2C_Master_Transmit+0x188>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d017      	beq.n	8003014 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	781a      	ldrb	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	6a39      	ldr	r1, [r7, #32]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 fa19 	bl	8003450 <I2C_WaitOnBTFFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00d      	beq.n	8003040 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	2b04      	cmp	r3, #4
 800302a:	d107      	bne.n	800303c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800303a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e01a      	b.n	8003076 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	d194      	bne.n	8002f72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	e000      	b.n	8003076 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003074:	2302      	movs	r3, #2
  }
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	00100002 	.word	0x00100002
 8003084:	ffff0000 	.word	0xffff0000

08003088 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af02      	add	r7, sp, #8
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	460b      	mov	r3, r1
 8003096:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d006      	beq.n	80030b2 <I2C_MasterRequestWrite+0x2a>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d003      	beq.n	80030b2 <I2C_MasterRequestWrite+0x2a>
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030b0:	d108      	bne.n	80030c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e00b      	b.n	80030dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	2b12      	cmp	r3, #18
 80030ca:	d107      	bne.n	80030dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f84f 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00d      	beq.n	8003110 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003102:	d103      	bne.n	800310c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e035      	b.n	800317c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003118:	d108      	bne.n	800312c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800311a:	897b      	ldrh	r3, [r7, #10]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003128:	611a      	str	r2, [r3, #16]
 800312a:	e01b      	b.n	8003164 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800312c:	897b      	ldrh	r3, [r7, #10]
 800312e:	11db      	asrs	r3, r3, #7
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f003 0306 	and.w	r3, r3, #6
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f063 030f 	orn	r3, r3, #15
 800313c:	b2da      	uxtb	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	490e      	ldr	r1, [pc, #56]	@ (8003184 <I2C_MasterRequestWrite+0xfc>)
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f898 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e010      	b.n	800317c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800315a:	897b      	ldrh	r3, [r7, #10]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4907      	ldr	r1, [pc, #28]	@ (8003188 <I2C_MasterRequestWrite+0x100>)
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f888 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	00010008 	.word	0x00010008
 8003188:	00010002 	.word	0x00010002

0800318c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800319c:	e048      	b.n	8003230 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d044      	beq.n	8003230 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a6:	f7fe ff95 	bl	80020d4 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d139      	bne.n	8003230 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	0c1b      	lsrs	r3, r3, #16
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10d      	bne.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	43da      	mvns	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4013      	ands	r3, r2
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	e00c      	b.n	80031fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	43da      	mvns	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4013      	ands	r3, r2
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d116      	bne.n	8003230 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e023      	b.n	8003278 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	0c1b      	lsrs	r3, r3, #16
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d10d      	bne.n	8003256 <I2C_WaitOnFlagUntilTimeout+0xca>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	43da      	mvns	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4013      	ands	r3, r2
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	e00c      	b.n	8003270 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	43da      	mvns	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4013      	ands	r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	429a      	cmp	r2, r3
 8003274:	d093      	beq.n	800319e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800328e:	e071      	b.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329e:	d123      	bne.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	f043 0204 	orr.w	r2, r3, #4
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e067      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d041      	beq.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f0:	f7fe fef0 	bl	80020d4 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d302      	bcc.n	8003306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d136      	bne.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d10c      	bne.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4013      	ands	r3, r2
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	bf14      	ite	ne
 8003322:	2301      	movne	r3, #1
 8003324:	2300      	moveq	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e00b      	b.n	8003342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	43da      	mvns	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4013      	ands	r3, r2
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d016      	beq.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e021      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	0c1b      	lsrs	r3, r3, #16
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d10c      	bne.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	43da      	mvns	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4013      	ands	r3, r2
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf14      	ite	ne
 8003390:	2301      	movne	r3, #1
 8003392:	2300      	moveq	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e00b      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	43da      	mvns	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4013      	ands	r3, r2
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bf14      	ite	ne
 80033aa:	2301      	movne	r3, #1
 80033ac:	2300      	moveq	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f47f af6d 	bne.w	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033cc:	e034      	b.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f886 	bl	80034e0 <I2C_IsAcknowledgeFailed>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e034      	b.n	8003448 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d028      	beq.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7fe fe75 	bl	80020d4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11d      	bne.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003406:	2b80      	cmp	r3, #128	@ 0x80
 8003408:	d016      	beq.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e007      	b.n	8003448 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003442:	2b80      	cmp	r3, #128	@ 0x80
 8003444:	d1c3      	bne.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800345c:	e034      	b.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f83e 	bl	80034e0 <I2C_IsAcknowledgeFailed>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e034      	b.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d028      	beq.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fe fe2d 	bl	80020d4 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d11d      	bne.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b04      	cmp	r3, #4
 8003498:	d016      	beq.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e007      	b.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d1c3      	bne.n	800345e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034f6:	d11b      	bne.n	8003530 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003500:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	f043 0204 	orr.w	r2, r3, #4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e267      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d075      	beq.n	800364a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800355e:	4b88      	ldr	r3, [pc, #544]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b04      	cmp	r3, #4
 8003568:	d00c      	beq.n	8003584 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356a:	4b85      	ldr	r3, [pc, #532]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003572:	2b08      	cmp	r3, #8
 8003574:	d112      	bne.n	800359c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003576:	4b82      	ldr	r3, [pc, #520]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800357e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003582:	d10b      	bne.n	800359c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	4b7e      	ldr	r3, [pc, #504]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05b      	beq.n	8003648 <HAL_RCC_OscConfig+0x108>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d157      	bne.n	8003648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e242      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a4:	d106      	bne.n	80035b4 <HAL_RCC_OscConfig+0x74>
 80035a6:	4b76      	ldr	r3, [pc, #472]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a75      	ldr	r2, [pc, #468]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e01d      	b.n	80035f0 <HAL_RCC_OscConfig+0xb0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x98>
 80035be:	4b70      	ldr	r3, [pc, #448]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a6f      	ldr	r2, [pc, #444]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e00b      	b.n	80035f0 <HAL_RCC_OscConfig+0xb0>
 80035d8:	4b69      	ldr	r3, [pc, #420]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a68      	ldr	r2, [pc, #416]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b66      	ldr	r3, [pc, #408]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a65      	ldr	r2, [pc, #404]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80035ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d013      	beq.n	8003620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe fd6c 	bl	80020d4 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003600:	f7fe fd68 	bl	80020d4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	@ 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e207      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	4b5b      	ldr	r3, [pc, #364]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0xc0>
 800361e:	e014      	b.n	800364a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fe fd58 	bl	80020d4 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003628:	f7fe fd54 	bl	80020d4 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	@ 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e1f3      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	4b51      	ldr	r3, [pc, #324]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0xe8>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d063      	beq.n	800371e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003656:	4b4a      	ldr	r3, [pc, #296]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003662:	4b47      	ldr	r3, [pc, #284]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800366a:	2b08      	cmp	r3, #8
 800366c:	d11c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800366e:	4b44      	ldr	r3, [pc, #272]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d116      	bne.n	80036a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	4b41      	ldr	r3, [pc, #260]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_RCC_OscConfig+0x152>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d001      	beq.n	8003692 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e1c7      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003692:	4b3b      	ldr	r3, [pc, #236]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4937      	ldr	r1, [pc, #220]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a6:	e03a      	b.n	800371e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b0:	4b34      	ldr	r3, [pc, #208]	@ (8003784 <HAL_RCC_OscConfig+0x244>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b6:	f7fe fd0d 	bl	80020d4 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036be:	f7fe fd09 	bl	80020d4 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e1a8      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036dc:	4b28      	ldr	r3, [pc, #160]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4925      	ldr	r1, [pc, #148]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]
 80036f0:	e015      	b.n	800371e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f2:	4b24      	ldr	r3, [pc, #144]	@ (8003784 <HAL_RCC_OscConfig+0x244>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fe fcec 	bl	80020d4 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003700:	f7fe fce8 	bl	80020d4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e187      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	4b1b      	ldr	r3, [pc, #108]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d036      	beq.n	8003798 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d016      	beq.n	8003760 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003732:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <HAL_RCC_OscConfig+0x248>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fe fccc 	bl	80020d4 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003740:	f7fe fcc8 	bl	80020d4 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e167      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <HAL_RCC_OscConfig+0x240>)
 8003754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0x200>
 800375e:	e01b      	b.n	8003798 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003760:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <HAL_RCC_OscConfig+0x248>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003766:	f7fe fcb5 	bl	80020d4 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376c:	e00e      	b.n	800378c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376e:	f7fe fcb1 	bl	80020d4 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d907      	bls.n	800378c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e150      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
 8003780:	40023800 	.word	0x40023800
 8003784:	42470000 	.word	0x42470000
 8003788:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378c:	4b88      	ldr	r3, [pc, #544]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800378e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1ea      	bne.n	800376e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8097 	beq.w	80038d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037aa:	4b81      	ldr	r3, [pc, #516]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	4b7d      	ldr	r3, [pc, #500]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	4a7c      	ldr	r2, [pc, #496]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037c6:	4b7a      	ldr	r3, [pc, #488]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d6:	4b77      	ldr	r3, [pc, #476]	@ (80039b4 <HAL_RCC_OscConfig+0x474>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d118      	bne.n	8003814 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e2:	4b74      	ldr	r3, [pc, #464]	@ (80039b4 <HAL_RCC_OscConfig+0x474>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a73      	ldr	r2, [pc, #460]	@ (80039b4 <HAL_RCC_OscConfig+0x474>)
 80037e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ee:	f7fe fc71 	bl	80020d4 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f6:	f7fe fc6d 	bl	80020d4 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e10c      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	4b6a      	ldr	r3, [pc, #424]	@ (80039b4 <HAL_RCC_OscConfig+0x474>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x2ea>
 800381c:	4b64      	ldr	r3, [pc, #400]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003820:	4a63      	ldr	r2, [pc, #396]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6713      	str	r3, [r2, #112]	@ 0x70
 8003828:	e01c      	b.n	8003864 <HAL_RCC_OscConfig+0x324>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b05      	cmp	r3, #5
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x30c>
 8003832:	4b5f      	ldr	r3, [pc, #380]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003836:	4a5e      	ldr	r2, [pc, #376]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	6713      	str	r3, [r2, #112]	@ 0x70
 800383e:	4b5c      	ldr	r3, [pc, #368]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003842:	4a5b      	ldr	r2, [pc, #364]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6713      	str	r3, [r2, #112]	@ 0x70
 800384a:	e00b      	b.n	8003864 <HAL_RCC_OscConfig+0x324>
 800384c:	4b58      	ldr	r3, [pc, #352]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003850:	4a57      	ldr	r2, [pc, #348]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	6713      	str	r3, [r2, #112]	@ 0x70
 8003858:	4b55      	ldr	r3, [pc, #340]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	4a54      	ldr	r2, [pc, #336]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800385e:	f023 0304 	bic.w	r3, r3, #4
 8003862:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d015      	beq.n	8003898 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fe fc32 	bl	80020d4 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003872:	e00a      	b.n	800388a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7fe fc2e 	bl	80020d4 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0cb      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388a:	4b49      	ldr	r3, [pc, #292]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ee      	beq.n	8003874 <HAL_RCC_OscConfig+0x334>
 8003896:	e014      	b.n	80038c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003898:	f7fe fc1c 	bl	80020d4 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a0:	f7fe fc18 	bl	80020d4 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e0b5      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b6:	4b3e      	ldr	r3, [pc, #248]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1ee      	bne.n	80038a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d105      	bne.n	80038d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c8:	4b39      	ldr	r3, [pc, #228]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80038ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038cc:	4a38      	ldr	r2, [pc, #224]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80038ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80a1 	beq.w	8003a20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038de:	4b34      	ldr	r3, [pc, #208]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d05c      	beq.n	80039a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d141      	bne.n	8003976 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f2:	4b31      	ldr	r3, [pc, #196]	@ (80039b8 <HAL_RCC_OscConfig+0x478>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fe fbec 	bl	80020d4 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003900:	f7fe fbe8 	bl	80020d4 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e087      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	4b27      	ldr	r3, [pc, #156]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	019b      	lsls	r3, r3, #6
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	3b01      	subs	r3, #1
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	491b      	ldr	r1, [pc, #108]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003948:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <HAL_RCC_OscConfig+0x478>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fe fbc1 	bl	80020d4 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003956:	f7fe fbbd 	bl	80020d4 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e05c      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003968:	4b11      	ldr	r3, [pc, #68]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x416>
 8003974:	e054      	b.n	8003a20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003976:	4b10      	ldr	r3, [pc, #64]	@ (80039b8 <HAL_RCC_OscConfig+0x478>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe fbaa 	bl	80020d4 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003984:	f7fe fba6 	bl	80020d4 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e045      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_RCC_OscConfig+0x470>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x444>
 80039a2:	e03d      	b.n	8003a20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e038      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40007000 	.word	0x40007000
 80039b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039bc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a2c <HAL_RCC_OscConfig+0x4ec>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d028      	beq.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d121      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d11a      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039ec:	4013      	ands	r3, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d111      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	3b01      	subs	r3, #1
 8003a06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023800 	.word	0x40023800

08003a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0cc      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a44:	4b68      	ldr	r3, [pc, #416]	@ (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d90c      	bls.n	8003a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b65      	ldr	r3, [pc, #404]	@ (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b63      	ldr	r3, [pc, #396]	@ (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0b8      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a84:	4b59      	ldr	r3, [pc, #356]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4a58      	ldr	r2, [pc, #352]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a9c:	4b53      	ldr	r3, [pc, #332]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4a52      	ldr	r2, [pc, #328]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa8:	4b50      	ldr	r3, [pc, #320]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	494d      	ldr	r1, [pc, #308]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d044      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	4b47      	ldr	r3, [pc, #284]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d119      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e07f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d107      	bne.n	8003afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aee:	4b3f      	ldr	r3, [pc, #252]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afe:	4b3b      	ldr	r3, [pc, #236]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e067      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b0e:	4b37      	ldr	r3, [pc, #220]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f023 0203 	bic.w	r2, r3, #3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4934      	ldr	r1, [pc, #208]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b20:	f7fe fad8 	bl	80020d4 <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b28:	f7fe fad4 	bl	80020d4 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e04f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 020c 	and.w	r2, r3, #12
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d1eb      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b50:	4b25      	ldr	r3, [pc, #148]	@ (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d20c      	bcs.n	8003b78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b22      	ldr	r3, [pc, #136]	@ (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b20      	ldr	r3, [pc, #128]	@ (8003be8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e032      	b.n	8003bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b84:	4b19      	ldr	r3, [pc, #100]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4916      	ldr	r1, [pc, #88]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba2:	4b12      	ldr	r3, [pc, #72]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	490e      	ldr	r1, [pc, #56]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bb6:	f000 f821 	bl	8003bfc <HAL_RCC_GetSysClockFreq>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	490a      	ldr	r1, [pc, #40]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc8:	5ccb      	ldrb	r3, [r1, r3]
 8003bca:	fa22 f303 	lsr.w	r3, r2, r3
 8003bce:	4a09      	ldr	r2, [pc, #36]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bd2:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe f916 	bl	8001e08 <HAL_InitTick>

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40023c00 	.word	0x40023c00
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	0800d784 	.word	0x0800d784
 8003bf4:	20000004 	.word	0x20000004
 8003bf8:	20000008 	.word	0x20000008

08003bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c00:	b094      	sub	sp, #80	@ 0x50
 8003c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c14:	4b79      	ldr	r3, [pc, #484]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 030c 	and.w	r3, r3, #12
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d00d      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x40>
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	f200 80e1 	bhi.w	8003de8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x34>
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c2e:	e0db      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c30:	4b73      	ldr	r3, [pc, #460]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c34:	e0db      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c36:	4b73      	ldr	r3, [pc, #460]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c3a:	e0d8      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c46:	4b6d      	ldr	r3, [pc, #436]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d063      	beq.n	8003d1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c52:	4b6a      	ldr	r3, [pc, #424]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	099b      	lsrs	r3, r3, #6
 8003c58:	2200      	movs	r2, #0
 8003c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c66:	2300      	movs	r3, #0
 8003c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c6e:	4622      	mov	r2, r4
 8003c70:	462b      	mov	r3, r5
 8003c72:	f04f 0000 	mov.w	r0, #0
 8003c76:	f04f 0100 	mov.w	r1, #0
 8003c7a:	0159      	lsls	r1, r3, #5
 8003c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c80:	0150      	lsls	r0, r2, #5
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4621      	mov	r1, r4
 8003c88:	1a51      	subs	r1, r2, r1
 8003c8a:	6139      	str	r1, [r7, #16]
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	018b      	lsls	r3, r1, #6
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003caa:	4651      	mov	r1, sl
 8003cac:	018a      	lsls	r2, r1, #6
 8003cae:	4651      	mov	r1, sl
 8003cb0:	ebb2 0801 	subs.w	r8, r2, r1
 8003cb4:	4659      	mov	r1, fp
 8003cb6:	eb63 0901 	sbc.w	r9, r3, r1
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cce:	4690      	mov	r8, r2
 8003cd0:	4699      	mov	r9, r3
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	eb18 0303 	adds.w	r3, r8, r3
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	462b      	mov	r3, r5
 8003cdc:	eb49 0303 	adc.w	r3, r9, r3
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cee:	4629      	mov	r1, r5
 8003cf0:	024b      	lsls	r3, r1, #9
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	024a      	lsls	r2, r1, #9
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d02:	2200      	movs	r2, #0
 8003d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d0c:	f7fc fb08 	bl	8000320 <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4613      	mov	r3, r2
 8003d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d18:	e058      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1a:	4b38      	ldr	r3, [pc, #224]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	099b      	lsrs	r3, r3, #6
 8003d20:	2200      	movs	r2, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	4611      	mov	r1, r2
 8003d26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d2a:	623b      	str	r3, [r7, #32]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	f04f 0000 	mov.w	r0, #0
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	0159      	lsls	r1, r3, #5
 8003d42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d46:	0150      	lsls	r0, r2, #5
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d52:	4649      	mov	r1, r9
 8003d54:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d6c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d70:	eb63 050b 	sbc.w	r5, r3, fp
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	00eb      	lsls	r3, r5, #3
 8003d7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d82:	00e2      	lsls	r2, r4, #3
 8003d84:	4614      	mov	r4, r2
 8003d86:	461d      	mov	r5, r3
 8003d88:	4643      	mov	r3, r8
 8003d8a:	18e3      	adds	r3, r4, r3
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	464b      	mov	r3, r9
 8003d90:	eb45 0303 	adc.w	r3, r5, r3
 8003d94:	607b      	str	r3, [r7, #4]
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003da2:	4629      	mov	r1, r5
 8003da4:	028b      	lsls	r3, r1, #10
 8003da6:	4621      	mov	r1, r4
 8003da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dac:	4621      	mov	r1, r4
 8003dae:	028a      	lsls	r2, r1, #10
 8003db0:	4610      	mov	r0, r2
 8003db2:	4619      	mov	r1, r3
 8003db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db6:	2200      	movs	r2, #0
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	61fa      	str	r2, [r7, #28]
 8003dbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc0:	f7fc faae 	bl	8000320 <__aeabi_uldivmod>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4613      	mov	r3, r2
 8003dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	0c1b      	lsrs	r3, r3, #16
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ddc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003de6:	e002      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003de8:	4b05      	ldr	r3, [pc, #20]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3750      	adds	r7, #80	@ 0x50
 8003df4:	46bd      	mov	sp, r7
 8003df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	00f42400 	.word	0x00f42400
 8003e04:	007a1200 	.word	0x007a1200

08003e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e0c:	4b03      	ldr	r3, [pc, #12]	@ (8003e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20000004 	.word	0x20000004

08003e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e24:	f7ff fff0 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	0a9b      	lsrs	r3, r3, #10
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	4903      	ldr	r1, [pc, #12]	@ (8003e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e36:	5ccb      	ldrb	r3, [r1, r3]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40023800 	.word	0x40023800
 8003e44:	0800d794 	.word	0x0800d794

08003e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e4c:	f7ff ffdc 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e50:	4602      	mov	r2, r0
 8003e52:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	0b5b      	lsrs	r3, r3, #13
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	4903      	ldr	r1, [pc, #12]	@ (8003e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e5e:	5ccb      	ldrb	r3, [r1, r3]
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	0800d794 	.word	0x0800d794

08003e70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	220f      	movs	r2, #15
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e80:	4b12      	ldr	r3, [pc, #72]	@ (8003ecc <HAL_RCC_GetClockConfig+0x5c>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0203 	and.w	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ecc <HAL_RCC_GetClockConfig+0x5c>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ecc <HAL_RCC_GetClockConfig+0x5c>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ea4:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <HAL_RCC_GetClockConfig+0x5c>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	08db      	lsrs	r3, r3, #3
 8003eaa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003eb2:	4b07      	ldr	r3, [pc, #28]	@ (8003ed0 <HAL_RCC_GetClockConfig+0x60>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0207 	and.w	r2, r3, #7
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	601a      	str	r2, [r3, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40023c00 	.word	0x40023c00

08003ed4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e07b      	b.n	8003fde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d108      	bne.n	8003f00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ef6:	d009      	beq.n	8003f0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	61da      	str	r2, [r3, #28]
 8003efe:	e005      	b.n	8003f0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fd febe 	bl	8001ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f90:	ea42 0103 	orr.w	r1, r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	f003 0104 	and.w	r1, r3, #4
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	f003 0210 	and.w	r2, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69da      	ldr	r2, [r3, #28]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b088      	sub	sp, #32
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff6:	f7fe f86d 	bl	80020d4 <HAL_GetTick>
 8003ffa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d001      	beq.n	8004010 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800400c:	2302      	movs	r3, #2
 800400e:	e12a      	b.n	8004266 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_SPI_Transmit+0x36>
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e122      	b.n	8004266 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_SPI_Transmit+0x48>
 800402a:	2302      	movs	r3, #2
 800402c:	e11b      	b.n	8004266 <HAL_SPI_Transmit+0x280>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2203      	movs	r2, #3
 800403a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	88fa      	ldrh	r2, [r7, #6]
 800404e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	88fa      	ldrh	r2, [r7, #6]
 8004054:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800407c:	d10f      	bne.n	800409e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800408c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800409c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a8:	2b40      	cmp	r3, #64	@ 0x40
 80040aa:	d007      	beq.n	80040bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040c4:	d152      	bne.n	800416c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_SPI_Transmit+0xee>
 80040ce:	8b7b      	ldrh	r3, [r7, #26]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d145      	bne.n	8004160 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d8:	881a      	ldrh	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e4:	1c9a      	adds	r2, r3, #2
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040f8:	e032      	b.n	8004160 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b02      	cmp	r3, #2
 8004106:	d112      	bne.n	800412e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410c:	881a      	ldrh	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004118:	1c9a      	adds	r2, r3, #2
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800412c:	e018      	b.n	8004160 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800412e:	f7fd ffd1 	bl	80020d4 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d803      	bhi.n	8004146 <HAL_SPI_Transmit+0x160>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d102      	bne.n	800414c <HAL_SPI_Transmit+0x166>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d109      	bne.n	8004160 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e082      	b.n	8004266 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1c7      	bne.n	80040fa <HAL_SPI_Transmit+0x114>
 800416a:	e053      	b.n	8004214 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_SPI_Transmit+0x194>
 8004174:	8b7b      	ldrh	r3, [r7, #26]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d147      	bne.n	800420a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041a0:	e033      	b.n	800420a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d113      	bne.n	80041d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	7812      	ldrb	r2, [r2, #0]
 80041bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80041d6:	e018      	b.n	800420a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d8:	f7fd ff7c 	bl	80020d4 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d803      	bhi.n	80041f0 <HAL_SPI_Transmit+0x20a>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d102      	bne.n	80041f6 <HAL_SPI_Transmit+0x210>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e02d      	b.n	8004266 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1c6      	bne.n	80041a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	6839      	ldr	r1, [r7, #0]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 fa59 	bl	80046d0 <SPI_EndRxTxTransaction>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004264:	2300      	movs	r3, #0
  }
}
 8004266:	4618      	mov	r0, r3
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b08a      	sub	sp, #40	@ 0x28
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800427c:	2301      	movs	r3, #1
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004280:	f7fd ff28 	bl	80020d4 <HAL_GetTick>
 8004284:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800428c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004294:	887b      	ldrh	r3, [r7, #2]
 8004296:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004298:	7ffb      	ldrb	r3, [r7, #31]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d00c      	beq.n	80042b8 <HAL_SPI_TransmitReceive+0x4a>
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042a4:	d106      	bne.n	80042b4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <HAL_SPI_TransmitReceive+0x46>
 80042ae:	7ffb      	ldrb	r3, [r7, #31]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d001      	beq.n	80042b8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
 80042b6:	e17f      	b.n	80045b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <HAL_SPI_TransmitReceive+0x5c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_SPI_TransmitReceive+0x5c>
 80042c4:	887b      	ldrh	r3, [r7, #2]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e174      	b.n	80045b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_SPI_TransmitReceive+0x6e>
 80042d8:	2302      	movs	r3, #2
 80042da:	e16d      	b.n	80045b8 <HAL_SPI_TransmitReceive+0x34a>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d003      	beq.n	80042f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2205      	movs	r2, #5
 80042f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	887a      	ldrh	r2, [r7, #2]
 8004308:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	887a      	ldrh	r2, [r7, #2]
 800430e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	887a      	ldrh	r2, [r7, #2]
 800431a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	887a      	ldrh	r2, [r7, #2]
 8004320:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004338:	2b40      	cmp	r3, #64	@ 0x40
 800433a:	d007      	beq.n	800434c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004354:	d17e      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_SPI_TransmitReceive+0xf6>
 800435e:	8afb      	ldrh	r3, [r7, #22]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d16c      	bne.n	800443e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004388:	e059      	b.n	800443e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d11b      	bne.n	80043d0 <HAL_SPI_TransmitReceive+0x162>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d016      	beq.n	80043d0 <HAL_SPI_TransmitReceive+0x162>
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d113      	bne.n	80043d0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ac:	881a      	ldrh	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b8:	1c9a      	adds	r2, r3, #2
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d119      	bne.n	8004412 <HAL_SPI_TransmitReceive+0x1a4>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d014      	beq.n	8004412 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f2:	b292      	uxth	r2, r2
 80043f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fa:	1c9a      	adds	r2, r3, #2
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800440e:	2301      	movs	r3, #1
 8004410:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004412:	f7fd fe5f 	bl	80020d4 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800441e:	429a      	cmp	r2, r3
 8004420:	d80d      	bhi.n	800443e <HAL_SPI_TransmitReceive+0x1d0>
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d009      	beq.n	800443e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e0bc      	b.n	80045b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1a0      	bne.n	800438a <HAL_SPI_TransmitReceive+0x11c>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d19b      	bne.n	800438a <HAL_SPI_TransmitReceive+0x11c>
 8004452:	e082      	b.n	800455a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <HAL_SPI_TransmitReceive+0x1f4>
 800445c:	8afb      	ldrh	r3, [r7, #22]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d171      	bne.n	8004546 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	330c      	adds	r3, #12
 800446c:	7812      	ldrb	r2, [r2, #0]
 800446e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004488:	e05d      	b.n	8004546 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b02      	cmp	r3, #2
 8004496:	d11c      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x264>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d017      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0x264>
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d114      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	7812      	ldrb	r2, [r2, #0]
 80044b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d119      	bne.n	8004514 <HAL_SPI_TransmitReceive+0x2a6>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d014      	beq.n	8004514 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004510:	2301      	movs	r3, #1
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004514:	f7fd fdde 	bl	80020d4 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004520:	429a      	cmp	r2, r3
 8004522:	d803      	bhi.n	800452c <HAL_SPI_TransmitReceive+0x2be>
 8004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452a:	d102      	bne.n	8004532 <HAL_SPI_TransmitReceive+0x2c4>
 800452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e038      	b.n	80045b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d19c      	bne.n	800448a <HAL_SPI_TransmitReceive+0x21c>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d197      	bne.n	800448a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800455a:	6a3a      	ldr	r2, [r7, #32]
 800455c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f8b6 	bl	80046d0 <SPI_EndRxTxTransaction>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d008      	beq.n	800457c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e01d      	b.n	80045b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80045b6:	2300      	movs	r3, #0
  }
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3728      	adds	r7, #40	@ 0x28
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045d0:	f7fd fd80 	bl	80020d4 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	4413      	add	r3, r2
 80045de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045e0:	f7fd fd78 	bl	80020d4 <HAL_GetTick>
 80045e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045e6:	4b39      	ldr	r3, [pc, #228]	@ (80046cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	015b      	lsls	r3, r3, #5
 80045ec:	0d1b      	lsrs	r3, r3, #20
 80045ee:	69fa      	ldr	r2, [r7, #28]
 80045f0:	fb02 f303 	mul.w	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045f6:	e054      	b.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d050      	beq.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004600:	f7fd fd68 	bl	80020d4 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	429a      	cmp	r2, r3
 800460e:	d902      	bls.n	8004616 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d13d      	bne.n	8004692 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004624:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800462e:	d111      	bne.n	8004654 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004638:	d004      	beq.n	8004644 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004642:	d107      	bne.n	8004654 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004652:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800465c:	d10f      	bne.n	800467e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800467c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e017      	b.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	3b01      	subs	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4013      	ands	r3, r2
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	bf0c      	ite	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	2300      	movne	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d19b      	bne.n	80045f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3720      	adds	r7, #32
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000004 	.word	0x20000004

080046d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2201      	movs	r2, #1
 80046e4:	2102      	movs	r1, #2
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7ff ff6a 	bl	80045c0 <SPI_WaitFlagStateUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e032      	b.n	8004768 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004702:	4b1b      	ldr	r3, [pc, #108]	@ (8004770 <SPI_EndRxTxTransaction+0xa0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1b      	ldr	r2, [pc, #108]	@ (8004774 <SPI_EndRxTxTransaction+0xa4>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	0d5b      	lsrs	r3, r3, #21
 800470e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004712:	fb02 f303 	mul.w	r3, r2, r3
 8004716:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004720:	d112      	bne.n	8004748 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2200      	movs	r2, #0
 800472a:	2180      	movs	r1, #128	@ 0x80
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7ff ff47 	bl	80045c0 <SPI_WaitFlagStateUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d016      	beq.n	8004766 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473c:	f043 0220 	orr.w	r2, r3, #32
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e00f      	b.n	8004768 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	3b01      	subs	r3, #1
 8004752:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475e:	2b80      	cmp	r3, #128	@ 0x80
 8004760:	d0f2      	beq.n	8004748 <SPI_EndRxTxTransaction+0x78>
 8004762:	e000      	b.n	8004766 <SPI_EndRxTxTransaction+0x96>
        break;
 8004764:	bf00      	nop
  }

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20000004 	.word	0x20000004
 8004774:	165e9f81 	.word	0x165e9f81

08004778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e041      	b.n	800480e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f839 	bl	8004816 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f000 f9b2 	bl	8004b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
	...

0800482c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d001      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e044      	b.n	80048ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1e      	ldr	r2, [pc, #120]	@ (80048dc <HAL_TIM_Base_Start_IT+0xb0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d018      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x6c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800486e:	d013      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x6c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1a      	ldr	r2, [pc, #104]	@ (80048e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00e      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x6c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a19      	ldr	r2, [pc, #100]	@ (80048e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d009      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x6c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a17      	ldr	r2, [pc, #92]	@ (80048e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x6c>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a16      	ldr	r2, [pc, #88]	@ (80048ec <HAL_TIM_Base_Start_IT+0xc0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d111      	bne.n	80048bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d010      	beq.n	80048cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ba:	e007      	b.n	80048cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40014000 	.word	0x40014000

080048f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d020      	beq.n	8004954 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01b      	beq.n	8004954 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0202 	mvn.w	r2, #2
 8004924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8d2 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f8c4 	bl	8004ad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f8d5 	bl	8004af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	d020      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01b      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0204 	mvn.w	r2, #4
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f8ac 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f89e 	bl	8004ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f8af 	bl	8004af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d020      	beq.n	80049ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01b      	beq.n	80049ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0208 	mvn.w	r2, #8
 80049bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2204      	movs	r2, #4
 80049c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f886 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 80049d8:	e005      	b.n	80049e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f878 	bl	8004ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f889 	bl	8004af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d020      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01b      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0210 	mvn.w	r2, #16
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f860 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f852 	bl	8004ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f863 	bl	8004af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00c      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0201 	mvn.w	r2, #1
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fd f860 	bl	8001b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00c      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f8e6 	bl	8004c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00c      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f834 	bl	8004b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0220 	mvn.w	r2, #32
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8b8 	bl	8004c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a3a      	ldr	r2, [pc, #232]	@ (8004c1c <TIM_Base_SetConfig+0xfc>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00f      	beq.n	8004b58 <TIM_Base_SetConfig+0x38>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b3e:	d00b      	beq.n	8004b58 <TIM_Base_SetConfig+0x38>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a37      	ldr	r2, [pc, #220]	@ (8004c20 <TIM_Base_SetConfig+0x100>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d007      	beq.n	8004b58 <TIM_Base_SetConfig+0x38>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a36      	ldr	r2, [pc, #216]	@ (8004c24 <TIM_Base_SetConfig+0x104>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_Base_SetConfig+0x38>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a35      	ldr	r2, [pc, #212]	@ (8004c28 <TIM_Base_SetConfig+0x108>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d108      	bne.n	8004b6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c1c <TIM_Base_SetConfig+0xfc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d01b      	beq.n	8004baa <TIM_Base_SetConfig+0x8a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b78:	d017      	beq.n	8004baa <TIM_Base_SetConfig+0x8a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a28      	ldr	r2, [pc, #160]	@ (8004c20 <TIM_Base_SetConfig+0x100>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d013      	beq.n	8004baa <TIM_Base_SetConfig+0x8a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a27      	ldr	r2, [pc, #156]	@ (8004c24 <TIM_Base_SetConfig+0x104>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00f      	beq.n	8004baa <TIM_Base_SetConfig+0x8a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a26      	ldr	r2, [pc, #152]	@ (8004c28 <TIM_Base_SetConfig+0x108>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00b      	beq.n	8004baa <TIM_Base_SetConfig+0x8a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a25      	ldr	r2, [pc, #148]	@ (8004c2c <TIM_Base_SetConfig+0x10c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d007      	beq.n	8004baa <TIM_Base_SetConfig+0x8a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a24      	ldr	r2, [pc, #144]	@ (8004c30 <TIM_Base_SetConfig+0x110>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d003      	beq.n	8004baa <TIM_Base_SetConfig+0x8a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a23      	ldr	r2, [pc, #140]	@ (8004c34 <TIM_Base_SetConfig+0x114>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d108      	bne.n	8004bbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a0e      	ldr	r2, [pc, #56]	@ (8004c1c <TIM_Base_SetConfig+0xfc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d103      	bne.n	8004bf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d105      	bne.n	8004c0e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f023 0201 	bic.w	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	611a      	str	r2, [r3, #16]
  }
}
 8004c0e:	bf00      	nop
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40010000 	.word	0x40010000
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40000800 	.word	0x40000800
 8004c28:	40000c00 	.word	0x40000c00
 8004c2c:	40014000 	.word	0x40014000
 8004c30:	40014400 	.word	0x40014400
 8004c34:	40014800 	.word	0x40014800

08004c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e042      	b.n	8004cf8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fd f876 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2224      	movs	r2, #36	@ 0x24
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f973 	bl	8004f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695a      	ldr	r2, [r3, #20]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	@ 0x28
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d175      	bne.n	8004e0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <HAL_UART_Transmit+0x2c>
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e06e      	b.n	8004e0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2221      	movs	r2, #33	@ 0x21
 8004d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d3e:	f7fd f9c9 	bl	80020d4 <HAL_GetTick>
 8004d42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	88fa      	ldrh	r2, [r7, #6]
 8004d4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d58:	d108      	bne.n	8004d6c <HAL_UART_Transmit+0x6c>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d104      	bne.n	8004d6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	e003      	b.n	8004d74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d74:	e02e      	b.n	8004dd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2180      	movs	r1, #128	@ 0x80
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 f848 	bl	8004e16 <UART_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e03a      	b.n	8004e0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10b      	bne.n	8004db6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	3302      	adds	r3, #2
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	e007      	b.n	8004dc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	781a      	ldrb	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1cb      	bne.n	8004d76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2200      	movs	r2, #0
 8004de6:	2140      	movs	r1, #64	@ 0x40
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f814 	bl	8004e16 <UART_WaitOnFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e006      	b.n	8004e0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e000      	b.n	8004e0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e0c:	2302      	movs	r3, #2
  }
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3720      	adds	r7, #32
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b086      	sub	sp, #24
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	4613      	mov	r3, r2
 8004e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e26:	e03b      	b.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d037      	beq.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e30:	f7fd f950 	bl	80020d4 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	6a3a      	ldr	r2, [r7, #32]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d302      	bcc.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e03a      	b.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d023      	beq.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b80      	cmp	r3, #128	@ 0x80
 8004e5c:	d020      	beq.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b40      	cmp	r3, #64	@ 0x40
 8004e62:	d01d      	beq.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d116      	bne.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f81d 	bl	8004ec8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2208      	movs	r2, #8
 8004e92:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e00f      	b.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	bf0c      	ite	eq
 8004eb0:	2301      	moveq	r3, #1
 8004eb2:	2300      	movne	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d0b4      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b095      	sub	sp, #84	@ 0x54
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ef0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ef6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e5      	bne.n	8004ed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3314      	adds	r3, #20
 8004f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3314      	adds	r3, #20
 8004f22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e5      	bne.n	8004f04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d119      	bne.n	8004f74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f023 0310 	bic.w	r3, r3, #16
 8004f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f60:	61ba      	str	r2, [r7, #24]
 8004f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6979      	ldr	r1, [r7, #20]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f82:	bf00      	nop
 8004f84:	3754      	adds	r7, #84	@ 0x54
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f94:	b0c0      	sub	sp, #256	@ 0x100
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fac:	68d9      	ldr	r1, [r3, #12]
 8004fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	ea40 0301 	orr.w	r3, r0, r1
 8004fb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004fe8:	f021 010c 	bic.w	r1, r1, #12
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500a:	6999      	ldr	r1, [r3, #24]
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	ea40 0301 	orr.w	r3, r0, r1
 8005016:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4b8f      	ldr	r3, [pc, #572]	@ (800525c <UART_SetConfig+0x2cc>)
 8005020:	429a      	cmp	r2, r3
 8005022:	d005      	beq.n	8005030 <UART_SetConfig+0xa0>
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b8d      	ldr	r3, [pc, #564]	@ (8005260 <UART_SetConfig+0x2d0>)
 800502c:	429a      	cmp	r2, r3
 800502e:	d104      	bne.n	800503a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005030:	f7fe ff0a 	bl	8003e48 <HAL_RCC_GetPCLK2Freq>
 8005034:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005038:	e003      	b.n	8005042 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800503a:	f7fe fef1 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 800503e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800504c:	f040 810c 	bne.w	8005268 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005054:	2200      	movs	r2, #0
 8005056:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800505a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800505e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005062:	4622      	mov	r2, r4
 8005064:	462b      	mov	r3, r5
 8005066:	1891      	adds	r1, r2, r2
 8005068:	65b9      	str	r1, [r7, #88]	@ 0x58
 800506a:	415b      	adcs	r3, r3
 800506c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800506e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005072:	4621      	mov	r1, r4
 8005074:	eb12 0801 	adds.w	r8, r2, r1
 8005078:	4629      	mov	r1, r5
 800507a:	eb43 0901 	adc.w	r9, r3, r1
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800508a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800508e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005092:	4690      	mov	r8, r2
 8005094:	4699      	mov	r9, r3
 8005096:	4623      	mov	r3, r4
 8005098:	eb18 0303 	adds.w	r3, r8, r3
 800509c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050a0:	462b      	mov	r3, r5
 80050a2:	eb49 0303 	adc.w	r3, r9, r3
 80050a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050be:	460b      	mov	r3, r1
 80050c0:	18db      	adds	r3, r3, r3
 80050c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050c4:	4613      	mov	r3, r2
 80050c6:	eb42 0303 	adc.w	r3, r2, r3
 80050ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80050cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050d4:	f7fb f924 	bl	8000320 <__aeabi_uldivmod>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4b61      	ldr	r3, [pc, #388]	@ (8005264 <UART_SetConfig+0x2d4>)
 80050de:	fba3 2302 	umull	r2, r3, r3, r2
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	011c      	lsls	r4, r3, #4
 80050e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050f8:	4642      	mov	r2, r8
 80050fa:	464b      	mov	r3, r9
 80050fc:	1891      	adds	r1, r2, r2
 80050fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005100:	415b      	adcs	r3, r3
 8005102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005104:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005108:	4641      	mov	r1, r8
 800510a:	eb12 0a01 	adds.w	sl, r2, r1
 800510e:	4649      	mov	r1, r9
 8005110:	eb43 0b01 	adc.w	fp, r3, r1
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005120:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005124:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005128:	4692      	mov	sl, r2
 800512a:	469b      	mov	fp, r3
 800512c:	4643      	mov	r3, r8
 800512e:	eb1a 0303 	adds.w	r3, sl, r3
 8005132:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005136:	464b      	mov	r3, r9
 8005138:	eb4b 0303 	adc.w	r3, fp, r3
 800513c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800514c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005150:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005154:	460b      	mov	r3, r1
 8005156:	18db      	adds	r3, r3, r3
 8005158:	643b      	str	r3, [r7, #64]	@ 0x40
 800515a:	4613      	mov	r3, r2
 800515c:	eb42 0303 	adc.w	r3, r2, r3
 8005160:	647b      	str	r3, [r7, #68]	@ 0x44
 8005162:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005166:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800516a:	f7fb f8d9 	bl	8000320 <__aeabi_uldivmod>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4611      	mov	r1, r2
 8005174:	4b3b      	ldr	r3, [pc, #236]	@ (8005264 <UART_SetConfig+0x2d4>)
 8005176:	fba3 2301 	umull	r2, r3, r3, r1
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2264      	movs	r2, #100	@ 0x64
 800517e:	fb02 f303 	mul.w	r3, r2, r3
 8005182:	1acb      	subs	r3, r1, r3
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800518a:	4b36      	ldr	r3, [pc, #216]	@ (8005264 <UART_SetConfig+0x2d4>)
 800518c:	fba3 2302 	umull	r2, r3, r3, r2
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005198:	441c      	add	r4, r3
 800519a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051ac:	4642      	mov	r2, r8
 80051ae:	464b      	mov	r3, r9
 80051b0:	1891      	adds	r1, r2, r2
 80051b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051b4:	415b      	adcs	r3, r3
 80051b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051bc:	4641      	mov	r1, r8
 80051be:	1851      	adds	r1, r2, r1
 80051c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80051c2:	4649      	mov	r1, r9
 80051c4:	414b      	adcs	r3, r1
 80051c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051d4:	4659      	mov	r1, fp
 80051d6:	00cb      	lsls	r3, r1, #3
 80051d8:	4651      	mov	r1, sl
 80051da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051de:	4651      	mov	r1, sl
 80051e0:	00ca      	lsls	r2, r1, #3
 80051e2:	4610      	mov	r0, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	4603      	mov	r3, r0
 80051e8:	4642      	mov	r2, r8
 80051ea:	189b      	adds	r3, r3, r2
 80051ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051f0:	464b      	mov	r3, r9
 80051f2:	460a      	mov	r2, r1
 80051f4:	eb42 0303 	adc.w	r3, r2, r3
 80051f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005208:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800520c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005210:	460b      	mov	r3, r1
 8005212:	18db      	adds	r3, r3, r3
 8005214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005216:	4613      	mov	r3, r2
 8005218:	eb42 0303 	adc.w	r3, r2, r3
 800521c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800521e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005222:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005226:	f7fb f87b 	bl	8000320 <__aeabi_uldivmod>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	4b0d      	ldr	r3, [pc, #52]	@ (8005264 <UART_SetConfig+0x2d4>)
 8005230:	fba3 1302 	umull	r1, r3, r3, r2
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	2164      	movs	r1, #100	@ 0x64
 8005238:	fb01 f303 	mul.w	r3, r1, r3
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	3332      	adds	r3, #50	@ 0x32
 8005242:	4a08      	ldr	r2, [pc, #32]	@ (8005264 <UART_SetConfig+0x2d4>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	f003 0207 	and.w	r2, r3, #7
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4422      	add	r2, r4
 8005256:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005258:	e106      	b.n	8005468 <UART_SetConfig+0x4d8>
 800525a:	bf00      	nop
 800525c:	40011000 	.word	0x40011000
 8005260:	40011400 	.word	0x40011400
 8005264:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800526c:	2200      	movs	r2, #0
 800526e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005272:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005276:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800527a:	4642      	mov	r2, r8
 800527c:	464b      	mov	r3, r9
 800527e:	1891      	adds	r1, r2, r2
 8005280:	6239      	str	r1, [r7, #32]
 8005282:	415b      	adcs	r3, r3
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
 8005286:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800528a:	4641      	mov	r1, r8
 800528c:	1854      	adds	r4, r2, r1
 800528e:	4649      	mov	r1, r9
 8005290:	eb43 0501 	adc.w	r5, r3, r1
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	00eb      	lsls	r3, r5, #3
 800529e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052a2:	00e2      	lsls	r2, r4, #3
 80052a4:	4614      	mov	r4, r2
 80052a6:	461d      	mov	r5, r3
 80052a8:	4643      	mov	r3, r8
 80052aa:	18e3      	adds	r3, r4, r3
 80052ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052b0:	464b      	mov	r3, r9
 80052b2:	eb45 0303 	adc.w	r3, r5, r3
 80052b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052d6:	4629      	mov	r1, r5
 80052d8:	008b      	lsls	r3, r1, #2
 80052da:	4621      	mov	r1, r4
 80052dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052e0:	4621      	mov	r1, r4
 80052e2:	008a      	lsls	r2, r1, #2
 80052e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80052e8:	f7fb f81a 	bl	8000320 <__aeabi_uldivmod>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4b60      	ldr	r3, [pc, #384]	@ (8005474 <UART_SetConfig+0x4e4>)
 80052f2:	fba3 2302 	umull	r2, r3, r3, r2
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	011c      	lsls	r4, r3, #4
 80052fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052fe:	2200      	movs	r2, #0
 8005300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005304:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005308:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800530c:	4642      	mov	r2, r8
 800530e:	464b      	mov	r3, r9
 8005310:	1891      	adds	r1, r2, r2
 8005312:	61b9      	str	r1, [r7, #24]
 8005314:	415b      	adcs	r3, r3
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800531c:	4641      	mov	r1, r8
 800531e:	1851      	adds	r1, r2, r1
 8005320:	6139      	str	r1, [r7, #16]
 8005322:	4649      	mov	r1, r9
 8005324:	414b      	adcs	r3, r1
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005334:	4659      	mov	r1, fp
 8005336:	00cb      	lsls	r3, r1, #3
 8005338:	4651      	mov	r1, sl
 800533a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800533e:	4651      	mov	r1, sl
 8005340:	00ca      	lsls	r2, r1, #3
 8005342:	4610      	mov	r0, r2
 8005344:	4619      	mov	r1, r3
 8005346:	4603      	mov	r3, r0
 8005348:	4642      	mov	r2, r8
 800534a:	189b      	adds	r3, r3, r2
 800534c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005350:	464b      	mov	r3, r9
 8005352:	460a      	mov	r2, r1
 8005354:	eb42 0303 	adc.w	r3, r2, r3
 8005358:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005366:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005374:	4649      	mov	r1, r9
 8005376:	008b      	lsls	r3, r1, #2
 8005378:	4641      	mov	r1, r8
 800537a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800537e:	4641      	mov	r1, r8
 8005380:	008a      	lsls	r2, r1, #2
 8005382:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005386:	f7fa ffcb 	bl	8000320 <__aeabi_uldivmod>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4611      	mov	r1, r2
 8005390:	4b38      	ldr	r3, [pc, #224]	@ (8005474 <UART_SetConfig+0x4e4>)
 8005392:	fba3 2301 	umull	r2, r3, r3, r1
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	2264      	movs	r2, #100	@ 0x64
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	1acb      	subs	r3, r1, r3
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	3332      	adds	r3, #50	@ 0x32
 80053a4:	4a33      	ldr	r2, [pc, #204]	@ (8005474 <UART_SetConfig+0x4e4>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053b0:	441c      	add	r4, r3
 80053b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b6:	2200      	movs	r2, #0
 80053b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80053ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80053bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053c0:	4642      	mov	r2, r8
 80053c2:	464b      	mov	r3, r9
 80053c4:	1891      	adds	r1, r2, r2
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	415b      	adcs	r3, r3
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053d0:	4641      	mov	r1, r8
 80053d2:	1851      	adds	r1, r2, r1
 80053d4:	6039      	str	r1, [r7, #0]
 80053d6:	4649      	mov	r1, r9
 80053d8:	414b      	adcs	r3, r1
 80053da:	607b      	str	r3, [r7, #4]
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053e8:	4659      	mov	r1, fp
 80053ea:	00cb      	lsls	r3, r1, #3
 80053ec:	4651      	mov	r1, sl
 80053ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053f2:	4651      	mov	r1, sl
 80053f4:	00ca      	lsls	r2, r1, #3
 80053f6:	4610      	mov	r0, r2
 80053f8:	4619      	mov	r1, r3
 80053fa:	4603      	mov	r3, r0
 80053fc:	4642      	mov	r2, r8
 80053fe:	189b      	adds	r3, r3, r2
 8005400:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005402:	464b      	mov	r3, r9
 8005404:	460a      	mov	r2, r1
 8005406:	eb42 0303 	adc.w	r3, r2, r3
 800540a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	663b      	str	r3, [r7, #96]	@ 0x60
 8005416:	667a      	str	r2, [r7, #100]	@ 0x64
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005424:	4649      	mov	r1, r9
 8005426:	008b      	lsls	r3, r1, #2
 8005428:	4641      	mov	r1, r8
 800542a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800542e:	4641      	mov	r1, r8
 8005430:	008a      	lsls	r2, r1, #2
 8005432:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005436:	f7fa ff73 	bl	8000320 <__aeabi_uldivmod>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4b0d      	ldr	r3, [pc, #52]	@ (8005474 <UART_SetConfig+0x4e4>)
 8005440:	fba3 1302 	umull	r1, r3, r3, r2
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	2164      	movs	r1, #100	@ 0x64
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	3332      	adds	r3, #50	@ 0x32
 8005452:	4a08      	ldr	r2, [pc, #32]	@ (8005474 <UART_SetConfig+0x4e4>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	f003 020f 	and.w	r2, r3, #15
 800545e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4422      	add	r2, r4
 8005466:	609a      	str	r2, [r3, #8]
}
 8005468:	bf00      	nop
 800546a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800546e:	46bd      	mov	sp, r7
 8005470:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005474:	51eb851f 	.word	0x51eb851f

08005478 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800547c:	4904      	ldr	r1, [pc, #16]	@ (8005490 <MX_FATFS_Init+0x18>)
 800547e:	4805      	ldr	r0, [pc, #20]	@ (8005494 <MX_FATFS_Init+0x1c>)
 8005480:	f002 fea4 	bl	80081cc <FATFS_LinkDriver>
 8005484:	4603      	mov	r3, r0
 8005486:	461a      	mov	r2, r3
 8005488:	4b03      	ldr	r3, [pc, #12]	@ (8005498 <MX_FATFS_Init+0x20>)
 800548a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800548c:	bf00      	nop
 800548e:	bd80      	pop	{r7, pc}
 8005490:	2000364c 	.word	0x2000364c
 8005494:	20000010 	.word	0x20000010
 8005498:	20003648 	.word	0x20003648

0800549c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80054a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fb fb9d 	bl	8000bf8 <SD_disk_initialize>
 80054be:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fb fc7b 	bl	8000dd0 <SD_disk_status>
 80054da:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	4603      	mov	r3, r0
 80054f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read (pdrv, buff, sector, count);
 80054f4:	7bf8      	ldrb	r0, [r7, #15]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	f7fb fc7e 	bl	8000dfc <SD_disk_read>
 8005500:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	4603      	mov	r3, r0
 8005518:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 800551a:	7bf8      	ldrb	r0, [r7, #15]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	f7fb fcd5 	bl	8000ed0 <SD_disk_write>
 8005526:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	603a      	str	r2, [r7, #0]
 800553a:	71fb      	strb	r3, [r7, #7]
 800553c:	460b      	mov	r3, r1
 800553e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv, cmd, buff);
 8005540:	79b9      	ldrb	r1, [r7, #6]
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f7fb fd46 	bl	8000fd8 <SD_disk_ioctl>
 800554c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	4a08      	ldr	r2, [pc, #32]	@ (8005588 <disk_status+0x30>)
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	79fa      	ldrb	r2, [r7, #7]
 8005570:	4905      	ldr	r1, [pc, #20]	@ (8005588 <disk_status+0x30>)
 8005572:	440a      	add	r2, r1
 8005574:	7a12      	ldrb	r2, [r2, #8]
 8005576:	4610      	mov	r0, r2
 8005578:	4798      	blx	r3
 800557a:	4603      	mov	r3, r0
 800557c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800557e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20003878 	.word	0x20003878

0800558c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	4a0e      	ldr	r2, [pc, #56]	@ (80055d8 <disk_initialize+0x4c>)
 800559e:	5cd3      	ldrb	r3, [r2, r3]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d114      	bne.n	80055ce <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80055a4:	79fb      	ldrb	r3, [r7, #7]
 80055a6:	4a0c      	ldr	r2, [pc, #48]	@ (80055d8 <disk_initialize+0x4c>)
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	79fa      	ldrb	r2, [r7, #7]
 80055b2:	4909      	ldr	r1, [pc, #36]	@ (80055d8 <disk_initialize+0x4c>)
 80055b4:	440a      	add	r2, r1
 80055b6:	7a12      	ldrb	r2, [r2, #8]
 80055b8:	4610      	mov	r0, r2
 80055ba:	4798      	blx	r3
 80055bc:	4603      	mov	r3, r0
 80055be:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d103      	bne.n	80055ce <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	4a03      	ldr	r2, [pc, #12]	@ (80055d8 <disk_initialize+0x4c>)
 80055ca:	2101      	movs	r1, #1
 80055cc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20003878 	.word	0x20003878

080055dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	4603      	mov	r3, r0
 80055ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005618 <disk_read+0x3c>)
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	689c      	ldr	r4, [r3, #8]
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	4a07      	ldr	r2, [pc, #28]	@ (8005618 <disk_read+0x3c>)
 80055fc:	4413      	add	r3, r2
 80055fe:	7a18      	ldrb	r0, [r3, #8]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	47a0      	blx	r4
 8005608:	4603      	mov	r3, r0
 800560a:	75fb      	strb	r3, [r7, #23]
  return res;
 800560c:	7dfb      	ldrb	r3, [r7, #23]
}
 800560e:	4618      	mov	r0, r3
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	bd90      	pop	{r4, r7, pc}
 8005616:	bf00      	nop
 8005618:	20003878 	.word	0x20003878

0800561c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800561c:	b590      	push	{r4, r7, lr}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	4a0a      	ldr	r2, [pc, #40]	@ (8005658 <disk_write+0x3c>)
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	68dc      	ldr	r4, [r3, #12]
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	4a07      	ldr	r2, [pc, #28]	@ (8005658 <disk_write+0x3c>)
 800563c:	4413      	add	r3, r2
 800563e:	7a18      	ldrb	r0, [r3, #8]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	47a0      	blx	r4
 8005648:	4603      	mov	r3, r0
 800564a:	75fb      	strb	r3, [r7, #23]
  return res;
 800564c:	7dfb      	ldrb	r3, [r7, #23]
}
 800564e:	4618      	mov	r0, r3
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	bd90      	pop	{r4, r7, pc}
 8005656:	bf00      	nop
 8005658:	20003878 	.word	0x20003878

0800565c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	603a      	str	r2, [r7, #0]
 8005666:	71fb      	strb	r3, [r7, #7]
 8005668:	460b      	mov	r3, r1
 800566a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	4a09      	ldr	r2, [pc, #36]	@ (8005694 <disk_ioctl+0x38>)
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	79fa      	ldrb	r2, [r7, #7]
 800567a:	4906      	ldr	r1, [pc, #24]	@ (8005694 <disk_ioctl+0x38>)
 800567c:	440a      	add	r2, r1
 800567e:	7a10      	ldrb	r0, [r2, #8]
 8005680:	79b9      	ldrb	r1, [r7, #6]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	4798      	blx	r3
 8005686:	4603      	mov	r3, r0
 8005688:	73fb      	strb	r3, [r7, #15]
  return res;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20003878 	.word	0x20003878

08005698 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3301      	adds	r3, #1
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80056a8:	89fb      	ldrh	r3, [r7, #14]
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	b21a      	sxth	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	b21b      	sxth	r3, r3
 80056b4:	4313      	orrs	r3, r2
 80056b6:	b21b      	sxth	r3, r3
 80056b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80056ba:	89fb      	ldrh	r3, [r7, #14]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3303      	adds	r3, #3
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	3202      	adds	r2, #2
 80056e0:	7812      	ldrb	r2, [r2, #0]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	3201      	adds	r2, #1
 80056ee:	7812      	ldrb	r2, [r2, #0]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	7812      	ldrb	r2, [r2, #0]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
	return rv;
 8005700:	68fb      	ldr	r3, [r7, #12]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	460b      	mov	r3, r1
 8005718:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	887a      	ldrh	r2, [r7, #2]
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	887b      	ldrh	r3, [r7, #2]
 8005728:	0a1b      	lsrs	r3, r3, #8
 800572a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	607a      	str	r2, [r7, #4]
 8005732:	887a      	ldrh	r2, [r7, #2]
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	0a1b      	lsrs	r3, r3, #8
 800575e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	0a1b      	lsrs	r3, r3, #8
 8005770:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	0a1b      	lsrs	r3, r3, #8
 8005782:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00d      	beq.n	80057d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	1c53      	adds	r3, r2, #1
 80057ba:	613b      	str	r3, [r7, #16]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	1c59      	adds	r1, r3, #1
 80057c0:	6179      	str	r1, [r7, #20]
 80057c2:	7812      	ldrb	r2, [r2, #0]
 80057c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f1      	bne.n	80057b6 <mem_cpy+0x1a>
	}
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80057de:	b480      	push	{r7}
 80057e0:	b087      	sub	sp, #28
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	617a      	str	r2, [r7, #20]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	607b      	str	r3, [r7, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f3      	bne.n	80057ee <mem_set+0x10>
}
 8005806:	bf00      	nop
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005814:	b480      	push	{r7}
 8005816:	b089      	sub	sp, #36	@ 0x24
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	61fb      	str	r3, [r7, #28]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	61fa      	str	r2, [r7, #28]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	4619      	mov	r1, r3
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	61ba      	str	r2, [r7, #24]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	1acb      	subs	r3, r1, r3
 8005840:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3b01      	subs	r3, #1
 8005846:	607b      	str	r3, [r7, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <mem_cmp+0x40>
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0eb      	beq.n	800582c <mem_cmp+0x18>

	return r;
 8005854:	697b      	ldr	r3, [r7, #20]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3724      	adds	r7, #36	@ 0x24
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800586c:	e002      	b.n	8005874 <chk_chr+0x12>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3301      	adds	r3, #1
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <chk_chr+0x26>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	4293      	cmp	r3, r2
 8005886:	d1f2      	bne.n	800586e <chk_chr+0xc>
	return *str;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	781b      	ldrb	r3, [r3, #0]
}
 800588c:	4618      	mov	r0, r3
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80058a2:	2300      	movs	r3, #0
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e029      	b.n	8005900 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80058ac:	4a27      	ldr	r2, [pc, #156]	@ (800594c <chk_lock+0xb4>)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	4413      	add	r3, r2
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d01d      	beq.n	80058f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80058ba:	4a24      	ldr	r2, [pc, #144]	@ (800594c <chk_lock+0xb4>)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	4413      	add	r3, r2
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d116      	bne.n	80058fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80058cc:	4a1f      	ldr	r2, [pc, #124]	@ (800594c <chk_lock+0xb4>)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	011b      	lsls	r3, r3, #4
 80058d2:	4413      	add	r3, r2
 80058d4:	3304      	adds	r3, #4
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80058dc:	429a      	cmp	r2, r3
 80058de:	d10c      	bne.n	80058fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80058e0:	4a1a      	ldr	r2, [pc, #104]	@ (800594c <chk_lock+0xb4>)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	4413      	add	r3, r2
 80058e8:	3308      	adds	r3, #8
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d102      	bne.n	80058fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80058f4:	e007      	b.n	8005906 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80058f6:	2301      	movs	r3, #1
 80058f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3301      	adds	r3, #1
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d9d2      	bls.n	80058ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d109      	bne.n	8005920 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <chk_lock+0x80>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d101      	bne.n	800591c <chk_lock+0x84>
 8005918:	2300      	movs	r3, #0
 800591a:	e010      	b.n	800593e <chk_lock+0xa6>
 800591c:	2312      	movs	r3, #18
 800591e:	e00e      	b.n	800593e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d108      	bne.n	8005938 <chk_lock+0xa0>
 8005926:	4a09      	ldr	r2, [pc, #36]	@ (800594c <chk_lock+0xb4>)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	4413      	add	r3, r2
 800592e:	330c      	adds	r3, #12
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005936:	d101      	bne.n	800593c <chk_lock+0xa4>
 8005938:	2310      	movs	r3, #16
 800593a:	e000      	b.n	800593e <chk_lock+0xa6>
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	20003658 	.word	0x20003658

08005950 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005956:	2300      	movs	r3, #0
 8005958:	607b      	str	r3, [r7, #4]
 800595a:	e002      	b.n	8005962 <enq_lock+0x12>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3301      	adds	r3, #1
 8005960:	607b      	str	r3, [r7, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d806      	bhi.n	8005976 <enq_lock+0x26>
 8005968:	4a09      	ldr	r2, [pc, #36]	@ (8005990 <enq_lock+0x40>)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	4413      	add	r3, r2
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f2      	bne.n	800595c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b02      	cmp	r3, #2
 800597a:	bf14      	ite	ne
 800597c:	2301      	movne	r3, #1
 800597e:	2300      	moveq	r3, #0
 8005980:	b2db      	uxtb	r3, r3
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20003658 	.word	0x20003658

08005994 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	e01f      	b.n	80059e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80059a4:	4a41      	ldr	r2, [pc, #260]	@ (8005aac <inc_lock+0x118>)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	4413      	add	r3, r2
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d113      	bne.n	80059de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80059b6:	4a3d      	ldr	r2, [pc, #244]	@ (8005aac <inc_lock+0x118>)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	4413      	add	r3, r2
 80059be:	3304      	adds	r3, #4
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d109      	bne.n	80059de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80059ca:	4a38      	ldr	r2, [pc, #224]	@ (8005aac <inc_lock+0x118>)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	4413      	add	r3, r2
 80059d2:	3308      	adds	r3, #8
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80059da:	429a      	cmp	r2, r3
 80059dc:	d006      	beq.n	80059ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3301      	adds	r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d9dc      	bls.n	80059a4 <inc_lock+0x10>
 80059ea:	e000      	b.n	80059ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80059ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d132      	bne.n	8005a5a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e002      	b.n	8005a00 <inc_lock+0x6c>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3301      	adds	r3, #1
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d806      	bhi.n	8005a14 <inc_lock+0x80>
 8005a06:	4a29      	ldr	r2, [pc, #164]	@ (8005aac <inc_lock+0x118>)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	4413      	add	r3, r2
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1f2      	bne.n	80059fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d101      	bne.n	8005a1e <inc_lock+0x8a>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e040      	b.n	8005aa0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4922      	ldr	r1, [pc, #136]	@ (8005aac <inc_lock+0x118>)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	440b      	add	r3, r1
 8005a2a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	491e      	ldr	r1, [pc, #120]	@ (8005aac <inc_lock+0x118>)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	440b      	add	r3, r1
 8005a38:	3304      	adds	r3, #4
 8005a3a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	491a      	ldr	r1, [pc, #104]	@ (8005aac <inc_lock+0x118>)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	440b      	add	r3, r1
 8005a48:	3308      	adds	r3, #8
 8005a4a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005a4c:	4a17      	ldr	r2, [pc, #92]	@ (8005aac <inc_lock+0x118>)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	4413      	add	r3, r2
 8005a54:	330c      	adds	r3, #12
 8005a56:	2200      	movs	r2, #0
 8005a58:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d009      	beq.n	8005a74 <inc_lock+0xe0>
 8005a60:	4a12      	ldr	r2, [pc, #72]	@ (8005aac <inc_lock+0x118>)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	4413      	add	r3, r2
 8005a68:	330c      	adds	r3, #12
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <inc_lock+0xe0>
 8005a70:	2300      	movs	r3, #0
 8005a72:	e015      	b.n	8005aa0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d108      	bne.n	8005a8c <inc_lock+0xf8>
 8005a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8005aac <inc_lock+0x118>)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	4413      	add	r3, r2
 8005a82:	330c      	adds	r3, #12
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	3301      	adds	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	e001      	b.n	8005a90 <inc_lock+0xfc>
 8005a8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a90:	4906      	ldr	r1, [pc, #24]	@ (8005aac <inc_lock+0x118>)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	440b      	add	r3, r1
 8005a98:	330c      	adds	r3, #12
 8005a9a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3301      	adds	r3, #1
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	20003658 	.word	0x20003658

08005ab0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	607b      	str	r3, [r7, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d825      	bhi.n	8005b10 <dec_lock+0x60>
		n = Files[i].ctr;
 8005ac4:	4a17      	ldr	r2, [pc, #92]	@ (8005b24 <dec_lock+0x74>)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	4413      	add	r3, r2
 8005acc:	330c      	adds	r3, #12
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005ad2:	89fb      	ldrh	r3, [r7, #14]
 8005ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ad8:	d101      	bne.n	8005ade <dec_lock+0x2e>
 8005ada:	2300      	movs	r3, #0
 8005adc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005ade:	89fb      	ldrh	r3, [r7, #14]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <dec_lock+0x3a>
 8005ae4:	89fb      	ldrh	r3, [r7, #14]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005aea:	4a0e      	ldr	r2, [pc, #56]	@ (8005b24 <dec_lock+0x74>)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	4413      	add	r3, r2
 8005af2:	330c      	adds	r3, #12
 8005af4:	89fa      	ldrh	r2, [r7, #14]
 8005af6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005af8:	89fb      	ldrh	r3, [r7, #14]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d105      	bne.n	8005b0a <dec_lock+0x5a>
 8005afe:	4a09      	ldr	r2, [pc, #36]	@ (8005b24 <dec_lock+0x74>)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	4413      	add	r3, r2
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	737b      	strb	r3, [r7, #13]
 8005b0e:	e001      	b.n	8005b14 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005b10:	2302      	movs	r3, #2
 8005b12:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005b14:	7b7b      	ldrb	r3, [r7, #13]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20003658 	.word	0x20003658

08005b28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e010      	b.n	8005b58 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005b36:	4a0d      	ldr	r2, [pc, #52]	@ (8005b6c <clear_lock+0x44>)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	4413      	add	r3, r2
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d105      	bne.n	8005b52 <clear_lock+0x2a>
 8005b46:	4a09      	ldr	r2, [pc, #36]	@ (8005b6c <clear_lock+0x44>)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	4413      	add	r3, r2
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3301      	adds	r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d9eb      	bls.n	8005b36 <clear_lock+0xe>
	}
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	20003658 	.word	0x20003658

08005b70 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	78db      	ldrb	r3, [r3, #3]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d034      	beq.n	8005bee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b88:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	7858      	ldrb	r0, [r3, #1]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005b94:	2301      	movs	r3, #1
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	f7ff fd40 	bl	800561c <disk_write>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
 8005ba6:	e022      	b.n	8005bee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	1ad2      	subs	r2, r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d217      	bcs.n	8005bee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	789b      	ldrb	r3, [r3, #2]
 8005bc2:	613b      	str	r3, [r7, #16]
 8005bc4:	e010      	b.n	8005be8 <sync_window+0x78>
					wsect += fs->fsize;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4413      	add	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	7858      	ldrb	r0, [r3, #1]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005bda:	2301      	movs	r3, #1
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	f7ff fd1d 	bl	800561c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d8eb      	bhi.n	8005bc6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d01b      	beq.n	8005c48 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff ffad 	bl	8005b70 <sync_window>
 8005c16:	4603      	mov	r3, r0
 8005c18:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d113      	bne.n	8005c48 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	7858      	ldrb	r0, [r3, #1]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	f7ff fcd5 	bl	80055dc <disk_read>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005c38:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff ff87 	bl	8005b70 <sync_window>
 8005c62:	4603      	mov	r3, r0
 8005c64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d159      	bne.n	8005d20 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d149      	bne.n	8005d08 <sync_fs+0xb4>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	791b      	ldrb	r3, [r3, #4]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d145      	bne.n	8005d08 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	899b      	ldrh	r3, [r3, #12]
 8005c86:	461a      	mov	r2, r3
 8005c88:	2100      	movs	r1, #0
 8005c8a:	f7ff fda8 	bl	80057de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3338      	adds	r3, #56	@ 0x38
 8005c92:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005c96:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff fd37 	bl	800570e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3338      	adds	r3, #56	@ 0x38
 8005ca4:	4921      	ldr	r1, [pc, #132]	@ (8005d2c <sync_fs+0xd8>)
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fd4c 	bl	8005744 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3338      	adds	r3, #56	@ 0x38
 8005cb0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005cb4:	491e      	ldr	r1, [pc, #120]	@ (8005d30 <sync_fs+0xdc>)
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff fd44 	bl	8005744 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3338      	adds	r3, #56	@ 0x38
 8005cc0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f7ff fd3a 	bl	8005744 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3338      	adds	r3, #56	@ 0x38
 8005cd4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	f7ff fd30 	bl	8005744 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	7858      	ldrb	r0, [r3, #1]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f7ff fc8d 	bl	800561c <disk_write>
			fs->fsi_flag = 0;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	785b      	ldrb	r3, [r3, #1]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2100      	movs	r1, #0
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff fca3 	bl	800565c <disk_ioctl>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <sync_fs+0xcc>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	41615252 	.word	0x41615252
 8005d30:	61417272 	.word	0x61417272

08005d34 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	3b02      	subs	r3, #2
 8005d42:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	3b02      	subs	r3, #2
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d301      	bcc.n	8005d54 <clust2sect+0x20>
 8005d50:	2300      	movs	r3, #0
 8005d52:	e008      	b.n	8005d66 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	895b      	ldrh	r3, [r3, #10]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	fb03 f202 	mul.w	r2, r3, r2
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d64:	4413      	add	r3, r2
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b086      	sub	sp, #24
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d904      	bls.n	8005d92 <get_fat+0x20>
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d302      	bcc.n	8005d98 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005d92:	2301      	movs	r3, #1
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	e0ba      	b.n	8005f0e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005d98:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	f000 8082 	beq.w	8005eac <get_fat+0x13a>
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	f300 80a6 	bgt.w	8005efa <get_fat+0x188>
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d002      	beq.n	8005db8 <get_fat+0x46>
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d055      	beq.n	8005e62 <get_fat+0xf0>
 8005db6:	e0a0      	b.n	8005efa <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	899b      	ldrh	r3, [r3, #12]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dd6:	4413      	add	r3, r2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6938      	ldr	r0, [r7, #16]
 8005ddc:	f7ff ff0c 	bl	8005bf8 <move_window>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f040 808c 	bne.w	8005f00 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	60fa      	str	r2, [r7, #12]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	8992      	ldrh	r2, [r2, #12]
 8005df2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005df6:	fb01 f202 	mul.w	r2, r1, r2
 8005dfa:	1a9b      	subs	r3, r3, r2
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e04:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	899b      	ldrh	r3, [r3, #12]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e16:	4413      	add	r3, r2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6938      	ldr	r0, [r7, #16]
 8005e1c:	f7ff feec 	bl	8005bf8 <move_window>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d16e      	bne.n	8005f04 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	899b      	ldrh	r3, [r3, #12]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e32:	fb01 f202 	mul.w	r2, r1, r2
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <get_fat+0xe6>
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	091b      	lsrs	r3, r3, #4
 8005e56:	e002      	b.n	8005e5e <get_fat+0xec>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e5e:	617b      	str	r3, [r7, #20]
			break;
 8005e60:	e055      	b.n	8005f0e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	899b      	ldrh	r3, [r3, #12]
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	4619      	mov	r1, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e76:	4413      	add	r3, r2
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6938      	ldr	r0, [r7, #16]
 8005e7c:	f7ff febc 	bl	8005bf8 <move_window>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d140      	bne.n	8005f08 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	8992      	ldrh	r2, [r2, #12]
 8005e94:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e98:	fb00 f202 	mul.w	r2, r0, r2
 8005e9c:	1a9b      	subs	r3, r3, r2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fbf9 	bl	8005698 <ld_word>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	617b      	str	r3, [r7, #20]
			break;
 8005eaa:	e030      	b.n	8005f0e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	899b      	ldrh	r3, [r3, #12]
 8005eb4:	089b      	lsrs	r3, r3, #2
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	4619      	mov	r1, r3
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ec0:	4413      	add	r3, r2
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6938      	ldr	r0, [r7, #16]
 8005ec6:	f7ff fe97 	bl	8005bf8 <move_window>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d11d      	bne.n	8005f0c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	8992      	ldrh	r2, [r2, #12]
 8005ede:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ee2:	fb00 f202 	mul.w	r2, r0, r2
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	440b      	add	r3, r1
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fbec 	bl	80056c8 <ld_dword>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005ef6:	617b      	str	r3, [r7, #20]
			break;
 8005ef8:	e009      	b.n	8005f0e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005efa:	2301      	movs	r3, #1
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	e006      	b.n	8005f0e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f00:	bf00      	nop
 8005f02:	e004      	b.n	8005f0e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f04:	bf00      	nop
 8005f06:	e002      	b.n	8005f0e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f08:	bf00      	nop
 8005f0a:	e000      	b.n	8005f0e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005f0c:	bf00      	nop
		}
	}

	return val;
 8005f0e:	697b      	ldr	r3, [r7, #20]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005f18:	b590      	push	{r4, r7, lr}
 8005f1a:	b089      	sub	sp, #36	@ 0x24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005f24:	2302      	movs	r3, #2
 8005f26:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	f240 8109 	bls.w	8006142 <put_fat+0x22a>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	f080 8103 	bcs.w	8006142 <put_fat+0x22a>
		switch (fs->fs_type) {
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	f000 80b6 	beq.w	80060b2 <put_fat+0x19a>
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	f300 80fb 	bgt.w	8006142 <put_fat+0x22a>
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d003      	beq.n	8005f58 <put_fat+0x40>
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	f000 8083 	beq.w	800605c <put_fat+0x144>
 8005f56:	e0f4      	b.n	8006142 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	085b      	lsrs	r3, r3, #1
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	4413      	add	r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	899b      	ldrh	r3, [r3, #12]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f76:	4413      	add	r3, r2
 8005f78:	4619      	mov	r1, r3
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff fe3c 	bl	8005bf8 <move_window>
 8005f80:	4603      	mov	r3, r0
 8005f82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f84:	7ffb      	ldrb	r3, [r7, #31]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f040 80d4 	bne.w	8006134 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	61ba      	str	r2, [r7, #24]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	8992      	ldrh	r2, [r2, #12]
 8005f9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005fa0:	fb00 f202 	mul.w	r2, r0, r2
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00d      	beq.n	8005fd0 <put_fat+0xb8>
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	b25b      	sxtb	r3, r3
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	b25a      	sxtb	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	b25b      	sxtb	r3, r3
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	b25b      	sxtb	r3, r3
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	e001      	b.n	8005fd4 <put_fat+0xbc>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	899b      	ldrh	r3, [r3, #12]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fee:	4413      	add	r3, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff fe00 	bl	8005bf8 <move_window>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ffc:	7ffb      	ldrb	r3, [r7, #31]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f040 809a 	bne.w	8006138 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	899b      	ldrh	r3, [r3, #12]
 800600e:	461a      	mov	r2, r3
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	fbb3 f0f2 	udiv	r0, r3, r2
 8006016:	fb00 f202 	mul.w	r2, r0, r2
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	440b      	add	r3, r1
 800601e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <put_fat+0x11a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	091b      	lsrs	r3, r3, #4
 800602e:	b2db      	uxtb	r3, r3
 8006030:	e00e      	b.n	8006050 <put_fat+0x138>
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	b25b      	sxtb	r3, r3
 8006038:	f023 030f 	bic.w	r3, r3, #15
 800603c:	b25a      	sxtb	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	0a1b      	lsrs	r3, r3, #8
 8006042:	b25b      	sxtb	r3, r3
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	b25b      	sxtb	r3, r3
 800604a:	4313      	orrs	r3, r2
 800604c:	b25b      	sxtb	r3, r3
 800604e:	b2db      	uxtb	r3, r3
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	70da      	strb	r2, [r3, #3]
			break;
 800605a:	e072      	b.n	8006142 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	899b      	ldrh	r3, [r3, #12]
 8006064:	085b      	lsrs	r3, r3, #1
 8006066:	b29b      	uxth	r3, r3
 8006068:	4619      	mov	r1, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006070:	4413      	add	r3, r2
 8006072:	4619      	mov	r1, r3
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fdbf 	bl	8005bf8 <move_window>
 800607a:	4603      	mov	r3, r0
 800607c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800607e:	7ffb      	ldrb	r3, [r7, #31]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d15b      	bne.n	800613c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	8992      	ldrh	r2, [r2, #12]
 8006092:	fbb3 f0f2 	udiv	r0, r3, r2
 8006096:	fb00 f202 	mul.w	r2, r0, r2
 800609a:	1a9b      	subs	r3, r3, r2
 800609c:	440b      	add	r3, r1
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	b292      	uxth	r2, r2
 80060a2:	4611      	mov	r1, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fb32 	bl	800570e <st_word>
			fs->wflag = 1;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	70da      	strb	r2, [r3, #3]
			break;
 80060b0:	e047      	b.n	8006142 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	899b      	ldrh	r3, [r3, #12]
 80060ba:	089b      	lsrs	r3, r3, #2
 80060bc:	b29b      	uxth	r3, r3
 80060be:	4619      	mov	r1, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80060c6:	4413      	add	r3, r2
 80060c8:	4619      	mov	r1, r3
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7ff fd94 	bl	8005bf8 <move_window>
 80060d0:	4603      	mov	r3, r0
 80060d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060d4:	7ffb      	ldrb	r3, [r7, #31]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d132      	bne.n	8006140 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	8992      	ldrh	r2, [r2, #12]
 80060ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80060f2:	fb00 f202 	mul.w	r2, r0, r2
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	440b      	add	r3, r1
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fae4 	bl	80056c8 <ld_dword>
 8006100:	4603      	mov	r3, r0
 8006102:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006106:	4323      	orrs	r3, r4
 8006108:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	8992      	ldrh	r2, [r2, #12]
 8006118:	fbb3 f0f2 	udiv	r0, r3, r2
 800611c:	fb00 f202 	mul.w	r2, r0, r2
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	440b      	add	r3, r1
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fb0c 	bl	8005744 <st_dword>
			fs->wflag = 1;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	70da      	strb	r2, [r3, #3]
			break;
 8006132:	e006      	b.n	8006142 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006134:	bf00      	nop
 8006136:	e004      	b.n	8006142 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006138:	bf00      	nop
 800613a:	e002      	b.n	8006142 <put_fat+0x22a>
			if (res != FR_OK) break;
 800613c:	bf00      	nop
 800613e:	e000      	b.n	8006142 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006140:	bf00      	nop
		}
	}
	return res;
 8006142:	7ffb      	ldrb	r3, [r7, #31]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3724      	adds	r7, #36	@ 0x24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd90      	pop	{r4, r7, pc}

0800614c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d904      	bls.n	8006172 <remove_chain+0x26>
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	429a      	cmp	r2, r3
 8006170:	d301      	bcc.n	8006176 <remove_chain+0x2a>
 8006172:	2302      	movs	r3, #2
 8006174:	e04b      	b.n	800620e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00c      	beq.n	8006196 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800617c:	f04f 32ff 	mov.w	r2, #4294967295
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	69b8      	ldr	r0, [r7, #24]
 8006184:	f7ff fec8 	bl	8005f18 <put_fat>
 8006188:	4603      	mov	r3, r0
 800618a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800618c:	7ffb      	ldrb	r3, [r7, #31]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <remove_chain+0x4a>
 8006192:	7ffb      	ldrb	r3, [r7, #31]
 8006194:	e03b      	b.n	800620e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f7ff fdea 	bl	8005d72 <get_fat>
 800619e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d031      	beq.n	800620a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <remove_chain+0x64>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e02e      	b.n	800620e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d101      	bne.n	80061bc <remove_chain+0x70>
 80061b8:	2301      	movs	r3, #1
 80061ba:	e028      	b.n	800620e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80061bc:	2200      	movs	r2, #0
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	69b8      	ldr	r0, [r7, #24]
 80061c2:	f7ff fea9 	bl	8005f18 <put_fat>
 80061c6:	4603      	mov	r3, r0
 80061c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80061ca:	7ffb      	ldrb	r3, [r7, #31]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <remove_chain+0x88>
 80061d0:	7ffb      	ldrb	r3, [r7, #31]
 80061d2:	e01c      	b.n	800620e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	699a      	ldr	r2, [r3, #24]
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	3b02      	subs	r3, #2
 80061de:	429a      	cmp	r2, r3
 80061e0:	d20b      	bcs.n	80061fa <remove_chain+0xae>
			fs->free_clst++;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	791b      	ldrb	r3, [r3, #4]
 80061f0:	f043 0301 	orr.w	r3, r3, #1
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	429a      	cmp	r2, r3
 8006206:	d3c6      	bcc.n	8006196 <remove_chain+0x4a>
 8006208:	e000      	b.n	800620c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800620a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b088      	sub	sp, #32
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10d      	bne.n	8006248 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d004      	beq.n	8006242 <create_chain+0x2c>
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	429a      	cmp	r2, r3
 8006240:	d31b      	bcc.n	800627a <create_chain+0x64>
 8006242:	2301      	movs	r3, #1
 8006244:	61bb      	str	r3, [r7, #24]
 8006246:	e018      	b.n	800627a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff fd91 	bl	8005d72 <get_fat>
 8006250:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d801      	bhi.n	800625c <create_chain+0x46>
 8006258:	2301      	movs	r3, #1
 800625a:	e070      	b.n	800633e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d101      	bne.n	8006268 <create_chain+0x52>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	e06a      	b.n	800633e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	429a      	cmp	r2, r3
 8006270:	d201      	bcs.n	8006276 <create_chain+0x60>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	e063      	b.n	800633e <create_chain+0x128>
		scl = clst;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	3301      	adds	r3, #1
 8006282:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	429a      	cmp	r2, r3
 800628c:	d307      	bcc.n	800629e <create_chain+0x88>
				ncl = 2;
 800628e:	2302      	movs	r3, #2
 8006290:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	429a      	cmp	r2, r3
 8006298:	d901      	bls.n	800629e <create_chain+0x88>
 800629a:	2300      	movs	r3, #0
 800629c:	e04f      	b.n	800633e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800629e:	69f9      	ldr	r1, [r7, #28]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff fd66 	bl	8005d72 <get_fat>
 80062a6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00e      	beq.n	80062cc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d003      	beq.n	80062bc <create_chain+0xa6>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ba:	d101      	bne.n	80062c0 <create_chain+0xaa>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	e03e      	b.n	800633e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d1da      	bne.n	800627e <create_chain+0x68>
 80062c8:	2300      	movs	r3, #0
 80062ca:	e038      	b.n	800633e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80062cc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80062ce:	f04f 32ff 	mov.w	r2, #4294967295
 80062d2:	69f9      	ldr	r1, [r7, #28]
 80062d4:	6938      	ldr	r0, [r7, #16]
 80062d6:	f7ff fe1f 	bl	8005f18 <put_fat>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80062de:	7dfb      	ldrb	r3, [r7, #23]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d109      	bne.n	80062f8 <create_chain+0xe2>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d006      	beq.n	80062f8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6938      	ldr	r0, [r7, #16]
 80062f0:	f7ff fe12 	bl	8005f18 <put_fat>
 80062f4:	4603      	mov	r3, r0
 80062f6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d116      	bne.n	800632c <create_chain+0x116>
		fs->last_clst = ncl;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	69fa      	ldr	r2, [r7, #28]
 8006302:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	699a      	ldr	r2, [r3, #24]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	3b02      	subs	r3, #2
 800630e:	429a      	cmp	r2, r3
 8006310:	d804      	bhi.n	800631c <create_chain+0x106>
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	1e5a      	subs	r2, r3, #1
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	791b      	ldrb	r3, [r3, #4]
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	b2da      	uxtb	r2, r3
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	711a      	strb	r2, [r3, #4]
 800632a:	e007      	b.n	800633c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800632c:	7dfb      	ldrb	r3, [r7, #23]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d102      	bne.n	8006338 <create_chain+0x122>
 8006332:	f04f 33ff 	mov.w	r3, #4294967295
 8006336:	e000      	b.n	800633a <create_chain+0x124>
 8006338:	2301      	movs	r3, #1
 800633a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800633c:	69fb      	ldr	r3, [r7, #28]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006346:	b480      	push	{r7}
 8006348:	b087      	sub	sp, #28
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635a:	3304      	adds	r3, #4
 800635c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	899b      	ldrh	r3, [r3, #12]
 8006362:	461a      	mov	r2, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	fbb3 f3f2 	udiv	r3, r3, r2
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	8952      	ldrh	r2, [r2, #10]
 800636e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006372:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	1d1a      	adds	r2, r3, #4
 8006378:	613a      	str	r2, [r7, #16]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <clmt_clust+0x42>
 8006384:	2300      	movs	r3, #0
 8006386:	e010      	b.n	80063aa <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	429a      	cmp	r2, r3
 800638e:	d307      	bcc.n	80063a0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	3304      	adds	r3, #4
 800639c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800639e:	e7e9      	b.n	8006374 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80063a0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	4413      	add	r3, r2
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b086      	sub	sp, #24
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063cc:	d204      	bcs.n	80063d8 <dir_sdi+0x22>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <dir_sdi+0x26>
		return FR_INT_ERR;
 80063d8:	2302      	movs	r3, #2
 80063da:	e071      	b.n	80064c0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <dir_sdi+0x46>
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d902      	bls.n	80063fc <dir_sdi+0x46>
		clst = fs->dirbase;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10c      	bne.n	800641c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	095b      	lsrs	r3, r3, #5
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	8912      	ldrh	r2, [r2, #8]
 800640a:	4293      	cmp	r3, r2
 800640c:	d301      	bcc.n	8006412 <dir_sdi+0x5c>
 800640e:	2302      	movs	r3, #2
 8006410:	e056      	b.n	80064c0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	61da      	str	r2, [r3, #28]
 800641a:	e02d      	b.n	8006478 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	895b      	ldrh	r3, [r3, #10]
 8006420:	461a      	mov	r2, r3
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	899b      	ldrh	r3, [r3, #12]
 8006426:	fb02 f303 	mul.w	r3, r2, r3
 800642a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800642c:	e019      	b.n	8006462 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6979      	ldr	r1, [r7, #20]
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff fc9d 	bl	8005d72 <get_fat>
 8006438:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d101      	bne.n	8006446 <dir_sdi+0x90>
 8006442:	2301      	movs	r3, #1
 8006444:	e03c      	b.n	80064c0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d904      	bls.n	8006456 <dir_sdi+0xa0>
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	429a      	cmp	r2, r3
 8006454:	d301      	bcc.n	800645a <dir_sdi+0xa4>
 8006456:	2302      	movs	r3, #2
 8006458:	e032      	b.n	80064c0 <dir_sdi+0x10a>
			ofs -= csz;
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	429a      	cmp	r2, r3
 8006468:	d2e1      	bcs.n	800642e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800646a:	6979      	ldr	r1, [r7, #20]
 800646c:	6938      	ldr	r0, [r7, #16]
 800646e:	f7ff fc61 	bl	8005d34 <clust2sect>
 8006472:	4602      	mov	r2, r0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <dir_sdi+0xd4>
 8006486:	2302      	movs	r3, #2
 8006488:	e01a      	b.n	80064c0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69da      	ldr	r2, [r3, #28]
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	899b      	ldrh	r3, [r3, #12]
 8006492:	4619      	mov	r1, r3
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	fbb3 f3f1 	udiv	r3, r3, r1
 800649a:	441a      	add	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	899b      	ldrh	r3, [r3, #12]
 80064aa:	461a      	mov	r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80064b2:	fb00 f202 	mul.w	r2, r0, r2
 80064b6:	1a9b      	subs	r3, r3, r2
 80064b8:	18ca      	adds	r2, r1, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	3320      	adds	r3, #32
 80064de:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <dir_next+0x28>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064ee:	d301      	bcc.n	80064f4 <dir_next+0x2c>
 80064f0:	2304      	movs	r3, #4
 80064f2:	e0bb      	b.n	800666c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	899b      	ldrh	r3, [r3, #12]
 80064f8:	461a      	mov	r2, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006500:	fb01 f202 	mul.w	r2, r1, r2
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	2b00      	cmp	r3, #0
 8006508:	f040 809d 	bne.w	8006646 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10b      	bne.n	8006536 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	095b      	lsrs	r3, r3, #5
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	8912      	ldrh	r2, [r2, #8]
 8006526:	4293      	cmp	r3, r2
 8006528:	f0c0 808d 	bcc.w	8006646 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	61da      	str	r2, [r3, #28]
 8006532:	2304      	movs	r3, #4
 8006534:	e09a      	b.n	800666c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	899b      	ldrh	r3, [r3, #12]
 800653a:	461a      	mov	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	8952      	ldrh	r2, [r2, #10]
 8006546:	3a01      	subs	r2, #1
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d17b      	bne.n	8006646 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f7ff fc0b 	bl	8005d72 <get_fat>
 800655c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d801      	bhi.n	8006568 <dir_next+0xa0>
 8006564:	2302      	movs	r3, #2
 8006566:	e081      	b.n	800666c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d101      	bne.n	8006574 <dir_next+0xac>
 8006570:	2301      	movs	r3, #1
 8006572:	e07b      	b.n	800666c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	429a      	cmp	r2, r3
 800657c:	d359      	bcc.n	8006632 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	61da      	str	r2, [r3, #28]
 800658a:	2304      	movs	r3, #4
 800658c:	e06e      	b.n	800666c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	4619      	mov	r1, r3
 8006596:	4610      	mov	r0, r2
 8006598:	f7ff fe3d 	bl	8006216 <create_chain>
 800659c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <dir_next+0xe0>
 80065a4:	2307      	movs	r3, #7
 80065a6:	e061      	b.n	800666c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d101      	bne.n	80065b2 <dir_next+0xea>
 80065ae:	2302      	movs	r3, #2
 80065b0:	e05c      	b.n	800666c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b8:	d101      	bne.n	80065be <dir_next+0xf6>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e056      	b.n	800666c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f7ff fad6 	bl	8005b70 <sync_window>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <dir_next+0x106>
 80065ca:	2301      	movs	r3, #1
 80065cc:	e04e      	b.n	800666c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	899b      	ldrh	r3, [r3, #12]
 80065d8:	461a      	mov	r2, r3
 80065da:	2100      	movs	r1, #0
 80065dc:	f7ff f8ff 	bl	80057de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	6979      	ldr	r1, [r7, #20]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f7ff fba4 	bl	8005d34 <clust2sect>
 80065ec:	4602      	mov	r2, r0
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80065f2:	e012      	b.n	800661a <dir_next+0x152>
						fs->wflag = 1;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f7ff fab8 	bl	8005b70 <sync_window>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <dir_next+0x142>
 8006606:	2301      	movs	r3, #1
 8006608:	e030      	b.n	800666c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	3301      	adds	r3, #1
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	635a      	str	r2, [r3, #52]	@ 0x34
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	895b      	ldrh	r3, [r3, #10]
 800661e:	461a      	mov	r2, r3
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4293      	cmp	r3, r2
 8006624:	d3e6      	bcc.n	80065f4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad2      	subs	r2, r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006638:	6979      	ldr	r1, [r7, #20]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f7ff fb7a 	bl	8005d34 <clust2sect>
 8006640:	4602      	mov	r2, r0
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	899b      	ldrh	r3, [r3, #12]
 8006656:	461a      	mov	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	fbb3 f0f2 	udiv	r0, r3, r2
 800665e:	fb00 f202 	mul.w	r2, r0, r2
 8006662:	1a9b      	subs	r3, r3, r2
 8006664:	18ca      	adds	r2, r1, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006684:	2100      	movs	r1, #0
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff fe95 	bl	80063b6 <dir_sdi>
 800668c:	4603      	mov	r3, r0
 800668e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d12b      	bne.n	80066ee <dir_alloc+0x7a>
		n = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	4619      	mov	r1, r3
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff faa9 	bl	8005bf8 <move_window>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d11d      	bne.n	80066ec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2be5      	cmp	r3, #229	@ 0xe5
 80066b8:	d004      	beq.n	80066c4 <dir_alloc+0x50>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d107      	bne.n	80066d4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	3301      	adds	r3, #1
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d102      	bne.n	80066d8 <dir_alloc+0x64>
 80066d2:	e00c      	b.n	80066ee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80066d4:	2300      	movs	r3, #0
 80066d6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80066d8:	2101      	movs	r1, #1
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff fef4 	bl	80064c8 <dir_next>
 80066e0:	4603      	mov	r3, r0
 80066e2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0d7      	beq.n	800669a <dir_alloc+0x26>
 80066ea:	e000      	b.n	80066ee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80066ec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80066ee:	7dfb      	ldrb	r3, [r7, #23]
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	d101      	bne.n	80066f8 <dir_alloc+0x84>
 80066f4:	2307      	movs	r3, #7
 80066f6:	75fb      	strb	r3, [r7, #23]
	return res;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b084      	sub	sp, #16
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	331a      	adds	r3, #26
 8006710:	4618      	mov	r0, r3
 8006712:	f7fe ffc1 	bl	8005698 <ld_word>
 8006716:	4603      	mov	r3, r0
 8006718:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b03      	cmp	r3, #3
 8006720:	d109      	bne.n	8006736 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	3314      	adds	r3, #20
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe ffb6 	bl	8005698 <ld_word>
 800672c:	4603      	mov	r3, r0
 800672e:	041b      	lsls	r3, r3, #16
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006736:	68fb      	ldr	r3, [r7, #12]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	331a      	adds	r3, #26
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	b292      	uxth	r2, r2
 8006754:	4611      	mov	r1, r2
 8006756:	4618      	mov	r0, r3
 8006758:	f7fe ffd9 	bl	800570e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b03      	cmp	r3, #3
 8006762:	d109      	bne.n	8006778 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f103 0214 	add.w	r2, r3, #20
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	0c1b      	lsrs	r3, r3, #16
 800676e:	b29b      	uxth	r3, r3
 8006770:	4619      	mov	r1, r3
 8006772:	4610      	mov	r0, r2
 8006774:	f7fe ffcb 	bl	800570e <st_word>
	}
}
 8006778:	bf00      	nop
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006780:	b590      	push	{r4, r7, lr}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	331a      	adds	r3, #26
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe ff82 	bl	8005698 <ld_word>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <cmp_lfn+0x1e>
 800679a:	2300      	movs	r3, #0
 800679c:	e059      	b.n	8006852 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067a6:	1e5a      	subs	r2, r3, #1
 80067a8:	4613      	mov	r3, r2
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80067b4:	2301      	movs	r3, #1
 80067b6:	81fb      	strh	r3, [r7, #14]
 80067b8:	2300      	movs	r3, #0
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	e033      	b.n	8006826 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80067be:	4a27      	ldr	r2, [pc, #156]	@ (800685c <cmp_lfn+0xdc>)
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	4413      	add	r3, r2
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	4413      	add	r3, r2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fe ff63 	bl	8005698 <ld_word>
 80067d2:	4603      	mov	r3, r0
 80067d4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80067d6:	89fb      	ldrh	r3, [r7, #14]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01a      	beq.n	8006812 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2bfe      	cmp	r3, #254	@ 0xfe
 80067e0:	d812      	bhi.n	8006808 <cmp_lfn+0x88>
 80067e2:	89bb      	ldrh	r3, [r7, #12]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 fd3d 	bl	8008264 <ff_wtoupper>
 80067ea:	4603      	mov	r3, r0
 80067ec:	461c      	mov	r4, r3
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	617a      	str	r2, [r7, #20]
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f001 fd31 	bl	8008264 <ff_wtoupper>
 8006802:	4603      	mov	r3, r0
 8006804:	429c      	cmp	r4, r3
 8006806:	d001      	beq.n	800680c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006808:	2300      	movs	r3, #0
 800680a:	e022      	b.n	8006852 <cmp_lfn+0xd2>
			}
			wc = uc;
 800680c:	89bb      	ldrh	r3, [r7, #12]
 800680e:	81fb      	strh	r3, [r7, #14]
 8006810:	e006      	b.n	8006820 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006812:	89bb      	ldrh	r3, [r7, #12]
 8006814:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006818:	4293      	cmp	r3, r2
 800681a:	d001      	beq.n	8006820 <cmp_lfn+0xa0>
 800681c:	2300      	movs	r3, #0
 800681e:	e018      	b.n	8006852 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	3301      	adds	r3, #1
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b0c      	cmp	r3, #12
 800682a:	d9c8      	bls.n	80067be <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <cmp_lfn+0xd0>
 8006838:	89fb      	ldrh	r3, [r7, #14]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <cmp_lfn+0xd0>
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	4413      	add	r3, r2
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <cmp_lfn+0xd0>
 800684c:	2300      	movs	r3, #0
 800684e:	e000      	b.n	8006852 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006850:	2301      	movs	r3, #1
}
 8006852:	4618      	mov	r0, r3
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	bd90      	pop	{r4, r7, pc}
 800685a:	bf00      	nop
 800685c:	0800d81c 	.word	0x0800d81c

08006860 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	4611      	mov	r1, r2
 800686c:	461a      	mov	r2, r3
 800686e:	460b      	mov	r3, r1
 8006870:	71fb      	strb	r3, [r7, #7]
 8006872:	4613      	mov	r3, r2
 8006874:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	330d      	adds	r3, #13
 800687a:	79ba      	ldrb	r2, [r7, #6]
 800687c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	330b      	adds	r3, #11
 8006882:	220f      	movs	r2, #15
 8006884:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	330c      	adds	r3, #12
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	331a      	adds	r3, #26
 8006892:	2100      	movs	r1, #0
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe ff3a 	bl	800570e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	1e5a      	subs	r2, r3, #1
 800689e:	4613      	mov	r3, r2
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	82fb      	strh	r3, [r7, #22]
 80068ae:	2300      	movs	r3, #0
 80068b0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80068b2:	8afb      	ldrh	r3, [r7, #22]
 80068b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <put_lfn+0x6c>
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	61fa      	str	r2, [r7, #28]
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80068cc:	4a17      	ldr	r2, [pc, #92]	@ (800692c <put_lfn+0xcc>)
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	4413      	add	r3, r2
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4413      	add	r3, r2
 80068da:	8afa      	ldrh	r2, [r7, #22]
 80068dc:	4611      	mov	r1, r2
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe ff15 	bl	800570e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80068e4:	8afb      	ldrh	r3, [r7, #22]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d102      	bne.n	80068f0 <put_lfn+0x90>
 80068ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80068ee:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	3301      	adds	r3, #1
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2b0c      	cmp	r3, #12
 80068fa:	d9da      	bls.n	80068b2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80068fc:	8afb      	ldrh	r3, [r7, #22]
 80068fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006902:	4293      	cmp	r3, r2
 8006904:	d006      	beq.n	8006914 <put_lfn+0xb4>
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d103      	bne.n	800691c <put_lfn+0xbc>
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800691a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	79fa      	ldrb	r2, [r7, #7]
 8006920:	701a      	strb	r2, [r3, #0]
}
 8006922:	bf00      	nop
 8006924:	3720      	adds	r7, #32
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	0800d81c 	.word	0x0800d81c

08006930 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08c      	sub	sp, #48	@ 0x30
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800693e:	220b      	movs	r2, #11
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7fe ff2a 	bl	800579c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b05      	cmp	r3, #5
 800694c:	d92b      	bls.n	80069a6 <gen_numname+0x76>
		sr = seq;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006952:	e022      	b.n	800699a <gen_numname+0x6a>
			wc = *lfn++;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	1c9a      	adds	r2, r3, #2
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800695e:	2300      	movs	r3, #0
 8006960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006962:	e017      	b.n	8006994 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	005a      	lsls	r2, r3, #1
 8006968:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	4413      	add	r3, r2
 8006970:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006972:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006974:	085b      	lsrs	r3, r3, #1
 8006976:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <gen_numname+0x5e>
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8006988:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800698c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006990:	3301      	adds	r3, #1
 8006992:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006996:	2b0f      	cmp	r3, #15
 8006998:	d9e4      	bls.n	8006964 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1d8      	bne.n	8006954 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80069a6:	2307      	movs	r3, #7
 80069a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	3330      	adds	r3, #48	@ 0x30
 80069b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80069ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80069be:	2b39      	cmp	r3, #57	@ 0x39
 80069c0:	d904      	bls.n	80069cc <gen_numname+0x9c>
 80069c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80069c6:	3307      	adds	r3, #7
 80069c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80069cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ce:	1e5a      	subs	r2, r3, #1
 80069d0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80069d2:	3330      	adds	r3, #48	@ 0x30
 80069d4:	443b      	add	r3, r7
 80069d6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80069da:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	091b      	lsrs	r3, r3, #4
 80069e2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1df      	bne.n	80069aa <gen_numname+0x7a>
	ns[i] = '~';
 80069ea:	f107 0214 	add.w	r2, r7, #20
 80069ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f0:	4413      	add	r3, r2
 80069f2:	227e      	movs	r2, #126	@ 0x7e
 80069f4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80069f6:	2300      	movs	r3, #0
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80069fa:	e002      	b.n	8006a02 <gen_numname+0xd2>
 80069fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fe:	3301      	adds	r3, #1
 8006a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d205      	bcs.n	8006a16 <gen_numname+0xe6>
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0e:	4413      	add	r3, r2
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d1f2      	bne.n	80069fc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a18:	2b07      	cmp	r3, #7
 8006a1a:	d807      	bhi.n	8006a2c <gen_numname+0xfc>
 8006a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006a22:	3330      	adds	r3, #48	@ 0x30
 8006a24:	443b      	add	r3, r7
 8006a26:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006a2a:	e000      	b.n	8006a2e <gen_numname+0xfe>
 8006a2c:	2120      	movs	r1, #32
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	460a      	mov	r2, r1
 8006a3a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3e:	2b07      	cmp	r3, #7
 8006a40:	d9e9      	bls.n	8006a16 <gen_numname+0xe6>
}
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	3730      	adds	r7, #48	@ 0x30
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006a58:	230b      	movs	r3, #11
 8006a5a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	0852      	lsrs	r2, r2, #1
 8006a62:	01db      	lsls	r3, r3, #7
 8006a64:	4313      	orrs	r3, r2
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	1c59      	adds	r1, r3, #1
 8006a6c:	6079      	str	r1, [r7, #4]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	4413      	add	r3, r2
 8006a72:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	60bb      	str	r3, [r7, #8]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1ed      	bne.n	8006a5c <sum_sfn+0x10>
	return sum;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b086      	sub	sp, #24
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff fc89 	bl	80063b6 <dir_sdi>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <dir_find+0x24>
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	e0a9      	b.n	8006c06 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ab2:	23ff      	movs	r3, #255	@ 0xff
 8006ab4:	753b      	strb	r3, [r7, #20]
 8006ab6:	7d3b      	ldrb	r3, [r7, #20]
 8006ab8:	757b      	strb	r3, [r7, #21]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6938      	ldr	r0, [r7, #16]
 8006aca:	f7ff f895 	bl	8005bf8 <move_window>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f040 8090 	bne.w	8006bfa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006ae2:	7dbb      	ldrb	r3, [r7, #22]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <dir_find+0x60>
 8006ae8:	2304      	movs	r3, #4
 8006aea:	75fb      	strb	r3, [r7, #23]
 8006aec:	e08a      	b.n	8006c04 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	330b      	adds	r3, #11
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006afa:	73fb      	strb	r3, [r7, #15]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	7bfa      	ldrb	r2, [r7, #15]
 8006b00:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006b02:	7dbb      	ldrb	r3, [r7, #22]
 8006b04:	2be5      	cmp	r3, #229	@ 0xe5
 8006b06:	d007      	beq.n	8006b18 <dir_find+0x8a>
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <dir_find+0x98>
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	2b0f      	cmp	r3, #15
 8006b16:	d006      	beq.n	8006b26 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006b18:	23ff      	movs	r3, #255	@ 0xff
 8006b1a:	757b      	strb	r3, [r7, #21]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b22:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b24:	e05e      	b.n	8006be4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	2b0f      	cmp	r3, #15
 8006b2a:	d136      	bne.n	8006b9a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d154      	bne.n	8006be4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006b3a:	7dbb      	ldrb	r3, [r7, #22]
 8006b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00d      	beq.n	8006b60 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	7b5b      	ldrb	r3, [r3, #13]
 8006b4a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006b4c:	7dbb      	ldrb	r3, [r7, #22]
 8006b4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b52:	75bb      	strb	r3, [r7, #22]
 8006b54:	7dbb      	ldrb	r3, [r7, #22]
 8006b56:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695a      	ldr	r2, [r3, #20]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006b60:	7dba      	ldrb	r2, [r7, #22]
 8006b62:	7d7b      	ldrb	r3, [r7, #21]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d115      	bne.n	8006b94 <dir_find+0x106>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	330d      	adds	r3, #13
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	7d3a      	ldrb	r2, [r7, #20]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d10e      	bne.n	8006b94 <dir_find+0x106>
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	691a      	ldr	r2, [r3, #16]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4610      	mov	r0, r2
 8006b82:	f7ff fdfd 	bl	8006780 <cmp_lfn>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <dir_find+0x106>
 8006b8c:	7d7b      	ldrb	r3, [r7, #21]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	e000      	b.n	8006b96 <dir_find+0x108>
 8006b94:	23ff      	movs	r3, #255	@ 0xff
 8006b96:	757b      	strb	r3, [r7, #21]
 8006b98:	e024      	b.n	8006be4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006b9a:	7d7b      	ldrb	r3, [r7, #21]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d109      	bne.n	8006bb4 <dir_find+0x126>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff ff51 	bl	8006a4c <sum_sfn>
 8006baa:	4603      	mov	r3, r0
 8006bac:	461a      	mov	r2, r3
 8006bae:	7d3b      	ldrb	r3, [r7, #20]
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d024      	beq.n	8006bfe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <dir_find+0x14a>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a18      	ldr	r0, [r3, #32]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	3324      	adds	r3, #36	@ 0x24
 8006bca:	220b      	movs	r2, #11
 8006bcc:	4619      	mov	r1, r3
 8006bce:	f7fe fe21 	bl	8005814 <mem_cmp>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d014      	beq.n	8006c02 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006bd8:	23ff      	movs	r3, #255	@ 0xff
 8006bda:	757b      	strb	r3, [r7, #21]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f04f 32ff 	mov.w	r2, #4294967295
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006be4:	2100      	movs	r1, #0
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7ff fc6e 	bl	80064c8 <dir_next>
 8006bec:	4603      	mov	r3, r0
 8006bee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006bf0:	7dfb      	ldrb	r3, [r7, #23]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f43f af65 	beq.w	8006ac2 <dir_find+0x34>
 8006bf8:	e004      	b.n	8006c04 <dir_find+0x176>
		if (res != FR_OK) break;
 8006bfa:	bf00      	nop
 8006bfc:	e002      	b.n	8006c04 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006bfe:	bf00      	nop
 8006c00:	e000      	b.n	8006c04 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006c02:	bf00      	nop

	return res;
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08c      	sub	sp, #48	@ 0x30
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006c24:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <dir_register+0x20>
 8006c2c:	2306      	movs	r3, #6
 8006c2e:	e0e0      	b.n	8006df2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006c30:	2300      	movs	r3, #0
 8006c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c34:	e002      	b.n	8006c3c <dir_register+0x2c>
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	3301      	adds	r3, #1
 8006c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	691a      	ldr	r2, [r3, #16]
 8006c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	4413      	add	r3, r2
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1f4      	bne.n	8006c36 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006c52:	f107 030c 	add.w	r3, r7, #12
 8006c56:	220c      	movs	r2, #12
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe fd9f 	bl	800579c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d032      	beq.n	8006cce <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2240      	movs	r2, #64	@ 0x40
 8006c6c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006c70:	2301      	movs	r3, #1
 8006c72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c74:	e016      	b.n	8006ca4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	691a      	ldr	r2, [r3, #16]
 8006c80:	f107 010c 	add.w	r1, r7, #12
 8006c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c86:	f7ff fe53 	bl	8006930 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff feff 	bl	8006a8e <dir_find>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006c96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca6:	2b63      	cmp	r3, #99	@ 0x63
 8006ca8:	d9e5      	bls.n	8006c76 <dir_register+0x66>
 8006caa:	e000      	b.n	8006cae <dir_register+0x9e>
			if (res != FR_OK) break;
 8006cac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb0:	2b64      	cmp	r3, #100	@ 0x64
 8006cb2:	d101      	bne.n	8006cb8 <dir_register+0xa8>
 8006cb4:	2307      	movs	r3, #7
 8006cb6:	e09c      	b.n	8006df2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006cb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d002      	beq.n	8006cc6 <dir_register+0xb6>
 8006cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cc4:	e095      	b.n	8006df2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006cc6:	7dfa      	ldrb	r2, [r7, #23]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d007      	beq.n	8006ce8 <dir_register+0xd8>
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	330c      	adds	r3, #12
 8006cdc:	4a47      	ldr	r2, [pc, #284]	@ (8006dfc <dir_register+0x1ec>)
 8006cde:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce2:	089b      	lsrs	r3, r3, #2
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	e000      	b.n	8006cea <dir_register+0xda>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006cec:	6a39      	ldr	r1, [r7, #32]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff fcc0 	bl	8006674 <dir_alloc>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d148      	bne.n	8006d94 <dir_register+0x184>
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	623b      	str	r3, [r7, #32]
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d042      	beq.n	8006d94 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	695a      	ldr	r2, [r3, #20]
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	015b      	lsls	r3, r3, #5
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff fb4b 	bl	80063b6 <dir_sdi>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006d26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d132      	bne.n	8006d94 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	3324      	adds	r3, #36	@ 0x24
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff fe8a 	bl	8006a4c <sum_sfn>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	4619      	mov	r1, r3
 8006d42:	69f8      	ldr	r0, [r7, #28]
 8006d44:	f7fe ff58 	bl	8005bf8 <move_window>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8006d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d11d      	bne.n	8006d92 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	6918      	ldr	r0, [r3, #16]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a19      	ldr	r1, [r3, #32]
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	7efb      	ldrb	r3, [r7, #27]
 8006d64:	f7ff fd7c 	bl	8006860 <put_lfn>
				fs->wflag = 1;
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006d6e:	2100      	movs	r1, #0
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff fba9 	bl	80064c8 <dir_next>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d107      	bne.n	8006d94 <dir_register+0x184>
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	623b      	str	r3, [r7, #32]
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1d5      	bne.n	8006d3c <dir_register+0x12c>
 8006d90:	e000      	b.n	8006d94 <dir_register+0x184>
				if (res != FR_OK) break;
 8006d92:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006d94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d128      	bne.n	8006dee <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	4619      	mov	r1, r3
 8006da2:	69f8      	ldr	r0, [r7, #28]
 8006da4:	f7fe ff28 	bl	8005bf8 <move_window>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006dae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d11b      	bne.n	8006dee <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fe fd0d 	bl	80057de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a18      	ldr	r0, [r3, #32]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3324      	adds	r3, #36	@ 0x24
 8006dcc:	220b      	movs	r2, #11
 8006dce:	4619      	mov	r1, r3
 8006dd0:	f7fe fce4 	bl	800579c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	330c      	adds	r3, #12
 8006de0:	f002 0218 	and.w	r2, r2, #24
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	2201      	movs	r2, #1
 8006dec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006dee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3730      	adds	r7, #48	@ 0x30
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	4ec4ec4f 	.word	0x4ec4ec4f

08006e00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	@ 0x28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	61ba      	str	r2, [r7, #24]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4413      	add	r3, r2
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006e2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e30:	2b1f      	cmp	r3, #31
 8006e32:	d940      	bls.n	8006eb6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006e34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e36:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e38:	d006      	beq.n	8006e48 <create_name+0x48>
 8006e3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006e3e:	d110      	bne.n	8006e62 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006e40:	e002      	b.n	8006e48 <create_name+0x48>
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	3301      	adds	r3, #1
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e52:	d0f6      	beq.n	8006e42 <create_name+0x42>
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	4413      	add	r3, r2
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006e5e:	d0f0      	beq.n	8006e42 <create_name+0x42>
			break;
 8006e60:	e02a      	b.n	8006eb8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2bfe      	cmp	r3, #254	@ 0xfe
 8006e66:	d901      	bls.n	8006e6c <create_name+0x6c>
 8006e68:	2306      	movs	r3, #6
 8006e6a:	e17d      	b.n	8007168 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006e6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006e72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e74:	2101      	movs	r1, #1
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 f9b8 	bl	80081ec <ff_convert>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006e80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <create_name+0x8a>
 8006e86:	2306      	movs	r3, #6
 8006e88:	e16e      	b.n	8007168 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006e8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e8e:	d809      	bhi.n	8006ea4 <create_name+0xa4>
 8006e90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e92:	4619      	mov	r1, r3
 8006e94:	488d      	ldr	r0, [pc, #564]	@ (80070cc <create_name+0x2cc>)
 8006e96:	f7fe fce4 	bl	8005862 <chk_chr>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <create_name+0xa4>
 8006ea0:	2306      	movs	r3, #6
 8006ea2:	e161      	b.n	8007168 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	617a      	str	r2, [r7, #20]
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006eb2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006eb4:	e7b4      	b.n	8006e20 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006eb6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	441a      	add	r2, r3
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006ec2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ec4:	2b1f      	cmp	r3, #31
 8006ec6:	d801      	bhi.n	8006ecc <create_name+0xcc>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	e000      	b.n	8006ece <create_name+0xce>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006ed2:	e011      	b.n	8006ef8 <create_name+0xf8>
		w = lfn[di - 1];
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006eda:	3b01      	subs	r3, #1
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006ee6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d002      	beq.n	8006ef2 <create_name+0xf2>
 8006eec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006eee:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ef0:	d106      	bne.n	8006f00 <create_name+0x100>
		di--;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1ea      	bne.n	8006ed4 <create_name+0xd4>
 8006efe:	e000      	b.n	8006f02 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006f00:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	4413      	add	r3, r2
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <create_name+0x118>
 8006f14:	2306      	movs	r3, #6
 8006f16:	e127      	b.n	8007168 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3324      	adds	r3, #36	@ 0x24
 8006f1c:	220b      	movs	r2, #11
 8006f1e:	2120      	movs	r1, #32
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fe fc5c 	bl	80057de <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006f26:	2300      	movs	r3, #0
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	e002      	b.n	8006f32 <create_name+0x132>
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d0f5      	beq.n	8006f2c <create_name+0x12c>
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f4c:	d0ee      	beq.n	8006f2c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d009      	beq.n	8006f68 <create_name+0x168>
 8006f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f58:	f043 0303 	orr.w	r3, r3, #3
 8006f5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006f60:	e002      	b.n	8006f68 <create_name+0x168>
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d009      	beq.n	8006f82 <create_name+0x182>
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006f74:	3b01      	subs	r3, #1
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f80:	d1ef      	bne.n	8006f62 <create_name+0x162>

	i = b = 0; ni = 8;
 8006f82:	2300      	movs	r3, #0
 8006f84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006f88:	2300      	movs	r3, #0
 8006f8a:	623b      	str	r3, [r7, #32]
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	61ba      	str	r2, [r7, #24]
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006fa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 8090 	beq.w	80070c8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006fa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d006      	beq.n	8006fbc <create_name+0x1bc>
 8006fae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fb2:	d10a      	bne.n	8006fca <create_name+0x1ca>
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d006      	beq.n	8006fca <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fc0:	f043 0303 	orr.w	r3, r3, #3
 8006fc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006fc8:	e07d      	b.n	80070c6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006fca:	6a3a      	ldr	r2, [r7, #32]
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d203      	bcs.n	8006fda <create_name+0x1da>
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d123      	bne.n	8007022 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	2b0b      	cmp	r3, #11
 8006fde:	d106      	bne.n	8006fee <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fe4:	f043 0303 	orr.w	r3, r3, #3
 8006fe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006fec:	e075      	b.n	80070da <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d005      	beq.n	8007002 <create_name+0x202>
 8006ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ffa:	f043 0303 	orr.w	r3, r3, #3
 8006ffe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	429a      	cmp	r2, r3
 8007008:	d866      	bhi.n	80070d8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	2308      	movs	r3, #8
 8007010:	623b      	str	r3, [r7, #32]
 8007012:	230b      	movs	r3, #11
 8007014:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007016:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007020:	e051      	b.n	80070c6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007022:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007024:	2b7f      	cmp	r3, #127	@ 0x7f
 8007026:	d914      	bls.n	8007052 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007028:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800702a:	2100      	movs	r1, #0
 800702c:	4618      	mov	r0, r3
 800702e:	f001 f8dd 	bl	80081ec <ff_convert>
 8007032:	4603      	mov	r3, r0
 8007034:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007036:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d004      	beq.n	8007046 <create_name+0x246>
 800703c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800703e:	3b80      	subs	r3, #128	@ 0x80
 8007040:	4a23      	ldr	r2, [pc, #140]	@ (80070d0 <create_name+0x2d0>)
 8007042:	5cd3      	ldrb	r3, [r2, r3]
 8007044:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007046:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800704a:	f043 0302 	orr.w	r3, r3, #2
 800704e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <create_name+0x268>
 8007058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800705a:	4619      	mov	r1, r3
 800705c:	481d      	ldr	r0, [pc, #116]	@ (80070d4 <create_name+0x2d4>)
 800705e:	f7fe fc00 	bl	8005862 <chk_chr>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d008      	beq.n	800707a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007068:	235f      	movs	r3, #95	@ 0x5f
 800706a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800706c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007070:	f043 0303 	orr.w	r3, r3, #3
 8007074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007078:	e01b      	b.n	80070b2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800707a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800707c:	2b40      	cmp	r3, #64	@ 0x40
 800707e:	d909      	bls.n	8007094 <create_name+0x294>
 8007080:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007082:	2b5a      	cmp	r3, #90	@ 0x5a
 8007084:	d806      	bhi.n	8007094 <create_name+0x294>
					b |= 2;
 8007086:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800708a:	f043 0302 	orr.w	r3, r3, #2
 800708e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007092:	e00e      	b.n	80070b2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007094:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007096:	2b60      	cmp	r3, #96	@ 0x60
 8007098:	d90b      	bls.n	80070b2 <create_name+0x2b2>
 800709a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800709c:	2b7a      	cmp	r3, #122	@ 0x7a
 800709e:	d808      	bhi.n	80070b2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80070a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070a4:	f043 0301 	orr.w	r3, r3, #1
 80070a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80070ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070ae:	3b20      	subs	r3, #32
 80070b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	623a      	str	r2, [r7, #32]
 80070b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80070ba:	b2d1      	uxtb	r1, r2
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	4413      	add	r3, r2
 80070c0:	460a      	mov	r2, r1
 80070c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80070c6:	e763      	b.n	8006f90 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80070c8:	bf00      	nop
 80070ca:	e006      	b.n	80070da <create_name+0x2da>
 80070cc:	0800d6c0 	.word	0x0800d6c0
 80070d0:	0800d79c 	.word	0x0800d79c
 80070d4:	0800d6cc 	.word	0x0800d6cc
			if (si > di) break;			/* No extension */
 80070d8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070e0:	2be5      	cmp	r3, #229	@ 0xe5
 80070e2:	d103      	bne.n	80070ec <create_name+0x2ec>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2205      	movs	r2, #5
 80070e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	2b08      	cmp	r3, #8
 80070f0:	d104      	bne.n	80070fc <create_name+0x2fc>
 80070f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80070fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007100:	f003 030c 	and.w	r3, r3, #12
 8007104:	2b0c      	cmp	r3, #12
 8007106:	d005      	beq.n	8007114 <create_name+0x314>
 8007108:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	2b03      	cmp	r3, #3
 8007112:	d105      	bne.n	8007120 <create_name+0x320>
 8007114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007118:	f043 0302 	orr.w	r3, r3, #2
 800711c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007124:	f003 0302 	and.w	r3, r3, #2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d117      	bne.n	800715c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800712c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	2b01      	cmp	r3, #1
 8007136:	d105      	bne.n	8007144 <create_name+0x344>
 8007138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800713c:	f043 0310 	orr.w	r3, r3, #16
 8007140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007144:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007148:	f003 030c 	and.w	r3, r3, #12
 800714c:	2b04      	cmp	r3, #4
 800714e:	d105      	bne.n	800715c <create_name+0x35c>
 8007150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007154:	f043 0308 	orr.w	r3, r3, #8
 8007158:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007162:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007166:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007168:	4618      	mov	r0, r3
 800716a:	3728      	adds	r7, #40	@ 0x28
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007184:	e002      	b.n	800718c <follow_path+0x1c>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b2f      	cmp	r3, #47	@ 0x2f
 8007192:	d0f8      	beq.n	8007186 <follow_path+0x16>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b5c      	cmp	r3, #92	@ 0x5c
 800719a:	d0f4      	beq.n	8007186 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	2200      	movs	r2, #0
 80071a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b1f      	cmp	r3, #31
 80071a8:	d80a      	bhi.n	80071c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2280      	movs	r2, #128	@ 0x80
 80071ae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80071b2:	2100      	movs	r1, #0
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff f8fe 	bl	80063b6 <dir_sdi>
 80071ba:	4603      	mov	r3, r0
 80071bc:	75fb      	strb	r3, [r7, #23]
 80071be:	e048      	b.n	8007252 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071c0:	463b      	mov	r3, r7
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff fe1b 	bl	8006e00 <create_name>
 80071ca:	4603      	mov	r3, r0
 80071cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d139      	bne.n	8007248 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff fc5a 	bl	8006a8e <dir_find>
 80071da:	4603      	mov	r3, r0
 80071dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80071e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d12c      	bne.n	800724c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80071f2:	7afb      	ldrb	r3, [r7, #11]
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d127      	bne.n	800724c <follow_path+0xdc>
 80071fc:	2305      	movs	r3, #5
 80071fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007200:	e024      	b.n	800724c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007202:	7afb      	ldrb	r3, [r7, #11]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d121      	bne.n	8007250 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	799b      	ldrb	r3, [r3, #6]
 8007210:	f003 0310 	and.w	r3, r3, #16
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007218:	2305      	movs	r3, #5
 800721a:	75fb      	strb	r3, [r7, #23]
 800721c:	e019      	b.n	8007252 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	8992      	ldrh	r2, [r2, #12]
 800722c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007230:	fb00 f202 	mul.w	r2, r0, r2
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	440b      	add	r3, r1
 8007238:	4619      	mov	r1, r3
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f7ff fa61 	bl	8006702 <ld_clust>
 8007240:	4602      	mov	r2, r0
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007246:	e7bb      	b.n	80071c0 <follow_path+0x50>
			if (res != FR_OK) break;
 8007248:	bf00      	nop
 800724a:	e002      	b.n	8007252 <follow_path+0xe2>
				break;
 800724c:	bf00      	nop
 800724e:	e000      	b.n	8007252 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007250:	bf00      	nop
			}
		}
	}

	return res;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007264:	f04f 33ff 	mov.w	r3, #4294967295
 8007268:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d031      	beq.n	80072d6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	e002      	b.n	8007280 <get_ldnumber+0x24>
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	3301      	adds	r3, #1
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b1f      	cmp	r3, #31
 8007286:	d903      	bls.n	8007290 <get_ldnumber+0x34>
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b3a      	cmp	r3, #58	@ 0x3a
 800728e:	d1f4      	bne.n	800727a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b3a      	cmp	r3, #58	@ 0x3a
 8007296:	d11c      	bne.n	80072d2 <get_ldnumber+0x76>
			tp = *path;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	60fa      	str	r2, [r7, #12]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	3b30      	subs	r3, #48	@ 0x30
 80072a8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b09      	cmp	r3, #9
 80072ae:	d80e      	bhi.n	80072ce <get_ldnumber+0x72>
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d10a      	bne.n	80072ce <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d107      	bne.n	80072ce <get_ldnumber+0x72>
					vol = (int)i;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	3301      	adds	r3, #1
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	e002      	b.n	80072d8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80072d2:	2300      	movs	r3, #0
 80072d4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80072d6:	693b      	ldr	r3, [r7, #16]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	70da      	strb	r2, [r3, #3]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f04f 32ff 	mov.w	r2, #4294967295
 80072fa:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7fe fc7a 	bl	8005bf8 <move_window>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <check_fs+0x2a>
 800730a:	2304      	movs	r3, #4
 800730c:	e038      	b.n	8007380 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3338      	adds	r3, #56	@ 0x38
 8007312:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe f9be 	bl	8005698 <ld_word>
 800731c:	4603      	mov	r3, r0
 800731e:	461a      	mov	r2, r3
 8007320:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007324:	429a      	cmp	r2, r3
 8007326:	d001      	beq.n	800732c <check_fs+0x48>
 8007328:	2303      	movs	r3, #3
 800732a:	e029      	b.n	8007380 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007332:	2be9      	cmp	r3, #233	@ 0xe9
 8007334:	d009      	beq.n	800734a <check_fs+0x66>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800733c:	2beb      	cmp	r3, #235	@ 0xeb
 800733e:	d11e      	bne.n	800737e <check_fs+0x9a>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007346:	2b90      	cmp	r3, #144	@ 0x90
 8007348:	d119      	bne.n	800737e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3338      	adds	r3, #56	@ 0x38
 800734e:	3336      	adds	r3, #54	@ 0x36
 8007350:	4618      	mov	r0, r3
 8007352:	f7fe f9b9 	bl	80056c8 <ld_dword>
 8007356:	4603      	mov	r3, r0
 8007358:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800735c:	4a0a      	ldr	r2, [pc, #40]	@ (8007388 <check_fs+0xa4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d101      	bne.n	8007366 <check_fs+0x82>
 8007362:	2300      	movs	r3, #0
 8007364:	e00c      	b.n	8007380 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3338      	adds	r3, #56	@ 0x38
 800736a:	3352      	adds	r3, #82	@ 0x52
 800736c:	4618      	mov	r0, r3
 800736e:	f7fe f9ab 	bl	80056c8 <ld_dword>
 8007372:	4603      	mov	r3, r0
 8007374:	4a05      	ldr	r2, [pc, #20]	@ (800738c <check_fs+0xa8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d101      	bne.n	800737e <check_fs+0x9a>
 800737a:	2300      	movs	r3, #0
 800737c:	e000      	b.n	8007380 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800737e:	2302      	movs	r3, #2
}
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	00544146 	.word	0x00544146
 800738c:	33544146 	.word	0x33544146

08007390 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b096      	sub	sp, #88	@ 0x58
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	4613      	mov	r3, r2
 800739c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff ff59 	bl	800725c <get_ldnumber>
 80073aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80073ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	da01      	bge.n	80073b6 <find_volume+0x26>
 80073b2:	230b      	movs	r3, #11
 80073b4:	e265      	b.n	8007882 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80073b6:	4a9f      	ldr	r2, [pc, #636]	@ (8007634 <find_volume+0x2a4>)
 80073b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073be:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80073c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <find_volume+0x3a>
 80073c6:	230c      	movs	r3, #12
 80073c8:	e25b      	b.n	8007882 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	f023 0301 	bic.w	r3, r3, #1
 80073d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80073d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01a      	beq.n	8007416 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80073e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e2:	785b      	ldrb	r3, [r3, #1]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe f8b7 	bl	8005558 <disk_status>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80073f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10c      	bne.n	8007416 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <find_volume+0x82>
 8007402:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800740e:	230a      	movs	r3, #10
 8007410:	e237      	b.n	8007882 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007412:	2300      	movs	r3, #0
 8007414:	e235      	b.n	8007882 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800741c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800741e:	b2da      	uxtb	r2, r3
 8007420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007422:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007426:	785b      	ldrb	r3, [r3, #1]
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe f8af 	bl	800558c <disk_initialize>
 800742e:	4603      	mov	r3, r0
 8007430:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007434:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007440:	2303      	movs	r3, #3
 8007442:	e21e      	b.n	8007882 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d007      	beq.n	800745a <find_volume+0xca>
 800744a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800744e:	f003 0304 	and.w	r3, r3, #4
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007456:	230a      	movs	r3, #10
 8007458:	e213      	b.n	8007882 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800745a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745c:	7858      	ldrb	r0, [r3, #1]
 800745e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007460:	330c      	adds	r3, #12
 8007462:	461a      	mov	r2, r3
 8007464:	2102      	movs	r1, #2
 8007466:	f7fe f8f9 	bl	800565c <disk_ioctl>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <find_volume+0xe4>
 8007470:	2301      	movs	r3, #1
 8007472:	e206      	b.n	8007882 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	899b      	ldrh	r3, [r3, #12]
 8007478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800747c:	d80d      	bhi.n	800749a <find_volume+0x10a>
 800747e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007480:	899b      	ldrh	r3, [r3, #12]
 8007482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007486:	d308      	bcc.n	800749a <find_volume+0x10a>
 8007488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748a:	899b      	ldrh	r3, [r3, #12]
 800748c:	461a      	mov	r2, r3
 800748e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007490:	899b      	ldrh	r3, [r3, #12]
 8007492:	3b01      	subs	r3, #1
 8007494:	4013      	ands	r3, r2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <find_volume+0x10e>
 800749a:	2301      	movs	r3, #1
 800749c:	e1f1      	b.n	8007882 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80074a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80074a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80074a6:	f7ff ff1d 	bl	80072e4 <check_fs>
 80074aa:	4603      	mov	r3, r0
 80074ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80074b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d149      	bne.n	800754c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80074b8:	2300      	movs	r3, #0
 80074ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80074bc:	e01e      	b.n	80074fc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80074be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80074c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074c6:	011b      	lsls	r3, r3, #4
 80074c8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80074cc:	4413      	add	r3, r2
 80074ce:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80074d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d2:	3304      	adds	r3, #4
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d006      	beq.n	80074e8 <find_volume+0x158>
 80074da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074dc:	3308      	adds	r3, #8
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe f8f2 	bl	80056c8 <ld_dword>
 80074e4:	4602      	mov	r2, r0
 80074e6:	e000      	b.n	80074ea <find_volume+0x15a>
 80074e8:	2200      	movs	r2, #0
 80074ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	3358      	adds	r3, #88	@ 0x58
 80074f0:	443b      	add	r3, r7
 80074f2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80074f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074f8:	3301      	adds	r3, #1
 80074fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80074fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d9dd      	bls.n	80074be <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007502:	2300      	movs	r3, #0
 8007504:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <find_volume+0x182>
 800750c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800750e:	3b01      	subs	r3, #1
 8007510:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	3358      	adds	r3, #88	@ 0x58
 8007518:	443b      	add	r3, r7
 800751a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800751e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007522:	2b00      	cmp	r3, #0
 8007524:	d005      	beq.n	8007532 <find_volume+0x1a2>
 8007526:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007528:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800752a:	f7ff fedb 	bl	80072e4 <check_fs>
 800752e:	4603      	mov	r3, r0
 8007530:	e000      	b.n	8007534 <find_volume+0x1a4>
 8007532:	2303      	movs	r3, #3
 8007534:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007538:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800753c:	2b01      	cmp	r3, #1
 800753e:	d905      	bls.n	800754c <find_volume+0x1bc>
 8007540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007542:	3301      	adds	r3, #1
 8007544:	643b      	str	r3, [r7, #64]	@ 0x40
 8007546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007548:	2b03      	cmp	r3, #3
 800754a:	d9e2      	bls.n	8007512 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800754c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007550:	2b04      	cmp	r3, #4
 8007552:	d101      	bne.n	8007558 <find_volume+0x1c8>
 8007554:	2301      	movs	r3, #1
 8007556:	e194      	b.n	8007882 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007558:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800755c:	2b01      	cmp	r3, #1
 800755e:	d901      	bls.n	8007564 <find_volume+0x1d4>
 8007560:	230d      	movs	r3, #13
 8007562:	e18e      	b.n	8007882 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007566:	3338      	adds	r3, #56	@ 0x38
 8007568:	330b      	adds	r3, #11
 800756a:	4618      	mov	r0, r3
 800756c:	f7fe f894 	bl	8005698 <ld_word>
 8007570:	4603      	mov	r3, r0
 8007572:	461a      	mov	r2, r3
 8007574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007576:	899b      	ldrh	r3, [r3, #12]
 8007578:	429a      	cmp	r2, r3
 800757a:	d001      	beq.n	8007580 <find_volume+0x1f0>
 800757c:	230d      	movs	r3, #13
 800757e:	e180      	b.n	8007882 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007582:	3338      	adds	r3, #56	@ 0x38
 8007584:	3316      	adds	r3, #22
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe f886 	bl	8005698 <ld_word>
 800758c:	4603      	mov	r3, r0
 800758e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007592:	2b00      	cmp	r3, #0
 8007594:	d106      	bne.n	80075a4 <find_volume+0x214>
 8007596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007598:	3338      	adds	r3, #56	@ 0x38
 800759a:	3324      	adds	r3, #36	@ 0x24
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe f893 	bl	80056c8 <ld_dword>
 80075a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80075a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075a8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80075aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ac:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80075b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80075b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b6:	789b      	ldrb	r3, [r3, #2]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d005      	beq.n	80075c8 <find_volume+0x238>
 80075bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075be:	789b      	ldrb	r3, [r3, #2]
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d001      	beq.n	80075c8 <find_volume+0x238>
 80075c4:	230d      	movs	r3, #13
 80075c6:	e15c      	b.n	8007882 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80075c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ca:	789b      	ldrb	r3, [r3, #2]
 80075cc:	461a      	mov	r2, r3
 80075ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075d0:	fb02 f303 	mul.w	r3, r2, r3
 80075d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80075d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075dc:	461a      	mov	r2, r3
 80075de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	895b      	ldrh	r3, [r3, #10]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d008      	beq.n	80075fc <find_volume+0x26c>
 80075ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ec:	895b      	ldrh	r3, [r3, #10]
 80075ee:	461a      	mov	r2, r3
 80075f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f2:	895b      	ldrh	r3, [r3, #10]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	4013      	ands	r3, r2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <find_volume+0x270>
 80075fc:	230d      	movs	r3, #13
 80075fe:	e140      	b.n	8007882 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007602:	3338      	adds	r3, #56	@ 0x38
 8007604:	3311      	adds	r3, #17
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe f846 	bl	8005698 <ld_word>
 800760c:	4603      	mov	r3, r0
 800760e:	461a      	mov	r2, r3
 8007610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007612:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007616:	891b      	ldrh	r3, [r3, #8]
 8007618:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800761a:	8992      	ldrh	r2, [r2, #12]
 800761c:	0952      	lsrs	r2, r2, #5
 800761e:	b292      	uxth	r2, r2
 8007620:	fbb3 f1f2 	udiv	r1, r3, r2
 8007624:	fb01 f202 	mul.w	r2, r1, r2
 8007628:	1a9b      	subs	r3, r3, r2
 800762a:	b29b      	uxth	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <find_volume+0x2a8>
 8007630:	230d      	movs	r3, #13
 8007632:	e126      	b.n	8007882 <find_volume+0x4f2>
 8007634:	20003650 	.word	0x20003650

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763a:	3338      	adds	r3, #56	@ 0x38
 800763c:	3313      	adds	r3, #19
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe f82a 	bl	8005698 <ld_word>
 8007644:	4603      	mov	r3, r0
 8007646:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007648:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800764a:	2b00      	cmp	r3, #0
 800764c:	d106      	bne.n	800765c <find_volume+0x2cc>
 800764e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007650:	3338      	adds	r3, #56	@ 0x38
 8007652:	3320      	adds	r3, #32
 8007654:	4618      	mov	r0, r3
 8007656:	f7fe f837 	bl	80056c8 <ld_dword>
 800765a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800765c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765e:	3338      	adds	r3, #56	@ 0x38
 8007660:	330e      	adds	r3, #14
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe f818 	bl	8005698 <ld_word>
 8007668:	4603      	mov	r3, r0
 800766a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800766c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <find_volume+0x2e6>
 8007672:	230d      	movs	r3, #13
 8007674:	e105      	b.n	8007882 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007676:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800767a:	4413      	add	r3, r2
 800767c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800767e:	8911      	ldrh	r1, [r2, #8]
 8007680:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007682:	8992      	ldrh	r2, [r2, #12]
 8007684:	0952      	lsrs	r2, r2, #5
 8007686:	b292      	uxth	r2, r2
 8007688:	fbb1 f2f2 	udiv	r2, r1, r2
 800768c:	b292      	uxth	r2, r2
 800768e:	4413      	add	r3, r2
 8007690:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007696:	429a      	cmp	r2, r3
 8007698:	d201      	bcs.n	800769e <find_volume+0x30e>
 800769a:	230d      	movs	r3, #13
 800769c:	e0f1      	b.n	8007882 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800769e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076a6:	8952      	ldrh	r2, [r2, #10]
 80076a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <find_volume+0x328>
 80076b4:	230d      	movs	r3, #13
 80076b6:	e0e4      	b.n	8007882 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80076b8:	2303      	movs	r3, #3
 80076ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d802      	bhi.n	80076ce <find_volume+0x33e>
 80076c8:	2302      	movs	r3, #2
 80076ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d802      	bhi.n	80076de <find_volume+0x34e>
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80076de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e0:	1c9a      	adds	r2, r3, #2
 80076e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80076e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80076ea:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80076ec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80076ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076f0:	441a      	add	r2, r3
 80076f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80076f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80076f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fa:	441a      	add	r2, r3
 80076fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fe:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8007700:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007704:	2b03      	cmp	r3, #3
 8007706:	d11e      	bne.n	8007746 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	3338      	adds	r3, #56	@ 0x38
 800770c:	332a      	adds	r3, #42	@ 0x2a
 800770e:	4618      	mov	r0, r3
 8007710:	f7fd ffc2 	bl	8005698 <ld_word>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <find_volume+0x38e>
 800771a:	230d      	movs	r3, #13
 800771c:	e0b1      	b.n	8007882 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800771e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007720:	891b      	ldrh	r3, [r3, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <find_volume+0x39a>
 8007726:	230d      	movs	r3, #13
 8007728:	e0ab      	b.n	8007882 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800772a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772c:	3338      	adds	r3, #56	@ 0x38
 800772e:	332c      	adds	r3, #44	@ 0x2c
 8007730:	4618      	mov	r0, r3
 8007732:	f7fd ffc9 	bl	80056c8 <ld_dword>
 8007736:	4602      	mov	r2, r0
 8007738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800773c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	647b      	str	r3, [r7, #68]	@ 0x44
 8007744:	e01f      	b.n	8007786 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007748:	891b      	ldrh	r3, [r3, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <find_volume+0x3c2>
 800774e:	230d      	movs	r3, #13
 8007750:	e097      	b.n	8007882 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007758:	441a      	add	r2, r3
 800775a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800775e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007762:	2b02      	cmp	r3, #2
 8007764:	d103      	bne.n	800776e <find_volume+0x3de>
 8007766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	e00a      	b.n	8007784 <find_volume+0x3f4>
 800776e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007770:	69da      	ldr	r2, [r3, #28]
 8007772:	4613      	mov	r3, r2
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	4413      	add	r3, r2
 8007778:	085a      	lsrs	r2, r3, #1
 800777a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007784:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007788:	6a1a      	ldr	r2, [r3, #32]
 800778a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778c:	899b      	ldrh	r3, [r3, #12]
 800778e:	4619      	mov	r1, r3
 8007790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007792:	440b      	add	r3, r1
 8007794:	3b01      	subs	r3, #1
 8007796:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007798:	8989      	ldrh	r1, [r1, #12]
 800779a:	fbb3 f3f1 	udiv	r3, r3, r1
 800779e:	429a      	cmp	r2, r3
 80077a0:	d201      	bcs.n	80077a6 <find_volume+0x416>
 80077a2:	230d      	movs	r3, #13
 80077a4:	e06d      	b.n	8007882 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80077a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a8:	f04f 32ff 	mov.w	r2, #4294967295
 80077ac:	619a      	str	r2, [r3, #24]
 80077ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b0:	699a      	ldr	r2, [r3, #24]
 80077b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80077b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b8:	2280      	movs	r2, #128	@ 0x80
 80077ba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80077bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d149      	bne.n	8007858 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80077c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c6:	3338      	adds	r3, #56	@ 0x38
 80077c8:	3330      	adds	r3, #48	@ 0x30
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fd ff64 	bl	8005698 <ld_word>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d140      	bne.n	8007858 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80077d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077d8:	3301      	adds	r3, #1
 80077da:	4619      	mov	r1, r3
 80077dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077de:	f7fe fa0b 	bl	8005bf8 <move_window>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d137      	bne.n	8007858 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80077e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ea:	2200      	movs	r2, #0
 80077ec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80077ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f0:	3338      	adds	r3, #56	@ 0x38
 80077f2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fd ff4e 	bl	8005698 <ld_word>
 80077fc:	4603      	mov	r3, r0
 80077fe:	461a      	mov	r2, r3
 8007800:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007804:	429a      	cmp	r2, r3
 8007806:	d127      	bne.n	8007858 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780a:	3338      	adds	r3, #56	@ 0x38
 800780c:	4618      	mov	r0, r3
 800780e:	f7fd ff5b 	bl	80056c8 <ld_dword>
 8007812:	4603      	mov	r3, r0
 8007814:	4a1d      	ldr	r2, [pc, #116]	@ (800788c <find_volume+0x4fc>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d11e      	bne.n	8007858 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800781a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781c:	3338      	adds	r3, #56	@ 0x38
 800781e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007822:	4618      	mov	r0, r3
 8007824:	f7fd ff50 	bl	80056c8 <ld_dword>
 8007828:	4603      	mov	r3, r0
 800782a:	4a19      	ldr	r2, [pc, #100]	@ (8007890 <find_volume+0x500>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d113      	bne.n	8007858 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007832:	3338      	adds	r3, #56	@ 0x38
 8007834:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007838:	4618      	mov	r0, r3
 800783a:	f7fd ff45 	bl	80056c8 <ld_dword>
 800783e:	4602      	mov	r2, r0
 8007840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007842:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007846:	3338      	adds	r3, #56	@ 0x38
 8007848:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800784c:	4618      	mov	r0, r3
 800784e:	f7fd ff3b 	bl	80056c8 <ld_dword>
 8007852:	4602      	mov	r2, r0
 8007854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007856:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800785e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007860:	4b0c      	ldr	r3, [pc, #48]	@ (8007894 <find_volume+0x504>)
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	3301      	adds	r3, #1
 8007866:	b29a      	uxth	r2, r3
 8007868:	4b0a      	ldr	r3, [pc, #40]	@ (8007894 <find_volume+0x504>)
 800786a:	801a      	strh	r2, [r3, #0]
 800786c:	4b09      	ldr	r3, [pc, #36]	@ (8007894 <find_volume+0x504>)
 800786e:	881a      	ldrh	r2, [r3, #0]
 8007870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007872:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007876:	4a08      	ldr	r2, [pc, #32]	@ (8007898 <find_volume+0x508>)
 8007878:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800787a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800787c:	f7fe f954 	bl	8005b28 <clear_lock>
#endif
	return FR_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3758      	adds	r7, #88	@ 0x58
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	41615252 	.word	0x41615252
 8007890:	61417272 	.word	0x61417272
 8007894:	20003654 	.word	0x20003654
 8007898:	20003678 	.word	0x20003678

0800789c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80078a6:	2309      	movs	r3, #9
 80078a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01c      	beq.n	80078ea <validate+0x4e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d018      	beq.n	80078ea <validate+0x4e>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d013      	beq.n	80078ea <validate+0x4e>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	889a      	ldrh	r2, [r3, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	88db      	ldrh	r3, [r3, #6]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d10c      	bne.n	80078ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fd fe3e 	bl	8005558 <disk_status>
 80078dc:	4603      	mov	r3, r0
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <validate+0x4e>
			res = FR_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <validate+0x5a>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	e000      	b.n	80078f8 <validate+0x5c>
 80078f6:	2300      	movs	r3, #0
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	6013      	str	r3, [r2, #0]
	return res;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800791a:	f107 0310 	add.w	r3, r7, #16
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff fc9c 	bl	800725c <get_ldnumber>
 8007924:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	2b00      	cmp	r3, #0
 800792a:	da01      	bge.n	8007930 <f_mount+0x28>
 800792c:	230b      	movs	r3, #11
 800792e:	e02b      	b.n	8007988 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007930:	4a17      	ldr	r2, [pc, #92]	@ (8007990 <f_mount+0x88>)
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007938:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007940:	69b8      	ldr	r0, [r7, #24]
 8007942:	f7fe f8f1 	bl	8005b28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	2200      	movs	r2, #0
 800794a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	490d      	ldr	r1, [pc, #52]	@ (8007990 <f_mount+0x88>)
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <f_mount+0x66>
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d001      	beq.n	8007972 <f_mount+0x6a>
 800796e:	2300      	movs	r3, #0
 8007970:	e00a      	b.n	8007988 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007972:	f107 010c 	add.w	r1, r7, #12
 8007976:	f107 0308 	add.w	r3, r7, #8
 800797a:	2200      	movs	r2, #0
 800797c:	4618      	mov	r0, r3
 800797e:	f7ff fd07 	bl	8007390 <find_volume>
 8007982:	4603      	mov	r3, r0
 8007984:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007986:	7dfb      	ldrb	r3, [r7, #23]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3720      	adds	r7, #32
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	20003650 	.word	0x20003650

08007994 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b09a      	sub	sp, #104	@ 0x68
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <f_open+0x18>
 80079a8:	2309      	movs	r3, #9
 80079aa:	e1b7      	b.n	8007d1c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80079b4:	79fa      	ldrb	r2, [r7, #7]
 80079b6:	f107 0114 	add.w	r1, r7, #20
 80079ba:	f107 0308 	add.w	r3, r7, #8
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fce6 	bl	8007390 <find_volume>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80079ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f040 819b 	bne.w	8007d0a <f_open+0x376>
		dj.obj.fs = fs;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	f107 0318 	add.w	r3, r7, #24
 80079de:	4611      	mov	r1, r2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff fbc5 	bl	8007170 <follow_path>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80079ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d118      	bne.n	8007a26 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80079f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80079f8:	b25b      	sxtb	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	da03      	bge.n	8007a06 <f_open+0x72>
				res = FR_INVALID_NAME;
 80079fe:	2306      	movs	r3, #6
 8007a00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007a04:	e00f      	b.n	8007a26 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	bf8c      	ite	hi
 8007a0c:	2301      	movhi	r3, #1
 8007a0e:	2300      	movls	r3, #0
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	461a      	mov	r2, r3
 8007a14:	f107 0318 	add.w	r3, r7, #24
 8007a18:	4611      	mov	r1, r2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fd ff3c 	bl	8005898 <chk_lock>
 8007a20:	4603      	mov	r3, r0
 8007a22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	f003 031c 	and.w	r3, r3, #28
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d07f      	beq.n	8007b30 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007a30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d017      	beq.n	8007a68 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007a38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d10e      	bne.n	8007a5e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007a40:	f7fd ff86 	bl	8005950 <enq_lock>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d006      	beq.n	8007a58 <f_open+0xc4>
 8007a4a:	f107 0318 	add.w	r3, r7, #24
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff f8de 	bl	8006c10 <dir_register>
 8007a54:	4603      	mov	r3, r0
 8007a56:	e000      	b.n	8007a5a <f_open+0xc6>
 8007a58:	2312      	movs	r3, #18
 8007a5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	f043 0308 	orr.w	r3, r3, #8
 8007a64:	71fb      	strb	r3, [r7, #7]
 8007a66:	e010      	b.n	8007a8a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007a68:	7fbb      	ldrb	r3, [r7, #30]
 8007a6a:	f003 0311 	and.w	r3, r3, #17
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <f_open+0xe6>
					res = FR_DENIED;
 8007a72:	2307      	movs	r3, #7
 8007a74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007a78:	e007      	b.n	8007a8a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <f_open+0xf6>
 8007a84:	2308      	movs	r3, #8
 8007a86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007a8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d168      	bne.n	8007b64 <f_open+0x1d0>
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	f003 0308 	and.w	r3, r3, #8
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d063      	beq.n	8007b64 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007a9c:	f7fd fcfe 	bl	800549c <get_fattime>
 8007aa0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa4:	330e      	adds	r3, #14
 8007aa6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fd fe4b 	bl	8005744 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab0:	3316      	adds	r3, #22
 8007ab2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fd fe45 	bl	8005744 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abc:	330b      	adds	r3, #11
 8007abe:	2220      	movs	r2, #32
 8007ac0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fe fe1a 	bl	8006702 <ld_clust>
 8007ace:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe fe32 	bl	8006740 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ade:	331c      	adds	r3, #28
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fd fe2e 	bl	8005744 <st_dword>
					fs->wflag = 1;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	2201      	movs	r2, #1
 8007aec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d037      	beq.n	8007b64 <f_open+0x1d0>
						dw = fs->winsect;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007af8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007afa:	f107 0318 	add.w	r3, r7, #24
 8007afe:	2200      	movs	r2, #0
 8007b00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fe fb22 	bl	800614c <remove_chain>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007b0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d126      	bne.n	8007b64 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe f86c 	bl	8005bf8 <move_window>
 8007b20:	4603      	mov	r3, r0
 8007b22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b2a:	3a01      	subs	r2, #1
 8007b2c:	615a      	str	r2, [r3, #20]
 8007b2e:	e019      	b.n	8007b64 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007b30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d115      	bne.n	8007b64 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007b38:	7fbb      	ldrb	r3, [r7, #30]
 8007b3a:	f003 0310 	and.w	r3, r3, #16
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <f_open+0x1b6>
					res = FR_NO_FILE;
 8007b42:	2304      	movs	r3, #4
 8007b44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007b48:	e00c      	b.n	8007b64 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d007      	beq.n	8007b64 <f_open+0x1d0>
 8007b54:	7fbb      	ldrb	r3, [r7, #30]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <f_open+0x1d0>
						res = FR_DENIED;
 8007b5e:	2307      	movs	r3, #7
 8007b60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007b64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d126      	bne.n	8007bba <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	f003 0308 	and.w	r3, r3, #8
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b7c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007b86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	bf8c      	ite	hi
 8007b92:	2301      	movhi	r3, #1
 8007b94:	2300      	movls	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f107 0318 	add.w	r3, r7, #24
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fd fef7 	bl	8005994 <inc_lock>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d102      	bne.n	8007bba <f_open+0x226>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007bba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f040 80a3 	bne.w	8007d0a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bc8:	4611      	mov	r1, r2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fe fd99 	bl	8006702 <ld_clust>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd8:	331c      	adds	r3, #28
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fd fd74 	bl	80056c8 <ld_dword>
 8007be0:	4602      	mov	r2, r0
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	88da      	ldrh	r2, [r3, #6]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	79fa      	ldrb	r2, [r7, #7]
 8007bfe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	3330      	adds	r3, #48	@ 0x30
 8007c16:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fd fdde 	bl	80057de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	f003 0320 	and.w	r3, r3, #32
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d06e      	beq.n	8007d0a <f_open+0x376>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d06a      	beq.n	8007d0a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	895b      	ldrh	r3, [r3, #10]
 8007c40:	461a      	mov	r2, r3
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	899b      	ldrh	r3, [r3, #12]
 8007c46:	fb02 f303 	mul.w	r3, r2, r3
 8007c4a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c58:	e016      	b.n	8007c88 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fe f887 	bl	8005d72 <get_fat>
 8007c64:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007c66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d802      	bhi.n	8007c72 <f_open+0x2de>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007c72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d102      	bne.n	8007c80 <f_open+0x2ec>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c80:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007c82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c88:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d103      	bne.n	8007c98 <f_open+0x304>
 8007c90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d8e0      	bhi.n	8007c5a <f_open+0x2c6>
				}
				fp->clust = clst;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c9c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007c9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d131      	bne.n	8007d0a <f_open+0x376>
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	899b      	ldrh	r3, [r3, #12]
 8007caa:	461a      	mov	r2, r3
 8007cac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cae:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cb2:	fb01 f202 	mul.w	r2, r1, r2
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d026      	beq.n	8007d0a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe f837 	bl	8005d34 <clust2sect>
 8007cc6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d103      	bne.n	8007cd6 <f_open+0x342>
						res = FR_INT_ERR;
 8007cce:	2302      	movs	r3, #2
 8007cd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007cd4:	e019      	b.n	8007d0a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	899b      	ldrh	r3, [r3, #12]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cde:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ce4:	441a      	add	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	7858      	ldrb	r0, [r3, #1]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6a1a      	ldr	r2, [r3, #32]
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f7fd fc6f 	bl	80055dc <disk_read>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <f_open+0x376>
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007d0a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <f_open+0x384>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007d18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3768      	adds	r7, #104	@ 0x68
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08e      	sub	sp, #56	@ 0x38
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
 8007d30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f107 0214 	add.w	r2, r7, #20
 8007d42:	4611      	mov	r1, r2
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff fda9 	bl	800789c <validate>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007d50:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d107      	bne.n	8007d68 <f_read+0x44>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	7d5b      	ldrb	r3, [r3, #21]
 8007d5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007d60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <f_read+0x4a>
 8007d68:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007d6c:	e135      	b.n	8007fda <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	7d1b      	ldrb	r3, [r3, #20]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <f_read+0x5a>
 8007d7a:	2307      	movs	r3, #7
 8007d7c:	e12d      	b.n	8007fda <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	f240 811e 	bls.w	8007fd0 <f_read+0x2ac>
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007d98:	e11a      	b.n	8007fd0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	8992      	ldrh	r2, [r2, #12]
 8007da2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007da6:	fb01 f202 	mul.w	r2, r1, r2
 8007daa:	1a9b      	subs	r3, r3, r2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f040 80d5 	bne.w	8007f5c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	8992      	ldrh	r2, [r2, #12]
 8007dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	8952      	ldrh	r2, [r2, #10]
 8007dc2:	3a01      	subs	r2, #1
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d12f      	bne.n	8007e2e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d103      	bne.n	8007dde <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ddc:	e013      	b.n	8007e06 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d007      	beq.n	8007df6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	4619      	mov	r1, r3
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7fe faaa 	bl	8006346 <clmt_clust>
 8007df2:	6338      	str	r0, [r7, #48]	@ 0x30
 8007df4:	e007      	b.n	8007e06 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	4610      	mov	r0, r2
 8007e00:	f7fd ffb7 	bl	8005d72 <get_fat>
 8007e04:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d804      	bhi.n	8007e16 <f_read+0xf2>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	755a      	strb	r2, [r3, #21]
 8007e12:	2302      	movs	r3, #2
 8007e14:	e0e1      	b.n	8007fda <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1c:	d104      	bne.n	8007e28 <f_read+0x104>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	755a      	strb	r2, [r3, #21]
 8007e24:	2301      	movs	r3, #1
 8007e26:	e0d8      	b.n	8007fda <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e2c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	4619      	mov	r1, r3
 8007e36:	4610      	mov	r0, r2
 8007e38:	f7fd ff7c 	bl	8005d34 <clust2sect>
 8007e3c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d104      	bne.n	8007e4e <f_read+0x12a>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2202      	movs	r2, #2
 8007e48:	755a      	strb	r2, [r3, #21]
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	e0c5      	b.n	8007fda <f_read+0x2b6>
			sect += csect;
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	4413      	add	r3, r2
 8007e54:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	899b      	ldrh	r3, [r3, #12]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e62:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d041      	beq.n	8007eee <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007e6a:	69fa      	ldr	r2, [r7, #28]
 8007e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6e:	4413      	add	r3, r2
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	8952      	ldrh	r2, [r2, #10]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d905      	bls.n	8007e84 <f_read+0x160>
					cc = fs->csize - csect;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	895b      	ldrh	r3, [r3, #10]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	7858      	ldrb	r0, [r3, #1]
 8007e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e8e:	f7fd fba5 	bl	80055dc <disk_read>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <f_read+0x17e>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	755a      	strb	r2, [r3, #21]
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e09b      	b.n	8007fda <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	7d1b      	ldrb	r3, [r3, #20]
 8007ea6:	b25b      	sxtb	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da18      	bge.n	8007ede <f_read+0x1ba>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a1a      	ldr	r2, [r3, #32]
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d911      	bls.n	8007ede <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a1a      	ldr	r2, [r3, #32]
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	8992      	ldrh	r2, [r2, #12]
 8007ec6:	fb02 f303 	mul.w	r3, r2, r3
 8007eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ecc:	18d0      	adds	r0, r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	899b      	ldrh	r3, [r3, #12]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	f7fd fc5f 	bl	800579c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	899b      	ldrh	r3, [r3, #12]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee6:	fb02 f303 	mul.w	r3, r2, r3
 8007eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007eec:	e05c      	b.n	8007fa8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d02e      	beq.n	8007f56 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	7d1b      	ldrb	r3, [r3, #20]
 8007efc:	b25b      	sxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	da18      	bge.n	8007f34 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	7858      	ldrb	r0, [r3, #1]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a1a      	ldr	r2, [r3, #32]
 8007f10:	2301      	movs	r3, #1
 8007f12:	f7fd fb83 	bl	800561c <disk_write>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d004      	beq.n	8007f26 <f_read+0x202>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	755a      	strb	r2, [r3, #21]
 8007f22:	2301      	movs	r3, #1
 8007f24:	e059      	b.n	8007fda <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	7d1b      	ldrb	r3, [r3, #20]
 8007f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	7858      	ldrb	r0, [r3, #1]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f3e:	2301      	movs	r3, #1
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	f7fd fb4b 	bl	80055dc <disk_read>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d004      	beq.n	8007f56 <f_read+0x232>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	755a      	strb	r2, [r3, #21]
 8007f52:	2301      	movs	r3, #1
 8007f54:	e041      	b.n	8007fda <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	899b      	ldrh	r3, [r3, #12]
 8007f60:	4618      	mov	r0, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	8992      	ldrh	r2, [r2, #12]
 8007f6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f6e:	fb01 f202 	mul.w	r2, r1, r2
 8007f72:	1a9b      	subs	r3, r3, r2
 8007f74:	1ac3      	subs	r3, r0, r3
 8007f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d901      	bls.n	8007f84 <f_read+0x260>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	8992      	ldrh	r2, [r2, #12]
 8007f92:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f96:	fb00 f202 	mul.w	r2, r0, r2
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	440b      	add	r3, r1
 8007f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fa4:	f7fd fbfa 	bl	800579c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fac:	4413      	add	r3, r2
 8007fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	699a      	ldr	r2, [r3, #24]
 8007fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb6:	441a      	add	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	619a      	str	r2, [r3, #24]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc2:	441a      	add	r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f47f aee1 	bne.w	8007d9a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3738      	adds	r7, #56	@ 0x38
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f107 0208 	add.w	r2, r7, #8
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff fc52 	bl	800789c <validate>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d168      	bne.n	80080d4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	7d1b      	ldrb	r3, [r3, #20]
 8008006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800800a:	2b00      	cmp	r3, #0
 800800c:	d062      	beq.n	80080d4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	7d1b      	ldrb	r3, [r3, #20]
 8008012:	b25b      	sxtb	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	da15      	bge.n	8008044 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	7858      	ldrb	r0, [r3, #1]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1a      	ldr	r2, [r3, #32]
 8008026:	2301      	movs	r3, #1
 8008028:	f7fd faf8 	bl	800561c <disk_write>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <f_sync+0x54>
 8008032:	2301      	movs	r3, #1
 8008034:	e04f      	b.n	80080d6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	7d1b      	ldrb	r3, [r3, #20]
 800803a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800803e:	b2da      	uxtb	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008044:	f7fd fa2a 	bl	800549c <get_fattime>
 8008048:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f7fd fdd0 	bl	8005bf8 <move_window>
 8008058:	4603      	mov	r3, r0
 800805a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d138      	bne.n	80080d4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008066:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	330b      	adds	r3, #11
 800806c:	781a      	ldrb	r2, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	330b      	adds	r3, #11
 8008072:	f042 0220 	orr.w	r2, r2, #32
 8008076:	b2d2      	uxtb	r2, r2
 8008078:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	461a      	mov	r2, r3
 8008084:	68f9      	ldr	r1, [r7, #12]
 8008086:	f7fe fb5b 	bl	8006740 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f103 021c 	add.w	r2, r3, #28
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	4619      	mov	r1, r3
 8008096:	4610      	mov	r0, r2
 8008098:	f7fd fb54 	bl	8005744 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3316      	adds	r3, #22
 80080a0:	6939      	ldr	r1, [r7, #16]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fd fb4e 	bl	8005744 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3312      	adds	r3, #18
 80080ac:	2100      	movs	r1, #0
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fd fb2d 	bl	800570e <st_word>
					fs->wflag = 1;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2201      	movs	r2, #1
 80080b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fd fdc9 	bl	8005c54 <sync_fs>
 80080c2:	4603      	mov	r3, r0
 80080c4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	7d1b      	ldrb	r3, [r3, #20]
 80080ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7ff ff7b 	bl	8007fe2 <f_sync>
 80080ec:	4603      	mov	r3, r0
 80080ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d118      	bne.n	8008128 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f107 0208 	add.w	r2, r7, #8
 80080fc:	4611      	mov	r1, r2
 80080fe:	4618      	mov	r0, r3
 8008100:	f7ff fbcc 	bl	800789c <validate>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10c      	bne.n	8008128 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	4618      	mov	r0, r3
 8008114:	f7fd fccc 	bl	8005ab0 <dec_lock>
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d102      	bne.n	8008128 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008142:	2301      	movs	r3, #1
 8008144:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800814a:	4b1f      	ldr	r3, [pc, #124]	@ (80081c8 <FATFS_LinkDriverEx+0x94>)
 800814c:	7a5b      	ldrb	r3, [r3, #9]
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d131      	bne.n	80081b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008154:	4b1c      	ldr	r3, [pc, #112]	@ (80081c8 <FATFS_LinkDriverEx+0x94>)
 8008156:	7a5b      	ldrb	r3, [r3, #9]
 8008158:	b2db      	uxtb	r3, r3
 800815a:	461a      	mov	r2, r3
 800815c:	4b1a      	ldr	r3, [pc, #104]	@ (80081c8 <FATFS_LinkDriverEx+0x94>)
 800815e:	2100      	movs	r1, #0
 8008160:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008162:	4b19      	ldr	r3, [pc, #100]	@ (80081c8 <FATFS_LinkDriverEx+0x94>)
 8008164:	7a5b      	ldrb	r3, [r3, #9]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	4a17      	ldr	r2, [pc, #92]	@ (80081c8 <FATFS_LinkDriverEx+0x94>)
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008172:	4b15      	ldr	r3, [pc, #84]	@ (80081c8 <FATFS_LinkDriverEx+0x94>)
 8008174:	7a5b      	ldrb	r3, [r3, #9]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	4b13      	ldr	r3, [pc, #76]	@ (80081c8 <FATFS_LinkDriverEx+0x94>)
 800817c:	4413      	add	r3, r2
 800817e:	79fa      	ldrb	r2, [r7, #7]
 8008180:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008182:	4b11      	ldr	r3, [pc, #68]	@ (80081c8 <FATFS_LinkDriverEx+0x94>)
 8008184:	7a5b      	ldrb	r3, [r3, #9]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	1c5a      	adds	r2, r3, #1
 800818a:	b2d1      	uxtb	r1, r2
 800818c:	4a0e      	ldr	r2, [pc, #56]	@ (80081c8 <FATFS_LinkDriverEx+0x94>)
 800818e:	7251      	strb	r1, [r2, #9]
 8008190:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008192:	7dbb      	ldrb	r3, [r7, #22]
 8008194:	3330      	adds	r3, #48	@ 0x30
 8008196:	b2da      	uxtb	r2, r3
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	3301      	adds	r3, #1
 80081a0:	223a      	movs	r2, #58	@ 0x3a
 80081a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	3302      	adds	r3, #2
 80081a8:	222f      	movs	r2, #47	@ 0x2f
 80081aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	3303      	adds	r3, #3
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	20003878 	.word	0x20003878

080081cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80081d6:	2200      	movs	r2, #0
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff ffaa 	bl	8008134 <FATFS_LinkDriverEx>
 80081e0:	4603      	mov	r3, r0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	6039      	str	r1, [r7, #0]
 80081f6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80081f8:	88fb      	ldrh	r3, [r7, #6]
 80081fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80081fc:	d802      	bhi.n	8008204 <ff_convert+0x18>
		c = chr;
 80081fe:	88fb      	ldrh	r3, [r7, #6]
 8008200:	81fb      	strh	r3, [r7, #14]
 8008202:	e025      	b.n	8008250 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00b      	beq.n	8008222 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	2bff      	cmp	r3, #255	@ 0xff
 800820e:	d805      	bhi.n	800821c <ff_convert+0x30>
 8008210:	88fb      	ldrh	r3, [r7, #6]
 8008212:	3b80      	subs	r3, #128	@ 0x80
 8008214:	4a12      	ldr	r2, [pc, #72]	@ (8008260 <ff_convert+0x74>)
 8008216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800821a:	e000      	b.n	800821e <ff_convert+0x32>
 800821c:	2300      	movs	r3, #0
 800821e:	81fb      	strh	r3, [r7, #14]
 8008220:	e016      	b.n	8008250 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008222:	2300      	movs	r3, #0
 8008224:	81fb      	strh	r3, [r7, #14]
 8008226:	e009      	b.n	800823c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008228:	89fb      	ldrh	r3, [r7, #14]
 800822a:	4a0d      	ldr	r2, [pc, #52]	@ (8008260 <ff_convert+0x74>)
 800822c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008230:	88fa      	ldrh	r2, [r7, #6]
 8008232:	429a      	cmp	r2, r3
 8008234:	d006      	beq.n	8008244 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008236:	89fb      	ldrh	r3, [r7, #14]
 8008238:	3301      	adds	r3, #1
 800823a:	81fb      	strh	r3, [r7, #14]
 800823c:	89fb      	ldrh	r3, [r7, #14]
 800823e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008240:	d9f2      	bls.n	8008228 <ff_convert+0x3c>
 8008242:	e000      	b.n	8008246 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008244:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008246:	89fb      	ldrh	r3, [r7, #14]
 8008248:	3380      	adds	r3, #128	@ 0x80
 800824a:	b29b      	uxth	r3, r3
 800824c:	b2db      	uxtb	r3, r3
 800824e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008250:	89fb      	ldrh	r3, [r7, #14]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	0800d82c 	.word	0x0800d82c

08008264 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800826e:	88fb      	ldrh	r3, [r7, #6]
 8008270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008274:	d201      	bcs.n	800827a <ff_wtoupper+0x16>
 8008276:	4b3e      	ldr	r3, [pc, #248]	@ (8008370 <ff_wtoupper+0x10c>)
 8008278:	e000      	b.n	800827c <ff_wtoupper+0x18>
 800827a:	4b3e      	ldr	r3, [pc, #248]	@ (8008374 <ff_wtoupper+0x110>)
 800827c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	1c9a      	adds	r2, r3, #2
 8008282:	617a      	str	r2, [r7, #20]
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008288:	8a7b      	ldrh	r3, [r7, #18]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d068      	beq.n	8008360 <ff_wtoupper+0xfc>
 800828e:	88fa      	ldrh	r2, [r7, #6]
 8008290:	8a7b      	ldrh	r3, [r7, #18]
 8008292:	429a      	cmp	r2, r3
 8008294:	d364      	bcc.n	8008360 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	1c9a      	adds	r2, r3, #2
 800829a:	617a      	str	r2, [r7, #20]
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	823b      	strh	r3, [r7, #16]
 80082a0:	8a3b      	ldrh	r3, [r7, #16]
 80082a2:	0a1b      	lsrs	r3, r3, #8
 80082a4:	81fb      	strh	r3, [r7, #14]
 80082a6:	8a3b      	ldrh	r3, [r7, #16]
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80082ac:	88fa      	ldrh	r2, [r7, #6]
 80082ae:	8a79      	ldrh	r1, [r7, #18]
 80082b0:	8a3b      	ldrh	r3, [r7, #16]
 80082b2:	440b      	add	r3, r1
 80082b4:	429a      	cmp	r2, r3
 80082b6:	da49      	bge.n	800834c <ff_wtoupper+0xe8>
			switch (cmd) {
 80082b8:	89fb      	ldrh	r3, [r7, #14]
 80082ba:	2b08      	cmp	r3, #8
 80082bc:	d84f      	bhi.n	800835e <ff_wtoupper+0xfa>
 80082be:	a201      	add	r2, pc, #4	@ (adr r2, 80082c4 <ff_wtoupper+0x60>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082e9 	.word	0x080082e9
 80082c8:	080082fb 	.word	0x080082fb
 80082cc:	08008311 	.word	0x08008311
 80082d0:	08008319 	.word	0x08008319
 80082d4:	08008321 	.word	0x08008321
 80082d8:	08008329 	.word	0x08008329
 80082dc:	08008331 	.word	0x08008331
 80082e0:	08008339 	.word	0x08008339
 80082e4:	08008341 	.word	0x08008341
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80082e8:	88fa      	ldrh	r2, [r7, #6]
 80082ea:	8a7b      	ldrh	r3, [r7, #18]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	4413      	add	r3, r2
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	80fb      	strh	r3, [r7, #6]
 80082f8:	e027      	b.n	800834a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80082fa:	88fa      	ldrh	r2, [r7, #6]
 80082fc:	8a7b      	ldrh	r3, [r7, #18]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	b29b      	uxth	r3, r3
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	b29b      	uxth	r3, r3
 8008308:	88fa      	ldrh	r2, [r7, #6]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	80fb      	strh	r3, [r7, #6]
 800830e:	e01c      	b.n	800834a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008310:	88fb      	ldrh	r3, [r7, #6]
 8008312:	3b10      	subs	r3, #16
 8008314:	80fb      	strh	r3, [r7, #6]
 8008316:	e018      	b.n	800834a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008318:	88fb      	ldrh	r3, [r7, #6]
 800831a:	3b20      	subs	r3, #32
 800831c:	80fb      	strh	r3, [r7, #6]
 800831e:	e014      	b.n	800834a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008320:	88fb      	ldrh	r3, [r7, #6]
 8008322:	3b30      	subs	r3, #48	@ 0x30
 8008324:	80fb      	strh	r3, [r7, #6]
 8008326:	e010      	b.n	800834a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008328:	88fb      	ldrh	r3, [r7, #6]
 800832a:	3b1a      	subs	r3, #26
 800832c:	80fb      	strh	r3, [r7, #6]
 800832e:	e00c      	b.n	800834a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008330:	88fb      	ldrh	r3, [r7, #6]
 8008332:	3308      	adds	r3, #8
 8008334:	80fb      	strh	r3, [r7, #6]
 8008336:	e008      	b.n	800834a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008338:	88fb      	ldrh	r3, [r7, #6]
 800833a:	3b50      	subs	r3, #80	@ 0x50
 800833c:	80fb      	strh	r3, [r7, #6]
 800833e:	e004      	b.n	800834a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008340:	88fb      	ldrh	r3, [r7, #6]
 8008342:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8008346:	80fb      	strh	r3, [r7, #6]
 8008348:	bf00      	nop
			}
			break;
 800834a:	e008      	b.n	800835e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800834c:	89fb      	ldrh	r3, [r7, #14]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d195      	bne.n	800827e <ff_wtoupper+0x1a>
 8008352:	8a3b      	ldrh	r3, [r7, #16]
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	4413      	add	r3, r2
 800835a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800835c:	e78f      	b.n	800827e <ff_wtoupper+0x1a>
			break;
 800835e:	bf00      	nop
	}

	return chr;
 8008360:	88fb      	ldrh	r3, [r7, #6]
}
 8008362:	4618      	mov	r0, r3
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	0800d92c 	.word	0x0800d92c
 8008374:	0800db20 	.word	0x0800db20

08008378 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f103 0208 	add.w	r2, r3, #8
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f04f 32ff 	mov.w	r2, #4294967295
 8008390:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f103 0208 	add.w	r2, r3, #8
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f103 0208 	add.w	r2, r3, #8
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80083ac:	f240 1019 	movw	r0, #281	@ 0x119
 80083b0:	f003 fd08 	bl	800bdc4 <SEGGER_SYSVIEW_RecordEndCall>
}
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80083ca:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80083ce:	f003 fcf9 	bl	800bdc4 <SEGGER_SYSVIEW_RecordEndCall>
}
 80083d2:	bf00      	nop
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f0:	d103      	bne.n	80083fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	e00c      	b.n	8008414 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3308      	adds	r3, #8
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	e002      	b.n	8008408 <vListInsert+0x2e>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	429a      	cmp	r2, r3
 8008412:	d2f6      	bcs.n	8008402 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	1c5a      	adds	r2, r3, #1
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8008440:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8008444:	f003 fcbe 	bl	800bdc4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8008448:	bf00      	nop
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	6892      	ldr	r2, [r2, #8]
 8008466:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6852      	ldr	r2, [r2, #4]
 8008470:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	429a      	cmp	r2, r3
 800847a:	d103      	bne.n	8008484 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	1e5a      	subs	r2, r3, #1
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4619      	mov	r1, r3
 800849a:	f240 101d 	movw	r0, #285	@ 0x11d
 800849e:	f003 fccd 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80084ba:	2301      	movs	r3, #1
 80084bc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10b      	bne.n	80084e0 <xQueueGenericReset+0x30>
    __asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	60fb      	str	r3, [r7, #12]
}
 80084da:	bf00      	nop
 80084dc:	bf00      	nop
 80084de:	e7fd      	b.n	80084dc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d05d      	beq.n	80085a2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d059      	beq.n	80085a2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084f6:	2100      	movs	r1, #0
 80084f8:	fba3 2302 	umull	r2, r3, r3, r2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d000      	beq.n	8008502 <xQueueGenericReset+0x52>
 8008500:	2101      	movs	r1, #1
 8008502:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8008504:	2b00      	cmp	r3, #0
 8008506:	d14c      	bne.n	80085a2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8008508:	f001 ff8c 	bl	800a424 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008514:	6939      	ldr	r1, [r7, #16]
 8008516:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008518:	fb01 f303 	mul.w	r3, r1, r3
 800851c:	441a      	add	r2, r3
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2200      	movs	r2, #0
 8008526:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008538:	3b01      	subs	r3, #1
 800853a:	6939      	ldr	r1, [r7, #16]
 800853c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800853e:	fb01 f303 	mul.w	r3, r1, r3
 8008542:	441a      	add	r2, r3
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	22ff      	movs	r2, #255	@ 0xff
 800854c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	22ff      	movs	r2, #255	@ 0xff
 8008554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d114      	bne.n	8008588 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d01a      	beq.n	800859c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	3310      	adds	r3, #16
 800856a:	4618      	mov	r0, r3
 800856c:	f001 f86e 	bl	800964c <xTaskRemoveFromEventList>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d012      	beq.n	800859c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008576:	4b18      	ldr	r3, [pc, #96]	@ (80085d8 <xQueueGenericReset+0x128>)
 8008578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	e009      	b.n	800859c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	3310      	adds	r3, #16
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff fef3 	bl	8008378 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	3324      	adds	r3, #36	@ 0x24
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff feee 	bl	8008378 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800859c:	f001 ff74 	bl	800a488 <vPortExitCritical>
 80085a0:	e001      	b.n	80085a6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10b      	bne.n	80085c4 <xQueueGenericReset+0x114>
    __asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	60bb      	str	r3, [r7, #8]
}
 80085be:	bf00      	nop
 80085c0:	bf00      	nop
 80085c2:	e7fd      	b.n	80085c0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	4619      	mov	r1, r3
 80085c8:	2096      	movs	r0, #150	@ 0x96
 80085ca:	f003 fc37 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80085ce:	697b      	ldr	r3, [r7, #20]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	e000ed04 	.word	0xe000ed04

080085dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08a      	sub	sp, #40	@ 0x28
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	4613      	mov	r3, r2
 80085e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80085ea:	2300      	movs	r3, #0
 80085ec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d02e      	beq.n	8008652 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80085f4:	2100      	movs	r1, #0
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	fba3 2302 	umull	r2, r3, r3, r2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d000      	beq.n	8008604 <xQueueGenericCreate+0x28>
 8008602:	2101      	movs	r1, #1
 8008604:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008606:	2b00      	cmp	r3, #0
 8008608:	d123      	bne.n	8008652 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008612:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8008616:	d81c      	bhi.n	8008652 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	fb02 f303 	mul.w	r3, r2, r3
 8008620:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	3350      	adds	r3, #80	@ 0x50
 8008626:	4618      	mov	r0, r3
 8008628:	f001 ffe8 	bl	800a5fc <pvPortMalloc>
 800862c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01d      	beq.n	8008670 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	3350      	adds	r3, #80	@ 0x50
 800863c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800863e:	79fa      	ldrb	r2, [r7, #7]
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	4613      	mov	r3, r2
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	68b9      	ldr	r1, [r7, #8]
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 f81e 	bl	800868c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8008650:	e00e      	b.n	8008670 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10b      	bne.n	8008670 <xQueueGenericCreate+0x94>
    __asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	613b      	str	r3, [r7, #16]
}
 800866a:	bf00      	nop
 800866c:	bf00      	nop
 800866e:	e7fd      	b.n	800866c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	4618      	mov	r0, r3
 8008674:	f003 fd7c 	bl	800c170 <SEGGER_SYSVIEW_ShrinkId>
 8008678:	4603      	mov	r3, r0
 800867a:	4619      	mov	r1, r3
 800867c:	2098      	movs	r0, #152	@ 0x98
 800867e:	f003 fbdd 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8008682:	69fb      	ldr	r3, [r7, #28]
    }
 8008684:	4618      	mov	r0, r3
 8008686:	3720      	adds	r7, #32
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d103      	bne.n	80086a8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	e002      	b.n	80086ae <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086ba:	2101      	movs	r1, #1
 80086bc:	69b8      	ldr	r0, [r7, #24]
 80086be:	f7ff fef7 	bl	80084b0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	78fa      	ldrb	r2, [r7, #3]
 80086c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80086ca:	bf00      	nop
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b08c      	sub	sp, #48	@ 0x30
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80086e0:	2300      	movs	r3, #0
 80086e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80086e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10b      	bne.n	8008706 <xQueueReceive+0x32>
    __asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	623b      	str	r3, [r7, #32]
}
 8008700:	bf00      	nop
 8008702:	bf00      	nop
 8008704:	e7fd      	b.n	8008702 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d103      	bne.n	8008714 <xQueueReceive+0x40>
 800870c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <xQueueReceive+0x44>
 8008714:	2301      	movs	r3, #1
 8008716:	e000      	b.n	800871a <xQueueReceive+0x46>
 8008718:	2300      	movs	r3, #0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10b      	bne.n	8008736 <xQueueReceive+0x62>
    __asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	61fb      	str	r3, [r7, #28]
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008736:	f001 f9ab 	bl	8009a90 <xTaskGetSchedulerState>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d102      	bne.n	8008746 <xQueueReceive+0x72>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <xQueueReceive+0x76>
 8008746:	2301      	movs	r3, #1
 8008748:	e000      	b.n	800874c <xQueueReceive+0x78>
 800874a:	2300      	movs	r3, #0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10b      	bne.n	8008768 <xQueueReceive+0x94>
    __asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	61bb      	str	r3, [r7, #24]
}
 8008762:	bf00      	nop
 8008764:	bf00      	nop
 8008766:	e7fd      	b.n	8008764 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008768:	f001 fe5c 	bl	800a424 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800876c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008770:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008774:	2b00      	cmp	r3, #0
 8008776:	d023      	beq.n	80087c0 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800877c:	f000 f898 	bl	80088b0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8008780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008782:	1e5a      	subs	r2, r3, #1
 8008784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008786:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00f      	beq.n	80087b0 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008792:	3310      	adds	r3, #16
 8008794:	4618      	mov	r0, r3
 8008796:	f000 ff59 	bl	800964c <xTaskRemoveFromEventList>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d007      	beq.n	80087b0 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80087a0:	4b42      	ldr	r3, [pc, #264]	@ (80088ac <xQueueReceive+0x1d8>)
 80087a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80087b0:	f001 fe6a 	bl	800a488 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80087b4:	2101      	movs	r1, #1
 80087b6:	20a4      	movs	r0, #164	@ 0xa4
 80087b8:	f003 fb40 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80087bc:	2301      	movs	r3, #1
 80087be:	e071      	b.n	80088a4 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d107      	bne.n	80087d6 <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80087c6:	f001 fe5f 	bl	800a488 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80087ca:	2100      	movs	r1, #0
 80087cc:	20a4      	movs	r0, #164	@ 0xa4
 80087ce:	f003 fb35 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e066      	b.n	80088a4 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80087d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d106      	bne.n	80087ea <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80087dc:	f107 0310 	add.w	r3, r7, #16
 80087e0:	4618      	mov	r0, r3
 80087e2:	f001 f813 	bl	800980c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80087e6:	2301      	movs	r3, #1
 80087e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80087ea:	f001 fe4d 	bl	800a488 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80087ee:	f000 fbfb 	bl	8008fe8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80087f2:	f001 fe17 	bl	800a424 <vPortEnterCritical>
 80087f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087fc:	b25b      	sxtb	r3, r3
 80087fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008802:	d103      	bne.n	800880c <xQueueReceive+0x138>
 8008804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008806:	2200      	movs	r2, #0
 8008808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800880c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008812:	b25b      	sxtb	r3, r3
 8008814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008818:	d103      	bne.n	8008822 <xQueueReceive+0x14e>
 800881a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008822:	f001 fe31 	bl	800a488 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008826:	1d3a      	adds	r2, r7, #4
 8008828:	f107 0310 	add.w	r3, r7, #16
 800882c:	4611      	mov	r1, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f001 f804 	bl	800983c <xTaskCheckForTimeOut>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d123      	bne.n	8008882 <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800883a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800883c:	f000 f8b0 	bl	80089a0 <prvIsQueueEmpty>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d017      	beq.n	8008876 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008848:	3324      	adds	r3, #36	@ 0x24
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	4611      	mov	r1, r2
 800884e:	4618      	mov	r0, r3
 8008850:	f000 fe8a 	bl	8009568 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008856:	f000 f851 	bl	80088fc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800885a:	f000 fbd3 	bl	8009004 <xTaskResumeAll>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d181      	bne.n	8008768 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8008864:	4b11      	ldr	r3, [pc, #68]	@ (80088ac <xQueueReceive+0x1d8>)
 8008866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	e778      	b.n	8008768 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008876:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008878:	f000 f840 	bl	80088fc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800887c:	f000 fbc2 	bl	8009004 <xTaskResumeAll>
 8008880:	e772      	b.n	8008768 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008884:	f000 f83a 	bl	80088fc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008888:	f000 fbbc 	bl	8009004 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800888c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800888e:	f000 f887 	bl	80089a0 <prvIsQueueEmpty>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	f43f af67 	beq.w	8008768 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800889a:	2100      	movs	r1, #0
 800889c:	20a4      	movs	r0, #164	@ 0xa4
 800889e:	f003 facd 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80088a2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3730      	adds	r7, #48	@ 0x30
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	e000ed04 	.word	0xe000ed04

080088b0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d018      	beq.n	80088f4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ca:	441a      	add	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d303      	bcc.n	80088e4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68d9      	ldr	r1, [r3, #12]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ec:	461a      	mov	r2, r3
 80088ee:	6838      	ldr	r0, [r7, #0]
 80088f0:	f004 f84d 	bl	800c98e <memcpy>
    }
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8008904:	f001 fd8e 	bl	800a424 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800890e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008910:	e011      	b.n	8008936 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008916:	2b00      	cmp	r3, #0
 8008918:	d012      	beq.n	8008940 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3324      	adds	r3, #36	@ 0x24
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fe94 	bl	800964c <xTaskRemoveFromEventList>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800892a:	f000 fff3 	bl	8009914 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	3b01      	subs	r3, #1
 8008932:	b2db      	uxtb	r3, r3
 8008934:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800893a:	2b00      	cmp	r3, #0
 800893c:	dce9      	bgt.n	8008912 <prvUnlockQueue+0x16>
 800893e:	e000      	b.n	8008942 <prvUnlockQueue+0x46>
                    break;
 8008940:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	22ff      	movs	r2, #255	@ 0xff
 8008946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800894a:	f001 fd9d 	bl	800a488 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800894e:	f001 fd69 	bl	800a424 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008958:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800895a:	e011      	b.n	8008980 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d012      	beq.n	800898a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3310      	adds	r3, #16
 8008968:	4618      	mov	r0, r3
 800896a:	f000 fe6f 	bl	800964c <xTaskRemoveFromEventList>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8008974:	f000 ffce 	bl	8009914 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008978:	7bbb      	ldrb	r3, [r7, #14]
 800897a:	3b01      	subs	r3, #1
 800897c:	b2db      	uxtb	r3, r3
 800897e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008984:	2b00      	cmp	r3, #0
 8008986:	dce9      	bgt.n	800895c <prvUnlockQueue+0x60>
 8008988:	e000      	b.n	800898c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800898a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	22ff      	movs	r2, #255	@ 0xff
 8008990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8008994:	f001 fd78 	bl	800a488 <vPortExitCritical>
}
 8008998:	bf00      	nop
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80089a8:	f001 fd3c 	bl	800a424 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d102      	bne.n	80089ba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80089b4:	2301      	movs	r3, #1
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	e001      	b.n	80089be <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80089ba:	2300      	movs	r3, #0
 80089bc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80089be:	f001 fd63 	bl	800a488 <vPortExitCritical>

    return xReturn;
 80089c2:	68fb      	ldr	r3, [r7, #12]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10b      	bne.n	80089f8 <vQueueAddToRegistry+0x2c>
    __asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	60fb      	str	r3, [r7, #12]
}
 80089f2:	bf00      	nop
 80089f4:	bf00      	nop
 80089f6:	e7fd      	b.n	80089f4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d024      	beq.n	8008a48 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089fe:	2300      	movs	r3, #0
 8008a00:	617b      	str	r3, [r7, #20]
 8008a02:	e01e      	b.n	8008a42 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008a04:	4a18      	ldr	r2, [pc, #96]	@ (8008a68 <vQueueAddToRegistry+0x9c>)
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	00db      	lsls	r3, r3, #3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d105      	bne.n	8008a20 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	4a13      	ldr	r2, [pc, #76]	@ (8008a68 <vQueueAddToRegistry+0x9c>)
 8008a1a:	4413      	add	r3, r2
 8008a1c:	613b      	str	r3, [r7, #16]
                    break;
 8008a1e:	e013      	b.n	8008a48 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10a      	bne.n	8008a3c <vQueueAddToRegistry+0x70>
 8008a26:	4a10      	ldr	r2, [pc, #64]	@ (8008a68 <vQueueAddToRegistry+0x9c>)
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d104      	bne.n	8008a3c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	00db      	lsls	r3, r3, #3
 8008a36:	4a0c      	ldr	r2, [pc, #48]	@ (8008a68 <vQueueAddToRegistry+0x9c>)
 8008a38:	4413      	add	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b07      	cmp	r3, #7
 8008a46:	d9dd      	bls.n	8008a04 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d005      	beq.n	8008a5a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8008a5a:	20b6      	movs	r0, #182	@ 0xb6
 8008a5c:	f003 f9b2 	bl	800bdc4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8008a60:	bf00      	nop
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	20003884 	.word	0x20003884

08008a6c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8008a7c:	f001 fcd2 	bl	800a424 <vPortEnterCritical>
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a86:	b25b      	sxtb	r3, r3
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8c:	d103      	bne.n	8008a96 <vQueueWaitForMessageRestricted+0x2a>
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a9c:	b25b      	sxtb	r3, r3
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa2:	d103      	bne.n	8008aac <vQueueWaitForMessageRestricted+0x40>
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008aac:	f001 fcec 	bl	800a488 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d106      	bne.n	8008ac6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	3324      	adds	r3, #36	@ 0x24
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	68b9      	ldr	r1, [r7, #8]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fd79 	bl	80095b8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8008ac6:	6978      	ldr	r0, [r7, #20]
 8008ac8:	f7ff ff18 	bl	80088fc <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8008acc:	20b9      	movs	r0, #185	@ 0xb9
 8008ace:	f003 f979 	bl	800bdc4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8008ad2:	bf00      	nop
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b08a      	sub	sp, #40	@ 0x28
 8008ade:	af04      	add	r7, sp, #16
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	607a      	str	r2, [r7, #4]
 8008ae6:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f001 fd85 	bl	800a5fc <pvPortMalloc>
 8008af2:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d013      	beq.n	8008b22 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8008afa:	2058      	movs	r0, #88	@ 0x58
 8008afc:	f001 fd7e 	bl	800a5fc <pvPortMalloc>
 8008b00:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d008      	beq.n	8008b1a <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008b08:	2258      	movs	r2, #88	@ 0x58
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	6978      	ldr	r0, [r7, #20]
 8008b0e:	f003 fedb 	bl	800c8c8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b18:	e005      	b.n	8008b26 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8008b1a:	6938      	ldr	r0, [r7, #16]
 8008b1c:	f001 fea0 	bl	800a860 <vPortFree>
 8008b20:	e001      	b.n	8008b26 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00d      	beq.n	8008b48 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	9303      	str	r3, [sp, #12]
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	9302      	str	r3, [sp, #8]
 8008b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b36:	9301      	str	r3, [sp, #4]
 8008b38:	6a3b      	ldr	r3, [r7, #32]
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	68b9      	ldr	r1, [r7, #8]
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f000 f82d 	bl	8008ba2 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8008b48:	697b      	ldr	r3, [r7, #20]
    }
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3718      	adds	r7, #24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b088      	sub	sp, #32
 8008b56:	af02      	add	r7, sp, #8
 8008b58:	60f8      	str	r0, [r7, #12]
 8008b5a:	60b9      	str	r1, [r7, #8]
 8008b5c:	607a      	str	r2, [r7, #4]
 8008b5e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	68b9      	ldr	r1, [r7, #8]
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7ff ffb3 	bl	8008ada <prvCreateTask>
 8008b74:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d005      	beq.n	8008b88 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8008b7c:	6938      	ldr	r0, [r7, #16]
 8008b7e:	f000 f8a1 	bl	8008cc4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008b82:	2301      	movs	r3, #1
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	e002      	b.n	8008b8e <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b88:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8c:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	4619      	mov	r1, r3
 8008b92:	20c2      	movs	r0, #194	@ 0xc2
 8008b94:	f003 f952 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8008b98:	697b      	ldr	r3, [r7, #20]
    }
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b088      	sub	sp, #32
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
 8008bae:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	461a      	mov	r2, r3
 8008bba:	21a5      	movs	r1, #165	@ 0xa5
 8008bbc:	f003 fe84 	bl	800c8c8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	f023 0307 	bic.w	r3, r3, #7
 8008bd8:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	f003 0307 	and.w	r3, r3, #7
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <prvInitialiseNewTask+0x5a>
    __asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	617b      	str	r3, [r7, #20]
}
 8008bf6:	bf00      	nop
 8008bf8:	bf00      	nop
 8008bfa:	e7fd      	b.n	8008bf8 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d01e      	beq.n	8008c40 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c02:	2300      	movs	r3, #0
 8008c04:	61fb      	str	r3, [r7, #28]
 8008c06:	e012      	b.n	8008c2e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	7819      	ldrb	r1, [r3, #0]
 8008c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	4413      	add	r3, r2
 8008c16:	3334      	adds	r3, #52	@ 0x34
 8008c18:	460a      	mov	r2, r1
 8008c1a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	4413      	add	r3, r2
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d006      	beq.n	8008c36 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	61fb      	str	r3, [r7, #28]
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	2b09      	cmp	r3, #9
 8008c32:	d9e9      	bls.n	8008c08 <prvInitialiseNewTask+0x66>
 8008c34:	e000      	b.n	8008c38 <prvInitialiseNewTask+0x96>
            {
                break;
 8008c36:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8008c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	d90b      	bls.n	8008c5e <prvInitialiseNewTask+0xbc>
    __asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	613b      	str	r3, [r7, #16]
}
 8008c58:	bf00      	nop
 8008c5a:	bf00      	nop
 8008c5c:	e7fd      	b.n	8008c5a <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d901      	bls.n	8008c68 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c64:	2304      	movs	r3, #4
 8008c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8008c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c72:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c76:	3304      	adds	r3, #4
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff fb9f 	bl	80083bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c80:	3318      	adds	r3, #24
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7ff fb9a 	bl	80083bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c8c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c90:	f1c3 0205 	rsb	r2, r3, #5
 8008c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c96:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c9c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	68f9      	ldr	r1, [r7, #12]
 8008ca2:	69b8      	ldr	r0, [r7, #24]
 8008ca4:	f001 fa3c 	bl	800a120 <pxPortInitialiseStack>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cac:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8008cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cb8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008cba:	bf00      	nop
 8008cbc:	3720      	adds	r7, #32
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
	...

08008cc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8008cc4:	b5b0      	push	{r4, r5, r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af02      	add	r7, sp, #8
 8008cca:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8008ccc:	f001 fbaa 	bl	800a424 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8008cd0:	4b50      	ldr	r3, [pc, #320]	@ (8008e14 <prvAddNewTaskToReadyList+0x150>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	4a4f      	ldr	r2, [pc, #316]	@ (8008e14 <prvAddNewTaskToReadyList+0x150>)
 8008cd8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8008cda:	4b4f      	ldr	r3, [pc, #316]	@ (8008e18 <prvAddNewTaskToReadyList+0x154>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d109      	bne.n	8008cf6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8008ce2:	4a4d      	ldr	r2, [pc, #308]	@ (8008e18 <prvAddNewTaskToReadyList+0x154>)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8008e14 <prvAddNewTaskToReadyList+0x150>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d110      	bne.n	8008d12 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8008cf0:	f000 fe34 	bl	800995c <prvInitialiseTaskLists>
 8008cf4:	e00d      	b.n	8008d12 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8008cf6:	4b49      	ldr	r3, [pc, #292]	@ (8008e1c <prvAddNewTaskToReadyList+0x158>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d109      	bne.n	8008d12 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cfe:	4b46      	ldr	r3, [pc, #280]	@ (8008e18 <prvAddNewTaskToReadyList+0x154>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d802      	bhi.n	8008d12 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8008d0c:	4a42      	ldr	r2, [pc, #264]	@ (8008e18 <prvAddNewTaskToReadyList+0x154>)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8008d12:	4b43      	ldr	r3, [pc, #268]	@ (8008e20 <prvAddNewTaskToReadyList+0x15c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3301      	adds	r3, #1
 8008d18:	4a41      	ldr	r2, [pc, #260]	@ (8008e20 <prvAddNewTaskToReadyList+0x15c>)
 8008d1a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d1c:	4b40      	ldr	r3, [pc, #256]	@ (8008e20 <prvAddNewTaskToReadyList+0x15c>)
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d016      	beq.n	8008d58 <prvAddNewTaskToReadyList+0x94>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f003 f8f9 	bl	800bf24 <SEGGER_SYSVIEW_OnTaskCreate>
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d42:	461d      	mov	r5, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	461c      	mov	r4, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d4e:	1ae3      	subs	r3, r4, r3
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	462b      	mov	r3, r5
 8008d54:	f001 fed2 	bl	800aafc <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f003 f966 	bl	800c02c <SEGGER_SYSVIEW_OnTaskStartReady>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d64:	2201      	movs	r2, #1
 8008d66:	409a      	lsls	r2, r3
 8008d68:	4b2e      	ldr	r3, [pc, #184]	@ (8008e24 <prvAddNewTaskToReadyList+0x160>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8008e24 <prvAddNewTaskToReadyList+0x160>)
 8008d70:	6013      	str	r3, [r2, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d76:	492c      	ldr	r1, [pc, #176]	@ (8008e28 <prvAddNewTaskToReadyList+0x164>)
 8008d78:	4613      	mov	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	3304      	adds	r3, #4
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	609a      	str	r2, [r3, #8]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	689a      	ldr	r2, [r3, #8]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	60da      	str	r2, [r3, #12]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	3204      	adds	r2, #4
 8008d9e:	605a      	str	r2, [r3, #4]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	1d1a      	adds	r2, r3, #4
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	609a      	str	r2, [r3, #8]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dac:	4613      	mov	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4413      	add	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4a1c      	ldr	r2, [pc, #112]	@ (8008e28 <prvAddNewTaskToReadyList+0x164>)
 8008db6:	441a      	add	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	615a      	str	r2, [r3, #20]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc0:	4919      	ldr	r1, [pc, #100]	@ (8008e28 <prvAddNewTaskToReadyList+0x164>)
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	440b      	add	r3, r1
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008dd2:	1c59      	adds	r1, r3, #1
 8008dd4:	4814      	ldr	r0, [pc, #80]	@ (8008e28 <prvAddNewTaskToReadyList+0x164>)
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4403      	add	r3, r0
 8008de0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8008de2:	f001 fb51 	bl	800a488 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8008de6:	4b0d      	ldr	r3, [pc, #52]	@ (8008e1c <prvAddNewTaskToReadyList+0x158>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00e      	beq.n	8008e0c <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8008dee:	4b0a      	ldr	r3, [pc, #40]	@ (8008e18 <prvAddNewTaskToReadyList+0x154>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d207      	bcs.n	8008e0c <prvAddNewTaskToReadyList+0x148>
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8008e2c <prvAddNewTaskToReadyList+0x168>)
 8008dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008e0c:	bf00      	nop
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bdb0      	pop	{r4, r5, r7, pc}
 8008e14:	2000399c 	.word	0x2000399c
 8008e18:	200038c4 	.word	0x200038c4
 8008e1c:	200039a8 	.word	0x200039a8
 8008e20:	200039b8 	.word	0x200039b8
 8008e24:	200039a4 	.word	0x200039a4
 8008e28:	200038c8 	.word	0x200038c8
 8008e2c:	e000ed04 	.word	0xe000ed04

08008e30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d018      	beq.n	8008e74 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8008e42:	f000 f8d1 	bl	8008fe8 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8008e46:	4b14      	ldr	r3, [pc, #80]	@ (8008e98 <vTaskDelay+0x68>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d00b      	beq.n	8008e66 <vTaskDelay+0x36>
    __asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	60bb      	str	r3, [r7, #8]
}
 8008e60:	bf00      	nop
 8008e62:	bf00      	nop
 8008e64:	e7fd      	b.n	8008e62 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e66:	2100      	movs	r1, #0
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fe33 	bl	8009ad4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8008e6e:	f000 f8c9 	bl	8009004 <xTaskResumeAll>
 8008e72:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d107      	bne.n	8008e8a <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8008e7a:	4b08      	ldr	r3, [pc, #32]	@ (8008e9c <vTaskDelay+0x6c>)
 8008e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8008e8a:	20c5      	movs	r0, #197	@ 0xc5
 8008e8c:	f002 ff9a 	bl	800bdc4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8008e90:	bf00      	nop
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	200039c4 	.word	0x200039c4
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08a      	sub	sp, #40	@ 0x28
 8008ea4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8008eae:	2300      	movs	r3, #0
 8008eb0:	617b      	str	r3, [r7, #20]
 8008eb2:	e011      	b.n	8008ed8 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8008eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8008f28 <prvCreateIdleTasks+0x88>)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	4413      	add	r3, r2
 8008eba:	7819      	ldrb	r1, [r3, #0]
 8008ebc:	1d3a      	adds	r2, r7, #4
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	460a      	mov	r2, r1
 8008ec4:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8008ec6:	1d3a      	adds	r2, r7, #4
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	4413      	add	r3, r2
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d006      	beq.n	8008ee0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	617b      	str	r3, [r7, #20]
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2b09      	cmp	r3, #9
 8008edc:	ddea      	ble.n	8008eb4 <prvCreateIdleTasks+0x14>
 8008ede:	e000      	b.n	8008ee2 <prvCreateIdleTasks+0x42>
        {
            break;
 8008ee0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	e015      	b.n	8008f14 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8008ee8:	4b10      	ldr	r3, [pc, #64]	@ (8008f2c <prvCreateIdleTasks+0x8c>)
 8008eea:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8008f30 <prvCreateIdleTasks+0x90>)
 8008ef2:	4413      	add	r3, r2
 8008ef4:	1d39      	adds	r1, r7, #4
 8008ef6:	9301      	str	r3, [sp, #4]
 8008ef8:	2300      	movs	r3, #0
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	2300      	movs	r3, #0
 8008efe:	2282      	movs	r2, #130	@ 0x82
 8008f00:	6938      	ldr	r0, [r7, #16]
 8008f02:	f7ff fe26 	bl	8008b52 <xTaskCreate>
 8008f06:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d006      	beq.n	8008f1c <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	3301      	adds	r3, #1
 8008f12:	61bb      	str	r3, [r7, #24]
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	dde6      	ble.n	8008ee8 <prvCreateIdleTasks+0x48>
 8008f1a:	e000      	b.n	8008f1e <prvCreateIdleTasks+0x7e>
        {
            break;
 8008f1c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8008f1e:	69fb      	ldr	r3, [r7, #28]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3720      	adds	r7, #32
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	0800d708 	.word	0x0800d708
 8008f2c:	0800992d 	.word	0x0800992d
 8008f30:	200039c0 	.word	0x200039c0

08008f34 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8008f3a:	f7ff ffb1 	bl	8008ea0 <prvCreateIdleTasks>
 8008f3e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d102      	bne.n	8008f4c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8008f46:	f000 fe53 	bl	8009bf0 <xTimerCreateTimerTask>
 8008f4a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d124      	bne.n	8008f9c <vTaskStartScheduler+0x68>
    __asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	60bb      	str	r3, [r7, #8]
}
 8008f64:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8008f66:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd0 <vTaskStartScheduler+0x9c>)
 8008f68:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8008f6e:	4b19      	ldr	r3, [pc, #100]	@ (8008fd4 <vTaskStartScheduler+0xa0>)
 8008f70:	2201      	movs	r2, #1
 8008f72:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f74:	4b18      	ldr	r3, [pc, #96]	@ (8008fd8 <vTaskStartScheduler+0xa4>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8008f7a:	4b18      	ldr	r3, [pc, #96]	@ (8008fdc <vTaskStartScheduler+0xa8>)
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	4b18      	ldr	r3, [pc, #96]	@ (8008fe0 <vTaskStartScheduler+0xac>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d102      	bne.n	8008f8c <vTaskStartScheduler+0x58>
 8008f86:	f002 ffb1 	bl	800beec <SEGGER_SYSVIEW_OnIdle>
 8008f8a:	e004      	b.n	8008f96 <vTaskStartScheduler+0x62>
 8008f8c:	4b14      	ldr	r3, [pc, #80]	@ (8008fe0 <vTaskStartScheduler+0xac>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f003 f809 	bl	800bfa8 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8008f96:	f001 f955 	bl	800a244 <xPortStartScheduler>
 8008f9a:	e00f      	b.n	8008fbc <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa2:	d10b      	bne.n	8008fbc <vTaskStartScheduler+0x88>
    __asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	607b      	str	r3, [r7, #4]
}
 8008fb6:	bf00      	nop
 8008fb8:	bf00      	nop
 8008fba:	e7fd      	b.n	8008fb8 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8008fbc:	4b09      	ldr	r3, [pc, #36]	@ (8008fe4 <vTaskStartScheduler+0xb0>)
 8008fbe:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8008fc0:	20cd      	movs	r0, #205	@ 0xcd
 8008fc2:	f002 feff 	bl	800bdc4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	200039bc 	.word	0x200039bc
 8008fd4:	200039a8 	.word	0x200039a8
 8008fd8:	200039a0 	.word	0x200039a0
 8008fdc:	200039c0 	.word	0x200039c0
 8008fe0:	200038c4 	.word	0x200038c4
 8008fe4:	20000024 	.word	0x20000024

08008fe8 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8008fec:	4b04      	ldr	r3, [pc, #16]	@ (8009000 <vTaskSuspendAll+0x18>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	4a03      	ldr	r2, [pc, #12]	@ (8009000 <vTaskSuspendAll+0x18>)
 8008ff4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8008ff6:	20cf      	movs	r0, #207	@ 0xcf
 8008ff8:	f002 fee4 	bl	800bdc4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8008ffc:	bf00      	nop
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	200039c4 	.word	0x200039c4

08009004 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800900a:	2300      	movs	r3, #0
 800900c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800900e:	2300      	movs	r3, #0
 8009010:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8009012:	f001 fa07 	bl	800a424 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8009016:	2300      	movs	r3, #0
 8009018:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800901a:	4b7a      	ldr	r3, [pc, #488]	@ (8009204 <xTaskResumeAll+0x200>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10b      	bne.n	800903a <xTaskResumeAll+0x36>
    __asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	603b      	str	r3, [r7, #0]
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop
 8009038:	e7fd      	b.n	8009036 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800903a:	4b72      	ldr	r3, [pc, #456]	@ (8009204 <xTaskResumeAll+0x200>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3b01      	subs	r3, #1
 8009040:	4a70      	ldr	r2, [pc, #448]	@ (8009204 <xTaskResumeAll+0x200>)
 8009042:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009044:	4b6f      	ldr	r3, [pc, #444]	@ (8009204 <xTaskResumeAll+0x200>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	f040 80ce 	bne.w	80091ea <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800904e:	4b6e      	ldr	r3, [pc, #440]	@ (8009208 <xTaskResumeAll+0x204>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 80c9 	beq.w	80091ea <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009058:	e092      	b.n	8009180 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800905a:	4b6c      	ldr	r3, [pc, #432]	@ (800920c <xTaskResumeAll+0x208>)
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009066:	60fb      	str	r3, [r7, #12]
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	69fa      	ldr	r2, [r7, #28]
 800906e:	6a12      	ldr	r2, [r2, #32]
 8009070:	609a      	str	r2, [r3, #8]
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	69fa      	ldr	r2, [r7, #28]
 8009078:	69d2      	ldr	r2, [r2, #28]
 800907a:	605a      	str	r2, [r3, #4]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	3318      	adds	r3, #24
 8009084:	429a      	cmp	r2, r3
 8009086:	d103      	bne.n	8009090 <xTaskResumeAll+0x8c>
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	6a1a      	ldr	r2, [r3, #32]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	605a      	str	r2, [r3, #4]
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	2200      	movs	r2, #0
 8009094:	629a      	str	r2, [r3, #40]	@ 0x28
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	1e5a      	subs	r2, r3, #1
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	60bb      	str	r3, [r7, #8]
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	68d2      	ldr	r2, [r2, #12]
 80090ae:	609a      	str	r2, [r3, #8]
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	69fa      	ldr	r2, [r7, #28]
 80090b6:	6892      	ldr	r2, [r2, #8]
 80090b8:	605a      	str	r2, [r3, #4]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	3304      	adds	r3, #4
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d103      	bne.n	80090ce <xTaskResumeAll+0xca>
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	68da      	ldr	r2, [r3, #12]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	605a      	str	r2, [r3, #4]
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	2200      	movs	r2, #0
 80090d2:	615a      	str	r2, [r3, #20]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	1e5a      	subs	r2, r3, #1
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f002 ffa3 	bl	800c02c <SEGGER_SYSVIEW_OnTaskStartReady>
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ea:	2201      	movs	r2, #1
 80090ec:	409a      	lsls	r2, r3
 80090ee:	4b48      	ldr	r3, [pc, #288]	@ (8009210 <xTaskResumeAll+0x20c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	4a46      	ldr	r2, [pc, #280]	@ (8009210 <xTaskResumeAll+0x20c>)
 80090f6:	6013      	str	r3, [r2, #0]
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090fc:	4945      	ldr	r1, [pc, #276]	@ (8009214 <xTaskResumeAll+0x210>)
 80090fe:	4613      	mov	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	440b      	add	r3, r1
 8009108:	3304      	adds	r3, #4
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	607b      	str	r3, [r7, #4]
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	609a      	str	r2, [r3, #8]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689a      	ldr	r2, [r3, #8]
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	60da      	str	r2, [r3, #12]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	69fa      	ldr	r2, [r7, #28]
 8009122:	3204      	adds	r2, #4
 8009124:	605a      	str	r2, [r3, #4]
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	1d1a      	adds	r2, r3, #4
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	609a      	str	r2, [r3, #8]
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009132:	4613      	mov	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4a36      	ldr	r2, [pc, #216]	@ (8009214 <xTaskResumeAll+0x210>)
 800913c:	441a      	add	r2, r3
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	615a      	str	r2, [r3, #20]
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009146:	4933      	ldr	r1, [pc, #204]	@ (8009214 <xTaskResumeAll+0x210>)
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	440b      	add	r3, r1
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009158:	1c59      	adds	r1, r3, #1
 800915a:	482e      	ldr	r0, [pc, #184]	@ (8009214 <xTaskResumeAll+0x210>)
 800915c:	4613      	mov	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4403      	add	r3, r0
 8009166:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800916c:	4b2a      	ldr	r3, [pc, #168]	@ (8009218 <xTaskResumeAll+0x214>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009172:	429a      	cmp	r2, r3
 8009174:	d904      	bls.n	8009180 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8009176:	4a29      	ldr	r2, [pc, #164]	@ (800921c <xTaskResumeAll+0x218>)
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	2101      	movs	r1, #1
 800917c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009180:	4b22      	ldr	r3, [pc, #136]	@ (800920c <xTaskResumeAll+0x208>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	f47f af68 	bne.w	800905a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8009190:	f000 fc62 	bl	8009a58 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009194:	4b22      	ldr	r3, [pc, #136]	@ (8009220 <xTaskResumeAll+0x21c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d012      	beq.n	80091c6 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80091a0:	f000 f854 	bl	800924c <xTaskIncrementTick>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d004      	beq.n	80091b4 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80091aa:	4a1c      	ldr	r2, [pc, #112]	@ (800921c <xTaskResumeAll+0x218>)
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	2101      	movs	r1, #1
 80091b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1ef      	bne.n	80091a0 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 80091c0:	4b17      	ldr	r3, [pc, #92]	@ (8009220 <xTaskResumeAll+0x21c>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80091c6:	4a15      	ldr	r2, [pc, #84]	@ (800921c <xTaskResumeAll+0x218>)
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00b      	beq.n	80091ea <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80091d2:	2301      	movs	r3, #1
 80091d4:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80091d6:	4b10      	ldr	r3, [pc, #64]	@ (8009218 <xTaskResumeAll+0x214>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4b12      	ldr	r3, [pc, #72]	@ (8009224 <xTaskResumeAll+0x220>)
 80091dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80091ea:	f001 f94d 	bl	800a488 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	4619      	mov	r1, r3
 80091f2:	20d0      	movs	r0, #208	@ 0xd0
 80091f4:	f002 fe22 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 80091f8:	69bb      	ldr	r3, [r7, #24]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3720      	adds	r7, #32
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	200039c4 	.word	0x200039c4
 8009208:	2000399c 	.word	0x2000399c
 800920c:	2000395c 	.word	0x2000395c
 8009210:	200039a4 	.word	0x200039a4
 8009214:	200038c8 	.word	0x200038c8
 8009218:	200038c4 	.word	0x200038c4
 800921c:	200039b0 	.word	0x200039b0
 8009220:	200039ac 	.word	0x200039ac
 8009224:	e000ed04 	.word	0xe000ed04

08009228 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800922e:	4b06      	ldr	r3, [pc, #24]	@ (8009248 <xTaskGetTickCount+0x20>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8009234:	6879      	ldr	r1, [r7, #4]
 8009236:	20d1      	movs	r0, #209	@ 0xd1
 8009238:	f002 fe00 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 800923c:	687b      	ldr	r3, [r7, #4]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	200039a0 	.word	0x200039a0

0800924c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08a      	sub	sp, #40	@ 0x28
 8009250:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009252:	2300      	movs	r3, #0
 8009254:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009256:	4b83      	ldr	r3, [pc, #524]	@ (8009464 <xTaskIncrementTick+0x218>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	f040 80f3 	bne.w	8009446 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009260:	4b81      	ldr	r3, [pc, #516]	@ (8009468 <xTaskIncrementTick+0x21c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3301      	adds	r3, #1
 8009266:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009268:	4a7f      	ldr	r2, [pc, #508]	@ (8009468 <xTaskIncrementTick+0x21c>)
 800926a:	6a3b      	ldr	r3, [r7, #32]
 800926c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800926e:	6a3b      	ldr	r3, [r7, #32]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d121      	bne.n	80092b8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8009274:	4b7d      	ldr	r3, [pc, #500]	@ (800946c <xTaskIncrementTick+0x220>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00b      	beq.n	8009296 <xTaskIncrementTick+0x4a>
    __asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	607b      	str	r3, [r7, #4]
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	e7fd      	b.n	8009292 <xTaskIncrementTick+0x46>
 8009296:	4b75      	ldr	r3, [pc, #468]	@ (800946c <xTaskIncrementTick+0x220>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	61fb      	str	r3, [r7, #28]
 800929c:	4b74      	ldr	r3, [pc, #464]	@ (8009470 <xTaskIncrementTick+0x224>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a72      	ldr	r2, [pc, #456]	@ (800946c <xTaskIncrementTick+0x220>)
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	4a72      	ldr	r2, [pc, #456]	@ (8009470 <xTaskIncrementTick+0x224>)
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	6013      	str	r3, [r2, #0]
 80092aa:	4b72      	ldr	r3, [pc, #456]	@ (8009474 <xTaskIncrementTick+0x228>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3301      	adds	r3, #1
 80092b0:	4a70      	ldr	r2, [pc, #448]	@ (8009474 <xTaskIncrementTick+0x228>)
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	f000 fbd0 	bl	8009a58 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80092b8:	4b6f      	ldr	r3, [pc, #444]	@ (8009478 <xTaskIncrementTick+0x22c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6a3a      	ldr	r2, [r7, #32]
 80092be:	429a      	cmp	r2, r3
 80092c0:	f0c0 80ac 	bcc.w	800941c <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092c4:	4b69      	ldr	r3, [pc, #420]	@ (800946c <xTaskIncrementTick+0x220>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d104      	bne.n	80092d8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80092ce:	4b6a      	ldr	r3, [pc, #424]	@ (8009478 <xTaskIncrementTick+0x22c>)
 80092d0:	f04f 32ff 	mov.w	r2, #4294967295
 80092d4:	601a      	str	r2, [r3, #0]
                    break;
 80092d6:	e0a1      	b.n	800941c <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80092d8:	4b64      	ldr	r3, [pc, #400]	@ (800946c <xTaskIncrementTick+0x220>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80092e8:	6a3a      	ldr	r2, [r7, #32]
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d203      	bcs.n	80092f8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80092f0:	4a61      	ldr	r2, [pc, #388]	@ (8009478 <xTaskIncrementTick+0x22c>)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	6013      	str	r3, [r2, #0]
                        break;
 80092f6:	e091      	b.n	800941c <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	695b      	ldr	r3, [r3, #20]
 80092fc:	613b      	str	r3, [r7, #16]
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	69ba      	ldr	r2, [r7, #24]
 8009304:	68d2      	ldr	r2, [r2, #12]
 8009306:	609a      	str	r2, [r3, #8]
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	69ba      	ldr	r2, [r7, #24]
 800930e:	6892      	ldr	r2, [r2, #8]
 8009310:	605a      	str	r2, [r3, #4]
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	3304      	adds	r3, #4
 800931a:	429a      	cmp	r2, r3
 800931c:	d103      	bne.n	8009326 <xTaskIncrementTick+0xda>
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	68da      	ldr	r2, [r3, #12]
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	605a      	str	r2, [r3, #4]
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	2200      	movs	r2, #0
 800932a:	615a      	str	r2, [r3, #20]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	1e5a      	subs	r2, r3, #1
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933a:	2b00      	cmp	r3, #0
 800933c:	d01e      	beq.n	800937c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	69db      	ldr	r3, [r3, #28]
 8009348:	69ba      	ldr	r2, [r7, #24]
 800934a:	6a12      	ldr	r2, [r2, #32]
 800934c:	609a      	str	r2, [r3, #8]
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	69ba      	ldr	r2, [r7, #24]
 8009354:	69d2      	ldr	r2, [r2, #28]
 8009356:	605a      	str	r2, [r3, #4]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	3318      	adds	r3, #24
 8009360:	429a      	cmp	r2, r3
 8009362:	d103      	bne.n	800936c <xTaskIncrementTick+0x120>
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	6a1a      	ldr	r2, [r3, #32]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	605a      	str	r2, [r3, #4]
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	2200      	movs	r2, #0
 8009370:	629a      	str	r2, [r3, #40]	@ 0x28
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	1e5a      	subs	r2, r3, #1
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	4618      	mov	r0, r3
 8009380:	f002 fe54 	bl	800c02c <SEGGER_SYSVIEW_OnTaskStartReady>
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009388:	2201      	movs	r2, #1
 800938a:	409a      	lsls	r2, r3
 800938c:	4b3b      	ldr	r3, [pc, #236]	@ (800947c <xTaskIncrementTick+0x230>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4313      	orrs	r3, r2
 8009392:	4a3a      	ldr	r2, [pc, #232]	@ (800947c <xTaskIncrementTick+0x230>)
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800939a:	4939      	ldr	r1, [pc, #228]	@ (8009480 <xTaskIncrementTick+0x234>)
 800939c:	4613      	mov	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	440b      	add	r3, r1
 80093a6:	3304      	adds	r3, #4
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	60bb      	str	r3, [r7, #8]
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	609a      	str	r2, [r3, #8]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	689a      	ldr	r2, [r3, #8]
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	60da      	str	r2, [r3, #12]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	3204      	adds	r2, #4
 80093c2:	605a      	str	r2, [r3, #4]
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	1d1a      	adds	r2, r3, #4
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	609a      	str	r2, [r3, #8]
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093d0:	4613      	mov	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4a29      	ldr	r2, [pc, #164]	@ (8009480 <xTaskIncrementTick+0x234>)
 80093da:	441a      	add	r2, r3
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	615a      	str	r2, [r3, #20]
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e4:	4926      	ldr	r1, [pc, #152]	@ (8009480 <xTaskIncrementTick+0x234>)
 80093e6:	4613      	mov	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	440b      	add	r3, r1
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80093f6:	1c59      	adds	r1, r3, #1
 80093f8:	4821      	ldr	r0, [pc, #132]	@ (8009480 <xTaskIncrementTick+0x234>)
 80093fa:	4613      	mov	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4403      	add	r3, r0
 8009404:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940a:	4b1e      	ldr	r3, [pc, #120]	@ (8009484 <xTaskIncrementTick+0x238>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009410:	429a      	cmp	r2, r3
 8009412:	f67f af57 	bls.w	80092c4 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8009416:	2301      	movs	r3, #1
 8009418:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800941a:	e753      	b.n	80092c4 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800941c:	4b19      	ldr	r3, [pc, #100]	@ (8009484 <xTaskIncrementTick+0x238>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009422:	4917      	ldr	r1, [pc, #92]	@ (8009480 <xTaskIncrementTick+0x234>)
 8009424:	4613      	mov	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	440b      	add	r3, r1
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d901      	bls.n	8009438 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8009434:	2301      	movs	r3, #1
 8009436:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8009438:	4b13      	ldr	r3, [pc, #76]	@ (8009488 <xTaskIncrementTick+0x23c>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d007      	beq.n	8009450 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8009440:	2301      	movs	r3, #1
 8009442:	627b      	str	r3, [r7, #36]	@ 0x24
 8009444:	e004      	b.n	8009450 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8009446:	4b11      	ldr	r3, [pc, #68]	@ (800948c <xTaskIncrementTick+0x240>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3301      	adds	r3, #1
 800944c:	4a0f      	ldr	r2, [pc, #60]	@ (800948c <xTaskIncrementTick+0x240>)
 800944e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8009450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009452:	4619      	mov	r1, r3
 8009454:	20db      	movs	r0, #219	@ 0xdb
 8009456:	f002 fcf1 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 800945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800945c:	4618      	mov	r0, r3
 800945e:	3728      	adds	r7, #40	@ 0x28
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	200039c4 	.word	0x200039c4
 8009468:	200039a0 	.word	0x200039a0
 800946c:	20003954 	.word	0x20003954
 8009470:	20003958 	.word	0x20003958
 8009474:	200039b4 	.word	0x200039b4
 8009478:	200039bc 	.word	0x200039bc
 800947c:	200039a4 	.word	0x200039a4
 8009480:	200038c8 	.word	0x200038c8
 8009484:	200038c4 	.word	0x200038c4
 8009488:	200039b0 	.word	0x200039b0
 800948c:	200039ac 	.word	0x200039ac

08009490 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8009496:	4b2e      	ldr	r3, [pc, #184]	@ (8009550 <vTaskSwitchContext+0xc0>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800949e:	4b2d      	ldr	r3, [pc, #180]	@ (8009554 <vTaskSwitchContext+0xc4>)
 80094a0:	2201      	movs	r2, #1
 80094a2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80094a4:	e04f      	b.n	8009546 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 80094a6:	4b2b      	ldr	r3, [pc, #172]	@ (8009554 <vTaskSwitchContext+0xc4>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80094ac:	4b2a      	ldr	r3, [pc, #168]	@ (8009558 <vTaskSwitchContext+0xc8>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	fab3 f383 	clz	r3, r3
 80094b8:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80094ba:	7afb      	ldrb	r3, [r7, #11]
 80094bc:	f1c3 031f 	rsb	r3, r3, #31
 80094c0:	617b      	str	r3, [r7, #20]
 80094c2:	4926      	ldr	r1, [pc, #152]	@ (800955c <vTaskSwitchContext+0xcc>)
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	4613      	mov	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	440b      	add	r3, r1
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10b      	bne.n	80094ee <vTaskSwitchContext+0x5e>
    __asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	607b      	str	r3, [r7, #4]
}
 80094e8:	bf00      	nop
 80094ea:	bf00      	nop
 80094ec:	e7fd      	b.n	80094ea <vTaskSwitchContext+0x5a>
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4a18      	ldr	r2, [pc, #96]	@ (800955c <vTaskSwitchContext+0xcc>)
 80094fa:	4413      	add	r3, r2
 80094fc:	613b      	str	r3, [r7, #16]
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	605a      	str	r2, [r3, #4]
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	3308      	adds	r3, #8
 8009510:	429a      	cmp	r2, r3
 8009512:	d103      	bne.n	800951c <vTaskSwitchContext+0x8c>
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	68da      	ldr	r2, [r3, #12]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	605a      	str	r2, [r3, #4]
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	4a0f      	ldr	r2, [pc, #60]	@ (8009560 <vTaskSwitchContext+0xd0>)
 8009524:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8009526:	4b0f      	ldr	r3, [pc, #60]	@ (8009564 <vTaskSwitchContext+0xd4>)
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	4b0d      	ldr	r3, [pc, #52]	@ (8009560 <vTaskSwitchContext+0xd0>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	429a      	cmp	r2, r3
 8009530:	d102      	bne.n	8009538 <vTaskSwitchContext+0xa8>
 8009532:	f002 fcdb 	bl	800beec <SEGGER_SYSVIEW_OnIdle>
 8009536:	e004      	b.n	8009542 <vTaskSwitchContext+0xb2>
 8009538:	4b09      	ldr	r3, [pc, #36]	@ (8009560 <vTaskSwitchContext+0xd0>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4618      	mov	r0, r3
 800953e:	f002 fd33 	bl	800bfa8 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8009542:	4b07      	ldr	r3, [pc, #28]	@ (8009560 <vTaskSwitchContext+0xd0>)
 8009544:	681b      	ldr	r3, [r3, #0]
    }
 8009546:	bf00      	nop
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	200039c4 	.word	0x200039c4
 8009554:	200039b0 	.word	0x200039b0
 8009558:	200039a4 	.word	0x200039a4
 800955c:	200038c8 	.word	0x200038c8
 8009560:	200038c4 	.word	0x200038c4
 8009564:	200039c0 	.word	0x200039c0

08009568 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d10b      	bne.n	8009590 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	60fb      	str	r3, [r7, #12]
}
 800958a:	bf00      	nop
 800958c:	bf00      	nop
 800958e:	e7fd      	b.n	800958c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009590:	4b08      	ldr	r3, [pc, #32]	@ (80095b4 <vTaskPlaceOnEventList+0x4c>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3318      	adds	r3, #24
 8009596:	4619      	mov	r1, r3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7fe ff1e 	bl	80083da <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800959e:	2101      	movs	r1, #1
 80095a0:	6838      	ldr	r0, [r7, #0]
 80095a2:	f000 fa97 	bl	8009ad4 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80095a6:	20e1      	movs	r0, #225	@ 0xe1
 80095a8:	f002 fc0c 	bl	800bdc4 <SEGGER_SYSVIEW_RecordEndCall>
}
 80095ac:	bf00      	nop
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	200038c4 	.word	0x200038c4

080095b8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10b      	bne.n	80095e2 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	613b      	str	r3, [r7, #16]
}
 80095dc:	bf00      	nop
 80095de:	bf00      	nop
 80095e0:	e7fd      	b.n	80095de <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	617b      	str	r3, [r7, #20]
 80095e8:	4b17      	ldr	r3, [pc, #92]	@ (8009648 <vTaskPlaceOnEventListRestricted+0x90>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	61da      	str	r2, [r3, #28]
 80095f0:	4b15      	ldr	r3, [pc, #84]	@ (8009648 <vTaskPlaceOnEventListRestricted+0x90>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	6892      	ldr	r2, [r2, #8]
 80095f8:	621a      	str	r2, [r3, #32]
 80095fa:	4b13      	ldr	r3, [pc, #76]	@ (8009648 <vTaskPlaceOnEventListRestricted+0x90>)
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	3218      	adds	r2, #24
 8009604:	605a      	str	r2, [r3, #4]
 8009606:	4b10      	ldr	r3, [pc, #64]	@ (8009648 <vTaskPlaceOnEventListRestricted+0x90>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f103 0218 	add.w	r2, r3, #24
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	609a      	str	r2, [r3, #8]
 8009612:	4b0d      	ldr	r3, [pc, #52]	@ (8009648 <vTaskPlaceOnEventListRestricted+0x90>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	629a      	str	r2, [r3, #40]	@ 0x28
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	1c5a      	adds	r2, r3, #1
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d002      	beq.n	8009630 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800962a:	f04f 33ff 	mov.w	r3, #4294967295
 800962e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009630:	6879      	ldr	r1, [r7, #4]
 8009632:	68b8      	ldr	r0, [r7, #8]
 8009634:	f000 fa4e 	bl	8009ad4 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8009638:	20e3      	movs	r0, #227	@ 0xe3
 800963a:	f002 fbc3 	bl	800bdc4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800963e:	bf00      	nop
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	200038c4 	.word	0x200038c4

0800964c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b08a      	sub	sp, #40	@ 0x28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10b      	bne.n	800967a <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	60fb      	str	r3, [r7, #12]
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop
 8009678:	e7fd      	b.n	8009676 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800967e:	61fb      	str	r3, [r7, #28]
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	69db      	ldr	r3, [r3, #28]
 8009684:	6a3a      	ldr	r2, [r7, #32]
 8009686:	6a12      	ldr	r2, [r2, #32]
 8009688:	609a      	str	r2, [r3, #8]
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	6a3a      	ldr	r2, [r7, #32]
 8009690:	69d2      	ldr	r2, [r2, #28]
 8009692:	605a      	str	r2, [r3, #4]
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	6a3b      	ldr	r3, [r7, #32]
 800969a:	3318      	adds	r3, #24
 800969c:	429a      	cmp	r2, r3
 800969e:	d103      	bne.n	80096a8 <xTaskRemoveFromEventList+0x5c>
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	6a1a      	ldr	r2, [r3, #32]
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	605a      	str	r2, [r3, #4]
 80096a8:	6a3b      	ldr	r3, [r7, #32]
 80096aa:	2200      	movs	r2, #0
 80096ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	1e5a      	subs	r2, r3, #1
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80096b8:	4b4e      	ldr	r3, [pc, #312]	@ (80097f4 <xTaskRemoveFromEventList+0x1a8>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d164      	bne.n	800978a <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	617b      	str	r3, [r7, #20]
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	6a3a      	ldr	r2, [r7, #32]
 80096cc:	68d2      	ldr	r2, [r2, #12]
 80096ce:	609a      	str	r2, [r3, #8]
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	6a3a      	ldr	r2, [r7, #32]
 80096d6:	6892      	ldr	r2, [r2, #8]
 80096d8:	605a      	str	r2, [r3, #4]
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	3304      	adds	r3, #4
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d103      	bne.n	80096ee <xTaskRemoveFromEventList+0xa2>
 80096e6:	6a3b      	ldr	r3, [r7, #32]
 80096e8:	68da      	ldr	r2, [r3, #12]
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	605a      	str	r2, [r3, #4]
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	2200      	movs	r2, #0
 80096f2:	615a      	str	r2, [r3, #20]
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	1e5a      	subs	r2, r3, #1
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	4618      	mov	r0, r3
 8009702:	f002 fc93 	bl	800c02c <SEGGER_SYSVIEW_OnTaskStartReady>
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970a:	2201      	movs	r2, #1
 800970c:	409a      	lsls	r2, r3
 800970e:	4b3a      	ldr	r3, [pc, #232]	@ (80097f8 <xTaskRemoveFromEventList+0x1ac>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4313      	orrs	r3, r2
 8009714:	4a38      	ldr	r2, [pc, #224]	@ (80097f8 <xTaskRemoveFromEventList+0x1ac>)
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800971c:	4937      	ldr	r1, [pc, #220]	@ (80097fc <xTaskRemoveFromEventList+0x1b0>)
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	440b      	add	r3, r1
 8009728:	3304      	adds	r3, #4
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	613b      	str	r3, [r7, #16]
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	609a      	str	r2, [r3, #8]
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	689a      	ldr	r2, [r3, #8]
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	60da      	str	r2, [r3, #12]
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	6a3a      	ldr	r2, [r7, #32]
 8009742:	3204      	adds	r2, #4
 8009744:	605a      	str	r2, [r3, #4]
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	1d1a      	adds	r2, r3, #4
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	609a      	str	r2, [r3, #8]
 800974e:	6a3b      	ldr	r3, [r7, #32]
 8009750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009752:	4613      	mov	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4413      	add	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4a28      	ldr	r2, [pc, #160]	@ (80097fc <xTaskRemoveFromEventList+0x1b0>)
 800975c:	441a      	add	r2, r3
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	615a      	str	r2, [r3, #20]
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009766:	4925      	ldr	r1, [pc, #148]	@ (80097fc <xTaskRemoveFromEventList+0x1b0>)
 8009768:	4613      	mov	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4413      	add	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	440b      	add	r3, r1
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6a3a      	ldr	r2, [r7, #32]
 8009776:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009778:	1c59      	adds	r1, r3, #1
 800977a:	4820      	ldr	r0, [pc, #128]	@ (80097fc <xTaskRemoveFromEventList+0x1b0>)
 800977c:	4613      	mov	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4413      	add	r3, r2
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4403      	add	r3, r0
 8009786:	6019      	str	r1, [r3, #0]
 8009788:	e01b      	b.n	80097c2 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800978a:	4b1d      	ldr	r3, [pc, #116]	@ (8009800 <xTaskRemoveFromEventList+0x1b4>)
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	61bb      	str	r3, [r7, #24]
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	61da      	str	r2, [r3, #28]
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	689a      	ldr	r2, [r3, #8]
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	621a      	str	r2, [r3, #32]
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	6a3a      	ldr	r2, [r7, #32]
 80097a4:	3218      	adds	r2, #24
 80097a6:	605a      	str	r2, [r3, #4]
 80097a8:	6a3b      	ldr	r3, [r7, #32]
 80097aa:	f103 0218 	add.w	r2, r3, #24
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	609a      	str	r2, [r3, #8]
 80097b2:	6a3b      	ldr	r3, [r7, #32]
 80097b4:	4a12      	ldr	r2, [pc, #72]	@ (8009800 <xTaskRemoveFromEventList+0x1b4>)
 80097b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80097b8:	4b11      	ldr	r3, [pc, #68]	@ (8009800 <xTaskRemoveFromEventList+0x1b4>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3301      	adds	r3, #1
 80097be:	4a10      	ldr	r2, [pc, #64]	@ (8009800 <xTaskRemoveFromEventList+0x1b4>)
 80097c0:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009804 <xTaskRemoveFromEventList+0x1b8>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d905      	bls.n	80097dc <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80097d0:	2301      	movs	r3, #1
 80097d2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80097d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009808 <xTaskRemoveFromEventList+0x1bc>)
 80097d6:	2201      	movs	r2, #1
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	e001      	b.n	80097e0 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 80097dc:	2300      	movs	r3, #0
 80097de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 80097e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e2:	4619      	mov	r1, r3
 80097e4:	20e4      	movs	r0, #228	@ 0xe4
 80097e6:	f002 fb29 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 80097ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3728      	adds	r7, #40	@ 0x28
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	200039c4 	.word	0x200039c4
 80097f8:	200039a4 	.word	0x200039a4
 80097fc:	200038c8 	.word	0x200038c8
 8009800:	2000395c 	.word	0x2000395c
 8009804:	200038c4 	.word	0x200038c4
 8009808:	200039b0 	.word	0x200039b0

0800980c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009814:	4b07      	ldr	r3, [pc, #28]	@ (8009834 <vTaskInternalSetTimeOutState+0x28>)
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800981c:	4b06      	ldr	r3, [pc, #24]	@ (8009838 <vTaskInternalSetTimeOutState+0x2c>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8009824:	20e7      	movs	r0, #231	@ 0xe7
 8009826:	f002 facd 	bl	800bdc4 <SEGGER_SYSVIEW_RecordEndCall>
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	200039b4 	.word	0x200039b4
 8009838:	200039a0 	.word	0x200039a0

0800983c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b088      	sub	sp, #32
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10b      	bne.n	8009864 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 800984c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	613b      	str	r3, [r7, #16]
}
 800985e:	bf00      	nop
 8009860:	bf00      	nop
 8009862:	e7fd      	b.n	8009860 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10b      	bne.n	8009882 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 800986a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986e:	f383 8811 	msr	BASEPRI, r3
 8009872:	f3bf 8f6f 	isb	sy
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	60fb      	str	r3, [r7, #12]
}
 800987c:	bf00      	nop
 800987e:	bf00      	nop
 8009880:	e7fd      	b.n	800987e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8009882:	f000 fdcf 	bl	800a424 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8009886:	4b21      	ldr	r3, [pc, #132]	@ (800990c <xTaskCheckForTimeOut+0xd0>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989e:	d102      	bne.n	80098a6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80098a0:	2300      	movs	r3, #0
 80098a2:	61fb      	str	r3, [r7, #28]
 80098a4:	e026      	b.n	80098f4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	4b19      	ldr	r3, [pc, #100]	@ (8009910 <xTaskCheckForTimeOut+0xd4>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d00a      	beq.n	80098c8 <xTaskCheckForTimeOut+0x8c>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d305      	bcc.n	80098c8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80098bc:	2301      	movs	r3, #1
 80098be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]
 80098c6:	e015      	b.n	80098f4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d20b      	bcs.n	80098ea <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	1ad2      	subs	r2, r2, r3
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff ff94 	bl	800980c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61fb      	str	r3, [r7, #28]
 80098e8:	e004      	b.n	80098f4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80098f0:	2301      	movs	r3, #1
 80098f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80098f4:	f000 fdc8 	bl	800a488 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	4619      	mov	r1, r3
 80098fc:	20e8      	movs	r0, #232	@ 0xe8
 80098fe:	f002 fa9d 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8009902:	69fb      	ldr	r3, [r7, #28]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3720      	adds	r7, #32
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	200039a0 	.word	0x200039a0
 8009910:	200039b4 	.word	0x200039b4

08009914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8009918:	4b03      	ldr	r3, [pc, #12]	@ (8009928 <vTaskMissedYield+0x14>)
 800991a:	2201      	movs	r2, #1
 800991c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800991e:	20e9      	movs	r0, #233	@ 0xe9
 8009920:	f002 fa50 	bl	800bdc4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8009924:	bf00      	nop
 8009926:	bd80      	pop	{r7, pc}
 8009928:	200039b0 	.word	0x200039b0

0800992c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009934:	f000 f852 	bl	80099dc <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8009938:	4b06      	ldr	r3, [pc, #24]	@ (8009954 <prvIdleTask+0x28>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d9f9      	bls.n	8009934 <prvIdleTask+0x8>
            {
                taskYIELD();
 8009940:	4b05      	ldr	r3, [pc, #20]	@ (8009958 <prvIdleTask+0x2c>)
 8009942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8009950:	e7f0      	b.n	8009934 <prvIdleTask+0x8>
 8009952:	bf00      	nop
 8009954:	200038c8 	.word	0x200038c8
 8009958:	e000ed04 	.word	0xe000ed04

0800995c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009962:	2300      	movs	r3, #0
 8009964:	607b      	str	r3, [r7, #4]
 8009966:	e00c      	b.n	8009982 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	4613      	mov	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4a12      	ldr	r2, [pc, #72]	@ (80099bc <prvInitialiseTaskLists+0x60>)
 8009974:	4413      	add	r3, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe fcfe 	bl	8008378 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	3301      	adds	r3, #1
 8009980:	607b      	str	r3, [r7, #4]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b04      	cmp	r3, #4
 8009986:	d9ef      	bls.n	8009968 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009988:	480d      	ldr	r0, [pc, #52]	@ (80099c0 <prvInitialiseTaskLists+0x64>)
 800998a:	f7fe fcf5 	bl	8008378 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800998e:	480d      	ldr	r0, [pc, #52]	@ (80099c4 <prvInitialiseTaskLists+0x68>)
 8009990:	f7fe fcf2 	bl	8008378 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009994:	480c      	ldr	r0, [pc, #48]	@ (80099c8 <prvInitialiseTaskLists+0x6c>)
 8009996:	f7fe fcef 	bl	8008378 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800999a:	480c      	ldr	r0, [pc, #48]	@ (80099cc <prvInitialiseTaskLists+0x70>)
 800999c:	f7fe fcec 	bl	8008378 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80099a0:	480b      	ldr	r0, [pc, #44]	@ (80099d0 <prvInitialiseTaskLists+0x74>)
 80099a2:	f7fe fce9 	bl	8008378 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80099a6:	4b0b      	ldr	r3, [pc, #44]	@ (80099d4 <prvInitialiseTaskLists+0x78>)
 80099a8:	4a05      	ldr	r2, [pc, #20]	@ (80099c0 <prvInitialiseTaskLists+0x64>)
 80099aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099ac:	4b0a      	ldr	r3, [pc, #40]	@ (80099d8 <prvInitialiseTaskLists+0x7c>)
 80099ae:	4a05      	ldr	r2, [pc, #20]	@ (80099c4 <prvInitialiseTaskLists+0x68>)
 80099b0:	601a      	str	r2, [r3, #0]
}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	200038c8 	.word	0x200038c8
 80099c0:	2000392c 	.word	0x2000392c
 80099c4:	20003940 	.word	0x20003940
 80099c8:	2000395c 	.word	0x2000395c
 80099cc:	20003970 	.word	0x20003970
 80099d0:	20003988 	.word	0x20003988
 80099d4:	20003954 	.word	0x20003954
 80099d8:	20003958 	.word	0x20003958

080099dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099e2:	e019      	b.n	8009a18 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80099e4:	f000 fd1e 	bl	800a424 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80099e8:	4b10      	ldr	r3, [pc, #64]	@ (8009a2c <prvCheckTasksWaitingTermination+0x50>)
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3304      	adds	r3, #4
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fe fd2b 	bl	8008450 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80099fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009a30 <prvCheckTasksWaitingTermination+0x54>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	4a0b      	ldr	r2, [pc, #44]	@ (8009a30 <prvCheckTasksWaitingTermination+0x54>)
 8009a02:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8009a04:	4b0b      	ldr	r3, [pc, #44]	@ (8009a34 <prvCheckTasksWaitingTermination+0x58>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8009a34 <prvCheckTasksWaitingTermination+0x58>)
 8009a0c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8009a0e:	f000 fd3b 	bl	800a488 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f810 	bl	8009a38 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a18:	4b06      	ldr	r3, [pc, #24]	@ (8009a34 <prvCheckTasksWaitingTermination+0x58>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e1      	bne.n	80099e4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	20003970 	.word	0x20003970
 8009a30:	2000399c 	.word	0x2000399c
 8009a34:	20003984 	.word	0x20003984

08009a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 ff0b 	bl	800a860 <vPortFree>
            vPortFree( pxTCB );
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 ff08 	bl	800a860 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a88 <prvResetNextTaskUnblockTime+0x30>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d104      	bne.n	8009a70 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009a66:	4b09      	ldr	r3, [pc, #36]	@ (8009a8c <prvResetNextTaskUnblockTime+0x34>)
 8009a68:	f04f 32ff 	mov.w	r2, #4294967295
 8009a6c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009a6e:	e005      	b.n	8009a7c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009a70:	4b05      	ldr	r3, [pc, #20]	@ (8009a88 <prvResetNextTaskUnblockTime+0x30>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a04      	ldr	r2, [pc, #16]	@ (8009a8c <prvResetNextTaskUnblockTime+0x34>)
 8009a7a:	6013      	str	r3, [r2, #0]
}
 8009a7c:	bf00      	nop
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	20003954 	.word	0x20003954
 8009a8c:	200039bc 	.word	0x200039bc

08009a90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8009a96:	4b0d      	ldr	r3, [pc, #52]	@ (8009acc <xTaskGetSchedulerState+0x3c>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d102      	bne.n	8009aa4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	607b      	str	r3, [r7, #4]
 8009aa2:	e008      	b.n	8009ab6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad0 <xTaskGetSchedulerState+0x40>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d102      	bne.n	8009ab2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8009aac:	2302      	movs	r3, #2
 8009aae:	607b      	str	r3, [r7, #4]
 8009ab0:	e001      	b.n	8009ab6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	20f5      	movs	r0, #245	@ 0xf5
 8009abc:	f002 f9be 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8009ac0:	687b      	ldr	r3, [r7, #4]
    }
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	200039a8 	.word	0x200039a8
 8009ad0:	200039c4 	.word	0x200039c4

08009ad4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009ade:	4b3d      	ldr	r3, [pc, #244]	@ (8009bd4 <prvAddCurrentTaskToDelayedList+0x100>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8009ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8009bd8 <prvAddCurrentTaskToDelayedList+0x104>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8009aea:	4b3c      	ldr	r3, [pc, #240]	@ (8009bdc <prvAddCurrentTaskToDelayedList+0x108>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009af0:	4b3b      	ldr	r3, [pc, #236]	@ (8009be0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3304      	adds	r3, #4
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe fcaa 	bl	8008450 <uxListRemove>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10b      	bne.n	8009b1a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009b02:	4b37      	ldr	r3, [pc, #220]	@ (8009be0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b08:	2201      	movs	r2, #1
 8009b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b0e:	43da      	mvns	r2, r3
 8009b10:	4b34      	ldr	r3, [pc, #208]	@ (8009be4 <prvAddCurrentTaskToDelayedList+0x110>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4013      	ands	r3, r2
 8009b16:	4a33      	ldr	r2, [pc, #204]	@ (8009be4 <prvAddCurrentTaskToDelayedList+0x110>)
 8009b18:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b20:	d124      	bne.n	8009b6c <prvAddCurrentTaskToDelayedList+0x98>
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d021      	beq.n	8009b6c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b28:	4b2f      	ldr	r3, [pc, #188]	@ (8009be8 <prvAddCurrentTaskToDelayedList+0x114>)
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	613b      	str	r3, [r7, #16]
 8009b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8009be0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	693a      	ldr	r2, [r7, #16]
 8009b34:	609a      	str	r2, [r3, #8]
 8009b36:	4b2a      	ldr	r3, [pc, #168]	@ (8009be0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	6892      	ldr	r2, [r2, #8]
 8009b3e:	60da      	str	r2, [r3, #12]
 8009b40:	4b27      	ldr	r3, [pc, #156]	@ (8009be0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	3204      	adds	r2, #4
 8009b4a:	605a      	str	r2, [r3, #4]
 8009b4c:	4b24      	ldr	r3, [pc, #144]	@ (8009be0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	1d1a      	adds	r2, r3, #4
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	609a      	str	r2, [r3, #8]
 8009b56:	4b22      	ldr	r3, [pc, #136]	@ (8009be0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a23      	ldr	r2, [pc, #140]	@ (8009be8 <prvAddCurrentTaskToDelayedList+0x114>)
 8009b5c:	615a      	str	r2, [r3, #20]
 8009b5e:	4b22      	ldr	r3, [pc, #136]	@ (8009be8 <prvAddCurrentTaskToDelayedList+0x114>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3301      	adds	r3, #1
 8009b64:	4a20      	ldr	r2, [pc, #128]	@ (8009be8 <prvAddCurrentTaskToDelayedList+0x114>)
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009b6a:	e02e      	b.n	8009bca <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8009b6c:	69fa      	ldr	r2, [r7, #28]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4413      	add	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b74:	4b1a      	ldr	r3, [pc, #104]	@ (8009be0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d20d      	bcs.n	8009ba0 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8009b84:	4b16      	ldr	r3, [pc, #88]	@ (8009be0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2104      	movs	r1, #4
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f002 fa90 	bl	800c0b0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8009b90:	4b13      	ldr	r3, [pc, #76]	@ (8009be0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3304      	adds	r3, #4
 8009b96:	4619      	mov	r1, r3
 8009b98:	6978      	ldr	r0, [r7, #20]
 8009b9a:	f7fe fc1e 	bl	80083da <vListInsert>
}
 8009b9e:	e014      	b.n	8009bca <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8009ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8009be0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2104      	movs	r1, #4
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f002 fa82 	bl	800c0b0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8009bac:	4b0c      	ldr	r3, [pc, #48]	@ (8009be0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	69b8      	ldr	r0, [r7, #24]
 8009bb6:	f7fe fc10 	bl	80083da <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8009bba:	4b0c      	ldr	r3, [pc, #48]	@ (8009bec <prvAddCurrentTaskToDelayedList+0x118>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d202      	bcs.n	8009bca <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8009bc4:	4a09      	ldr	r2, [pc, #36]	@ (8009bec <prvAddCurrentTaskToDelayedList+0x118>)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6013      	str	r3, [r2, #0]
}
 8009bca:	bf00      	nop
 8009bcc:	3720      	adds	r7, #32
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	200039a0 	.word	0x200039a0
 8009bd8:	20003954 	.word	0x20003954
 8009bdc:	20003958 	.word	0x20003958
 8009be0:	200038c4 	.word	0x200038c4
 8009be4:	200039a4 	.word	0x200039a4
 8009be8:	20003988 	.word	0x20003988
 8009bec:	200039bc 	.word	0x200039bc

08009bf0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8009bfa:	f000 fa5b 	bl	800a0b4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8009bfe:	4b15      	ldr	r3, [pc, #84]	@ (8009c54 <xTimerCreateTimerTask+0x64>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00b      	beq.n	8009c1e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8009c06:	4b14      	ldr	r3, [pc, #80]	@ (8009c58 <xTimerCreateTimerTask+0x68>)
 8009c08:	9301      	str	r3, [sp, #4]
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009c14:	4911      	ldr	r1, [pc, #68]	@ (8009c5c <xTimerCreateTimerTask+0x6c>)
 8009c16:	4812      	ldr	r0, [pc, #72]	@ (8009c60 <xTimerCreateTimerTask+0x70>)
 8009c18:	f7fe ff9b 	bl	8008b52 <xTaskCreate>
 8009c1c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10b      	bne.n	8009c3c <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	603b      	str	r3, [r7, #0]
}
 8009c36:	bf00      	nop
 8009c38:	bf00      	nop
 8009c3a:	e7fd      	b.n	8009c38 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8009c44:	f002 f8fa 	bl	800be3c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8009c48:	687b      	ldr	r3, [r7, #4]
    }
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	200039f8 	.word	0x200039f8
 8009c58:	200039fc 	.word	0x200039fc
 8009c5c:	0800d710 	.word	0x0800d710
 8009c60:	08009d09 	.word	0x08009d09

08009c64 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009c70:	e008      	b.n	8009c84 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	4413      	add	r3, r2
 8009c7a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	699a      	ldr	r2, [r3, #24]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	18d1      	adds	r1, r2, r3
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f000 f8df 	bl	8009e54 <prvInsertTimerInActiveList>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1ea      	bne.n	8009c72 <prvReloadTimer+0xe>
        }
    }
 8009c9c:	bf00      	nop
 8009c9e:	bf00      	nop
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
	...

08009ca8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cb2:	4b14      	ldr	r3, [pc, #80]	@ (8009d04 <prvProcessExpiredTimer+0x5c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fe fbc5 	bl	8008450 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ccc:	f003 0304 	and.w	r3, r3, #4
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d005      	beq.n	8009ce0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f7ff ffc3 	bl	8009c64 <prvReloadTimer>
 8009cde:	e008      	b.n	8009cf2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ce6:	f023 0301 	bic.w	r3, r3, #1
 8009cea:	b2da      	uxtb	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	4798      	blx	r3
    }
 8009cfa:	bf00      	nop
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	200039f0 	.word	0x200039f0

08009d08 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d10:	f107 0308 	add.w	r3, r7, #8
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 f859 	bl	8009dcc <prvGetNextExpireTime>
 8009d1a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f000 f805 	bl	8009d30 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8009d26:	f000 f8d7 	bl	8009ed8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d2a:	bf00      	nop
 8009d2c:	e7f0      	b.n	8009d10 <prvTimerTask+0x8>
	...

08009d30 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8009d3a:	f7ff f955 	bl	8008fe8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d3e:	f107 0308 	add.w	r3, r7, #8
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 f866 	bl	8009e14 <prvSampleTimeNow>
 8009d48:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d130      	bne.n	8009db2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10a      	bne.n	8009d6c <prvProcessTimerOrBlockTask+0x3c>
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d806      	bhi.n	8009d6c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8009d5e:	f7ff f951 	bl	8009004 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d62:	68f9      	ldr	r1, [r7, #12]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff ff9f 	bl	8009ca8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8009d6a:	e024      	b.n	8009db6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d008      	beq.n	8009d84 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d72:	4b13      	ldr	r3, [pc, #76]	@ (8009dc0 <prvProcessTimerOrBlockTask+0x90>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <prvProcessTimerOrBlockTask+0x50>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e000      	b.n	8009d82 <prvProcessTimerOrBlockTask+0x52>
 8009d80:	2300      	movs	r3, #0
 8009d82:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d84:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc4 <prvProcessTimerOrBlockTask+0x94>)
 8009d86:	6818      	ldr	r0, [r3, #0]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	4619      	mov	r1, r3
 8009d92:	f7fe fe6b 	bl	8008a6c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8009d96:	f7ff f935 	bl	8009004 <xTaskResumeAll>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10a      	bne.n	8009db6 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8009da0:	4b09      	ldr	r3, [pc, #36]	@ (8009dc8 <prvProcessTimerOrBlockTask+0x98>)
 8009da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	f3bf 8f6f 	isb	sy
    }
 8009db0:	e001      	b.n	8009db6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8009db2:	f7ff f927 	bl	8009004 <xTaskResumeAll>
    }
 8009db6:	bf00      	nop
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	200039f4 	.word	0x200039f4
 8009dc4:	200039f8 	.word	0x200039f8
 8009dc8:	e000ed04 	.word	0xe000ed04

08009dcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8009e10 <prvGetNextExpireTime+0x44>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <prvGetNextExpireTime+0x16>
 8009dde:	2201      	movs	r2, #1
 8009de0:	e000      	b.n	8009de4 <prvGetNextExpireTime+0x18>
 8009de2:	2200      	movs	r2, #0
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d105      	bne.n	8009dfc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009df0:	4b07      	ldr	r3, [pc, #28]	@ (8009e10 <prvGetNextExpireTime+0x44>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	60fb      	str	r3, [r7, #12]
 8009dfa:	e001      	b.n	8009e00 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8009e00:	68fb      	ldr	r3, [r7, #12]
    }
 8009e02:	4618      	mov	r0, r3
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	200039f0 	.word	0x200039f0

08009e14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8009e1c:	f7ff fa04 	bl	8009228 <xTaskGetTickCount>
 8009e20:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8009e22:	4b0b      	ldr	r3, [pc, #44]	@ (8009e50 <prvSampleTimeNow+0x3c>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d205      	bcs.n	8009e38 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8009e2c:	f000 f91c 	bl	800a068 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	601a      	str	r2, [r3, #0]
 8009e36:	e002      	b.n	8009e3e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8009e3e:	4a04      	ldr	r2, [pc, #16]	@ (8009e50 <prvSampleTimeNow+0x3c>)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8009e44:	68fb      	ldr	r3, [r7, #12]
    }
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	20003a00 	.word	0x20003a00

08009e54 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
 8009e60:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8009e62:	2300      	movs	r3, #0
 8009e64:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d812      	bhi.n	8009ea0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	1ad2      	subs	r2, r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d302      	bcc.n	8009e8e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	617b      	str	r3, [r7, #20]
 8009e8c:	e01b      	b.n	8009ec6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e8e:	4b10      	ldr	r3, [pc, #64]	@ (8009ed0 <prvInsertTimerInActiveList+0x7c>)
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	3304      	adds	r3, #4
 8009e96:	4619      	mov	r1, r3
 8009e98:	4610      	mov	r0, r2
 8009e9a:	f7fe fa9e 	bl	80083da <vListInsert>
 8009e9e:	e012      	b.n	8009ec6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d206      	bcs.n	8009eb6 <prvInsertTimerInActiveList+0x62>
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d302      	bcc.n	8009eb6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	e007      	b.n	8009ec6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009eb6:	4b07      	ldr	r3, [pc, #28]	@ (8009ed4 <prvInsertTimerInActiveList+0x80>)
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	f7fe fa8a 	bl	80083da <vListInsert>
            }
        }

        return xProcessTimerNow;
 8009ec6:	697b      	ldr	r3, [r7, #20]
    }
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3718      	adds	r7, #24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	200039f4 	.word	0x200039f4
 8009ed4:	200039f0 	.word	0x200039f0

08009ed8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8009ede:	f107 0308 	add.w	r3, r7, #8
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	605a      	str	r2, [r3, #4]
 8009ee8:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8009eea:	e0a9      	b.n	800a040 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f2c0 80a6 	blt.w	800a040 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d004      	beq.n	8009f0a <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	3304      	adds	r3, #4
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fe faa3 	bl	8008450 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f0a:	1d3b      	adds	r3, r7, #4
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7ff ff81 	bl	8009e14 <prvSampleTimeNow>
 8009f12:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	2b08      	cmp	r3, #8
 8009f1a:	f200 808e 	bhi.w	800a03a <prvProcessReceivedCommands+0x162>
 8009f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f24 <prvProcessReceivedCommands+0x4c>)
 8009f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f24:	08009f49 	.word	0x08009f49
 8009f28:	08009f49 	.word	0x08009f49
 8009f2c:	08009fb1 	.word	0x08009fb1
 8009f30:	08009fc5 	.word	0x08009fc5
 8009f34:	0800a011 	.word	0x0800a011
 8009f38:	08009f49 	.word	0x08009f49
 8009f3c:	08009f49 	.word	0x08009f49
 8009f40:	08009fb1 	.word	0x08009fb1
 8009f44:	08009fc5 	.word	0x08009fc5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f4e:	f043 0301 	orr.w	r3, r3, #1
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	18d1      	adds	r1, r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	69f8      	ldr	r0, [r7, #28]
 8009f68:	f7ff ff74 	bl	8009e54 <prvInsertTimerInActiveList>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d065      	beq.n	800a03e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f78:	f003 0304 	and.w	r3, r3, #4
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d009      	beq.n	8009f94 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	4413      	add	r3, r2
 8009f88:	69ba      	ldr	r2, [r7, #24]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	69f8      	ldr	r0, [r7, #28]
 8009f8e:	f7ff fe69 	bl	8009c64 <prvReloadTimer>
 8009f92:	e008      	b.n	8009fa6 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f9a:	f023 0301 	bic.w	r3, r3, #1
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	69f8      	ldr	r0, [r7, #28]
 8009fac:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8009fae:	e046      	b.n	800a03e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fb6:	f023 0301 	bic.w	r3, r3, #1
 8009fba:	b2da      	uxtb	r2, r3
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8009fc2:	e03d      	b.n	800a040 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fca:	f043 0301 	orr.w	r3, r3, #1
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	699b      	ldr	r3, [r3, #24]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10b      	bne.n	8009ffc <prvProcessReceivedCommands+0x124>
    __asm volatile
 8009fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	617b      	str	r3, [r7, #20]
}
 8009ff6:	bf00      	nop
 8009ff8:	bf00      	nop
 8009ffa:	e7fd      	b.n	8009ff8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	699a      	ldr	r2, [r3, #24]
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	18d1      	adds	r1, r2, r3
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	69f8      	ldr	r0, [r7, #28]
 800a00a:	f7ff ff23 	bl	8009e54 <prvInsertTimerInActiveList>
                        break;
 800a00e:	e017      	b.n	800a040 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d103      	bne.n	800a026 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 800a01e:	69f8      	ldr	r0, [r7, #28]
 800a020:	f000 fc1e 	bl	800a860 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800a024:	e00c      	b.n	800a040 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a02c:	f023 0301 	bic.w	r3, r3, #1
 800a030:	b2da      	uxtb	r2, r3
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800a038:	e002      	b.n	800a040 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 800a03a:	bf00      	nop
 800a03c:	e000      	b.n	800a040 <prvProcessReceivedCommands+0x168>
                        break;
 800a03e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800a040:	4b08      	ldr	r3, [pc, #32]	@ (800a064 <prvProcessReceivedCommands+0x18c>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f107 0108 	add.w	r1, r7, #8
 800a048:	2200      	movs	r2, #0
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe fb42 	bl	80086d4 <xQueueReceive>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	f47f af4a 	bne.w	8009eec <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800a058:	bf00      	nop
 800a05a:	bf00      	nop
 800a05c:	3720      	adds	r7, #32
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	200039f8 	.word	0x200039f8

0800a068 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a06e:	e009      	b.n	800a084 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a070:	4b0e      	ldr	r3, [pc, #56]	@ (800a0ac <prvSwitchTimerLists+0x44>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800a07a:	f04f 31ff 	mov.w	r1, #4294967295
 800a07e:	6838      	ldr	r0, [r7, #0]
 800a080:	f7ff fe12 	bl	8009ca8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a084:	4b09      	ldr	r3, [pc, #36]	@ (800a0ac <prvSwitchTimerLists+0x44>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1f0      	bne.n	800a070 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800a08e:	4b07      	ldr	r3, [pc, #28]	@ (800a0ac <prvSwitchTimerLists+0x44>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800a094:	4b06      	ldr	r3, [pc, #24]	@ (800a0b0 <prvSwitchTimerLists+0x48>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a04      	ldr	r2, [pc, #16]	@ (800a0ac <prvSwitchTimerLists+0x44>)
 800a09a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800a09c:	4a04      	ldr	r2, [pc, #16]	@ (800a0b0 <prvSwitchTimerLists+0x48>)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6013      	str	r3, [r2, #0]
    }
 800a0a2:	bf00      	nop
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	200039f0 	.word	0x200039f0
 800a0b0:	200039f4 	.word	0x200039f4

0800a0b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800a0b8:	f000 f9b4 	bl	800a424 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800a0bc:	4b12      	ldr	r3, [pc, #72]	@ (800a108 <prvCheckForValidListAndQueue+0x54>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d11d      	bne.n	800a100 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800a0c4:	4811      	ldr	r0, [pc, #68]	@ (800a10c <prvCheckForValidListAndQueue+0x58>)
 800a0c6:	f7fe f957 	bl	8008378 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800a0ca:	4811      	ldr	r0, [pc, #68]	@ (800a110 <prvCheckForValidListAndQueue+0x5c>)
 800a0cc:	f7fe f954 	bl	8008378 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800a0d0:	4b10      	ldr	r3, [pc, #64]	@ (800a114 <prvCheckForValidListAndQueue+0x60>)
 800a0d2:	4a0e      	ldr	r2, [pc, #56]	@ (800a10c <prvCheckForValidListAndQueue+0x58>)
 800a0d4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800a0d6:	4b10      	ldr	r3, [pc, #64]	@ (800a118 <prvCheckForValidListAndQueue+0x64>)
 800a0d8:	4a0d      	ldr	r2, [pc, #52]	@ (800a110 <prvCheckForValidListAndQueue+0x5c>)
 800a0da:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 800a0dc:	2200      	movs	r2, #0
 800a0de:	210c      	movs	r1, #12
 800a0e0:	200a      	movs	r0, #10
 800a0e2:	f7fe fa7b 	bl	80085dc <xQueueGenericCreate>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	4a07      	ldr	r2, [pc, #28]	@ (800a108 <prvCheckForValidListAndQueue+0x54>)
 800a0ea:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800a0ec:	4b06      	ldr	r3, [pc, #24]	@ (800a108 <prvCheckForValidListAndQueue+0x54>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d005      	beq.n	800a100 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0f4:	4b04      	ldr	r3, [pc, #16]	@ (800a108 <prvCheckForValidListAndQueue+0x54>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4908      	ldr	r1, [pc, #32]	@ (800a11c <prvCheckForValidListAndQueue+0x68>)
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe fc66 	bl	80089cc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a100:	f000 f9c2 	bl	800a488 <vPortExitCritical>
    }
 800a104:	bf00      	nop
 800a106:	bd80      	pop	{r7, pc}
 800a108:	200039f8 	.word	0x200039f8
 800a10c:	200039c8 	.word	0x200039c8
 800a110:	200039dc 	.word	0x200039dc
 800a114:	200039f0 	.word	0x200039f0
 800a118:	200039f4 	.word	0x200039f4
 800a11c:	0800d718 	.word	0x0800d718

0800a120 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3b04      	subs	r3, #4
 800a130:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a138:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3b04      	subs	r3, #4
 800a13e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	f023 0201 	bic.w	r2, r3, #1
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	3b04      	subs	r3, #4
 800a14e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800a150:	4a0c      	ldr	r2, [pc, #48]	@ (800a184 <pxPortInitialiseStack+0x64>)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	3b14      	subs	r3, #20
 800a15a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	3b04      	subs	r3, #4
 800a166:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f06f 0202 	mvn.w	r2, #2
 800a16e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	3b20      	subs	r3, #32
 800a174:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800a176:	68fb      	ldr	r3, [r7, #12]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	0800a189 	.word	0x0800a189

0800a188 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800a192:	4b13      	ldr	r3, [pc, #76]	@ (800a1e0 <prvTaskExitError+0x58>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19a:	d00b      	beq.n	800a1b4 <prvTaskExitError+0x2c>
    __asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	60fb      	str	r3, [r7, #12]
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	e7fd      	b.n	800a1b0 <prvTaskExitError+0x28>
    __asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	60bb      	str	r3, [r7, #8]
}
 800a1c6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800a1c8:	bf00      	nop
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d0fc      	beq.n	800a1ca <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800a1d0:	bf00      	nop
 800a1d2:	bf00      	nop
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	20000028 	.word	0x20000028
	...

0800a1f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800a1f0:	4b07      	ldr	r3, [pc, #28]	@ (800a210 <pxCurrentTCBConst2>)
 800a1f2:	6819      	ldr	r1, [r3, #0]
 800a1f4:	6808      	ldr	r0, [r1, #0]
 800a1f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fa:	f380 8809 	msr	PSP, r0
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f04f 0000 	mov.w	r0, #0
 800a206:	f380 8811 	msr	BASEPRI, r0
 800a20a:	4770      	bx	lr
 800a20c:	f3af 8000 	nop.w

0800a210 <pxCurrentTCBConst2>:
 800a210:	200038c4 	.word	0x200038c4
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 800a214:	bf00      	nop
 800a216:	bf00      	nop

0800a218 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800a218:	4808      	ldr	r0, [pc, #32]	@ (800a23c <prvPortStartFirstTask+0x24>)
 800a21a:	6800      	ldr	r0, [r0, #0]
 800a21c:	6800      	ldr	r0, [r0, #0]
 800a21e:	f380 8808 	msr	MSP, r0
 800a222:	f04f 0000 	mov.w	r0, #0
 800a226:	f380 8814 	msr	CONTROL, r0
 800a22a:	b662      	cpsie	i
 800a22c:	b661      	cpsie	f
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	f3bf 8f6f 	isb	sy
 800a236:	df00      	svc	0
 800a238:	bf00      	nop
 800a23a:	0000      	.short	0x0000
 800a23c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop

0800a244 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b08c      	sub	sp, #48	@ 0x30
 800a248:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a24a:	4b69      	ldr	r3, [pc, #420]	@ (800a3f0 <xPortStartScheduler+0x1ac>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a69      	ldr	r2, [pc, #420]	@ (800a3f4 <xPortStartScheduler+0x1b0>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d10b      	bne.n	800a26c <xPortStartScheduler+0x28>
    __asm volatile
 800a254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a266:	bf00      	nop
 800a268:	bf00      	nop
 800a26a:	e7fd      	b.n	800a268 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a26c:	4b60      	ldr	r3, [pc, #384]	@ (800a3f0 <xPortStartScheduler+0x1ac>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a61      	ldr	r2, [pc, #388]	@ (800a3f8 <xPortStartScheduler+0x1b4>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d10b      	bne.n	800a28e <xPortStartScheduler+0x4a>
    __asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	623b      	str	r3, [r7, #32]
}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800a28e:	4b5b      	ldr	r3, [pc, #364]	@ (800a3fc <xPortStartScheduler+0x1b8>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 800a294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a296:	332c      	adds	r3, #44	@ 0x2c
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a59      	ldr	r2, [pc, #356]	@ (800a400 <xPortStartScheduler+0x1bc>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d00b      	beq.n	800a2b8 <xPortStartScheduler+0x74>
    __asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	61fb      	str	r3, [r7, #28]
}
 800a2b2:	bf00      	nop
 800a2b4:	bf00      	nop
 800a2b6:	e7fd      	b.n	800a2b4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800a2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ba:	3338      	adds	r3, #56	@ 0x38
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a51      	ldr	r2, [pc, #324]	@ (800a404 <xPortStartScheduler+0x1c0>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d00b      	beq.n	800a2dc <xPortStartScheduler+0x98>
    __asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	61bb      	str	r3, [r7, #24]
}
 800a2d6:	bf00      	nop
 800a2d8:	bf00      	nop
 800a2da:	e7fd      	b.n	800a2d8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a2e0:	4b49      	ldr	r3, [pc, #292]	@ (800a408 <xPortStartScheduler+0x1c4>)
 800a2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 800a2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ee:	22ff      	movs	r2, #255	@ 0xff
 800a2f0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a302:	b2da      	uxtb	r2, r3
 800a304:	4b41      	ldr	r3, [pc, #260]	@ (800a40c <xPortStartScheduler+0x1c8>)
 800a306:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800a308:	4b40      	ldr	r3, [pc, #256]	@ (800a40c <xPortStartScheduler+0x1c8>)
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d10b      	bne.n	800a328 <xPortStartScheduler+0xe4>
    __asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	617b      	str	r3, [r7, #20]
}
 800a322:	bf00      	nop
 800a324:	bf00      	nop
 800a326:	e7fd      	b.n	800a324 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800a328:	79fb      	ldrb	r3, [r7, #7]
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	43db      	mvns	r3, r3
 800a32e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a332:	2b00      	cmp	r3, #0
 800a334:	d013      	beq.n	800a35e <xPortStartScheduler+0x11a>
    __asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	613b      	str	r3, [r7, #16]
}
 800a348:	bf00      	nop
 800a34a:	bf00      	nop
 800a34c:	e7fd      	b.n	800a34a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	3301      	adds	r3, #1
 800a352:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a354:	79fb      	ldrb	r3, [r7, #7]
 800a356:	b2db      	uxtb	r3, r3
 800a358:	005b      	lsls	r3, r3, #1
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	b2db      	uxtb	r3, r3
 800a362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a366:	2b80      	cmp	r3, #128	@ 0x80
 800a368:	d0f1      	beq.n	800a34e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	d103      	bne.n	800a378 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800a370:	4b27      	ldr	r3, [pc, #156]	@ (800a410 <xPortStartScheduler+0x1cc>)
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	e004      	b.n	800a382 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	f1c3 0307 	rsb	r3, r3, #7
 800a37e:	4a24      	ldr	r2, [pc, #144]	@ (800a410 <xPortStartScheduler+0x1cc>)
 800a380:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a382:	4b23      	ldr	r3, [pc, #140]	@ (800a410 <xPortStartScheduler+0x1cc>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	021b      	lsls	r3, r3, #8
 800a388:	4a21      	ldr	r2, [pc, #132]	@ (800a410 <xPortStartScheduler+0x1cc>)
 800a38a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a38c:	4b20      	ldr	r3, [pc, #128]	@ (800a410 <xPortStartScheduler+0x1cc>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a394:	4a1e      	ldr	r2, [pc, #120]	@ (800a410 <xPortStartScheduler+0x1cc>)
 800a396:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800a398:	7bfb      	ldrb	r3, [r7, #15]
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800a3a0:	4b1c      	ldr	r3, [pc, #112]	@ (800a414 <xPortStartScheduler+0x1d0>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a1b      	ldr	r2, [pc, #108]	@ (800a414 <xPortStartScheduler+0x1d0>)
 800a3a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3aa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800a3ac:	4b19      	ldr	r3, [pc, #100]	@ (800a414 <xPortStartScheduler+0x1d0>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a18      	ldr	r2, [pc, #96]	@ (800a414 <xPortStartScheduler+0x1d0>)
 800a3b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3b6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800a3b8:	4b17      	ldr	r3, [pc, #92]	@ (800a418 <xPortStartScheduler+0x1d4>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800a3be:	f000 f8ed 	bl	800a59c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800a3c2:	4b16      	ldr	r3, [pc, #88]	@ (800a41c <xPortStartScheduler+0x1d8>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800a3c8:	f000 f90c 	bl	800a5e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3cc:	4b14      	ldr	r3, [pc, #80]	@ (800a420 <xPortStartScheduler+0x1dc>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a13      	ldr	r2, [pc, #76]	@ (800a420 <xPortStartScheduler+0x1dc>)
 800a3d2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a3d6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800a3d8:	f7ff ff1e 	bl	800a218 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800a3dc:	f7ff f858 	bl	8009490 <vTaskSwitchContext>
    prvTaskExitError();
 800a3e0:	f7ff fed2 	bl	800a188 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3730      	adds	r7, #48	@ 0x30
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	e000ed00 	.word	0xe000ed00
 800a3f4:	410fc271 	.word	0x410fc271
 800a3f8:	410fc270 	.word	0x410fc270
 800a3fc:	e000ed08 	.word	0xe000ed08
 800a400:	0800a1f1 	.word	0x0800a1f1
 800a404:	0800a4e1 	.word	0x0800a4e1
 800a408:	e000e400 	.word	0xe000e400
 800a40c:	20003a04 	.word	0x20003a04
 800a410:	20003a08 	.word	0x20003a08
 800a414:	e000ed20 	.word	0xe000ed20
 800a418:	e000ed1c 	.word	0xe000ed1c
 800a41c:	20000028 	.word	0x20000028
 800a420:	e000ef34 	.word	0xe000ef34

0800a424 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
    __asm volatile
 800a42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	607b      	str	r3, [r7, #4]
}
 800a43c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800a43e:	4b10      	ldr	r3, [pc, #64]	@ (800a480 <vPortEnterCritical+0x5c>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3301      	adds	r3, #1
 800a444:	4a0e      	ldr	r2, [pc, #56]	@ (800a480 <vPortEnterCritical+0x5c>)
 800a446:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800a448:	4b0d      	ldr	r3, [pc, #52]	@ (800a480 <vPortEnterCritical+0x5c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d110      	bne.n	800a472 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a450:	4b0c      	ldr	r3, [pc, #48]	@ (800a484 <vPortEnterCritical+0x60>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00b      	beq.n	800a472 <vPortEnterCritical+0x4e>
    __asm volatile
 800a45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	603b      	str	r3, [r7, #0]
}
 800a46c:	bf00      	nop
 800a46e:	bf00      	nop
 800a470:	e7fd      	b.n	800a46e <vPortEnterCritical+0x4a>
    }
}
 800a472:	bf00      	nop
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	20000028 	.word	0x20000028
 800a484:	e000ed04 	.word	0xe000ed04

0800a488 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800a48e:	4b12      	ldr	r3, [pc, #72]	@ (800a4d8 <vPortExitCritical+0x50>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10b      	bne.n	800a4ae <vPortExitCritical+0x26>
    __asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	607b      	str	r3, [r7, #4]
}
 800a4a8:	bf00      	nop
 800a4aa:	bf00      	nop
 800a4ac:	e7fd      	b.n	800a4aa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800a4ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a4d8 <vPortExitCritical+0x50>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	4a08      	ldr	r2, [pc, #32]	@ (800a4d8 <vPortExitCritical+0x50>)
 800a4b6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800a4b8:	4b07      	ldr	r3, [pc, #28]	@ (800a4d8 <vPortExitCritical+0x50>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d105      	bne.n	800a4cc <vPortExitCritical+0x44>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800a4ca:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr
 800a4d8:	20000028 	.word	0x20000028
 800a4dc:	00000000 	.word	0x00000000

0800a4e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800a4e0:	f3ef 8009 	mrs	r0, PSP
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	4b15      	ldr	r3, [pc, #84]	@ (800a540 <pxCurrentTCBConst>)
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	f01e 0f10 	tst.w	lr, #16
 800a4f0:	bf08      	it	eq
 800a4f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fa:	6010      	str	r0, [r2, #0]
 800a4fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a504:	f380 8811 	msr	BASEPRI, r0
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f7fe ffbe 	bl	8009490 <vTaskSwitchContext>
 800a514:	f04f 0000 	mov.w	r0, #0
 800a518:	f380 8811 	msr	BASEPRI, r0
 800a51c:	bc09      	pop	{r0, r3}
 800a51e:	6819      	ldr	r1, [r3, #0]
 800a520:	6808      	ldr	r0, [r1, #0]
 800a522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a526:	f01e 0f10 	tst.w	lr, #16
 800a52a:	bf08      	it	eq
 800a52c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a530:	f380 8809 	msr	PSP, r0
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	f3af 8000 	nop.w

0800a540 <pxCurrentTCBConst>:
 800a540:	200038c4 	.word	0x200038c4
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800a544:	bf00      	nop
 800a546:	bf00      	nop

0800a548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
    __asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	607b      	str	r3, [r7, #4]
}
 800a560:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 800a562:	f001 fbb5 	bl	800bcd0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800a566:	f7fe fe71 	bl	800924c <xTaskIncrementTick>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d006      	beq.n	800a57e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 800a570:	f001 fc0c 	bl	800bd8c <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a574:	4b08      	ldr	r3, [pc, #32]	@ (800a598 <SysTick_Handler+0x50>)
 800a576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	e001      	b.n	800a582 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800a57e:	f001 fbe9 	bl	800bd54 <SEGGER_SYSVIEW_RecordExitISR>
 800a582:	2300      	movs	r3, #0
 800a584:	603b      	str	r3, [r7, #0]
    __asm volatile
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	f383 8811 	msr	BASEPRI, r3
}
 800a58c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800a58e:	bf00      	nop
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800a59c:	b480      	push	{r7}
 800a59e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d0 <vPortSetupTimerInterrupt+0x34>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d4 <vPortSetupTimerInterrupt+0x38>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d8 <vPortSetupTimerInterrupt+0x3c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a5dc <vPortSetupTimerInterrupt+0x40>)
 800a5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b6:	099b      	lsrs	r3, r3, #6
 800a5b8:	4a09      	ldr	r2, [pc, #36]	@ (800a5e0 <vPortSetupTimerInterrupt+0x44>)
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5be:	4b04      	ldr	r3, [pc, #16]	@ (800a5d0 <vPortSetupTimerInterrupt+0x34>)
 800a5c0:	2207      	movs	r2, #7
 800a5c2:	601a      	str	r2, [r3, #0]
}
 800a5c4:	bf00      	nop
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	e000e010 	.word	0xe000e010
 800a5d4:	e000e018 	.word	0xe000e018
 800a5d8:	20000004 	.word	0x20000004
 800a5dc:	10624dd3 	.word	0x10624dd3
 800a5e0:	e000e014 	.word	0xe000e014

0800a5e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800a5e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a5f4 <vPortEnableVFP+0x10>
 800a5e8:	6801      	ldr	r1, [r0, #0]
 800a5ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a5ee:	6001      	str	r1, [r0, #0]
 800a5f0:	4770      	bx	lr
 800a5f2:	0000      	.short	0x0000
 800a5f4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800a5f8:	bf00      	nop
 800a5fa:	bf00      	nop

0800a5fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08e      	sub	sp, #56	@ 0x38
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800a604:	2300      	movs	r3, #0
 800a606:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d022      	beq.n	800a654 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800a60e:	2308      	movs	r3, #8
 800a610:	43db      	mvns	r3, r3
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	429a      	cmp	r2, r3
 800a616:	d81b      	bhi.n	800a650 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800a618:	2208      	movs	r2, #8
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4413      	add	r3, r2
 800a61e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f003 0307 	and.w	r3, r3, #7
 800a626:	2b00      	cmp	r3, #0
 800a628:	d014      	beq.n	800a654 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f003 0307 	and.w	r3, r3, #7
 800a630:	f1c3 0308 	rsb	r3, r3, #8
 800a634:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800a636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a638:	43db      	mvns	r3, r3
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d804      	bhi.n	800a64a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a644:	4413      	add	r3, r2
 800a646:	607b      	str	r3, [r7, #4]
 800a648:	e004      	b.n	800a654 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800a64a:	2300      	movs	r3, #0
 800a64c:	607b      	str	r3, [r7, #4]
 800a64e:	e001      	b.n	800a654 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 800a650:	2300      	movs	r3, #0
 800a652:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 800a654:	f7fe fcc8 	bl	8008fe8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800a658:	4b7a      	ldr	r3, [pc, #488]	@ (800a844 <pvPortMalloc+0x248>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 800a660:	f000 f978 	bl	800a954 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	f2c0 80d3 	blt.w	800a812 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 80cf 	beq.w	800a812 <pvPortMalloc+0x216>
 800a674:	4b74      	ldr	r3, [pc, #464]	@ (800a848 <pvPortMalloc+0x24c>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	f200 80c9 	bhi.w	800a812 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800a680:	4b72      	ldr	r3, [pc, #456]	@ (800a84c <pvPortMalloc+0x250>)
 800a682:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 800a684:	4b71      	ldr	r3, [pc, #452]	@ (800a84c <pvPortMalloc+0x250>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800a68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68c:	4a70      	ldr	r2, [pc, #448]	@ (800a850 <pvPortMalloc+0x254>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d305      	bcc.n	800a69e <pvPortMalloc+0xa2>
 800a692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a694:	4a6f      	ldr	r2, [pc, #444]	@ (800a854 <pvPortMalloc+0x258>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d801      	bhi.n	800a69e <pvPortMalloc+0xa2>
 800a69a:	2301      	movs	r3, #1
 800a69c:	e000      	b.n	800a6a0 <pvPortMalloc+0xa4>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d129      	bne.n	800a6f8 <pvPortMalloc+0xfc>
    __asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	623b      	str	r3, [r7, #32]
}
 800a6b6:	bf00      	nop
 800a6b8:	bf00      	nop
 800a6ba:	e7fd      	b.n	800a6b8 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 800a6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6be:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800a6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c8:	4a61      	ldr	r2, [pc, #388]	@ (800a850 <pvPortMalloc+0x254>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d305      	bcc.n	800a6da <pvPortMalloc+0xde>
 800a6ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d0:	4a60      	ldr	r2, [pc, #384]	@ (800a854 <pvPortMalloc+0x258>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d801      	bhi.n	800a6da <pvPortMalloc+0xde>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e000      	b.n	800a6dc <pvPortMalloc+0xe0>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10b      	bne.n	800a6f8 <pvPortMalloc+0xfc>
    __asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	61fb      	str	r3, [r7, #28]
}
 800a6f2:	bf00      	nop
 800a6f4:	bf00      	nop
 800a6f6:	e7fd      	b.n	800a6f4 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800a6f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d903      	bls.n	800a70a <pvPortMalloc+0x10e>
 800a702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1d8      	bne.n	800a6bc <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800a70a:	4b4e      	ldr	r3, [pc, #312]	@ (800a844 <pvPortMalloc+0x248>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a710:	429a      	cmp	r2, r3
 800a712:	d07e      	beq.n	800a812 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 800a714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2208      	movs	r2, #8
 800a71a:	4413      	add	r3, r2
 800a71c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 800a71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a720:	4a4b      	ldr	r2, [pc, #300]	@ (800a850 <pvPortMalloc+0x254>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d305      	bcc.n	800a732 <pvPortMalloc+0x136>
 800a726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a728:	4a4a      	ldr	r2, [pc, #296]	@ (800a854 <pvPortMalloc+0x258>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d801      	bhi.n	800a732 <pvPortMalloc+0x136>
 800a72e:	2301      	movs	r3, #1
 800a730:	e000      	b.n	800a734 <pvPortMalloc+0x138>
 800a732:	2300      	movs	r3, #0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10b      	bne.n	800a750 <pvPortMalloc+0x154>
    __asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	61bb      	str	r3, [r7, #24]
}
 800a74a:	bf00      	nop
 800a74c:	bf00      	nop
 800a74e:	e7fd      	b.n	800a74c <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a756:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800a758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d90b      	bls.n	800a77a <pvPortMalloc+0x17e>
    __asm volatile
 800a762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a766:	f383 8811 	msr	BASEPRI, r3
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	617b      	str	r3, [r7, #20]
}
 800a774:	bf00      	nop
 800a776:	bf00      	nop
 800a778:	e7fd      	b.n	800a776 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a77a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	1ad2      	subs	r2, r2, r3
 800a782:	2308      	movs	r3, #8
 800a784:	005b      	lsls	r3, r3, #1
 800a786:	429a      	cmp	r2, r3
 800a788:	d924      	bls.n	800a7d4 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a78a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4413      	add	r3, r2
 800a790:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a794:	f003 0307 	and.w	r3, r3, #7
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00b      	beq.n	800a7b4 <pvPortMalloc+0x1b8>
    __asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	613b      	str	r3, [r7, #16]
}
 800a7ae:	bf00      	nop
 800a7b0:	bf00      	nop
 800a7b2:	e7fd      	b.n	800a7b0 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7b6:	685a      	ldr	r2, [r3, #4]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	1ad2      	subs	r2, r2, r3
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7be:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800a7c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7cc:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7d2:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7d4:	4b1c      	ldr	r3, [pc, #112]	@ (800a848 <pvPortMalloc+0x24c>)
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	4a1a      	ldr	r2, [pc, #104]	@ (800a848 <pvPortMalloc+0x24c>)
 800a7e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7e2:	4b19      	ldr	r3, [pc, #100]	@ (800a848 <pvPortMalloc+0x24c>)
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	4b1c      	ldr	r3, [pc, #112]	@ (800a858 <pvPortMalloc+0x25c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d203      	bcs.n	800a7f6 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7ee:	4b16      	ldr	r3, [pc, #88]	@ (800a848 <pvPortMalloc+0x24c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a19      	ldr	r2, [pc, #100]	@ (800a858 <pvPortMalloc+0x25c>)
 800a7f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800a7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a7fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a800:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800a802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a804:	2200      	movs	r2, #0
 800a806:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800a808:	4b14      	ldr	r3, [pc, #80]	@ (800a85c <pvPortMalloc+0x260>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	3301      	adds	r3, #1
 800a80e:	4a13      	ldr	r2, [pc, #76]	@ (800a85c <pvPortMalloc+0x260>)
 800a810:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800a812:	f7fe fbf7 	bl	8009004 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00b      	beq.n	800a838 <pvPortMalloc+0x23c>
    __asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	60fb      	str	r3, [r7, #12]
}
 800a832:	bf00      	nop
 800a834:	bf00      	nop
 800a836:	e7fd      	b.n	800a834 <pvPortMalloc+0x238>
    return pvReturn;
 800a838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3738      	adds	r7, #56	@ 0x38
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	20016614 	.word	0x20016614
 800a848:	20016618 	.word	0x20016618
 800a84c:	2001660c 	.word	0x2001660c
 800a850:	20003a0c 	.word	0x20003a0c
 800a854:	2001660b 	.word	0x2001660b
 800a858:	2001661c 	.word	0x2001661c
 800a85c:	20016620 	.word	0x20016620

0800a860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b088      	sub	sp, #32
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d064      	beq.n	800a93c <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800a872:	2308      	movs	r3, #8
 800a874:	425b      	negs	r3, r3
 800a876:	69fa      	ldr	r2, [r7, #28]
 800a878:	4413      	add	r3, r2
 800a87a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	4a30      	ldr	r2, [pc, #192]	@ (800a944 <vPortFree+0xe4>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d305      	bcc.n	800a894 <vPortFree+0x34>
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	4a2f      	ldr	r2, [pc, #188]	@ (800a948 <vPortFree+0xe8>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d801      	bhi.n	800a894 <vPortFree+0x34>
 800a890:	2301      	movs	r3, #1
 800a892:	e000      	b.n	800a896 <vPortFree+0x36>
 800a894:	2300      	movs	r3, #0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10b      	bne.n	800a8b2 <vPortFree+0x52>
    __asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	617b      	str	r3, [r7, #20]
}
 800a8ac:	bf00      	nop
 800a8ae:	bf00      	nop
 800a8b0:	e7fd      	b.n	800a8ae <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	db0b      	blt.n	800a8d2 <vPortFree+0x72>
    __asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	613b      	str	r3, [r7, #16]
}
 800a8cc:	bf00      	nop
 800a8ce:	bf00      	nop
 800a8d0:	e7fd      	b.n	800a8ce <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00b      	beq.n	800a8f2 <vPortFree+0x92>
    __asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	60fb      	str	r3, [r7, #12]
}
 800a8ec:	bf00      	nop
 800a8ee:	bf00      	nop
 800a8f0:	e7fd      	b.n	800a8ee <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	0fdb      	lsrs	r3, r3, #31
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d01c      	beq.n	800a93c <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d118      	bne.n	800a93c <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800a916:	f7fe fb67 	bl	8008fe8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	685a      	ldr	r2, [r3, #4]
 800a91e:	4b0b      	ldr	r3, [pc, #44]	@ (800a94c <vPortFree+0xec>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4413      	add	r3, r2
 800a924:	4a09      	ldr	r2, [pc, #36]	@ (800a94c <vPortFree+0xec>)
 800a926:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a928:	69b8      	ldr	r0, [r7, #24]
 800a92a:	f000 f86d 	bl	800aa08 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800a92e:	4b08      	ldr	r3, [pc, #32]	@ (800a950 <vPortFree+0xf0>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3301      	adds	r3, #1
 800a934:	4a06      	ldr	r2, [pc, #24]	@ (800a950 <vPortFree+0xf0>)
 800a936:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800a938:	f7fe fb64 	bl	8009004 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800a93c:	bf00      	nop
 800a93e:	3720      	adds	r7, #32
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	20003a0c 	.word	0x20003a0c
 800a948:	2001660b 	.word	0x2001660b
 800a94c:	20016618 	.word	0x20016618
 800a950:	20016624 	.word	0x20016624

0800a954 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a95a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800a95e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800a960:	4b24      	ldr	r3, [pc, #144]	@ (800a9f4 <prvHeapInit+0xa0>)
 800a962:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f003 0307 	and.w	r3, r3, #7
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00c      	beq.n	800a988 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3307      	adds	r3, #7
 800a972:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f023 0307 	bic.w	r3, r3, #7
 800a97a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	4a1c      	ldr	r2, [pc, #112]	@ (800a9f4 <prvHeapInit+0xa0>)
 800a984:	4413      	add	r3, r2
 800a986:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	4a1b      	ldr	r2, [pc, #108]	@ (800a9f8 <prvHeapInit+0xa4>)
 800a98c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800a98e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9f8 <prvHeapInit+0xa4>)
 800a990:	2200      	movs	r2, #0
 800a992:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	4413      	add	r3, r2
 800a99a:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 800a99c:	2208      	movs	r2, #8
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	1a9b      	subs	r3, r3, r2
 800a9a2:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f023 0307 	bic.w	r3, r3, #7
 800a9aa:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a13      	ldr	r2, [pc, #76]	@ (800a9fc <prvHeapInit+0xa8>)
 800a9b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800a9b2:	4b12      	ldr	r3, [pc, #72]	@ (800a9fc <prvHeapInit+0xa8>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800a9ba:	4b10      	ldr	r3, [pc, #64]	@ (800a9fc <prvHeapInit+0xa8>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	1ad2      	subs	r2, r2, r3
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800a9d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a9fc <prvHeapInit+0xa8>)
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	4a08      	ldr	r2, [pc, #32]	@ (800aa00 <prvHeapInit+0xac>)
 800a9de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	4a07      	ldr	r2, [pc, #28]	@ (800aa04 <prvHeapInit+0xb0>)
 800a9e6:	6013      	str	r3, [r2, #0]
}
 800a9e8:	bf00      	nop
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	20003a0c 	.word	0x20003a0c
 800a9f8:	2001660c 	.word	0x2001660c
 800a9fc:	20016614 	.word	0x20016614
 800aa00:	2001661c 	.word	0x2001661c
 800aa04:	20016618 	.word	0x20016618

0800aa08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800aa10:	4b36      	ldr	r3, [pc, #216]	@ (800aaec <prvInsertBlockIntoFreeList+0xe4>)
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	e002      	b.n	800aa1c <prvInsertBlockIntoFreeList+0x14>
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	617b      	str	r3, [r7, #20]
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d8f7      	bhi.n	800aa16 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	4a30      	ldr	r2, [pc, #192]	@ (800aaec <prvInsertBlockIntoFreeList+0xe4>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d018      	beq.n	800aa60 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	4a2f      	ldr	r2, [pc, #188]	@ (800aaf0 <prvInsertBlockIntoFreeList+0xe8>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d305      	bcc.n	800aa42 <prvInsertBlockIntoFreeList+0x3a>
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	4a2e      	ldr	r2, [pc, #184]	@ (800aaf4 <prvInsertBlockIntoFreeList+0xec>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d801      	bhi.n	800aa42 <prvInsertBlockIntoFreeList+0x3a>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e000      	b.n	800aa44 <prvInsertBlockIntoFreeList+0x3c>
 800aa42:	2300      	movs	r3, #0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10b      	bne.n	800aa60 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	60fb      	str	r3, [r7, #12]
}
 800aa5a:	bf00      	nop
 800aa5c:	bf00      	nop
 800aa5e:	e7fd      	b.n	800aa5c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d108      	bne.n	800aa84 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	441a      	add	r2, r3
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	441a      	add	r2, r3
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d118      	bne.n	800aaca <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	4b16      	ldr	r3, [pc, #88]	@ (800aaf8 <prvInsertBlockIntoFreeList+0xf0>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d00d      	beq.n	800aac0 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	441a      	add	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	601a      	str	r2, [r3, #0]
 800aabe:	e008      	b.n	800aad2 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800aac0:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf8 <prvInsertBlockIntoFreeList+0xf0>)
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	e003      	b.n	800aad2 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d002      	beq.n	800aae0 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800aae0:	bf00      	nop
 800aae2:	371c      	adds	r7, #28
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	2001660c 	.word	0x2001660c
 800aaf0:	20003a0c 	.word	0x20003a0c
 800aaf4:	2001660b 	.word	0x2001660b
 800aaf8:	20016614 	.word	0x20016614

0800aafc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af02      	add	r7, sp, #8
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
 800ab08:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800ab0a:	2205      	movs	r2, #5
 800ab0c:	492b      	ldr	r1, [pc, #172]	@ (800abbc <SYSVIEW_AddTask+0xc0>)
 800ab0e:	68b8      	ldr	r0, [r7, #8]
 800ab10:	f001 feca 	bl	800c8a8 <memcmp>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d04b      	beq.n	800abb2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800ab1a:	4b29      	ldr	r3, [pc, #164]	@ (800abc0 <SYSVIEW_AddTask+0xc4>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b07      	cmp	r3, #7
 800ab20:	d903      	bls.n	800ab2a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800ab22:	4828      	ldr	r0, [pc, #160]	@ (800abc4 <SYSVIEW_AddTask+0xc8>)
 800ab24:	f001 fc1a 	bl	800c35c <SEGGER_SYSVIEW_Warn>
    return;
 800ab28:	e044      	b.n	800abb4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800ab2a:	4b25      	ldr	r3, [pc, #148]	@ (800abc0 <SYSVIEW_AddTask+0xc4>)
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	4926      	ldr	r1, [pc, #152]	@ (800abc8 <SYSVIEW_AddTask+0xcc>)
 800ab30:	4613      	mov	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4413      	add	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	440b      	add	r3, r1
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800ab3e:	4b20      	ldr	r3, [pc, #128]	@ (800abc0 <SYSVIEW_AddTask+0xc4>)
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	4921      	ldr	r1, [pc, #132]	@ (800abc8 <SYSVIEW_AddTask+0xcc>)
 800ab44:	4613      	mov	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	440b      	add	r3, r1
 800ab4e:	3304      	adds	r3, #4
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800ab54:	4b1a      	ldr	r3, [pc, #104]	@ (800abc0 <SYSVIEW_AddTask+0xc4>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	491b      	ldr	r1, [pc, #108]	@ (800abc8 <SYSVIEW_AddTask+0xcc>)
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4413      	add	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	440b      	add	r3, r1
 800ab64:	3308      	adds	r3, #8
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800ab6a:	4b15      	ldr	r3, [pc, #84]	@ (800abc0 <SYSVIEW_AddTask+0xc4>)
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	4916      	ldr	r1, [pc, #88]	@ (800abc8 <SYSVIEW_AddTask+0xcc>)
 800ab70:	4613      	mov	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	440b      	add	r3, r1
 800ab7a:	330c      	adds	r3, #12
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800ab80:	4b0f      	ldr	r3, [pc, #60]	@ (800abc0 <SYSVIEW_AddTask+0xc4>)
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	4910      	ldr	r1, [pc, #64]	@ (800abc8 <SYSVIEW_AddTask+0xcc>)
 800ab86:	4613      	mov	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	440b      	add	r3, r1
 800ab90:	3310      	adds	r3, #16
 800ab92:	69ba      	ldr	r2, [r7, #24]
 800ab94:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800ab96:	4b0a      	ldr	r3, [pc, #40]	@ (800abc0 <SYSVIEW_AddTask+0xc4>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	4a08      	ldr	r2, [pc, #32]	@ (800abc0 <SYSVIEW_AddTask+0xc4>)
 800ab9e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	68b9      	ldr	r1, [r7, #8]
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f000 f80e 	bl	800abcc <SYSVIEW_SendTaskInfo>
 800abb0:	e000      	b.n	800abb4 <SYSVIEW_AddTask+0xb8>
    return;
 800abb2:	bf00      	nop

}
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	0800d720 	.word	0x0800d720
 800abc0:	200166c8 	.word	0x200166c8
 800abc4:	0800d728 	.word	0x0800d728
 800abc8:	20016628 	.word	0x20016628

0800abcc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08a      	sub	sp, #40	@ 0x28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800abda:	f107 0310 	add.w	r3, r7, #16
 800abde:	2218      	movs	r2, #24
 800abe0:	2100      	movs	r1, #0
 800abe2:	4618      	mov	r0, r3
 800abe4:	f001 fe70 	bl	800c8c8 <memset>
  TaskInfo.TaskID     = TaskID;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 800abf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfa:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800abfc:	f107 0310 	add.w	r3, r7, #16
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 ff3b 	bl	800ba7c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800ac06:	bf00      	nop
 800ac08:	3728      	adds	r7, #40	@ 0x28
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800ac16:	4b1e      	ldr	r3, [pc, #120]	@ (800ac90 <USART2_IRQHandler+0x80>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f003 0320 	and.w	r3, r3, #32
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d011      	beq.n	800ac4a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800ac26:	4b1b      	ldr	r3, [pc, #108]	@ (800ac94 <USART2_IRQHandler+0x84>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f003 030b 	and.w	r3, r3, #11
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d108      	bne.n	800ac4a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800ac38:	4b17      	ldr	r3, [pc, #92]	@ (800ac98 <USART2_IRQHandler+0x88>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d004      	beq.n	800ac4a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800ac40:	4b15      	ldr	r3, [pc, #84]	@ (800ac98 <USART2_IRQHandler+0x88>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	79fa      	ldrb	r2, [r7, #7]
 800ac46:	4610      	mov	r0, r2
 800ac48:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d01a      	beq.n	800ac8a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800ac54:	4b11      	ldr	r3, [pc, #68]	@ (800ac9c <USART2_IRQHandler+0x8c>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d015      	beq.n	800ac88 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800ac5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ac9c <USART2_IRQHandler+0x8c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	1dfa      	adds	r2, r7, #7
 800ac62:	4610      	mov	r0, r2
 800ac64:	4798      	blx	r3
 800ac66:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d106      	bne.n	800ac7c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800ac6e:	4b0c      	ldr	r3, [pc, #48]	@ (800aca0 <USART2_IRQHandler+0x90>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a0b      	ldr	r2, [pc, #44]	@ (800aca0 <USART2_IRQHandler+0x90>)
 800ac74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac78:	6013      	str	r3, [r2, #0]
 800ac7a:	e006      	b.n	800ac8a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800ac7c:	4b04      	ldr	r3, [pc, #16]	@ (800ac90 <USART2_IRQHandler+0x80>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800ac80:	79fa      	ldrb	r2, [r7, #7]
 800ac82:	4b04      	ldr	r3, [pc, #16]	@ (800ac94 <USART2_IRQHandler+0x84>)
 800ac84:	601a      	str	r2, [r3, #0]
 800ac86:	e000      	b.n	800ac8a <USART2_IRQHandler+0x7a>
      return;
 800ac88:	bf00      	nop
    }
  }
}
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	40004400 	.word	0x40004400
 800ac94:	40004404 	.word	0x40004404
 800ac98:	200166cc 	.word	0x200166cc
 800ac9c:	200166d0 	.word	0x200166d0
 800aca0:	4000440c 	.word	0x4000440c

0800aca4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800aca4:	b480      	push	{r7}
 800aca6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800aca8:	4b05      	ldr	r3, [pc, #20]	@ (800acc0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a04      	ldr	r2, [pc, #16]	@ (800acc0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800acae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acb2:	6013      	str	r3, [r2, #0]
}
 800acb4:	bf00      	nop
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	4000440c 	.word	0x4000440c

0800acc4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800acca:	4b26      	ldr	r3, [pc, #152]	@ (800ad64 <_DoInit+0xa0>)
 800accc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800acce:	22a8      	movs	r2, #168	@ 0xa8
 800acd0:	2100      	movs	r1, #0
 800acd2:	6838      	ldr	r0, [r7, #0]
 800acd4:	f001 fdf8 	bl	800c8c8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2203      	movs	r2, #3
 800acdc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	2203      	movs	r2, #3
 800ace2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	4a20      	ldr	r2, [pc, #128]	@ (800ad68 <_DoInit+0xa4>)
 800ace8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	4a1f      	ldr	r2, [pc, #124]	@ (800ad6c <_DoInit+0xa8>)
 800acee:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800acf6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	2200      	movs	r2, #0
 800acfc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	2200      	movs	r2, #0
 800ad02:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	2200      	movs	r2, #0
 800ad08:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	4a16      	ldr	r2, [pc, #88]	@ (800ad68 <_DoInit+0xa4>)
 800ad0e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	4a17      	ldr	r2, [pc, #92]	@ (800ad70 <_DoInit+0xac>)
 800ad14:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	2210      	movs	r2, #16
 800ad1a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	2200      	movs	r2, #0
 800ad26:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800ad2e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800ad32:	2300      	movs	r3, #0
 800ad34:	607b      	str	r3, [r7, #4]
 800ad36:	e00c      	b.n	800ad52 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f1c3 030f 	rsb	r3, r3, #15
 800ad3e:	4a0d      	ldr	r2, [pc, #52]	@ (800ad74 <_DoInit+0xb0>)
 800ad40:	5cd1      	ldrb	r1, [r2, r3]
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4413      	add	r3, r2
 800ad48:	460a      	mov	r2, r1
 800ad4a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	607b      	str	r3, [r7, #4]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b0f      	cmp	r3, #15
 800ad56:	d9ef      	bls.n	800ad38 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800ad58:	f3bf 8f5f 	dmb	sy
}
 800ad5c:	bf00      	nop
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	200166d4 	.word	0x200166d4
 800ad68:	0800d778 	.word	0x0800d778
 800ad6c:	2001677c 	.word	0x2001677c
 800ad70:	20016b7c 	.word	0x20016b7c
 800ad74:	0800dbdc 	.word	0x0800dbdc

0800ad78 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08a      	sub	sp, #40	@ 0x28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800ad84:	2300      	movs	r3, #0
 800ad86:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800ad94:	69ba      	ldr	r2, [r7, #24]
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d905      	bls.n	800ada8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800ad9c:	69ba      	ldr	r2, [r7, #24]
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	3b01      	subs	r3, #1
 800ada4:	627b      	str	r3, [r7, #36]	@ 0x24
 800ada6:	e007      	b.n	800adb8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	689a      	ldr	r2, [r3, #8]
 800adac:	69b9      	ldr	r1, [r7, #24]
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	1acb      	subs	r3, r1, r3
 800adb2:	4413      	add	r3, r2
 800adb4:	3b01      	subs	r3, #1
 800adb6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	689a      	ldr	r2, [r3, #8]
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adc2:	4293      	cmp	r3, r2
 800adc4:	bf28      	it	cs
 800adc6:	4613      	movcs	r3, r2
 800adc8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800adca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4293      	cmp	r3, r2
 800add0:	bf28      	it	cs
 800add2:	4613      	movcs	r3, r2
 800add4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	685a      	ldr	r2, [r3, #4]
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	4413      	add	r3, r2
 800adde:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800ade0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ade2:	68b9      	ldr	r1, [r7, #8]
 800ade4:	6978      	ldr	r0, [r7, #20]
 800ade6:	f001 fdd2 	bl	800c98e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800adea:	6a3a      	ldr	r2, [r7, #32]
 800adec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adee:	4413      	add	r3, r2
 800adf0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf6:	4413      	add	r3, r2
 800adf8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800ae02:	69fa      	ldr	r2, [r7, #28]
 800ae04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae06:	4413      	add	r3, r2
 800ae08:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	69fa      	ldr	r2, [r7, #28]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d101      	bne.n	800ae18 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800ae14:	2300      	movs	r3, #0
 800ae16:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800ae18:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	69fa      	ldr	r2, [r7, #28]
 800ae20:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1b2      	bne.n	800ad8e <_WriteBlocking+0x16>
  return NumBytesWritten;
 800ae28:	6a3b      	ldr	r3, [r7, #32]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3728      	adds	r7, #40	@ 0x28
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b088      	sub	sp, #32
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	60f8      	str	r0, [r7, #12]
 800ae3a:	60b9      	str	r1, [r7, #8]
 800ae3c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	689a      	ldr	r2, [r3, #8]
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800ae4e:	69ba      	ldr	r2, [r7, #24]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d911      	bls.n	800ae7a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	685a      	ldr	r2, [r3, #4]
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	68b9      	ldr	r1, [r7, #8]
 800ae64:	6938      	ldr	r0, [r7, #16]
 800ae66:	f001 fd92 	bl	800c98e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800ae6a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800ae6e:	69fa      	ldr	r2, [r7, #28]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	441a      	add	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800ae78:	e01f      	b.n	800aeba <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	685a      	ldr	r2, [r3, #4]
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	4413      	add	r3, r2
 800ae86:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	68b9      	ldr	r1, [r7, #8]
 800ae8c:	6938      	ldr	r0, [r7, #16]
 800ae8e:	f001 fd7e 	bl	800c98e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	4413      	add	r3, r2
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6938      	ldr	r0, [r7, #16]
 800aeac:	f001 fd6f 	bl	800c98e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800aeb0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	60da      	str	r2, [r3, #12]
}
 800aeba:	bf00      	nop
 800aebc:	3720      	adds	r7, #32
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800aec2:	b480      	push	{r7}
 800aec4:	b087      	sub	sp, #28
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800aed6:	693a      	ldr	r2, [r7, #16]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d808      	bhi.n	800aef0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	689a      	ldr	r2, [r3, #8]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	1ad2      	subs	r2, r2, r3
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	4413      	add	r3, r2
 800aeea:	3b01      	subs	r3, #1
 800aeec:	617b      	str	r3, [r7, #20]
 800aeee:	e004      	b.n	800aefa <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	3b01      	subs	r3, #1
 800aef8:	617b      	str	r3, [r7, #20]
  }
  return r;
 800aefa:	697b      	ldr	r3, [r7, #20]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	371c      	adds	r7, #28
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08c      	sub	sp, #48	@ 0x30
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800af14:	4b3e      	ldr	r3, [pc, #248]	@ (800b010 <SEGGER_RTT_ReadNoLock+0x108>)
 800af16:	623b      	str	r3, [r7, #32]
 800af18:	6a3b      	ldr	r3, [r7, #32]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	2b53      	cmp	r3, #83	@ 0x53
 800af20:	d001      	beq.n	800af26 <SEGGER_RTT_ReadNoLock+0x1e>
 800af22:	f7ff fecf 	bl	800acc4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	4613      	mov	r3, r2
 800af2a:	005b      	lsls	r3, r3, #1
 800af2c:	4413      	add	r3, r2
 800af2e:	00db      	lsls	r3, r3, #3
 800af30:	3360      	adds	r3, #96	@ 0x60
 800af32:	4a37      	ldr	r2, [pc, #220]	@ (800b010 <SEGGER_RTT_ReadNoLock+0x108>)
 800af34:	4413      	add	r3, r2
 800af36:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800af48:	2300      	movs	r3, #0
 800af4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800af4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	429a      	cmp	r2, r3
 800af52:	d92b      	bls.n	800afac <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	689a      	ldr	r2, [r3, #8]
 800af58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4293      	cmp	r3, r2
 800af64:	bf28      	it	cs
 800af66:	4613      	movcs	r3, r2
 800af68:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	685a      	ldr	r2, [r3, #4]
 800af6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af70:	4413      	add	r3, r2
 800af72:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800af74:	697a      	ldr	r2, [r7, #20]
 800af76:	6939      	ldr	r1, [r7, #16]
 800af78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af7a:	f001 fd08 	bl	800c98e <memcpy>
    NumBytesRead += NumBytesRem;
 800af7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	4413      	add	r3, r2
 800af84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800af86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	4413      	add	r3, r2
 800af8c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800af96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	4413      	add	r3, r2
 800af9c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d101      	bne.n	800afac <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800afa8:	2300      	movs	r3, #0
 800afaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800afac:	69ba      	ldr	r2, [r7, #24]
 800afae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800afb4:	697a      	ldr	r2, [r7, #20]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4293      	cmp	r3, r2
 800afba:	bf28      	it	cs
 800afbc:	4613      	movcs	r3, r2
 800afbe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d019      	beq.n	800affa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	685a      	ldr	r2, [r3, #4]
 800afca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afcc:	4413      	add	r3, r2
 800afce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	6939      	ldr	r1, [r7, #16]
 800afd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800afd6:	f001 fcda 	bl	800c98e <memcpy>
    NumBytesRead += NumBytesRem;
 800afda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	4413      	add	r3, r2
 800afe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800afe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	4413      	add	r3, r2
 800afe8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800aff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	4413      	add	r3, r2
 800aff8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800affa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800affc:	2b00      	cmp	r3, #0
 800affe:	d002      	beq.n	800b006 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b004:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800b006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3730      	adds	r7, #48	@ 0x30
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	200166d4 	.word	0x200166d4

0800b014 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800b014:	b580      	push	{r7, lr}
 800b016:	b088      	sub	sp, #32
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	1c5a      	adds	r2, r3, #1
 800b028:	4613      	mov	r3, r2
 800b02a:	005b      	lsls	r3, r3, #1
 800b02c:	4413      	add	r3, r2
 800b02e:	00db      	lsls	r3, r3, #3
 800b030:	4a1f      	ldr	r2, [pc, #124]	@ (800b0b0 <SEGGER_RTT_WriteNoLock+0x9c>)
 800b032:	4413      	add	r3, r2
 800b034:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	695b      	ldr	r3, [r3, #20]
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d029      	beq.n	800b092 <SEGGER_RTT_WriteNoLock+0x7e>
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d82e      	bhi.n	800b0a0 <SEGGER_RTT_WriteNoLock+0x8c>
 800b042:	2b00      	cmp	r3, #0
 800b044:	d002      	beq.n	800b04c <SEGGER_RTT_WriteNoLock+0x38>
 800b046:	2b01      	cmp	r3, #1
 800b048:	d013      	beq.n	800b072 <SEGGER_RTT_WriteNoLock+0x5e>
 800b04a:	e029      	b.n	800b0a0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800b04c:	6978      	ldr	r0, [r7, #20]
 800b04e:	f7ff ff38 	bl	800aec2 <_GetAvailWriteSpace>
 800b052:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d202      	bcs.n	800b062 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800b05c:	2300      	movs	r3, #0
 800b05e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800b060:	e021      	b.n	800b0a6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	69b9      	ldr	r1, [r7, #24]
 800b06a:	6978      	ldr	r0, [r7, #20]
 800b06c:	f7ff fee1 	bl	800ae32 <_WriteNoCheck>
    break;
 800b070:	e019      	b.n	800b0a6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800b072:	6978      	ldr	r0, [r7, #20]
 800b074:	f7ff ff25 	bl	800aec2 <_GetAvailWriteSpace>
 800b078:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	4293      	cmp	r3, r2
 800b080:	bf28      	it	cs
 800b082:	4613      	movcs	r3, r2
 800b084:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800b086:	69fa      	ldr	r2, [r7, #28]
 800b088:	69b9      	ldr	r1, [r7, #24]
 800b08a:	6978      	ldr	r0, [r7, #20]
 800b08c:	f7ff fed1 	bl	800ae32 <_WriteNoCheck>
    break;
 800b090:	e009      	b.n	800b0a6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	69b9      	ldr	r1, [r7, #24]
 800b096:	6978      	ldr	r0, [r7, #20]
 800b098:	f7ff fe6e 	bl	800ad78 <_WriteBlocking>
 800b09c:	61f8      	str	r0, [r7, #28]
    break;
 800b09e:	e002      	b.n	800b0a6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	61fb      	str	r3, [r7, #28]
    break;
 800b0a4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800b0a6:	69fb      	ldr	r3, [r7, #28]
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3720      	adds	r7, #32
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	200166d4 	.word	0x200166d4

0800b0b4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b088      	sub	sp, #32
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800b0c0:	4b0e      	ldr	r3, [pc, #56]	@ (800b0fc <SEGGER_RTT_Write+0x48>)
 800b0c2:	61fb      	str	r3, [r7, #28]
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	2b53      	cmp	r3, #83	@ 0x53
 800b0cc:	d001      	beq.n	800b0d2 <SEGGER_RTT_Write+0x1e>
 800b0ce:	f7ff fdf9 	bl	800acc4 <_DoInit>
  SEGGER_RTT_LOCK();
 800b0d2:	f3ef 8311 	mrs	r3, BASEPRI
 800b0d6:	f04f 0120 	mov.w	r1, #32
 800b0da:	f381 8811 	msr	BASEPRI, r1
 800b0de:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f7ff ff95 	bl	800b014 <SEGGER_RTT_WriteNoLock>
 800b0ea:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800b0f2:	697b      	ldr	r3, [r7, #20]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3720      	adds	r7, #32
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	200166d4 	.word	0x200166d4

0800b100 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800b100:	b480      	push	{r7}
 800b102:	b087      	sub	sp, #28
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	1c5a      	adds	r2, r3, #1
 800b114:	60fa      	str	r2, [r7, #12]
 800b116:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b80      	cmp	r3, #128	@ 0x80
 800b11c:	d90a      	bls.n	800b134 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800b11e:	2380      	movs	r3, #128	@ 0x80
 800b120:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800b122:	e007      	b.n	800b134 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	1c53      	adds	r3, r2, #1
 800b128:	60bb      	str	r3, [r7, #8]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	1c59      	adds	r1, r3, #1
 800b12e:	60f9      	str	r1, [r7, #12]
 800b130:	7812      	ldrb	r2, [r2, #0]
 800b132:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	1e5a      	subs	r2, r3, #1
 800b138:	607a      	str	r2, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <_EncodeStr+0x46>
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1ee      	bne.n	800b124 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	b2da      	uxtb	r2, r3
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800b152:	68fb      	ldr	r3, [r7, #12]
}
 800b154:	4618      	mov	r0, r3
 800b156:	371c      	adds	r7, #28
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3307      	adds	r3, #7
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b17e:	4b34      	ldr	r3, [pc, #208]	@ (800b250 <_HandleIncomingPacket+0xd8>)
 800b180:	7e1b      	ldrb	r3, [r3, #24]
 800b182:	4618      	mov	r0, r3
 800b184:	1cfb      	adds	r3, r7, #3
 800b186:	2201      	movs	r2, #1
 800b188:	4619      	mov	r1, r3
 800b18a:	f7ff febd 	bl	800af08 <SEGGER_RTT_ReadNoLock>
 800b18e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d057      	beq.n	800b246 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800b196:	78fb      	ldrb	r3, [r7, #3]
 800b198:	2b80      	cmp	r3, #128	@ 0x80
 800b19a:	d031      	beq.n	800b200 <_HandleIncomingPacket+0x88>
 800b19c:	2b80      	cmp	r3, #128	@ 0x80
 800b19e:	dc40      	bgt.n	800b222 <_HandleIncomingPacket+0xaa>
 800b1a0:	2b07      	cmp	r3, #7
 800b1a2:	dc15      	bgt.n	800b1d0 <_HandleIncomingPacket+0x58>
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	dd3c      	ble.n	800b222 <_HandleIncomingPacket+0xaa>
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	2b06      	cmp	r3, #6
 800b1ac:	d839      	bhi.n	800b222 <_HandleIncomingPacket+0xaa>
 800b1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b1b4 <_HandleIncomingPacket+0x3c>)
 800b1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b4:	0800b1d7 	.word	0x0800b1d7
 800b1b8:	0800b1dd 	.word	0x0800b1dd
 800b1bc:	0800b1e3 	.word	0x0800b1e3
 800b1c0:	0800b1e9 	.word	0x0800b1e9
 800b1c4:	0800b1ef 	.word	0x0800b1ef
 800b1c8:	0800b1f5 	.word	0x0800b1f5
 800b1cc:	0800b1fb 	.word	0x0800b1fb
 800b1d0:	2b7f      	cmp	r3, #127	@ 0x7f
 800b1d2:	d033      	beq.n	800b23c <_HandleIncomingPacket+0xc4>
 800b1d4:	e025      	b.n	800b222 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800b1d6:	f000 fad5 	bl	800b784 <SEGGER_SYSVIEW_Start>
      break;
 800b1da:	e034      	b.n	800b246 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800b1dc:	f000 fb8e 	bl	800b8fc <SEGGER_SYSVIEW_Stop>
      break;
 800b1e0:	e031      	b.n	800b246 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800b1e2:	f000 fd43 	bl	800bc6c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800b1e6:	e02e      	b.n	800b246 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800b1e8:	f000 fd2c 	bl	800bc44 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800b1ec:	e02b      	b.n	800b246 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800b1ee:	f000 fbab 	bl	800b948 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800b1f2:	e028      	b.n	800b246 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800b1f4:	f001 f874 	bl	800c2e0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800b1f8:	e025      	b.n	800b246 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800b1fa:	f001 f853 	bl	800c2a4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800b1fe:	e022      	b.n	800b246 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b200:	4b13      	ldr	r3, [pc, #76]	@ (800b250 <_HandleIncomingPacket+0xd8>)
 800b202:	7e1b      	ldrb	r3, [r3, #24]
 800b204:	4618      	mov	r0, r3
 800b206:	1cfb      	adds	r3, r7, #3
 800b208:	2201      	movs	r2, #1
 800b20a:	4619      	mov	r1, r3
 800b20c:	f7ff fe7c 	bl	800af08 <SEGGER_RTT_ReadNoLock>
 800b210:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d013      	beq.n	800b240 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800b218:	78fb      	ldrb	r3, [r7, #3]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 ffb8 	bl	800c190 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800b220:	e00e      	b.n	800b240 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800b222:	78fb      	ldrb	r3, [r7, #3]
 800b224:	b25b      	sxtb	r3, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	da0c      	bge.n	800b244 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b22a:	4b09      	ldr	r3, [pc, #36]	@ (800b250 <_HandleIncomingPacket+0xd8>)
 800b22c:	7e1b      	ldrb	r3, [r3, #24]
 800b22e:	4618      	mov	r0, r3
 800b230:	1cfb      	adds	r3, r7, #3
 800b232:	2201      	movs	r2, #1
 800b234:	4619      	mov	r1, r3
 800b236:	f7ff fe67 	bl	800af08 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800b23a:	e003      	b.n	800b244 <_HandleIncomingPacket+0xcc>
      break;
 800b23c:	bf00      	nop
 800b23e:	e002      	b.n	800b246 <_HandleIncomingPacket+0xce>
      break;
 800b240:	bf00      	nop
 800b242:	e000      	b.n	800b246 <_HandleIncomingPacket+0xce>
      break;
 800b244:	bf00      	nop
    }
  }
}
 800b246:	bf00      	nop
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	20016b8c 	.word	0x20016b8c

0800b254 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800b254:	b580      	push	{r7, lr}
 800b256:	b08c      	sub	sp, #48	@ 0x30
 800b258:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800b25a:	2301      	movs	r3, #1
 800b25c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800b25e:	1d3b      	adds	r3, r7, #4
 800b260:	3301      	adds	r3, #1
 800b262:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b268:	4b32      	ldr	r3, [pc, #200]	@ (800b334 <_TrySendOverflowPacket+0xe0>)
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b26e:	e00b      	b.n	800b288 <_TrySendOverflowPacket+0x34>
 800b270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b272:	b2da      	uxtb	r2, r3
 800b274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b276:	1c59      	adds	r1, r3, #1
 800b278:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b27a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b27e:	b2d2      	uxtb	r2, r2
 800b280:	701a      	strb	r2, [r3, #0]
 800b282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b284:	09db      	lsrs	r3, r3, #7
 800b286:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b28c:	d8f0      	bhi.n	800b270 <_TrySendOverflowPacket+0x1c>
 800b28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b290:	1c5a      	adds	r2, r3, #1
 800b292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b296:	b2d2      	uxtb	r2, r2
 800b298:	701a      	strb	r2, [r3, #0]
 800b29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b29e:	4b26      	ldr	r3, [pc, #152]	@ (800b338 <_TrySendOverflowPacket+0xe4>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b2a4:	4b23      	ldr	r3, [pc, #140]	@ (800b334 <_TrySendOverflowPacket+0xe0>)
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	69ba      	ldr	r2, [r7, #24]
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	623b      	str	r3, [r7, #32]
 800b2b6:	e00b      	b.n	800b2d0 <_TrySendOverflowPacket+0x7c>
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	b2da      	uxtb	r2, r3
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2be:	1c59      	adds	r1, r3, #1
 800b2c0:	6279      	str	r1, [r7, #36]	@ 0x24
 800b2c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b2c6:	b2d2      	uxtb	r2, r2
 800b2c8:	701a      	strb	r2, [r3, #0]
 800b2ca:	6a3b      	ldr	r3, [r7, #32]
 800b2cc:	09db      	lsrs	r3, r3, #7
 800b2ce:	623b      	str	r3, [r7, #32]
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	2b7f      	cmp	r3, #127	@ 0x7f
 800b2d4:	d8f0      	bhi.n	800b2b8 <_TrySendOverflowPacket+0x64>
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d8:	1c5a      	adds	r2, r3, #1
 800b2da:	627a      	str	r2, [r7, #36]	@ 0x24
 800b2dc:	6a3a      	ldr	r2, [r7, #32]
 800b2de:	b2d2      	uxtb	r2, r2
 800b2e0:	701a      	strb	r2, [r3, #0]
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800b2e6:	4b13      	ldr	r3, [pc, #76]	@ (800b334 <_TrySendOverflowPacket+0xe0>)
 800b2e8:	785b      	ldrb	r3, [r3, #1]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	1d3b      	adds	r3, r7, #4
 800b2ee:	69fa      	ldr	r2, [r7, #28]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	1d3b      	adds	r3, r7, #4
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	f7f4 ff72 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800b300:	f7ff fcd0 	bl	800aca4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d009      	beq.n	800b31e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b30a:	4a0a      	ldr	r2, [pc, #40]	@ (800b334 <_TrySendOverflowPacket+0xe0>)
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800b310:	4b08      	ldr	r3, [pc, #32]	@ (800b334 <_TrySendOverflowPacket+0xe0>)
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	3b01      	subs	r3, #1
 800b316:	b2da      	uxtb	r2, r3
 800b318:	4b06      	ldr	r3, [pc, #24]	@ (800b334 <_TrySendOverflowPacket+0xe0>)
 800b31a:	701a      	strb	r2, [r3, #0]
 800b31c:	e004      	b.n	800b328 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800b31e:	4b05      	ldr	r3, [pc, #20]	@ (800b334 <_TrySendOverflowPacket+0xe0>)
 800b320:	695b      	ldr	r3, [r3, #20]
 800b322:	3301      	adds	r3, #1
 800b324:	4a03      	ldr	r2, [pc, #12]	@ (800b334 <_TrySendOverflowPacket+0xe0>)
 800b326:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800b328:	693b      	ldr	r3, [r7, #16]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3730      	adds	r7, #48	@ 0x30
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	20016b8c 	.word	0x20016b8c
 800b338:	e0001004 	.word	0xe0001004

0800b33c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b08a      	sub	sp, #40	@ 0x28
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800b348:	4b96      	ldr	r3, [pc, #600]	@ (800b5a4 <_SendPacket+0x268>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d010      	beq.n	800b372 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800b350:	4b94      	ldr	r3, [pc, #592]	@ (800b5a4 <_SendPacket+0x268>)
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	f000 8130 	beq.w	800b5ba <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800b35a:	4b92      	ldr	r3, [pc, #584]	@ (800b5a4 <_SendPacket+0x268>)
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d109      	bne.n	800b376 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800b362:	f7ff ff77 	bl	800b254 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800b366:	4b8f      	ldr	r3, [pc, #572]	@ (800b5a4 <_SendPacket+0x268>)
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	f040 8127 	bne.w	800b5be <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 800b370:	e001      	b.n	800b376 <_SendPacket+0x3a>
    goto Send;
 800b372:	bf00      	nop
 800b374:	e000      	b.n	800b378 <_SendPacket+0x3c>
Send:
 800b376:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b1f      	cmp	r3, #31
 800b37c:	d809      	bhi.n	800b392 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800b37e:	4b89      	ldr	r3, [pc, #548]	@ (800b5a4 <_SendPacket+0x268>)
 800b380:	69da      	ldr	r2, [r3, #28]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	fa22 f303 	lsr.w	r3, r2, r3
 800b388:	f003 0301 	and.w	r3, r3, #1
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f040 8118 	bne.w	800b5c2 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b17      	cmp	r3, #23
 800b396:	d807      	bhi.n	800b3a8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3b01      	subs	r3, #1
 800b39c:	60fb      	str	r3, [r7, #12]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	b2da      	uxtb	r2, r3
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	701a      	strb	r2, [r3, #0]
 800b3a6:	e0c4      	b.n	800b532 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3b4:	d912      	bls.n	800b3dc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	09da      	lsrs	r2, r3, #7
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	b2d2      	uxtb	r2, r2
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	3a01      	subs	r2, #1
 800b3ce:	60fa      	str	r2, [r7, #12]
 800b3d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	701a      	strb	r2, [r3, #0]
 800b3da:	e006      	b.n	800b3ea <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	60fb      	str	r3, [r7, #12]
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	b2da      	uxtb	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2b7e      	cmp	r3, #126	@ 0x7e
 800b3ee:	d807      	bhi.n	800b400 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	60fb      	str	r3, [r7, #12]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	b2da      	uxtb	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	701a      	strb	r2, [r3, #0]
 800b3fe:	e098      	b.n	800b532 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b406:	d212      	bcs.n	800b42e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	09da      	lsrs	r2, r3, #7
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	3b01      	subs	r3, #1
 800b410:	60fb      	str	r3, [r7, #12]
 800b412:	b2d2      	uxtb	r2, r2
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	3a01      	subs	r2, #1
 800b420:	60fa      	str	r2, [r7, #12]
 800b422:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b426:	b2da      	uxtb	r2, r3
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	701a      	strb	r2, [r3, #0]
 800b42c:	e081      	b.n	800b532 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b434:	d21d      	bcs.n	800b472 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	0b9a      	lsrs	r2, r3, #14
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3b01      	subs	r3, #1
 800b43e:	60fb      	str	r3, [r7, #12]
 800b440:	b2d2      	uxtb	r2, r2
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	09db      	lsrs	r3, r3, #7
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	3a01      	subs	r2, #1
 800b450:	60fa      	str	r2, [r7, #12]
 800b452:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b456:	b2da      	uxtb	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	3a01      	subs	r2, #1
 800b464:	60fa      	str	r2, [r7, #12]
 800b466:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b46a:	b2da      	uxtb	r2, r3
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	701a      	strb	r2, [r3, #0]
 800b470:	e05f      	b.n	800b532 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b478:	d228      	bcs.n	800b4cc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	0d5a      	lsrs	r2, r3, #21
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3b01      	subs	r3, #1
 800b482:	60fb      	str	r3, [r7, #12]
 800b484:	b2d2      	uxtb	r2, r2
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	0b9b      	lsrs	r3, r3, #14
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	3a01      	subs	r2, #1
 800b494:	60fa      	str	r2, [r7, #12]
 800b496:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b49a:	b2da      	uxtb	r2, r3
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	09db      	lsrs	r3, r3, #7
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	3a01      	subs	r2, #1
 800b4aa:	60fa      	str	r2, [r7, #12]
 800b4ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	3a01      	subs	r2, #1
 800b4be:	60fa      	str	r2, [r7, #12]
 800b4c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	701a      	strb	r2, [r3, #0]
 800b4ca:	e032      	b.n	800b532 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	0f1a      	lsrs	r2, r3, #28
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	60fb      	str	r3, [r7, #12]
 800b4d6:	b2d2      	uxtb	r2, r2
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	0d5b      	lsrs	r3, r3, #21
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	3a01      	subs	r2, #1
 800b4e6:	60fa      	str	r2, [r7, #12]
 800b4e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b4ec:	b2da      	uxtb	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	0b9b      	lsrs	r3, r3, #14
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	3a01      	subs	r2, #1
 800b4fc:	60fa      	str	r2, [r7, #12]
 800b4fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b502:	b2da      	uxtb	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	09db      	lsrs	r3, r3, #7
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	3a01      	subs	r2, #1
 800b512:	60fa      	str	r2, [r7, #12]
 800b514:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b518:	b2da      	uxtb	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	b2db      	uxtb	r3, r3
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	3a01      	subs	r2, #1
 800b526:	60fa      	str	r2, [r7, #12]
 800b528:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b532:	4b1d      	ldr	r3, [pc, #116]	@ (800b5a8 <_SendPacket+0x26c>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b538:	4b1a      	ldr	r3, [pc, #104]	@ (800b5a4 <_SendPacket+0x268>)
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	69ba      	ldr	r2, [r7, #24]
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	627b      	str	r3, [r7, #36]	@ 0x24
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	623b      	str	r3, [r7, #32]
 800b54a:	e00b      	b.n	800b564 <_SendPacket+0x228>
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	b2da      	uxtb	r2, r3
 800b550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b552:	1c59      	adds	r1, r3, #1
 800b554:	6279      	str	r1, [r7, #36]	@ 0x24
 800b556:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b55a:	b2d2      	uxtb	r2, r2
 800b55c:	701a      	strb	r2, [r3, #0]
 800b55e:	6a3b      	ldr	r3, [r7, #32]
 800b560:	09db      	lsrs	r3, r3, #7
 800b562:	623b      	str	r3, [r7, #32]
 800b564:	6a3b      	ldr	r3, [r7, #32]
 800b566:	2b7f      	cmp	r3, #127	@ 0x7f
 800b568:	d8f0      	bhi.n	800b54c <_SendPacket+0x210>
 800b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56c:	1c5a      	adds	r2, r3, #1
 800b56e:	627a      	str	r2, [r7, #36]	@ 0x24
 800b570:	6a3a      	ldr	r2, [r7, #32]
 800b572:	b2d2      	uxtb	r2, r2
 800b574:	701a      	strb	r2, [r3, #0]
 800b576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b578:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800b57a:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a4 <_SendPacket+0x268>)
 800b57c:	785b      	ldrb	r3, [r3, #1]
 800b57e:	4618      	mov	r0, r3
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	461a      	mov	r2, r3
 800b588:	68f9      	ldr	r1, [r7, #12]
 800b58a:	f7f4 fe29 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b58e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800b590:	f7ff fb88 	bl	800aca4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d008      	beq.n	800b5ac <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b59a:	4a02      	ldr	r2, [pc, #8]	@ (800b5a4 <_SendPacket+0x268>)
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	60d3      	str	r3, [r2, #12]
 800b5a0:	e010      	b.n	800b5c4 <_SendPacket+0x288>
 800b5a2:	bf00      	nop
 800b5a4:	20016b8c 	.word	0x20016b8c
 800b5a8:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800b5ac:	4b19      	ldr	r3, [pc, #100]	@ (800b614 <_SendPacket+0x2d8>)
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	4b17      	ldr	r3, [pc, #92]	@ (800b614 <_SendPacket+0x2d8>)
 800b5b6:	701a      	strb	r2, [r3, #0]
 800b5b8:	e004      	b.n	800b5c4 <_SendPacket+0x288>
    goto SendDone;
 800b5ba:	bf00      	nop
 800b5bc:	e002      	b.n	800b5c4 <_SendPacket+0x288>
      goto SendDone;
 800b5be:	bf00      	nop
 800b5c0:	e000      	b.n	800b5c4 <_SendPacket+0x288>
      goto SendDone;
 800b5c2:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800b5c4:	4b13      	ldr	r3, [pc, #76]	@ (800b614 <_SendPacket+0x2d8>)
 800b5c6:	7e1b      	ldrb	r3, [r3, #24]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	4a13      	ldr	r2, [pc, #76]	@ (800b618 <_SendPacket+0x2dc>)
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	005b      	lsls	r3, r3, #1
 800b5d0:	440b      	add	r3, r1
 800b5d2:	00db      	lsls	r3, r3, #3
 800b5d4:	4413      	add	r3, r2
 800b5d6:	336c      	adds	r3, #108	@ 0x6c
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	4b0e      	ldr	r3, [pc, #56]	@ (800b614 <_SendPacket+0x2d8>)
 800b5dc:	7e1b      	ldrb	r3, [r3, #24]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	490d      	ldr	r1, [pc, #52]	@ (800b618 <_SendPacket+0x2dc>)
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	4403      	add	r3, r0
 800b5e8:	00db      	lsls	r3, r3, #3
 800b5ea:	440b      	add	r3, r1
 800b5ec:	3370      	adds	r3, #112	@ 0x70
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d00b      	beq.n	800b60c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800b5f4:	4b07      	ldr	r3, [pc, #28]	@ (800b614 <_SendPacket+0x2d8>)
 800b5f6:	789b      	ldrb	r3, [r3, #2]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d107      	bne.n	800b60c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800b5fc:	4b05      	ldr	r3, [pc, #20]	@ (800b614 <_SendPacket+0x2d8>)
 800b5fe:	2201      	movs	r2, #1
 800b600:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800b602:	f7ff fdb9 	bl	800b178 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800b606:	4b03      	ldr	r3, [pc, #12]	@ (800b614 <_SendPacket+0x2d8>)
 800b608:	2200      	movs	r2, #0
 800b60a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800b60c:	bf00      	nop
 800b60e:	3728      	adds	r7, #40	@ 0x28
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	20016b8c 	.word	0x20016b8c
 800b618:	200166d4 	.word	0x200166d4

0800b61c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b624:	f3ef 8311 	mrs	r3, BASEPRI
 800b628:	f04f 0120 	mov.w	r1, #32
 800b62c:	f381 8811 	msr	BASEPRI, r1
 800b630:	60fb      	str	r3, [r7, #12]
 800b632:	4808      	ldr	r0, [pc, #32]	@ (800b654 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800b634:	f7ff fd94 	bl	800b160 <_PreparePacket>
 800b638:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	68b9      	ldr	r1, [r7, #8]
 800b63e:	68b8      	ldr	r0, [r7, #8]
 800b640:	f7ff fe7c 	bl	800b33c <_SendPacket>
  RECORD_END();
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f383 8811 	msr	BASEPRI, r3
}
 800b64a:	bf00      	nop
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20016bbc 	.word	0x20016bbc

0800b658 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800b658:	b580      	push	{r7, lr}
 800b65a:	b088      	sub	sp, #32
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b662:	f3ef 8311 	mrs	r3, BASEPRI
 800b666:	f04f 0120 	mov.w	r1, #32
 800b66a:	f381 8811 	msr	BASEPRI, r1
 800b66e:	617b      	str	r3, [r7, #20]
 800b670:	4816      	ldr	r0, [pc, #88]	@ (800b6cc <SEGGER_SYSVIEW_RecordU32+0x74>)
 800b672:	f7ff fd75 	bl	800b160 <_PreparePacket>
 800b676:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	61fb      	str	r3, [r7, #28]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	61bb      	str	r3, [r7, #24]
 800b684:	e00b      	b.n	800b69e <SEGGER_SYSVIEW_RecordU32+0x46>
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	b2da      	uxtb	r2, r3
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	1c59      	adds	r1, r3, #1
 800b68e:	61f9      	str	r1, [r7, #28]
 800b690:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b694:	b2d2      	uxtb	r2, r2
 800b696:	701a      	strb	r2, [r3, #0]
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	09db      	lsrs	r3, r3, #7
 800b69c:	61bb      	str	r3, [r7, #24]
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	2b7f      	cmp	r3, #127	@ 0x7f
 800b6a2:	d8f0      	bhi.n	800b686 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	61fa      	str	r2, [r7, #28]
 800b6aa:	69ba      	ldr	r2, [r7, #24]
 800b6ac:	b2d2      	uxtb	r2, r2
 800b6ae:	701a      	strb	r2, [r3, #0]
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	68f9      	ldr	r1, [r7, #12]
 800b6b8:	6938      	ldr	r0, [r7, #16]
 800b6ba:	f7ff fe3f 	bl	800b33c <_SendPacket>
  RECORD_END();
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f383 8811 	msr	BASEPRI, r3
}
 800b6c4:	bf00      	nop
 800b6c6:	3720      	adds	r7, #32
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	20016bbc 	.word	0x20016bbc

0800b6d0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08c      	sub	sp, #48	@ 0x30
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800b6dc:	f3ef 8311 	mrs	r3, BASEPRI
 800b6e0:	f04f 0120 	mov.w	r1, #32
 800b6e4:	f381 8811 	msr	BASEPRI, r1
 800b6e8:	61fb      	str	r3, [r7, #28]
 800b6ea:	4825      	ldr	r0, [pc, #148]	@ (800b780 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800b6ec:	f7ff fd38 	bl	800b160 <_PreparePacket>
 800b6f0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6fe:	e00b      	b.n	800b718 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800b700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b702:	b2da      	uxtb	r2, r3
 800b704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b706:	1c59      	adds	r1, r3, #1
 800b708:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b70a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b70e:	b2d2      	uxtb	r2, r2
 800b710:	701a      	strb	r2, [r3, #0]
 800b712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b714:	09db      	lsrs	r3, r3, #7
 800b716:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b71a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b71c:	d8f0      	bhi.n	800b700 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800b71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b720:	1c5a      	adds	r2, r3, #1
 800b722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b726:	b2d2      	uxtb	r2, r2
 800b728:	701a      	strb	r2, [r3, #0]
 800b72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b72c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	627b      	str	r3, [r7, #36]	@ 0x24
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	623b      	str	r3, [r7, #32]
 800b736:	e00b      	b.n	800b750 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800b738:	6a3b      	ldr	r3, [r7, #32]
 800b73a:	b2da      	uxtb	r2, r3
 800b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73e:	1c59      	adds	r1, r3, #1
 800b740:	6279      	str	r1, [r7, #36]	@ 0x24
 800b742:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b746:	b2d2      	uxtb	r2, r2
 800b748:	701a      	strb	r2, [r3, #0]
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	09db      	lsrs	r3, r3, #7
 800b74e:	623b      	str	r3, [r7, #32]
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	2b7f      	cmp	r3, #127	@ 0x7f
 800b754:	d8f0      	bhi.n	800b738 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800b756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b758:	1c5a      	adds	r2, r3, #1
 800b75a:	627a      	str	r2, [r7, #36]	@ 0x24
 800b75c:	6a3a      	ldr	r2, [r7, #32]
 800b75e:	b2d2      	uxtb	r2, r2
 800b760:	701a      	strb	r2, [r3, #0]
 800b762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b764:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	6979      	ldr	r1, [r7, #20]
 800b76a:	69b8      	ldr	r0, [r7, #24]
 800b76c:	f7ff fde6 	bl	800b33c <_SendPacket>
  RECORD_END();
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	f383 8811 	msr	BASEPRI, r3
}
 800b776:	bf00      	nop
 800b778:	3730      	adds	r7, #48	@ 0x30
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	20016bbc 	.word	0x20016bbc

0800b784 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800b784:	b580      	push	{r7, lr}
 800b786:	b08c      	sub	sp, #48	@ 0x30
 800b788:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800b78a:	4b59      	ldr	r3, [pc, #356]	@ (800b8f0 <SEGGER_SYSVIEW_Start+0x16c>)
 800b78c:	2201      	movs	r2, #1
 800b78e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800b790:	f3ef 8311 	mrs	r3, BASEPRI
 800b794:	f04f 0120 	mov.w	r1, #32
 800b798:	f381 8811 	msr	BASEPRI, r1
 800b79c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800b79e:	4b54      	ldr	r3, [pc, #336]	@ (800b8f0 <SEGGER_SYSVIEW_Start+0x16c>)
 800b7a0:	785b      	ldrb	r3, [r3, #1]
 800b7a2:	220a      	movs	r2, #10
 800b7a4:	4953      	ldr	r1, [pc, #332]	@ (800b8f4 <SEGGER_SYSVIEW_Start+0x170>)
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7f4 fd1a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800b7b2:	f7ff fa77 	bl	800aca4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800b7b6:	200a      	movs	r0, #10
 800b7b8:	f7ff ff30 	bl	800b61c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b7bc:	f3ef 8311 	mrs	r3, BASEPRI
 800b7c0:	f04f 0120 	mov.w	r1, #32
 800b7c4:	f381 8811 	msr	BASEPRI, r1
 800b7c8:	60bb      	str	r3, [r7, #8]
 800b7ca:	484b      	ldr	r0, [pc, #300]	@ (800b8f8 <SEGGER_SYSVIEW_Start+0x174>)
 800b7cc:	f7ff fcc8 	bl	800b160 <_PreparePacket>
 800b7d0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b7da:	4b45      	ldr	r3, [pc, #276]	@ (800b8f0 <SEGGER_SYSVIEW_Start+0x16c>)
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7e0:	e00b      	b.n	800b7fa <SEGGER_SYSVIEW_Start+0x76>
 800b7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e8:	1c59      	adds	r1, r3, #1
 800b7ea:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b7ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b7f0:	b2d2      	uxtb	r2, r2
 800b7f2:	701a      	strb	r2, [r3, #0]
 800b7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f6:	09db      	lsrs	r3, r3, #7
 800b7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7fc:	2b7f      	cmp	r3, #127	@ 0x7f
 800b7fe:	d8f0      	bhi.n	800b7e2 <SEGGER_SYSVIEW_Start+0x5e>
 800b800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b802:	1c5a      	adds	r2, r3, #1
 800b804:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b808:	b2d2      	uxtb	r2, r2
 800b80a:	701a      	strb	r2, [r3, #0]
 800b80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b80e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	627b      	str	r3, [r7, #36]	@ 0x24
 800b814:	4b36      	ldr	r3, [pc, #216]	@ (800b8f0 <SEGGER_SYSVIEW_Start+0x16c>)
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	623b      	str	r3, [r7, #32]
 800b81a:	e00b      	b.n	800b834 <SEGGER_SYSVIEW_Start+0xb0>
 800b81c:	6a3b      	ldr	r3, [r7, #32]
 800b81e:	b2da      	uxtb	r2, r3
 800b820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b822:	1c59      	adds	r1, r3, #1
 800b824:	6279      	str	r1, [r7, #36]	@ 0x24
 800b826:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b82a:	b2d2      	uxtb	r2, r2
 800b82c:	701a      	strb	r2, [r3, #0]
 800b82e:	6a3b      	ldr	r3, [r7, #32]
 800b830:	09db      	lsrs	r3, r3, #7
 800b832:	623b      	str	r3, [r7, #32]
 800b834:	6a3b      	ldr	r3, [r7, #32]
 800b836:	2b7f      	cmp	r3, #127	@ 0x7f
 800b838:	d8f0      	bhi.n	800b81c <SEGGER_SYSVIEW_Start+0x98>
 800b83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	627a      	str	r2, [r7, #36]	@ 0x24
 800b840:	6a3a      	ldr	r2, [r7, #32]
 800b842:	b2d2      	uxtb	r2, r2
 800b844:	701a      	strb	r2, [r3, #0]
 800b846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b848:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	61fb      	str	r3, [r7, #28]
 800b84e:	4b28      	ldr	r3, [pc, #160]	@ (800b8f0 <SEGGER_SYSVIEW_Start+0x16c>)
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	61bb      	str	r3, [r7, #24]
 800b854:	e00b      	b.n	800b86e <SEGGER_SYSVIEW_Start+0xea>
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	b2da      	uxtb	r2, r3
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	1c59      	adds	r1, r3, #1
 800b85e:	61f9      	str	r1, [r7, #28]
 800b860:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b864:	b2d2      	uxtb	r2, r2
 800b866:	701a      	strb	r2, [r3, #0]
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	09db      	lsrs	r3, r3, #7
 800b86c:	61bb      	str	r3, [r7, #24]
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	2b7f      	cmp	r3, #127	@ 0x7f
 800b872:	d8f0      	bhi.n	800b856 <SEGGER_SYSVIEW_Start+0xd2>
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	1c5a      	adds	r2, r3, #1
 800b878:	61fa      	str	r2, [r7, #28]
 800b87a:	69ba      	ldr	r2, [r7, #24]
 800b87c:	b2d2      	uxtb	r2, r2
 800b87e:	701a      	strb	r2, [r3, #0]
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	617b      	str	r3, [r7, #20]
 800b888:	2300      	movs	r3, #0
 800b88a:	613b      	str	r3, [r7, #16]
 800b88c:	e00b      	b.n	800b8a6 <SEGGER_SYSVIEW_Start+0x122>
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	b2da      	uxtb	r2, r3
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	1c59      	adds	r1, r3, #1
 800b896:	6179      	str	r1, [r7, #20]
 800b898:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b89c:	b2d2      	uxtb	r2, r2
 800b89e:	701a      	strb	r2, [r3, #0]
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	09db      	lsrs	r3, r3, #7
 800b8a4:	613b      	str	r3, [r7, #16]
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	2b7f      	cmp	r3, #127	@ 0x7f
 800b8aa:	d8f0      	bhi.n	800b88e <SEGGER_SYSVIEW_Start+0x10a>
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	617a      	str	r2, [r7, #20]
 800b8b2:	693a      	ldr	r2, [r7, #16]
 800b8b4:	b2d2      	uxtb	r2, r2
 800b8b6:	701a      	strb	r2, [r3, #0]
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b8bc:	2218      	movs	r2, #24
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7ff fd3b 	bl	800b33c <_SendPacket>
      RECORD_END();
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b8cc:	4b08      	ldr	r3, [pc, #32]	@ (800b8f0 <SEGGER_SYSVIEW_Start+0x16c>)
 800b8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d002      	beq.n	800b8da <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800b8d4:	4b06      	ldr	r3, [pc, #24]	@ (800b8f0 <SEGGER_SYSVIEW_Start+0x16c>)
 800b8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8d8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800b8da:	f000 f9c7 	bl	800bc6c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800b8de:	f000 f9b1 	bl	800bc44 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800b8e2:	f000 fcfd 	bl	800c2e0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800b8e6:	bf00      	nop
 800b8e8:	3730      	adds	r7, #48	@ 0x30
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20016b8c 	.word	0x20016b8c
 800b8f4:	0800dbf0 	.word	0x0800dbf0
 800b8f8:	20016bbc 	.word	0x20016bbc

0800b8fc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b902:	f3ef 8311 	mrs	r3, BASEPRI
 800b906:	f04f 0120 	mov.w	r1, #32
 800b90a:	f381 8811 	msr	BASEPRI, r1
 800b90e:	607b      	str	r3, [r7, #4]
 800b910:	480b      	ldr	r0, [pc, #44]	@ (800b940 <SEGGER_SYSVIEW_Stop+0x44>)
 800b912:	f7ff fc25 	bl	800b160 <_PreparePacket>
 800b916:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800b918:	4b0a      	ldr	r3, [pc, #40]	@ (800b944 <SEGGER_SYSVIEW_Stop+0x48>)
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d007      	beq.n	800b930 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800b920:	220b      	movs	r2, #11
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	6838      	ldr	r0, [r7, #0]
 800b926:	f7ff fd09 	bl	800b33c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800b92a:	4b06      	ldr	r3, [pc, #24]	@ (800b944 <SEGGER_SYSVIEW_Stop+0x48>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f383 8811 	msr	BASEPRI, r3
}
 800b936:	bf00      	nop
 800b938:	3708      	adds	r7, #8
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	20016bbc 	.word	0x20016bbc
 800b944:	20016b8c 	.word	0x20016b8c

0800b948 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800b948:	b580      	push	{r7, lr}
 800b94a:	b08c      	sub	sp, #48	@ 0x30
 800b94c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b94e:	f3ef 8311 	mrs	r3, BASEPRI
 800b952:	f04f 0120 	mov.w	r1, #32
 800b956:	f381 8811 	msr	BASEPRI, r1
 800b95a:	60fb      	str	r3, [r7, #12]
 800b95c:	4845      	ldr	r0, [pc, #276]	@ (800ba74 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800b95e:	f7ff fbff 	bl	800b160 <_PreparePacket>
 800b962:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b96c:	4b42      	ldr	r3, [pc, #264]	@ (800ba78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b972:	e00b      	b.n	800b98c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800b974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b976:	b2da      	uxtb	r2, r3
 800b978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b97a:	1c59      	adds	r1, r3, #1
 800b97c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b97e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b982:	b2d2      	uxtb	r2, r2
 800b984:	701a      	strb	r2, [r3, #0]
 800b986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b988:	09db      	lsrs	r3, r3, #7
 800b98a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b98e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b990:	d8f0      	bhi.n	800b974 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800b992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b994:	1c5a      	adds	r2, r3, #1
 800b996:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b99a:	b2d2      	uxtb	r2, r2
 800b99c:	701a      	strb	r2, [r3, #0]
 800b99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9a6:	4b34      	ldr	r3, [pc, #208]	@ (800ba78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	623b      	str	r3, [r7, #32]
 800b9ac:	e00b      	b.n	800b9c6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800b9ae:	6a3b      	ldr	r3, [r7, #32]
 800b9b0:	b2da      	uxtb	r2, r3
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b4:	1c59      	adds	r1, r3, #1
 800b9b6:	6279      	str	r1, [r7, #36]	@ 0x24
 800b9b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b9bc:	b2d2      	uxtb	r2, r2
 800b9be:	701a      	strb	r2, [r3, #0]
 800b9c0:	6a3b      	ldr	r3, [r7, #32]
 800b9c2:	09db      	lsrs	r3, r3, #7
 800b9c4:	623b      	str	r3, [r7, #32]
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800b9ca:	d8f0      	bhi.n	800b9ae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ce:	1c5a      	adds	r2, r3, #1
 800b9d0:	627a      	str	r2, [r7, #36]	@ 0x24
 800b9d2:	6a3a      	ldr	r2, [r7, #32]
 800b9d4:	b2d2      	uxtb	r2, r2
 800b9d6:	701a      	strb	r2, [r3, #0]
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	61fb      	str	r3, [r7, #28]
 800b9e0:	4b25      	ldr	r3, [pc, #148]	@ (800ba78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b9e2:	691b      	ldr	r3, [r3, #16]
 800b9e4:	61bb      	str	r3, [r7, #24]
 800b9e6:	e00b      	b.n	800ba00 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	b2da      	uxtb	r2, r3
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	1c59      	adds	r1, r3, #1
 800b9f0:	61f9      	str	r1, [r7, #28]
 800b9f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b9f6:	b2d2      	uxtb	r2, r2
 800b9f8:	701a      	strb	r2, [r3, #0]
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	09db      	lsrs	r3, r3, #7
 800b9fe:	61bb      	str	r3, [r7, #24]
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba04:	d8f0      	bhi.n	800b9e8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	1c5a      	adds	r2, r3, #1
 800ba0a:	61fa      	str	r2, [r7, #28]
 800ba0c:	69ba      	ldr	r2, [r7, #24]
 800ba0e:	b2d2      	uxtb	r2, r2
 800ba10:	701a      	strb	r2, [r3, #0]
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	617b      	str	r3, [r7, #20]
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	613b      	str	r3, [r7, #16]
 800ba1e:	e00b      	b.n	800ba38 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	1c59      	adds	r1, r3, #1
 800ba28:	6179      	str	r1, [r7, #20]
 800ba2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ba2e:	b2d2      	uxtb	r2, r2
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	09db      	lsrs	r3, r3, #7
 800ba36:	613b      	str	r3, [r7, #16]
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba3c:	d8f0      	bhi.n	800ba20 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	1c5a      	adds	r2, r3, #1
 800ba42:	617a      	str	r2, [r7, #20]
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	b2d2      	uxtb	r2, r2
 800ba48:	701a      	strb	r2, [r3, #0]
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800ba4e:	2218      	movs	r2, #24
 800ba50:	6879      	ldr	r1, [r7, #4]
 800ba52:	68b8      	ldr	r0, [r7, #8]
 800ba54:	f7ff fc72 	bl	800b33c <_SendPacket>
  RECORD_END();
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800ba5e:	4b06      	ldr	r3, [pc, #24]	@ (800ba78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ba60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d002      	beq.n	800ba6c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800ba66:	4b04      	ldr	r3, [pc, #16]	@ (800ba78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ba68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba6a:	4798      	blx	r3
  }
}
 800ba6c:	bf00      	nop
 800ba6e:	3730      	adds	r7, #48	@ 0x30
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	20016bbc 	.word	0x20016bbc
 800ba78:	20016b8c 	.word	0x20016b8c

0800ba7c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b092      	sub	sp, #72	@ 0x48
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800ba84:	f3ef 8311 	mrs	r3, BASEPRI
 800ba88:	f04f 0120 	mov.w	r1, #32
 800ba8c:	f381 8811 	msr	BASEPRI, r1
 800ba90:	617b      	str	r3, [r7, #20]
 800ba92:	486a      	ldr	r0, [pc, #424]	@ (800bc3c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800ba94:	f7ff fb64 	bl	800b160 <_PreparePacket>
 800ba98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	647b      	str	r3, [r7, #68]	@ 0x44
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	4b66      	ldr	r3, [pc, #408]	@ (800bc40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	1ad3      	subs	r3, r2, r3
 800baac:	643b      	str	r3, [r7, #64]	@ 0x40
 800baae:	e00b      	b.n	800bac8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800bab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bab6:	1c59      	adds	r1, r3, #1
 800bab8:	6479      	str	r1, [r7, #68]	@ 0x44
 800baba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800babe:	b2d2      	uxtb	r2, r2
 800bac0:	701a      	strb	r2, [r3, #0]
 800bac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bac4:	09db      	lsrs	r3, r3, #7
 800bac6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baca:	2b7f      	cmp	r3, #127	@ 0x7f
 800bacc:	d8f0      	bhi.n	800bab0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800bace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	647a      	str	r2, [r7, #68]	@ 0x44
 800bad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bad6:	b2d2      	uxtb	r2, r2
 800bad8:	701a      	strb	r2, [r3, #0]
 800bada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800badc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bae8:	e00b      	b.n	800bb02 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800baea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baec:	b2da      	uxtb	r2, r3
 800baee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baf0:	1c59      	adds	r1, r3, #1
 800baf2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800baf4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800baf8:	b2d2      	uxtb	r2, r2
 800bafa:	701a      	strb	r2, [r3, #0]
 800bafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafe:	09db      	lsrs	r3, r3, #7
 800bb00:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb04:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb06:	d8f0      	bhi.n	800baea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800bb08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb0a:	1c5a      	adds	r2, r3, #1
 800bb0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800bb0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb10:	b2d2      	uxtb	r2, r2
 800bb12:	701a      	strb	r2, [r3, #0]
 800bb14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb16:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	2220      	movs	r2, #32
 800bb1e:	4619      	mov	r1, r3
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f7ff faed 	bl	800b100 <_EncodeStr>
 800bb26:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800bb28:	2209      	movs	r2, #9
 800bb2a:	68f9      	ldr	r1, [r7, #12]
 800bb2c:	6938      	ldr	r0, [r7, #16]
 800bb2e:	f7ff fc05 	bl	800b33c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	4b40      	ldr	r3, [pc, #256]	@ (800bc40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb46:	e00b      	b.n	800bb60 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800bb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb4e:	1c59      	adds	r1, r3, #1
 800bb50:	6379      	str	r1, [r7, #52]	@ 0x34
 800bb52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bb56:	b2d2      	uxtb	r2, r2
 800bb58:	701a      	strb	r2, [r3, #0]
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5c:	09db      	lsrs	r3, r3, #7
 800bb5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb62:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb64:	d8f0      	bhi.n	800bb48 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800bb66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	637a      	str	r2, [r7, #52]	@ 0x34
 800bb6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb6e:	b2d2      	uxtb	r2, r2
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb80:	e00b      	b.n	800bb9a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800bb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb84:	b2da      	uxtb	r2, r3
 800bb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb88:	1c59      	adds	r1, r3, #1
 800bb8a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800bb8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bb90:	b2d2      	uxtb	r2, r2
 800bb92:	701a      	strb	r2, [r3, #0]
 800bb94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb96:	09db      	lsrs	r3, r3, #7
 800bb98:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9c:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb9e:	d8f0      	bhi.n	800bb82 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800bba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba2:	1c5a      	adds	r2, r3, #1
 800bba4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bba8:	b2d2      	uxtb	r2, r2
 800bbaa:	701a      	strb	r2, [r3, #0]
 800bbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	623b      	str	r3, [r7, #32]
 800bbba:	e00b      	b.n	800bbd4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800bbbc:	6a3b      	ldr	r3, [r7, #32]
 800bbbe:	b2da      	uxtb	r2, r3
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc2:	1c59      	adds	r1, r3, #1
 800bbc4:	6279      	str	r1, [r7, #36]	@ 0x24
 800bbc6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bbca:	b2d2      	uxtb	r2, r2
 800bbcc:	701a      	strb	r2, [r3, #0]
 800bbce:	6a3b      	ldr	r3, [r7, #32]
 800bbd0:	09db      	lsrs	r3, r3, #7
 800bbd2:	623b      	str	r3, [r7, #32]
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbd8:	d8f0      	bhi.n	800bbbc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800bbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbdc:	1c5a      	adds	r2, r3, #1
 800bbde:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbe0:	6a3a      	ldr	r2, [r7, #32]
 800bbe2:	b2d2      	uxtb	r2, r2
 800bbe4:	701a      	strb	r2, [r3, #0]
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	61fb      	str	r3, [r7, #28]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	695b      	ldr	r3, [r3, #20]
 800bbf2:	61bb      	str	r3, [r7, #24]
 800bbf4:	e00b      	b.n	800bc0e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	1c59      	adds	r1, r3, #1
 800bbfe:	61f9      	str	r1, [r7, #28]
 800bc00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bc04:	b2d2      	uxtb	r2, r2
 800bc06:	701a      	strb	r2, [r3, #0]
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	09db      	lsrs	r3, r3, #7
 800bc0c:	61bb      	str	r3, [r7, #24]
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc12:	d8f0      	bhi.n	800bbf6 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	1c5a      	adds	r2, r3, #1
 800bc18:	61fa      	str	r2, [r7, #28]
 800bc1a:	69ba      	ldr	r2, [r7, #24]
 800bc1c:	b2d2      	uxtb	r2, r2
 800bc1e:	701a      	strb	r2, [r3, #0]
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800bc24:	2215      	movs	r2, #21
 800bc26:	68f9      	ldr	r1, [r7, #12]
 800bc28:	6938      	ldr	r0, [r7, #16]
 800bc2a:	f7ff fb87 	bl	800b33c <_SendPacket>
  RECORD_END();
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f383 8811 	msr	BASEPRI, r3
}
 800bc34:	bf00      	nop
 800bc36:	3748      	adds	r7, #72	@ 0x48
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	20016bbc 	.word	0x20016bbc
 800bc40:	20016b8c 	.word	0x20016b8c

0800bc44 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800bc44:	b580      	push	{r7, lr}
 800bc46:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800bc48:	4b07      	ldr	r3, [pc, #28]	@ (800bc68 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800bc4a:	6a1b      	ldr	r3, [r3, #32]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d008      	beq.n	800bc62 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800bc50:	4b05      	ldr	r3, [pc, #20]	@ (800bc68 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800bc52:	6a1b      	ldr	r3, [r3, #32]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d003      	beq.n	800bc62 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800bc5a:	4b03      	ldr	r3, [pc, #12]	@ (800bc68 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800bc5c:	6a1b      	ldr	r3, [r3, #32]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	4798      	blx	r3
  }
}
 800bc62:	bf00      	nop
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	20016b8c 	.word	0x20016b8c

0800bc6c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800bc6c:	b590      	push	{r4, r7, lr}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800bc72:	4b15      	ldr	r3, [pc, #84]	@ (800bcc8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d01a      	beq.n	800bcb0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800bc7a:	4b13      	ldr	r3, [pc, #76]	@ (800bcc8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d015      	beq.n	800bcb0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800bc84:	4b10      	ldr	r3, [pc, #64]	@ (800bcc8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800bc86:	6a1b      	ldr	r3, [r3, #32]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4798      	blx	r3
 800bc8c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800bc90:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800bc92:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bc96:	f04f 0200 	mov.w	r2, #0
 800bc9a:	f04f 0300 	mov.w	r3, #0
 800bc9e:	000a      	movs	r2, r1
 800bca0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800bca2:	4613      	mov	r3, r2
 800bca4:	461a      	mov	r2, r3
 800bca6:	4621      	mov	r1, r4
 800bca8:	200d      	movs	r0, #13
 800bcaa:	f7ff fd11 	bl	800b6d0 <SEGGER_SYSVIEW_RecordU32x2>
 800bcae:	e006      	b.n	800bcbe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800bcb0:	4b06      	ldr	r3, [pc, #24]	@ (800bccc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	200c      	movs	r0, #12
 800bcb8:	f7ff fcce 	bl	800b658 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800bcbc:	bf00      	nop
 800bcbe:	bf00      	nop
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd90      	pop	{r4, r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20016b8c 	.word	0x20016b8c
 800bccc:	e0001004 	.word	0xe0001004

0800bcd0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bcd6:	f3ef 8311 	mrs	r3, BASEPRI
 800bcda:	f04f 0120 	mov.w	r1, #32
 800bcde:	f381 8811 	msr	BASEPRI, r1
 800bce2:	60fb      	str	r3, [r7, #12]
 800bce4:	4819      	ldr	r0, [pc, #100]	@ (800bd4c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800bce6:	f7ff fa3b 	bl	800b160 <_PreparePacket>
 800bcea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800bcf0:	4b17      	ldr	r3, [pc, #92]	@ (800bd50 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcf8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	617b      	str	r3, [r7, #20]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	613b      	str	r3, [r7, #16]
 800bd02:	e00b      	b.n	800bd1c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	1c59      	adds	r1, r3, #1
 800bd0c:	6179      	str	r1, [r7, #20]
 800bd0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bd12:	b2d2      	uxtb	r2, r2
 800bd14:	701a      	strb	r2, [r3, #0]
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	09db      	lsrs	r3, r3, #7
 800bd1a:	613b      	str	r3, [r7, #16]
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	2b7f      	cmp	r3, #127	@ 0x7f
 800bd20:	d8f0      	bhi.n	800bd04 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	1c5a      	adds	r2, r3, #1
 800bd26:	617a      	str	r2, [r7, #20]
 800bd28:	693a      	ldr	r2, [r7, #16]
 800bd2a:	b2d2      	uxtb	r2, r2
 800bd2c:	701a      	strb	r2, [r3, #0]
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800bd32:	2202      	movs	r2, #2
 800bd34:	6879      	ldr	r1, [r7, #4]
 800bd36:	68b8      	ldr	r0, [r7, #8]
 800bd38:	f7ff fb00 	bl	800b33c <_SendPacket>
  RECORD_END();
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f383 8811 	msr	BASEPRI, r3
}
 800bd42:	bf00      	nop
 800bd44:	3718      	adds	r7, #24
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20016bbc 	.word	0x20016bbc
 800bd50:	e000ed04 	.word	0xe000ed04

0800bd54 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bd5a:	f3ef 8311 	mrs	r3, BASEPRI
 800bd5e:	f04f 0120 	mov.w	r1, #32
 800bd62:	f381 8811 	msr	BASEPRI, r1
 800bd66:	607b      	str	r3, [r7, #4]
 800bd68:	4807      	ldr	r0, [pc, #28]	@ (800bd88 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800bd6a:	f7ff f9f9 	bl	800b160 <_PreparePacket>
 800bd6e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800bd70:	2203      	movs	r2, #3
 800bd72:	6839      	ldr	r1, [r7, #0]
 800bd74:	6838      	ldr	r0, [r7, #0]
 800bd76:	f7ff fae1 	bl	800b33c <_SendPacket>
  RECORD_END();
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f383 8811 	msr	BASEPRI, r3
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	20016bbc 	.word	0x20016bbc

0800bd8c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bd92:	f3ef 8311 	mrs	r3, BASEPRI
 800bd96:	f04f 0120 	mov.w	r1, #32
 800bd9a:	f381 8811 	msr	BASEPRI, r1
 800bd9e:	607b      	str	r3, [r7, #4]
 800bda0:	4807      	ldr	r0, [pc, #28]	@ (800bdc0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800bda2:	f7ff f9dd 	bl	800b160 <_PreparePacket>
 800bda6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800bda8:	2212      	movs	r2, #18
 800bdaa:	6839      	ldr	r1, [r7, #0]
 800bdac:	6838      	ldr	r0, [r7, #0]
 800bdae:	f7ff fac5 	bl	800b33c <_SendPacket>
  RECORD_END();
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f383 8811 	msr	BASEPRI, r3
}
 800bdb8:	bf00      	nop
 800bdba:	3708      	adds	r7, #8
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	20016bbc 	.word	0x20016bbc

0800bdc4 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b088      	sub	sp, #32
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bdcc:	f3ef 8311 	mrs	r3, BASEPRI
 800bdd0:	f04f 0120 	mov.w	r1, #32
 800bdd4:	f381 8811 	msr	BASEPRI, r1
 800bdd8:	617b      	str	r3, [r7, #20]
 800bdda:	4817      	ldr	r0, [pc, #92]	@ (800be38 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 800bddc:	f7ff f9c0 	bl	800b160 <_PreparePacket>
 800bde0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	61fb      	str	r3, [r7, #28]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	61bb      	str	r3, [r7, #24]
 800bdee:	e00b      	b.n	800be08 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	1c59      	adds	r1, r3, #1
 800bdf8:	61f9      	str	r1, [r7, #28]
 800bdfa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bdfe:	b2d2      	uxtb	r2, r2
 800be00:	701a      	strb	r2, [r3, #0]
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	09db      	lsrs	r3, r3, #7
 800be06:	61bb      	str	r3, [r7, #24]
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	2b7f      	cmp	r3, #127	@ 0x7f
 800be0c:	d8f0      	bhi.n	800bdf0 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	1c5a      	adds	r2, r3, #1
 800be12:	61fa      	str	r2, [r7, #28]
 800be14:	69ba      	ldr	r2, [r7, #24]
 800be16:	b2d2      	uxtb	r2, r2
 800be18:	701a      	strb	r2, [r3, #0]
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800be1e:	221c      	movs	r2, #28
 800be20:	68f9      	ldr	r1, [r7, #12]
 800be22:	6938      	ldr	r0, [r7, #16]
 800be24:	f7ff fa8a 	bl	800b33c <_SendPacket>
  RECORD_END();
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	f383 8811 	msr	BASEPRI, r3
}
 800be2e:	bf00      	nop
 800be30:	3720      	adds	r7, #32
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	20016bbc 	.word	0x20016bbc

0800be3c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b08a      	sub	sp, #40	@ 0x28
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800be46:	f3ef 8311 	mrs	r3, BASEPRI
 800be4a:	f04f 0120 	mov.w	r1, #32
 800be4e:	f381 8811 	msr	BASEPRI, r1
 800be52:	617b      	str	r3, [r7, #20]
 800be54:	4824      	ldr	r0, [pc, #144]	@ (800bee8 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 800be56:	f7ff f983 	bl	800b160 <_PreparePacket>
 800be5a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	627b      	str	r3, [r7, #36]	@ 0x24
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	623b      	str	r3, [r7, #32]
 800be68:	e00b      	b.n	800be82 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800be6a:	6a3b      	ldr	r3, [r7, #32]
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be70:	1c59      	adds	r1, r3, #1
 800be72:	6279      	str	r1, [r7, #36]	@ 0x24
 800be74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800be78:	b2d2      	uxtb	r2, r2
 800be7a:	701a      	strb	r2, [r3, #0]
 800be7c:	6a3b      	ldr	r3, [r7, #32]
 800be7e:	09db      	lsrs	r3, r3, #7
 800be80:	623b      	str	r3, [r7, #32]
 800be82:	6a3b      	ldr	r3, [r7, #32]
 800be84:	2b7f      	cmp	r3, #127	@ 0x7f
 800be86:	d8f0      	bhi.n	800be6a <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 800be88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	627a      	str	r2, [r7, #36]	@ 0x24
 800be8e:	6a3a      	ldr	r2, [r7, #32]
 800be90:	b2d2      	uxtb	r2, r2
 800be92:	701a      	strb	r2, [r3, #0]
 800be94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be96:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	61fb      	str	r3, [r7, #28]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	61bb      	str	r3, [r7, #24]
 800bea0:	e00b      	b.n	800beba <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	1c59      	adds	r1, r3, #1
 800beaa:	61f9      	str	r1, [r7, #28]
 800beac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800beb0:	b2d2      	uxtb	r2, r2
 800beb2:	701a      	strb	r2, [r3, #0]
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	09db      	lsrs	r3, r3, #7
 800beb8:	61bb      	str	r3, [r7, #24]
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	2b7f      	cmp	r3, #127	@ 0x7f
 800bebe:	d8f0      	bhi.n	800bea2 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	1c5a      	adds	r2, r3, #1
 800bec4:	61fa      	str	r2, [r7, #28]
 800bec6:	69ba      	ldr	r2, [r7, #24]
 800bec8:	b2d2      	uxtb	r2, r2
 800beca:	701a      	strb	r2, [r3, #0]
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800bed0:	221c      	movs	r2, #28
 800bed2:	68f9      	ldr	r1, [r7, #12]
 800bed4:	6938      	ldr	r0, [r7, #16]
 800bed6:	f7ff fa31 	bl	800b33c <_SendPacket>
  RECORD_END();
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	f383 8811 	msr	BASEPRI, r3
}
 800bee0:	bf00      	nop
 800bee2:	3728      	adds	r7, #40	@ 0x28
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	20016bbc 	.word	0x20016bbc

0800beec <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bef2:	f3ef 8311 	mrs	r3, BASEPRI
 800bef6:	f04f 0120 	mov.w	r1, #32
 800befa:	f381 8811 	msr	BASEPRI, r1
 800befe:	607b      	str	r3, [r7, #4]
 800bf00:	4807      	ldr	r0, [pc, #28]	@ (800bf20 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800bf02:	f7ff f92d 	bl	800b160 <_PreparePacket>
 800bf06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800bf08:	2211      	movs	r2, #17
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	6838      	ldr	r0, [r7, #0]
 800bf0e:	f7ff fa15 	bl	800b33c <_SendPacket>
  RECORD_END();
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f383 8811 	msr	BASEPRI, r3
}
 800bf18:	bf00      	nop
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	20016bbc 	.word	0x20016bbc

0800bf24 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b088      	sub	sp, #32
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bf2c:	f3ef 8311 	mrs	r3, BASEPRI
 800bf30:	f04f 0120 	mov.w	r1, #32
 800bf34:	f381 8811 	msr	BASEPRI, r1
 800bf38:	617b      	str	r3, [r7, #20]
 800bf3a:	4819      	ldr	r0, [pc, #100]	@ (800bfa0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800bf3c:	f7ff f910 	bl	800b160 <_PreparePacket>
 800bf40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800bf46:	4b17      	ldr	r3, [pc, #92]	@ (800bfa4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	1ad3      	subs	r3, r2, r3
 800bf4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	61fb      	str	r3, [r7, #28]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	61bb      	str	r3, [r7, #24]
 800bf58:	e00b      	b.n	800bf72 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	1c59      	adds	r1, r3, #1
 800bf62:	61f9      	str	r1, [r7, #28]
 800bf64:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bf68:	b2d2      	uxtb	r2, r2
 800bf6a:	701a      	strb	r2, [r3, #0]
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	09db      	lsrs	r3, r3, #7
 800bf70:	61bb      	str	r3, [r7, #24]
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf76:	d8f0      	bhi.n	800bf5a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	1c5a      	adds	r2, r3, #1
 800bf7c:	61fa      	str	r2, [r7, #28]
 800bf7e:	69ba      	ldr	r2, [r7, #24]
 800bf80:	b2d2      	uxtb	r2, r2
 800bf82:	701a      	strb	r2, [r3, #0]
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800bf88:	2208      	movs	r2, #8
 800bf8a:	68f9      	ldr	r1, [r7, #12]
 800bf8c:	6938      	ldr	r0, [r7, #16]
 800bf8e:	f7ff f9d5 	bl	800b33c <_SendPacket>
  RECORD_END();
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	f383 8811 	msr	BASEPRI, r3
}
 800bf98:	bf00      	nop
 800bf9a:	3720      	adds	r7, #32
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	20016bbc 	.word	0x20016bbc
 800bfa4:	20016b8c 	.word	0x20016b8c

0800bfa8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bfb0:	f3ef 8311 	mrs	r3, BASEPRI
 800bfb4:	f04f 0120 	mov.w	r1, #32
 800bfb8:	f381 8811 	msr	BASEPRI, r1
 800bfbc:	617b      	str	r3, [r7, #20]
 800bfbe:	4819      	ldr	r0, [pc, #100]	@ (800c024 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800bfc0:	f7ff f8ce 	bl	800b160 <_PreparePacket>
 800bfc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800bfca:	4b17      	ldr	r3, [pc, #92]	@ (800c028 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	61fb      	str	r3, [r7, #28]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	61bb      	str	r3, [r7, #24]
 800bfdc:	e00b      	b.n	800bff6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	1c59      	adds	r1, r3, #1
 800bfe6:	61f9      	str	r1, [r7, #28]
 800bfe8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bfec:	b2d2      	uxtb	r2, r2
 800bfee:	701a      	strb	r2, [r3, #0]
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	09db      	lsrs	r3, r3, #7
 800bff4:	61bb      	str	r3, [r7, #24]
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	2b7f      	cmp	r3, #127	@ 0x7f
 800bffa:	d8f0      	bhi.n	800bfde <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	1c5a      	adds	r2, r3, #1
 800c000:	61fa      	str	r2, [r7, #28]
 800c002:	69ba      	ldr	r2, [r7, #24]
 800c004:	b2d2      	uxtb	r2, r2
 800c006:	701a      	strb	r2, [r3, #0]
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800c00c:	2204      	movs	r2, #4
 800c00e:	68f9      	ldr	r1, [r7, #12]
 800c010:	6938      	ldr	r0, [r7, #16]
 800c012:	f7ff f993 	bl	800b33c <_SendPacket>
  RECORD_END();
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	f383 8811 	msr	BASEPRI, r3
}
 800c01c:	bf00      	nop
 800c01e:	3720      	adds	r7, #32
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	20016bbc 	.word	0x20016bbc
 800c028:	20016b8c 	.word	0x20016b8c

0800c02c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b088      	sub	sp, #32
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c034:	f3ef 8311 	mrs	r3, BASEPRI
 800c038:	f04f 0120 	mov.w	r1, #32
 800c03c:	f381 8811 	msr	BASEPRI, r1
 800c040:	617b      	str	r3, [r7, #20]
 800c042:	4819      	ldr	r0, [pc, #100]	@ (800c0a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800c044:	f7ff f88c 	bl	800b160 <_PreparePacket>
 800c048:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c04e:	4b17      	ldr	r3, [pc, #92]	@ (800c0ac <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	61fb      	str	r3, [r7, #28]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	61bb      	str	r3, [r7, #24]
 800c060:	e00b      	b.n	800c07a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	b2da      	uxtb	r2, r3
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	1c59      	adds	r1, r3, #1
 800c06a:	61f9      	str	r1, [r7, #28]
 800c06c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c070:	b2d2      	uxtb	r2, r2
 800c072:	701a      	strb	r2, [r3, #0]
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	09db      	lsrs	r3, r3, #7
 800c078:	61bb      	str	r3, [r7, #24]
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c07e:	d8f0      	bhi.n	800c062 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	61fa      	str	r2, [r7, #28]
 800c086:	69ba      	ldr	r2, [r7, #24]
 800c088:	b2d2      	uxtb	r2, r2
 800c08a:	701a      	strb	r2, [r3, #0]
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800c090:	2206      	movs	r2, #6
 800c092:	68f9      	ldr	r1, [r7, #12]
 800c094:	6938      	ldr	r0, [r7, #16]
 800c096:	f7ff f951 	bl	800b33c <_SendPacket>
  RECORD_END();
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	f383 8811 	msr	BASEPRI, r3
}
 800c0a0:	bf00      	nop
 800c0a2:	3720      	adds	r7, #32
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	20016bbc 	.word	0x20016bbc
 800c0ac:	20016b8c 	.word	0x20016b8c

0800c0b0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b08a      	sub	sp, #40	@ 0x28
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c0ba:	f3ef 8311 	mrs	r3, BASEPRI
 800c0be:	f04f 0120 	mov.w	r1, #32
 800c0c2:	f381 8811 	msr	BASEPRI, r1
 800c0c6:	617b      	str	r3, [r7, #20]
 800c0c8:	4827      	ldr	r0, [pc, #156]	@ (800c168 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800c0ca:	f7ff f849 	bl	800b160 <_PreparePacket>
 800c0ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c0d4:	4b25      	ldr	r3, [pc, #148]	@ (800c16c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	1ad3      	subs	r3, r2, r3
 800c0dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	623b      	str	r3, [r7, #32]
 800c0e6:	e00b      	b.n	800c100 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800c0e8:	6a3b      	ldr	r3, [r7, #32]
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ee:	1c59      	adds	r1, r3, #1
 800c0f0:	6279      	str	r1, [r7, #36]	@ 0x24
 800c0f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c0f6:	b2d2      	uxtb	r2, r2
 800c0f8:	701a      	strb	r2, [r3, #0]
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	09db      	lsrs	r3, r3, #7
 800c0fe:	623b      	str	r3, [r7, #32]
 800c100:	6a3b      	ldr	r3, [r7, #32]
 800c102:	2b7f      	cmp	r3, #127	@ 0x7f
 800c104:	d8f0      	bhi.n	800c0e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800c106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c108:	1c5a      	adds	r2, r3, #1
 800c10a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c10c:	6a3a      	ldr	r2, [r7, #32]
 800c10e:	b2d2      	uxtb	r2, r2
 800c110:	701a      	strb	r2, [r3, #0]
 800c112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c114:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	61fb      	str	r3, [r7, #28]
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	61bb      	str	r3, [r7, #24]
 800c11e:	e00b      	b.n	800c138 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	b2da      	uxtb	r2, r3
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	1c59      	adds	r1, r3, #1
 800c128:	61f9      	str	r1, [r7, #28]
 800c12a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c12e:	b2d2      	uxtb	r2, r2
 800c130:	701a      	strb	r2, [r3, #0]
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	09db      	lsrs	r3, r3, #7
 800c136:	61bb      	str	r3, [r7, #24]
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c13c:	d8f0      	bhi.n	800c120 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	1c5a      	adds	r2, r3, #1
 800c142:	61fa      	str	r2, [r7, #28]
 800c144:	69ba      	ldr	r2, [r7, #24]
 800c146:	b2d2      	uxtb	r2, r2
 800c148:	701a      	strb	r2, [r3, #0]
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800c14e:	2207      	movs	r2, #7
 800c150:	68f9      	ldr	r1, [r7, #12]
 800c152:	6938      	ldr	r0, [r7, #16]
 800c154:	f7ff f8f2 	bl	800b33c <_SendPacket>
  RECORD_END();
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	f383 8811 	msr	BASEPRI, r3
}
 800c15e:	bf00      	nop
 800c160:	3728      	adds	r7, #40	@ 0x28
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	20016bbc 	.word	0x20016bbc
 800c16c:	20016b8c 	.word	0x20016b8c

0800c170 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800c178:	4b04      	ldr	r3, [pc, #16]	@ (800c18c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	1ad3      	subs	r3, r2, r3
}
 800c180:	4618      	mov	r0, r3
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr
 800c18c:	20016b8c 	.word	0x20016b8c

0800c190 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800c190:	b580      	push	{r7, lr}
 800c192:	b08c      	sub	sp, #48	@ 0x30
 800c194:	af00      	add	r7, sp, #0
 800c196:	4603      	mov	r3, r0
 800c198:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800c19a:	4b40      	ldr	r3, [pc, #256]	@ (800c29c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d077      	beq.n	800c292 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800c1a2:	4b3e      	ldr	r3, [pc, #248]	@ (800c29c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c1ac:	e008      	b.n	800c1c0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800c1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800c1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d007      	beq.n	800c1ca <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800c1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1bc:	3301      	adds	r3, #1
 800c1be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c1c0:	79fb      	ldrb	r3, [r7, #7]
 800c1c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d3f2      	bcc.n	800c1ae <SEGGER_SYSVIEW_SendModule+0x1e>
 800c1c8:	e000      	b.n	800c1cc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800c1ca:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800c1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d055      	beq.n	800c27e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c1d2:	f3ef 8311 	mrs	r3, BASEPRI
 800c1d6:	f04f 0120 	mov.w	r1, #32
 800c1da:	f381 8811 	msr	BASEPRI, r1
 800c1de:	617b      	str	r3, [r7, #20]
 800c1e0:	482f      	ldr	r0, [pc, #188]	@ (800c2a0 <SEGGER_SYSVIEW_SendModule+0x110>)
 800c1e2:	f7fe ffbd 	bl	800b160 <_PreparePacket>
 800c1e6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1f0:	79fb      	ldrb	r3, [r7, #7]
 800c1f2:	623b      	str	r3, [r7, #32]
 800c1f4:	e00b      	b.n	800c20e <SEGGER_SYSVIEW_SendModule+0x7e>
 800c1f6:	6a3b      	ldr	r3, [r7, #32]
 800c1f8:	b2da      	uxtb	r2, r3
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fc:	1c59      	adds	r1, r3, #1
 800c1fe:	6279      	str	r1, [r7, #36]	@ 0x24
 800c200:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c204:	b2d2      	uxtb	r2, r2
 800c206:	701a      	strb	r2, [r3, #0]
 800c208:	6a3b      	ldr	r3, [r7, #32]
 800c20a:	09db      	lsrs	r3, r3, #7
 800c20c:	623b      	str	r3, [r7, #32]
 800c20e:	6a3b      	ldr	r3, [r7, #32]
 800c210:	2b7f      	cmp	r3, #127	@ 0x7f
 800c212:	d8f0      	bhi.n	800c1f6 <SEGGER_SYSVIEW_SendModule+0x66>
 800c214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c216:	1c5a      	adds	r2, r3, #1
 800c218:	627a      	str	r2, [r7, #36]	@ 0x24
 800c21a:	6a3a      	ldr	r2, [r7, #32]
 800c21c:	b2d2      	uxtb	r2, r2
 800c21e:	701a      	strb	r2, [r3, #0]
 800c220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c222:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	61fb      	str	r3, [r7, #28]
 800c228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	61bb      	str	r3, [r7, #24]
 800c22e:	e00b      	b.n	800c248 <SEGGER_SYSVIEW_SendModule+0xb8>
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	b2da      	uxtb	r2, r3
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	1c59      	adds	r1, r3, #1
 800c238:	61f9      	str	r1, [r7, #28]
 800c23a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c23e:	b2d2      	uxtb	r2, r2
 800c240:	701a      	strb	r2, [r3, #0]
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	09db      	lsrs	r3, r3, #7
 800c246:	61bb      	str	r3, [r7, #24]
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c24c:	d8f0      	bhi.n	800c230 <SEGGER_SYSVIEW_SendModule+0xa0>
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	61fa      	str	r2, [r7, #28]
 800c254:	69ba      	ldr	r2, [r7, #24]
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2280      	movs	r2, #128	@ 0x80
 800c264:	4619      	mov	r1, r3
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f7fe ff4a 	bl	800b100 <_EncodeStr>
 800c26c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800c26e:	2216      	movs	r2, #22
 800c270:	68f9      	ldr	r1, [r7, #12]
 800c272:	6938      	ldr	r0, [r7, #16]
 800c274:	f7ff f862 	bl	800b33c <_SendPacket>
      RECORD_END();
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800c27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c280:	2b00      	cmp	r3, #0
 800c282:	d006      	beq.n	800c292 <SEGGER_SYSVIEW_SendModule+0x102>
 800c284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800c28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	4798      	blx	r3
    }
  }
}
 800c292:	bf00      	nop
 800c294:	3730      	adds	r7, #48	@ 0x30
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	20016bb4 	.word	0x20016bb4
 800c2a0:	20016bbc 	.word	0x20016bbc

0800c2a4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800c2aa:	4b0c      	ldr	r3, [pc, #48]	@ (800c2dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00f      	beq.n	800c2d2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800c2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c2dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d002      	beq.n	800c2c6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1f2      	bne.n	800c2b8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800c2d2:	bf00      	nop
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	20016bb4 	.word	0x20016bb4

0800c2e0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b086      	sub	sp, #24
 800c2e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800c2e6:	f3ef 8311 	mrs	r3, BASEPRI
 800c2ea:	f04f 0120 	mov.w	r1, #32
 800c2ee:	f381 8811 	msr	BASEPRI, r1
 800c2f2:	60fb      	str	r3, [r7, #12]
 800c2f4:	4817      	ldr	r0, [pc, #92]	@ (800c354 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800c2f6:	f7fe ff33 	bl	800b160 <_PreparePacket>
 800c2fa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	617b      	str	r3, [r7, #20]
 800c304:	4b14      	ldr	r3, [pc, #80]	@ (800c358 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	613b      	str	r3, [r7, #16]
 800c30a:	e00b      	b.n	800c324 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	b2da      	uxtb	r2, r3
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	1c59      	adds	r1, r3, #1
 800c314:	6179      	str	r1, [r7, #20]
 800c316:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c31a:	b2d2      	uxtb	r2, r2
 800c31c:	701a      	strb	r2, [r3, #0]
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	09db      	lsrs	r3, r3, #7
 800c322:	613b      	str	r3, [r7, #16]
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	2b7f      	cmp	r3, #127	@ 0x7f
 800c328:	d8f0      	bhi.n	800c30c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	1c5a      	adds	r2, r3, #1
 800c32e:	617a      	str	r2, [r7, #20]
 800c330:	693a      	ldr	r2, [r7, #16]
 800c332:	b2d2      	uxtb	r2, r2
 800c334:	701a      	strb	r2, [r3, #0]
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800c33a:	221b      	movs	r2, #27
 800c33c:	6879      	ldr	r1, [r7, #4]
 800c33e:	68b8      	ldr	r0, [r7, #8]
 800c340:	f7fe fffc 	bl	800b33c <_SendPacket>
  RECORD_END();
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f383 8811 	msr	BASEPRI, r3
}
 800c34a:	bf00      	nop
 800c34c:	3718      	adds	r7, #24
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	20016bbc 	.word	0x20016bbc
 800c358:	20016bb8 	.word	0x20016bb8

0800c35c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b08a      	sub	sp, #40	@ 0x28
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c364:	f3ef 8311 	mrs	r3, BASEPRI
 800c368:	f04f 0120 	mov.w	r1, #32
 800c36c:	f381 8811 	msr	BASEPRI, r1
 800c370:	617b      	str	r3, [r7, #20]
 800c372:	4827      	ldr	r0, [pc, #156]	@ (800c410 <SEGGER_SYSVIEW_Warn+0xb4>)
 800c374:	f7fe fef4 	bl	800b160 <_PreparePacket>
 800c378:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c37a:	2280      	movs	r2, #128	@ 0x80
 800c37c:	6879      	ldr	r1, [r7, #4]
 800c37e:	6938      	ldr	r0, [r7, #16]
 800c380:	f7fe febe 	bl	800b100 <_EncodeStr>
 800c384:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	627b      	str	r3, [r7, #36]	@ 0x24
 800c38a:	2301      	movs	r3, #1
 800c38c:	623b      	str	r3, [r7, #32]
 800c38e:	e00b      	b.n	800c3a8 <SEGGER_SYSVIEW_Warn+0x4c>
 800c390:	6a3b      	ldr	r3, [r7, #32]
 800c392:	b2da      	uxtb	r2, r3
 800c394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c396:	1c59      	adds	r1, r3, #1
 800c398:	6279      	str	r1, [r7, #36]	@ 0x24
 800c39a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c39e:	b2d2      	uxtb	r2, r2
 800c3a0:	701a      	strb	r2, [r3, #0]
 800c3a2:	6a3b      	ldr	r3, [r7, #32]
 800c3a4:	09db      	lsrs	r3, r3, #7
 800c3a6:	623b      	str	r3, [r7, #32]
 800c3a8:	6a3b      	ldr	r3, [r7, #32]
 800c3aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3ac:	d8f0      	bhi.n	800c390 <SEGGER_SYSVIEW_Warn+0x34>
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b0:	1c5a      	adds	r2, r3, #1
 800c3b2:	627a      	str	r2, [r7, #36]	@ 0x24
 800c3b4:	6a3a      	ldr	r2, [r7, #32]
 800c3b6:	b2d2      	uxtb	r2, r2
 800c3b8:	701a      	strb	r2, [r3, #0]
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	61fb      	str	r3, [r7, #28]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	61bb      	str	r3, [r7, #24]
 800c3c6:	e00b      	b.n	800c3e0 <SEGGER_SYSVIEW_Warn+0x84>
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	1c59      	adds	r1, r3, #1
 800c3d0:	61f9      	str	r1, [r7, #28]
 800c3d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c3d6:	b2d2      	uxtb	r2, r2
 800c3d8:	701a      	strb	r2, [r3, #0]
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	09db      	lsrs	r3, r3, #7
 800c3de:	61bb      	str	r3, [r7, #24]
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3e4:	d8f0      	bhi.n	800c3c8 <SEGGER_SYSVIEW_Warn+0x6c>
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	1c5a      	adds	r2, r3, #1
 800c3ea:	61fa      	str	r2, [r7, #28]
 800c3ec:	69ba      	ldr	r2, [r7, #24]
 800c3ee:	b2d2      	uxtb	r2, r2
 800c3f0:	701a      	strb	r2, [r3, #0]
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800c3f6:	221a      	movs	r2, #26
 800c3f8:	68f9      	ldr	r1, [r7, #12]
 800c3fa:	6938      	ldr	r0, [r7, #16]
 800c3fc:	f7fe ff9e 	bl	800b33c <_SendPacket>
  RECORD_END();
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	f383 8811 	msr	BASEPRI, r3
}
 800c406:	bf00      	nop
 800c408:	3728      	adds	r7, #40	@ 0x28
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	20016bbc 	.word	0x20016bbc

0800c414 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
 800c420:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	6879      	ldr	r1, [r7, #4]
 800c426:	2000      	movs	r0, #0
 800c428:	f7fe fe44 	bl	800b0b4 <SEGGER_RTT_Write>
  return len;
 800c42c:	683b      	ldr	r3, [r7, #0]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
	...

0800c438 <std>:
 800c438:	2300      	movs	r3, #0
 800c43a:	b510      	push	{r4, lr}
 800c43c:	4604      	mov	r4, r0
 800c43e:	e9c0 3300 	strd	r3, r3, [r0]
 800c442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c446:	6083      	str	r3, [r0, #8]
 800c448:	8181      	strh	r1, [r0, #12]
 800c44a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c44c:	81c2      	strh	r2, [r0, #14]
 800c44e:	6183      	str	r3, [r0, #24]
 800c450:	4619      	mov	r1, r3
 800c452:	2208      	movs	r2, #8
 800c454:	305c      	adds	r0, #92	@ 0x5c
 800c456:	f000 fa37 	bl	800c8c8 <memset>
 800c45a:	4b0d      	ldr	r3, [pc, #52]	@ (800c490 <std+0x58>)
 800c45c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c45e:	4b0d      	ldr	r3, [pc, #52]	@ (800c494 <std+0x5c>)
 800c460:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c462:	4b0d      	ldr	r3, [pc, #52]	@ (800c498 <std+0x60>)
 800c464:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c466:	4b0d      	ldr	r3, [pc, #52]	@ (800c49c <std+0x64>)
 800c468:	6323      	str	r3, [r4, #48]	@ 0x30
 800c46a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a0 <std+0x68>)
 800c46c:	6224      	str	r4, [r4, #32]
 800c46e:	429c      	cmp	r4, r3
 800c470:	d006      	beq.n	800c480 <std+0x48>
 800c472:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c476:	4294      	cmp	r4, r2
 800c478:	d002      	beq.n	800c480 <std+0x48>
 800c47a:	33d0      	adds	r3, #208	@ 0xd0
 800c47c:	429c      	cmp	r4, r3
 800c47e:	d105      	bne.n	800c48c <std+0x54>
 800c480:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c488:	f000 ba7e 	b.w	800c988 <__retarget_lock_init_recursive>
 800c48c:	bd10      	pop	{r4, pc}
 800c48e:	bf00      	nop
 800c490:	0800c6b9 	.word	0x0800c6b9
 800c494:	0800c6db 	.word	0x0800c6db
 800c498:	0800c713 	.word	0x0800c713
 800c49c:	0800c737 	.word	0x0800c737
 800c4a0:	20016ca0 	.word	0x20016ca0

0800c4a4 <stdio_exit_handler>:
 800c4a4:	4a02      	ldr	r2, [pc, #8]	@ (800c4b0 <stdio_exit_handler+0xc>)
 800c4a6:	4903      	ldr	r1, [pc, #12]	@ (800c4b4 <stdio_exit_handler+0x10>)
 800c4a8:	4803      	ldr	r0, [pc, #12]	@ (800c4b8 <stdio_exit_handler+0x14>)
 800c4aa:	f000 b869 	b.w	800c580 <_fwalk_sglue>
 800c4ae:	bf00      	nop
 800c4b0:	2000002c 	.word	0x2000002c
 800c4b4:	0800d271 	.word	0x0800d271
 800c4b8:	2000003c 	.word	0x2000003c

0800c4bc <cleanup_stdio>:
 800c4bc:	6841      	ldr	r1, [r0, #4]
 800c4be:	4b0c      	ldr	r3, [pc, #48]	@ (800c4f0 <cleanup_stdio+0x34>)
 800c4c0:	4299      	cmp	r1, r3
 800c4c2:	b510      	push	{r4, lr}
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	d001      	beq.n	800c4cc <cleanup_stdio+0x10>
 800c4c8:	f000 fed2 	bl	800d270 <_fflush_r>
 800c4cc:	68a1      	ldr	r1, [r4, #8]
 800c4ce:	4b09      	ldr	r3, [pc, #36]	@ (800c4f4 <cleanup_stdio+0x38>)
 800c4d0:	4299      	cmp	r1, r3
 800c4d2:	d002      	beq.n	800c4da <cleanup_stdio+0x1e>
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f000 fecb 	bl	800d270 <_fflush_r>
 800c4da:	68e1      	ldr	r1, [r4, #12]
 800c4dc:	4b06      	ldr	r3, [pc, #24]	@ (800c4f8 <cleanup_stdio+0x3c>)
 800c4de:	4299      	cmp	r1, r3
 800c4e0:	d004      	beq.n	800c4ec <cleanup_stdio+0x30>
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e8:	f000 bec2 	b.w	800d270 <_fflush_r>
 800c4ec:	bd10      	pop	{r4, pc}
 800c4ee:	bf00      	nop
 800c4f0:	20016ca0 	.word	0x20016ca0
 800c4f4:	20016d08 	.word	0x20016d08
 800c4f8:	20016d70 	.word	0x20016d70

0800c4fc <global_stdio_init.part.0>:
 800c4fc:	b510      	push	{r4, lr}
 800c4fe:	4b0b      	ldr	r3, [pc, #44]	@ (800c52c <global_stdio_init.part.0+0x30>)
 800c500:	4c0b      	ldr	r4, [pc, #44]	@ (800c530 <global_stdio_init.part.0+0x34>)
 800c502:	4a0c      	ldr	r2, [pc, #48]	@ (800c534 <global_stdio_init.part.0+0x38>)
 800c504:	601a      	str	r2, [r3, #0]
 800c506:	4620      	mov	r0, r4
 800c508:	2200      	movs	r2, #0
 800c50a:	2104      	movs	r1, #4
 800c50c:	f7ff ff94 	bl	800c438 <std>
 800c510:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c514:	2201      	movs	r2, #1
 800c516:	2109      	movs	r1, #9
 800c518:	f7ff ff8e 	bl	800c438 <std>
 800c51c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c520:	2202      	movs	r2, #2
 800c522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c526:	2112      	movs	r1, #18
 800c528:	f7ff bf86 	b.w	800c438 <std>
 800c52c:	20016dd8 	.word	0x20016dd8
 800c530:	20016ca0 	.word	0x20016ca0
 800c534:	0800c4a5 	.word	0x0800c4a5

0800c538 <__sfp_lock_acquire>:
 800c538:	4801      	ldr	r0, [pc, #4]	@ (800c540 <__sfp_lock_acquire+0x8>)
 800c53a:	f000 ba26 	b.w	800c98a <__retarget_lock_acquire_recursive>
 800c53e:	bf00      	nop
 800c540:	20016de1 	.word	0x20016de1

0800c544 <__sfp_lock_release>:
 800c544:	4801      	ldr	r0, [pc, #4]	@ (800c54c <__sfp_lock_release+0x8>)
 800c546:	f000 ba21 	b.w	800c98c <__retarget_lock_release_recursive>
 800c54a:	bf00      	nop
 800c54c:	20016de1 	.word	0x20016de1

0800c550 <__sinit>:
 800c550:	b510      	push	{r4, lr}
 800c552:	4604      	mov	r4, r0
 800c554:	f7ff fff0 	bl	800c538 <__sfp_lock_acquire>
 800c558:	6a23      	ldr	r3, [r4, #32]
 800c55a:	b11b      	cbz	r3, 800c564 <__sinit+0x14>
 800c55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c560:	f7ff bff0 	b.w	800c544 <__sfp_lock_release>
 800c564:	4b04      	ldr	r3, [pc, #16]	@ (800c578 <__sinit+0x28>)
 800c566:	6223      	str	r3, [r4, #32]
 800c568:	4b04      	ldr	r3, [pc, #16]	@ (800c57c <__sinit+0x2c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1f5      	bne.n	800c55c <__sinit+0xc>
 800c570:	f7ff ffc4 	bl	800c4fc <global_stdio_init.part.0>
 800c574:	e7f2      	b.n	800c55c <__sinit+0xc>
 800c576:	bf00      	nop
 800c578:	0800c4bd 	.word	0x0800c4bd
 800c57c:	20016dd8 	.word	0x20016dd8

0800c580 <_fwalk_sglue>:
 800c580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c584:	4607      	mov	r7, r0
 800c586:	4688      	mov	r8, r1
 800c588:	4614      	mov	r4, r2
 800c58a:	2600      	movs	r6, #0
 800c58c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c590:	f1b9 0901 	subs.w	r9, r9, #1
 800c594:	d505      	bpl.n	800c5a2 <_fwalk_sglue+0x22>
 800c596:	6824      	ldr	r4, [r4, #0]
 800c598:	2c00      	cmp	r4, #0
 800c59a:	d1f7      	bne.n	800c58c <_fwalk_sglue+0xc>
 800c59c:	4630      	mov	r0, r6
 800c59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a2:	89ab      	ldrh	r3, [r5, #12]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d907      	bls.n	800c5b8 <_fwalk_sglue+0x38>
 800c5a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	d003      	beq.n	800c5b8 <_fwalk_sglue+0x38>
 800c5b0:	4629      	mov	r1, r5
 800c5b2:	4638      	mov	r0, r7
 800c5b4:	47c0      	blx	r8
 800c5b6:	4306      	orrs	r6, r0
 800c5b8:	3568      	adds	r5, #104	@ 0x68
 800c5ba:	e7e9      	b.n	800c590 <_fwalk_sglue+0x10>

0800c5bc <_puts_r>:
 800c5bc:	6a03      	ldr	r3, [r0, #32]
 800c5be:	b570      	push	{r4, r5, r6, lr}
 800c5c0:	6884      	ldr	r4, [r0, #8]
 800c5c2:	4605      	mov	r5, r0
 800c5c4:	460e      	mov	r6, r1
 800c5c6:	b90b      	cbnz	r3, 800c5cc <_puts_r+0x10>
 800c5c8:	f7ff ffc2 	bl	800c550 <__sinit>
 800c5cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5ce:	07db      	lsls	r3, r3, #31
 800c5d0:	d405      	bmi.n	800c5de <_puts_r+0x22>
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	0598      	lsls	r0, r3, #22
 800c5d6:	d402      	bmi.n	800c5de <_puts_r+0x22>
 800c5d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5da:	f000 f9d6 	bl	800c98a <__retarget_lock_acquire_recursive>
 800c5de:	89a3      	ldrh	r3, [r4, #12]
 800c5e0:	0719      	lsls	r1, r3, #28
 800c5e2:	d502      	bpl.n	800c5ea <_puts_r+0x2e>
 800c5e4:	6923      	ldr	r3, [r4, #16]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d135      	bne.n	800c656 <_puts_r+0x9a>
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	f000 f905 	bl	800c7fc <__swsetup_r>
 800c5f2:	b380      	cbz	r0, 800c656 <_puts_r+0x9a>
 800c5f4:	f04f 35ff 	mov.w	r5, #4294967295
 800c5f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5fa:	07da      	lsls	r2, r3, #31
 800c5fc:	d405      	bmi.n	800c60a <_puts_r+0x4e>
 800c5fe:	89a3      	ldrh	r3, [r4, #12]
 800c600:	059b      	lsls	r3, r3, #22
 800c602:	d402      	bmi.n	800c60a <_puts_r+0x4e>
 800c604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c606:	f000 f9c1 	bl	800c98c <__retarget_lock_release_recursive>
 800c60a:	4628      	mov	r0, r5
 800c60c:	bd70      	pop	{r4, r5, r6, pc}
 800c60e:	2b00      	cmp	r3, #0
 800c610:	da04      	bge.n	800c61c <_puts_r+0x60>
 800c612:	69a2      	ldr	r2, [r4, #24]
 800c614:	429a      	cmp	r2, r3
 800c616:	dc17      	bgt.n	800c648 <_puts_r+0x8c>
 800c618:	290a      	cmp	r1, #10
 800c61a:	d015      	beq.n	800c648 <_puts_r+0x8c>
 800c61c:	6823      	ldr	r3, [r4, #0]
 800c61e:	1c5a      	adds	r2, r3, #1
 800c620:	6022      	str	r2, [r4, #0]
 800c622:	7019      	strb	r1, [r3, #0]
 800c624:	68a3      	ldr	r3, [r4, #8]
 800c626:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c62a:	3b01      	subs	r3, #1
 800c62c:	60a3      	str	r3, [r4, #8]
 800c62e:	2900      	cmp	r1, #0
 800c630:	d1ed      	bne.n	800c60e <_puts_r+0x52>
 800c632:	2b00      	cmp	r3, #0
 800c634:	da11      	bge.n	800c65a <_puts_r+0x9e>
 800c636:	4622      	mov	r2, r4
 800c638:	210a      	movs	r1, #10
 800c63a:	4628      	mov	r0, r5
 800c63c:	f000 f8a0 	bl	800c780 <__swbuf_r>
 800c640:	3001      	adds	r0, #1
 800c642:	d0d7      	beq.n	800c5f4 <_puts_r+0x38>
 800c644:	250a      	movs	r5, #10
 800c646:	e7d7      	b.n	800c5f8 <_puts_r+0x3c>
 800c648:	4622      	mov	r2, r4
 800c64a:	4628      	mov	r0, r5
 800c64c:	f000 f898 	bl	800c780 <__swbuf_r>
 800c650:	3001      	adds	r0, #1
 800c652:	d1e7      	bne.n	800c624 <_puts_r+0x68>
 800c654:	e7ce      	b.n	800c5f4 <_puts_r+0x38>
 800c656:	3e01      	subs	r6, #1
 800c658:	e7e4      	b.n	800c624 <_puts_r+0x68>
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	1c5a      	adds	r2, r3, #1
 800c65e:	6022      	str	r2, [r4, #0]
 800c660:	220a      	movs	r2, #10
 800c662:	701a      	strb	r2, [r3, #0]
 800c664:	e7ee      	b.n	800c644 <_puts_r+0x88>
	...

0800c668 <puts>:
 800c668:	4b02      	ldr	r3, [pc, #8]	@ (800c674 <puts+0xc>)
 800c66a:	4601      	mov	r1, r0
 800c66c:	6818      	ldr	r0, [r3, #0]
 800c66e:	f7ff bfa5 	b.w	800c5bc <_puts_r>
 800c672:	bf00      	nop
 800c674:	20000038 	.word	0x20000038

0800c678 <siprintf>:
 800c678:	b40e      	push	{r1, r2, r3}
 800c67a:	b500      	push	{lr}
 800c67c:	b09c      	sub	sp, #112	@ 0x70
 800c67e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c680:	9002      	str	r0, [sp, #8]
 800c682:	9006      	str	r0, [sp, #24]
 800c684:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c688:	4809      	ldr	r0, [pc, #36]	@ (800c6b0 <siprintf+0x38>)
 800c68a:	9107      	str	r1, [sp, #28]
 800c68c:	9104      	str	r1, [sp, #16]
 800c68e:	4909      	ldr	r1, [pc, #36]	@ (800c6b4 <siprintf+0x3c>)
 800c690:	f853 2b04 	ldr.w	r2, [r3], #4
 800c694:	9105      	str	r1, [sp, #20]
 800c696:	6800      	ldr	r0, [r0, #0]
 800c698:	9301      	str	r3, [sp, #4]
 800c69a:	a902      	add	r1, sp, #8
 800c69c:	f000 fada 	bl	800cc54 <_svfiprintf_r>
 800c6a0:	9b02      	ldr	r3, [sp, #8]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	701a      	strb	r2, [r3, #0]
 800c6a6:	b01c      	add	sp, #112	@ 0x70
 800c6a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6ac:	b003      	add	sp, #12
 800c6ae:	4770      	bx	lr
 800c6b0:	20000038 	.word	0x20000038
 800c6b4:	ffff0208 	.word	0xffff0208

0800c6b8 <__sread>:
 800c6b8:	b510      	push	{r4, lr}
 800c6ba:	460c      	mov	r4, r1
 800c6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c0:	f000 f92c 	bl	800c91c <_read_r>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	bfab      	itete	ge
 800c6c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c6ca:	89a3      	ldrhlt	r3, [r4, #12]
 800c6cc:	181b      	addge	r3, r3, r0
 800c6ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6d2:	bfac      	ite	ge
 800c6d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6d6:	81a3      	strhlt	r3, [r4, #12]
 800c6d8:	bd10      	pop	{r4, pc}

0800c6da <__swrite>:
 800c6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6de:	461f      	mov	r7, r3
 800c6e0:	898b      	ldrh	r3, [r1, #12]
 800c6e2:	05db      	lsls	r3, r3, #23
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	460c      	mov	r4, r1
 800c6e8:	4616      	mov	r6, r2
 800c6ea:	d505      	bpl.n	800c6f8 <__swrite+0x1e>
 800c6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f000 f900 	bl	800c8f8 <_lseek_r>
 800c6f8:	89a3      	ldrh	r3, [r4, #12]
 800c6fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c702:	81a3      	strh	r3, [r4, #12]
 800c704:	4632      	mov	r2, r6
 800c706:	463b      	mov	r3, r7
 800c708:	4628      	mov	r0, r5
 800c70a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c70e:	f7ff be81 	b.w	800c414 <_write_r>

0800c712 <__sseek>:
 800c712:	b510      	push	{r4, lr}
 800c714:	460c      	mov	r4, r1
 800c716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c71a:	f000 f8ed 	bl	800c8f8 <_lseek_r>
 800c71e:	1c43      	adds	r3, r0, #1
 800c720:	89a3      	ldrh	r3, [r4, #12]
 800c722:	bf15      	itete	ne
 800c724:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c726:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c72a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c72e:	81a3      	strheq	r3, [r4, #12]
 800c730:	bf18      	it	ne
 800c732:	81a3      	strhne	r3, [r4, #12]
 800c734:	bd10      	pop	{r4, pc}

0800c736 <__sclose>:
 800c736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c73a:	f000 b8cd 	b.w	800c8d8 <_close_r>
	...

0800c740 <_vsiprintf_r>:
 800c740:	b500      	push	{lr}
 800c742:	b09b      	sub	sp, #108	@ 0x6c
 800c744:	9100      	str	r1, [sp, #0]
 800c746:	9104      	str	r1, [sp, #16]
 800c748:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c74c:	9105      	str	r1, [sp, #20]
 800c74e:	9102      	str	r1, [sp, #8]
 800c750:	4905      	ldr	r1, [pc, #20]	@ (800c768 <_vsiprintf_r+0x28>)
 800c752:	9103      	str	r1, [sp, #12]
 800c754:	4669      	mov	r1, sp
 800c756:	f000 fa7d 	bl	800cc54 <_svfiprintf_r>
 800c75a:	9b00      	ldr	r3, [sp, #0]
 800c75c:	2200      	movs	r2, #0
 800c75e:	701a      	strb	r2, [r3, #0]
 800c760:	b01b      	add	sp, #108	@ 0x6c
 800c762:	f85d fb04 	ldr.w	pc, [sp], #4
 800c766:	bf00      	nop
 800c768:	ffff0208 	.word	0xffff0208

0800c76c <vsiprintf>:
 800c76c:	4613      	mov	r3, r2
 800c76e:	460a      	mov	r2, r1
 800c770:	4601      	mov	r1, r0
 800c772:	4802      	ldr	r0, [pc, #8]	@ (800c77c <vsiprintf+0x10>)
 800c774:	6800      	ldr	r0, [r0, #0]
 800c776:	f7ff bfe3 	b.w	800c740 <_vsiprintf_r>
 800c77a:	bf00      	nop
 800c77c:	20000038 	.word	0x20000038

0800c780 <__swbuf_r>:
 800c780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c782:	460e      	mov	r6, r1
 800c784:	4614      	mov	r4, r2
 800c786:	4605      	mov	r5, r0
 800c788:	b118      	cbz	r0, 800c792 <__swbuf_r+0x12>
 800c78a:	6a03      	ldr	r3, [r0, #32]
 800c78c:	b90b      	cbnz	r3, 800c792 <__swbuf_r+0x12>
 800c78e:	f7ff fedf 	bl	800c550 <__sinit>
 800c792:	69a3      	ldr	r3, [r4, #24]
 800c794:	60a3      	str	r3, [r4, #8]
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	071a      	lsls	r2, r3, #28
 800c79a:	d501      	bpl.n	800c7a0 <__swbuf_r+0x20>
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	b943      	cbnz	r3, 800c7b2 <__swbuf_r+0x32>
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f000 f82a 	bl	800c7fc <__swsetup_r>
 800c7a8:	b118      	cbz	r0, 800c7b2 <__swbuf_r+0x32>
 800c7aa:	f04f 37ff 	mov.w	r7, #4294967295
 800c7ae:	4638      	mov	r0, r7
 800c7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	6922      	ldr	r2, [r4, #16]
 800c7b6:	1a98      	subs	r0, r3, r2
 800c7b8:	6963      	ldr	r3, [r4, #20]
 800c7ba:	b2f6      	uxtb	r6, r6
 800c7bc:	4283      	cmp	r3, r0
 800c7be:	4637      	mov	r7, r6
 800c7c0:	dc05      	bgt.n	800c7ce <__swbuf_r+0x4e>
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	f000 fd53 	bl	800d270 <_fflush_r>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d1ed      	bne.n	800c7aa <__swbuf_r+0x2a>
 800c7ce:	68a3      	ldr	r3, [r4, #8]
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	60a3      	str	r3, [r4, #8]
 800c7d4:	6823      	ldr	r3, [r4, #0]
 800c7d6:	1c5a      	adds	r2, r3, #1
 800c7d8:	6022      	str	r2, [r4, #0]
 800c7da:	701e      	strb	r6, [r3, #0]
 800c7dc:	6962      	ldr	r2, [r4, #20]
 800c7de:	1c43      	adds	r3, r0, #1
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d004      	beq.n	800c7ee <__swbuf_r+0x6e>
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	07db      	lsls	r3, r3, #31
 800c7e8:	d5e1      	bpl.n	800c7ae <__swbuf_r+0x2e>
 800c7ea:	2e0a      	cmp	r6, #10
 800c7ec:	d1df      	bne.n	800c7ae <__swbuf_r+0x2e>
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	f000 fd3d 	bl	800d270 <_fflush_r>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d0d9      	beq.n	800c7ae <__swbuf_r+0x2e>
 800c7fa:	e7d6      	b.n	800c7aa <__swbuf_r+0x2a>

0800c7fc <__swsetup_r>:
 800c7fc:	b538      	push	{r3, r4, r5, lr}
 800c7fe:	4b29      	ldr	r3, [pc, #164]	@ (800c8a4 <__swsetup_r+0xa8>)
 800c800:	4605      	mov	r5, r0
 800c802:	6818      	ldr	r0, [r3, #0]
 800c804:	460c      	mov	r4, r1
 800c806:	b118      	cbz	r0, 800c810 <__swsetup_r+0x14>
 800c808:	6a03      	ldr	r3, [r0, #32]
 800c80a:	b90b      	cbnz	r3, 800c810 <__swsetup_r+0x14>
 800c80c:	f7ff fea0 	bl	800c550 <__sinit>
 800c810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c814:	0719      	lsls	r1, r3, #28
 800c816:	d422      	bmi.n	800c85e <__swsetup_r+0x62>
 800c818:	06da      	lsls	r2, r3, #27
 800c81a:	d407      	bmi.n	800c82c <__swsetup_r+0x30>
 800c81c:	2209      	movs	r2, #9
 800c81e:	602a      	str	r2, [r5, #0]
 800c820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c824:	81a3      	strh	r3, [r4, #12]
 800c826:	f04f 30ff 	mov.w	r0, #4294967295
 800c82a:	e033      	b.n	800c894 <__swsetup_r+0x98>
 800c82c:	0758      	lsls	r0, r3, #29
 800c82e:	d512      	bpl.n	800c856 <__swsetup_r+0x5a>
 800c830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c832:	b141      	cbz	r1, 800c846 <__swsetup_r+0x4a>
 800c834:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c838:	4299      	cmp	r1, r3
 800c83a:	d002      	beq.n	800c842 <__swsetup_r+0x46>
 800c83c:	4628      	mov	r0, r5
 800c83e:	f000 f8b5 	bl	800c9ac <_free_r>
 800c842:	2300      	movs	r3, #0
 800c844:	6363      	str	r3, [r4, #52]	@ 0x34
 800c846:	89a3      	ldrh	r3, [r4, #12]
 800c848:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c84c:	81a3      	strh	r3, [r4, #12]
 800c84e:	2300      	movs	r3, #0
 800c850:	6063      	str	r3, [r4, #4]
 800c852:	6923      	ldr	r3, [r4, #16]
 800c854:	6023      	str	r3, [r4, #0]
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	f043 0308 	orr.w	r3, r3, #8
 800c85c:	81a3      	strh	r3, [r4, #12]
 800c85e:	6923      	ldr	r3, [r4, #16]
 800c860:	b94b      	cbnz	r3, 800c876 <__swsetup_r+0x7a>
 800c862:	89a3      	ldrh	r3, [r4, #12]
 800c864:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c86c:	d003      	beq.n	800c876 <__swsetup_r+0x7a>
 800c86e:	4621      	mov	r1, r4
 800c870:	4628      	mov	r0, r5
 800c872:	f000 fd4b 	bl	800d30c <__smakebuf_r>
 800c876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c87a:	f013 0201 	ands.w	r2, r3, #1
 800c87e:	d00a      	beq.n	800c896 <__swsetup_r+0x9a>
 800c880:	2200      	movs	r2, #0
 800c882:	60a2      	str	r2, [r4, #8]
 800c884:	6962      	ldr	r2, [r4, #20]
 800c886:	4252      	negs	r2, r2
 800c888:	61a2      	str	r2, [r4, #24]
 800c88a:	6922      	ldr	r2, [r4, #16]
 800c88c:	b942      	cbnz	r2, 800c8a0 <__swsetup_r+0xa4>
 800c88e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c892:	d1c5      	bne.n	800c820 <__swsetup_r+0x24>
 800c894:	bd38      	pop	{r3, r4, r5, pc}
 800c896:	0799      	lsls	r1, r3, #30
 800c898:	bf58      	it	pl
 800c89a:	6962      	ldrpl	r2, [r4, #20]
 800c89c:	60a2      	str	r2, [r4, #8]
 800c89e:	e7f4      	b.n	800c88a <__swsetup_r+0x8e>
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	e7f7      	b.n	800c894 <__swsetup_r+0x98>
 800c8a4:	20000038 	.word	0x20000038

0800c8a8 <memcmp>:
 800c8a8:	b510      	push	{r4, lr}
 800c8aa:	3901      	subs	r1, #1
 800c8ac:	4402      	add	r2, r0
 800c8ae:	4290      	cmp	r0, r2
 800c8b0:	d101      	bne.n	800c8b6 <memcmp+0xe>
 800c8b2:	2000      	movs	r0, #0
 800c8b4:	e005      	b.n	800c8c2 <memcmp+0x1a>
 800c8b6:	7803      	ldrb	r3, [r0, #0]
 800c8b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c8bc:	42a3      	cmp	r3, r4
 800c8be:	d001      	beq.n	800c8c4 <memcmp+0x1c>
 800c8c0:	1b18      	subs	r0, r3, r4
 800c8c2:	bd10      	pop	{r4, pc}
 800c8c4:	3001      	adds	r0, #1
 800c8c6:	e7f2      	b.n	800c8ae <memcmp+0x6>

0800c8c8 <memset>:
 800c8c8:	4402      	add	r2, r0
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d100      	bne.n	800c8d2 <memset+0xa>
 800c8d0:	4770      	bx	lr
 800c8d2:	f803 1b01 	strb.w	r1, [r3], #1
 800c8d6:	e7f9      	b.n	800c8cc <memset+0x4>

0800c8d8 <_close_r>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	4d06      	ldr	r5, [pc, #24]	@ (800c8f4 <_close_r+0x1c>)
 800c8dc:	2300      	movs	r3, #0
 800c8de:	4604      	mov	r4, r0
 800c8e0:	4608      	mov	r0, r1
 800c8e2:	602b      	str	r3, [r5, #0]
 800c8e4:	f7f5 fb4f 	bl	8001f86 <_close>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	d102      	bne.n	800c8f2 <_close_r+0x1a>
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	b103      	cbz	r3, 800c8f2 <_close_r+0x1a>
 800c8f0:	6023      	str	r3, [r4, #0]
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	20016ddc 	.word	0x20016ddc

0800c8f8 <_lseek_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	4d07      	ldr	r5, [pc, #28]	@ (800c918 <_lseek_r+0x20>)
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	4608      	mov	r0, r1
 800c900:	4611      	mov	r1, r2
 800c902:	2200      	movs	r2, #0
 800c904:	602a      	str	r2, [r5, #0]
 800c906:	461a      	mov	r2, r3
 800c908:	f7f5 fb64 	bl	8001fd4 <_lseek>
 800c90c:	1c43      	adds	r3, r0, #1
 800c90e:	d102      	bne.n	800c916 <_lseek_r+0x1e>
 800c910:	682b      	ldr	r3, [r5, #0]
 800c912:	b103      	cbz	r3, 800c916 <_lseek_r+0x1e>
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	bd38      	pop	{r3, r4, r5, pc}
 800c918:	20016ddc 	.word	0x20016ddc

0800c91c <_read_r>:
 800c91c:	b538      	push	{r3, r4, r5, lr}
 800c91e:	4d07      	ldr	r5, [pc, #28]	@ (800c93c <_read_r+0x20>)
 800c920:	4604      	mov	r4, r0
 800c922:	4608      	mov	r0, r1
 800c924:	4611      	mov	r1, r2
 800c926:	2200      	movs	r2, #0
 800c928:	602a      	str	r2, [r5, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	f7f5 fb0e 	bl	8001f4c <_read>
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	d102      	bne.n	800c93a <_read_r+0x1e>
 800c934:	682b      	ldr	r3, [r5, #0]
 800c936:	b103      	cbz	r3, 800c93a <_read_r+0x1e>
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	bd38      	pop	{r3, r4, r5, pc}
 800c93c:	20016ddc 	.word	0x20016ddc

0800c940 <__libc_init_array>:
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	4d0d      	ldr	r5, [pc, #52]	@ (800c978 <__libc_init_array+0x38>)
 800c944:	4c0d      	ldr	r4, [pc, #52]	@ (800c97c <__libc_init_array+0x3c>)
 800c946:	1b64      	subs	r4, r4, r5
 800c948:	10a4      	asrs	r4, r4, #2
 800c94a:	2600      	movs	r6, #0
 800c94c:	42a6      	cmp	r6, r4
 800c94e:	d109      	bne.n	800c964 <__libc_init_array+0x24>
 800c950:	4d0b      	ldr	r5, [pc, #44]	@ (800c980 <__libc_init_array+0x40>)
 800c952:	4c0c      	ldr	r4, [pc, #48]	@ (800c984 <__libc_init_array+0x44>)
 800c954:	f000 fda6 	bl	800d4a4 <_init>
 800c958:	1b64      	subs	r4, r4, r5
 800c95a:	10a4      	asrs	r4, r4, #2
 800c95c:	2600      	movs	r6, #0
 800c95e:	42a6      	cmp	r6, r4
 800c960:	d105      	bne.n	800c96e <__libc_init_array+0x2e>
 800c962:	bd70      	pop	{r4, r5, r6, pc}
 800c964:	f855 3b04 	ldr.w	r3, [r5], #4
 800c968:	4798      	blx	r3
 800c96a:	3601      	adds	r6, #1
 800c96c:	e7ee      	b.n	800c94c <__libc_init_array+0xc>
 800c96e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c972:	4798      	blx	r3
 800c974:	3601      	adds	r6, #1
 800c976:	e7f2      	b.n	800c95e <__libc_init_array+0x1e>
 800c978:	0800dc38 	.word	0x0800dc38
 800c97c:	0800dc38 	.word	0x0800dc38
 800c980:	0800dc38 	.word	0x0800dc38
 800c984:	0800dc3c 	.word	0x0800dc3c

0800c988 <__retarget_lock_init_recursive>:
 800c988:	4770      	bx	lr

0800c98a <__retarget_lock_acquire_recursive>:
 800c98a:	4770      	bx	lr

0800c98c <__retarget_lock_release_recursive>:
 800c98c:	4770      	bx	lr

0800c98e <memcpy>:
 800c98e:	440a      	add	r2, r1
 800c990:	4291      	cmp	r1, r2
 800c992:	f100 33ff 	add.w	r3, r0, #4294967295
 800c996:	d100      	bne.n	800c99a <memcpy+0xc>
 800c998:	4770      	bx	lr
 800c99a:	b510      	push	{r4, lr}
 800c99c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9a4:	4291      	cmp	r1, r2
 800c9a6:	d1f9      	bne.n	800c99c <memcpy+0xe>
 800c9a8:	bd10      	pop	{r4, pc}
	...

0800c9ac <_free_r>:
 800c9ac:	b538      	push	{r3, r4, r5, lr}
 800c9ae:	4605      	mov	r5, r0
 800c9b0:	2900      	cmp	r1, #0
 800c9b2:	d041      	beq.n	800ca38 <_free_r+0x8c>
 800c9b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9b8:	1f0c      	subs	r4, r1, #4
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	bfb8      	it	lt
 800c9be:	18e4      	addlt	r4, r4, r3
 800c9c0:	f000 f8e0 	bl	800cb84 <__malloc_lock>
 800c9c4:	4a1d      	ldr	r2, [pc, #116]	@ (800ca3c <_free_r+0x90>)
 800c9c6:	6813      	ldr	r3, [r2, #0]
 800c9c8:	b933      	cbnz	r3, 800c9d8 <_free_r+0x2c>
 800c9ca:	6063      	str	r3, [r4, #4]
 800c9cc:	6014      	str	r4, [r2, #0]
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9d4:	f000 b8dc 	b.w	800cb90 <__malloc_unlock>
 800c9d8:	42a3      	cmp	r3, r4
 800c9da:	d908      	bls.n	800c9ee <_free_r+0x42>
 800c9dc:	6820      	ldr	r0, [r4, #0]
 800c9de:	1821      	adds	r1, r4, r0
 800c9e0:	428b      	cmp	r3, r1
 800c9e2:	bf01      	itttt	eq
 800c9e4:	6819      	ldreq	r1, [r3, #0]
 800c9e6:	685b      	ldreq	r3, [r3, #4]
 800c9e8:	1809      	addeq	r1, r1, r0
 800c9ea:	6021      	streq	r1, [r4, #0]
 800c9ec:	e7ed      	b.n	800c9ca <_free_r+0x1e>
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	b10b      	cbz	r3, 800c9f8 <_free_r+0x4c>
 800c9f4:	42a3      	cmp	r3, r4
 800c9f6:	d9fa      	bls.n	800c9ee <_free_r+0x42>
 800c9f8:	6811      	ldr	r1, [r2, #0]
 800c9fa:	1850      	adds	r0, r2, r1
 800c9fc:	42a0      	cmp	r0, r4
 800c9fe:	d10b      	bne.n	800ca18 <_free_r+0x6c>
 800ca00:	6820      	ldr	r0, [r4, #0]
 800ca02:	4401      	add	r1, r0
 800ca04:	1850      	adds	r0, r2, r1
 800ca06:	4283      	cmp	r3, r0
 800ca08:	6011      	str	r1, [r2, #0]
 800ca0a:	d1e0      	bne.n	800c9ce <_free_r+0x22>
 800ca0c:	6818      	ldr	r0, [r3, #0]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	6053      	str	r3, [r2, #4]
 800ca12:	4408      	add	r0, r1
 800ca14:	6010      	str	r0, [r2, #0]
 800ca16:	e7da      	b.n	800c9ce <_free_r+0x22>
 800ca18:	d902      	bls.n	800ca20 <_free_r+0x74>
 800ca1a:	230c      	movs	r3, #12
 800ca1c:	602b      	str	r3, [r5, #0]
 800ca1e:	e7d6      	b.n	800c9ce <_free_r+0x22>
 800ca20:	6820      	ldr	r0, [r4, #0]
 800ca22:	1821      	adds	r1, r4, r0
 800ca24:	428b      	cmp	r3, r1
 800ca26:	bf04      	itt	eq
 800ca28:	6819      	ldreq	r1, [r3, #0]
 800ca2a:	685b      	ldreq	r3, [r3, #4]
 800ca2c:	6063      	str	r3, [r4, #4]
 800ca2e:	bf04      	itt	eq
 800ca30:	1809      	addeq	r1, r1, r0
 800ca32:	6021      	streq	r1, [r4, #0]
 800ca34:	6054      	str	r4, [r2, #4]
 800ca36:	e7ca      	b.n	800c9ce <_free_r+0x22>
 800ca38:	bd38      	pop	{r3, r4, r5, pc}
 800ca3a:	bf00      	nop
 800ca3c:	20016de8 	.word	0x20016de8

0800ca40 <sbrk_aligned>:
 800ca40:	b570      	push	{r4, r5, r6, lr}
 800ca42:	4e0f      	ldr	r6, [pc, #60]	@ (800ca80 <sbrk_aligned+0x40>)
 800ca44:	460c      	mov	r4, r1
 800ca46:	6831      	ldr	r1, [r6, #0]
 800ca48:	4605      	mov	r5, r0
 800ca4a:	b911      	cbnz	r1, 800ca52 <sbrk_aligned+0x12>
 800ca4c:	f000 fcd6 	bl	800d3fc <_sbrk_r>
 800ca50:	6030      	str	r0, [r6, #0]
 800ca52:	4621      	mov	r1, r4
 800ca54:	4628      	mov	r0, r5
 800ca56:	f000 fcd1 	bl	800d3fc <_sbrk_r>
 800ca5a:	1c43      	adds	r3, r0, #1
 800ca5c:	d103      	bne.n	800ca66 <sbrk_aligned+0x26>
 800ca5e:	f04f 34ff 	mov.w	r4, #4294967295
 800ca62:	4620      	mov	r0, r4
 800ca64:	bd70      	pop	{r4, r5, r6, pc}
 800ca66:	1cc4      	adds	r4, r0, #3
 800ca68:	f024 0403 	bic.w	r4, r4, #3
 800ca6c:	42a0      	cmp	r0, r4
 800ca6e:	d0f8      	beq.n	800ca62 <sbrk_aligned+0x22>
 800ca70:	1a21      	subs	r1, r4, r0
 800ca72:	4628      	mov	r0, r5
 800ca74:	f000 fcc2 	bl	800d3fc <_sbrk_r>
 800ca78:	3001      	adds	r0, #1
 800ca7a:	d1f2      	bne.n	800ca62 <sbrk_aligned+0x22>
 800ca7c:	e7ef      	b.n	800ca5e <sbrk_aligned+0x1e>
 800ca7e:	bf00      	nop
 800ca80:	20016de4 	.word	0x20016de4

0800ca84 <_malloc_r>:
 800ca84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca88:	1ccd      	adds	r5, r1, #3
 800ca8a:	f025 0503 	bic.w	r5, r5, #3
 800ca8e:	3508      	adds	r5, #8
 800ca90:	2d0c      	cmp	r5, #12
 800ca92:	bf38      	it	cc
 800ca94:	250c      	movcc	r5, #12
 800ca96:	2d00      	cmp	r5, #0
 800ca98:	4606      	mov	r6, r0
 800ca9a:	db01      	blt.n	800caa0 <_malloc_r+0x1c>
 800ca9c:	42a9      	cmp	r1, r5
 800ca9e:	d904      	bls.n	800caaa <_malloc_r+0x26>
 800caa0:	230c      	movs	r3, #12
 800caa2:	6033      	str	r3, [r6, #0]
 800caa4:	2000      	movs	r0, #0
 800caa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb80 <_malloc_r+0xfc>
 800caae:	f000 f869 	bl	800cb84 <__malloc_lock>
 800cab2:	f8d8 3000 	ldr.w	r3, [r8]
 800cab6:	461c      	mov	r4, r3
 800cab8:	bb44      	cbnz	r4, 800cb0c <_malloc_r+0x88>
 800caba:	4629      	mov	r1, r5
 800cabc:	4630      	mov	r0, r6
 800cabe:	f7ff ffbf 	bl	800ca40 <sbrk_aligned>
 800cac2:	1c43      	adds	r3, r0, #1
 800cac4:	4604      	mov	r4, r0
 800cac6:	d158      	bne.n	800cb7a <_malloc_r+0xf6>
 800cac8:	f8d8 4000 	ldr.w	r4, [r8]
 800cacc:	4627      	mov	r7, r4
 800cace:	2f00      	cmp	r7, #0
 800cad0:	d143      	bne.n	800cb5a <_malloc_r+0xd6>
 800cad2:	2c00      	cmp	r4, #0
 800cad4:	d04b      	beq.n	800cb6e <_malloc_r+0xea>
 800cad6:	6823      	ldr	r3, [r4, #0]
 800cad8:	4639      	mov	r1, r7
 800cada:	4630      	mov	r0, r6
 800cadc:	eb04 0903 	add.w	r9, r4, r3
 800cae0:	f000 fc8c 	bl	800d3fc <_sbrk_r>
 800cae4:	4581      	cmp	r9, r0
 800cae6:	d142      	bne.n	800cb6e <_malloc_r+0xea>
 800cae8:	6821      	ldr	r1, [r4, #0]
 800caea:	1a6d      	subs	r5, r5, r1
 800caec:	4629      	mov	r1, r5
 800caee:	4630      	mov	r0, r6
 800caf0:	f7ff ffa6 	bl	800ca40 <sbrk_aligned>
 800caf4:	3001      	adds	r0, #1
 800caf6:	d03a      	beq.n	800cb6e <_malloc_r+0xea>
 800caf8:	6823      	ldr	r3, [r4, #0]
 800cafa:	442b      	add	r3, r5
 800cafc:	6023      	str	r3, [r4, #0]
 800cafe:	f8d8 3000 	ldr.w	r3, [r8]
 800cb02:	685a      	ldr	r2, [r3, #4]
 800cb04:	bb62      	cbnz	r2, 800cb60 <_malloc_r+0xdc>
 800cb06:	f8c8 7000 	str.w	r7, [r8]
 800cb0a:	e00f      	b.n	800cb2c <_malloc_r+0xa8>
 800cb0c:	6822      	ldr	r2, [r4, #0]
 800cb0e:	1b52      	subs	r2, r2, r5
 800cb10:	d420      	bmi.n	800cb54 <_malloc_r+0xd0>
 800cb12:	2a0b      	cmp	r2, #11
 800cb14:	d917      	bls.n	800cb46 <_malloc_r+0xc2>
 800cb16:	1961      	adds	r1, r4, r5
 800cb18:	42a3      	cmp	r3, r4
 800cb1a:	6025      	str	r5, [r4, #0]
 800cb1c:	bf18      	it	ne
 800cb1e:	6059      	strne	r1, [r3, #4]
 800cb20:	6863      	ldr	r3, [r4, #4]
 800cb22:	bf08      	it	eq
 800cb24:	f8c8 1000 	streq.w	r1, [r8]
 800cb28:	5162      	str	r2, [r4, r5]
 800cb2a:	604b      	str	r3, [r1, #4]
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	f000 f82f 	bl	800cb90 <__malloc_unlock>
 800cb32:	f104 000b 	add.w	r0, r4, #11
 800cb36:	1d23      	adds	r3, r4, #4
 800cb38:	f020 0007 	bic.w	r0, r0, #7
 800cb3c:	1ac2      	subs	r2, r0, r3
 800cb3e:	bf1c      	itt	ne
 800cb40:	1a1b      	subne	r3, r3, r0
 800cb42:	50a3      	strne	r3, [r4, r2]
 800cb44:	e7af      	b.n	800caa6 <_malloc_r+0x22>
 800cb46:	6862      	ldr	r2, [r4, #4]
 800cb48:	42a3      	cmp	r3, r4
 800cb4a:	bf0c      	ite	eq
 800cb4c:	f8c8 2000 	streq.w	r2, [r8]
 800cb50:	605a      	strne	r2, [r3, #4]
 800cb52:	e7eb      	b.n	800cb2c <_malloc_r+0xa8>
 800cb54:	4623      	mov	r3, r4
 800cb56:	6864      	ldr	r4, [r4, #4]
 800cb58:	e7ae      	b.n	800cab8 <_malloc_r+0x34>
 800cb5a:	463c      	mov	r4, r7
 800cb5c:	687f      	ldr	r7, [r7, #4]
 800cb5e:	e7b6      	b.n	800cace <_malloc_r+0x4a>
 800cb60:	461a      	mov	r2, r3
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	42a3      	cmp	r3, r4
 800cb66:	d1fb      	bne.n	800cb60 <_malloc_r+0xdc>
 800cb68:	2300      	movs	r3, #0
 800cb6a:	6053      	str	r3, [r2, #4]
 800cb6c:	e7de      	b.n	800cb2c <_malloc_r+0xa8>
 800cb6e:	230c      	movs	r3, #12
 800cb70:	6033      	str	r3, [r6, #0]
 800cb72:	4630      	mov	r0, r6
 800cb74:	f000 f80c 	bl	800cb90 <__malloc_unlock>
 800cb78:	e794      	b.n	800caa4 <_malloc_r+0x20>
 800cb7a:	6005      	str	r5, [r0, #0]
 800cb7c:	e7d6      	b.n	800cb2c <_malloc_r+0xa8>
 800cb7e:	bf00      	nop
 800cb80:	20016de8 	.word	0x20016de8

0800cb84 <__malloc_lock>:
 800cb84:	4801      	ldr	r0, [pc, #4]	@ (800cb8c <__malloc_lock+0x8>)
 800cb86:	f7ff bf00 	b.w	800c98a <__retarget_lock_acquire_recursive>
 800cb8a:	bf00      	nop
 800cb8c:	20016de0 	.word	0x20016de0

0800cb90 <__malloc_unlock>:
 800cb90:	4801      	ldr	r0, [pc, #4]	@ (800cb98 <__malloc_unlock+0x8>)
 800cb92:	f7ff befb 	b.w	800c98c <__retarget_lock_release_recursive>
 800cb96:	bf00      	nop
 800cb98:	20016de0 	.word	0x20016de0

0800cb9c <__ssputs_r>:
 800cb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba0:	688e      	ldr	r6, [r1, #8]
 800cba2:	461f      	mov	r7, r3
 800cba4:	42be      	cmp	r6, r7
 800cba6:	680b      	ldr	r3, [r1, #0]
 800cba8:	4682      	mov	sl, r0
 800cbaa:	460c      	mov	r4, r1
 800cbac:	4690      	mov	r8, r2
 800cbae:	d82d      	bhi.n	800cc0c <__ssputs_r+0x70>
 800cbb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cbb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cbb8:	d026      	beq.n	800cc08 <__ssputs_r+0x6c>
 800cbba:	6965      	ldr	r5, [r4, #20]
 800cbbc:	6909      	ldr	r1, [r1, #16]
 800cbbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbc2:	eba3 0901 	sub.w	r9, r3, r1
 800cbc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbca:	1c7b      	adds	r3, r7, #1
 800cbcc:	444b      	add	r3, r9
 800cbce:	106d      	asrs	r5, r5, #1
 800cbd0:	429d      	cmp	r5, r3
 800cbd2:	bf38      	it	cc
 800cbd4:	461d      	movcc	r5, r3
 800cbd6:	0553      	lsls	r3, r2, #21
 800cbd8:	d527      	bpl.n	800cc2a <__ssputs_r+0x8e>
 800cbda:	4629      	mov	r1, r5
 800cbdc:	f7ff ff52 	bl	800ca84 <_malloc_r>
 800cbe0:	4606      	mov	r6, r0
 800cbe2:	b360      	cbz	r0, 800cc3e <__ssputs_r+0xa2>
 800cbe4:	6921      	ldr	r1, [r4, #16]
 800cbe6:	464a      	mov	r2, r9
 800cbe8:	f7ff fed1 	bl	800c98e <memcpy>
 800cbec:	89a3      	ldrh	r3, [r4, #12]
 800cbee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cbf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbf6:	81a3      	strh	r3, [r4, #12]
 800cbf8:	6126      	str	r6, [r4, #16]
 800cbfa:	6165      	str	r5, [r4, #20]
 800cbfc:	444e      	add	r6, r9
 800cbfe:	eba5 0509 	sub.w	r5, r5, r9
 800cc02:	6026      	str	r6, [r4, #0]
 800cc04:	60a5      	str	r5, [r4, #8]
 800cc06:	463e      	mov	r6, r7
 800cc08:	42be      	cmp	r6, r7
 800cc0a:	d900      	bls.n	800cc0e <__ssputs_r+0x72>
 800cc0c:	463e      	mov	r6, r7
 800cc0e:	6820      	ldr	r0, [r4, #0]
 800cc10:	4632      	mov	r2, r6
 800cc12:	4641      	mov	r1, r8
 800cc14:	f000 fbb6 	bl	800d384 <memmove>
 800cc18:	68a3      	ldr	r3, [r4, #8]
 800cc1a:	1b9b      	subs	r3, r3, r6
 800cc1c:	60a3      	str	r3, [r4, #8]
 800cc1e:	6823      	ldr	r3, [r4, #0]
 800cc20:	4433      	add	r3, r6
 800cc22:	6023      	str	r3, [r4, #0]
 800cc24:	2000      	movs	r0, #0
 800cc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc2a:	462a      	mov	r2, r5
 800cc2c:	f000 fbf6 	bl	800d41c <_realloc_r>
 800cc30:	4606      	mov	r6, r0
 800cc32:	2800      	cmp	r0, #0
 800cc34:	d1e0      	bne.n	800cbf8 <__ssputs_r+0x5c>
 800cc36:	6921      	ldr	r1, [r4, #16]
 800cc38:	4650      	mov	r0, sl
 800cc3a:	f7ff feb7 	bl	800c9ac <_free_r>
 800cc3e:	230c      	movs	r3, #12
 800cc40:	f8ca 3000 	str.w	r3, [sl]
 800cc44:	89a3      	ldrh	r3, [r4, #12]
 800cc46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc4a:	81a3      	strh	r3, [r4, #12]
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc50:	e7e9      	b.n	800cc26 <__ssputs_r+0x8a>
	...

0800cc54 <_svfiprintf_r>:
 800cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc58:	4698      	mov	r8, r3
 800cc5a:	898b      	ldrh	r3, [r1, #12]
 800cc5c:	061b      	lsls	r3, r3, #24
 800cc5e:	b09d      	sub	sp, #116	@ 0x74
 800cc60:	4607      	mov	r7, r0
 800cc62:	460d      	mov	r5, r1
 800cc64:	4614      	mov	r4, r2
 800cc66:	d510      	bpl.n	800cc8a <_svfiprintf_r+0x36>
 800cc68:	690b      	ldr	r3, [r1, #16]
 800cc6a:	b973      	cbnz	r3, 800cc8a <_svfiprintf_r+0x36>
 800cc6c:	2140      	movs	r1, #64	@ 0x40
 800cc6e:	f7ff ff09 	bl	800ca84 <_malloc_r>
 800cc72:	6028      	str	r0, [r5, #0]
 800cc74:	6128      	str	r0, [r5, #16]
 800cc76:	b930      	cbnz	r0, 800cc86 <_svfiprintf_r+0x32>
 800cc78:	230c      	movs	r3, #12
 800cc7a:	603b      	str	r3, [r7, #0]
 800cc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc80:	b01d      	add	sp, #116	@ 0x74
 800cc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc86:	2340      	movs	r3, #64	@ 0x40
 800cc88:	616b      	str	r3, [r5, #20]
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc8e:	2320      	movs	r3, #32
 800cc90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc94:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc98:	2330      	movs	r3, #48	@ 0x30
 800cc9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ce38 <_svfiprintf_r+0x1e4>
 800cc9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cca2:	f04f 0901 	mov.w	r9, #1
 800cca6:	4623      	mov	r3, r4
 800cca8:	469a      	mov	sl, r3
 800ccaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccae:	b10a      	cbz	r2, 800ccb4 <_svfiprintf_r+0x60>
 800ccb0:	2a25      	cmp	r2, #37	@ 0x25
 800ccb2:	d1f9      	bne.n	800cca8 <_svfiprintf_r+0x54>
 800ccb4:	ebba 0b04 	subs.w	fp, sl, r4
 800ccb8:	d00b      	beq.n	800ccd2 <_svfiprintf_r+0x7e>
 800ccba:	465b      	mov	r3, fp
 800ccbc:	4622      	mov	r2, r4
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	4638      	mov	r0, r7
 800ccc2:	f7ff ff6b 	bl	800cb9c <__ssputs_r>
 800ccc6:	3001      	adds	r0, #1
 800ccc8:	f000 80a7 	beq.w	800ce1a <_svfiprintf_r+0x1c6>
 800cccc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccce:	445a      	add	r2, fp
 800ccd0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccd2:	f89a 3000 	ldrb.w	r3, [sl]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f000 809f 	beq.w	800ce1a <_svfiprintf_r+0x1c6>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	f04f 32ff 	mov.w	r2, #4294967295
 800cce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cce6:	f10a 0a01 	add.w	sl, sl, #1
 800ccea:	9304      	str	r3, [sp, #16]
 800ccec:	9307      	str	r3, [sp, #28]
 800ccee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccf2:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccf4:	4654      	mov	r4, sl
 800ccf6:	2205      	movs	r2, #5
 800ccf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccfc:	484e      	ldr	r0, [pc, #312]	@ (800ce38 <_svfiprintf_r+0x1e4>)
 800ccfe:	f7f3 fabf 	bl	8000280 <memchr>
 800cd02:	9a04      	ldr	r2, [sp, #16]
 800cd04:	b9d8      	cbnz	r0, 800cd3e <_svfiprintf_r+0xea>
 800cd06:	06d0      	lsls	r0, r2, #27
 800cd08:	bf44      	itt	mi
 800cd0a:	2320      	movmi	r3, #32
 800cd0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd10:	0711      	lsls	r1, r2, #28
 800cd12:	bf44      	itt	mi
 800cd14:	232b      	movmi	r3, #43	@ 0x2b
 800cd16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd1a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd20:	d015      	beq.n	800cd4e <_svfiprintf_r+0xfa>
 800cd22:	9a07      	ldr	r2, [sp, #28]
 800cd24:	4654      	mov	r4, sl
 800cd26:	2000      	movs	r0, #0
 800cd28:	f04f 0c0a 	mov.w	ip, #10
 800cd2c:	4621      	mov	r1, r4
 800cd2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd32:	3b30      	subs	r3, #48	@ 0x30
 800cd34:	2b09      	cmp	r3, #9
 800cd36:	d94b      	bls.n	800cdd0 <_svfiprintf_r+0x17c>
 800cd38:	b1b0      	cbz	r0, 800cd68 <_svfiprintf_r+0x114>
 800cd3a:	9207      	str	r2, [sp, #28]
 800cd3c:	e014      	b.n	800cd68 <_svfiprintf_r+0x114>
 800cd3e:	eba0 0308 	sub.w	r3, r0, r8
 800cd42:	fa09 f303 	lsl.w	r3, r9, r3
 800cd46:	4313      	orrs	r3, r2
 800cd48:	9304      	str	r3, [sp, #16]
 800cd4a:	46a2      	mov	sl, r4
 800cd4c:	e7d2      	b.n	800ccf4 <_svfiprintf_r+0xa0>
 800cd4e:	9b03      	ldr	r3, [sp, #12]
 800cd50:	1d19      	adds	r1, r3, #4
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	9103      	str	r1, [sp, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	bfbb      	ittet	lt
 800cd5a:	425b      	neglt	r3, r3
 800cd5c:	f042 0202 	orrlt.w	r2, r2, #2
 800cd60:	9307      	strge	r3, [sp, #28]
 800cd62:	9307      	strlt	r3, [sp, #28]
 800cd64:	bfb8      	it	lt
 800cd66:	9204      	strlt	r2, [sp, #16]
 800cd68:	7823      	ldrb	r3, [r4, #0]
 800cd6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd6c:	d10a      	bne.n	800cd84 <_svfiprintf_r+0x130>
 800cd6e:	7863      	ldrb	r3, [r4, #1]
 800cd70:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd72:	d132      	bne.n	800cdda <_svfiprintf_r+0x186>
 800cd74:	9b03      	ldr	r3, [sp, #12]
 800cd76:	1d1a      	adds	r2, r3, #4
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	9203      	str	r2, [sp, #12]
 800cd7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd80:	3402      	adds	r4, #2
 800cd82:	9305      	str	r3, [sp, #20]
 800cd84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ce48 <_svfiprintf_r+0x1f4>
 800cd88:	7821      	ldrb	r1, [r4, #0]
 800cd8a:	2203      	movs	r2, #3
 800cd8c:	4650      	mov	r0, sl
 800cd8e:	f7f3 fa77 	bl	8000280 <memchr>
 800cd92:	b138      	cbz	r0, 800cda4 <_svfiprintf_r+0x150>
 800cd94:	9b04      	ldr	r3, [sp, #16]
 800cd96:	eba0 000a 	sub.w	r0, r0, sl
 800cd9a:	2240      	movs	r2, #64	@ 0x40
 800cd9c:	4082      	lsls	r2, r0
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	3401      	adds	r4, #1
 800cda2:	9304      	str	r3, [sp, #16]
 800cda4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda8:	4824      	ldr	r0, [pc, #144]	@ (800ce3c <_svfiprintf_r+0x1e8>)
 800cdaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cdae:	2206      	movs	r2, #6
 800cdb0:	f7f3 fa66 	bl	8000280 <memchr>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d036      	beq.n	800ce26 <_svfiprintf_r+0x1d2>
 800cdb8:	4b21      	ldr	r3, [pc, #132]	@ (800ce40 <_svfiprintf_r+0x1ec>)
 800cdba:	bb1b      	cbnz	r3, 800ce04 <_svfiprintf_r+0x1b0>
 800cdbc:	9b03      	ldr	r3, [sp, #12]
 800cdbe:	3307      	adds	r3, #7
 800cdc0:	f023 0307 	bic.w	r3, r3, #7
 800cdc4:	3308      	adds	r3, #8
 800cdc6:	9303      	str	r3, [sp, #12]
 800cdc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdca:	4433      	add	r3, r6
 800cdcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdce:	e76a      	b.n	800cca6 <_svfiprintf_r+0x52>
 800cdd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	2001      	movs	r0, #1
 800cdd8:	e7a8      	b.n	800cd2c <_svfiprintf_r+0xd8>
 800cdda:	2300      	movs	r3, #0
 800cddc:	3401      	adds	r4, #1
 800cdde:	9305      	str	r3, [sp, #20]
 800cde0:	4619      	mov	r1, r3
 800cde2:	f04f 0c0a 	mov.w	ip, #10
 800cde6:	4620      	mov	r0, r4
 800cde8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdec:	3a30      	subs	r2, #48	@ 0x30
 800cdee:	2a09      	cmp	r2, #9
 800cdf0:	d903      	bls.n	800cdfa <_svfiprintf_r+0x1a6>
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d0c6      	beq.n	800cd84 <_svfiprintf_r+0x130>
 800cdf6:	9105      	str	r1, [sp, #20]
 800cdf8:	e7c4      	b.n	800cd84 <_svfiprintf_r+0x130>
 800cdfa:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdfe:	4604      	mov	r4, r0
 800ce00:	2301      	movs	r3, #1
 800ce02:	e7f0      	b.n	800cde6 <_svfiprintf_r+0x192>
 800ce04:	ab03      	add	r3, sp, #12
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	462a      	mov	r2, r5
 800ce0a:	4b0e      	ldr	r3, [pc, #56]	@ (800ce44 <_svfiprintf_r+0x1f0>)
 800ce0c:	a904      	add	r1, sp, #16
 800ce0e:	4638      	mov	r0, r7
 800ce10:	f3af 8000 	nop.w
 800ce14:	1c42      	adds	r2, r0, #1
 800ce16:	4606      	mov	r6, r0
 800ce18:	d1d6      	bne.n	800cdc8 <_svfiprintf_r+0x174>
 800ce1a:	89ab      	ldrh	r3, [r5, #12]
 800ce1c:	065b      	lsls	r3, r3, #25
 800ce1e:	f53f af2d 	bmi.w	800cc7c <_svfiprintf_r+0x28>
 800ce22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce24:	e72c      	b.n	800cc80 <_svfiprintf_r+0x2c>
 800ce26:	ab03      	add	r3, sp, #12
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	462a      	mov	r2, r5
 800ce2c:	4b05      	ldr	r3, [pc, #20]	@ (800ce44 <_svfiprintf_r+0x1f0>)
 800ce2e:	a904      	add	r1, sp, #16
 800ce30:	4638      	mov	r0, r7
 800ce32:	f000 f879 	bl	800cf28 <_printf_i>
 800ce36:	e7ed      	b.n	800ce14 <_svfiprintf_r+0x1c0>
 800ce38:	0800dbfa 	.word	0x0800dbfa
 800ce3c:	0800dc04 	.word	0x0800dc04
 800ce40:	00000000 	.word	0x00000000
 800ce44:	0800cb9d 	.word	0x0800cb9d
 800ce48:	0800dc00 	.word	0x0800dc00

0800ce4c <_printf_common>:
 800ce4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce50:	4616      	mov	r6, r2
 800ce52:	4698      	mov	r8, r3
 800ce54:	688a      	ldr	r2, [r1, #8]
 800ce56:	690b      	ldr	r3, [r1, #16]
 800ce58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	bfb8      	it	lt
 800ce60:	4613      	movlt	r3, r2
 800ce62:	6033      	str	r3, [r6, #0]
 800ce64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ce68:	4607      	mov	r7, r0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	b10a      	cbz	r2, 800ce72 <_printf_common+0x26>
 800ce6e:	3301      	adds	r3, #1
 800ce70:	6033      	str	r3, [r6, #0]
 800ce72:	6823      	ldr	r3, [r4, #0]
 800ce74:	0699      	lsls	r1, r3, #26
 800ce76:	bf42      	ittt	mi
 800ce78:	6833      	ldrmi	r3, [r6, #0]
 800ce7a:	3302      	addmi	r3, #2
 800ce7c:	6033      	strmi	r3, [r6, #0]
 800ce7e:	6825      	ldr	r5, [r4, #0]
 800ce80:	f015 0506 	ands.w	r5, r5, #6
 800ce84:	d106      	bne.n	800ce94 <_printf_common+0x48>
 800ce86:	f104 0a19 	add.w	sl, r4, #25
 800ce8a:	68e3      	ldr	r3, [r4, #12]
 800ce8c:	6832      	ldr	r2, [r6, #0]
 800ce8e:	1a9b      	subs	r3, r3, r2
 800ce90:	42ab      	cmp	r3, r5
 800ce92:	dc26      	bgt.n	800cee2 <_printf_common+0x96>
 800ce94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ce98:	6822      	ldr	r2, [r4, #0]
 800ce9a:	3b00      	subs	r3, #0
 800ce9c:	bf18      	it	ne
 800ce9e:	2301      	movne	r3, #1
 800cea0:	0692      	lsls	r2, r2, #26
 800cea2:	d42b      	bmi.n	800cefc <_printf_common+0xb0>
 800cea4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cea8:	4641      	mov	r1, r8
 800ceaa:	4638      	mov	r0, r7
 800ceac:	47c8      	blx	r9
 800ceae:	3001      	adds	r0, #1
 800ceb0:	d01e      	beq.n	800cef0 <_printf_common+0xa4>
 800ceb2:	6823      	ldr	r3, [r4, #0]
 800ceb4:	6922      	ldr	r2, [r4, #16]
 800ceb6:	f003 0306 	and.w	r3, r3, #6
 800ceba:	2b04      	cmp	r3, #4
 800cebc:	bf02      	ittt	eq
 800cebe:	68e5      	ldreq	r5, [r4, #12]
 800cec0:	6833      	ldreq	r3, [r6, #0]
 800cec2:	1aed      	subeq	r5, r5, r3
 800cec4:	68a3      	ldr	r3, [r4, #8]
 800cec6:	bf0c      	ite	eq
 800cec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cecc:	2500      	movne	r5, #0
 800cece:	4293      	cmp	r3, r2
 800ced0:	bfc4      	itt	gt
 800ced2:	1a9b      	subgt	r3, r3, r2
 800ced4:	18ed      	addgt	r5, r5, r3
 800ced6:	2600      	movs	r6, #0
 800ced8:	341a      	adds	r4, #26
 800ceda:	42b5      	cmp	r5, r6
 800cedc:	d11a      	bne.n	800cf14 <_printf_common+0xc8>
 800cede:	2000      	movs	r0, #0
 800cee0:	e008      	b.n	800cef4 <_printf_common+0xa8>
 800cee2:	2301      	movs	r3, #1
 800cee4:	4652      	mov	r2, sl
 800cee6:	4641      	mov	r1, r8
 800cee8:	4638      	mov	r0, r7
 800ceea:	47c8      	blx	r9
 800ceec:	3001      	adds	r0, #1
 800ceee:	d103      	bne.n	800cef8 <_printf_common+0xac>
 800cef0:	f04f 30ff 	mov.w	r0, #4294967295
 800cef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef8:	3501      	adds	r5, #1
 800cefa:	e7c6      	b.n	800ce8a <_printf_common+0x3e>
 800cefc:	18e1      	adds	r1, r4, r3
 800cefe:	1c5a      	adds	r2, r3, #1
 800cf00:	2030      	movs	r0, #48	@ 0x30
 800cf02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cf06:	4422      	add	r2, r4
 800cf08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cf0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cf10:	3302      	adds	r3, #2
 800cf12:	e7c7      	b.n	800cea4 <_printf_common+0x58>
 800cf14:	2301      	movs	r3, #1
 800cf16:	4622      	mov	r2, r4
 800cf18:	4641      	mov	r1, r8
 800cf1a:	4638      	mov	r0, r7
 800cf1c:	47c8      	blx	r9
 800cf1e:	3001      	adds	r0, #1
 800cf20:	d0e6      	beq.n	800cef0 <_printf_common+0xa4>
 800cf22:	3601      	adds	r6, #1
 800cf24:	e7d9      	b.n	800ceda <_printf_common+0x8e>
	...

0800cf28 <_printf_i>:
 800cf28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf2c:	7e0f      	ldrb	r7, [r1, #24]
 800cf2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cf30:	2f78      	cmp	r7, #120	@ 0x78
 800cf32:	4691      	mov	r9, r2
 800cf34:	4680      	mov	r8, r0
 800cf36:	460c      	mov	r4, r1
 800cf38:	469a      	mov	sl, r3
 800cf3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cf3e:	d807      	bhi.n	800cf50 <_printf_i+0x28>
 800cf40:	2f62      	cmp	r7, #98	@ 0x62
 800cf42:	d80a      	bhi.n	800cf5a <_printf_i+0x32>
 800cf44:	2f00      	cmp	r7, #0
 800cf46:	f000 80d2 	beq.w	800d0ee <_printf_i+0x1c6>
 800cf4a:	2f58      	cmp	r7, #88	@ 0x58
 800cf4c:	f000 80b9 	beq.w	800d0c2 <_printf_i+0x19a>
 800cf50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cf58:	e03a      	b.n	800cfd0 <_printf_i+0xa8>
 800cf5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cf5e:	2b15      	cmp	r3, #21
 800cf60:	d8f6      	bhi.n	800cf50 <_printf_i+0x28>
 800cf62:	a101      	add	r1, pc, #4	@ (adr r1, 800cf68 <_printf_i+0x40>)
 800cf64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf68:	0800cfc1 	.word	0x0800cfc1
 800cf6c:	0800cfd5 	.word	0x0800cfd5
 800cf70:	0800cf51 	.word	0x0800cf51
 800cf74:	0800cf51 	.word	0x0800cf51
 800cf78:	0800cf51 	.word	0x0800cf51
 800cf7c:	0800cf51 	.word	0x0800cf51
 800cf80:	0800cfd5 	.word	0x0800cfd5
 800cf84:	0800cf51 	.word	0x0800cf51
 800cf88:	0800cf51 	.word	0x0800cf51
 800cf8c:	0800cf51 	.word	0x0800cf51
 800cf90:	0800cf51 	.word	0x0800cf51
 800cf94:	0800d0d5 	.word	0x0800d0d5
 800cf98:	0800cfff 	.word	0x0800cfff
 800cf9c:	0800d08f 	.word	0x0800d08f
 800cfa0:	0800cf51 	.word	0x0800cf51
 800cfa4:	0800cf51 	.word	0x0800cf51
 800cfa8:	0800d0f7 	.word	0x0800d0f7
 800cfac:	0800cf51 	.word	0x0800cf51
 800cfb0:	0800cfff 	.word	0x0800cfff
 800cfb4:	0800cf51 	.word	0x0800cf51
 800cfb8:	0800cf51 	.word	0x0800cf51
 800cfbc:	0800d097 	.word	0x0800d097
 800cfc0:	6833      	ldr	r3, [r6, #0]
 800cfc2:	1d1a      	adds	r2, r3, #4
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	6032      	str	r2, [r6, #0]
 800cfc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e09d      	b.n	800d110 <_printf_i+0x1e8>
 800cfd4:	6833      	ldr	r3, [r6, #0]
 800cfd6:	6820      	ldr	r0, [r4, #0]
 800cfd8:	1d19      	adds	r1, r3, #4
 800cfda:	6031      	str	r1, [r6, #0]
 800cfdc:	0606      	lsls	r6, r0, #24
 800cfde:	d501      	bpl.n	800cfe4 <_printf_i+0xbc>
 800cfe0:	681d      	ldr	r5, [r3, #0]
 800cfe2:	e003      	b.n	800cfec <_printf_i+0xc4>
 800cfe4:	0645      	lsls	r5, r0, #25
 800cfe6:	d5fb      	bpl.n	800cfe0 <_printf_i+0xb8>
 800cfe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cfec:	2d00      	cmp	r5, #0
 800cfee:	da03      	bge.n	800cff8 <_printf_i+0xd0>
 800cff0:	232d      	movs	r3, #45	@ 0x2d
 800cff2:	426d      	negs	r5, r5
 800cff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cff8:	4859      	ldr	r0, [pc, #356]	@ (800d160 <_printf_i+0x238>)
 800cffa:	230a      	movs	r3, #10
 800cffc:	e011      	b.n	800d022 <_printf_i+0xfa>
 800cffe:	6821      	ldr	r1, [r4, #0]
 800d000:	6833      	ldr	r3, [r6, #0]
 800d002:	0608      	lsls	r0, r1, #24
 800d004:	f853 5b04 	ldr.w	r5, [r3], #4
 800d008:	d402      	bmi.n	800d010 <_printf_i+0xe8>
 800d00a:	0649      	lsls	r1, r1, #25
 800d00c:	bf48      	it	mi
 800d00e:	b2ad      	uxthmi	r5, r5
 800d010:	2f6f      	cmp	r7, #111	@ 0x6f
 800d012:	4853      	ldr	r0, [pc, #332]	@ (800d160 <_printf_i+0x238>)
 800d014:	6033      	str	r3, [r6, #0]
 800d016:	bf14      	ite	ne
 800d018:	230a      	movne	r3, #10
 800d01a:	2308      	moveq	r3, #8
 800d01c:	2100      	movs	r1, #0
 800d01e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d022:	6866      	ldr	r6, [r4, #4]
 800d024:	60a6      	str	r6, [r4, #8]
 800d026:	2e00      	cmp	r6, #0
 800d028:	bfa2      	ittt	ge
 800d02a:	6821      	ldrge	r1, [r4, #0]
 800d02c:	f021 0104 	bicge.w	r1, r1, #4
 800d030:	6021      	strge	r1, [r4, #0]
 800d032:	b90d      	cbnz	r5, 800d038 <_printf_i+0x110>
 800d034:	2e00      	cmp	r6, #0
 800d036:	d04b      	beq.n	800d0d0 <_printf_i+0x1a8>
 800d038:	4616      	mov	r6, r2
 800d03a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d03e:	fb03 5711 	mls	r7, r3, r1, r5
 800d042:	5dc7      	ldrb	r7, [r0, r7]
 800d044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d048:	462f      	mov	r7, r5
 800d04a:	42bb      	cmp	r3, r7
 800d04c:	460d      	mov	r5, r1
 800d04e:	d9f4      	bls.n	800d03a <_printf_i+0x112>
 800d050:	2b08      	cmp	r3, #8
 800d052:	d10b      	bne.n	800d06c <_printf_i+0x144>
 800d054:	6823      	ldr	r3, [r4, #0]
 800d056:	07df      	lsls	r7, r3, #31
 800d058:	d508      	bpl.n	800d06c <_printf_i+0x144>
 800d05a:	6923      	ldr	r3, [r4, #16]
 800d05c:	6861      	ldr	r1, [r4, #4]
 800d05e:	4299      	cmp	r1, r3
 800d060:	bfde      	ittt	le
 800d062:	2330      	movle	r3, #48	@ 0x30
 800d064:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d068:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d06c:	1b92      	subs	r2, r2, r6
 800d06e:	6122      	str	r2, [r4, #16]
 800d070:	f8cd a000 	str.w	sl, [sp]
 800d074:	464b      	mov	r3, r9
 800d076:	aa03      	add	r2, sp, #12
 800d078:	4621      	mov	r1, r4
 800d07a:	4640      	mov	r0, r8
 800d07c:	f7ff fee6 	bl	800ce4c <_printf_common>
 800d080:	3001      	adds	r0, #1
 800d082:	d14a      	bne.n	800d11a <_printf_i+0x1f2>
 800d084:	f04f 30ff 	mov.w	r0, #4294967295
 800d088:	b004      	add	sp, #16
 800d08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	f043 0320 	orr.w	r3, r3, #32
 800d094:	6023      	str	r3, [r4, #0]
 800d096:	4833      	ldr	r0, [pc, #204]	@ (800d164 <_printf_i+0x23c>)
 800d098:	2778      	movs	r7, #120	@ 0x78
 800d09a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d09e:	6823      	ldr	r3, [r4, #0]
 800d0a0:	6831      	ldr	r1, [r6, #0]
 800d0a2:	061f      	lsls	r7, r3, #24
 800d0a4:	f851 5b04 	ldr.w	r5, [r1], #4
 800d0a8:	d402      	bmi.n	800d0b0 <_printf_i+0x188>
 800d0aa:	065f      	lsls	r7, r3, #25
 800d0ac:	bf48      	it	mi
 800d0ae:	b2ad      	uxthmi	r5, r5
 800d0b0:	6031      	str	r1, [r6, #0]
 800d0b2:	07d9      	lsls	r1, r3, #31
 800d0b4:	bf44      	itt	mi
 800d0b6:	f043 0320 	orrmi.w	r3, r3, #32
 800d0ba:	6023      	strmi	r3, [r4, #0]
 800d0bc:	b11d      	cbz	r5, 800d0c6 <_printf_i+0x19e>
 800d0be:	2310      	movs	r3, #16
 800d0c0:	e7ac      	b.n	800d01c <_printf_i+0xf4>
 800d0c2:	4827      	ldr	r0, [pc, #156]	@ (800d160 <_printf_i+0x238>)
 800d0c4:	e7e9      	b.n	800d09a <_printf_i+0x172>
 800d0c6:	6823      	ldr	r3, [r4, #0]
 800d0c8:	f023 0320 	bic.w	r3, r3, #32
 800d0cc:	6023      	str	r3, [r4, #0]
 800d0ce:	e7f6      	b.n	800d0be <_printf_i+0x196>
 800d0d0:	4616      	mov	r6, r2
 800d0d2:	e7bd      	b.n	800d050 <_printf_i+0x128>
 800d0d4:	6833      	ldr	r3, [r6, #0]
 800d0d6:	6825      	ldr	r5, [r4, #0]
 800d0d8:	6961      	ldr	r1, [r4, #20]
 800d0da:	1d18      	adds	r0, r3, #4
 800d0dc:	6030      	str	r0, [r6, #0]
 800d0de:	062e      	lsls	r6, r5, #24
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	d501      	bpl.n	800d0e8 <_printf_i+0x1c0>
 800d0e4:	6019      	str	r1, [r3, #0]
 800d0e6:	e002      	b.n	800d0ee <_printf_i+0x1c6>
 800d0e8:	0668      	lsls	r0, r5, #25
 800d0ea:	d5fb      	bpl.n	800d0e4 <_printf_i+0x1bc>
 800d0ec:	8019      	strh	r1, [r3, #0]
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	6123      	str	r3, [r4, #16]
 800d0f2:	4616      	mov	r6, r2
 800d0f4:	e7bc      	b.n	800d070 <_printf_i+0x148>
 800d0f6:	6833      	ldr	r3, [r6, #0]
 800d0f8:	1d1a      	adds	r2, r3, #4
 800d0fa:	6032      	str	r2, [r6, #0]
 800d0fc:	681e      	ldr	r6, [r3, #0]
 800d0fe:	6862      	ldr	r2, [r4, #4]
 800d100:	2100      	movs	r1, #0
 800d102:	4630      	mov	r0, r6
 800d104:	f7f3 f8bc 	bl	8000280 <memchr>
 800d108:	b108      	cbz	r0, 800d10e <_printf_i+0x1e6>
 800d10a:	1b80      	subs	r0, r0, r6
 800d10c:	6060      	str	r0, [r4, #4]
 800d10e:	6863      	ldr	r3, [r4, #4]
 800d110:	6123      	str	r3, [r4, #16]
 800d112:	2300      	movs	r3, #0
 800d114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d118:	e7aa      	b.n	800d070 <_printf_i+0x148>
 800d11a:	6923      	ldr	r3, [r4, #16]
 800d11c:	4632      	mov	r2, r6
 800d11e:	4649      	mov	r1, r9
 800d120:	4640      	mov	r0, r8
 800d122:	47d0      	blx	sl
 800d124:	3001      	adds	r0, #1
 800d126:	d0ad      	beq.n	800d084 <_printf_i+0x15c>
 800d128:	6823      	ldr	r3, [r4, #0]
 800d12a:	079b      	lsls	r3, r3, #30
 800d12c:	d413      	bmi.n	800d156 <_printf_i+0x22e>
 800d12e:	68e0      	ldr	r0, [r4, #12]
 800d130:	9b03      	ldr	r3, [sp, #12]
 800d132:	4298      	cmp	r0, r3
 800d134:	bfb8      	it	lt
 800d136:	4618      	movlt	r0, r3
 800d138:	e7a6      	b.n	800d088 <_printf_i+0x160>
 800d13a:	2301      	movs	r3, #1
 800d13c:	4632      	mov	r2, r6
 800d13e:	4649      	mov	r1, r9
 800d140:	4640      	mov	r0, r8
 800d142:	47d0      	blx	sl
 800d144:	3001      	adds	r0, #1
 800d146:	d09d      	beq.n	800d084 <_printf_i+0x15c>
 800d148:	3501      	adds	r5, #1
 800d14a:	68e3      	ldr	r3, [r4, #12]
 800d14c:	9903      	ldr	r1, [sp, #12]
 800d14e:	1a5b      	subs	r3, r3, r1
 800d150:	42ab      	cmp	r3, r5
 800d152:	dcf2      	bgt.n	800d13a <_printf_i+0x212>
 800d154:	e7eb      	b.n	800d12e <_printf_i+0x206>
 800d156:	2500      	movs	r5, #0
 800d158:	f104 0619 	add.w	r6, r4, #25
 800d15c:	e7f5      	b.n	800d14a <_printf_i+0x222>
 800d15e:	bf00      	nop
 800d160:	0800dc0b 	.word	0x0800dc0b
 800d164:	0800dc1c 	.word	0x0800dc1c

0800d168 <__sflush_r>:
 800d168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d170:	0716      	lsls	r6, r2, #28
 800d172:	4605      	mov	r5, r0
 800d174:	460c      	mov	r4, r1
 800d176:	d454      	bmi.n	800d222 <__sflush_r+0xba>
 800d178:	684b      	ldr	r3, [r1, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	dc02      	bgt.n	800d184 <__sflush_r+0x1c>
 800d17e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d180:	2b00      	cmp	r3, #0
 800d182:	dd48      	ble.n	800d216 <__sflush_r+0xae>
 800d184:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d186:	2e00      	cmp	r6, #0
 800d188:	d045      	beq.n	800d216 <__sflush_r+0xae>
 800d18a:	2300      	movs	r3, #0
 800d18c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d190:	682f      	ldr	r7, [r5, #0]
 800d192:	6a21      	ldr	r1, [r4, #32]
 800d194:	602b      	str	r3, [r5, #0]
 800d196:	d030      	beq.n	800d1fa <__sflush_r+0x92>
 800d198:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d19a:	89a3      	ldrh	r3, [r4, #12]
 800d19c:	0759      	lsls	r1, r3, #29
 800d19e:	d505      	bpl.n	800d1ac <__sflush_r+0x44>
 800d1a0:	6863      	ldr	r3, [r4, #4]
 800d1a2:	1ad2      	subs	r2, r2, r3
 800d1a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d1a6:	b10b      	cbz	r3, 800d1ac <__sflush_r+0x44>
 800d1a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d1aa:	1ad2      	subs	r2, r2, r3
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1b0:	6a21      	ldr	r1, [r4, #32]
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	47b0      	blx	r6
 800d1b6:	1c43      	adds	r3, r0, #1
 800d1b8:	89a3      	ldrh	r3, [r4, #12]
 800d1ba:	d106      	bne.n	800d1ca <__sflush_r+0x62>
 800d1bc:	6829      	ldr	r1, [r5, #0]
 800d1be:	291d      	cmp	r1, #29
 800d1c0:	d82b      	bhi.n	800d21a <__sflush_r+0xb2>
 800d1c2:	4a2a      	ldr	r2, [pc, #168]	@ (800d26c <__sflush_r+0x104>)
 800d1c4:	410a      	asrs	r2, r1
 800d1c6:	07d6      	lsls	r6, r2, #31
 800d1c8:	d427      	bmi.n	800d21a <__sflush_r+0xb2>
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	6062      	str	r2, [r4, #4]
 800d1ce:	04d9      	lsls	r1, r3, #19
 800d1d0:	6922      	ldr	r2, [r4, #16]
 800d1d2:	6022      	str	r2, [r4, #0]
 800d1d4:	d504      	bpl.n	800d1e0 <__sflush_r+0x78>
 800d1d6:	1c42      	adds	r2, r0, #1
 800d1d8:	d101      	bne.n	800d1de <__sflush_r+0x76>
 800d1da:	682b      	ldr	r3, [r5, #0]
 800d1dc:	b903      	cbnz	r3, 800d1e0 <__sflush_r+0x78>
 800d1de:	6560      	str	r0, [r4, #84]	@ 0x54
 800d1e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1e2:	602f      	str	r7, [r5, #0]
 800d1e4:	b1b9      	cbz	r1, 800d216 <__sflush_r+0xae>
 800d1e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1ea:	4299      	cmp	r1, r3
 800d1ec:	d002      	beq.n	800d1f4 <__sflush_r+0x8c>
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	f7ff fbdc 	bl	800c9ac <_free_r>
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1f8:	e00d      	b.n	800d216 <__sflush_r+0xae>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	47b0      	blx	r6
 800d200:	4602      	mov	r2, r0
 800d202:	1c50      	adds	r0, r2, #1
 800d204:	d1c9      	bne.n	800d19a <__sflush_r+0x32>
 800d206:	682b      	ldr	r3, [r5, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d0c6      	beq.n	800d19a <__sflush_r+0x32>
 800d20c:	2b1d      	cmp	r3, #29
 800d20e:	d001      	beq.n	800d214 <__sflush_r+0xac>
 800d210:	2b16      	cmp	r3, #22
 800d212:	d11e      	bne.n	800d252 <__sflush_r+0xea>
 800d214:	602f      	str	r7, [r5, #0]
 800d216:	2000      	movs	r0, #0
 800d218:	e022      	b.n	800d260 <__sflush_r+0xf8>
 800d21a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d21e:	b21b      	sxth	r3, r3
 800d220:	e01b      	b.n	800d25a <__sflush_r+0xf2>
 800d222:	690f      	ldr	r7, [r1, #16]
 800d224:	2f00      	cmp	r7, #0
 800d226:	d0f6      	beq.n	800d216 <__sflush_r+0xae>
 800d228:	0793      	lsls	r3, r2, #30
 800d22a:	680e      	ldr	r6, [r1, #0]
 800d22c:	bf08      	it	eq
 800d22e:	694b      	ldreq	r3, [r1, #20]
 800d230:	600f      	str	r7, [r1, #0]
 800d232:	bf18      	it	ne
 800d234:	2300      	movne	r3, #0
 800d236:	eba6 0807 	sub.w	r8, r6, r7
 800d23a:	608b      	str	r3, [r1, #8]
 800d23c:	f1b8 0f00 	cmp.w	r8, #0
 800d240:	dde9      	ble.n	800d216 <__sflush_r+0xae>
 800d242:	6a21      	ldr	r1, [r4, #32]
 800d244:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d246:	4643      	mov	r3, r8
 800d248:	463a      	mov	r2, r7
 800d24a:	4628      	mov	r0, r5
 800d24c:	47b0      	blx	r6
 800d24e:	2800      	cmp	r0, #0
 800d250:	dc08      	bgt.n	800d264 <__sflush_r+0xfc>
 800d252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d25a:	81a3      	strh	r3, [r4, #12]
 800d25c:	f04f 30ff 	mov.w	r0, #4294967295
 800d260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d264:	4407      	add	r7, r0
 800d266:	eba8 0800 	sub.w	r8, r8, r0
 800d26a:	e7e7      	b.n	800d23c <__sflush_r+0xd4>
 800d26c:	dfbffffe 	.word	0xdfbffffe

0800d270 <_fflush_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	690b      	ldr	r3, [r1, #16]
 800d274:	4605      	mov	r5, r0
 800d276:	460c      	mov	r4, r1
 800d278:	b913      	cbnz	r3, 800d280 <_fflush_r+0x10>
 800d27a:	2500      	movs	r5, #0
 800d27c:	4628      	mov	r0, r5
 800d27e:	bd38      	pop	{r3, r4, r5, pc}
 800d280:	b118      	cbz	r0, 800d28a <_fflush_r+0x1a>
 800d282:	6a03      	ldr	r3, [r0, #32]
 800d284:	b90b      	cbnz	r3, 800d28a <_fflush_r+0x1a>
 800d286:	f7ff f963 	bl	800c550 <__sinit>
 800d28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d0f3      	beq.n	800d27a <_fflush_r+0xa>
 800d292:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d294:	07d0      	lsls	r0, r2, #31
 800d296:	d404      	bmi.n	800d2a2 <_fflush_r+0x32>
 800d298:	0599      	lsls	r1, r3, #22
 800d29a:	d402      	bmi.n	800d2a2 <_fflush_r+0x32>
 800d29c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d29e:	f7ff fb74 	bl	800c98a <__retarget_lock_acquire_recursive>
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	4621      	mov	r1, r4
 800d2a6:	f7ff ff5f 	bl	800d168 <__sflush_r>
 800d2aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2ac:	07da      	lsls	r2, r3, #31
 800d2ae:	4605      	mov	r5, r0
 800d2b0:	d4e4      	bmi.n	800d27c <_fflush_r+0xc>
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	059b      	lsls	r3, r3, #22
 800d2b6:	d4e1      	bmi.n	800d27c <_fflush_r+0xc>
 800d2b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2ba:	f7ff fb67 	bl	800c98c <__retarget_lock_release_recursive>
 800d2be:	e7dd      	b.n	800d27c <_fflush_r+0xc>

0800d2c0 <__swhatbuf_r>:
 800d2c0:	b570      	push	{r4, r5, r6, lr}
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2c8:	2900      	cmp	r1, #0
 800d2ca:	b096      	sub	sp, #88	@ 0x58
 800d2cc:	4615      	mov	r5, r2
 800d2ce:	461e      	mov	r6, r3
 800d2d0:	da0d      	bge.n	800d2ee <__swhatbuf_r+0x2e>
 800d2d2:	89a3      	ldrh	r3, [r4, #12]
 800d2d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d2d8:	f04f 0100 	mov.w	r1, #0
 800d2dc:	bf14      	ite	ne
 800d2de:	2340      	movne	r3, #64	@ 0x40
 800d2e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	6031      	str	r1, [r6, #0]
 800d2e8:	602b      	str	r3, [r5, #0]
 800d2ea:	b016      	add	sp, #88	@ 0x58
 800d2ec:	bd70      	pop	{r4, r5, r6, pc}
 800d2ee:	466a      	mov	r2, sp
 800d2f0:	f000 f862 	bl	800d3b8 <_fstat_r>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	dbec      	blt.n	800d2d2 <__swhatbuf_r+0x12>
 800d2f8:	9901      	ldr	r1, [sp, #4]
 800d2fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d302:	4259      	negs	r1, r3
 800d304:	4159      	adcs	r1, r3
 800d306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d30a:	e7eb      	b.n	800d2e4 <__swhatbuf_r+0x24>

0800d30c <__smakebuf_r>:
 800d30c:	898b      	ldrh	r3, [r1, #12]
 800d30e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d310:	079d      	lsls	r5, r3, #30
 800d312:	4606      	mov	r6, r0
 800d314:	460c      	mov	r4, r1
 800d316:	d507      	bpl.n	800d328 <__smakebuf_r+0x1c>
 800d318:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d31c:	6023      	str	r3, [r4, #0]
 800d31e:	6123      	str	r3, [r4, #16]
 800d320:	2301      	movs	r3, #1
 800d322:	6163      	str	r3, [r4, #20]
 800d324:	b003      	add	sp, #12
 800d326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d328:	ab01      	add	r3, sp, #4
 800d32a:	466a      	mov	r2, sp
 800d32c:	f7ff ffc8 	bl	800d2c0 <__swhatbuf_r>
 800d330:	9f00      	ldr	r7, [sp, #0]
 800d332:	4605      	mov	r5, r0
 800d334:	4639      	mov	r1, r7
 800d336:	4630      	mov	r0, r6
 800d338:	f7ff fba4 	bl	800ca84 <_malloc_r>
 800d33c:	b948      	cbnz	r0, 800d352 <__smakebuf_r+0x46>
 800d33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d342:	059a      	lsls	r2, r3, #22
 800d344:	d4ee      	bmi.n	800d324 <__smakebuf_r+0x18>
 800d346:	f023 0303 	bic.w	r3, r3, #3
 800d34a:	f043 0302 	orr.w	r3, r3, #2
 800d34e:	81a3      	strh	r3, [r4, #12]
 800d350:	e7e2      	b.n	800d318 <__smakebuf_r+0xc>
 800d352:	89a3      	ldrh	r3, [r4, #12]
 800d354:	6020      	str	r0, [r4, #0]
 800d356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d35a:	81a3      	strh	r3, [r4, #12]
 800d35c:	9b01      	ldr	r3, [sp, #4]
 800d35e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d362:	b15b      	cbz	r3, 800d37c <__smakebuf_r+0x70>
 800d364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d368:	4630      	mov	r0, r6
 800d36a:	f000 f837 	bl	800d3dc <_isatty_r>
 800d36e:	b128      	cbz	r0, 800d37c <__smakebuf_r+0x70>
 800d370:	89a3      	ldrh	r3, [r4, #12]
 800d372:	f023 0303 	bic.w	r3, r3, #3
 800d376:	f043 0301 	orr.w	r3, r3, #1
 800d37a:	81a3      	strh	r3, [r4, #12]
 800d37c:	89a3      	ldrh	r3, [r4, #12]
 800d37e:	431d      	orrs	r5, r3
 800d380:	81a5      	strh	r5, [r4, #12]
 800d382:	e7cf      	b.n	800d324 <__smakebuf_r+0x18>

0800d384 <memmove>:
 800d384:	4288      	cmp	r0, r1
 800d386:	b510      	push	{r4, lr}
 800d388:	eb01 0402 	add.w	r4, r1, r2
 800d38c:	d902      	bls.n	800d394 <memmove+0x10>
 800d38e:	4284      	cmp	r4, r0
 800d390:	4623      	mov	r3, r4
 800d392:	d807      	bhi.n	800d3a4 <memmove+0x20>
 800d394:	1e43      	subs	r3, r0, #1
 800d396:	42a1      	cmp	r1, r4
 800d398:	d008      	beq.n	800d3ac <memmove+0x28>
 800d39a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d39e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3a2:	e7f8      	b.n	800d396 <memmove+0x12>
 800d3a4:	4402      	add	r2, r0
 800d3a6:	4601      	mov	r1, r0
 800d3a8:	428a      	cmp	r2, r1
 800d3aa:	d100      	bne.n	800d3ae <memmove+0x2a>
 800d3ac:	bd10      	pop	{r4, pc}
 800d3ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3b6:	e7f7      	b.n	800d3a8 <memmove+0x24>

0800d3b8 <_fstat_r>:
 800d3b8:	b538      	push	{r3, r4, r5, lr}
 800d3ba:	4d07      	ldr	r5, [pc, #28]	@ (800d3d8 <_fstat_r+0x20>)
 800d3bc:	2300      	movs	r3, #0
 800d3be:	4604      	mov	r4, r0
 800d3c0:	4608      	mov	r0, r1
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	602b      	str	r3, [r5, #0]
 800d3c6:	f7f4 fdea 	bl	8001f9e <_fstat>
 800d3ca:	1c43      	adds	r3, r0, #1
 800d3cc:	d102      	bne.n	800d3d4 <_fstat_r+0x1c>
 800d3ce:	682b      	ldr	r3, [r5, #0]
 800d3d0:	b103      	cbz	r3, 800d3d4 <_fstat_r+0x1c>
 800d3d2:	6023      	str	r3, [r4, #0]
 800d3d4:	bd38      	pop	{r3, r4, r5, pc}
 800d3d6:	bf00      	nop
 800d3d8:	20016ddc 	.word	0x20016ddc

0800d3dc <_isatty_r>:
 800d3dc:	b538      	push	{r3, r4, r5, lr}
 800d3de:	4d06      	ldr	r5, [pc, #24]	@ (800d3f8 <_isatty_r+0x1c>)
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	4608      	mov	r0, r1
 800d3e6:	602b      	str	r3, [r5, #0]
 800d3e8:	f7f4 fde9 	bl	8001fbe <_isatty>
 800d3ec:	1c43      	adds	r3, r0, #1
 800d3ee:	d102      	bne.n	800d3f6 <_isatty_r+0x1a>
 800d3f0:	682b      	ldr	r3, [r5, #0]
 800d3f2:	b103      	cbz	r3, 800d3f6 <_isatty_r+0x1a>
 800d3f4:	6023      	str	r3, [r4, #0]
 800d3f6:	bd38      	pop	{r3, r4, r5, pc}
 800d3f8:	20016ddc 	.word	0x20016ddc

0800d3fc <_sbrk_r>:
 800d3fc:	b538      	push	{r3, r4, r5, lr}
 800d3fe:	4d06      	ldr	r5, [pc, #24]	@ (800d418 <_sbrk_r+0x1c>)
 800d400:	2300      	movs	r3, #0
 800d402:	4604      	mov	r4, r0
 800d404:	4608      	mov	r0, r1
 800d406:	602b      	str	r3, [r5, #0]
 800d408:	f000 f83e 	bl	800d488 <_sbrk>
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	d102      	bne.n	800d416 <_sbrk_r+0x1a>
 800d410:	682b      	ldr	r3, [r5, #0]
 800d412:	b103      	cbz	r3, 800d416 <_sbrk_r+0x1a>
 800d414:	6023      	str	r3, [r4, #0]
 800d416:	bd38      	pop	{r3, r4, r5, pc}
 800d418:	20016ddc 	.word	0x20016ddc

0800d41c <_realloc_r>:
 800d41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d420:	4680      	mov	r8, r0
 800d422:	4615      	mov	r5, r2
 800d424:	460c      	mov	r4, r1
 800d426:	b921      	cbnz	r1, 800d432 <_realloc_r+0x16>
 800d428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d42c:	4611      	mov	r1, r2
 800d42e:	f7ff bb29 	b.w	800ca84 <_malloc_r>
 800d432:	b92a      	cbnz	r2, 800d440 <_realloc_r+0x24>
 800d434:	f7ff faba 	bl	800c9ac <_free_r>
 800d438:	2400      	movs	r4, #0
 800d43a:	4620      	mov	r0, r4
 800d43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d440:	f000 f81a 	bl	800d478 <_malloc_usable_size_r>
 800d444:	4285      	cmp	r5, r0
 800d446:	4606      	mov	r6, r0
 800d448:	d802      	bhi.n	800d450 <_realloc_r+0x34>
 800d44a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d44e:	d8f4      	bhi.n	800d43a <_realloc_r+0x1e>
 800d450:	4629      	mov	r1, r5
 800d452:	4640      	mov	r0, r8
 800d454:	f7ff fb16 	bl	800ca84 <_malloc_r>
 800d458:	4607      	mov	r7, r0
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d0ec      	beq.n	800d438 <_realloc_r+0x1c>
 800d45e:	42b5      	cmp	r5, r6
 800d460:	462a      	mov	r2, r5
 800d462:	4621      	mov	r1, r4
 800d464:	bf28      	it	cs
 800d466:	4632      	movcs	r2, r6
 800d468:	f7ff fa91 	bl	800c98e <memcpy>
 800d46c:	4621      	mov	r1, r4
 800d46e:	4640      	mov	r0, r8
 800d470:	f7ff fa9c 	bl	800c9ac <_free_r>
 800d474:	463c      	mov	r4, r7
 800d476:	e7e0      	b.n	800d43a <_realloc_r+0x1e>

0800d478 <_malloc_usable_size_r>:
 800d478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d47c:	1f18      	subs	r0, r3, #4
 800d47e:	2b00      	cmp	r3, #0
 800d480:	bfbc      	itt	lt
 800d482:	580b      	ldrlt	r3, [r1, r0]
 800d484:	18c0      	addlt	r0, r0, r3
 800d486:	4770      	bx	lr

0800d488 <_sbrk>:
 800d488:	4a04      	ldr	r2, [pc, #16]	@ (800d49c <_sbrk+0x14>)
 800d48a:	6811      	ldr	r1, [r2, #0]
 800d48c:	4603      	mov	r3, r0
 800d48e:	b909      	cbnz	r1, 800d494 <_sbrk+0xc>
 800d490:	4903      	ldr	r1, [pc, #12]	@ (800d4a0 <_sbrk+0x18>)
 800d492:	6011      	str	r1, [r2, #0]
 800d494:	6810      	ldr	r0, [r2, #0]
 800d496:	4403      	add	r3, r0
 800d498:	6013      	str	r3, [r2, #0]
 800d49a:	4770      	bx	lr
 800d49c:	20016dec 	.word	0x20016dec
 800d4a0:	20016df0 	.word	0x20016df0

0800d4a4 <_init>:
 800d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a6:	bf00      	nop
 800d4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4aa:	bc08      	pop	{r3}
 800d4ac:	469e      	mov	lr, r3
 800d4ae:	4770      	bx	lr

0800d4b0 <_fini>:
 800d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b2:	bf00      	nop
 800d4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4b6:	bc08      	pop	{r3}
 800d4b8:	469e      	mov	lr, r3
 800d4ba:	4770      	bx	lr
