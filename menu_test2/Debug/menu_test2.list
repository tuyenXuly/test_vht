
menu_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b90  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003d30  08003d30  00004d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db8  08003db8  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003db8  08003db8  00004db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dc0  08003dc0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc0  08003dc0  00004dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dc4  08003dc4  00004dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003dc8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000068  08003e30  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08003e30  0000525c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fd6  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d5  00000000  00000000  0000d06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0000ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000670  00000000  00000000  0000f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016baf  00000000  00000000  0000f940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b742  00000000  00000000  000264ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087576  00000000  00000000  00031c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b91a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000294c  00000000  00000000  000b91ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000bbb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d18 	.word	0x08003d18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003d18 	.word	0x08003d18

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <CLCD_Delay>:
******************************************************************************************************************/
#include "LCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f8a9 	bl	80016f4 <HAL_Delay>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b086      	sub	sp, #24
 80005ae:	af02      	add	r7, sp, #8
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	70fb      	strb	r3, [r7, #3]
 80005b6:	4613      	mov	r3, r2
 80005b8:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 80005ba:	78fb      	ldrb	r3, [r7, #3]
 80005bc:	f023 030f 	bic.w	r3, r3, #15
 80005c0:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	7adb      	ldrb	r3, [r3, #11]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d007      	beq.n	80005e0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 80005d8:	7bbb      	ldrb	r3, [r7, #14]
 80005da:	f043 0308 	orr.w	r3, r3, #8
 80005de:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80005e0:	78bb      	ldrb	r3, [r7, #2]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d108      	bne.n	80005f8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	73bb      	strb	r3, [r7, #14]
 80005f6:	e00a      	b.n	800060e <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80005f8:	78bb      	ldrb	r3, [r7, #2]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d107      	bne.n	800060e <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	f023 0301 	bic.w	r3, r3, #1
 8000604:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	f023 0301 	bic.w	r3, r3, #1
 800060c:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	b2db      	uxtb	r3, r3
 8000616:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff ffb9 	bl	8000590 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	b2db      	uxtb	r3, r3
 800062a:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f7ff ffaf 	bl	8000590 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	4619      	mov	r1, r3
 8000640:	f107 0208 	add.w	r2, r7, #8
 8000644:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2304      	movs	r3, #4
 800064c:	f001 fc56 	bl	8001efc <HAL_I2C_Master_Transmit>
}
 8000650:	bf00      	nop
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	4611      	mov	r1, r2
 8000664:	461a      	mov	r2, r3
 8000666:	460b      	mov	r3, r1
 8000668:	71fb      	strb	r3, [r7, #7]
 800066a:	4613      	mov	r3, r2
 800066c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	68ba      	ldr	r2, [r7, #8]
 8000672:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	79fa      	ldrb	r2, [r7, #7]
 8000678:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	79ba      	ldrb	r2, [r7, #6]
 800067e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	7e3a      	ldrb	r2, [r7, #24]
 8000684:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2228      	movs	r2, #40	@ 0x28
 800068a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2206      	movs	r2, #6
 8000690:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	220c      	movs	r2, #12
 8000696:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2214      	movs	r2, #20
 800069c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2208      	movs	r2, #8
 80006a2:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 80006a4:	2032      	movs	r0, #50	@ 0x32
 80006a6:	f7ff ff73 	bl	8000590 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2133      	movs	r1, #51	@ 0x33
 80006ae:	68f8      	ldr	r0, [r7, #12]
 80006b0:	f7ff ff7b 	bl	80005aa <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2133      	movs	r1, #51	@ 0x33
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f7ff ff76 	bl	80005aa <CLCD_WriteI2C>
	CLCD_Delay(5);
 80006be:	2005      	movs	r0, #5
 80006c0:	f7ff ff66 	bl	8000590 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2132      	movs	r1, #50	@ 0x32
 80006c8:	68f8      	ldr	r0, [r7, #12]
 80006ca:	f7ff ff6e 	bl	80005aa <CLCD_WriteI2C>
	CLCD_Delay(5);
 80006ce:	2005      	movs	r0, #5
 80006d0:	f7ff ff5e 	bl	8000590 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2120      	movs	r1, #32
 80006d8:	68f8      	ldr	r0, [r7, #12]
 80006da:	f7ff ff66 	bl	80005aa <CLCD_WriteI2C>
	CLCD_Delay(5);
 80006de:	2005      	movs	r0, #5
 80006e0:	f7ff ff56 	bl	8000590 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	79db      	ldrb	r3, [r3, #7]
 80006e8:	2200      	movs	r2, #0
 80006ea:	4619      	mov	r1, r3
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f7ff ff5c 	bl	80005aa <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	7a1b      	ldrb	r3, [r3, #8]
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	68f8      	ldr	r0, [r7, #12]
 80006fc:	f7ff ff55 	bl	80005aa <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	7a5b      	ldrb	r3, [r3, #9]
 8000704:	2200      	movs	r2, #0
 8000706:	4619      	mov	r1, r3
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	f7ff ff4e 	bl	80005aa <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	7a9b      	ldrb	r3, [r3, #10]
 8000712:	2200      	movs	r2, #0
 8000714:	4619      	mov	r1, r3
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff ff47 	bl	80005aa <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 800071c:	2200      	movs	r2, #0
 800071e:	2101      	movs	r1, #1
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f7ff ff42 	bl	80005aa <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8000726:	2200      	movs	r2, #0
 8000728:	2102      	movs	r1, #2
 800072a:	68f8      	ldr	r0, [r7, #12]
 800072c:	f7ff ff3d 	bl	80005aa <CLCD_WriteI2C>
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	70fb      	strb	r3, [r7, #3]
 8000744:	4613      	mov	r3, r2
 8000746:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000748:	2300      	movs	r3, #0
 800074a:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	795b      	ldrb	r3, [r3, #5]
 8000750:	78fa      	ldrb	r2, [r7, #3]
 8000752:	429a      	cmp	r2, r3
 8000754:	d303      	bcc.n	800075e <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	795b      	ldrb	r3, [r3, #5]
 800075a:	3b01      	subs	r3, #1
 800075c:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	799b      	ldrb	r3, [r3, #6]
 8000762:	78ba      	ldrb	r2, [r7, #2]
 8000764:	429a      	cmp	r2, r3
 8000766:	d303      	bcc.n	8000770 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	799b      	ldrb	r3, [r3, #6]
 800076c:	3b01      	subs	r3, #1
 800076e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000770:	78bb      	ldrb	r3, [r7, #2]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d102      	bne.n	800077c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	e013      	b.n	80007a4 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800077c:	78bb      	ldrb	r3, [r7, #2]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d103      	bne.n	800078a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000782:	78fb      	ldrb	r3, [r7, #3]
 8000784:	3340      	adds	r3, #64	@ 0x40
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e00c      	b.n	80007a4 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800078a:	78bb      	ldrb	r3, [r7, #2]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d103      	bne.n	8000798 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	3314      	adds	r3, #20
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	e005      	b.n	80007a4 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000798:	78bb      	ldrb	r3, [r7, #2]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d102      	bne.n	80007a4 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	3354      	adds	r3, #84	@ 0x54
 80007a2:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2200      	movs	r2, #0
 80007ae:	4619      	mov	r1, r3
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fefa 	bl	80005aa <CLCD_WriteI2C>
}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff feea 	bl	80005aa <CLCD_WriteI2C>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
 80007e6:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80007e8:	e007      	b.n	80007fa <CLCD_I2C_WriteString+0x1c>
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	603a      	str	r2, [r7, #0]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4619      	mov	r1, r3
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ffe2 	bl	80007be <CLCD_I2C_WriteChar>
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1f3      	bne.n	80007ea <CLCD_I2C_WriteString+0xc>
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000814:	2200      	movs	r2, #0
 8000816:	2101      	movs	r1, #1
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff fec6 	bl	80005aa <CLCD_WriteI2C>
	CLCD_Delay(5);
 800081e:	2005      	movs	r0, #5
 8000820:	f7ff feb6 	bl	8000590 <CLCD_Delay>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <flash_read_arr>:
	{
		 HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr+i ,*(data + i) | (uint16_t)*(data+i+1)<<8);
	 }
}
void flash_read_arr(uint32_t addr,uint8_t *data,uint16_t len)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	@ 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	4613      	mov	r3, r2
 8000838:	80fb      	strh	r3, [r7, #6]
	 for(uint16_t i=0;i<len;i+=2){
 800083a:	2300      	movs	r3, #0
 800083c:	83fb      	strh	r3, [r7, #30]
 800083e:	e018      	b.n	8000872 <flash_read_arr+0x46>
		 uint32_t *p= (volatile uint32_t *)(addr+i);
 8000840:	8bfa      	ldrh	r2, [r7, #30]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4413      	add	r3, r2
 8000846:	61bb      	str	r3, [r7, #24]
		 uint16_t data_temp=*p;
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	82fb      	strh	r3, [r7, #22]
		 //cach 1
//		 data[i] = data_temp;
//		 data[i+1] = data_temp>>8;
		 //cach 2
		 *(data+i) = data_temp;
 800084e:	8bfb      	ldrh	r3, [r7, #30]
 8000850:	68ba      	ldr	r2, [r7, #8]
 8000852:	4413      	add	r3, r2
 8000854:	8afa      	ldrh	r2, [r7, #22]
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	701a      	strb	r2, [r3, #0]
		 *(data+i+1) = data_temp>>8;
 800085a:	8afb      	ldrh	r3, [r7, #22]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	b299      	uxth	r1, r3
 8000860:	8bfb      	ldrh	r3, [r7, #30]
 8000862:	3301      	adds	r3, #1
 8000864:	68ba      	ldr	r2, [r7, #8]
 8000866:	4413      	add	r3, r2
 8000868:	b2ca      	uxtb	r2, r1
 800086a:	701a      	strb	r2, [r3, #0]
	 for(uint16_t i=0;i<len;i+=2){
 800086c:	8bfb      	ldrh	r3, [r7, #30]
 800086e:	3302      	adds	r3, #2
 8000870:	83fb      	strh	r3, [r7, #30]
 8000872:	8bfa      	ldrh	r2, [r7, #30]
 8000874:	88fb      	ldrh	r3, [r7, #6]
 8000876:	429a      	cmp	r2, r3
 8000878:	d3e2      	bcc.n	8000840 <flash_read_arr+0x14>
	 }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3724      	adds	r7, #36	@ 0x24
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <process_button_pad_value>:
 *
 */
#include "keypad.h"
//////////////////////button fuctions/////////////////////////////
uint16_t process_button_pad_value(uint16_t btn_pad_value)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
  static button_state_t btn_sm_state = NOT_PRESSED;
  static uint32_t curr_time = 0;

  switch(btn_sm_state){
 8000892:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <process_button_pad_value+0xb0>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d026      	beq.n	80008e8 <process_button_pad_value+0x60>
 800089a:	2b02      	cmp	r3, #2
 800089c:	dc47      	bgt.n	800092e <process_button_pad_value+0xa6>
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <process_button_pad_value+0x20>
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d00c      	beq.n	80008c0 <process_button_pad_value+0x38>
 80008a6:	e042      	b.n	800092e <process_button_pad_value+0xa6>
    case NOT_PRESSED:{
      if(btn_pad_value){
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d03a      	beq.n	8000924 <process_button_pad_value+0x9c>
        btn_sm_state = BOUNCE;
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <process_button_pad_value+0xb0>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
        curr_time = HAL_GetTick();
 80008b4:	f000 ff12 	bl	80016dc <HAL_GetTick>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4a20      	ldr	r2, [pc, #128]	@ (800093c <process_button_pad_value+0xb4>)
 80008bc:	6013      	str	r3, [r2, #0]
      }
      break;
 80008be:	e031      	b.n	8000924 <process_button_pad_value+0x9c>
    }
    case BOUNCE:{
      if(HAL_GetTick() - curr_time >= 50 ){
 80008c0:	f000 ff0c 	bl	80016dc <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <process_button_pad_value+0xb4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	2b31      	cmp	r3, #49	@ 0x31
 80008ce:	d92b      	bls.n	8000928 <process_button_pad_value+0xa0>
        //50ms has passed
        if(btn_pad_value){
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d004      	beq.n	80008e0 <process_button_pad_value+0x58>
          btn_sm_state = PRESSED;
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <process_button_pad_value+0xb0>)
 80008d8:	2202      	movs	r2, #2
 80008da:	701a      	strb	r2, [r3, #0]
          return btn_pad_value;
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	e027      	b.n	8000930 <process_button_pad_value+0xa8>
        }
        else
          btn_sm_state = NOT_PRESSED;
 80008e0:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <process_button_pad_value+0xb0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80008e6:	e01f      	b.n	8000928 <process_button_pad_value+0xa0>
    }
    case PRESSED:{
      if(!btn_pad_value){
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d108      	bne.n	8000900 <process_button_pad_value+0x78>
        btn_sm_state = BOUNCE;
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <process_button_pad_value+0xb0>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
        curr_time = HAL_GetTick();
 80008f4:	f000 fef2 	bl	80016dc <HAL_GetTick>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4a10      	ldr	r2, [pc, #64]	@ (800093c <process_button_pad_value+0xb4>)
 80008fc:	6013      	str	r3, [r2, #0]
				if(HAL_GetTick() - curr_time >= 300 ){
					btn_sm_state = BOUNCE;
					curr_time = HAL_GetTick();
				}
			}
      break;
 80008fe:	e015      	b.n	800092c <process_button_pad_value+0xa4>
				if(HAL_GetTick() - curr_time >= 300 ){
 8000900:	f000 feec 	bl	80016dc <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <process_button_pad_value+0xb4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000910:	d30c      	bcc.n	800092c <process_button_pad_value+0xa4>
					btn_sm_state = BOUNCE;
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <process_button_pad_value+0xb0>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
					curr_time = HAL_GetTick();
 8000918:	f000 fee0 	bl	80016dc <HAL_GetTick>
 800091c:	4603      	mov	r3, r0
 800091e:	4a07      	ldr	r2, [pc, #28]	@ (800093c <process_button_pad_value+0xb4>)
 8000920:	6013      	str	r3, [r2, #0]
      break;
 8000922:	e003      	b.n	800092c <process_button_pad_value+0xa4>
      break;
 8000924:	bf00      	nop
 8000926:	e002      	b.n	800092e <process_button_pad_value+0xa6>
      break;
 8000928:	bf00      	nop
 800092a:	e000      	b.n	800092e <process_button_pad_value+0xa6>
      break;
 800092c:	bf00      	nop
    }

  }

  return 0;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000084 	.word	0x20000084
 800093c:	20000088 	.word	0x20000088

08000940 <read_keypad>:


uint16_t read_keypad (void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
	uint16_t key_state = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	80fb      	strh	r3, [r7, #6]
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  //Pull the R1 low
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000950:	488d      	ldr	r0, [pc, #564]	@ (8000b88 <read_keypad+0x248>)
 8000952:	f001 f975 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800095c:	488a      	ldr	r0, [pc, #552]	@ (8000b88 <read_keypad+0x248>)
 800095e:	f001 f96f 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000968:	4887      	ldr	r0, [pc, #540]	@ (8000b88 <read_keypad+0x248>)
 800096a:	f001 f969 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000974:	4884      	ldr	r0, [pc, #528]	@ (8000b88 <read_keypad+0x248>)
 8000976:	f001 f963 	bl	8001c40 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 800097a:	2140      	movs	r1, #64	@ 0x40
 800097c:	4883      	ldr	r0, [pc, #524]	@ (8000b8c <read_keypad+0x24c>)
 800097e:	f001 f947 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d103      	bne.n	8000990 <read_keypad+0x50>
	{
		key_state |= (1 << 0); // button 1
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	487e      	ldr	r0, [pc, #504]	@ (8000b8c <read_keypad+0x24c>)
 8000994:	f001 f93c 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d103      	bne.n	80009a6 <read_keypad+0x66>
	{
		key_state |= (1 << 1); // button 2
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 80009a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009aa:	4878      	ldr	r0, [pc, #480]	@ (8000b8c <read_keypad+0x24c>)
 80009ac:	f001 f930 	bl	8001c10 <HAL_GPIO_ReadPin>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d103      	bne.n	80009be <read_keypad+0x7e>
	{
		key_state |= (1 << 2); // button 3
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 80009be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c2:	4872      	ldr	r0, [pc, #456]	@ (8000b8c <read_keypad+0x24c>)
 80009c4:	f001 f924 	bl	8001c10 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d103      	bne.n	80009d6 <read_keypad+0x96>
	{
		key_state |= (1 << 3); // button A
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	80fb      	strh	r3, [r7, #6]
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009dc:	486a      	ldr	r0, [pc, #424]	@ (8000b88 <read_keypad+0x248>)
 80009de:	f001 f92f 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Pull the R2 High
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e8:	4867      	ldr	r0, [pc, #412]	@ (8000b88 <read_keypad+0x248>)
 80009ea:	f001 f929 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f4:	4864      	ldr	r0, [pc, #400]	@ (8000b88 <read_keypad+0x248>)
 80009f6:	f001 f923 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a00:	4861      	ldr	r0, [pc, #388]	@ (8000b88 <read_keypad+0x248>)
 8000a02:	f001 f91d 	bl	8001c40 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8000a06:	2140      	movs	r1, #64	@ 0x40
 8000a08:	4860      	ldr	r0, [pc, #384]	@ (8000b8c <read_keypad+0x24c>)
 8000a0a:	f001 f901 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d103      	bne.n	8000a1c <read_keypad+0xdc>
	{
		key_state |= (1 << 4); // button 4
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8000a1c:	2180      	movs	r1, #128	@ 0x80
 8000a1e:	485b      	ldr	r0, [pc, #364]	@ (8000b8c <read_keypad+0x24c>)
 8000a20:	f001 f8f6 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d103      	bne.n	8000a32 <read_keypad+0xf2>
	{
		key_state |= (1 << 5); // button 5
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8000a32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a36:	4855      	ldr	r0, [pc, #340]	@ (8000b8c <read_keypad+0x24c>)
 8000a38:	f001 f8ea 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d103      	bne.n	8000a4a <read_keypad+0x10a>
	{
		key_state |= (1 << 6); // button 6
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a48:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8000a4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a4e:	484f      	ldr	r0, [pc, #316]	@ (8000b8c <read_keypad+0x24c>)
 8000a50:	f001 f8de 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d103      	bne.n	8000a62 <read_keypad+0x122>
	{
		key_state |= (1 << 7); // button B
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a60:	80fb      	strh	r3, [r7, #6]
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a68:	4847      	ldr	r0, [pc, #284]	@ (8000b88 <read_keypad+0x248>)
 8000a6a:	f001 f8e9 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a74:	4844      	ldr	r0, [pc, #272]	@ (8000b88 <read_keypad+0x248>)
 8000a76:	f001 f8e3 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Pull the R3 High
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a80:	4841      	ldr	r0, [pc, #260]	@ (8000b88 <read_keypad+0x248>)
 8000a82:	f001 f8dd 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8000a86:	2201      	movs	r2, #1
 8000a88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a8c:	483e      	ldr	r0, [pc, #248]	@ (8000b88 <read_keypad+0x248>)
 8000a8e:	f001 f8d7 	bl	8001c40 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8000a92:	2140      	movs	r1, #64	@ 0x40
 8000a94:	483d      	ldr	r0, [pc, #244]	@ (8000b8c <read_keypad+0x24c>)
 8000a96:	f001 f8bb 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d103      	bne.n	8000aa8 <read_keypad+0x168>
	{
		key_state |= (1 << 8); // button 7
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aa6:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8000aa8:	2180      	movs	r1, #128	@ 0x80
 8000aaa:	4838      	ldr	r0, [pc, #224]	@ (8000b8c <read_keypad+0x24c>)
 8000aac:	f001 f8b0 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d103      	bne.n	8000abe <read_keypad+0x17e>
	{
		key_state |= (1 << 9); // button 8
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000abc:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8000abe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ac2:	4832      	ldr	r0, [pc, #200]	@ (8000b8c <read_keypad+0x24c>)
 8000ac4:	f001 f8a4 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d103      	bne.n	8000ad6 <read_keypad+0x196>
	{
		key_state |= (1 << 10); // button 9
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ad4:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8000ad6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ada:	482c      	ldr	r0, [pc, #176]	@ (8000b8c <read_keypad+0x24c>)
 8000adc:	f001 f898 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <read_keypad+0x1ae>
	{
		key_state |= (1 << 11); // button C
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000aec:	80fb      	strh	r3, [r7, #6]
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8000aee:	2201      	movs	r2, #1
 8000af0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000af4:	4824      	ldr	r0, [pc, #144]	@ (8000b88 <read_keypad+0x248>)
 8000af6:	f001 f8a3 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b00:	4821      	ldr	r0, [pc, #132]	@ (8000b88 <read_keypad+0x248>)
 8000b02:	f001 f89d 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b0c:	481e      	ldr	r0, [pc, #120]	@ (8000b88 <read_keypad+0x248>)
 8000b0e:	f001 f897 	bl	8001c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Pull the R4 High
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b18:	481b      	ldr	r0, [pc, #108]	@ (8000b88 <read_keypad+0x248>)
 8000b1a:	f001 f891 	bl	8001c40 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8000b1e:	2140      	movs	r1, #64	@ 0x40
 8000b20:	481a      	ldr	r0, [pc, #104]	@ (8000b8c <read_keypad+0x24c>)
 8000b22:	f001 f875 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d103      	bne.n	8000b34 <read_keypad+0x1f4>
	{
		key_state |= (1 << 12); // button *
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b32:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8000b34:	2180      	movs	r1, #128	@ 0x80
 8000b36:	4815      	ldr	r0, [pc, #84]	@ (8000b8c <read_keypad+0x24c>)
 8000b38:	f001 f86a 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d103      	bne.n	8000b4a <read_keypad+0x20a>
	{
		key_state |= (1 << 13); // button 0
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b48:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8000b4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b4e:	480f      	ldr	r0, [pc, #60]	@ (8000b8c <read_keypad+0x24c>)
 8000b50:	f001 f85e 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <read_keypad+0x222>
	{
		key_state |= (1 << 14); // button #
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b60:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8000b62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b66:	4809      	ldr	r0, [pc, #36]	@ (8000b8c <read_keypad+0x24c>)
 8000b68:	f001 f852 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d105      	bne.n	8000b7e <read_keypad+0x23e>
	{
		key_state |= (1 << 15); // button D
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000b7c:	80fb      	strh	r3, [r7, #6]
	}

	return key_state ;
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40020800 	.word	0x40020800

08000b90 <delete_data>:
	uint16_t len;
}parameter_t;

parameter_t data;

void delete_data(parameter_t *data) {
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
    if (data->len > 0) { // Kiểm tra xem có dữ liệu để xóa không
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	895b      	ldrh	r3, [r3, #10]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00b      	beq.n	8000bb8 <delete_data+0x28>
        data->len--; // Giảm độ dài
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	895b      	ldrh	r3, [r3, #10]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	815a      	strh	r2, [r3, #10]
        data->payload[data->len] = '\0'; // �?ặt ký tự cuối thành '\0'
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	895b      	ldrh	r3, [r3, #10]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	5499      	strb	r1, [r3, r2]
    }
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <add_data>:

void add_data(parameter_t *data, char c) {
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	70fb      	strb	r3, [r7, #3]
    if (data->len < 10) { // Đảm bảo không vượt quá mảng
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	895b      	ldrh	r3, [r3, #10]
 8000bd4:	2b09      	cmp	r3, #9
 8000bd6:	d811      	bhi.n	8000bfc <add_data+0x38>
        data->payload[data->len] = c; // Thêm ký tự vào vị trí tiếp theo
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	895b      	ldrh	r3, [r3, #10]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	78fa      	ldrb	r2, [r7, #3]
 8000be2:	545a      	strb	r2, [r3, r1]
        data->len++;                   // Cập nhật độ dài
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	895b      	ldrh	r3, [r3, #10]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	815a      	strh	r2, [r3, #10]
        data->payload[data->len] = '\0'; // Đảm bảo kết thúc chuỗi
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	895b      	ldrh	r3, [r3, #10]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	5499      	strb	r1, [r3, r2]
    }
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0e:	f000 fcff 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c12:	f000 fa0d 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c16:	f000 faa5 	bl	8001164 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c1a:	f000 fa75 	bl	8001108 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  CLCD_I2C_Init(&LCD1,&hi2c1,0x4e,20,4);
 8000c1e:	2304      	movs	r3, #4
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2314      	movs	r3, #20
 8000c24:	224e      	movs	r2, #78	@ 0x4e
 8000c26:	49b8      	ldr	r1, [pc, #736]	@ (8000f08 <main+0x300>)
 8000c28:	48b8      	ldr	r0, [pc, #736]	@ (8000f0c <main+0x304>)
 8000c2a:	f7ff fd15 	bl	8000658 <CLCD_I2C_Init>
  CLCD_I2C_SetCursor(&LCD1, 3, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2103      	movs	r1, #3
 8000c32:	48b6      	ldr	r0, [pc, #728]	@ (8000f0c <main+0x304>)
 8000c34:	f7ff fd80 	bl	8000738 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1, "ENTER PASSWORD");
 8000c38:	49b5      	ldr	r1, [pc, #724]	@ (8000f10 <main+0x308>)
 8000c3a:	48b4      	ldr	r0, [pc, #720]	@ (8000f0c <main+0x304>)
 8000c3c:	f7ff fdcf 	bl	80007de <CLCD_I2C_WriteString>

// flash_unlock();
// flash_erease(FLASH_SECTOR_6);
// flash_write_arr(0x08040000,(uint8_t *)&parameter,sizeof(parameter));
// flash_lock();
 flash_read_arr(0x08040000, (uint8_t*)&parameter_read, sizeof(parameter_read));
 8000c40:	220e      	movs	r2, #14
 8000c42:	49b4      	ldr	r1, [pc, #720]	@ (8000f14 <main+0x30c>)
 8000c44:	48b4      	ldr	r0, [pc, #720]	@ (8000f18 <main+0x310>)
 8000c46:	f7ff fdf1 	bl	800082c <flash_read_arr>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	  static parameter_t password = {{0},0};
  	  uint16_t btn_value;
  	  btn_value = process_button_pad_value(read_keypad());
 8000c4a:	f7ff fe79 	bl	8000940 <read_keypad>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fe19 	bl	8000888 <process_button_pad_value>
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
  	  if (btn_value) {
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f4      	beq.n	8000c4a <main+0x42>
	  					switch (btn_value) {
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c66:	f000 819e 	beq.w	8000fa6 <main+0x39e>
 8000c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c6e:	f300 81c8 	bgt.w	8001002 <main+0x3fa>
 8000c72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000c76:	f000 8191 	beq.w	8000f9c <main+0x394>
 8000c7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000c7e:	f300 81c0 	bgt.w	8001002 <main+0x3fa>
 8000c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c86:	f000 8174 	beq.w	8000f72 <main+0x36a>
 8000c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c8e:	f300 81b8 	bgt.w	8001002 <main+0x3fa>
 8000c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c96:	f000 8167 	beq.w	8000f68 <main+0x360>
 8000c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c9e:	f300 81b0 	bgt.w	8001002 <main+0x3fa>
 8000ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ca6:	f000 813d 	beq.w	8000f24 <main+0x31c>
 8000caa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000cae:	f300 81a8 	bgt.w	8001002 <main+0x3fa>
 8000cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cb6:	f000 8112 	beq.w	8000ede <main+0x2d6>
 8000cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cbe:	f300 81a0 	bgt.w	8001002 <main+0x3fa>
 8000cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cc6:	f000 80f5 	beq.w	8000eb4 <main+0x2ac>
 8000cca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cce:	f300 8198 	bgt.w	8001002 <main+0x3fa>
 8000cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cd6:	f000 80d8 	beq.w	8000e8a <main+0x282>
 8000cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cde:	f300 8190 	bgt.w	8001002 <main+0x3fa>
 8000ce2:	2b80      	cmp	r3, #128	@ 0x80
 8000ce4:	f000 818f 	beq.w	8001006 <main+0x3fe>
 8000ce8:	2b80      	cmp	r3, #128	@ 0x80
 8000cea:	f300 818a 	bgt.w	8001002 <main+0x3fa>
 8000cee:	2b20      	cmp	r3, #32
 8000cf0:	dc4a      	bgt.n	8000d88 <main+0x180>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f340 8185 	ble.w	8001002 <main+0x3fa>
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	2b1f      	cmp	r3, #31
 8000cfc:	f200 8181 	bhi.w	8001002 <main+0x3fa>
 8000d00:	a201      	add	r2, pc, #4	@ (adr r2, 8000d08 <main+0x100>)
 8000d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d06:	bf00      	nop
 8000d08:	08000d8f 	.word	0x08000d8f
 8000d0c:	08000db9 	.word	0x08000db9
 8000d10:	08001003 	.word	0x08001003
 8000d14:	08000de3 	.word	0x08000de3
 8000d18:	08001003 	.word	0x08001003
 8000d1c:	08001003 	.word	0x08001003
 8000d20:	08001003 	.word	0x08001003
 8000d24:	08001003 	.word	0x08001003
 8000d28:	08001003 	.word	0x08001003
 8000d2c:	08001003 	.word	0x08001003
 8000d30:	08001003 	.word	0x08001003
 8000d34:	08001003 	.word	0x08001003
 8000d38:	08001003 	.word	0x08001003
 8000d3c:	08001003 	.word	0x08001003
 8000d40:	08001003 	.word	0x08001003
 8000d44:	08000e0d 	.word	0x08000e0d
 8000d48:	08001003 	.word	0x08001003
 8000d4c:	08001003 	.word	0x08001003
 8000d50:	08001003 	.word	0x08001003
 8000d54:	08001003 	.word	0x08001003
 8000d58:	08001003 	.word	0x08001003
 8000d5c:	08001003 	.word	0x08001003
 8000d60:	08001003 	.word	0x08001003
 8000d64:	08001003 	.word	0x08001003
 8000d68:	08001003 	.word	0x08001003
 8000d6c:	08001003 	.word	0x08001003
 8000d70:	08001003 	.word	0x08001003
 8000d74:	08001003 	.word	0x08001003
 8000d78:	08001003 	.word	0x08001003
 8000d7c:	08001003 	.word	0x08001003
 8000d80:	08001003 	.word	0x08001003
 8000d84:	08000e37 	.word	0x08000e37
 8000d88:	2b40      	cmp	r3, #64	@ 0x40
 8000d8a:	d069      	beq.n	8000e60 <main+0x258>
	  							    password.len = 0;  // reset length
	  							}
	  							 break;

	  						default:
	  							 break;
 8000d8c:	e139      	b.n	8001002 <main+0x3fa>
	  							add_data(&password, '1');
 8000d8e:	2131      	movs	r1, #49	@ 0x31
 8000d90:	4862      	ldr	r0, [pc, #392]	@ (8000f1c <main+0x314>)
 8000d92:	f7ff ff17 	bl	8000bc4 <add_data>
	  							printf("len=%d, payload=%s\n", password.len, password.payload);
 8000d96:	4b61      	ldr	r3, [pc, #388]	@ (8000f1c <main+0x314>)
 8000d98:	895b      	ldrh	r3, [r3, #10]
 8000d9a:	4a60      	ldr	r2, [pc, #384]	@ (8000f1c <main+0x314>)
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4860      	ldr	r0, [pc, #384]	@ (8000f20 <main+0x318>)
 8000da0:	f002 f94c 	bl	800303c <iprintf>
	  							CLCD_I2C_SetCursor(&LCD1, 3, 1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2103      	movs	r1, #3
 8000da8:	4858      	ldr	r0, [pc, #352]	@ (8000f0c <main+0x304>)
 8000daa:	f7ff fcc5 	bl	8000738 <CLCD_I2C_SetCursor>
	  							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8000dae:	495b      	ldr	r1, [pc, #364]	@ (8000f1c <main+0x314>)
 8000db0:	4856      	ldr	r0, [pc, #344]	@ (8000f0c <main+0x304>)
 8000db2:	f7ff fd14 	bl	80007de <CLCD_I2C_WriteString>
	  							break;
 8000db6:	e127      	b.n	8001008 <main+0x400>
	  							add_data(&password, '2');
 8000db8:	2132      	movs	r1, #50	@ 0x32
 8000dba:	4858      	ldr	r0, [pc, #352]	@ (8000f1c <main+0x314>)
 8000dbc:	f7ff ff02 	bl	8000bc4 <add_data>
	  							printf("len=%d, payload=%s\n", password.len, password.payload);
 8000dc0:	4b56      	ldr	r3, [pc, #344]	@ (8000f1c <main+0x314>)
 8000dc2:	895b      	ldrh	r3, [r3, #10]
 8000dc4:	4a55      	ldr	r2, [pc, #340]	@ (8000f1c <main+0x314>)
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4855      	ldr	r0, [pc, #340]	@ (8000f20 <main+0x318>)
 8000dca:	f002 f937 	bl	800303c <iprintf>
	  							CLCD_I2C_SetCursor(&LCD1, 3, 1);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2103      	movs	r1, #3
 8000dd2:	484e      	ldr	r0, [pc, #312]	@ (8000f0c <main+0x304>)
 8000dd4:	f7ff fcb0 	bl	8000738 <CLCD_I2C_SetCursor>
	  							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8000dd8:	4950      	ldr	r1, [pc, #320]	@ (8000f1c <main+0x314>)
 8000dda:	484c      	ldr	r0, [pc, #304]	@ (8000f0c <main+0x304>)
 8000ddc:	f7ff fcff 	bl	80007de <CLCD_I2C_WriteString>
	  							break;
 8000de0:	e112      	b.n	8001008 <main+0x400>
	  							add_data(&password, '3');
 8000de2:	2133      	movs	r1, #51	@ 0x33
 8000de4:	484d      	ldr	r0, [pc, #308]	@ (8000f1c <main+0x314>)
 8000de6:	f7ff feed 	bl	8000bc4 <add_data>
	  							printf("len=%d, payload=%s\n", password.len, password.payload);
 8000dea:	4b4c      	ldr	r3, [pc, #304]	@ (8000f1c <main+0x314>)
 8000dec:	895b      	ldrh	r3, [r3, #10]
 8000dee:	4a4b      	ldr	r2, [pc, #300]	@ (8000f1c <main+0x314>)
 8000df0:	4619      	mov	r1, r3
 8000df2:	484b      	ldr	r0, [pc, #300]	@ (8000f20 <main+0x318>)
 8000df4:	f002 f922 	bl	800303c <iprintf>
	  							CLCD_I2C_SetCursor(&LCD1, 3, 1);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	4843      	ldr	r0, [pc, #268]	@ (8000f0c <main+0x304>)
 8000dfe:	f7ff fc9b 	bl	8000738 <CLCD_I2C_SetCursor>
	  							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8000e02:	4946      	ldr	r1, [pc, #280]	@ (8000f1c <main+0x314>)
 8000e04:	4841      	ldr	r0, [pc, #260]	@ (8000f0c <main+0x304>)
 8000e06:	f7ff fcea 	bl	80007de <CLCD_I2C_WriteString>
	  							break;
 8000e0a:	e0fd      	b.n	8001008 <main+0x400>
	  							add_data(&password, '4');
 8000e0c:	2134      	movs	r1, #52	@ 0x34
 8000e0e:	4843      	ldr	r0, [pc, #268]	@ (8000f1c <main+0x314>)
 8000e10:	f7ff fed8 	bl	8000bc4 <add_data>
	  							printf("len=%d, payload=%s\n", password.len, password.payload);
 8000e14:	4b41      	ldr	r3, [pc, #260]	@ (8000f1c <main+0x314>)
 8000e16:	895b      	ldrh	r3, [r3, #10]
 8000e18:	4a40      	ldr	r2, [pc, #256]	@ (8000f1c <main+0x314>)
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4840      	ldr	r0, [pc, #256]	@ (8000f20 <main+0x318>)
 8000e1e:	f002 f90d 	bl	800303c <iprintf>
	  							CLCD_I2C_SetCursor(&LCD1, 3, 1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2103      	movs	r1, #3
 8000e26:	4839      	ldr	r0, [pc, #228]	@ (8000f0c <main+0x304>)
 8000e28:	f7ff fc86 	bl	8000738 <CLCD_I2C_SetCursor>
	  							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8000e2c:	493b      	ldr	r1, [pc, #236]	@ (8000f1c <main+0x314>)
 8000e2e:	4837      	ldr	r0, [pc, #220]	@ (8000f0c <main+0x304>)
 8000e30:	f7ff fcd5 	bl	80007de <CLCD_I2C_WriteString>
	  							break;
 8000e34:	e0e8      	b.n	8001008 <main+0x400>
	  							add_data(&password, '5');
 8000e36:	2135      	movs	r1, #53	@ 0x35
 8000e38:	4838      	ldr	r0, [pc, #224]	@ (8000f1c <main+0x314>)
 8000e3a:	f7ff fec3 	bl	8000bc4 <add_data>
	  							printf("len=%d, payload=%s\n", password.len, password.payload);
 8000e3e:	4b37      	ldr	r3, [pc, #220]	@ (8000f1c <main+0x314>)
 8000e40:	895b      	ldrh	r3, [r3, #10]
 8000e42:	4a36      	ldr	r2, [pc, #216]	@ (8000f1c <main+0x314>)
 8000e44:	4619      	mov	r1, r3
 8000e46:	4836      	ldr	r0, [pc, #216]	@ (8000f20 <main+0x318>)
 8000e48:	f002 f8f8 	bl	800303c <iprintf>
	  							CLCD_I2C_SetCursor(&LCD1, 3, 1);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2103      	movs	r1, #3
 8000e50:	482e      	ldr	r0, [pc, #184]	@ (8000f0c <main+0x304>)
 8000e52:	f7ff fc71 	bl	8000738 <CLCD_I2C_SetCursor>
	  							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8000e56:	4931      	ldr	r1, [pc, #196]	@ (8000f1c <main+0x314>)
 8000e58:	482c      	ldr	r0, [pc, #176]	@ (8000f0c <main+0x304>)
 8000e5a:	f7ff fcc0 	bl	80007de <CLCD_I2C_WriteString>
	  							break;
 8000e5e:	e0d3      	b.n	8001008 <main+0x400>
	  							add_data(&password, '6');
 8000e60:	2136      	movs	r1, #54	@ 0x36
 8000e62:	482e      	ldr	r0, [pc, #184]	@ (8000f1c <main+0x314>)
 8000e64:	f7ff feae 	bl	8000bc4 <add_data>
	  							printf("len=%d, payload=%s\n", password.len, password.payload);
 8000e68:	4b2c      	ldr	r3, [pc, #176]	@ (8000f1c <main+0x314>)
 8000e6a:	895b      	ldrh	r3, [r3, #10]
 8000e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8000f1c <main+0x314>)
 8000e6e:	4619      	mov	r1, r3
 8000e70:	482b      	ldr	r0, [pc, #172]	@ (8000f20 <main+0x318>)
 8000e72:	f002 f8e3 	bl	800303c <iprintf>
	  							CLCD_I2C_SetCursor(&LCD1, 3, 1);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2103      	movs	r1, #3
 8000e7a:	4824      	ldr	r0, [pc, #144]	@ (8000f0c <main+0x304>)
 8000e7c:	f7ff fc5c 	bl	8000738 <CLCD_I2C_SetCursor>
	  							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8000e80:	4926      	ldr	r1, [pc, #152]	@ (8000f1c <main+0x314>)
 8000e82:	4822      	ldr	r0, [pc, #136]	@ (8000f0c <main+0x304>)
 8000e84:	f7ff fcab 	bl	80007de <CLCD_I2C_WriteString>
	  							break;
 8000e88:	e0be      	b.n	8001008 <main+0x400>
	  							add_data(&password, '7');
 8000e8a:	2137      	movs	r1, #55	@ 0x37
 8000e8c:	4823      	ldr	r0, [pc, #140]	@ (8000f1c <main+0x314>)
 8000e8e:	f7ff fe99 	bl	8000bc4 <add_data>
	  							printf("len=%d, payload=%s\n", password.len, password.payload);
 8000e92:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <main+0x314>)
 8000e94:	895b      	ldrh	r3, [r3, #10]
 8000e96:	4a21      	ldr	r2, [pc, #132]	@ (8000f1c <main+0x314>)
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4821      	ldr	r0, [pc, #132]	@ (8000f20 <main+0x318>)
 8000e9c:	f002 f8ce 	bl	800303c <iprintf>
	  							CLCD_I2C_SetCursor(&LCD1, 3, 1);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	4819      	ldr	r0, [pc, #100]	@ (8000f0c <main+0x304>)
 8000ea6:	f7ff fc47 	bl	8000738 <CLCD_I2C_SetCursor>
	  							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8000eaa:	491c      	ldr	r1, [pc, #112]	@ (8000f1c <main+0x314>)
 8000eac:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <main+0x304>)
 8000eae:	f7ff fc96 	bl	80007de <CLCD_I2C_WriteString>
	  							break;
 8000eb2:	e0a9      	b.n	8001008 <main+0x400>
	  							add_data(&password, '8');
 8000eb4:	2138      	movs	r1, #56	@ 0x38
 8000eb6:	4819      	ldr	r0, [pc, #100]	@ (8000f1c <main+0x314>)
 8000eb8:	f7ff fe84 	bl	8000bc4 <add_data>
	  							printf("len=%d, payload=%s\n", password.len, password.payload);
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <main+0x314>)
 8000ebe:	895b      	ldrh	r3, [r3, #10]
 8000ec0:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <main+0x314>)
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4816      	ldr	r0, [pc, #88]	@ (8000f20 <main+0x318>)
 8000ec6:	f002 f8b9 	bl	800303c <iprintf>
	  							CLCD_I2C_SetCursor(&LCD1, 3, 1);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2103      	movs	r1, #3
 8000ece:	480f      	ldr	r0, [pc, #60]	@ (8000f0c <main+0x304>)
 8000ed0:	f7ff fc32 	bl	8000738 <CLCD_I2C_SetCursor>
	  							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8000ed4:	4911      	ldr	r1, [pc, #68]	@ (8000f1c <main+0x314>)
 8000ed6:	480d      	ldr	r0, [pc, #52]	@ (8000f0c <main+0x304>)
 8000ed8:	f7ff fc81 	bl	80007de <CLCD_I2C_WriteString>
	  							break;
 8000edc:	e094      	b.n	8001008 <main+0x400>
	  							add_data(&password, '9');
 8000ede:	2139      	movs	r1, #57	@ 0x39
 8000ee0:	480e      	ldr	r0, [pc, #56]	@ (8000f1c <main+0x314>)
 8000ee2:	f7ff fe6f 	bl	8000bc4 <add_data>
	  							printf("len=%d, payload=%s\n", password.len, password.payload);
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <main+0x314>)
 8000ee8:	895b      	ldrh	r3, [r3, #10]
 8000eea:	4a0c      	ldr	r2, [pc, #48]	@ (8000f1c <main+0x314>)
 8000eec:	4619      	mov	r1, r3
 8000eee:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <main+0x318>)
 8000ef0:	f002 f8a4 	bl	800303c <iprintf>
	  							CLCD_I2C_SetCursor(&LCD1, 3, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	4804      	ldr	r0, [pc, #16]	@ (8000f0c <main+0x304>)
 8000efa:	f7ff fc1d 	bl	8000738 <CLCD_I2C_SetCursor>
	  							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8000efe:	4907      	ldr	r1, [pc, #28]	@ (8000f1c <main+0x314>)
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <main+0x304>)
 8000f02:	f7ff fc6c 	bl	80007de <CLCD_I2C_WriteString>
	  							break;
 8000f06:	e07f      	b.n	8001008 <main+0x400>
 8000f08:	2000008c 	.word	0x2000008c
 8000f0c:	200000e0 	.word	0x200000e0
 8000f10:	08003d30 	.word	0x08003d30
 8000f14:	200000ec 	.word	0x200000ec
 8000f18:	08040000 	.word	0x08040000
 8000f1c:	200000fc 	.word	0x200000fc
 8000f20:	08003d40 	.word	0x08003d40
	  							delete_data(&password);
 8000f24:	4839      	ldr	r0, [pc, #228]	@ (800100c <main+0x404>)
 8000f26:	f7ff fe33 	bl	8000b90 <delete_data>
	  							printf("len=%d, payload=%s\n", password.len, password.payload);
 8000f2a:	4b38      	ldr	r3, [pc, #224]	@ (800100c <main+0x404>)
 8000f2c:	895b      	ldrh	r3, [r3, #10]
 8000f2e:	4a37      	ldr	r2, [pc, #220]	@ (800100c <main+0x404>)
 8000f30:	4619      	mov	r1, r3
 8000f32:	4837      	ldr	r0, [pc, #220]	@ (8001010 <main+0x408>)
 8000f34:	f002 f882 	bl	800303c <iprintf>
	  							CLCD_I2C_SetCursor(&LCD1, 3+password.len, 1);
 8000f38:	4b34      	ldr	r3, [pc, #208]	@ (800100c <main+0x404>)
 8000f3a:	895b      	ldrh	r3, [r3, #10]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	3303      	adds	r3, #3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	4833      	ldr	r0, [pc, #204]	@ (8001014 <main+0x40c>)
 8000f48:	f7ff fbf6 	bl	8000738 <CLCD_I2C_SetCursor>
	  							CLCD_I2C_WriteString(&LCD1, " ");
 8000f4c:	4932      	ldr	r1, [pc, #200]	@ (8001018 <main+0x410>)
 8000f4e:	4831      	ldr	r0, [pc, #196]	@ (8001014 <main+0x40c>)
 8000f50:	f7ff fc45 	bl	80007de <CLCD_I2C_WriteString>
	  							CLCD_I2C_SetCursor(&LCD1, 3, 1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2103      	movs	r1, #3
 8000f58:	482e      	ldr	r0, [pc, #184]	@ (8001014 <main+0x40c>)
 8000f5a:	f7ff fbed 	bl	8000738 <CLCD_I2C_SetCursor>
	  							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8000f5e:	492b      	ldr	r1, [pc, #172]	@ (800100c <main+0x404>)
 8000f60:	482c      	ldr	r0, [pc, #176]	@ (8001014 <main+0x40c>)
 8000f62:	f7ff fc3c 	bl	80007de <CLCD_I2C_WriteString>
	  							break;
 8000f66:	e04f      	b.n	8001008 <main+0x400>
	  							CLCD_I2C_WriteString(&LCD1, "*");
 8000f68:	492c      	ldr	r1, [pc, #176]	@ (800101c <main+0x414>)
 8000f6a:	482a      	ldr	r0, [pc, #168]	@ (8001014 <main+0x40c>)
 8000f6c:	f7ff fc37 	bl	80007de <CLCD_I2C_WriteString>
	  							break;
 8000f70:	e04a      	b.n	8001008 <main+0x400>
	  							add_data(&password, '0');
 8000f72:	2130      	movs	r1, #48	@ 0x30
 8000f74:	4825      	ldr	r0, [pc, #148]	@ (800100c <main+0x404>)
 8000f76:	f7ff fe25 	bl	8000bc4 <add_data>
	  							printf("len=%d, payload=%s\n", password.len, password.payload);
 8000f7a:	4b24      	ldr	r3, [pc, #144]	@ (800100c <main+0x404>)
 8000f7c:	895b      	ldrh	r3, [r3, #10]
 8000f7e:	4a23      	ldr	r2, [pc, #140]	@ (800100c <main+0x404>)
 8000f80:	4619      	mov	r1, r3
 8000f82:	4823      	ldr	r0, [pc, #140]	@ (8001010 <main+0x408>)
 8000f84:	f002 f85a 	bl	800303c <iprintf>
	  							CLCD_I2C_SetCursor(&LCD1, 3, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2103      	movs	r1, #3
 8000f8c:	4821      	ldr	r0, [pc, #132]	@ (8001014 <main+0x40c>)
 8000f8e:	f7ff fbd3 	bl	8000738 <CLCD_I2C_SetCursor>
	  							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8000f92:	491e      	ldr	r1, [pc, #120]	@ (800100c <main+0x404>)
 8000f94:	481f      	ldr	r0, [pc, #124]	@ (8001014 <main+0x40c>)
 8000f96:	f7ff fc22 	bl	80007de <CLCD_I2C_WriteString>
	  							break;
 8000f9a:	e035      	b.n	8001008 <main+0x400>
	  							CLCD_I2C_WriteString(&LCD1, "#");
 8000f9c:	4920      	ldr	r1, [pc, #128]	@ (8001020 <main+0x418>)
 8000f9e:	481d      	ldr	r0, [pc, #116]	@ (8001014 <main+0x40c>)
 8000fa0:	f7ff fc1d 	bl	80007de <CLCD_I2C_WriteString>
	  							break;
 8000fa4:	e030      	b.n	8001008 <main+0x400>
	  							if (strcmp((char*)password.payload, (char*)parameter_read.password) == 0) {
 8000fa6:	491f      	ldr	r1, [pc, #124]	@ (8001024 <main+0x41c>)
 8000fa8:	4818      	ldr	r0, [pc, #96]	@ (800100c <main+0x404>)
 8000faa:	f7ff f919 	bl	80001e0 <strcmp>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10c      	bne.n	8000fce <main+0x3c6>
	  								CLCD_I2C_Clear(&LCD1);
 8000fb4:	4817      	ldr	r0, [pc, #92]	@ (8001014 <main+0x40c>)
 8000fb6:	f7ff fc29 	bl	800080c <CLCD_I2C_Clear>
	  							    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4815      	ldr	r0, [pc, #84]	@ (8001014 <main+0x40c>)
 8000fc0:	f7ff fbba 	bl	8000738 <CLCD_I2C_SetCursor>
	  							    CLCD_I2C_WriteString(&LCD1, "successful");
 8000fc4:	4918      	ldr	r1, [pc, #96]	@ (8001028 <main+0x420>)
 8000fc6:	4813      	ldr	r0, [pc, #76]	@ (8001014 <main+0x40c>)
 8000fc8:	f7ff fc09 	bl	80007de <CLCD_I2C_WriteString>
	  							 break;
 8000fcc:	e01c      	b.n	8001008 <main+0x400>
	  								CLCD_I2C_Clear(&LCD1);
 8000fce:	4811      	ldr	r0, [pc, #68]	@ (8001014 <main+0x40c>)
 8000fd0:	f7ff fc1c 	bl	800080c <CLCD_I2C_Clear>
	  							    CLCD_I2C_SetCursor(&LCD1, 3, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2103      	movs	r1, #3
 8000fd8:	480e      	ldr	r0, [pc, #56]	@ (8001014 <main+0x40c>)
 8000fda:	f7ff fbad 	bl	8000738 <CLCD_I2C_SetCursor>
	  							    CLCD_I2C_WriteString(&LCD1, "ENTER PASSWORD");
 8000fde:	4913      	ldr	r1, [pc, #76]	@ (800102c <main+0x424>)
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <main+0x40c>)
 8000fe2:	f7ff fbfc 	bl	80007de <CLCD_I2C_WriteString>
	  							    CLCD_I2C_SetCursor(&LCD1, 3, 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2103      	movs	r1, #3
 8000fea:	480a      	ldr	r0, [pc, #40]	@ (8001014 <main+0x40c>)
 8000fec:	f7ff fba4 	bl	8000738 <CLCD_I2C_SetCursor>
	  							    memset(password.payload, 0, sizeof(password.payload));  // reset data
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4805      	ldr	r0, [pc, #20]	@ (800100c <main+0x404>)
 8000ff6:	f002 f876 	bl	80030e6 <memset>
	  							    password.len = 0;  // reset length
 8000ffa:	4b04      	ldr	r3, [pc, #16]	@ (800100c <main+0x404>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	815a      	strh	r2, [r3, #10]
	  							 break;
 8001000:	e002      	b.n	8001008 <main+0x400>
	  							 break;
 8001002:	bf00      	nop
 8001004:	e621      	b.n	8000c4a <main+0x42>
	  							break;
 8001006:	bf00      	nop
  {
 8001008:	e61f      	b.n	8000c4a <main+0x42>
 800100a:	bf00      	nop
 800100c:	200000fc 	.word	0x200000fc
 8001010:	08003d40 	.word	0x08003d40
 8001014:	200000e0 	.word	0x200000e0
 8001018:	08003d54 	.word	0x08003d54
 800101c:	08003d58 	.word	0x08003d58
 8001020:	08003d5c 	.word	0x08003d5c
 8001024:	200000ec 	.word	0x200000ec
 8001028:	08003d60 	.word	0x08003d60
 800102c:	08003d30 	.word	0x08003d30

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	@ 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2230      	movs	r2, #48	@ 0x30
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f002 f851 	bl	80030e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <SystemClock_Config+0xd0>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	4a28      	ldr	r2, [pc, #160]	@ (8001100 <SystemClock_Config+0xd0>)
 800105e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001062:	6413      	str	r3, [r2, #64]	@ 0x40
 8001064:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <SystemClock_Config+0xd0>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <SystemClock_Config+0xd4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800107c:	4a21      	ldr	r2, [pc, #132]	@ (8001104 <SystemClock_Config+0xd4>)
 800107e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <SystemClock_Config+0xd4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001098:	2310      	movs	r3, #16
 800109a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109c:	2302      	movs	r3, #2
 800109e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010a4:	2310      	movs	r3, #16
 80010a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010ae:	2304      	movs	r3, #4
 80010b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b2:	2307      	movs	r3, #7
 80010b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fa78 	bl	80025b0 <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010c6:	f000 f8f5 	bl	80012b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ce:	2302      	movs	r3, #2
 80010d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2102      	movs	r1, #2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fcda 	bl	8002aa0 <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010f2:	f000 f8df 	bl	80012b4 <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3750      	adds	r7, #80	@ 0x50
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <MX_I2C1_Init+0x50>)
 800110e:	4a13      	ldr	r2, [pc, #76]	@ (800115c <MX_I2C1_Init+0x54>)
 8001110:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001114:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <MX_I2C1_Init+0x58>)
 8001116:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001118:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001126:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800112a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001146:	f000 fd95 	bl	8001c74 <HAL_I2C_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001150:	f000 f8b0 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000008c 	.word	0x2000008c
 800115c:	40005400 	.word	0x40005400
 8001160:	000186a0 	.word	0x000186a0

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b49      	ldr	r3, [pc, #292]	@ (80012a4 <MX_GPIO_Init+0x140>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a48      	ldr	r2, [pc, #288]	@ (80012a4 <MX_GPIO_Init+0x140>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b46      	ldr	r3, [pc, #280]	@ (80012a4 <MX_GPIO_Init+0x140>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b42      	ldr	r3, [pc, #264]	@ (80012a4 <MX_GPIO_Init+0x140>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a41      	ldr	r2, [pc, #260]	@ (80012a4 <MX_GPIO_Init+0x140>)
 80011a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b3f      	ldr	r3, [pc, #252]	@ (80012a4 <MX_GPIO_Init+0x140>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	4b3b      	ldr	r3, [pc, #236]	@ (80012a4 <MX_GPIO_Init+0x140>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a3a      	ldr	r2, [pc, #232]	@ (80012a4 <MX_GPIO_Init+0x140>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b38      	ldr	r3, [pc, #224]	@ (80012a4 <MX_GPIO_Init+0x140>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b34      	ldr	r3, [pc, #208]	@ (80012a4 <MX_GPIO_Init+0x140>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a33      	ldr	r2, [pc, #204]	@ (80012a4 <MX_GPIO_Init+0x140>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <MX_GPIO_Init+0x140>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2120      	movs	r1, #32
 80011ee:	482e      	ldr	r0, [pc, #184]	@ (80012a8 <MX_GPIO_Init+0x144>)
 80011f0:	f000 fd26 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011fa:	482c      	ldr	r0, [pc, #176]	@ (80012ac <MX_GPIO_Init+0x148>)
 80011fc:	f000 fd20 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001206:	4829      	ldr	r0, [pc, #164]	@ (80012ac <MX_GPIO_Init+0x148>)
 8001208:	f000 fd1a 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800120c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001212:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4823      	ldr	r0, [pc, #140]	@ (80012b0 <MX_GPIO_Init+0x14c>)
 8001224:	f000 fb70 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001228:	230c      	movs	r3, #12
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001238:	2307      	movs	r3, #7
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4819      	ldr	r0, [pc, #100]	@ (80012a8 <MX_GPIO_Init+0x144>)
 8001244:	f000 fb60 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001248:	2320      	movs	r3, #32
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4812      	ldr	r0, [pc, #72]	@ (80012a8 <MX_GPIO_Init+0x144>)
 8001260:	f000 fb52 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001264:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	480b      	ldr	r0, [pc, #44]	@ (80012ac <MX_GPIO_Init+0x148>)
 800127e:	f000 fb43 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001282:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128c:	2301      	movs	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4806      	ldr	r0, [pc, #24]	@ (80012b0 <MX_GPIO_Init+0x14c>)
 8001298:	f000 fb36 	bl	8001908 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	@ 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40020800 	.word	0x40020800

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b8:	b672      	cpsid	i
}
 80012ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <Error_Handler+0x8>

080012c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <HAL_MspInit+0x4c>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a0f      	ldr	r2, [pc, #60]	@ (800130c <HAL_MspInit+0x4c>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	4a08      	ldr	r2, [pc, #32]	@ (800130c <HAL_MspInit+0x4c>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012fe:	2007      	movs	r0, #7
 8001300:	f000 face 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800

08001310 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a19      	ldr	r2, [pc, #100]	@ (8001394 <HAL_I2C_MspInit+0x84>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12b      	bne.n	800138a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <HAL_I2C_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a17      	ldr	r2, [pc, #92]	@ (8001398 <HAL_I2C_MspInit+0x88>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_I2C_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800134e:	23c0      	movs	r3, #192	@ 0xc0
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001352:	2312      	movs	r3, #18
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800135e:	2304      	movs	r3, #4
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <HAL_I2C_MspInit+0x8c>)
 800136a:	f000 facd 	bl	8001908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_I2C_MspInit+0x88>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a08      	ldr	r2, [pc, #32]	@ (8001398 <HAL_I2C_MspInit+0x88>)
 8001378:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_I2C_MspInit+0x88>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	@ 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40005400 	.word	0x40005400
 8001398:	40023800 	.word	0x40023800
 800139c:	40020400 	.word	0x40020400

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <NMI_Handler+0x4>

080013a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <MemManage_Handler+0x4>

080013b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f6:	f000 f95d 	bl	80016b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800140a:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <ITM_SendChar+0x48>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a0e      	ldr	r2, [pc, #56]	@ (8001448 <ITM_SendChar+0x48>)
 8001410:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001414:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001416:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <ITM_SendChar+0x4c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a0c      	ldr	r2, [pc, #48]	@ (800144c <ITM_SendChar+0x4c>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001422:	bf00      	nop
 8001424:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f8      	beq.n	8001424 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001432:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	6013      	str	r3, [r2, #0]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000edfc 	.word	0xe000edfc
 800144c:	e0000e00 	.word	0xe0000e00

08001450 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e00a      	b.n	8001478 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001462:	f3af 8000 	nop.w
 8001466:	4601      	mov	r1, r0
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	b2ca      	uxtb	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbf0      	blt.n	8001462 <_read+0x12>
  }

  return len;
 8001480:	687b      	ldr	r3, [r7, #4]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e009      	b.n	80014b0 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ffab 	bl	8001400 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbf1      	blt.n	800149c <_write+0x12>
  }
  return len;
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <_close>:

int _close(int file)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ea:	605a      	str	r2, [r3, #4]
  return 0;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_isatty>:

int _isatty(int file)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001534:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800155c:	f001 fe12 	bl	8003184 <__errno>
 8001560:	4603      	mov	r3, r0
 8001562:	220c      	movs	r2, #12
 8001564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	4a05      	ldr	r2, [pc, #20]	@ (8001590 <_sbrk+0x64>)
 800157c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20018000 	.word	0x20018000
 800158c:	00000400 	.word	0x00000400
 8001590:	20000108 	.word	0x20000108
 8001594:	20000260 	.word	0x20000260

08001598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <SystemInit+0x20>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a2:	4a05      	ldr	r2, [pc, #20]	@ (80015b8 <SystemInit+0x20>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015c0:	f7ff ffea 	bl	8001598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c4:	480c      	ldr	r0, [pc, #48]	@ (80015f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c6:	490d      	ldr	r1, [pc, #52]	@ (80015fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f001 fdd1 	bl	8003190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ee:	f7ff fb0b 	bl	8000c08 <main>
  bx  lr    
 80015f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001600:	08003dc8 	.word	0x08003dc8
  ldr r2, =_sbss
 8001604:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001608:	2000025c 	.word	0x2000025c

0800160c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001614:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <HAL_Init+0x40>)
 800161a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800161e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <HAL_Init+0x40>)
 8001626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800162a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	@ (8001650 <HAL_Init+0x40>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f931 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	2000      	movs	r0, #0
 8001640:	f000 f808 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff fe3c 	bl	80012c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <HAL_InitTick+0x54>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_InitTick+0x58>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166a:	fbb3 f3f1 	udiv	r3, r3, r1
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f93b 	bl	80018ee <HAL_SYSTICK_Config>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00e      	b.n	80016a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d80a      	bhi.n	800169e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f000 f911 	bl	80018b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001694:	4a06      	ldr	r2, [pc, #24]	@ (80016b0 <HAL_InitTick+0x5c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000008 	.word	0x20000008
 80016b0:	20000004 	.word	0x20000004

080016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_IncTick+0x20>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_IncTick+0x24>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <HAL_IncTick+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000008 	.word	0x20000008
 80016d8:	2000010c 	.word	0x2000010c

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b03      	ldr	r3, [pc, #12]	@ (80016f0 <HAL_GetTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	2000010c 	.word	0x2000010c

080016f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff ffee 	bl	80016dc <HAL_GetTick>
 8001700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d005      	beq.n	800171a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_Delay+0x44>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800171a:	bf00      	nop
 800171c:	f7ff ffde 	bl	80016dc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8f7      	bhi.n	800171c <HAL_Delay+0x28>
  {
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000008 	.word	0x20000008

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	@ (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	@ (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	@ (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	@ 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	@ 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800186c:	d301      	bcc.n	8001872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186e:	2301      	movs	r3, #1
 8001870:	e00f      	b.n	8001892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <SysTick_Config+0x40>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187a:	210f      	movs	r1, #15
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f7ff ff8e 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <SysTick_Config+0x40>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	@ (800189c <SysTick_Config+0x40>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff47 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c8:	f7ff ff5c 	bl	8001784 <__NVIC_GetPriorityGrouping>
 80018cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	6978      	ldr	r0, [r7, #20]
 80018d4:	f7ff ff8e 	bl	80017f4 <NVIC_EncodePriority>
 80018d8:	4602      	mov	r2, r0
 80018da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff5d 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e6:	bf00      	nop
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffb0 	bl	800185c <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	@ 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	e159      	b.n	8001bd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001924:	2201      	movs	r2, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	429a      	cmp	r2, r3
 800193e:	f040 8148 	bne.w	8001bd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b01      	cmp	r3, #1
 800194c:	d005      	beq.n	800195a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001956:	2b02      	cmp	r3, #2
 8001958:	d130      	bne.n	80019bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	2203      	movs	r2, #3
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001990:	2201      	movs	r2, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 0201 	and.w	r2, r3, #1
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d017      	beq.n	80019f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d123      	bne.n	8001a4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	08da      	lsrs	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3208      	adds	r2, #8
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	08da      	lsrs	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3208      	adds	r2, #8
 8001a46:	69b9      	ldr	r1, [r7, #24]
 8001a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0203 	and.w	r2, r3, #3
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a2 	beq.w	8001bd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b57      	ldr	r3, [pc, #348]	@ (8001bf0 <HAL_GPIO_Init+0x2e8>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	4a56      	ldr	r2, [pc, #344]	@ (8001bf0 <HAL_GPIO_Init+0x2e8>)
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9e:	4b54      	ldr	r3, [pc, #336]	@ (8001bf0 <HAL_GPIO_Init+0x2e8>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aaa:	4a52      	ldr	r2, [pc, #328]	@ (8001bf4 <HAL_GPIO_Init+0x2ec>)
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a49      	ldr	r2, [pc, #292]	@ (8001bf8 <HAL_GPIO_Init+0x2f0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d019      	beq.n	8001b0a <HAL_GPIO_Init+0x202>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a48      	ldr	r2, [pc, #288]	@ (8001bfc <HAL_GPIO_Init+0x2f4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d013      	beq.n	8001b06 <HAL_GPIO_Init+0x1fe>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a47      	ldr	r2, [pc, #284]	@ (8001c00 <HAL_GPIO_Init+0x2f8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00d      	beq.n	8001b02 <HAL_GPIO_Init+0x1fa>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a46      	ldr	r2, [pc, #280]	@ (8001c04 <HAL_GPIO_Init+0x2fc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d007      	beq.n	8001afe <HAL_GPIO_Init+0x1f6>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a45      	ldr	r2, [pc, #276]	@ (8001c08 <HAL_GPIO_Init+0x300>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_GPIO_Init+0x1f2>
 8001af6:	2304      	movs	r3, #4
 8001af8:	e008      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001afa:	2307      	movs	r3, #7
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001afe:	2303      	movs	r3, #3
 8001b00:	e004      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e002      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x204>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	f002 0203 	and.w	r2, r2, #3
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4093      	lsls	r3, r2
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b1c:	4935      	ldr	r1, [pc, #212]	@ (8001bf4 <HAL_GPIO_Init+0x2ec>)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2a:	4b38      	ldr	r3, [pc, #224]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b54:	4b2d      	ldr	r3, [pc, #180]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b78:	4a24      	ldr	r2, [pc, #144]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b7e:	4b23      	ldr	r3, [pc, #140]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	f67f aea2 	bls.w	8001924 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3724      	adds	r7, #36	@ 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40013800 	.word	0x40013800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40013c00 	.word	0x40013c00

08001c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	887b      	ldrh	r3, [r7, #2]
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e001      	b.n	8001c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c50:	787b      	ldrb	r3, [r7, #1]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c5c:	e003      	b.n	8001c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	041a      	lsls	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	619a      	str	r2, [r3, #24]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e12b      	b.n	8001ede <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d106      	bne.n	8001ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fb38 	bl	8001310 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2224      	movs	r2, #36	@ 0x24
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0201 	bic.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cd8:	f001 f8da 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8001cdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4a81      	ldr	r2, [pc, #516]	@ (8001ee8 <HAL_I2C_Init+0x274>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d807      	bhi.n	8001cf8 <HAL_I2C_Init+0x84>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4a80      	ldr	r2, [pc, #512]	@ (8001eec <HAL_I2C_Init+0x278>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	bf94      	ite	ls
 8001cf0:	2301      	movls	r3, #1
 8001cf2:	2300      	movhi	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	e006      	b.n	8001d06 <HAL_I2C_Init+0x92>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4a7d      	ldr	r2, [pc, #500]	@ (8001ef0 <HAL_I2C_Init+0x27c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	bf94      	ite	ls
 8001d00:	2301      	movls	r3, #1
 8001d02:	2300      	movhi	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0e7      	b.n	8001ede <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4a78      	ldr	r2, [pc, #480]	@ (8001ef4 <HAL_I2C_Init+0x280>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0c9b      	lsrs	r3, r3, #18
 8001d18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ee8 <HAL_I2C_Init+0x274>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d802      	bhi.n	8001d48 <HAL_I2C_Init+0xd4>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3301      	adds	r3, #1
 8001d46:	e009      	b.n	8001d5c <HAL_I2C_Init+0xe8>
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	4a69      	ldr	r2, [pc, #420]	@ (8001ef8 <HAL_I2C_Init+0x284>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	099b      	lsrs	r3, r3, #6
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	495c      	ldr	r1, [pc, #368]	@ (8001ee8 <HAL_I2C_Init+0x274>)
 8001d78:	428b      	cmp	r3, r1
 8001d7a:	d819      	bhi.n	8001db0 <HAL_I2C_Init+0x13c>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1e59      	subs	r1, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d8a:	1c59      	adds	r1, r3, #1
 8001d8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d90:	400b      	ands	r3, r1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <HAL_I2C_Init+0x138>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1e59      	subs	r1, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001da4:	3301      	adds	r3, #1
 8001da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001daa:	e051      	b.n	8001e50 <HAL_I2C_Init+0x1dc>
 8001dac:	2304      	movs	r3, #4
 8001dae:	e04f      	b.n	8001e50 <HAL_I2C_Init+0x1dc>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d111      	bne.n	8001ddc <HAL_I2C_Init+0x168>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1e58      	subs	r0, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	440b      	add	r3, r1
 8001dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	e012      	b.n	8001e02 <HAL_I2C_Init+0x18e>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1e58      	subs	r0, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	0099      	lsls	r1, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_Init+0x196>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e022      	b.n	8001e50 <HAL_I2C_Init+0x1dc>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10e      	bne.n	8001e30 <HAL_I2C_Init+0x1bc>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1e58      	subs	r0, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6859      	ldr	r1, [r3, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	440b      	add	r3, r1
 8001e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e24:	3301      	adds	r3, #1
 8001e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e2e:	e00f      	b.n	8001e50 <HAL_I2C_Init+0x1dc>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1e58      	subs	r0, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	0099      	lsls	r1, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	6809      	ldr	r1, [r1, #0]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6911      	ldr	r1, [r2, #16]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68d2      	ldr	r2, [r2, #12]
 8001e8a:	4311      	orrs	r1, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	000186a0 	.word	0x000186a0
 8001eec:	001e847f 	.word	0x001e847f
 8001ef0:	003d08ff 	.word	0x003d08ff
 8001ef4:	431bde83 	.word	0x431bde83
 8001ef8:	10624dd3 	.word	0x10624dd3

08001efc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	461a      	mov	r2, r3
 8001f08:	460b      	mov	r3, r1
 8001f0a:	817b      	strh	r3, [r7, #10]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff fbe4 	bl	80016dc <HAL_GetTick>
 8001f14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b20      	cmp	r3, #32
 8001f20:	f040 80e0 	bne.w	80020e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2319      	movs	r3, #25
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4970      	ldr	r1, [pc, #448]	@ (80020f0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f964 	bl	80021fc <I2C_WaitOnFlagUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e0d3      	b.n	80020e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_I2C_Master_Transmit+0x50>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e0cc      	b.n	80020e6 <HAL_I2C_Master_Transmit+0x1ea>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d007      	beq.n	8001f72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2221      	movs	r2, #33	@ 0x21
 8001f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	893a      	ldrh	r2, [r7, #8]
 8001fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4a50      	ldr	r2, [pc, #320]	@ (80020f4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fb4:	8979      	ldrh	r1, [r7, #10]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	6a3a      	ldr	r2, [r7, #32]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f89c 	bl	80020f8 <I2C_MasterRequestWrite>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e08d      	b.n	80020e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fe0:	e066      	b.n	80020b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	6a39      	ldr	r1, [r7, #32]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fa22 	bl	8002430 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00d      	beq.n	800200e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d107      	bne.n	800200a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002008:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e06b      	b.n	80020e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b04      	cmp	r3, #4
 800204a:	d11b      	bne.n	8002084 <HAL_I2C_Master_Transmit+0x188>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	d017      	beq.n	8002084 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206e:	b29b      	uxth	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	6a39      	ldr	r1, [r7, #32]
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 fa19 	bl	80024c0 <I2C_WaitOnBTFFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00d      	beq.n	80020b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	2b04      	cmp	r3, #4
 800209a:	d107      	bne.n	80020ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e01a      	b.n	80020e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d194      	bne.n	8001fe2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e000      	b.n	80020e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020e4:	2302      	movs	r3, #2
  }
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	00100002 	.word	0x00100002
 80020f4:	ffff0000 	.word	0xffff0000

080020f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	460b      	mov	r3, r1
 8002106:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b08      	cmp	r3, #8
 8002112:	d006      	beq.n	8002122 <I2C_MasterRequestWrite+0x2a>
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d003      	beq.n	8002122 <I2C_MasterRequestWrite+0x2a>
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002120:	d108      	bne.n	8002134 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e00b      	b.n	800214c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	2b12      	cmp	r3, #18
 800213a:	d107      	bne.n	800214c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800214a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f84f 	bl	80021fc <I2C_WaitOnFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00d      	beq.n	8002180 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002172:	d103      	bne.n	800217c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800217a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e035      	b.n	80021ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002188:	d108      	bne.n	800219c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800218a:	897b      	ldrh	r3, [r7, #10]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002198:	611a      	str	r2, [r3, #16]
 800219a:	e01b      	b.n	80021d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800219c:	897b      	ldrh	r3, [r7, #10]
 800219e:	11db      	asrs	r3, r3, #7
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f003 0306 	and.w	r3, r3, #6
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f063 030f 	orn	r3, r3, #15
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	490e      	ldr	r1, [pc, #56]	@ (80021f4 <I2C_MasterRequestWrite+0xfc>)
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f898 	bl	80022f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e010      	b.n	80021ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021ca:	897b      	ldrh	r3, [r7, #10]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	4907      	ldr	r1, [pc, #28]	@ (80021f8 <I2C_MasterRequestWrite+0x100>)
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f888 	bl	80022f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	00010008 	.word	0x00010008
 80021f8:	00010002 	.word	0x00010002

080021fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	4613      	mov	r3, r2
 800220a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800220c:	e048      	b.n	80022a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d044      	beq.n	80022a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002216:	f7ff fa61 	bl	80016dc <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d302      	bcc.n	800222c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d139      	bne.n	80022a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	0c1b      	lsrs	r3, r3, #16
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d10d      	bne.n	8002252 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	43da      	mvns	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	4013      	ands	r3, r2
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf0c      	ite	eq
 8002248:	2301      	moveq	r3, #1
 800224a:	2300      	movne	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	e00c      	b.n	800226c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	43da      	mvns	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4013      	ands	r3, r2
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	429a      	cmp	r2, r3
 8002270:	d116      	bne.n	80022a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	f043 0220 	orr.w	r2, r3, #32
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e023      	b.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	0c1b      	lsrs	r3, r3, #16
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d10d      	bne.n	80022c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	43da      	mvns	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4013      	ands	r3, r2
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	e00c      	b.n	80022e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	43da      	mvns	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	4013      	ands	r3, r2
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d093      	beq.n	800220e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022fe:	e071      	b.n	80023e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800230a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800230e:	d123      	bne.n	8002358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800231e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002328:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	f043 0204 	orr.w	r2, r3, #4
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e067      	b.n	8002428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235e:	d041      	beq.n	80023e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002360:	f7ff f9bc 	bl	80016dc <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	429a      	cmp	r2, r3
 800236e:	d302      	bcc.n	8002376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d136      	bne.n	80023e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d10c      	bne.n	800239a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4013      	ands	r3, r2
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	bf14      	ite	ne
 8002392:	2301      	movne	r3, #1
 8002394:	2300      	moveq	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	e00b      	b.n	80023b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	43da      	mvns	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	4013      	ands	r3, r2
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf14      	ite	ne
 80023ac:	2301      	movne	r3, #1
 80023ae:	2300      	moveq	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d016      	beq.n	80023e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	f043 0220 	orr.w	r2, r3, #32
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e021      	b.n	8002428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	0c1b      	lsrs	r3, r3, #16
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d10c      	bne.n	8002408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	43da      	mvns	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	4013      	ands	r3, r2
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf14      	ite	ne
 8002400:	2301      	movne	r3, #1
 8002402:	2300      	moveq	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e00b      	b.n	8002420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	43da      	mvns	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4013      	ands	r3, r2
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	f47f af6d 	bne.w	8002300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800243c:	e034      	b.n	80024a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f886 	bl	8002550 <I2C_IsAcknowledgeFailed>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e034      	b.n	80024b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d028      	beq.n	80024a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002456:	f7ff f941 	bl	80016dc <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	429a      	cmp	r2, r3
 8002464:	d302      	bcc.n	800246c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d11d      	bne.n	80024a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002476:	2b80      	cmp	r3, #128	@ 0x80
 8002478:	d016      	beq.n	80024a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	f043 0220 	orr.w	r2, r3, #32
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e007      	b.n	80024b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b2:	2b80      	cmp	r3, #128	@ 0x80
 80024b4:	d1c3      	bne.n	800243e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024cc:	e034      	b.n	8002538 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f83e 	bl	8002550 <I2C_IsAcknowledgeFailed>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e034      	b.n	8002548 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d028      	beq.n	8002538 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e6:	f7ff f8f9 	bl	80016dc <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d302      	bcc.n	80024fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d11d      	bne.n	8002538 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b04      	cmp	r3, #4
 8002508:	d016      	beq.n	8002538 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	f043 0220 	orr.w	r2, r3, #32
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e007      	b.n	8002548 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b04      	cmp	r3, #4
 8002544:	d1c3      	bne.n	80024ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002566:	d11b      	bne.n	80025a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002570:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	f043 0204 	orr.w	r2, r3, #4
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e267      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d075      	beq.n	80026ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025ce:	4b88      	ldr	r3, [pc, #544]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d00c      	beq.n	80025f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025da:	4b85      	ldr	r3, [pc, #532]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d112      	bne.n	800260c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e6:	4b82      	ldr	r3, [pc, #520]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025f2:	d10b      	bne.n	800260c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	4b7e      	ldr	r3, [pc, #504]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d05b      	beq.n	80026b8 <HAL_RCC_OscConfig+0x108>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d157      	bne.n	80026b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e242      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002614:	d106      	bne.n	8002624 <HAL_RCC_OscConfig+0x74>
 8002616:	4b76      	ldr	r3, [pc, #472]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a75      	ldr	r2, [pc, #468]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e01d      	b.n	8002660 <HAL_RCC_OscConfig+0xb0>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x98>
 800262e:	4b70      	ldr	r3, [pc, #448]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6f      	ldr	r2, [pc, #444]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b6d      	ldr	r3, [pc, #436]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a6c      	ldr	r2, [pc, #432]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0xb0>
 8002648:	4b69      	ldr	r3, [pc, #420]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a68      	ldr	r2, [pc, #416]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800264e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b66      	ldr	r3, [pc, #408]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a65      	ldr	r2, [pc, #404]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800265a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800265e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff f838 	bl	80016dc <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff f834 	bl	80016dc <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	@ 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e207      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	4b5b      	ldr	r3, [pc, #364]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0xc0>
 800268e:	e014      	b.n	80026ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff f824 	bl	80016dc <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002698:	f7ff f820 	bl	80016dc <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	@ 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e1f3      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	4b51      	ldr	r3, [pc, #324]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0xe8>
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d063      	beq.n	800278e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026c6:	4b4a      	ldr	r3, [pc, #296]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d2:	4b47      	ldr	r3, [pc, #284]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d11c      	bne.n	8002718 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026de:	4b44      	ldr	r3, [pc, #272]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d116      	bne.n	8002718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	4b41      	ldr	r3, [pc, #260]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_RCC_OscConfig+0x152>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d001      	beq.n	8002702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e1c7      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002702:	4b3b      	ldr	r3, [pc, #236]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4937      	ldr	r1, [pc, #220]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	e03a      	b.n	800278e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002720:	4b34      	ldr	r3, [pc, #208]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe ffd9 	bl	80016dc <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272e:	f7fe ffd5 	bl	80016dc <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e1a8      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	4b2b      	ldr	r3, [pc, #172]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274c:	4b28      	ldr	r3, [pc, #160]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4925      	ldr	r1, [pc, #148]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
 8002760:	e015      	b.n	800278e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002762:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe ffb8 	bl	80016dc <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002770:	f7fe ffb4 	bl	80016dc <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e187      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	4b1b      	ldr	r3, [pc, #108]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d036      	beq.n	8002808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <HAL_RCC_OscConfig+0x248>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe ff98 	bl	80016dc <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b0:	f7fe ff94 	bl	80016dc <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e167      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80027c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x200>
 80027ce:	e01b      	b.n	8002808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <HAL_RCC_OscConfig+0x248>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d6:	f7fe ff81 	bl	80016dc <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	e00e      	b.n	80027fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027de:	f7fe ff7d 	bl	80016dc <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d907      	bls.n	80027fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e150      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
 80027f0:	40023800 	.word	0x40023800
 80027f4:	42470000 	.word	0x42470000
 80027f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	4b88      	ldr	r3, [pc, #544]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80027fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ea      	bne.n	80027de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8097 	beq.w	8002944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281a:	4b81      	ldr	r3, [pc, #516]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10f      	bne.n	8002846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002834:	6413      	str	r3, [r2, #64]	@ 0x40
 8002836:	4b7a      	ldr	r3, [pc, #488]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002842:	2301      	movs	r3, #1
 8002844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002846:	4b77      	ldr	r3, [pc, #476]	@ (8002a24 <HAL_RCC_OscConfig+0x474>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d118      	bne.n	8002884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002852:	4b74      	ldr	r3, [pc, #464]	@ (8002a24 <HAL_RCC_OscConfig+0x474>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a73      	ldr	r2, [pc, #460]	@ (8002a24 <HAL_RCC_OscConfig+0x474>)
 8002858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800285c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285e:	f7fe ff3d 	bl	80016dc <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002866:	f7fe ff39 	bl	80016dc <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e10c      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	4b6a      	ldr	r3, [pc, #424]	@ (8002a24 <HAL_RCC_OscConfig+0x474>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x2ea>
 800288c:	4b64      	ldr	r3, [pc, #400]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002890:	4a63      	ldr	r2, [pc, #396]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6713      	str	r3, [r2, #112]	@ 0x70
 8002898:	e01c      	b.n	80028d4 <HAL_RCC_OscConfig+0x324>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0x30c>
 80028a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ba:	e00b      	b.n	80028d4 <HAL_RCC_OscConfig+0x324>
 80028bc:	4b58      	ldr	r3, [pc, #352]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c0:	4a57      	ldr	r2, [pc, #348]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c8:	4b55      	ldr	r3, [pc, #340]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028cc:	4a54      	ldr	r2, [pc, #336]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028ce:	f023 0304 	bic.w	r3, r3, #4
 80028d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d015      	beq.n	8002908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7fe fefe 	bl	80016dc <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7fe fefa 	bl	80016dc <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0cb      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fa:	4b49      	ldr	r3, [pc, #292]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0ee      	beq.n	80028e4 <HAL_RCC_OscConfig+0x334>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002908:	f7fe fee8 	bl	80016dc <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7fe fee4 	bl	80016dc <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0b5      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002926:	4b3e      	ldr	r3, [pc, #248]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1ee      	bne.n	8002910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002938:	4b39      	ldr	r3, [pc, #228]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	4a38      	ldr	r2, [pc, #224]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 800293e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002942:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80a1 	beq.w	8002a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800294e:	4b34      	ldr	r3, [pc, #208]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b08      	cmp	r3, #8
 8002958:	d05c      	beq.n	8002a14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d141      	bne.n	80029e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	4b31      	ldr	r3, [pc, #196]	@ (8002a28 <HAL_RCC_OscConfig+0x478>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe feb8 	bl	80016dc <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe feb4 	bl	80016dc <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e087      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	4b27      	ldr	r3, [pc, #156]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	019b      	lsls	r3, r3, #6
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	3b01      	subs	r3, #1
 80029a8:	041b      	lsls	r3, r3, #16
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	491b      	ldr	r1, [pc, #108]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a28 <HAL_RCC_OscConfig+0x478>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7fe fe8d 	bl	80016dc <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c6:	f7fe fe89 	bl	80016dc <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e05c      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d8:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x416>
 80029e4:	e054      	b.n	8002a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <HAL_RCC_OscConfig+0x478>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe fe76 	bl	80016dc <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe fe72 	bl	80016dc <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e045      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x444>
 8002a12:	e03d      	b.n	8002a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e038      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40007000 	.word	0x40007000
 8002a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <HAL_RCC_OscConfig+0x4ec>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d028      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d121      	bne.n	8002a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d11a      	bne.n	8002a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d111      	bne.n	8002a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	085b      	lsrs	r3, r3, #1
 8002a74:	3b01      	subs	r3, #1
 8002a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d107      	bne.n	8002a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800

08002aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0cc      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b68      	ldr	r3, [pc, #416]	@ (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d90c      	bls.n	8002adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b65      	ldr	r3, [pc, #404]	@ (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b63      	ldr	r3, [pc, #396]	@ (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0b8      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d020      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af4:	4b59      	ldr	r3, [pc, #356]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a58      	ldr	r2, [pc, #352]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002afe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b0c:	4b53      	ldr	r3, [pc, #332]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a52      	ldr	r2, [pc, #328]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b18:	4b50      	ldr	r3, [pc, #320]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	494d      	ldr	r1, [pc, #308]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d044      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b47      	ldr	r3, [pc, #284]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d119      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e07f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e06f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e067      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7e:	4b37      	ldr	r3, [pc, #220]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f023 0203 	bic.w	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4934      	ldr	r1, [pc, #208]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b90:	f7fe fda4 	bl	80016dc <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b98:	f7fe fda0 	bl	80016dc <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e04f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	4b2b      	ldr	r3, [pc, #172]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 020c 	and.w	r2, r3, #12
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d1eb      	bne.n	8002b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b25      	ldr	r3, [pc, #148]	@ (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d20c      	bcs.n	8002be8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b22      	ldr	r3, [pc, #136]	@ (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b20      	ldr	r3, [pc, #128]	@ (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e032      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf4:	4b19      	ldr	r3, [pc, #100]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4916      	ldr	r1, [pc, #88]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c12:	4b12      	ldr	r3, [pc, #72]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	490e      	ldr	r1, [pc, #56]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c26:	f000 f821 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	490a      	ldr	r1, [pc, #40]	@ (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	5ccb      	ldrb	r3, [r1, r3]
 8002c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3e:	4a09      	ldr	r2, [pc, #36]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c42:	4b09      	ldr	r3, [pc, #36]	@ (8002c68 <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fd04 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023c00 	.word	0x40023c00
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	08003d6c 	.word	0x08003d6c
 8002c64:	20000000 	.word	0x20000000
 8002c68:	20000004 	.word	0x20000004

08002c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c70:	b094      	sub	sp, #80	@ 0x50
 8002c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c84:	4b79      	ldr	r3, [pc, #484]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d00d      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0x40>
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	f200 80e1 	bhi.w	8002e58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c9e:	e0db      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ca0:	4b73      	ldr	r3, [pc, #460]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ca4:	e0db      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ca6:	4b73      	ldr	r3, [pc, #460]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002caa:	e0d8      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cac:	4b6f      	ldr	r3, [pc, #444]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d063      	beq.n	8002d8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	099b      	lsrs	r3, r3, #6
 8002cc8:	2200      	movs	r2, #0
 8002cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ccc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cde:	4622      	mov	r2, r4
 8002ce0:	462b      	mov	r3, r5
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f04f 0100 	mov.w	r1, #0
 8002cea:	0159      	lsls	r1, r3, #5
 8002cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf0:	0150      	lsls	r0, r2, #5
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	1a51      	subs	r1, r2, r1
 8002cfa:	6139      	str	r1, [r7, #16]
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d10:	4659      	mov	r1, fp
 8002d12:	018b      	lsls	r3, r1, #6
 8002d14:	4651      	mov	r1, sl
 8002d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d1a:	4651      	mov	r1, sl
 8002d1c:	018a      	lsls	r2, r1, #6
 8002d1e:	4651      	mov	r1, sl
 8002d20:	ebb2 0801 	subs.w	r8, r2, r1
 8002d24:	4659      	mov	r1, fp
 8002d26:	eb63 0901 	sbc.w	r9, r3, r1
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d3e:	4690      	mov	r8, r2
 8002d40:	4699      	mov	r9, r3
 8002d42:	4623      	mov	r3, r4
 8002d44:	eb18 0303 	adds.w	r3, r8, r3
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	462b      	mov	r3, r5
 8002d4c:	eb49 0303 	adc.w	r3, r9, r3
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d5e:	4629      	mov	r1, r5
 8002d60:	024b      	lsls	r3, r1, #9
 8002d62:	4621      	mov	r1, r4
 8002d64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d68:	4621      	mov	r1, r4
 8002d6a:	024a      	lsls	r2, r1, #9
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d72:	2200      	movs	r2, #0
 8002d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d7c:	f7fd fa90 	bl	80002a0 <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4613      	mov	r3, r2
 8002d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d88:	e058      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8a:	4b38      	ldr	r3, [pc, #224]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	099b      	lsrs	r3, r3, #6
 8002d90:	2200      	movs	r2, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	4611      	mov	r1, r2
 8002d96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002da4:	4642      	mov	r2, r8
 8002da6:	464b      	mov	r3, r9
 8002da8:	f04f 0000 	mov.w	r0, #0
 8002dac:	f04f 0100 	mov.w	r1, #0
 8002db0:	0159      	lsls	r1, r3, #5
 8002db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db6:	0150      	lsls	r0, r2, #5
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ddc:	ebb2 040a 	subs.w	r4, r2, sl
 8002de0:	eb63 050b 	sbc.w	r5, r3, fp
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	00eb      	lsls	r3, r5, #3
 8002dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002df2:	00e2      	lsls	r2, r4, #3
 8002df4:	4614      	mov	r4, r2
 8002df6:	461d      	mov	r5, r3
 8002df8:	4643      	mov	r3, r8
 8002dfa:	18e3      	adds	r3, r4, r3
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	464b      	mov	r3, r9
 8002e00:	eb45 0303 	adc.w	r3, r5, r3
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e12:	4629      	mov	r1, r5
 8002e14:	028b      	lsls	r3, r1, #10
 8002e16:	4621      	mov	r1, r4
 8002e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	028a      	lsls	r2, r1, #10
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e26:	2200      	movs	r2, #0
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	61fa      	str	r2, [r7, #28]
 8002e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e30:	f7fd fa36 	bl	80002a0 <__aeabi_uldivmod>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4613      	mov	r3, r2
 8002e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	3301      	adds	r3, #1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e56:	e002      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3750      	adds	r7, #80	@ 0x50
 8002e64:	46bd      	mov	sp, r7
 8002e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	007a1200 	.word	0x007a1200

08002e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	@ (8002e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000

08002e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e94:	f7ff fff0 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0a9b      	lsrs	r3, r3, #10
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4903      	ldr	r1, [pc, #12]	@ (8002eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	08003d7c 	.word	0x08003d7c

08002eb8 <std>:
 8002eb8:	2300      	movs	r3, #0
 8002eba:	b510      	push	{r4, lr}
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8002ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ec6:	6083      	str	r3, [r0, #8]
 8002ec8:	8181      	strh	r1, [r0, #12]
 8002eca:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ecc:	81c2      	strh	r2, [r0, #14]
 8002ece:	6183      	str	r3, [r0, #24]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	305c      	adds	r0, #92	@ 0x5c
 8002ed6:	f000 f906 	bl	80030e6 <memset>
 8002eda:	4b0d      	ldr	r3, [pc, #52]	@ (8002f10 <std+0x58>)
 8002edc:	6263      	str	r3, [r4, #36]	@ 0x24
 8002ede:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <std+0x5c>)
 8002ee0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <std+0x60>)
 8002ee4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <std+0x64>)
 8002ee8:	6323      	str	r3, [r4, #48]	@ 0x30
 8002eea:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <std+0x68>)
 8002eec:	6224      	str	r4, [r4, #32]
 8002eee:	429c      	cmp	r4, r3
 8002ef0:	d006      	beq.n	8002f00 <std+0x48>
 8002ef2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002ef6:	4294      	cmp	r4, r2
 8002ef8:	d002      	beq.n	8002f00 <std+0x48>
 8002efa:	33d0      	adds	r3, #208	@ 0xd0
 8002efc:	429c      	cmp	r4, r3
 8002efe:	d105      	bne.n	8002f0c <std+0x54>
 8002f00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f08:	f000 b966 	b.w	80031d8 <__retarget_lock_init_recursive>
 8002f0c:	bd10      	pop	{r4, pc}
 8002f0e:	bf00      	nop
 8002f10:	08003061 	.word	0x08003061
 8002f14:	08003083 	.word	0x08003083
 8002f18:	080030bb 	.word	0x080030bb
 8002f1c:	080030df 	.word	0x080030df
 8002f20:	20000110 	.word	0x20000110

08002f24 <stdio_exit_handler>:
 8002f24:	4a02      	ldr	r2, [pc, #8]	@ (8002f30 <stdio_exit_handler+0xc>)
 8002f26:	4903      	ldr	r1, [pc, #12]	@ (8002f34 <stdio_exit_handler+0x10>)
 8002f28:	4803      	ldr	r0, [pc, #12]	@ (8002f38 <stdio_exit_handler+0x14>)
 8002f2a:	f000 b869 	b.w	8003000 <_fwalk_sglue>
 8002f2e:	bf00      	nop
 8002f30:	2000000c 	.word	0x2000000c
 8002f34:	08003a79 	.word	0x08003a79
 8002f38:	2000001c 	.word	0x2000001c

08002f3c <cleanup_stdio>:
 8002f3c:	6841      	ldr	r1, [r0, #4]
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <cleanup_stdio+0x34>)
 8002f40:	4299      	cmp	r1, r3
 8002f42:	b510      	push	{r4, lr}
 8002f44:	4604      	mov	r4, r0
 8002f46:	d001      	beq.n	8002f4c <cleanup_stdio+0x10>
 8002f48:	f000 fd96 	bl	8003a78 <_fflush_r>
 8002f4c:	68a1      	ldr	r1, [r4, #8]
 8002f4e:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <cleanup_stdio+0x38>)
 8002f50:	4299      	cmp	r1, r3
 8002f52:	d002      	beq.n	8002f5a <cleanup_stdio+0x1e>
 8002f54:	4620      	mov	r0, r4
 8002f56:	f000 fd8f 	bl	8003a78 <_fflush_r>
 8002f5a:	68e1      	ldr	r1, [r4, #12]
 8002f5c:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <cleanup_stdio+0x3c>)
 8002f5e:	4299      	cmp	r1, r3
 8002f60:	d004      	beq.n	8002f6c <cleanup_stdio+0x30>
 8002f62:	4620      	mov	r0, r4
 8002f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f68:	f000 bd86 	b.w	8003a78 <_fflush_r>
 8002f6c:	bd10      	pop	{r4, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000110 	.word	0x20000110
 8002f74:	20000178 	.word	0x20000178
 8002f78:	200001e0 	.word	0x200001e0

08002f7c <global_stdio_init.part.0>:
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <global_stdio_init.part.0+0x30>)
 8002f80:	4c0b      	ldr	r4, [pc, #44]	@ (8002fb0 <global_stdio_init.part.0+0x34>)
 8002f82:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb4 <global_stdio_init.part.0+0x38>)
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	4620      	mov	r0, r4
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2104      	movs	r1, #4
 8002f8c:	f7ff ff94 	bl	8002eb8 <std>
 8002f90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002f94:	2201      	movs	r2, #1
 8002f96:	2109      	movs	r1, #9
 8002f98:	f7ff ff8e 	bl	8002eb8 <std>
 8002f9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fa6:	2112      	movs	r1, #18
 8002fa8:	f7ff bf86 	b.w	8002eb8 <std>
 8002fac:	20000248 	.word	0x20000248
 8002fb0:	20000110 	.word	0x20000110
 8002fb4:	08002f25 	.word	0x08002f25

08002fb8 <__sfp_lock_acquire>:
 8002fb8:	4801      	ldr	r0, [pc, #4]	@ (8002fc0 <__sfp_lock_acquire+0x8>)
 8002fba:	f000 b90e 	b.w	80031da <__retarget_lock_acquire_recursive>
 8002fbe:	bf00      	nop
 8002fc0:	20000251 	.word	0x20000251

08002fc4 <__sfp_lock_release>:
 8002fc4:	4801      	ldr	r0, [pc, #4]	@ (8002fcc <__sfp_lock_release+0x8>)
 8002fc6:	f000 b909 	b.w	80031dc <__retarget_lock_release_recursive>
 8002fca:	bf00      	nop
 8002fcc:	20000251 	.word	0x20000251

08002fd0 <__sinit>:
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	f7ff fff0 	bl	8002fb8 <__sfp_lock_acquire>
 8002fd8:	6a23      	ldr	r3, [r4, #32]
 8002fda:	b11b      	cbz	r3, 8002fe4 <__sinit+0x14>
 8002fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fe0:	f7ff bff0 	b.w	8002fc4 <__sfp_lock_release>
 8002fe4:	4b04      	ldr	r3, [pc, #16]	@ (8002ff8 <__sinit+0x28>)
 8002fe6:	6223      	str	r3, [r4, #32]
 8002fe8:	4b04      	ldr	r3, [pc, #16]	@ (8002ffc <__sinit+0x2c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f5      	bne.n	8002fdc <__sinit+0xc>
 8002ff0:	f7ff ffc4 	bl	8002f7c <global_stdio_init.part.0>
 8002ff4:	e7f2      	b.n	8002fdc <__sinit+0xc>
 8002ff6:	bf00      	nop
 8002ff8:	08002f3d 	.word	0x08002f3d
 8002ffc:	20000248 	.word	0x20000248

08003000 <_fwalk_sglue>:
 8003000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003004:	4607      	mov	r7, r0
 8003006:	4688      	mov	r8, r1
 8003008:	4614      	mov	r4, r2
 800300a:	2600      	movs	r6, #0
 800300c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003010:	f1b9 0901 	subs.w	r9, r9, #1
 8003014:	d505      	bpl.n	8003022 <_fwalk_sglue+0x22>
 8003016:	6824      	ldr	r4, [r4, #0]
 8003018:	2c00      	cmp	r4, #0
 800301a:	d1f7      	bne.n	800300c <_fwalk_sglue+0xc>
 800301c:	4630      	mov	r0, r6
 800301e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003022:	89ab      	ldrh	r3, [r5, #12]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d907      	bls.n	8003038 <_fwalk_sglue+0x38>
 8003028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800302c:	3301      	adds	r3, #1
 800302e:	d003      	beq.n	8003038 <_fwalk_sglue+0x38>
 8003030:	4629      	mov	r1, r5
 8003032:	4638      	mov	r0, r7
 8003034:	47c0      	blx	r8
 8003036:	4306      	orrs	r6, r0
 8003038:	3568      	adds	r5, #104	@ 0x68
 800303a:	e7e9      	b.n	8003010 <_fwalk_sglue+0x10>

0800303c <iprintf>:
 800303c:	b40f      	push	{r0, r1, r2, r3}
 800303e:	b507      	push	{r0, r1, r2, lr}
 8003040:	4906      	ldr	r1, [pc, #24]	@ (800305c <iprintf+0x20>)
 8003042:	ab04      	add	r3, sp, #16
 8003044:	6808      	ldr	r0, [r1, #0]
 8003046:	f853 2b04 	ldr.w	r2, [r3], #4
 800304a:	6881      	ldr	r1, [r0, #8]
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	f000 f9e9 	bl	8003424 <_vfiprintf_r>
 8003052:	b003      	add	sp, #12
 8003054:	f85d eb04 	ldr.w	lr, [sp], #4
 8003058:	b004      	add	sp, #16
 800305a:	4770      	bx	lr
 800305c:	20000018 	.word	0x20000018

08003060 <__sread>:
 8003060:	b510      	push	{r4, lr}
 8003062:	460c      	mov	r4, r1
 8003064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003068:	f000 f868 	bl	800313c <_read_r>
 800306c:	2800      	cmp	r0, #0
 800306e:	bfab      	itete	ge
 8003070:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003072:	89a3      	ldrhlt	r3, [r4, #12]
 8003074:	181b      	addge	r3, r3, r0
 8003076:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800307a:	bfac      	ite	ge
 800307c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800307e:	81a3      	strhlt	r3, [r4, #12]
 8003080:	bd10      	pop	{r4, pc}

08003082 <__swrite>:
 8003082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003086:	461f      	mov	r7, r3
 8003088:	898b      	ldrh	r3, [r1, #12]
 800308a:	05db      	lsls	r3, r3, #23
 800308c:	4605      	mov	r5, r0
 800308e:	460c      	mov	r4, r1
 8003090:	4616      	mov	r6, r2
 8003092:	d505      	bpl.n	80030a0 <__swrite+0x1e>
 8003094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003098:	2302      	movs	r3, #2
 800309a:	2200      	movs	r2, #0
 800309c:	f000 f83c 	bl	8003118 <_lseek_r>
 80030a0:	89a3      	ldrh	r3, [r4, #12]
 80030a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030aa:	81a3      	strh	r3, [r4, #12]
 80030ac:	4632      	mov	r2, r6
 80030ae:	463b      	mov	r3, r7
 80030b0:	4628      	mov	r0, r5
 80030b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030b6:	f000 b853 	b.w	8003160 <_write_r>

080030ba <__sseek>:
 80030ba:	b510      	push	{r4, lr}
 80030bc:	460c      	mov	r4, r1
 80030be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030c2:	f000 f829 	bl	8003118 <_lseek_r>
 80030c6:	1c43      	adds	r3, r0, #1
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	bf15      	itete	ne
 80030cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80030ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80030d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80030d6:	81a3      	strheq	r3, [r4, #12]
 80030d8:	bf18      	it	ne
 80030da:	81a3      	strhne	r3, [r4, #12]
 80030dc:	bd10      	pop	{r4, pc}

080030de <__sclose>:
 80030de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e2:	f000 b809 	b.w	80030f8 <_close_r>

080030e6 <memset>:
 80030e6:	4402      	add	r2, r0
 80030e8:	4603      	mov	r3, r0
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d100      	bne.n	80030f0 <memset+0xa>
 80030ee:	4770      	bx	lr
 80030f0:	f803 1b01 	strb.w	r1, [r3], #1
 80030f4:	e7f9      	b.n	80030ea <memset+0x4>
	...

080030f8 <_close_r>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	4d06      	ldr	r5, [pc, #24]	@ (8003114 <_close_r+0x1c>)
 80030fc:	2300      	movs	r3, #0
 80030fe:	4604      	mov	r4, r0
 8003100:	4608      	mov	r0, r1
 8003102:	602b      	str	r3, [r5, #0]
 8003104:	f7fe f9dd 	bl	80014c2 <_close>
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	d102      	bne.n	8003112 <_close_r+0x1a>
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	b103      	cbz	r3, 8003112 <_close_r+0x1a>
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	bd38      	pop	{r3, r4, r5, pc}
 8003114:	2000024c 	.word	0x2000024c

08003118 <_lseek_r>:
 8003118:	b538      	push	{r3, r4, r5, lr}
 800311a:	4d07      	ldr	r5, [pc, #28]	@ (8003138 <_lseek_r+0x20>)
 800311c:	4604      	mov	r4, r0
 800311e:	4608      	mov	r0, r1
 8003120:	4611      	mov	r1, r2
 8003122:	2200      	movs	r2, #0
 8003124:	602a      	str	r2, [r5, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	f7fe f9f2 	bl	8001510 <_lseek>
 800312c:	1c43      	adds	r3, r0, #1
 800312e:	d102      	bne.n	8003136 <_lseek_r+0x1e>
 8003130:	682b      	ldr	r3, [r5, #0]
 8003132:	b103      	cbz	r3, 8003136 <_lseek_r+0x1e>
 8003134:	6023      	str	r3, [r4, #0]
 8003136:	bd38      	pop	{r3, r4, r5, pc}
 8003138:	2000024c 	.word	0x2000024c

0800313c <_read_r>:
 800313c:	b538      	push	{r3, r4, r5, lr}
 800313e:	4d07      	ldr	r5, [pc, #28]	@ (800315c <_read_r+0x20>)
 8003140:	4604      	mov	r4, r0
 8003142:	4608      	mov	r0, r1
 8003144:	4611      	mov	r1, r2
 8003146:	2200      	movs	r2, #0
 8003148:	602a      	str	r2, [r5, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	f7fe f980 	bl	8001450 <_read>
 8003150:	1c43      	adds	r3, r0, #1
 8003152:	d102      	bne.n	800315a <_read_r+0x1e>
 8003154:	682b      	ldr	r3, [r5, #0]
 8003156:	b103      	cbz	r3, 800315a <_read_r+0x1e>
 8003158:	6023      	str	r3, [r4, #0]
 800315a:	bd38      	pop	{r3, r4, r5, pc}
 800315c:	2000024c 	.word	0x2000024c

08003160 <_write_r>:
 8003160:	b538      	push	{r3, r4, r5, lr}
 8003162:	4d07      	ldr	r5, [pc, #28]	@ (8003180 <_write_r+0x20>)
 8003164:	4604      	mov	r4, r0
 8003166:	4608      	mov	r0, r1
 8003168:	4611      	mov	r1, r2
 800316a:	2200      	movs	r2, #0
 800316c:	602a      	str	r2, [r5, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	f7fe f98b 	bl	800148a <_write>
 8003174:	1c43      	adds	r3, r0, #1
 8003176:	d102      	bne.n	800317e <_write_r+0x1e>
 8003178:	682b      	ldr	r3, [r5, #0]
 800317a:	b103      	cbz	r3, 800317e <_write_r+0x1e>
 800317c:	6023      	str	r3, [r4, #0]
 800317e:	bd38      	pop	{r3, r4, r5, pc}
 8003180:	2000024c 	.word	0x2000024c

08003184 <__errno>:
 8003184:	4b01      	ldr	r3, [pc, #4]	@ (800318c <__errno+0x8>)
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000018 	.word	0x20000018

08003190 <__libc_init_array>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	4d0d      	ldr	r5, [pc, #52]	@ (80031c8 <__libc_init_array+0x38>)
 8003194:	4c0d      	ldr	r4, [pc, #52]	@ (80031cc <__libc_init_array+0x3c>)
 8003196:	1b64      	subs	r4, r4, r5
 8003198:	10a4      	asrs	r4, r4, #2
 800319a:	2600      	movs	r6, #0
 800319c:	42a6      	cmp	r6, r4
 800319e:	d109      	bne.n	80031b4 <__libc_init_array+0x24>
 80031a0:	4d0b      	ldr	r5, [pc, #44]	@ (80031d0 <__libc_init_array+0x40>)
 80031a2:	4c0c      	ldr	r4, [pc, #48]	@ (80031d4 <__libc_init_array+0x44>)
 80031a4:	f000 fdb8 	bl	8003d18 <_init>
 80031a8:	1b64      	subs	r4, r4, r5
 80031aa:	10a4      	asrs	r4, r4, #2
 80031ac:	2600      	movs	r6, #0
 80031ae:	42a6      	cmp	r6, r4
 80031b0:	d105      	bne.n	80031be <__libc_init_array+0x2e>
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
 80031b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b8:	4798      	blx	r3
 80031ba:	3601      	adds	r6, #1
 80031bc:	e7ee      	b.n	800319c <__libc_init_array+0xc>
 80031be:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c2:	4798      	blx	r3
 80031c4:	3601      	adds	r6, #1
 80031c6:	e7f2      	b.n	80031ae <__libc_init_array+0x1e>
 80031c8:	08003dc0 	.word	0x08003dc0
 80031cc:	08003dc0 	.word	0x08003dc0
 80031d0:	08003dc0 	.word	0x08003dc0
 80031d4:	08003dc4 	.word	0x08003dc4

080031d8 <__retarget_lock_init_recursive>:
 80031d8:	4770      	bx	lr

080031da <__retarget_lock_acquire_recursive>:
 80031da:	4770      	bx	lr

080031dc <__retarget_lock_release_recursive>:
 80031dc:	4770      	bx	lr
	...

080031e0 <_free_r>:
 80031e0:	b538      	push	{r3, r4, r5, lr}
 80031e2:	4605      	mov	r5, r0
 80031e4:	2900      	cmp	r1, #0
 80031e6:	d041      	beq.n	800326c <_free_r+0x8c>
 80031e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031ec:	1f0c      	subs	r4, r1, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bfb8      	it	lt
 80031f2:	18e4      	addlt	r4, r4, r3
 80031f4:	f000 f8e0 	bl	80033b8 <__malloc_lock>
 80031f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <_free_r+0x90>)
 80031fa:	6813      	ldr	r3, [r2, #0]
 80031fc:	b933      	cbnz	r3, 800320c <_free_r+0x2c>
 80031fe:	6063      	str	r3, [r4, #4]
 8003200:	6014      	str	r4, [r2, #0]
 8003202:	4628      	mov	r0, r5
 8003204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003208:	f000 b8dc 	b.w	80033c4 <__malloc_unlock>
 800320c:	42a3      	cmp	r3, r4
 800320e:	d908      	bls.n	8003222 <_free_r+0x42>
 8003210:	6820      	ldr	r0, [r4, #0]
 8003212:	1821      	adds	r1, r4, r0
 8003214:	428b      	cmp	r3, r1
 8003216:	bf01      	itttt	eq
 8003218:	6819      	ldreq	r1, [r3, #0]
 800321a:	685b      	ldreq	r3, [r3, #4]
 800321c:	1809      	addeq	r1, r1, r0
 800321e:	6021      	streq	r1, [r4, #0]
 8003220:	e7ed      	b.n	80031fe <_free_r+0x1e>
 8003222:	461a      	mov	r2, r3
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	b10b      	cbz	r3, 800322c <_free_r+0x4c>
 8003228:	42a3      	cmp	r3, r4
 800322a:	d9fa      	bls.n	8003222 <_free_r+0x42>
 800322c:	6811      	ldr	r1, [r2, #0]
 800322e:	1850      	adds	r0, r2, r1
 8003230:	42a0      	cmp	r0, r4
 8003232:	d10b      	bne.n	800324c <_free_r+0x6c>
 8003234:	6820      	ldr	r0, [r4, #0]
 8003236:	4401      	add	r1, r0
 8003238:	1850      	adds	r0, r2, r1
 800323a:	4283      	cmp	r3, r0
 800323c:	6011      	str	r1, [r2, #0]
 800323e:	d1e0      	bne.n	8003202 <_free_r+0x22>
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	6053      	str	r3, [r2, #4]
 8003246:	4408      	add	r0, r1
 8003248:	6010      	str	r0, [r2, #0]
 800324a:	e7da      	b.n	8003202 <_free_r+0x22>
 800324c:	d902      	bls.n	8003254 <_free_r+0x74>
 800324e:	230c      	movs	r3, #12
 8003250:	602b      	str	r3, [r5, #0]
 8003252:	e7d6      	b.n	8003202 <_free_r+0x22>
 8003254:	6820      	ldr	r0, [r4, #0]
 8003256:	1821      	adds	r1, r4, r0
 8003258:	428b      	cmp	r3, r1
 800325a:	bf04      	itt	eq
 800325c:	6819      	ldreq	r1, [r3, #0]
 800325e:	685b      	ldreq	r3, [r3, #4]
 8003260:	6063      	str	r3, [r4, #4]
 8003262:	bf04      	itt	eq
 8003264:	1809      	addeq	r1, r1, r0
 8003266:	6021      	streq	r1, [r4, #0]
 8003268:	6054      	str	r4, [r2, #4]
 800326a:	e7ca      	b.n	8003202 <_free_r+0x22>
 800326c:	bd38      	pop	{r3, r4, r5, pc}
 800326e:	bf00      	nop
 8003270:	20000258 	.word	0x20000258

08003274 <sbrk_aligned>:
 8003274:	b570      	push	{r4, r5, r6, lr}
 8003276:	4e0f      	ldr	r6, [pc, #60]	@ (80032b4 <sbrk_aligned+0x40>)
 8003278:	460c      	mov	r4, r1
 800327a:	6831      	ldr	r1, [r6, #0]
 800327c:	4605      	mov	r5, r0
 800327e:	b911      	cbnz	r1, 8003286 <sbrk_aligned+0x12>
 8003280:	f000 fcb6 	bl	8003bf0 <_sbrk_r>
 8003284:	6030      	str	r0, [r6, #0]
 8003286:	4621      	mov	r1, r4
 8003288:	4628      	mov	r0, r5
 800328a:	f000 fcb1 	bl	8003bf0 <_sbrk_r>
 800328e:	1c43      	adds	r3, r0, #1
 8003290:	d103      	bne.n	800329a <sbrk_aligned+0x26>
 8003292:	f04f 34ff 	mov.w	r4, #4294967295
 8003296:	4620      	mov	r0, r4
 8003298:	bd70      	pop	{r4, r5, r6, pc}
 800329a:	1cc4      	adds	r4, r0, #3
 800329c:	f024 0403 	bic.w	r4, r4, #3
 80032a0:	42a0      	cmp	r0, r4
 80032a2:	d0f8      	beq.n	8003296 <sbrk_aligned+0x22>
 80032a4:	1a21      	subs	r1, r4, r0
 80032a6:	4628      	mov	r0, r5
 80032a8:	f000 fca2 	bl	8003bf0 <_sbrk_r>
 80032ac:	3001      	adds	r0, #1
 80032ae:	d1f2      	bne.n	8003296 <sbrk_aligned+0x22>
 80032b0:	e7ef      	b.n	8003292 <sbrk_aligned+0x1e>
 80032b2:	bf00      	nop
 80032b4:	20000254 	.word	0x20000254

080032b8 <_malloc_r>:
 80032b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032bc:	1ccd      	adds	r5, r1, #3
 80032be:	f025 0503 	bic.w	r5, r5, #3
 80032c2:	3508      	adds	r5, #8
 80032c4:	2d0c      	cmp	r5, #12
 80032c6:	bf38      	it	cc
 80032c8:	250c      	movcc	r5, #12
 80032ca:	2d00      	cmp	r5, #0
 80032cc:	4606      	mov	r6, r0
 80032ce:	db01      	blt.n	80032d4 <_malloc_r+0x1c>
 80032d0:	42a9      	cmp	r1, r5
 80032d2:	d904      	bls.n	80032de <_malloc_r+0x26>
 80032d4:	230c      	movs	r3, #12
 80032d6:	6033      	str	r3, [r6, #0]
 80032d8:	2000      	movs	r0, #0
 80032da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033b4 <_malloc_r+0xfc>
 80032e2:	f000 f869 	bl	80033b8 <__malloc_lock>
 80032e6:	f8d8 3000 	ldr.w	r3, [r8]
 80032ea:	461c      	mov	r4, r3
 80032ec:	bb44      	cbnz	r4, 8003340 <_malloc_r+0x88>
 80032ee:	4629      	mov	r1, r5
 80032f0:	4630      	mov	r0, r6
 80032f2:	f7ff ffbf 	bl	8003274 <sbrk_aligned>
 80032f6:	1c43      	adds	r3, r0, #1
 80032f8:	4604      	mov	r4, r0
 80032fa:	d158      	bne.n	80033ae <_malloc_r+0xf6>
 80032fc:	f8d8 4000 	ldr.w	r4, [r8]
 8003300:	4627      	mov	r7, r4
 8003302:	2f00      	cmp	r7, #0
 8003304:	d143      	bne.n	800338e <_malloc_r+0xd6>
 8003306:	2c00      	cmp	r4, #0
 8003308:	d04b      	beq.n	80033a2 <_malloc_r+0xea>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	4639      	mov	r1, r7
 800330e:	4630      	mov	r0, r6
 8003310:	eb04 0903 	add.w	r9, r4, r3
 8003314:	f000 fc6c 	bl	8003bf0 <_sbrk_r>
 8003318:	4581      	cmp	r9, r0
 800331a:	d142      	bne.n	80033a2 <_malloc_r+0xea>
 800331c:	6821      	ldr	r1, [r4, #0]
 800331e:	1a6d      	subs	r5, r5, r1
 8003320:	4629      	mov	r1, r5
 8003322:	4630      	mov	r0, r6
 8003324:	f7ff ffa6 	bl	8003274 <sbrk_aligned>
 8003328:	3001      	adds	r0, #1
 800332a:	d03a      	beq.n	80033a2 <_malloc_r+0xea>
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	442b      	add	r3, r5
 8003330:	6023      	str	r3, [r4, #0]
 8003332:	f8d8 3000 	ldr.w	r3, [r8]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	bb62      	cbnz	r2, 8003394 <_malloc_r+0xdc>
 800333a:	f8c8 7000 	str.w	r7, [r8]
 800333e:	e00f      	b.n	8003360 <_malloc_r+0xa8>
 8003340:	6822      	ldr	r2, [r4, #0]
 8003342:	1b52      	subs	r2, r2, r5
 8003344:	d420      	bmi.n	8003388 <_malloc_r+0xd0>
 8003346:	2a0b      	cmp	r2, #11
 8003348:	d917      	bls.n	800337a <_malloc_r+0xc2>
 800334a:	1961      	adds	r1, r4, r5
 800334c:	42a3      	cmp	r3, r4
 800334e:	6025      	str	r5, [r4, #0]
 8003350:	bf18      	it	ne
 8003352:	6059      	strne	r1, [r3, #4]
 8003354:	6863      	ldr	r3, [r4, #4]
 8003356:	bf08      	it	eq
 8003358:	f8c8 1000 	streq.w	r1, [r8]
 800335c:	5162      	str	r2, [r4, r5]
 800335e:	604b      	str	r3, [r1, #4]
 8003360:	4630      	mov	r0, r6
 8003362:	f000 f82f 	bl	80033c4 <__malloc_unlock>
 8003366:	f104 000b 	add.w	r0, r4, #11
 800336a:	1d23      	adds	r3, r4, #4
 800336c:	f020 0007 	bic.w	r0, r0, #7
 8003370:	1ac2      	subs	r2, r0, r3
 8003372:	bf1c      	itt	ne
 8003374:	1a1b      	subne	r3, r3, r0
 8003376:	50a3      	strne	r3, [r4, r2]
 8003378:	e7af      	b.n	80032da <_malloc_r+0x22>
 800337a:	6862      	ldr	r2, [r4, #4]
 800337c:	42a3      	cmp	r3, r4
 800337e:	bf0c      	ite	eq
 8003380:	f8c8 2000 	streq.w	r2, [r8]
 8003384:	605a      	strne	r2, [r3, #4]
 8003386:	e7eb      	b.n	8003360 <_malloc_r+0xa8>
 8003388:	4623      	mov	r3, r4
 800338a:	6864      	ldr	r4, [r4, #4]
 800338c:	e7ae      	b.n	80032ec <_malloc_r+0x34>
 800338e:	463c      	mov	r4, r7
 8003390:	687f      	ldr	r7, [r7, #4]
 8003392:	e7b6      	b.n	8003302 <_malloc_r+0x4a>
 8003394:	461a      	mov	r2, r3
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	42a3      	cmp	r3, r4
 800339a:	d1fb      	bne.n	8003394 <_malloc_r+0xdc>
 800339c:	2300      	movs	r3, #0
 800339e:	6053      	str	r3, [r2, #4]
 80033a0:	e7de      	b.n	8003360 <_malloc_r+0xa8>
 80033a2:	230c      	movs	r3, #12
 80033a4:	6033      	str	r3, [r6, #0]
 80033a6:	4630      	mov	r0, r6
 80033a8:	f000 f80c 	bl	80033c4 <__malloc_unlock>
 80033ac:	e794      	b.n	80032d8 <_malloc_r+0x20>
 80033ae:	6005      	str	r5, [r0, #0]
 80033b0:	e7d6      	b.n	8003360 <_malloc_r+0xa8>
 80033b2:	bf00      	nop
 80033b4:	20000258 	.word	0x20000258

080033b8 <__malloc_lock>:
 80033b8:	4801      	ldr	r0, [pc, #4]	@ (80033c0 <__malloc_lock+0x8>)
 80033ba:	f7ff bf0e 	b.w	80031da <__retarget_lock_acquire_recursive>
 80033be:	bf00      	nop
 80033c0:	20000250 	.word	0x20000250

080033c4 <__malloc_unlock>:
 80033c4:	4801      	ldr	r0, [pc, #4]	@ (80033cc <__malloc_unlock+0x8>)
 80033c6:	f7ff bf09 	b.w	80031dc <__retarget_lock_release_recursive>
 80033ca:	bf00      	nop
 80033cc:	20000250 	.word	0x20000250

080033d0 <__sfputc_r>:
 80033d0:	6893      	ldr	r3, [r2, #8]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	b410      	push	{r4}
 80033d8:	6093      	str	r3, [r2, #8]
 80033da:	da08      	bge.n	80033ee <__sfputc_r+0x1e>
 80033dc:	6994      	ldr	r4, [r2, #24]
 80033de:	42a3      	cmp	r3, r4
 80033e0:	db01      	blt.n	80033e6 <__sfputc_r+0x16>
 80033e2:	290a      	cmp	r1, #10
 80033e4:	d103      	bne.n	80033ee <__sfputc_r+0x1e>
 80033e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033ea:	f000 bb6d 	b.w	8003ac8 <__swbuf_r>
 80033ee:	6813      	ldr	r3, [r2, #0]
 80033f0:	1c58      	adds	r0, r3, #1
 80033f2:	6010      	str	r0, [r2, #0]
 80033f4:	7019      	strb	r1, [r3, #0]
 80033f6:	4608      	mov	r0, r1
 80033f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <__sfputs_r>:
 80033fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003400:	4606      	mov	r6, r0
 8003402:	460f      	mov	r7, r1
 8003404:	4614      	mov	r4, r2
 8003406:	18d5      	adds	r5, r2, r3
 8003408:	42ac      	cmp	r4, r5
 800340a:	d101      	bne.n	8003410 <__sfputs_r+0x12>
 800340c:	2000      	movs	r0, #0
 800340e:	e007      	b.n	8003420 <__sfputs_r+0x22>
 8003410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003414:	463a      	mov	r2, r7
 8003416:	4630      	mov	r0, r6
 8003418:	f7ff ffda 	bl	80033d0 <__sfputc_r>
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	d1f3      	bne.n	8003408 <__sfputs_r+0xa>
 8003420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003424 <_vfiprintf_r>:
 8003424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003428:	460d      	mov	r5, r1
 800342a:	b09d      	sub	sp, #116	@ 0x74
 800342c:	4614      	mov	r4, r2
 800342e:	4698      	mov	r8, r3
 8003430:	4606      	mov	r6, r0
 8003432:	b118      	cbz	r0, 800343c <_vfiprintf_r+0x18>
 8003434:	6a03      	ldr	r3, [r0, #32]
 8003436:	b90b      	cbnz	r3, 800343c <_vfiprintf_r+0x18>
 8003438:	f7ff fdca 	bl	8002fd0 <__sinit>
 800343c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800343e:	07d9      	lsls	r1, r3, #31
 8003440:	d405      	bmi.n	800344e <_vfiprintf_r+0x2a>
 8003442:	89ab      	ldrh	r3, [r5, #12]
 8003444:	059a      	lsls	r2, r3, #22
 8003446:	d402      	bmi.n	800344e <_vfiprintf_r+0x2a>
 8003448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800344a:	f7ff fec6 	bl	80031da <__retarget_lock_acquire_recursive>
 800344e:	89ab      	ldrh	r3, [r5, #12]
 8003450:	071b      	lsls	r3, r3, #28
 8003452:	d501      	bpl.n	8003458 <_vfiprintf_r+0x34>
 8003454:	692b      	ldr	r3, [r5, #16]
 8003456:	b99b      	cbnz	r3, 8003480 <_vfiprintf_r+0x5c>
 8003458:	4629      	mov	r1, r5
 800345a:	4630      	mov	r0, r6
 800345c:	f000 fb72 	bl	8003b44 <__swsetup_r>
 8003460:	b170      	cbz	r0, 8003480 <_vfiprintf_r+0x5c>
 8003462:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003464:	07dc      	lsls	r4, r3, #31
 8003466:	d504      	bpl.n	8003472 <_vfiprintf_r+0x4e>
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	b01d      	add	sp, #116	@ 0x74
 800346e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003472:	89ab      	ldrh	r3, [r5, #12]
 8003474:	0598      	lsls	r0, r3, #22
 8003476:	d4f7      	bmi.n	8003468 <_vfiprintf_r+0x44>
 8003478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800347a:	f7ff feaf 	bl	80031dc <__retarget_lock_release_recursive>
 800347e:	e7f3      	b.n	8003468 <_vfiprintf_r+0x44>
 8003480:	2300      	movs	r3, #0
 8003482:	9309      	str	r3, [sp, #36]	@ 0x24
 8003484:	2320      	movs	r3, #32
 8003486:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800348a:	f8cd 800c 	str.w	r8, [sp, #12]
 800348e:	2330      	movs	r3, #48	@ 0x30
 8003490:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003640 <_vfiprintf_r+0x21c>
 8003494:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003498:	f04f 0901 	mov.w	r9, #1
 800349c:	4623      	mov	r3, r4
 800349e:	469a      	mov	sl, r3
 80034a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034a4:	b10a      	cbz	r2, 80034aa <_vfiprintf_r+0x86>
 80034a6:	2a25      	cmp	r2, #37	@ 0x25
 80034a8:	d1f9      	bne.n	800349e <_vfiprintf_r+0x7a>
 80034aa:	ebba 0b04 	subs.w	fp, sl, r4
 80034ae:	d00b      	beq.n	80034c8 <_vfiprintf_r+0xa4>
 80034b0:	465b      	mov	r3, fp
 80034b2:	4622      	mov	r2, r4
 80034b4:	4629      	mov	r1, r5
 80034b6:	4630      	mov	r0, r6
 80034b8:	f7ff ffa1 	bl	80033fe <__sfputs_r>
 80034bc:	3001      	adds	r0, #1
 80034be:	f000 80a7 	beq.w	8003610 <_vfiprintf_r+0x1ec>
 80034c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034c4:	445a      	add	r2, fp
 80034c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80034c8:	f89a 3000 	ldrb.w	r3, [sl]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 809f 	beq.w	8003610 <_vfiprintf_r+0x1ec>
 80034d2:	2300      	movs	r3, #0
 80034d4:	f04f 32ff 	mov.w	r2, #4294967295
 80034d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034dc:	f10a 0a01 	add.w	sl, sl, #1
 80034e0:	9304      	str	r3, [sp, #16]
 80034e2:	9307      	str	r3, [sp, #28]
 80034e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80034e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80034ea:	4654      	mov	r4, sl
 80034ec:	2205      	movs	r2, #5
 80034ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f2:	4853      	ldr	r0, [pc, #332]	@ (8003640 <_vfiprintf_r+0x21c>)
 80034f4:	f7fc fe84 	bl	8000200 <memchr>
 80034f8:	9a04      	ldr	r2, [sp, #16]
 80034fa:	b9d8      	cbnz	r0, 8003534 <_vfiprintf_r+0x110>
 80034fc:	06d1      	lsls	r1, r2, #27
 80034fe:	bf44      	itt	mi
 8003500:	2320      	movmi	r3, #32
 8003502:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003506:	0713      	lsls	r3, r2, #28
 8003508:	bf44      	itt	mi
 800350a:	232b      	movmi	r3, #43	@ 0x2b
 800350c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003510:	f89a 3000 	ldrb.w	r3, [sl]
 8003514:	2b2a      	cmp	r3, #42	@ 0x2a
 8003516:	d015      	beq.n	8003544 <_vfiprintf_r+0x120>
 8003518:	9a07      	ldr	r2, [sp, #28]
 800351a:	4654      	mov	r4, sl
 800351c:	2000      	movs	r0, #0
 800351e:	f04f 0c0a 	mov.w	ip, #10
 8003522:	4621      	mov	r1, r4
 8003524:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003528:	3b30      	subs	r3, #48	@ 0x30
 800352a:	2b09      	cmp	r3, #9
 800352c:	d94b      	bls.n	80035c6 <_vfiprintf_r+0x1a2>
 800352e:	b1b0      	cbz	r0, 800355e <_vfiprintf_r+0x13a>
 8003530:	9207      	str	r2, [sp, #28]
 8003532:	e014      	b.n	800355e <_vfiprintf_r+0x13a>
 8003534:	eba0 0308 	sub.w	r3, r0, r8
 8003538:	fa09 f303 	lsl.w	r3, r9, r3
 800353c:	4313      	orrs	r3, r2
 800353e:	9304      	str	r3, [sp, #16]
 8003540:	46a2      	mov	sl, r4
 8003542:	e7d2      	b.n	80034ea <_vfiprintf_r+0xc6>
 8003544:	9b03      	ldr	r3, [sp, #12]
 8003546:	1d19      	adds	r1, r3, #4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	9103      	str	r1, [sp, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	bfbb      	ittet	lt
 8003550:	425b      	neglt	r3, r3
 8003552:	f042 0202 	orrlt.w	r2, r2, #2
 8003556:	9307      	strge	r3, [sp, #28]
 8003558:	9307      	strlt	r3, [sp, #28]
 800355a:	bfb8      	it	lt
 800355c:	9204      	strlt	r2, [sp, #16]
 800355e:	7823      	ldrb	r3, [r4, #0]
 8003560:	2b2e      	cmp	r3, #46	@ 0x2e
 8003562:	d10a      	bne.n	800357a <_vfiprintf_r+0x156>
 8003564:	7863      	ldrb	r3, [r4, #1]
 8003566:	2b2a      	cmp	r3, #42	@ 0x2a
 8003568:	d132      	bne.n	80035d0 <_vfiprintf_r+0x1ac>
 800356a:	9b03      	ldr	r3, [sp, #12]
 800356c:	1d1a      	adds	r2, r3, #4
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	9203      	str	r2, [sp, #12]
 8003572:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003576:	3402      	adds	r4, #2
 8003578:	9305      	str	r3, [sp, #20]
 800357a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003650 <_vfiprintf_r+0x22c>
 800357e:	7821      	ldrb	r1, [r4, #0]
 8003580:	2203      	movs	r2, #3
 8003582:	4650      	mov	r0, sl
 8003584:	f7fc fe3c 	bl	8000200 <memchr>
 8003588:	b138      	cbz	r0, 800359a <_vfiprintf_r+0x176>
 800358a:	9b04      	ldr	r3, [sp, #16]
 800358c:	eba0 000a 	sub.w	r0, r0, sl
 8003590:	2240      	movs	r2, #64	@ 0x40
 8003592:	4082      	lsls	r2, r0
 8003594:	4313      	orrs	r3, r2
 8003596:	3401      	adds	r4, #1
 8003598:	9304      	str	r3, [sp, #16]
 800359a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800359e:	4829      	ldr	r0, [pc, #164]	@ (8003644 <_vfiprintf_r+0x220>)
 80035a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80035a4:	2206      	movs	r2, #6
 80035a6:	f7fc fe2b 	bl	8000200 <memchr>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d03f      	beq.n	800362e <_vfiprintf_r+0x20a>
 80035ae:	4b26      	ldr	r3, [pc, #152]	@ (8003648 <_vfiprintf_r+0x224>)
 80035b0:	bb1b      	cbnz	r3, 80035fa <_vfiprintf_r+0x1d6>
 80035b2:	9b03      	ldr	r3, [sp, #12]
 80035b4:	3307      	adds	r3, #7
 80035b6:	f023 0307 	bic.w	r3, r3, #7
 80035ba:	3308      	adds	r3, #8
 80035bc:	9303      	str	r3, [sp, #12]
 80035be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035c0:	443b      	add	r3, r7
 80035c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80035c4:	e76a      	b.n	800349c <_vfiprintf_r+0x78>
 80035c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80035ca:	460c      	mov	r4, r1
 80035cc:	2001      	movs	r0, #1
 80035ce:	e7a8      	b.n	8003522 <_vfiprintf_r+0xfe>
 80035d0:	2300      	movs	r3, #0
 80035d2:	3401      	adds	r4, #1
 80035d4:	9305      	str	r3, [sp, #20]
 80035d6:	4619      	mov	r1, r3
 80035d8:	f04f 0c0a 	mov.w	ip, #10
 80035dc:	4620      	mov	r0, r4
 80035de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035e2:	3a30      	subs	r2, #48	@ 0x30
 80035e4:	2a09      	cmp	r2, #9
 80035e6:	d903      	bls.n	80035f0 <_vfiprintf_r+0x1cc>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0c6      	beq.n	800357a <_vfiprintf_r+0x156>
 80035ec:	9105      	str	r1, [sp, #20]
 80035ee:	e7c4      	b.n	800357a <_vfiprintf_r+0x156>
 80035f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80035f4:	4604      	mov	r4, r0
 80035f6:	2301      	movs	r3, #1
 80035f8:	e7f0      	b.n	80035dc <_vfiprintf_r+0x1b8>
 80035fa:	ab03      	add	r3, sp, #12
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	462a      	mov	r2, r5
 8003600:	4b12      	ldr	r3, [pc, #72]	@ (800364c <_vfiprintf_r+0x228>)
 8003602:	a904      	add	r1, sp, #16
 8003604:	4630      	mov	r0, r6
 8003606:	f3af 8000 	nop.w
 800360a:	4607      	mov	r7, r0
 800360c:	1c78      	adds	r0, r7, #1
 800360e:	d1d6      	bne.n	80035be <_vfiprintf_r+0x19a>
 8003610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003612:	07d9      	lsls	r1, r3, #31
 8003614:	d405      	bmi.n	8003622 <_vfiprintf_r+0x1fe>
 8003616:	89ab      	ldrh	r3, [r5, #12]
 8003618:	059a      	lsls	r2, r3, #22
 800361a:	d402      	bmi.n	8003622 <_vfiprintf_r+0x1fe>
 800361c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800361e:	f7ff fddd 	bl	80031dc <__retarget_lock_release_recursive>
 8003622:	89ab      	ldrh	r3, [r5, #12]
 8003624:	065b      	lsls	r3, r3, #25
 8003626:	f53f af1f 	bmi.w	8003468 <_vfiprintf_r+0x44>
 800362a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800362c:	e71e      	b.n	800346c <_vfiprintf_r+0x48>
 800362e:	ab03      	add	r3, sp, #12
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	462a      	mov	r2, r5
 8003634:	4b05      	ldr	r3, [pc, #20]	@ (800364c <_vfiprintf_r+0x228>)
 8003636:	a904      	add	r1, sp, #16
 8003638:	4630      	mov	r0, r6
 800363a:	f000 f879 	bl	8003730 <_printf_i>
 800363e:	e7e4      	b.n	800360a <_vfiprintf_r+0x1e6>
 8003640:	08003d84 	.word	0x08003d84
 8003644:	08003d8e 	.word	0x08003d8e
 8003648:	00000000 	.word	0x00000000
 800364c:	080033ff 	.word	0x080033ff
 8003650:	08003d8a 	.word	0x08003d8a

08003654 <_printf_common>:
 8003654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003658:	4616      	mov	r6, r2
 800365a:	4698      	mov	r8, r3
 800365c:	688a      	ldr	r2, [r1, #8]
 800365e:	690b      	ldr	r3, [r1, #16]
 8003660:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003664:	4293      	cmp	r3, r2
 8003666:	bfb8      	it	lt
 8003668:	4613      	movlt	r3, r2
 800366a:	6033      	str	r3, [r6, #0]
 800366c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003670:	4607      	mov	r7, r0
 8003672:	460c      	mov	r4, r1
 8003674:	b10a      	cbz	r2, 800367a <_printf_common+0x26>
 8003676:	3301      	adds	r3, #1
 8003678:	6033      	str	r3, [r6, #0]
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	0699      	lsls	r1, r3, #26
 800367e:	bf42      	ittt	mi
 8003680:	6833      	ldrmi	r3, [r6, #0]
 8003682:	3302      	addmi	r3, #2
 8003684:	6033      	strmi	r3, [r6, #0]
 8003686:	6825      	ldr	r5, [r4, #0]
 8003688:	f015 0506 	ands.w	r5, r5, #6
 800368c:	d106      	bne.n	800369c <_printf_common+0x48>
 800368e:	f104 0a19 	add.w	sl, r4, #25
 8003692:	68e3      	ldr	r3, [r4, #12]
 8003694:	6832      	ldr	r2, [r6, #0]
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	42ab      	cmp	r3, r5
 800369a:	dc26      	bgt.n	80036ea <_printf_common+0x96>
 800369c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	3b00      	subs	r3, #0
 80036a4:	bf18      	it	ne
 80036a6:	2301      	movne	r3, #1
 80036a8:	0692      	lsls	r2, r2, #26
 80036aa:	d42b      	bmi.n	8003704 <_printf_common+0xb0>
 80036ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036b0:	4641      	mov	r1, r8
 80036b2:	4638      	mov	r0, r7
 80036b4:	47c8      	blx	r9
 80036b6:	3001      	adds	r0, #1
 80036b8:	d01e      	beq.n	80036f8 <_printf_common+0xa4>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	6922      	ldr	r2, [r4, #16]
 80036be:	f003 0306 	and.w	r3, r3, #6
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	bf02      	ittt	eq
 80036c6:	68e5      	ldreq	r5, [r4, #12]
 80036c8:	6833      	ldreq	r3, [r6, #0]
 80036ca:	1aed      	subeq	r5, r5, r3
 80036cc:	68a3      	ldr	r3, [r4, #8]
 80036ce:	bf0c      	ite	eq
 80036d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d4:	2500      	movne	r5, #0
 80036d6:	4293      	cmp	r3, r2
 80036d8:	bfc4      	itt	gt
 80036da:	1a9b      	subgt	r3, r3, r2
 80036dc:	18ed      	addgt	r5, r5, r3
 80036de:	2600      	movs	r6, #0
 80036e0:	341a      	adds	r4, #26
 80036e2:	42b5      	cmp	r5, r6
 80036e4:	d11a      	bne.n	800371c <_printf_common+0xc8>
 80036e6:	2000      	movs	r0, #0
 80036e8:	e008      	b.n	80036fc <_printf_common+0xa8>
 80036ea:	2301      	movs	r3, #1
 80036ec:	4652      	mov	r2, sl
 80036ee:	4641      	mov	r1, r8
 80036f0:	4638      	mov	r0, r7
 80036f2:	47c8      	blx	r9
 80036f4:	3001      	adds	r0, #1
 80036f6:	d103      	bne.n	8003700 <_printf_common+0xac>
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003700:	3501      	adds	r5, #1
 8003702:	e7c6      	b.n	8003692 <_printf_common+0x3e>
 8003704:	18e1      	adds	r1, r4, r3
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	2030      	movs	r0, #48	@ 0x30
 800370a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800370e:	4422      	add	r2, r4
 8003710:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003714:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003718:	3302      	adds	r3, #2
 800371a:	e7c7      	b.n	80036ac <_printf_common+0x58>
 800371c:	2301      	movs	r3, #1
 800371e:	4622      	mov	r2, r4
 8003720:	4641      	mov	r1, r8
 8003722:	4638      	mov	r0, r7
 8003724:	47c8      	blx	r9
 8003726:	3001      	adds	r0, #1
 8003728:	d0e6      	beq.n	80036f8 <_printf_common+0xa4>
 800372a:	3601      	adds	r6, #1
 800372c:	e7d9      	b.n	80036e2 <_printf_common+0x8e>
	...

08003730 <_printf_i>:
 8003730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003734:	7e0f      	ldrb	r7, [r1, #24]
 8003736:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003738:	2f78      	cmp	r7, #120	@ 0x78
 800373a:	4691      	mov	r9, r2
 800373c:	4680      	mov	r8, r0
 800373e:	460c      	mov	r4, r1
 8003740:	469a      	mov	sl, r3
 8003742:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003746:	d807      	bhi.n	8003758 <_printf_i+0x28>
 8003748:	2f62      	cmp	r7, #98	@ 0x62
 800374a:	d80a      	bhi.n	8003762 <_printf_i+0x32>
 800374c:	2f00      	cmp	r7, #0
 800374e:	f000 80d2 	beq.w	80038f6 <_printf_i+0x1c6>
 8003752:	2f58      	cmp	r7, #88	@ 0x58
 8003754:	f000 80b9 	beq.w	80038ca <_printf_i+0x19a>
 8003758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800375c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003760:	e03a      	b.n	80037d8 <_printf_i+0xa8>
 8003762:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003766:	2b15      	cmp	r3, #21
 8003768:	d8f6      	bhi.n	8003758 <_printf_i+0x28>
 800376a:	a101      	add	r1, pc, #4	@ (adr r1, 8003770 <_printf_i+0x40>)
 800376c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003770:	080037c9 	.word	0x080037c9
 8003774:	080037dd 	.word	0x080037dd
 8003778:	08003759 	.word	0x08003759
 800377c:	08003759 	.word	0x08003759
 8003780:	08003759 	.word	0x08003759
 8003784:	08003759 	.word	0x08003759
 8003788:	080037dd 	.word	0x080037dd
 800378c:	08003759 	.word	0x08003759
 8003790:	08003759 	.word	0x08003759
 8003794:	08003759 	.word	0x08003759
 8003798:	08003759 	.word	0x08003759
 800379c:	080038dd 	.word	0x080038dd
 80037a0:	08003807 	.word	0x08003807
 80037a4:	08003897 	.word	0x08003897
 80037a8:	08003759 	.word	0x08003759
 80037ac:	08003759 	.word	0x08003759
 80037b0:	080038ff 	.word	0x080038ff
 80037b4:	08003759 	.word	0x08003759
 80037b8:	08003807 	.word	0x08003807
 80037bc:	08003759 	.word	0x08003759
 80037c0:	08003759 	.word	0x08003759
 80037c4:	0800389f 	.word	0x0800389f
 80037c8:	6833      	ldr	r3, [r6, #0]
 80037ca:	1d1a      	adds	r2, r3, #4
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6032      	str	r2, [r6, #0]
 80037d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037d8:	2301      	movs	r3, #1
 80037da:	e09d      	b.n	8003918 <_printf_i+0x1e8>
 80037dc:	6833      	ldr	r3, [r6, #0]
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	1d19      	adds	r1, r3, #4
 80037e2:	6031      	str	r1, [r6, #0]
 80037e4:	0606      	lsls	r6, r0, #24
 80037e6:	d501      	bpl.n	80037ec <_printf_i+0xbc>
 80037e8:	681d      	ldr	r5, [r3, #0]
 80037ea:	e003      	b.n	80037f4 <_printf_i+0xc4>
 80037ec:	0645      	lsls	r5, r0, #25
 80037ee:	d5fb      	bpl.n	80037e8 <_printf_i+0xb8>
 80037f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80037f4:	2d00      	cmp	r5, #0
 80037f6:	da03      	bge.n	8003800 <_printf_i+0xd0>
 80037f8:	232d      	movs	r3, #45	@ 0x2d
 80037fa:	426d      	negs	r5, r5
 80037fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003800:	4859      	ldr	r0, [pc, #356]	@ (8003968 <_printf_i+0x238>)
 8003802:	230a      	movs	r3, #10
 8003804:	e011      	b.n	800382a <_printf_i+0xfa>
 8003806:	6821      	ldr	r1, [r4, #0]
 8003808:	6833      	ldr	r3, [r6, #0]
 800380a:	0608      	lsls	r0, r1, #24
 800380c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003810:	d402      	bmi.n	8003818 <_printf_i+0xe8>
 8003812:	0649      	lsls	r1, r1, #25
 8003814:	bf48      	it	mi
 8003816:	b2ad      	uxthmi	r5, r5
 8003818:	2f6f      	cmp	r7, #111	@ 0x6f
 800381a:	4853      	ldr	r0, [pc, #332]	@ (8003968 <_printf_i+0x238>)
 800381c:	6033      	str	r3, [r6, #0]
 800381e:	bf14      	ite	ne
 8003820:	230a      	movne	r3, #10
 8003822:	2308      	moveq	r3, #8
 8003824:	2100      	movs	r1, #0
 8003826:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800382a:	6866      	ldr	r6, [r4, #4]
 800382c:	60a6      	str	r6, [r4, #8]
 800382e:	2e00      	cmp	r6, #0
 8003830:	bfa2      	ittt	ge
 8003832:	6821      	ldrge	r1, [r4, #0]
 8003834:	f021 0104 	bicge.w	r1, r1, #4
 8003838:	6021      	strge	r1, [r4, #0]
 800383a:	b90d      	cbnz	r5, 8003840 <_printf_i+0x110>
 800383c:	2e00      	cmp	r6, #0
 800383e:	d04b      	beq.n	80038d8 <_printf_i+0x1a8>
 8003840:	4616      	mov	r6, r2
 8003842:	fbb5 f1f3 	udiv	r1, r5, r3
 8003846:	fb03 5711 	mls	r7, r3, r1, r5
 800384a:	5dc7      	ldrb	r7, [r0, r7]
 800384c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003850:	462f      	mov	r7, r5
 8003852:	42bb      	cmp	r3, r7
 8003854:	460d      	mov	r5, r1
 8003856:	d9f4      	bls.n	8003842 <_printf_i+0x112>
 8003858:	2b08      	cmp	r3, #8
 800385a:	d10b      	bne.n	8003874 <_printf_i+0x144>
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	07df      	lsls	r7, r3, #31
 8003860:	d508      	bpl.n	8003874 <_printf_i+0x144>
 8003862:	6923      	ldr	r3, [r4, #16]
 8003864:	6861      	ldr	r1, [r4, #4]
 8003866:	4299      	cmp	r1, r3
 8003868:	bfde      	ittt	le
 800386a:	2330      	movle	r3, #48	@ 0x30
 800386c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003870:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003874:	1b92      	subs	r2, r2, r6
 8003876:	6122      	str	r2, [r4, #16]
 8003878:	f8cd a000 	str.w	sl, [sp]
 800387c:	464b      	mov	r3, r9
 800387e:	aa03      	add	r2, sp, #12
 8003880:	4621      	mov	r1, r4
 8003882:	4640      	mov	r0, r8
 8003884:	f7ff fee6 	bl	8003654 <_printf_common>
 8003888:	3001      	adds	r0, #1
 800388a:	d14a      	bne.n	8003922 <_printf_i+0x1f2>
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	b004      	add	sp, #16
 8003892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	f043 0320 	orr.w	r3, r3, #32
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	4833      	ldr	r0, [pc, #204]	@ (800396c <_printf_i+0x23c>)
 80038a0:	2778      	movs	r7, #120	@ 0x78
 80038a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	6831      	ldr	r1, [r6, #0]
 80038aa:	061f      	lsls	r7, r3, #24
 80038ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80038b0:	d402      	bmi.n	80038b8 <_printf_i+0x188>
 80038b2:	065f      	lsls	r7, r3, #25
 80038b4:	bf48      	it	mi
 80038b6:	b2ad      	uxthmi	r5, r5
 80038b8:	6031      	str	r1, [r6, #0]
 80038ba:	07d9      	lsls	r1, r3, #31
 80038bc:	bf44      	itt	mi
 80038be:	f043 0320 	orrmi.w	r3, r3, #32
 80038c2:	6023      	strmi	r3, [r4, #0]
 80038c4:	b11d      	cbz	r5, 80038ce <_printf_i+0x19e>
 80038c6:	2310      	movs	r3, #16
 80038c8:	e7ac      	b.n	8003824 <_printf_i+0xf4>
 80038ca:	4827      	ldr	r0, [pc, #156]	@ (8003968 <_printf_i+0x238>)
 80038cc:	e7e9      	b.n	80038a2 <_printf_i+0x172>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	f023 0320 	bic.w	r3, r3, #32
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	e7f6      	b.n	80038c6 <_printf_i+0x196>
 80038d8:	4616      	mov	r6, r2
 80038da:	e7bd      	b.n	8003858 <_printf_i+0x128>
 80038dc:	6833      	ldr	r3, [r6, #0]
 80038de:	6825      	ldr	r5, [r4, #0]
 80038e0:	6961      	ldr	r1, [r4, #20]
 80038e2:	1d18      	adds	r0, r3, #4
 80038e4:	6030      	str	r0, [r6, #0]
 80038e6:	062e      	lsls	r6, r5, #24
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	d501      	bpl.n	80038f0 <_printf_i+0x1c0>
 80038ec:	6019      	str	r1, [r3, #0]
 80038ee:	e002      	b.n	80038f6 <_printf_i+0x1c6>
 80038f0:	0668      	lsls	r0, r5, #25
 80038f2:	d5fb      	bpl.n	80038ec <_printf_i+0x1bc>
 80038f4:	8019      	strh	r1, [r3, #0]
 80038f6:	2300      	movs	r3, #0
 80038f8:	6123      	str	r3, [r4, #16]
 80038fa:	4616      	mov	r6, r2
 80038fc:	e7bc      	b.n	8003878 <_printf_i+0x148>
 80038fe:	6833      	ldr	r3, [r6, #0]
 8003900:	1d1a      	adds	r2, r3, #4
 8003902:	6032      	str	r2, [r6, #0]
 8003904:	681e      	ldr	r6, [r3, #0]
 8003906:	6862      	ldr	r2, [r4, #4]
 8003908:	2100      	movs	r1, #0
 800390a:	4630      	mov	r0, r6
 800390c:	f7fc fc78 	bl	8000200 <memchr>
 8003910:	b108      	cbz	r0, 8003916 <_printf_i+0x1e6>
 8003912:	1b80      	subs	r0, r0, r6
 8003914:	6060      	str	r0, [r4, #4]
 8003916:	6863      	ldr	r3, [r4, #4]
 8003918:	6123      	str	r3, [r4, #16]
 800391a:	2300      	movs	r3, #0
 800391c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003920:	e7aa      	b.n	8003878 <_printf_i+0x148>
 8003922:	6923      	ldr	r3, [r4, #16]
 8003924:	4632      	mov	r2, r6
 8003926:	4649      	mov	r1, r9
 8003928:	4640      	mov	r0, r8
 800392a:	47d0      	blx	sl
 800392c:	3001      	adds	r0, #1
 800392e:	d0ad      	beq.n	800388c <_printf_i+0x15c>
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	079b      	lsls	r3, r3, #30
 8003934:	d413      	bmi.n	800395e <_printf_i+0x22e>
 8003936:	68e0      	ldr	r0, [r4, #12]
 8003938:	9b03      	ldr	r3, [sp, #12]
 800393a:	4298      	cmp	r0, r3
 800393c:	bfb8      	it	lt
 800393e:	4618      	movlt	r0, r3
 8003940:	e7a6      	b.n	8003890 <_printf_i+0x160>
 8003942:	2301      	movs	r3, #1
 8003944:	4632      	mov	r2, r6
 8003946:	4649      	mov	r1, r9
 8003948:	4640      	mov	r0, r8
 800394a:	47d0      	blx	sl
 800394c:	3001      	adds	r0, #1
 800394e:	d09d      	beq.n	800388c <_printf_i+0x15c>
 8003950:	3501      	adds	r5, #1
 8003952:	68e3      	ldr	r3, [r4, #12]
 8003954:	9903      	ldr	r1, [sp, #12]
 8003956:	1a5b      	subs	r3, r3, r1
 8003958:	42ab      	cmp	r3, r5
 800395a:	dcf2      	bgt.n	8003942 <_printf_i+0x212>
 800395c:	e7eb      	b.n	8003936 <_printf_i+0x206>
 800395e:	2500      	movs	r5, #0
 8003960:	f104 0619 	add.w	r6, r4, #25
 8003964:	e7f5      	b.n	8003952 <_printf_i+0x222>
 8003966:	bf00      	nop
 8003968:	08003d95 	.word	0x08003d95
 800396c:	08003da6 	.word	0x08003da6

08003970 <__sflush_r>:
 8003970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003978:	0716      	lsls	r6, r2, #28
 800397a:	4605      	mov	r5, r0
 800397c:	460c      	mov	r4, r1
 800397e:	d454      	bmi.n	8003a2a <__sflush_r+0xba>
 8003980:	684b      	ldr	r3, [r1, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	dc02      	bgt.n	800398c <__sflush_r+0x1c>
 8003986:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	dd48      	ble.n	8003a1e <__sflush_r+0xae>
 800398c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800398e:	2e00      	cmp	r6, #0
 8003990:	d045      	beq.n	8003a1e <__sflush_r+0xae>
 8003992:	2300      	movs	r3, #0
 8003994:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003998:	682f      	ldr	r7, [r5, #0]
 800399a:	6a21      	ldr	r1, [r4, #32]
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	d030      	beq.n	8003a02 <__sflush_r+0x92>
 80039a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80039a2:	89a3      	ldrh	r3, [r4, #12]
 80039a4:	0759      	lsls	r1, r3, #29
 80039a6:	d505      	bpl.n	80039b4 <__sflush_r+0x44>
 80039a8:	6863      	ldr	r3, [r4, #4]
 80039aa:	1ad2      	subs	r2, r2, r3
 80039ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039ae:	b10b      	cbz	r3, 80039b4 <__sflush_r+0x44>
 80039b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039b2:	1ad2      	subs	r2, r2, r3
 80039b4:	2300      	movs	r3, #0
 80039b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039b8:	6a21      	ldr	r1, [r4, #32]
 80039ba:	4628      	mov	r0, r5
 80039bc:	47b0      	blx	r6
 80039be:	1c43      	adds	r3, r0, #1
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	d106      	bne.n	80039d2 <__sflush_r+0x62>
 80039c4:	6829      	ldr	r1, [r5, #0]
 80039c6:	291d      	cmp	r1, #29
 80039c8:	d82b      	bhi.n	8003a22 <__sflush_r+0xb2>
 80039ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003a74 <__sflush_r+0x104>)
 80039cc:	410a      	asrs	r2, r1
 80039ce:	07d6      	lsls	r6, r2, #31
 80039d0:	d427      	bmi.n	8003a22 <__sflush_r+0xb2>
 80039d2:	2200      	movs	r2, #0
 80039d4:	6062      	str	r2, [r4, #4]
 80039d6:	04d9      	lsls	r1, r3, #19
 80039d8:	6922      	ldr	r2, [r4, #16]
 80039da:	6022      	str	r2, [r4, #0]
 80039dc:	d504      	bpl.n	80039e8 <__sflush_r+0x78>
 80039de:	1c42      	adds	r2, r0, #1
 80039e0:	d101      	bne.n	80039e6 <__sflush_r+0x76>
 80039e2:	682b      	ldr	r3, [r5, #0]
 80039e4:	b903      	cbnz	r3, 80039e8 <__sflush_r+0x78>
 80039e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80039e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039ea:	602f      	str	r7, [r5, #0]
 80039ec:	b1b9      	cbz	r1, 8003a1e <__sflush_r+0xae>
 80039ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039f2:	4299      	cmp	r1, r3
 80039f4:	d002      	beq.n	80039fc <__sflush_r+0x8c>
 80039f6:	4628      	mov	r0, r5
 80039f8:	f7ff fbf2 	bl	80031e0 <_free_r>
 80039fc:	2300      	movs	r3, #0
 80039fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a00:	e00d      	b.n	8003a1e <__sflush_r+0xae>
 8003a02:	2301      	movs	r3, #1
 8003a04:	4628      	mov	r0, r5
 8003a06:	47b0      	blx	r6
 8003a08:	4602      	mov	r2, r0
 8003a0a:	1c50      	adds	r0, r2, #1
 8003a0c:	d1c9      	bne.n	80039a2 <__sflush_r+0x32>
 8003a0e:	682b      	ldr	r3, [r5, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0c6      	beq.n	80039a2 <__sflush_r+0x32>
 8003a14:	2b1d      	cmp	r3, #29
 8003a16:	d001      	beq.n	8003a1c <__sflush_r+0xac>
 8003a18:	2b16      	cmp	r3, #22
 8003a1a:	d11e      	bne.n	8003a5a <__sflush_r+0xea>
 8003a1c:	602f      	str	r7, [r5, #0]
 8003a1e:	2000      	movs	r0, #0
 8003a20:	e022      	b.n	8003a68 <__sflush_r+0xf8>
 8003a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a26:	b21b      	sxth	r3, r3
 8003a28:	e01b      	b.n	8003a62 <__sflush_r+0xf2>
 8003a2a:	690f      	ldr	r7, [r1, #16]
 8003a2c:	2f00      	cmp	r7, #0
 8003a2e:	d0f6      	beq.n	8003a1e <__sflush_r+0xae>
 8003a30:	0793      	lsls	r3, r2, #30
 8003a32:	680e      	ldr	r6, [r1, #0]
 8003a34:	bf08      	it	eq
 8003a36:	694b      	ldreq	r3, [r1, #20]
 8003a38:	600f      	str	r7, [r1, #0]
 8003a3a:	bf18      	it	ne
 8003a3c:	2300      	movne	r3, #0
 8003a3e:	eba6 0807 	sub.w	r8, r6, r7
 8003a42:	608b      	str	r3, [r1, #8]
 8003a44:	f1b8 0f00 	cmp.w	r8, #0
 8003a48:	dde9      	ble.n	8003a1e <__sflush_r+0xae>
 8003a4a:	6a21      	ldr	r1, [r4, #32]
 8003a4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003a4e:	4643      	mov	r3, r8
 8003a50:	463a      	mov	r2, r7
 8003a52:	4628      	mov	r0, r5
 8003a54:	47b0      	blx	r6
 8003a56:	2800      	cmp	r0, #0
 8003a58:	dc08      	bgt.n	8003a6c <__sflush_r+0xfc>
 8003a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a62:	81a3      	strh	r3, [r4, #12]
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a6c:	4407      	add	r7, r0
 8003a6e:	eba8 0800 	sub.w	r8, r8, r0
 8003a72:	e7e7      	b.n	8003a44 <__sflush_r+0xd4>
 8003a74:	dfbffffe 	.word	0xdfbffffe

08003a78 <_fflush_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	690b      	ldr	r3, [r1, #16]
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	460c      	mov	r4, r1
 8003a80:	b913      	cbnz	r3, 8003a88 <_fflush_r+0x10>
 8003a82:	2500      	movs	r5, #0
 8003a84:	4628      	mov	r0, r5
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	b118      	cbz	r0, 8003a92 <_fflush_r+0x1a>
 8003a8a:	6a03      	ldr	r3, [r0, #32]
 8003a8c:	b90b      	cbnz	r3, 8003a92 <_fflush_r+0x1a>
 8003a8e:	f7ff fa9f 	bl	8002fd0 <__sinit>
 8003a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f3      	beq.n	8003a82 <_fflush_r+0xa>
 8003a9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003a9c:	07d0      	lsls	r0, r2, #31
 8003a9e:	d404      	bmi.n	8003aaa <_fflush_r+0x32>
 8003aa0:	0599      	lsls	r1, r3, #22
 8003aa2:	d402      	bmi.n	8003aaa <_fflush_r+0x32>
 8003aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003aa6:	f7ff fb98 	bl	80031da <__retarget_lock_acquire_recursive>
 8003aaa:	4628      	mov	r0, r5
 8003aac:	4621      	mov	r1, r4
 8003aae:	f7ff ff5f 	bl	8003970 <__sflush_r>
 8003ab2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ab4:	07da      	lsls	r2, r3, #31
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	d4e4      	bmi.n	8003a84 <_fflush_r+0xc>
 8003aba:	89a3      	ldrh	r3, [r4, #12]
 8003abc:	059b      	lsls	r3, r3, #22
 8003abe:	d4e1      	bmi.n	8003a84 <_fflush_r+0xc>
 8003ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ac2:	f7ff fb8b 	bl	80031dc <__retarget_lock_release_recursive>
 8003ac6:	e7dd      	b.n	8003a84 <_fflush_r+0xc>

08003ac8 <__swbuf_r>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	460e      	mov	r6, r1
 8003acc:	4614      	mov	r4, r2
 8003ace:	4605      	mov	r5, r0
 8003ad0:	b118      	cbz	r0, 8003ada <__swbuf_r+0x12>
 8003ad2:	6a03      	ldr	r3, [r0, #32]
 8003ad4:	b90b      	cbnz	r3, 8003ada <__swbuf_r+0x12>
 8003ad6:	f7ff fa7b 	bl	8002fd0 <__sinit>
 8003ada:	69a3      	ldr	r3, [r4, #24]
 8003adc:	60a3      	str	r3, [r4, #8]
 8003ade:	89a3      	ldrh	r3, [r4, #12]
 8003ae0:	071a      	lsls	r2, r3, #28
 8003ae2:	d501      	bpl.n	8003ae8 <__swbuf_r+0x20>
 8003ae4:	6923      	ldr	r3, [r4, #16]
 8003ae6:	b943      	cbnz	r3, 8003afa <__swbuf_r+0x32>
 8003ae8:	4621      	mov	r1, r4
 8003aea:	4628      	mov	r0, r5
 8003aec:	f000 f82a 	bl	8003b44 <__swsetup_r>
 8003af0:	b118      	cbz	r0, 8003afa <__swbuf_r+0x32>
 8003af2:	f04f 37ff 	mov.w	r7, #4294967295
 8003af6:	4638      	mov	r0, r7
 8003af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	6922      	ldr	r2, [r4, #16]
 8003afe:	1a98      	subs	r0, r3, r2
 8003b00:	6963      	ldr	r3, [r4, #20]
 8003b02:	b2f6      	uxtb	r6, r6
 8003b04:	4283      	cmp	r3, r0
 8003b06:	4637      	mov	r7, r6
 8003b08:	dc05      	bgt.n	8003b16 <__swbuf_r+0x4e>
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f7ff ffb3 	bl	8003a78 <_fflush_r>
 8003b12:	2800      	cmp	r0, #0
 8003b14:	d1ed      	bne.n	8003af2 <__swbuf_r+0x2a>
 8003b16:	68a3      	ldr	r3, [r4, #8]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	60a3      	str	r3, [r4, #8]
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	6022      	str	r2, [r4, #0]
 8003b22:	701e      	strb	r6, [r3, #0]
 8003b24:	6962      	ldr	r2, [r4, #20]
 8003b26:	1c43      	adds	r3, r0, #1
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d004      	beq.n	8003b36 <__swbuf_r+0x6e>
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	07db      	lsls	r3, r3, #31
 8003b30:	d5e1      	bpl.n	8003af6 <__swbuf_r+0x2e>
 8003b32:	2e0a      	cmp	r6, #10
 8003b34:	d1df      	bne.n	8003af6 <__swbuf_r+0x2e>
 8003b36:	4621      	mov	r1, r4
 8003b38:	4628      	mov	r0, r5
 8003b3a:	f7ff ff9d 	bl	8003a78 <_fflush_r>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d0d9      	beq.n	8003af6 <__swbuf_r+0x2e>
 8003b42:	e7d6      	b.n	8003af2 <__swbuf_r+0x2a>

08003b44 <__swsetup_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4b29      	ldr	r3, [pc, #164]	@ (8003bec <__swsetup_r+0xa8>)
 8003b48:	4605      	mov	r5, r0
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	b118      	cbz	r0, 8003b58 <__swsetup_r+0x14>
 8003b50:	6a03      	ldr	r3, [r0, #32]
 8003b52:	b90b      	cbnz	r3, 8003b58 <__swsetup_r+0x14>
 8003b54:	f7ff fa3c 	bl	8002fd0 <__sinit>
 8003b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b5c:	0719      	lsls	r1, r3, #28
 8003b5e:	d422      	bmi.n	8003ba6 <__swsetup_r+0x62>
 8003b60:	06da      	lsls	r2, r3, #27
 8003b62:	d407      	bmi.n	8003b74 <__swsetup_r+0x30>
 8003b64:	2209      	movs	r2, #9
 8003b66:	602a      	str	r2, [r5, #0]
 8003b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b6c:	81a3      	strh	r3, [r4, #12]
 8003b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b72:	e033      	b.n	8003bdc <__swsetup_r+0x98>
 8003b74:	0758      	lsls	r0, r3, #29
 8003b76:	d512      	bpl.n	8003b9e <__swsetup_r+0x5a>
 8003b78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b7a:	b141      	cbz	r1, 8003b8e <__swsetup_r+0x4a>
 8003b7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b80:	4299      	cmp	r1, r3
 8003b82:	d002      	beq.n	8003b8a <__swsetup_r+0x46>
 8003b84:	4628      	mov	r0, r5
 8003b86:	f7ff fb2b 	bl	80031e0 <_free_r>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b94:	81a3      	strh	r3, [r4, #12]
 8003b96:	2300      	movs	r3, #0
 8003b98:	6063      	str	r3, [r4, #4]
 8003b9a:	6923      	ldr	r3, [r4, #16]
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	89a3      	ldrh	r3, [r4, #12]
 8003ba0:	f043 0308 	orr.w	r3, r3, #8
 8003ba4:	81a3      	strh	r3, [r4, #12]
 8003ba6:	6923      	ldr	r3, [r4, #16]
 8003ba8:	b94b      	cbnz	r3, 8003bbe <__swsetup_r+0x7a>
 8003baa:	89a3      	ldrh	r3, [r4, #12]
 8003bac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bb4:	d003      	beq.n	8003bbe <__swsetup_r+0x7a>
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f000 f84f 	bl	8003c5c <__smakebuf_r>
 8003bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bc2:	f013 0201 	ands.w	r2, r3, #1
 8003bc6:	d00a      	beq.n	8003bde <__swsetup_r+0x9a>
 8003bc8:	2200      	movs	r2, #0
 8003bca:	60a2      	str	r2, [r4, #8]
 8003bcc:	6962      	ldr	r2, [r4, #20]
 8003bce:	4252      	negs	r2, r2
 8003bd0:	61a2      	str	r2, [r4, #24]
 8003bd2:	6922      	ldr	r2, [r4, #16]
 8003bd4:	b942      	cbnz	r2, 8003be8 <__swsetup_r+0xa4>
 8003bd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003bda:	d1c5      	bne.n	8003b68 <__swsetup_r+0x24>
 8003bdc:	bd38      	pop	{r3, r4, r5, pc}
 8003bde:	0799      	lsls	r1, r3, #30
 8003be0:	bf58      	it	pl
 8003be2:	6962      	ldrpl	r2, [r4, #20]
 8003be4:	60a2      	str	r2, [r4, #8]
 8003be6:	e7f4      	b.n	8003bd2 <__swsetup_r+0x8e>
 8003be8:	2000      	movs	r0, #0
 8003bea:	e7f7      	b.n	8003bdc <__swsetup_r+0x98>
 8003bec:	20000018 	.word	0x20000018

08003bf0 <_sbrk_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4d06      	ldr	r5, [pc, #24]	@ (8003c0c <_sbrk_r+0x1c>)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	602b      	str	r3, [r5, #0]
 8003bfc:	f7fd fc96 	bl	800152c <_sbrk>
 8003c00:	1c43      	adds	r3, r0, #1
 8003c02:	d102      	bne.n	8003c0a <_sbrk_r+0x1a>
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	b103      	cbz	r3, 8003c0a <_sbrk_r+0x1a>
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
 8003c0c:	2000024c 	.word	0x2000024c

08003c10 <__swhatbuf_r>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	460c      	mov	r4, r1
 8003c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c18:	2900      	cmp	r1, #0
 8003c1a:	b096      	sub	sp, #88	@ 0x58
 8003c1c:	4615      	mov	r5, r2
 8003c1e:	461e      	mov	r6, r3
 8003c20:	da0d      	bge.n	8003c3e <__swhatbuf_r+0x2e>
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	bf14      	ite	ne
 8003c2e:	2340      	movne	r3, #64	@ 0x40
 8003c30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003c34:	2000      	movs	r0, #0
 8003c36:	6031      	str	r1, [r6, #0]
 8003c38:	602b      	str	r3, [r5, #0]
 8003c3a:	b016      	add	sp, #88	@ 0x58
 8003c3c:	bd70      	pop	{r4, r5, r6, pc}
 8003c3e:	466a      	mov	r2, sp
 8003c40:	f000 f848 	bl	8003cd4 <_fstat_r>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	dbec      	blt.n	8003c22 <__swhatbuf_r+0x12>
 8003c48:	9901      	ldr	r1, [sp, #4]
 8003c4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003c4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003c52:	4259      	negs	r1, r3
 8003c54:	4159      	adcs	r1, r3
 8003c56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c5a:	e7eb      	b.n	8003c34 <__swhatbuf_r+0x24>

08003c5c <__smakebuf_r>:
 8003c5c:	898b      	ldrh	r3, [r1, #12]
 8003c5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c60:	079d      	lsls	r5, r3, #30
 8003c62:	4606      	mov	r6, r0
 8003c64:	460c      	mov	r4, r1
 8003c66:	d507      	bpl.n	8003c78 <__smakebuf_r+0x1c>
 8003c68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003c6c:	6023      	str	r3, [r4, #0]
 8003c6e:	6123      	str	r3, [r4, #16]
 8003c70:	2301      	movs	r3, #1
 8003c72:	6163      	str	r3, [r4, #20]
 8003c74:	b003      	add	sp, #12
 8003c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c78:	ab01      	add	r3, sp, #4
 8003c7a:	466a      	mov	r2, sp
 8003c7c:	f7ff ffc8 	bl	8003c10 <__swhatbuf_r>
 8003c80:	9f00      	ldr	r7, [sp, #0]
 8003c82:	4605      	mov	r5, r0
 8003c84:	4639      	mov	r1, r7
 8003c86:	4630      	mov	r0, r6
 8003c88:	f7ff fb16 	bl	80032b8 <_malloc_r>
 8003c8c:	b948      	cbnz	r0, 8003ca2 <__smakebuf_r+0x46>
 8003c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c92:	059a      	lsls	r2, r3, #22
 8003c94:	d4ee      	bmi.n	8003c74 <__smakebuf_r+0x18>
 8003c96:	f023 0303 	bic.w	r3, r3, #3
 8003c9a:	f043 0302 	orr.w	r3, r3, #2
 8003c9e:	81a3      	strh	r3, [r4, #12]
 8003ca0:	e7e2      	b.n	8003c68 <__smakebuf_r+0xc>
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	6020      	str	r0, [r4, #0]
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	9b01      	ldr	r3, [sp, #4]
 8003cae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003cb2:	b15b      	cbz	r3, 8003ccc <__smakebuf_r+0x70>
 8003cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cb8:	4630      	mov	r0, r6
 8003cba:	f000 f81d 	bl	8003cf8 <_isatty_r>
 8003cbe:	b128      	cbz	r0, 8003ccc <__smakebuf_r+0x70>
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	f023 0303 	bic.w	r3, r3, #3
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	81a3      	strh	r3, [r4, #12]
 8003ccc:	89a3      	ldrh	r3, [r4, #12]
 8003cce:	431d      	orrs	r5, r3
 8003cd0:	81a5      	strh	r5, [r4, #12]
 8003cd2:	e7cf      	b.n	8003c74 <__smakebuf_r+0x18>

08003cd4 <_fstat_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	4d07      	ldr	r5, [pc, #28]	@ (8003cf4 <_fstat_r+0x20>)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	4604      	mov	r4, r0
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	602b      	str	r3, [r5, #0]
 8003ce2:	f7fd fbfa 	bl	80014da <_fstat>
 8003ce6:	1c43      	adds	r3, r0, #1
 8003ce8:	d102      	bne.n	8003cf0 <_fstat_r+0x1c>
 8003cea:	682b      	ldr	r3, [r5, #0]
 8003cec:	b103      	cbz	r3, 8003cf0 <_fstat_r+0x1c>
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	bd38      	pop	{r3, r4, r5, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2000024c 	.word	0x2000024c

08003cf8 <_isatty_r>:
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4d06      	ldr	r5, [pc, #24]	@ (8003d14 <_isatty_r+0x1c>)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4604      	mov	r4, r0
 8003d00:	4608      	mov	r0, r1
 8003d02:	602b      	str	r3, [r5, #0]
 8003d04:	f7fd fbf9 	bl	80014fa <_isatty>
 8003d08:	1c43      	adds	r3, r0, #1
 8003d0a:	d102      	bne.n	8003d12 <_isatty_r+0x1a>
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	b103      	cbz	r3, 8003d12 <_isatty_r+0x1a>
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	bd38      	pop	{r3, r4, r5, pc}
 8003d14:	2000024c 	.word	0x2000024c

08003d18 <_init>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	bf00      	nop
 8003d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1e:	bc08      	pop	{r3}
 8003d20:	469e      	mov	lr, r3
 8003d22:	4770      	bx	lr

08003d24 <_fini>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	bf00      	nop
 8003d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2a:	bc08      	pop	{r3}
 8003d2c:	469e      	mov	lr, r3
 8003d2e:	4770      	bx	lr
