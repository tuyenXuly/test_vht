
menu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004570  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004710  08004710  00005710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e0  080047e0  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  080047e0  080047e0  000057e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047e8  080047e8  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e8  080047e8  000057e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047ec  080047ec  000057ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080047f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000006c  0800485c  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  0800485c  0000630c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cf7  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001882  00000000  00000000  0000dd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0000f618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000651  00000000  00000000  0000fe70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001699d  00000000  00000000  000104c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b133  00000000  00000000  00026e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087450  00000000  00000000  00031f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b93e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b0  00000000  00000000  000b9424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000bbcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046f8 	.word	0x080046f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080046f8 	.word	0x080046f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <CLCD_Delay>:
******************************************************************************************************************/
#include "LCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	4618      	mov	r0, r3
 800057e:	f001 fda9 	bl	80020d4 <HAL_Delay>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b086      	sub	sp, #24
 800058e:	af02      	add	r7, sp, #8
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	70fb      	strb	r3, [r7, #3]
 8000596:	4613      	mov	r3, r2
 8000598:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	f023 030f 	bic.w	r3, r3, #15
 80005a0:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 80005a2:	78fb      	ldrb	r3, [r7, #3]
 80005a4:	011b      	lsls	r3, r3, #4
 80005a6:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7adb      	ldrb	r3, [r3, #11]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d007      	beq.n	80005c0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 80005b8:	7bbb      	ldrb	r3, [r7, #14]
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80005c0:	78bb      	ldrb	r3, [r7, #2]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d108      	bne.n	80005d8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80005ce:	7bbb      	ldrb	r3, [r7, #14]
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	73bb      	strb	r3, [r7, #14]
 80005d6:	e00a      	b.n	80005ee <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80005d8:	78bb      	ldrb	r3, [r7, #2]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d107      	bne.n	80005ee <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	f023 0301 	bic.w	r3, r3, #1
 80005e4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	f023 0301 	bic.w	r3, r3, #1
 80005ec:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f7ff ffb9 	bl	8000570 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	b2db      	uxtb	r3, r3
 800060a:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f7ff ffaf 	bl	8000570 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	4619      	mov	r1, r3
 8000620:	f107 0208 	add.w	r2, r7, #8
 8000624:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2304      	movs	r3, #4
 800062c:	f002 f956 	bl	80028dc <HAL_I2C_Master_Transmit>
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	4611      	mov	r1, r2
 8000644:	461a      	mov	r2, r3
 8000646:	460b      	mov	r3, r1
 8000648:	71fb      	strb	r3, [r7, #7]
 800064a:	4613      	mov	r3, r2
 800064c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	79fa      	ldrb	r2, [r7, #7]
 8000658:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	79ba      	ldrb	r2, [r7, #6]
 800065e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	7e3a      	ldrb	r2, [r7, #24]
 8000664:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2228      	movs	r2, #40	@ 0x28
 800066a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2206      	movs	r2, #6
 8000670:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	220c      	movs	r2, #12
 8000676:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2214      	movs	r2, #20
 800067c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2208      	movs	r2, #8
 8000682:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000684:	2032      	movs	r0, #50	@ 0x32
 8000686:	f7ff ff73 	bl	8000570 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800068a:	2200      	movs	r2, #0
 800068c:	2133      	movs	r1, #51	@ 0x33
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f7ff ff7b 	bl	800058a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000694:	2200      	movs	r2, #0
 8000696:	2133      	movs	r1, #51	@ 0x33
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff ff76 	bl	800058a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800069e:	2005      	movs	r0, #5
 80006a0:	f7ff ff66 	bl	8000570 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2132      	movs	r1, #50	@ 0x32
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	f7ff ff6e 	bl	800058a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80006ae:	2005      	movs	r0, #5
 80006b0:	f7ff ff5e 	bl	8000570 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2120      	movs	r1, #32
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f7ff ff66 	bl	800058a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80006be:	2005      	movs	r0, #5
 80006c0:	f7ff ff56 	bl	8000570 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	79db      	ldrb	r3, [r3, #7]
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f7ff ff5c 	bl	800058a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	7a1b      	ldrb	r3, [r3, #8]
 80006d6:	2200      	movs	r2, #0
 80006d8:	4619      	mov	r1, r3
 80006da:	68f8      	ldr	r0, [r7, #12]
 80006dc:	f7ff ff55 	bl	800058a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	7a5b      	ldrb	r3, [r3, #9]
 80006e4:	2200      	movs	r2, #0
 80006e6:	4619      	mov	r1, r3
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f7ff ff4e 	bl	800058a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	7a9b      	ldrb	r3, [r3, #10]
 80006f2:	2200      	movs	r2, #0
 80006f4:	4619      	mov	r1, r3
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f7ff ff47 	bl	800058a <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2101      	movs	r1, #1
 8000700:	68f8      	ldr	r0, [r7, #12]
 8000702:	f7ff ff42 	bl	800058a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8000706:	2200      	movs	r2, #0
 8000708:	2102      	movs	r1, #2
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f7ff ff3d 	bl	800058a <CLCD_WriteI2C>
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
 8000724:	4613      	mov	r3, r2
 8000726:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	795b      	ldrb	r3, [r3, #5]
 8000730:	78fa      	ldrb	r2, [r7, #3]
 8000732:	429a      	cmp	r2, r3
 8000734:	d303      	bcc.n	800073e <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	795b      	ldrb	r3, [r3, #5]
 800073a:	3b01      	subs	r3, #1
 800073c:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	799b      	ldrb	r3, [r3, #6]
 8000742:	78ba      	ldrb	r2, [r7, #2]
 8000744:	429a      	cmp	r2, r3
 8000746:	d303      	bcc.n	8000750 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	799b      	ldrb	r3, [r3, #6]
 800074c:	3b01      	subs	r3, #1
 800074e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000750:	78bb      	ldrb	r3, [r7, #2]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d102      	bne.n	800075c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	e013      	b.n	8000784 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800075c:	78bb      	ldrb	r3, [r7, #2]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d103      	bne.n	800076a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	3340      	adds	r3, #64	@ 0x40
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	e00c      	b.n	8000784 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800076a:	78bb      	ldrb	r3, [r7, #2]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d103      	bne.n	8000778 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	3314      	adds	r3, #20
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e005      	b.n	8000784 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000778:	78bb      	ldrb	r3, [r7, #2]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d102      	bne.n	8000784 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	3354      	adds	r3, #84	@ 0x54
 8000782:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff fefa 	bl	800058a <CLCD_WriteI2C>
}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	460b      	mov	r3, r1
 80007a8:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80007aa:	78fb      	ldrb	r3, [r7, #3]
 80007ac:	2201      	movs	r2, #1
 80007ae:	4619      	mov	r1, r3
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff feea 	bl	800058a <CLCD_WriteI2C>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80007c8:	e007      	b.n	80007da <CLCD_I2C_WriteString+0x1c>
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	603a      	str	r2, [r7, #0]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	4619      	mov	r1, r3
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ffe2 	bl	800079e <CLCD_I2C_WriteChar>
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1f3      	bne.n	80007ca <CLCD_I2C_WriteString+0xc>
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2101      	movs	r1, #1
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff fec6 	bl	800058a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80007fe:	2005      	movs	r0, #5
 8000800:	f7ff feb6 	bl	8000570 <CLCD_Delay>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <process_button_pad_value>:
 *
 */
#include "keypad.h"
//////////////////////button fuctions/////////////////////////////
uint16_t process_button_pad_value(uint16_t btn_pad_value)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
  static button_state_t btn_sm_state = NOT_PRESSED;
  static uint32_t curr_time = 0;

  switch(btn_sm_state){
 8000816:	4b29      	ldr	r3, [pc, #164]	@ (80008bc <process_button_pad_value+0xb0>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b02      	cmp	r3, #2
 800081c:	d026      	beq.n	800086c <process_button_pad_value+0x60>
 800081e:	2b02      	cmp	r3, #2
 8000820:	dc47      	bgt.n	80008b2 <process_button_pad_value+0xa6>
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <process_button_pad_value+0x20>
 8000826:	2b01      	cmp	r3, #1
 8000828:	d00c      	beq.n	8000844 <process_button_pad_value+0x38>
 800082a:	e042      	b.n	80008b2 <process_button_pad_value+0xa6>
    case NOT_PRESSED:{
      if(btn_pad_value){
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d03a      	beq.n	80008a8 <process_button_pad_value+0x9c>
        btn_sm_state = BOUNCE;
 8000832:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <process_button_pad_value+0xb0>)
 8000834:	2201      	movs	r2, #1
 8000836:	701a      	strb	r2, [r3, #0]
        curr_time = HAL_GetTick();
 8000838:	f001 fc40 	bl	80020bc <HAL_GetTick>
 800083c:	4603      	mov	r3, r0
 800083e:	4a20      	ldr	r2, [pc, #128]	@ (80008c0 <process_button_pad_value+0xb4>)
 8000840:	6013      	str	r3, [r2, #0]
      }
      break;
 8000842:	e031      	b.n	80008a8 <process_button_pad_value+0x9c>
    }
    case BOUNCE:{
      if(HAL_GetTick() - curr_time >= 50 ){
 8000844:	f001 fc3a 	bl	80020bc <HAL_GetTick>
 8000848:	4602      	mov	r2, r0
 800084a:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <process_button_pad_value+0xb4>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	2b31      	cmp	r3, #49	@ 0x31
 8000852:	d92b      	bls.n	80008ac <process_button_pad_value+0xa0>
        //50ms has passed
        if(btn_pad_value){
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <process_button_pad_value+0x58>
          btn_sm_state = PRESSED;
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <process_button_pad_value+0xb0>)
 800085c:	2202      	movs	r2, #2
 800085e:	701a      	strb	r2, [r3, #0]
          return btn_pad_value;
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	e027      	b.n	80008b4 <process_button_pad_value+0xa8>
        }
        else
          btn_sm_state = NOT_PRESSED;
 8000864:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <process_button_pad_value+0xb0>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
      }
      break;
 800086a:	e01f      	b.n	80008ac <process_button_pad_value+0xa0>
    }
    case PRESSED:{
      if(!btn_pad_value){
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d108      	bne.n	8000884 <process_button_pad_value+0x78>
        btn_sm_state = BOUNCE;
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <process_button_pad_value+0xb0>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
        curr_time = HAL_GetTick();
 8000878:	f001 fc20 	bl	80020bc <HAL_GetTick>
 800087c:	4603      	mov	r3, r0
 800087e:	4a10      	ldr	r2, [pc, #64]	@ (80008c0 <process_button_pad_value+0xb4>)
 8000880:	6013      	str	r3, [r2, #0]
				if(HAL_GetTick() - curr_time >= 300 ){
					btn_sm_state = BOUNCE;
					curr_time = HAL_GetTick();
				}
			}
      break;
 8000882:	e015      	b.n	80008b0 <process_button_pad_value+0xa4>
				if(HAL_GetTick() - curr_time >= 300 ){
 8000884:	f001 fc1a 	bl	80020bc <HAL_GetTick>
 8000888:	4602      	mov	r2, r0
 800088a:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <process_button_pad_value+0xb4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000894:	d30c      	bcc.n	80008b0 <process_button_pad_value+0xa4>
					btn_sm_state = BOUNCE;
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <process_button_pad_value+0xb0>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
					curr_time = HAL_GetTick();
 800089c:	f001 fc0e 	bl	80020bc <HAL_GetTick>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a07      	ldr	r2, [pc, #28]	@ (80008c0 <process_button_pad_value+0xb4>)
 80008a4:	6013      	str	r3, [r2, #0]
      break;
 80008a6:	e003      	b.n	80008b0 <process_button_pad_value+0xa4>
      break;
 80008a8:	bf00      	nop
 80008aa:	e002      	b.n	80008b2 <process_button_pad_value+0xa6>
      break;
 80008ac:	bf00      	nop
 80008ae:	e000      	b.n	80008b2 <process_button_pad_value+0xa6>
      break;
 80008b0:	bf00      	nop
    }

  }

  return 0;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000088 	.word	0x20000088
 80008c0:	2000008c 	.word	0x2000008c

080008c4 <read_keypad>:


uint16_t read_keypad (void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
	uint16_t key_state = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	80fb      	strh	r3, [r7, #6]
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  //Pull the R1 low
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008d4:	488d      	ldr	r0, [pc, #564]	@ (8000b0c <read_keypad+0x248>)
 80008d6:	f001 fea3 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008e0:	488a      	ldr	r0, [pc, #552]	@ (8000b0c <read_keypad+0x248>)
 80008e2:	f001 fe9d 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 80008e6:	2201      	movs	r2, #1
 80008e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ec:	4887      	ldr	r0, [pc, #540]	@ (8000b0c <read_keypad+0x248>)
 80008ee:	f001 fe97 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	4884      	ldr	r0, [pc, #528]	@ (8000b0c <read_keypad+0x248>)
 80008fa:	f001 fe91 	bl	8002620 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 80008fe:	2140      	movs	r1, #64	@ 0x40
 8000900:	4883      	ldr	r0, [pc, #524]	@ (8000b10 <read_keypad+0x24c>)
 8000902:	f001 fe75 	bl	80025f0 <HAL_GPIO_ReadPin>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d103      	bne.n	8000914 <read_keypad+0x50>
	{
		key_state |= (1 << 0); // button 1
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	487e      	ldr	r0, [pc, #504]	@ (8000b10 <read_keypad+0x24c>)
 8000918:	f001 fe6a 	bl	80025f0 <HAL_GPIO_ReadPin>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d103      	bne.n	800092a <read_keypad+0x66>
	{
		key_state |= (1 << 1); // button 2
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 800092a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800092e:	4878      	ldr	r0, [pc, #480]	@ (8000b10 <read_keypad+0x24c>)
 8000930:	f001 fe5e 	bl	80025f0 <HAL_GPIO_ReadPin>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d103      	bne.n	8000942 <read_keypad+0x7e>
	{
		key_state |= (1 << 2); // button 3
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8000942:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000946:	4872      	ldr	r0, [pc, #456]	@ (8000b10 <read_keypad+0x24c>)
 8000948:	f001 fe52 	bl	80025f0 <HAL_GPIO_ReadPin>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d103      	bne.n	800095a <read_keypad+0x96>
	{
		key_state |= (1 << 3); // button A
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	80fb      	strh	r3, [r7, #6]
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000960:	486a      	ldr	r0, [pc, #424]	@ (8000b0c <read_keypad+0x248>)
 8000962:	f001 fe5d 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Pull the R2 High
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800096c:	4867      	ldr	r0, [pc, #412]	@ (8000b0c <read_keypad+0x248>)
 800096e:	f001 fe57 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000978:	4864      	ldr	r0, [pc, #400]	@ (8000b0c <read_keypad+0x248>)
 800097a:	f001 fe51 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000984:	4861      	ldr	r0, [pc, #388]	@ (8000b0c <read_keypad+0x248>)
 8000986:	f001 fe4b 	bl	8002620 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 800098a:	2140      	movs	r1, #64	@ 0x40
 800098c:	4860      	ldr	r0, [pc, #384]	@ (8000b10 <read_keypad+0x24c>)
 800098e:	f001 fe2f 	bl	80025f0 <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d103      	bne.n	80009a0 <read_keypad+0xdc>
	{
		key_state |= (1 << 4); // button 4
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 80009a0:	2180      	movs	r1, #128	@ 0x80
 80009a2:	485b      	ldr	r0, [pc, #364]	@ (8000b10 <read_keypad+0x24c>)
 80009a4:	f001 fe24 	bl	80025f0 <HAL_GPIO_ReadPin>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d103      	bne.n	80009b6 <read_keypad+0xf2>
	{
		key_state |= (1 << 5); // button 5
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	f043 0320 	orr.w	r3, r3, #32
 80009b4:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 80009b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009ba:	4855      	ldr	r0, [pc, #340]	@ (8000b10 <read_keypad+0x24c>)
 80009bc:	f001 fe18 	bl	80025f0 <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d103      	bne.n	80009ce <read_keypad+0x10a>
	{
		key_state |= (1 << 6); // button 6
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009cc:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 80009ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009d2:	484f      	ldr	r0, [pc, #316]	@ (8000b10 <read_keypad+0x24c>)
 80009d4:	f001 fe0c 	bl	80025f0 <HAL_GPIO_ReadPin>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <read_keypad+0x122>
	{
		key_state |= (1 << 7); // button B
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e4:	80fb      	strh	r3, [r7, #6]
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009ec:	4847      	ldr	r0, [pc, #284]	@ (8000b0c <read_keypad+0x248>)
 80009ee:	f001 fe17 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009f8:	4844      	ldr	r0, [pc, #272]	@ (8000b0c <read_keypad+0x248>)
 80009fa:	f001 fe11 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Pull the R3 High
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a04:	4841      	ldr	r0, [pc, #260]	@ (8000b0c <read_keypad+0x248>)
 8000a06:	f001 fe0b 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a10:	483e      	ldr	r0, [pc, #248]	@ (8000b0c <read_keypad+0x248>)
 8000a12:	f001 fe05 	bl	8002620 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8000a16:	2140      	movs	r1, #64	@ 0x40
 8000a18:	483d      	ldr	r0, [pc, #244]	@ (8000b10 <read_keypad+0x24c>)
 8000a1a:	f001 fde9 	bl	80025f0 <HAL_GPIO_ReadPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d103      	bne.n	8000a2c <read_keypad+0x168>
	{
		key_state |= (1 << 8); // button 7
 8000a24:	88fb      	ldrh	r3, [r7, #6]
 8000a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a2a:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	4838      	ldr	r0, [pc, #224]	@ (8000b10 <read_keypad+0x24c>)
 8000a30:	f001 fdde 	bl	80025f0 <HAL_GPIO_ReadPin>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d103      	bne.n	8000a42 <read_keypad+0x17e>
	{
		key_state |= (1 << 9); // button 8
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a40:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8000a42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a46:	4832      	ldr	r0, [pc, #200]	@ (8000b10 <read_keypad+0x24c>)
 8000a48:	f001 fdd2 	bl	80025f0 <HAL_GPIO_ReadPin>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d103      	bne.n	8000a5a <read_keypad+0x196>
	{
		key_state |= (1 << 10); // button 9
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a58:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8000a5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a5e:	482c      	ldr	r0, [pc, #176]	@ (8000b10 <read_keypad+0x24c>)
 8000a60:	f001 fdc6 	bl	80025f0 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d103      	bne.n	8000a72 <read_keypad+0x1ae>
	{
		key_state |= (1 << 11); // button C
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a70:	80fb      	strh	r3, [r7, #6]
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a78:	4824      	ldr	r0, [pc, #144]	@ (8000b0c <read_keypad+0x248>)
 8000a7a:	f001 fdd1 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a84:	4821      	ldr	r0, [pc, #132]	@ (8000b0c <read_keypad+0x248>)
 8000a86:	f001 fdcb 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a90:	481e      	ldr	r0, [pc, #120]	@ (8000b0c <read_keypad+0x248>)
 8000a92:	f001 fdc5 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Pull the R4 High
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a9c:	481b      	ldr	r0, [pc, #108]	@ (8000b0c <read_keypad+0x248>)
 8000a9e:	f001 fdbf 	bl	8002620 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8000aa2:	2140      	movs	r1, #64	@ 0x40
 8000aa4:	481a      	ldr	r0, [pc, #104]	@ (8000b10 <read_keypad+0x24c>)
 8000aa6:	f001 fda3 	bl	80025f0 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d103      	bne.n	8000ab8 <read_keypad+0x1f4>
	{
		key_state |= (1 << 12); // button *
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ab6:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8000ab8:	2180      	movs	r1, #128	@ 0x80
 8000aba:	4815      	ldr	r0, [pc, #84]	@ (8000b10 <read_keypad+0x24c>)
 8000abc:	f001 fd98 	bl	80025f0 <HAL_GPIO_ReadPin>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d103      	bne.n	8000ace <read_keypad+0x20a>
	{
		key_state |= (1 << 13); // button 0
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000acc:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8000ace:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ad2:	480f      	ldr	r0, [pc, #60]	@ (8000b10 <read_keypad+0x24c>)
 8000ad4:	f001 fd8c 	bl	80025f0 <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d103      	bne.n	8000ae6 <read_keypad+0x222>
	{
		key_state |= (1 << 14); // button #
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae4:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8000ae6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aea:	4809      	ldr	r0, [pc, #36]	@ (8000b10 <read_keypad+0x24c>)
 8000aec:	f001 fd80 	bl	80025f0 <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d105      	bne.n	8000b02 <read_keypad+0x23e>
	{
		key_state |= (1 << 15); // button D
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000b00:	80fb      	strh	r3, [r7, #6]
	}

	return key_state ;
 8000b02:	88fb      	ldrh	r3, [r7, #6]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020800 	.word	0x40020800

08000b14 <delete_data>:
	uint16_t len;
}parameter_t;

parameter_t data;

void delete_data(parameter_t *data) {
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    if (data->len > 0) { // Kiểm tra xem có dữ liệu để xóa không
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	8a9b      	ldrh	r3, [r3, #20]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00b      	beq.n	8000b3c <delete_data+0x28>
        data->len--; // Giảm độ dài
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	8a9b      	ldrh	r3, [r3, #20]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	829a      	strh	r2, [r3, #20]
        data->payload[data->len] = '\0'; // �?ặt ký tự cuối thành '\0'
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	8a9b      	ldrh	r3, [r3, #20]
 8000b34:	461a      	mov	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	5499      	strb	r1, [r3, r2]
    }
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <add_data>:

void add_data(parameter_t *data, char c) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	70fb      	strb	r3, [r7, #3]
    if (data->len < 10) { // �?ảm bảo không vượt quá mảng
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	8a9b      	ldrh	r3, [r3, #20]
 8000b58:	2b09      	cmp	r3, #9
 8000b5a:	d811      	bhi.n	8000b80 <add_data+0x38>
        data->payload[data->len] = c; // Thêm ký tự vào vị trí tiếp theo
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	8a9b      	ldrh	r3, [r3, #20]
 8000b60:	4619      	mov	r1, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	78fa      	ldrb	r2, [r7, #3]
 8000b66:	545a      	strb	r2, [r3, r1]
        data->len++;                   // Cập nhật độ dài
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	8a9b      	ldrh	r3, [r3, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	829a      	strh	r2, [r3, #20]
        data->payload[data->len] = '\0'; // �?ảm bảo kết thúc chuỗi
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	8a9b      	ldrh	r3, [r3, #20]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	5499      	strb	r1, [r3, r2]
    }
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <set_cow>:

void set_cow(uint8_t prev_state, uint8_t new_state) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	460a      	mov	r2, r1
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	71bb      	strb	r3, [r7, #6]
    CLCD_I2C_SetCursor(&LCD1, 19, prev_state); // Xóa ký tự "<" ở vị trí cũ
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	2113      	movs	r1, #19
 8000ba2:	480a      	ldr	r0, [pc, #40]	@ (8000bcc <set_cow+0x40>)
 8000ba4:	f7ff fdb8 	bl	8000718 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, " ");
 8000ba8:	4909      	ldr	r1, [pc, #36]	@ (8000bd0 <set_cow+0x44>)
 8000baa:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <set_cow+0x40>)
 8000bac:	f7ff fe07 	bl	80007be <CLCD_I2C_WriteString>

    CLCD_I2C_SetCursor(&LCD1, 19, new_state); // Hiển thị ký tự "<" ở vị trí mới
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	2113      	movs	r1, #19
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <set_cow+0x40>)
 8000bb8:	f7ff fdae 	bl	8000718 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, "<");
 8000bbc:	4905      	ldr	r1, [pc, #20]	@ (8000bd4 <set_cow+0x48>)
 8000bbe:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <set_cow+0x40>)
 8000bc0:	f7ff fdfd 	bl	80007be <CLCD_I2C_WriteString>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000138 	.word	0x20000138
 8000bd0:	08004710 	.word	0x08004710
 8000bd4:	08004714 	.word	0x08004714

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f001 fa07 	bl	8001ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 fe99 	bl	8001918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 ff5f 	bl	8001aa8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bea:	f000 ff01 	bl	80019f0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000bee:	f000 ff2d 	bl	8001a4c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  CLCD_I2C_Init(&LCD1,&hi2c1,0x4e,20,4);
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2314      	movs	r3, #20
 8000bf8:	224e      	movs	r2, #78	@ 0x4e
 8000bfa:	49c9      	ldr	r1, [pc, #804]	@ (8000f20 <main+0x348>)
 8000bfc:	48c9      	ldr	r0, [pc, #804]	@ (8000f24 <main+0x34c>)
 8000bfe:	f7ff fd1b 	bl	8000638 <CLCD_I2C_Init>
  CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	48c7      	ldr	r0, [pc, #796]	@ (8000f24 <main+0x34c>)
 8000c08:	f7ff fd86 	bl	8000718 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1,"s1:");
 8000c0c:	49c6      	ldr	r1, [pc, #792]	@ (8000f28 <main+0x350>)
 8000c0e:	48c5      	ldr	r0, [pc, #788]	@ (8000f24 <main+0x34c>)
 8000c10:	f7ff fdd5 	bl	80007be <CLCD_I2C_WriteString>
  CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2100      	movs	r1, #0
 8000c18:	48c2      	ldr	r0, [pc, #776]	@ (8000f24 <main+0x34c>)
 8000c1a:	f7ff fd7d 	bl	8000718 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1,"t1:");
 8000c1e:	49c3      	ldr	r1, [pc, #780]	@ (8000f2c <main+0x354>)
 8000c20:	48c0      	ldr	r0, [pc, #768]	@ (8000f24 <main+0x34c>)
 8000c22:	f7ff fdcc 	bl	80007be <CLCD_I2C_WriteString>
  CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8000c26:	2202      	movs	r2, #2
 8000c28:	2100      	movs	r1, #0
 8000c2a:	48be      	ldr	r0, [pc, #760]	@ (8000f24 <main+0x34c>)
 8000c2c:	f7ff fd74 	bl	8000718 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1,"s2:");
 8000c30:	49bf      	ldr	r1, [pc, #764]	@ (8000f30 <main+0x358>)
 8000c32:	48bc      	ldr	r0, [pc, #752]	@ (8000f24 <main+0x34c>)
 8000c34:	f7ff fdc3 	bl	80007be <CLCD_I2C_WriteString>
  CLCD_I2C_SetCursor(&LCD1, 0, 3);
 8000c38:	2203      	movs	r2, #3
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	48b9      	ldr	r0, [pc, #740]	@ (8000f24 <main+0x34c>)
 8000c3e:	f7ff fd6b 	bl	8000718 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1,"t2:");
 8000c42:	49bc      	ldr	r1, [pc, #752]	@ (8000f34 <main+0x35c>)
 8000c44:	48b7      	ldr	r0, [pc, #732]	@ (8000f24 <main+0x34c>)
 8000c46:	f7ff fdba 	bl	80007be <CLCD_I2C_WriteString>
  CLCD_I2C_SetCursor(&LCD1, 19, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2113      	movs	r1, #19
 8000c4e:	48b5      	ldr	r0, [pc, #724]	@ (8000f24 <main+0x34c>)
 8000c50:	f7ff fd62 	bl	8000718 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1, "<");
 8000c54:	49b8      	ldr	r1, [pc, #736]	@ (8000f38 <main+0x360>)
 8000c56:	48b3      	ldr	r0, [pc, #716]	@ (8000f24 <main+0x34c>)
 8000c58:	f7ff fdb1 	bl	80007be <CLCD_I2C_WriteString>
	      static parameter_t data[4] = {{{0}, 0}}; // Mảng chứa 4 cấu hình
	  	  static uint8_t state = 0;
	  	  static parameter_t password = {{0},0};

	  	  uint16_t btn_value;
	  	  btn_value = process_button_pad_value(read_keypad());
 8000c5c:	f7ff fe32 	bl	80008c4 <read_keypad>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fdd2 	bl	800080c <process_button_pad_value>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	80fb      	strh	r3, [r7, #6]
	  	  static uint16_t menu_state = SET_PARAMETER;

	  	if (btn_value) {
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f4      	beq.n	8000c5c <main+0x84>
	  		printf("%d\n",btn_value);
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	4619      	mov	r1, r3
 8000c76:	48b1      	ldr	r0, [pc, #708]	@ (8000f3c <main+0x364>)
 8000c78:	f002 fed0 	bl	8003a1c <iprintf>
		  	uint8_t prev_state;
		  	switch(menu_state){
 8000c7c:	4bb0      	ldr	r3, [pc, #704]	@ (8000f40 <main+0x368>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	f000 83d0 	beq.w	8001426 <main+0x84e>
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	dce8      	bgt.n	8000c5c <main+0x84>
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 8462 	beq.w	8001554 <main+0x97c>
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d1e3      	bne.n	8000c5c <main+0x84>
				case SET_PARAMETER:
					switch (btn_value) {
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c9a:	f000 83a5 	beq.w	80013e8 <main+0x810>
 8000c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000ca2:	f300 83be 	bgt.w	8001422 <main+0x84a>
 8000ca6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000caa:	f000 8398 	beq.w	80013de <main+0x806>
 8000cae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000cb2:	f300 83b6 	bgt.w	8001422 <main+0x84a>
 8000cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cba:	f000 8359 	beq.w	8001370 <main+0x798>
 8000cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cc2:	f300 83ae 	bgt.w	8001422 <main+0x84a>
 8000cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000cca:	f000 834c 	beq.w	8001366 <main+0x78e>
 8000cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000cd2:	f300 83a6 	bgt.w	8001422 <main+0x84a>
 8000cd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000cda:	f000 82f7 	beq.w	80012cc <main+0x6f4>
 8000cde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ce2:	f300 839e 	bgt.w	8001422 <main+0x84a>
 8000ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cea:	f000 82b8 	beq.w	800125e <main+0x686>
 8000cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cf2:	f300 8396 	bgt.w	8001422 <main+0x84a>
 8000cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cfa:	f000 8279 	beq.w	80011f0 <main+0x618>
 8000cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d02:	f300 838e 	bgt.w	8001422 <main+0x84a>
 8000d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d0a:	f000 8231 	beq.w	8001170 <main+0x598>
 8000d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d12:	f300 8386 	bgt.w	8001422 <main+0x84a>
 8000d16:	2b40      	cmp	r3, #64	@ 0x40
 8000d18:	f300 808a 	bgt.w	8000e30 <main+0x258>
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f340 8380 	ble.w	8001422 <main+0x84a>
 8000d22:	3b01      	subs	r3, #1
 8000d24:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d26:	f200 837c 	bhi.w	8001422 <main+0x84a>
 8000d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d30 <main+0x158>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000e43 	.word	0x08000e43
 8000d34:	08000eb1 	.word	0x08000eb1
 8000d38:	08001423 	.word	0x08001423
 8000d3c:	08000f55 	.word	0x08000f55
 8000d40:	08001423 	.word	0x08001423
 8000d44:	08001423 	.word	0x08001423
 8000d48:	08001423 	.word	0x08001423
 8000d4c:	08000fc3 	.word	0x08000fc3
 8000d50:	08001423 	.word	0x08001423
 8000d54:	08001423 	.word	0x08001423
 8000d58:	08001423 	.word	0x08001423
 8000d5c:	08000e39 	.word	0x08000e39
 8000d60:	08001423 	.word	0x08001423
 8000d64:	08001423 	.word	0x08001423
 8000d68:	08001423 	.word	0x08001423
 8000d6c:	08000ff5 	.word	0x08000ff5
 8000d70:	08001423 	.word	0x08001423
 8000d74:	08001423 	.word	0x08001423
 8000d78:	08001423 	.word	0x08001423
 8000d7c:	08001423 	.word	0x08001423
 8000d80:	08001423 	.word	0x08001423
 8000d84:	08001423 	.word	0x08001423
 8000d88:	08001423 	.word	0x08001423
 8000d8c:	08001423 	.word	0x08001423
 8000d90:	08001423 	.word	0x08001423
 8000d94:	08001423 	.word	0x08001423
 8000d98:	08001423 	.word	0x08001423
 8000d9c:	08001423 	.word	0x08001423
 8000da0:	08001423 	.word	0x08001423
 8000da4:	08001423 	.word	0x08001423
 8000da8:	08001423 	.word	0x08001423
 8000dac:	08001063 	.word	0x08001063
 8000db0:	08001423 	.word	0x08001423
 8000db4:	08001423 	.word	0x08001423
 8000db8:	08001423 	.word	0x08001423
 8000dbc:	08001423 	.word	0x08001423
 8000dc0:	08001423 	.word	0x08001423
 8000dc4:	08001423 	.word	0x08001423
 8000dc8:	08001423 	.word	0x08001423
 8000dcc:	08001423 	.word	0x08001423
 8000dd0:	08001423 	.word	0x08001423
 8000dd4:	08001423 	.word	0x08001423
 8000dd8:	08001423 	.word	0x08001423
 8000ddc:	08001423 	.word	0x08001423
 8000de0:	08001423 	.word	0x08001423
 8000de4:	08001423 	.word	0x08001423
 8000de8:	08001423 	.word	0x08001423
 8000dec:	08001423 	.word	0x08001423
 8000df0:	08001423 	.word	0x08001423
 8000df4:	08001423 	.word	0x08001423
 8000df8:	08001423 	.word	0x08001423
 8000dfc:	08001423 	.word	0x08001423
 8000e00:	08001423 	.word	0x08001423
 8000e04:	08001423 	.word	0x08001423
 8000e08:	08001423 	.word	0x08001423
 8000e0c:	08001423 	.word	0x08001423
 8000e10:	08001423 	.word	0x08001423
 8000e14:	08001423 	.word	0x08001423
 8000e18:	08001423 	.word	0x08001423
 8000e1c:	08001423 	.word	0x08001423
 8000e20:	08001423 	.word	0x08001423
 8000e24:	08001423 	.word	0x08001423
 8000e28:	08001423 	.word	0x08001423
 8000e2c:	080010d1 	.word	0x080010d1
 8000e30:	2b80      	cmp	r3, #128	@ 0x80
 8000e32:	f000 8184 	beq.w	800113e <main+0x566>
							 CLCD_I2C_WriteString(&LCD1, "Enter:");
							 CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							 break;

						default:
							 break;
 8000e36:	e2f4      	b.n	8001422 <main+0x84a>
							CLCD_I2C_WriteString(&LCD1, "config state");
 8000e38:	4942      	ldr	r1, [pc, #264]	@ (8000f44 <main+0x36c>)
 8000e3a:	483a      	ldr	r0, [pc, #232]	@ (8000f24 <main+0x34c>)
 8000e3c:	f7ff fcbf 	bl	80007be <CLCD_I2C_WriteString>
							break;
 8000e40:	e2f0      	b.n	8001424 <main+0x84c>
							add_data(&data[state], '1');
 8000e42:	4b41      	ldr	r3, [pc, #260]	@ (8000f48 <main+0x370>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	2316      	movs	r3, #22
 8000e4a:	fb02 f303 	mul.w	r3, r2, r3
 8000e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f4c <main+0x374>)
 8000e50:	4413      	add	r3, r2
 8000e52:	2131      	movs	r1, #49	@ 0x31
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fe77 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f48 <main+0x370>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4a3a      	ldr	r2, [pc, #232]	@ (8000f4c <main+0x374>)
 8000e62:	2316      	movs	r3, #22
 8000e64:	fb01 f303 	mul.w	r3, r1, r3
 8000e68:	4413      	add	r3, r2
 8000e6a:	3314      	adds	r3, #20
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4b35      	ldr	r3, [pc, #212]	@ (8000f48 <main+0x370>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	2316      	movs	r3, #22
 8000e78:	fb02 f303 	mul.w	r3, r2, r3
 8000e7c:	4a33      	ldr	r2, [pc, #204]	@ (8000f4c <main+0x374>)
 8000e7e:	4413      	add	r3, r2
 8000e80:	461a      	mov	r2, r3
 8000e82:	4833      	ldr	r0, [pc, #204]	@ (8000f50 <main+0x378>)
 8000e84:	f002 fdca 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 8000e88:	4b2f      	ldr	r3, [pc, #188]	@ (8000f48 <main+0x370>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	2103      	movs	r1, #3
 8000e90:	4824      	ldr	r0, [pc, #144]	@ (8000f24 <main+0x34c>)
 8000e92:	f7ff fc41 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 8000e96:	4b2c      	ldr	r3, [pc, #176]	@ (8000f48 <main+0x370>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2316      	movs	r3, #22
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8000f4c <main+0x374>)
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	481e      	ldr	r0, [pc, #120]	@ (8000f24 <main+0x34c>)
 8000eaa:	f7ff fc88 	bl	80007be <CLCD_I2C_WriteString>
							break;
 8000eae:	e2b9      	b.n	8001424 <main+0x84c>
							add_data(&data[state], '2');
 8000eb0:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <main+0x370>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	2316      	movs	r3, #22
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	4a23      	ldr	r2, [pc, #140]	@ (8000f4c <main+0x374>)
 8000ebe:	4413      	add	r3, r2
 8000ec0:	2132      	movs	r1, #50	@ 0x32
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fe40 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <main+0x370>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4a1f      	ldr	r2, [pc, #124]	@ (8000f4c <main+0x374>)
 8000ed0:	2316      	movs	r3, #22
 8000ed2:	fb01 f303 	mul.w	r3, r1, r3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3314      	adds	r3, #20
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <main+0x370>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	2316      	movs	r3, #22
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	4a18      	ldr	r2, [pc, #96]	@ (8000f4c <main+0x374>)
 8000eec:	4413      	add	r3, r2
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4817      	ldr	r0, [pc, #92]	@ (8000f50 <main+0x378>)
 8000ef2:	f002 fd93 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 8000ef6:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <main+0x370>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	2103      	movs	r1, #3
 8000efe:	4809      	ldr	r0, [pc, #36]	@ (8000f24 <main+0x34c>)
 8000f00:	f7ff fc0a 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 8000f04:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <main+0x370>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2316      	movs	r3, #22
 8000f0c:	fb02 f303 	mul.w	r3, r2, r3
 8000f10:	4a0e      	ldr	r2, [pc, #56]	@ (8000f4c <main+0x374>)
 8000f12:	4413      	add	r3, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	4803      	ldr	r0, [pc, #12]	@ (8000f24 <main+0x34c>)
 8000f18:	f7ff fc51 	bl	80007be <CLCD_I2C_WriteString>
							break;
 8000f1c:	e282      	b.n	8001424 <main+0x84c>
 8000f1e:	bf00      	nop
 8000f20:	20000090 	.word	0x20000090
 8000f24:	20000138 	.word	0x20000138
 8000f28:	08004718 	.word	0x08004718
 8000f2c:	0800471c 	.word	0x0800471c
 8000f30:	08004720 	.word	0x08004720
 8000f34:	08004724 	.word	0x08004724
 8000f38:	08004714 	.word	0x08004714
 8000f3c:	08004728 	.word	0x08004728
 8000f40:	20000000 	.word	0x20000000
 8000f44:	0800472c 	.word	0x0800472c
 8000f48:	20000144 	.word	0x20000144
 8000f4c:	20000148 	.word	0x20000148
 8000f50:	0800473c 	.word	0x0800473c
							add_data(&data[state], '3');
 8000f54:	4ba2      	ldr	r3, [pc, #648]	@ (80011e0 <main+0x608>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2316      	movs	r3, #22
 8000f5c:	fb02 f303 	mul.w	r3, r2, r3
 8000f60:	4aa0      	ldr	r2, [pc, #640]	@ (80011e4 <main+0x60c>)
 8000f62:	4413      	add	r3, r2
 8000f64:	2133      	movs	r1, #51	@ 0x33
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fdee 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 8000f6c:	4b9c      	ldr	r3, [pc, #624]	@ (80011e0 <main+0x608>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	4a9c      	ldr	r2, [pc, #624]	@ (80011e4 <main+0x60c>)
 8000f74:	2316      	movs	r3, #22
 8000f76:	fb01 f303 	mul.w	r3, r1, r3
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3314      	adds	r3, #20
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4b97      	ldr	r3, [pc, #604]	@ (80011e0 <main+0x608>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	2316      	movs	r3, #22
 8000f8a:	fb02 f303 	mul.w	r3, r2, r3
 8000f8e:	4a95      	ldr	r2, [pc, #596]	@ (80011e4 <main+0x60c>)
 8000f90:	4413      	add	r3, r2
 8000f92:	461a      	mov	r2, r3
 8000f94:	4894      	ldr	r0, [pc, #592]	@ (80011e8 <main+0x610>)
 8000f96:	f002 fd41 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 8000f9a:	4b91      	ldr	r3, [pc, #580]	@ (80011e0 <main+0x608>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	2103      	movs	r1, #3
 8000fa2:	4892      	ldr	r0, [pc, #584]	@ (80011ec <main+0x614>)
 8000fa4:	f7ff fbb8 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 8000fa8:	4b8d      	ldr	r3, [pc, #564]	@ (80011e0 <main+0x608>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	2316      	movs	r3, #22
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	4a8b      	ldr	r2, [pc, #556]	@ (80011e4 <main+0x60c>)
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	488c      	ldr	r0, [pc, #560]	@ (80011ec <main+0x614>)
 8000fbc:	f7ff fbff 	bl	80007be <CLCD_I2C_WriteString>
							break;
 8000fc0:	e230      	b.n	8001424 <main+0x84c>
							prev_state = state; // save old position
 8000fc2:	4b87      	ldr	r3, [pc, #540]	@ (80011e0 <main+0x608>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	717b      	strb	r3, [r7, #5]
							if (state == s1_s) state = t2_s;
 8000fc8:	4b85      	ldr	r3, [pc, #532]	@ (80011e0 <main+0x608>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d103      	bne.n	8000fd8 <main+0x400>
 8000fd0:	4b83      	ldr	r3, [pc, #524]	@ (80011e0 <main+0x608>)
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e005      	b.n	8000fe4 <main+0x40c>
							else state--; // new postion
 8000fd8:	4b81      	ldr	r3, [pc, #516]	@ (80011e0 <main+0x608>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b7f      	ldr	r3, [pc, #508]	@ (80011e0 <main+0x608>)
 8000fe2:	701a      	strb	r2, [r3, #0]
							set_cow(prev_state, state);
 8000fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80011e0 <main+0x608>)
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	797b      	ldrb	r3, [r7, #5]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fdcd 	bl	8000b8c <set_cow>
							break;
 8000ff2:	e217      	b.n	8001424 <main+0x84c>
							add_data(&data[state], '4');
 8000ff4:	4b7a      	ldr	r3, [pc, #488]	@ (80011e0 <main+0x608>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	2316      	movs	r3, #22
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	4a78      	ldr	r2, [pc, #480]	@ (80011e4 <main+0x60c>)
 8001002:	4413      	add	r3, r2
 8001004:	2134      	movs	r1, #52	@ 0x34
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fd9e 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 800100c:	4b74      	ldr	r3, [pc, #464]	@ (80011e0 <main+0x608>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	4a74      	ldr	r2, [pc, #464]	@ (80011e4 <main+0x60c>)
 8001014:	2316      	movs	r3, #22
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	4413      	add	r3, r2
 800101c:	3314      	adds	r3, #20
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	4b6f      	ldr	r3, [pc, #444]	@ (80011e0 <main+0x608>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	2316      	movs	r3, #22
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	4a6d      	ldr	r2, [pc, #436]	@ (80011e4 <main+0x60c>)
 8001030:	4413      	add	r3, r2
 8001032:	461a      	mov	r2, r3
 8001034:	486c      	ldr	r0, [pc, #432]	@ (80011e8 <main+0x610>)
 8001036:	f002 fcf1 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800103a:	4b69      	ldr	r3, [pc, #420]	@ (80011e0 <main+0x608>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	2103      	movs	r1, #3
 8001042:	486a      	ldr	r0, [pc, #424]	@ (80011ec <main+0x614>)
 8001044:	f7ff fb68 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 8001048:	4b65      	ldr	r3, [pc, #404]	@ (80011e0 <main+0x608>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	2316      	movs	r3, #22
 8001050:	fb02 f303 	mul.w	r3, r2, r3
 8001054:	4a63      	ldr	r2, [pc, #396]	@ (80011e4 <main+0x60c>)
 8001056:	4413      	add	r3, r2
 8001058:	4619      	mov	r1, r3
 800105a:	4864      	ldr	r0, [pc, #400]	@ (80011ec <main+0x614>)
 800105c:	f7ff fbaf 	bl	80007be <CLCD_I2C_WriteString>
							break;
 8001060:	e1e0      	b.n	8001424 <main+0x84c>
							add_data(&data[state], '5');
 8001062:	4b5f      	ldr	r3, [pc, #380]	@ (80011e0 <main+0x608>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	2316      	movs	r3, #22
 800106a:	fb02 f303 	mul.w	r3, r2, r3
 800106e:	4a5d      	ldr	r2, [pc, #372]	@ (80011e4 <main+0x60c>)
 8001070:	4413      	add	r3, r2
 8001072:	2135      	movs	r1, #53	@ 0x35
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fd67 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 800107a:	4b59      	ldr	r3, [pc, #356]	@ (80011e0 <main+0x608>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	4a58      	ldr	r2, [pc, #352]	@ (80011e4 <main+0x60c>)
 8001082:	2316      	movs	r3, #22
 8001084:	fb01 f303 	mul.w	r3, r1, r3
 8001088:	4413      	add	r3, r2
 800108a:	3314      	adds	r3, #20
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	4619      	mov	r1, r3
 8001090:	4b53      	ldr	r3, [pc, #332]	@ (80011e0 <main+0x608>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	2316      	movs	r3, #22
 8001098:	fb02 f303 	mul.w	r3, r2, r3
 800109c:	4a51      	ldr	r2, [pc, #324]	@ (80011e4 <main+0x60c>)
 800109e:	4413      	add	r3, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	4851      	ldr	r0, [pc, #324]	@ (80011e8 <main+0x610>)
 80010a4:	f002 fcba 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 80010a8:	4b4d      	ldr	r3, [pc, #308]	@ (80011e0 <main+0x608>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	2103      	movs	r1, #3
 80010b0:	484e      	ldr	r0, [pc, #312]	@ (80011ec <main+0x614>)
 80010b2:	f7ff fb31 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 80010b6:	4b4a      	ldr	r3, [pc, #296]	@ (80011e0 <main+0x608>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	2316      	movs	r3, #22
 80010be:	fb02 f303 	mul.w	r3, r2, r3
 80010c2:	4a48      	ldr	r2, [pc, #288]	@ (80011e4 <main+0x60c>)
 80010c4:	4413      	add	r3, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	4848      	ldr	r0, [pc, #288]	@ (80011ec <main+0x614>)
 80010ca:	f7ff fb78 	bl	80007be <CLCD_I2C_WriteString>
							break;
 80010ce:	e1a9      	b.n	8001424 <main+0x84c>
							add_data(&data[state], '6');
 80010d0:	4b43      	ldr	r3, [pc, #268]	@ (80011e0 <main+0x608>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	2316      	movs	r3, #22
 80010d8:	fb02 f303 	mul.w	r3, r2, r3
 80010dc:	4a41      	ldr	r2, [pc, #260]	@ (80011e4 <main+0x60c>)
 80010de:	4413      	add	r3, r2
 80010e0:	2136      	movs	r1, #54	@ 0x36
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fd30 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 80010e8:	4b3d      	ldr	r3, [pc, #244]	@ (80011e0 <main+0x608>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	4a3d      	ldr	r2, [pc, #244]	@ (80011e4 <main+0x60c>)
 80010f0:	2316      	movs	r3, #22
 80010f2:	fb01 f303 	mul.w	r3, r1, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	3314      	adds	r3, #20
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4b38      	ldr	r3, [pc, #224]	@ (80011e0 <main+0x608>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	2316      	movs	r3, #22
 8001106:	fb02 f303 	mul.w	r3, r2, r3
 800110a:	4a36      	ldr	r2, [pc, #216]	@ (80011e4 <main+0x60c>)
 800110c:	4413      	add	r3, r2
 800110e:	461a      	mov	r2, r3
 8001110:	4835      	ldr	r0, [pc, #212]	@ (80011e8 <main+0x610>)
 8001112:	f002 fc83 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 8001116:	4b32      	ldr	r3, [pc, #200]	@ (80011e0 <main+0x608>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	2103      	movs	r1, #3
 800111e:	4833      	ldr	r0, [pc, #204]	@ (80011ec <main+0x614>)
 8001120:	f7ff fafa 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 8001124:	4b2e      	ldr	r3, [pc, #184]	@ (80011e0 <main+0x608>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	2316      	movs	r3, #22
 800112c:	fb02 f303 	mul.w	r3, r2, r3
 8001130:	4a2c      	ldr	r2, [pc, #176]	@ (80011e4 <main+0x60c>)
 8001132:	4413      	add	r3, r2
 8001134:	4619      	mov	r1, r3
 8001136:	482d      	ldr	r0, [pc, #180]	@ (80011ec <main+0x614>)
 8001138:	f7ff fb41 	bl	80007be <CLCD_I2C_WriteString>
							break;
 800113c:	e172      	b.n	8001424 <main+0x84c>
							prev_state = state; // save old position
 800113e:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <main+0x608>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	717b      	strb	r3, [r7, #5]
							if (state == t2_s) state = s1_s;
 8001144:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <main+0x608>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d103      	bne.n	8001154 <main+0x57c>
 800114c:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <main+0x608>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e005      	b.n	8001160 <main+0x588>
							else state++; // new position
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <main+0x608>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <main+0x608>)
 800115e:	701a      	strb	r2, [r3, #0]
							set_cow(prev_state, state);
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <main+0x608>)
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	797b      	ldrb	r3, [r7, #5]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fd0f 	bl	8000b8c <set_cow>
							break;
 800116e:	e159      	b.n	8001424 <main+0x84c>
							add_data(&data[state], '7');
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <main+0x608>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	2316      	movs	r3, #22
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	4a19      	ldr	r2, [pc, #100]	@ (80011e4 <main+0x60c>)
 800117e:	4413      	add	r3, r2
 8001180:	2137      	movs	r1, #55	@ 0x37
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fce0 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 8001188:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <main+0x608>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	4a15      	ldr	r2, [pc, #84]	@ (80011e4 <main+0x60c>)
 8001190:	2316      	movs	r3, #22
 8001192:	fb01 f303 	mul.w	r3, r1, r3
 8001196:	4413      	add	r3, r2
 8001198:	3314      	adds	r3, #20
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <main+0x608>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	2316      	movs	r3, #22
 80011a6:	fb02 f303 	mul.w	r3, r2, r3
 80011aa:	4a0e      	ldr	r2, [pc, #56]	@ (80011e4 <main+0x60c>)
 80011ac:	4413      	add	r3, r2
 80011ae:	461a      	mov	r2, r3
 80011b0:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <main+0x610>)
 80011b2:	f002 fc33 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <main+0x608>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	2103      	movs	r1, #3
 80011be:	480b      	ldr	r0, [pc, #44]	@ (80011ec <main+0x614>)
 80011c0:	f7ff faaa 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <main+0x608>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	2316      	movs	r3, #22
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <main+0x60c>)
 80011d2:	4413      	add	r3, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	4805      	ldr	r0, [pc, #20]	@ (80011ec <main+0x614>)
 80011d8:	f7ff faf1 	bl	80007be <CLCD_I2C_WriteString>
							break;
 80011dc:	e122      	b.n	8001424 <main+0x84c>
 80011de:	bf00      	nop
 80011e0:	20000144 	.word	0x20000144
 80011e4:	20000148 	.word	0x20000148
 80011e8:	0800473c 	.word	0x0800473c
 80011ec:	20000138 	.word	0x20000138
							add_data(&data[state], '8');
 80011f0:	4b9e      	ldr	r3, [pc, #632]	@ (800146c <main+0x894>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	2316      	movs	r3, #22
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	4a9c      	ldr	r2, [pc, #624]	@ (8001470 <main+0x898>)
 80011fe:	4413      	add	r3, r2
 8001200:	2138      	movs	r1, #56	@ 0x38
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fca0 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 8001208:	4b98      	ldr	r3, [pc, #608]	@ (800146c <main+0x894>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	4a98      	ldr	r2, [pc, #608]	@ (8001470 <main+0x898>)
 8001210:	2316      	movs	r3, #22
 8001212:	fb01 f303 	mul.w	r3, r1, r3
 8001216:	4413      	add	r3, r2
 8001218:	3314      	adds	r3, #20
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4b93      	ldr	r3, [pc, #588]	@ (800146c <main+0x894>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	2316      	movs	r3, #22
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	4a91      	ldr	r2, [pc, #580]	@ (8001470 <main+0x898>)
 800122c:	4413      	add	r3, r2
 800122e:	461a      	mov	r2, r3
 8001230:	4890      	ldr	r0, [pc, #576]	@ (8001474 <main+0x89c>)
 8001232:	f002 fbf3 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 8001236:	4b8d      	ldr	r3, [pc, #564]	@ (800146c <main+0x894>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	2103      	movs	r1, #3
 800123e:	488e      	ldr	r0, [pc, #568]	@ (8001478 <main+0x8a0>)
 8001240:	f7ff fa6a 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 8001244:	4b89      	ldr	r3, [pc, #548]	@ (800146c <main+0x894>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	2316      	movs	r3, #22
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	4a87      	ldr	r2, [pc, #540]	@ (8001470 <main+0x898>)
 8001252:	4413      	add	r3, r2
 8001254:	4619      	mov	r1, r3
 8001256:	4888      	ldr	r0, [pc, #544]	@ (8001478 <main+0x8a0>)
 8001258:	f7ff fab1 	bl	80007be <CLCD_I2C_WriteString>
							break;
 800125c:	e0e2      	b.n	8001424 <main+0x84c>
							add_data(&data[state], '9');
 800125e:	4b83      	ldr	r3, [pc, #524]	@ (800146c <main+0x894>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	2316      	movs	r3, #22
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	4a81      	ldr	r2, [pc, #516]	@ (8001470 <main+0x898>)
 800126c:	4413      	add	r3, r2
 800126e:	2139      	movs	r1, #57	@ 0x39
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fc69 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 8001276:	4b7d      	ldr	r3, [pc, #500]	@ (800146c <main+0x894>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4619      	mov	r1, r3
 800127c:	4a7c      	ldr	r2, [pc, #496]	@ (8001470 <main+0x898>)
 800127e:	2316      	movs	r3, #22
 8001280:	fb01 f303 	mul.w	r3, r1, r3
 8001284:	4413      	add	r3, r2
 8001286:	3314      	adds	r3, #20
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	4b77      	ldr	r3, [pc, #476]	@ (800146c <main+0x894>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	2316      	movs	r3, #22
 8001294:	fb02 f303 	mul.w	r3, r2, r3
 8001298:	4a75      	ldr	r2, [pc, #468]	@ (8001470 <main+0x898>)
 800129a:	4413      	add	r3, r2
 800129c:	461a      	mov	r2, r3
 800129e:	4875      	ldr	r0, [pc, #468]	@ (8001474 <main+0x89c>)
 80012a0:	f002 fbbc 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 80012a4:	4b71      	ldr	r3, [pc, #452]	@ (800146c <main+0x894>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	2103      	movs	r1, #3
 80012ac:	4872      	ldr	r0, [pc, #456]	@ (8001478 <main+0x8a0>)
 80012ae:	f7ff fa33 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 80012b2:	4b6e      	ldr	r3, [pc, #440]	@ (800146c <main+0x894>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	2316      	movs	r3, #22
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	4a6c      	ldr	r2, [pc, #432]	@ (8001470 <main+0x898>)
 80012c0:	4413      	add	r3, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	486c      	ldr	r0, [pc, #432]	@ (8001478 <main+0x8a0>)
 80012c6:	f7ff fa7a 	bl	80007be <CLCD_I2C_WriteString>
							break;
 80012ca:	e0ab      	b.n	8001424 <main+0x84c>
							delete_data(&data[state]);
 80012cc:	4b67      	ldr	r3, [pc, #412]	@ (800146c <main+0x894>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	2316      	movs	r3, #22
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	4a65      	ldr	r2, [pc, #404]	@ (8001470 <main+0x898>)
 80012da:	4413      	add	r3, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fc19 	bl	8000b14 <delete_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 80012e2:	4b62      	ldr	r3, [pc, #392]	@ (800146c <main+0x894>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	4a61      	ldr	r2, [pc, #388]	@ (8001470 <main+0x898>)
 80012ea:	2316      	movs	r3, #22
 80012ec:	fb01 f303 	mul.w	r3, r1, r3
 80012f0:	4413      	add	r3, r2
 80012f2:	3314      	adds	r3, #20
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	4619      	mov	r1, r3
 80012f8:	4b5c      	ldr	r3, [pc, #368]	@ (800146c <main+0x894>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	2316      	movs	r3, #22
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	4a5a      	ldr	r2, [pc, #360]	@ (8001470 <main+0x898>)
 8001306:	4413      	add	r3, r2
 8001308:	461a      	mov	r2, r3
 800130a:	485a      	ldr	r0, [pc, #360]	@ (8001474 <main+0x89c>)
 800130c:	f002 fb86 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3+data[state].len, state);
 8001310:	4b56      	ldr	r3, [pc, #344]	@ (800146c <main+0x894>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	4a56      	ldr	r2, [pc, #344]	@ (8001470 <main+0x898>)
 8001318:	2316      	movs	r3, #22
 800131a:	fb01 f303 	mul.w	r3, r1, r3
 800131e:	4413      	add	r3, r2
 8001320:	3314      	adds	r3, #20
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	3303      	adds	r3, #3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4a50      	ldr	r2, [pc, #320]	@ (800146c <main+0x894>)
 800132c:	7812      	ldrb	r2, [r2, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	4851      	ldr	r0, [pc, #324]	@ (8001478 <main+0x8a0>)
 8001332:	f7ff f9f1 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, " ");
 8001336:	4951      	ldr	r1, [pc, #324]	@ (800147c <main+0x8a4>)
 8001338:	484f      	ldr	r0, [pc, #316]	@ (8001478 <main+0x8a0>)
 800133a:	f7ff fa40 	bl	80007be <CLCD_I2C_WriteString>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800133e:	4b4b      	ldr	r3, [pc, #300]	@ (800146c <main+0x894>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	2103      	movs	r1, #3
 8001346:	484c      	ldr	r0, [pc, #304]	@ (8001478 <main+0x8a0>)
 8001348:	f7ff f9e6 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800134c:	4b47      	ldr	r3, [pc, #284]	@ (800146c <main+0x894>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	2316      	movs	r3, #22
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	4a45      	ldr	r2, [pc, #276]	@ (8001470 <main+0x898>)
 800135a:	4413      	add	r3, r2
 800135c:	4619      	mov	r1, r3
 800135e:	4846      	ldr	r0, [pc, #280]	@ (8001478 <main+0x8a0>)
 8001360:	f7ff fa2d 	bl	80007be <CLCD_I2C_WriteString>
							break;
 8001364:	e05e      	b.n	8001424 <main+0x84c>
							CLCD_I2C_WriteString(&LCD1, "*");
 8001366:	4946      	ldr	r1, [pc, #280]	@ (8001480 <main+0x8a8>)
 8001368:	4843      	ldr	r0, [pc, #268]	@ (8001478 <main+0x8a0>)
 800136a:	f7ff fa28 	bl	80007be <CLCD_I2C_WriteString>
							break;
 800136e:	e059      	b.n	8001424 <main+0x84c>
							add_data(&data[state], '0');
 8001370:	4b3e      	ldr	r3, [pc, #248]	@ (800146c <main+0x894>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	2316      	movs	r3, #22
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	4a3c      	ldr	r2, [pc, #240]	@ (8001470 <main+0x898>)
 800137e:	4413      	add	r3, r2
 8001380:	2130      	movs	r1, #48	@ 0x30
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fbe0 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 8001388:	4b38      	ldr	r3, [pc, #224]	@ (800146c <main+0x894>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	4a38      	ldr	r2, [pc, #224]	@ (8001470 <main+0x898>)
 8001390:	2316      	movs	r3, #22
 8001392:	fb01 f303 	mul.w	r3, r1, r3
 8001396:	4413      	add	r3, r2
 8001398:	3314      	adds	r3, #20
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	4b33      	ldr	r3, [pc, #204]	@ (800146c <main+0x894>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	2316      	movs	r3, #22
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	4a31      	ldr	r2, [pc, #196]	@ (8001470 <main+0x898>)
 80013ac:	4413      	add	r3, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	4830      	ldr	r0, [pc, #192]	@ (8001474 <main+0x89c>)
 80013b2:	f002 fb33 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 80013b6:	4b2d      	ldr	r3, [pc, #180]	@ (800146c <main+0x894>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	2103      	movs	r1, #3
 80013be:	482e      	ldr	r0, [pc, #184]	@ (8001478 <main+0x8a0>)
 80013c0:	f7ff f9aa 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 80013c4:	4b29      	ldr	r3, [pc, #164]	@ (800146c <main+0x894>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	2316      	movs	r3, #22
 80013cc:	fb02 f303 	mul.w	r3, r2, r3
 80013d0:	4a27      	ldr	r2, [pc, #156]	@ (8001470 <main+0x898>)
 80013d2:	4413      	add	r3, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	4828      	ldr	r0, [pc, #160]	@ (8001478 <main+0x8a0>)
 80013d8:	f7ff f9f1 	bl	80007be <CLCD_I2C_WriteString>
							break;
 80013dc:	e022      	b.n	8001424 <main+0x84c>
							CLCD_I2C_WriteString(&LCD1, "#");
 80013de:	4929      	ldr	r1, [pc, #164]	@ (8001484 <main+0x8ac>)
 80013e0:	4825      	ldr	r0, [pc, #148]	@ (8001478 <main+0x8a0>)
 80013e2:	f7ff f9ec 	bl	80007be <CLCD_I2C_WriteString>
							break;
 80013e6:	e01d      	b.n	8001424 <main+0x84c>
							 menu_state = ENTER_PASSWORD;
 80013e8:	4b27      	ldr	r3, [pc, #156]	@ (8001488 <main+0x8b0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	801a      	strh	r2, [r3, #0]
							 CLCD_I2C_Clear(&LCD1);
 80013ee:	4822      	ldr	r0, [pc, #136]	@ (8001478 <main+0x8a0>)
 80013f0:	f7ff f9fc 	bl	80007ec <CLCD_I2C_Clear>
							 CLCD_I2C_SetCursor(&LCD1, 2, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2102      	movs	r1, #2
 80013f8:	481f      	ldr	r0, [pc, #124]	@ (8001478 <main+0x8a0>)
 80013fa:	f7ff f98d 	bl	8000718 <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "change password");
 80013fe:	4923      	ldr	r1, [pc, #140]	@ (800148c <main+0x8b4>)
 8001400:	481d      	ldr	r0, [pc, #116]	@ (8001478 <main+0x8a0>)
 8001402:	f7ff f9dc 	bl	80007be <CLCD_I2C_WriteString>
							 CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8001406:	2201      	movs	r2, #1
 8001408:	2100      	movs	r1, #0
 800140a:	481b      	ldr	r0, [pc, #108]	@ (8001478 <main+0x8a0>)
 800140c:	f7ff f984 	bl	8000718 <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "Enter:");
 8001410:	491f      	ldr	r1, [pc, #124]	@ (8001490 <main+0x8b8>)
 8001412:	4819      	ldr	r0, [pc, #100]	@ (8001478 <main+0x8a0>)
 8001414:	f7ff f9d3 	bl	80007be <CLCD_I2C_WriteString>
							 CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8001418:	491e      	ldr	r1, [pc, #120]	@ (8001494 <main+0x8bc>)
 800141a:	4817      	ldr	r0, [pc, #92]	@ (8001478 <main+0x8a0>)
 800141c:	f7ff f9cf 	bl	80007be <CLCD_I2C_WriteString>
							 break;
 8001420:	e000      	b.n	8001424 <main+0x84c>
							 break;
 8001422:	bf00      	nop
							 }// end switch
					break;
 8001424:	e262      	b.n	80018ec <main+0xd14>
				case SAVE_PARAMETER:
					switch (btn_value) {
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800142c:	d034      	beq.n	8001498 <main+0x8c0>
 800142e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001432:	f300 808b 	bgt.w	800154c <main+0x974>
 8001436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800143a:	d012      	beq.n	8001462 <main+0x88a>
 800143c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001440:	f300 8084 	bgt.w	800154c <main+0x974>
 8001444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001448:	d006      	beq.n	8001458 <main+0x880>
 800144a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800144e:	dc7d      	bgt.n	800154c <main+0x974>
 8001450:	2b08      	cmp	r3, #8
 8001452:	d07d      	beq.n	8001550 <main+0x978>
 8001454:	2b80      	cmp	r3, #128	@ 0x80
							case BUTTON_A:
								break;
							case BUTTON_B:
								break;
 8001456:	e07c      	b.n	8001552 <main+0x97a>
							case BUTTON_Star:
								 CLCD_I2C_WriteString(&LCD1, "*");
 8001458:	4909      	ldr	r1, [pc, #36]	@ (8001480 <main+0x8a8>)
 800145a:	4807      	ldr	r0, [pc, #28]	@ (8001478 <main+0x8a0>)
 800145c:	f7ff f9af 	bl	80007be <CLCD_I2C_WriteString>
								break;
 8001460:	e077      	b.n	8001552 <main+0x97a>

							case BUTTON_Hash:
								 CLCD_I2C_WriteString(&LCD1, "#");
 8001462:	4908      	ldr	r1, [pc, #32]	@ (8001484 <main+0x8ac>)
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <main+0x8a0>)
 8001466:	f7ff f9aa 	bl	80007be <CLCD_I2C_WriteString>
								break;
 800146a:	e072      	b.n	8001552 <main+0x97a>
 800146c:	20000144 	.word	0x20000144
 8001470:	20000148 	.word	0x20000148
 8001474:	0800473c 	.word	0x0800473c
 8001478:	20000138 	.word	0x20000138
 800147c:	08004710 	.word	0x08004710
 8001480:	08004750 	.word	0x08004750
 8001484:	08004754 	.word	0x08004754
 8001488:	20000000 	.word	0x20000000
 800148c:	08004758 	.word	0x08004758
 8001490:	08004768 	.word	0x08004768
 8001494:	200001a0 	.word	0x200001a0

							case BUTTON_D:
								 menu_state = SET_PARAMETER;
 8001498:	4bb6      	ldr	r3, [pc, #728]	@ (8001774 <main+0xb9c>)
 800149a:	2201      	movs	r2, #1
 800149c:	801a      	strh	r2, [r3, #0]
								 CLCD_I2C_Clear(&LCD1);
 800149e:	48b6      	ldr	r0, [pc, #728]	@ (8001778 <main+0xba0>)
 80014a0:	f7ff f9a4 	bl	80007ec <CLCD_I2C_Clear>
								 CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	48b3      	ldr	r0, [pc, #716]	@ (8001778 <main+0xba0>)
 80014aa:	f7ff f935 	bl	8000718 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "s1:");
 80014ae:	49b3      	ldr	r1, [pc, #716]	@ (800177c <main+0xba4>)
 80014b0:	48b1      	ldr	r0, [pc, #708]	@ (8001778 <main+0xba0>)
 80014b2:	f7ff f984 	bl	80007be <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 19, state);
 80014b6:	4bb2      	ldr	r3, [pc, #712]	@ (8001780 <main+0xba8>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	2113      	movs	r1, #19
 80014be:	48ae      	ldr	r0, [pc, #696]	@ (8001778 <main+0xba0>)
 80014c0:	f7ff f92a 	bl	8000718 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "<");
 80014c4:	49af      	ldr	r1, [pc, #700]	@ (8001784 <main+0xbac>)
 80014c6:	48ac      	ldr	r0, [pc, #688]	@ (8001778 <main+0xba0>)
 80014c8:	f7ff f979 	bl	80007be <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 3, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2103      	movs	r1, #3
 80014d0:	48a9      	ldr	r0, [pc, #676]	@ (8001778 <main+0xba0>)
 80014d2:	f7ff f921 	bl	8000718 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, (char*)data[0].payload);
 80014d6:	49ac      	ldr	r1, [pc, #688]	@ (8001788 <main+0xbb0>)
 80014d8:	48a7      	ldr	r0, [pc, #668]	@ (8001778 <main+0xba0>)
 80014da:	f7ff f970 	bl	80007be <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80014de:	2201      	movs	r2, #1
 80014e0:	2100      	movs	r1, #0
 80014e2:	48a5      	ldr	r0, [pc, #660]	@ (8001778 <main+0xba0>)
 80014e4:	f7ff f918 	bl	8000718 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "t1:");
 80014e8:	49a8      	ldr	r1, [pc, #672]	@ (800178c <main+0xbb4>)
 80014ea:	48a3      	ldr	r0, [pc, #652]	@ (8001778 <main+0xba0>)
 80014ec:	f7ff f967 	bl	80007be <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 3, 1);
 80014f0:	2201      	movs	r2, #1
 80014f2:	2103      	movs	r1, #3
 80014f4:	48a0      	ldr	r0, [pc, #640]	@ (8001778 <main+0xba0>)
 80014f6:	f7ff f90f 	bl	8000718 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, (char*)data[1].payload);
 80014fa:	49a5      	ldr	r1, [pc, #660]	@ (8001790 <main+0xbb8>)
 80014fc:	489e      	ldr	r0, [pc, #632]	@ (8001778 <main+0xba0>)
 80014fe:	f7ff f95e 	bl	80007be <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8001502:	2202      	movs	r2, #2
 8001504:	2100      	movs	r1, #0
 8001506:	489c      	ldr	r0, [pc, #624]	@ (8001778 <main+0xba0>)
 8001508:	f7ff f906 	bl	8000718 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "s1:");
 800150c:	499b      	ldr	r1, [pc, #620]	@ (800177c <main+0xba4>)
 800150e:	489a      	ldr	r0, [pc, #616]	@ (8001778 <main+0xba0>)
 8001510:	f7ff f955 	bl	80007be <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 3, 2);
 8001514:	2202      	movs	r2, #2
 8001516:	2103      	movs	r1, #3
 8001518:	4897      	ldr	r0, [pc, #604]	@ (8001778 <main+0xba0>)
 800151a:	f7ff f8fd 	bl	8000718 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, (char*)data[2].payload);
 800151e:	499d      	ldr	r1, [pc, #628]	@ (8001794 <main+0xbbc>)
 8001520:	4895      	ldr	r0, [pc, #596]	@ (8001778 <main+0xba0>)
 8001522:	f7ff f94c 	bl	80007be <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 0, 3);
 8001526:	2203      	movs	r2, #3
 8001528:	2100      	movs	r1, #0
 800152a:	4893      	ldr	r0, [pc, #588]	@ (8001778 <main+0xba0>)
 800152c:	f7ff f8f4 	bl	8000718 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "s1:");
 8001530:	4992      	ldr	r1, [pc, #584]	@ (800177c <main+0xba4>)
 8001532:	4891      	ldr	r0, [pc, #580]	@ (8001778 <main+0xba0>)
 8001534:	f7ff f943 	bl	80007be <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 3, 3);
 8001538:	2203      	movs	r2, #3
 800153a:	2103      	movs	r1, #3
 800153c:	488e      	ldr	r0, [pc, #568]	@ (8001778 <main+0xba0>)
 800153e:	f7ff f8eb 	bl	8000718 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, (char*)data[3].payload);
 8001542:	4995      	ldr	r1, [pc, #596]	@ (8001798 <main+0xbc0>)
 8001544:	488c      	ldr	r0, [pc, #560]	@ (8001778 <main+0xba0>)
 8001546:	f7ff f93a 	bl	80007be <CLCD_I2C_WriteString>
								 break;
 800154a:	e002      	b.n	8001552 <main+0x97a>

							 default:
								 break;
 800154c:	bf00      	nop
 800154e:	e1cd      	b.n	80018ec <main+0xd14>
								break;
 8001550:	bf00      	nop
						 }// end switch
					break;
 8001552:	e1cb      	b.n	80018ec <main+0xd14>
				case ENTER_PASSWORD:
					switch (btn_value) {
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800155a:	f000 81a3 	beq.w	80018a4 <main+0xccc>
 800155e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001562:	f300 81c1 	bgt.w	80018e8 <main+0xd10>
 8001566:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800156a:	f000 8196 	beq.w	800189a <main+0xcc2>
 800156e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001572:	f300 81b9 	bgt.w	80018e8 <main+0xd10>
 8001576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800157a:	f000 8179 	beq.w	8001870 <main+0xc98>
 800157e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001582:	f300 81b1 	bgt.w	80018e8 <main+0xd10>
 8001586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800158a:	f000 816c 	beq.w	8001866 <main+0xc8e>
 800158e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001592:	f300 81a9 	bgt.w	80018e8 <main+0xd10>
 8001596:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800159a:	f000 8142 	beq.w	8001822 <main+0xc4a>
 800159e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015a2:	f300 81a1 	bgt.w	80018e8 <main+0xd10>
 80015a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015aa:	f000 8125 	beq.w	80017f8 <main+0xc20>
 80015ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b2:	f300 8199 	bgt.w	80018e8 <main+0xd10>
 80015b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015ba:	f000 8108 	beq.w	80017ce <main+0xbf6>
 80015be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c2:	f300 8191 	bgt.w	80018e8 <main+0xd10>
 80015c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015ca:	f000 80eb 	beq.w	80017a4 <main+0xbcc>
 80015ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015d2:	f300 8189 	bgt.w	80018e8 <main+0xd10>
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	dc4a      	bgt.n	8001670 <main+0xa98>
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f340 8184 	ble.w	80018e8 <main+0xd10>
 80015e0:	3b01      	subs	r3, #1
 80015e2:	2b1f      	cmp	r3, #31
 80015e4:	f200 8180 	bhi.w	80018e8 <main+0xd10>
 80015e8:	a201      	add	r2, pc, #4	@ (adr r2, 80015f0 <main+0xa18>)
 80015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ee:	bf00      	nop
 80015f0:	08001677 	.word	0x08001677
 80015f4:	080016a1 	.word	0x080016a1
 80015f8:	080018e9 	.word	0x080018e9
 80015fc:	080016cb 	.word	0x080016cb
 8001600:	080018e9 	.word	0x080018e9
 8001604:	080018e9 	.word	0x080018e9
 8001608:	080018e9 	.word	0x080018e9
 800160c:	080018e9 	.word	0x080018e9
 8001610:	080018e9 	.word	0x080018e9
 8001614:	080018e9 	.word	0x080018e9
 8001618:	080018e9 	.word	0x080018e9
 800161c:	080018e9 	.word	0x080018e9
 8001620:	080018e9 	.word	0x080018e9
 8001624:	080018e9 	.word	0x080018e9
 8001628:	080018e9 	.word	0x080018e9
 800162c:	080016f5 	.word	0x080016f5
 8001630:	080018e9 	.word	0x080018e9
 8001634:	080018e9 	.word	0x080018e9
 8001638:	080018e9 	.word	0x080018e9
 800163c:	080018e9 	.word	0x080018e9
 8001640:	080018e9 	.word	0x080018e9
 8001644:	080018e9 	.word	0x080018e9
 8001648:	080018e9 	.word	0x080018e9
 800164c:	080018e9 	.word	0x080018e9
 8001650:	080018e9 	.word	0x080018e9
 8001654:	080018e9 	.word	0x080018e9
 8001658:	080018e9 	.word	0x080018e9
 800165c:	080018e9 	.word	0x080018e9
 8001660:	080018e9 	.word	0x080018e9
 8001664:	080018e9 	.word	0x080018e9
 8001668:	080018e9 	.word	0x080018e9
 800166c:	0800171f 	.word	0x0800171f
 8001670:	2b40      	cmp	r3, #64	@ 0x40
 8001672:	d069      	beq.n	8001748 <main+0xb70>
							 CLCD_I2C_SetCursor(&LCD1, 10, 1);
							 CLCD_I2C_WriteString(&LCD1, "NO(B)");
							 break;

						 default:
							 break;
 8001674:	e138      	b.n	80018e8 <main+0xd10>
							add_data(&password, '1');
 8001676:	2131      	movs	r1, #49	@ 0x31
 8001678:	4848      	ldr	r0, [pc, #288]	@ (800179c <main+0xbc4>)
 800167a:	f7ff fa65 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 800167e:	4b47      	ldr	r3, [pc, #284]	@ (800179c <main+0xbc4>)
 8001680:	8a9b      	ldrh	r3, [r3, #20]
 8001682:	4a46      	ldr	r2, [pc, #280]	@ (800179c <main+0xbc4>)
 8001684:	4619      	mov	r1, r3
 8001686:	4846      	ldr	r0, [pc, #280]	@ (80017a0 <main+0xbc8>)
 8001688:	f002 f9c8 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800168c:	2201      	movs	r2, #1
 800168e:	2106      	movs	r1, #6
 8001690:	4839      	ldr	r0, [pc, #228]	@ (8001778 <main+0xba0>)
 8001692:	f7ff f841 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8001696:	4941      	ldr	r1, [pc, #260]	@ (800179c <main+0xbc4>)
 8001698:	4837      	ldr	r0, [pc, #220]	@ (8001778 <main+0xba0>)
 800169a:	f7ff f890 	bl	80007be <CLCD_I2C_WriteString>
							break;
 800169e:	e124      	b.n	80018ea <main+0xd12>
							add_data(&password, '2');
 80016a0:	2132      	movs	r1, #50	@ 0x32
 80016a2:	483e      	ldr	r0, [pc, #248]	@ (800179c <main+0xbc4>)
 80016a4:	f7ff fa50 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 80016a8:	4b3c      	ldr	r3, [pc, #240]	@ (800179c <main+0xbc4>)
 80016aa:	8a9b      	ldrh	r3, [r3, #20]
 80016ac:	4a3b      	ldr	r2, [pc, #236]	@ (800179c <main+0xbc4>)
 80016ae:	4619      	mov	r1, r3
 80016b0:	483b      	ldr	r0, [pc, #236]	@ (80017a0 <main+0xbc8>)
 80016b2:	f002 f9b3 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2106      	movs	r1, #6
 80016ba:	482f      	ldr	r0, [pc, #188]	@ (8001778 <main+0xba0>)
 80016bc:	f7ff f82c 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80016c0:	4936      	ldr	r1, [pc, #216]	@ (800179c <main+0xbc4>)
 80016c2:	482d      	ldr	r0, [pc, #180]	@ (8001778 <main+0xba0>)
 80016c4:	f7ff f87b 	bl	80007be <CLCD_I2C_WriteString>
							break;
 80016c8:	e10f      	b.n	80018ea <main+0xd12>
							add_data(&password, '3');
 80016ca:	2133      	movs	r1, #51	@ 0x33
 80016cc:	4833      	ldr	r0, [pc, #204]	@ (800179c <main+0xbc4>)
 80016ce:	f7ff fa3b 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 80016d2:	4b32      	ldr	r3, [pc, #200]	@ (800179c <main+0xbc4>)
 80016d4:	8a9b      	ldrh	r3, [r3, #20]
 80016d6:	4a31      	ldr	r2, [pc, #196]	@ (800179c <main+0xbc4>)
 80016d8:	4619      	mov	r1, r3
 80016da:	4831      	ldr	r0, [pc, #196]	@ (80017a0 <main+0xbc8>)
 80016dc:	f002 f99e 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2106      	movs	r1, #6
 80016e4:	4824      	ldr	r0, [pc, #144]	@ (8001778 <main+0xba0>)
 80016e6:	f7ff f817 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80016ea:	492c      	ldr	r1, [pc, #176]	@ (800179c <main+0xbc4>)
 80016ec:	4822      	ldr	r0, [pc, #136]	@ (8001778 <main+0xba0>)
 80016ee:	f7ff f866 	bl	80007be <CLCD_I2C_WriteString>
							break;
 80016f2:	e0fa      	b.n	80018ea <main+0xd12>
							add_data(&password, '4');
 80016f4:	2134      	movs	r1, #52	@ 0x34
 80016f6:	4829      	ldr	r0, [pc, #164]	@ (800179c <main+0xbc4>)
 80016f8:	f7ff fa26 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 80016fc:	4b27      	ldr	r3, [pc, #156]	@ (800179c <main+0xbc4>)
 80016fe:	8a9b      	ldrh	r3, [r3, #20]
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <main+0xbc4>)
 8001702:	4619      	mov	r1, r3
 8001704:	4826      	ldr	r0, [pc, #152]	@ (80017a0 <main+0xbc8>)
 8001706:	f002 f989 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800170a:	2201      	movs	r2, #1
 800170c:	2106      	movs	r1, #6
 800170e:	481a      	ldr	r0, [pc, #104]	@ (8001778 <main+0xba0>)
 8001710:	f7ff f802 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8001714:	4921      	ldr	r1, [pc, #132]	@ (800179c <main+0xbc4>)
 8001716:	4818      	ldr	r0, [pc, #96]	@ (8001778 <main+0xba0>)
 8001718:	f7ff f851 	bl	80007be <CLCD_I2C_WriteString>
							break;
 800171c:	e0e5      	b.n	80018ea <main+0xd12>
							add_data(&password, '5');
 800171e:	2135      	movs	r1, #53	@ 0x35
 8001720:	481e      	ldr	r0, [pc, #120]	@ (800179c <main+0xbc4>)
 8001722:	f7ff fa11 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8001726:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <main+0xbc4>)
 8001728:	8a9b      	ldrh	r3, [r3, #20]
 800172a:	4a1c      	ldr	r2, [pc, #112]	@ (800179c <main+0xbc4>)
 800172c:	4619      	mov	r1, r3
 800172e:	481c      	ldr	r0, [pc, #112]	@ (80017a0 <main+0xbc8>)
 8001730:	f002 f974 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8001734:	2201      	movs	r2, #1
 8001736:	2106      	movs	r1, #6
 8001738:	480f      	ldr	r0, [pc, #60]	@ (8001778 <main+0xba0>)
 800173a:	f7fe ffed 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800173e:	4917      	ldr	r1, [pc, #92]	@ (800179c <main+0xbc4>)
 8001740:	480d      	ldr	r0, [pc, #52]	@ (8001778 <main+0xba0>)
 8001742:	f7ff f83c 	bl	80007be <CLCD_I2C_WriteString>
							break;
 8001746:	e0d0      	b.n	80018ea <main+0xd12>
							add_data(&password, '6');
 8001748:	2136      	movs	r1, #54	@ 0x36
 800174a:	4814      	ldr	r0, [pc, #80]	@ (800179c <main+0xbc4>)
 800174c:	f7ff f9fc 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <main+0xbc4>)
 8001752:	8a9b      	ldrh	r3, [r3, #20]
 8001754:	4a11      	ldr	r2, [pc, #68]	@ (800179c <main+0xbc4>)
 8001756:	4619      	mov	r1, r3
 8001758:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <main+0xbc8>)
 800175a:	f002 f95f 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800175e:	2201      	movs	r2, #1
 8001760:	2106      	movs	r1, #6
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <main+0xba0>)
 8001764:	f7fe ffd8 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8001768:	490c      	ldr	r1, [pc, #48]	@ (800179c <main+0xbc4>)
 800176a:	4803      	ldr	r0, [pc, #12]	@ (8001778 <main+0xba0>)
 800176c:	f7ff f827 	bl	80007be <CLCD_I2C_WriteString>
							break;
 8001770:	e0bb      	b.n	80018ea <main+0xd12>
 8001772:	bf00      	nop
 8001774:	20000000 	.word	0x20000000
 8001778:	20000138 	.word	0x20000138
 800177c:	08004718 	.word	0x08004718
 8001780:	20000144 	.word	0x20000144
 8001784:	08004714 	.word	0x08004714
 8001788:	20000148 	.word	0x20000148
 800178c:	0800471c 	.word	0x0800471c
 8001790:	2000015e 	.word	0x2000015e
 8001794:	20000174 	.word	0x20000174
 8001798:	2000018a 	.word	0x2000018a
 800179c:	200001a0 	.word	0x200001a0
 80017a0:	0800473c 	.word	0x0800473c
							add_data(&password, '7');
 80017a4:	2137      	movs	r1, #55	@ 0x37
 80017a6:	4852      	ldr	r0, [pc, #328]	@ (80018f0 <main+0xd18>)
 80017a8:	f7ff f9ce 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 80017ac:	4b50      	ldr	r3, [pc, #320]	@ (80018f0 <main+0xd18>)
 80017ae:	8a9b      	ldrh	r3, [r3, #20]
 80017b0:	4a4f      	ldr	r2, [pc, #316]	@ (80018f0 <main+0xd18>)
 80017b2:	4619      	mov	r1, r3
 80017b4:	484f      	ldr	r0, [pc, #316]	@ (80018f4 <main+0xd1c>)
 80017b6:	f002 f931 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 80017ba:	2201      	movs	r2, #1
 80017bc:	2106      	movs	r1, #6
 80017be:	484e      	ldr	r0, [pc, #312]	@ (80018f8 <main+0xd20>)
 80017c0:	f7fe ffaa 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80017c4:	494a      	ldr	r1, [pc, #296]	@ (80018f0 <main+0xd18>)
 80017c6:	484c      	ldr	r0, [pc, #304]	@ (80018f8 <main+0xd20>)
 80017c8:	f7fe fff9 	bl	80007be <CLCD_I2C_WriteString>
							break;
 80017cc:	e08d      	b.n	80018ea <main+0xd12>
							add_data(&password, '8');
 80017ce:	2138      	movs	r1, #56	@ 0x38
 80017d0:	4847      	ldr	r0, [pc, #284]	@ (80018f0 <main+0xd18>)
 80017d2:	f7ff f9b9 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 80017d6:	4b46      	ldr	r3, [pc, #280]	@ (80018f0 <main+0xd18>)
 80017d8:	8a9b      	ldrh	r3, [r3, #20]
 80017da:	4a45      	ldr	r2, [pc, #276]	@ (80018f0 <main+0xd18>)
 80017dc:	4619      	mov	r1, r3
 80017de:	4845      	ldr	r0, [pc, #276]	@ (80018f4 <main+0xd1c>)
 80017e0:	f002 f91c 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 80017e4:	2201      	movs	r2, #1
 80017e6:	2106      	movs	r1, #6
 80017e8:	4843      	ldr	r0, [pc, #268]	@ (80018f8 <main+0xd20>)
 80017ea:	f7fe ff95 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80017ee:	4940      	ldr	r1, [pc, #256]	@ (80018f0 <main+0xd18>)
 80017f0:	4841      	ldr	r0, [pc, #260]	@ (80018f8 <main+0xd20>)
 80017f2:	f7fe ffe4 	bl	80007be <CLCD_I2C_WriteString>
							break;
 80017f6:	e078      	b.n	80018ea <main+0xd12>
							add_data(&password, '9');
 80017f8:	2139      	movs	r1, #57	@ 0x39
 80017fa:	483d      	ldr	r0, [pc, #244]	@ (80018f0 <main+0xd18>)
 80017fc:	f7ff f9a4 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8001800:	4b3b      	ldr	r3, [pc, #236]	@ (80018f0 <main+0xd18>)
 8001802:	8a9b      	ldrh	r3, [r3, #20]
 8001804:	4a3a      	ldr	r2, [pc, #232]	@ (80018f0 <main+0xd18>)
 8001806:	4619      	mov	r1, r3
 8001808:	483a      	ldr	r0, [pc, #232]	@ (80018f4 <main+0xd1c>)
 800180a:	f002 f907 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800180e:	2201      	movs	r2, #1
 8001810:	2106      	movs	r1, #6
 8001812:	4839      	ldr	r0, [pc, #228]	@ (80018f8 <main+0xd20>)
 8001814:	f7fe ff80 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8001818:	4935      	ldr	r1, [pc, #212]	@ (80018f0 <main+0xd18>)
 800181a:	4837      	ldr	r0, [pc, #220]	@ (80018f8 <main+0xd20>)
 800181c:	f7fe ffcf 	bl	80007be <CLCD_I2C_WriteString>
							break;
 8001820:	e063      	b.n	80018ea <main+0xd12>
							delete_data(&password);
 8001822:	4833      	ldr	r0, [pc, #204]	@ (80018f0 <main+0xd18>)
 8001824:	f7ff f976 	bl	8000b14 <delete_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8001828:	4b31      	ldr	r3, [pc, #196]	@ (80018f0 <main+0xd18>)
 800182a:	8a9b      	ldrh	r3, [r3, #20]
 800182c:	4a30      	ldr	r2, [pc, #192]	@ (80018f0 <main+0xd18>)
 800182e:	4619      	mov	r1, r3
 8001830:	4830      	ldr	r0, [pc, #192]	@ (80018f4 <main+0xd1c>)
 8001832:	f002 f8f3 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6+password.len, 1);
 8001836:	4b2e      	ldr	r3, [pc, #184]	@ (80018f0 <main+0xd18>)
 8001838:	8a9b      	ldrh	r3, [r3, #20]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	3306      	adds	r3, #6
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2201      	movs	r2, #1
 8001842:	4619      	mov	r1, r3
 8001844:	482c      	ldr	r0, [pc, #176]	@ (80018f8 <main+0xd20>)
 8001846:	f7fe ff67 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, " ");
 800184a:	492c      	ldr	r1, [pc, #176]	@ (80018fc <main+0xd24>)
 800184c:	482a      	ldr	r0, [pc, #168]	@ (80018f8 <main+0xd20>)
 800184e:	f7fe ffb6 	bl	80007be <CLCD_I2C_WriteString>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8001852:	2201      	movs	r2, #1
 8001854:	2106      	movs	r1, #6
 8001856:	4828      	ldr	r0, [pc, #160]	@ (80018f8 <main+0xd20>)
 8001858:	f7fe ff5e 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800185c:	4924      	ldr	r1, [pc, #144]	@ (80018f0 <main+0xd18>)
 800185e:	4826      	ldr	r0, [pc, #152]	@ (80018f8 <main+0xd20>)
 8001860:	f7fe ffad 	bl	80007be <CLCD_I2C_WriteString>
							break;
 8001864:	e041      	b.n	80018ea <main+0xd12>
							 CLCD_I2C_WriteString(&LCD1, "*");
 8001866:	4926      	ldr	r1, [pc, #152]	@ (8001900 <main+0xd28>)
 8001868:	4823      	ldr	r0, [pc, #140]	@ (80018f8 <main+0xd20>)
 800186a:	f7fe ffa8 	bl	80007be <CLCD_I2C_WriteString>
							 break;
 800186e:	e03c      	b.n	80018ea <main+0xd12>
							add_data(&password, '0');
 8001870:	2130      	movs	r1, #48	@ 0x30
 8001872:	481f      	ldr	r0, [pc, #124]	@ (80018f0 <main+0xd18>)
 8001874:	f7ff f968 	bl	8000b48 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8001878:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <main+0xd18>)
 800187a:	8a9b      	ldrh	r3, [r3, #20]
 800187c:	4a1c      	ldr	r2, [pc, #112]	@ (80018f0 <main+0xd18>)
 800187e:	4619      	mov	r1, r3
 8001880:	481c      	ldr	r0, [pc, #112]	@ (80018f4 <main+0xd1c>)
 8001882:	f002 f8cb 	bl	8003a1c <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8001886:	2201      	movs	r2, #1
 8001888:	2106      	movs	r1, #6
 800188a:	481b      	ldr	r0, [pc, #108]	@ (80018f8 <main+0xd20>)
 800188c:	f7fe ff44 	bl	8000718 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8001890:	4917      	ldr	r1, [pc, #92]	@ (80018f0 <main+0xd18>)
 8001892:	4819      	ldr	r0, [pc, #100]	@ (80018f8 <main+0xd20>)
 8001894:	f7fe ff93 	bl	80007be <CLCD_I2C_WriteString>
							 break;
 8001898:	e027      	b.n	80018ea <main+0xd12>
							 CLCD_I2C_WriteString(&LCD1, "#");
 800189a:	491a      	ldr	r1, [pc, #104]	@ (8001904 <main+0xd2c>)
 800189c:	4816      	ldr	r0, [pc, #88]	@ (80018f8 <main+0xd20>)
 800189e:	f7fe ff8e 	bl	80007be <CLCD_I2C_WriteString>
							 break;
 80018a2:	e022      	b.n	80018ea <main+0xd12>
							 menu_state = SAVE_PARAMETER;
 80018a4:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <main+0xd30>)
 80018a6:	2202      	movs	r2, #2
 80018a8:	801a      	strh	r2, [r3, #0]
							 CLCD_I2C_Clear(&LCD1);
 80018aa:	4813      	ldr	r0, [pc, #76]	@ (80018f8 <main+0xd20>)
 80018ac:	f7fe ff9e 	bl	80007ec <CLCD_I2C_Clear>
							 CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	4810      	ldr	r0, [pc, #64]	@ (80018f8 <main+0xd20>)
 80018b6:	f7fe ff2f 	bl	8000718 <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "Save new parameter?");
 80018ba:	4914      	ldr	r1, [pc, #80]	@ (800190c <main+0xd34>)
 80018bc:	480e      	ldr	r0, [pc, #56]	@ (80018f8 <main+0xd20>)
 80018be:	f7fe ff7e 	bl	80007be <CLCD_I2C_WriteString>
							 CLCD_I2C_SetCursor(&LCD1, 2, 1);
 80018c2:	2201      	movs	r2, #1
 80018c4:	2102      	movs	r1, #2
 80018c6:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <main+0xd20>)
 80018c8:	f7fe ff26 	bl	8000718 <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "YES(A)");
 80018cc:	4910      	ldr	r1, [pc, #64]	@ (8001910 <main+0xd38>)
 80018ce:	480a      	ldr	r0, [pc, #40]	@ (80018f8 <main+0xd20>)
 80018d0:	f7fe ff75 	bl	80007be <CLCD_I2C_WriteString>
							 CLCD_I2C_SetCursor(&LCD1, 10, 1);
 80018d4:	2201      	movs	r2, #1
 80018d6:	210a      	movs	r1, #10
 80018d8:	4807      	ldr	r0, [pc, #28]	@ (80018f8 <main+0xd20>)
 80018da:	f7fe ff1d 	bl	8000718 <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "NO(B)");
 80018de:	490d      	ldr	r1, [pc, #52]	@ (8001914 <main+0xd3c>)
 80018e0:	4805      	ldr	r0, [pc, #20]	@ (80018f8 <main+0xd20>)
 80018e2:	f7fe ff6c 	bl	80007be <CLCD_I2C_WriteString>
							 break;
 80018e6:	e000      	b.n	80018ea <main+0xd12>
							 break;
 80018e8:	bf00      	nop
						 }// end switch
					break;
 80018ea:	bf00      	nop
  {
 80018ec:	f7ff b9b6 	b.w	8000c5c <main+0x84>
 80018f0:	200001a0 	.word	0x200001a0
 80018f4:	0800473c 	.word	0x0800473c
 80018f8:	20000138 	.word	0x20000138
 80018fc:	08004710 	.word	0x08004710
 8001900:	08004750 	.word	0x08004750
 8001904:	08004754 	.word	0x08004754
 8001908:	20000000 	.word	0x20000000
 800190c:	08004770 	.word	0x08004770
 8001910:	08004784 	.word	0x08004784
 8001914:	0800478c 	.word	0x0800478c

08001918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b094      	sub	sp, #80	@ 0x50
 800191c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191e:	f107 0320 	add.w	r3, r7, #32
 8001922:	2230      	movs	r2, #48	@ 0x30
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f002 f8cd 	bl	8003ac6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	4b29      	ldr	r3, [pc, #164]	@ (80019e8 <SystemClock_Config+0xd0>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	4a28      	ldr	r2, [pc, #160]	@ (80019e8 <SystemClock_Config+0xd0>)
 8001946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194a:	6413      	str	r3, [r2, #64]	@ 0x40
 800194c:	4b26      	ldr	r3, [pc, #152]	@ (80019e8 <SystemClock_Config+0xd0>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	4b23      	ldr	r3, [pc, #140]	@ (80019ec <SystemClock_Config+0xd4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001964:	4a21      	ldr	r2, [pc, #132]	@ (80019ec <SystemClock_Config+0xd4>)
 8001966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <SystemClock_Config+0xd4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001978:	2302      	movs	r3, #2
 800197a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800197c:	2301      	movs	r3, #1
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001980:	2310      	movs	r3, #16
 8001982:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001984:	2302      	movs	r3, #2
 8001986:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001988:	2300      	movs	r3, #0
 800198a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800198c:	2310      	movs	r3, #16
 800198e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001990:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001994:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001996:	2304      	movs	r3, #4
 8001998:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800199a:	2307      	movs	r3, #7
 800199c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199e:	f107 0320 	add.w	r3, r7, #32
 80019a2:	4618      	mov	r0, r3
 80019a4:	f001 faf4 	bl	8002f90 <HAL_RCC_OscConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019ae:	f000 f91d 	bl	8001bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b2:	230f      	movs	r3, #15
 80019b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b6:	2302      	movs	r3, #2
 80019b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2102      	movs	r1, #2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 fd56 	bl	8003480 <HAL_RCC_ClockConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80019da:	f000 f907 	bl	8001bec <Error_Handler>
  }
}
 80019de:	bf00      	nop
 80019e0:	3750      	adds	r7, #80	@ 0x50
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000

080019f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019f4:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <MX_I2C1_Init+0x50>)
 80019f6:	4a13      	ldr	r2, [pc, #76]	@ (8001a44 <MX_I2C1_Init+0x54>)
 80019f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019fa:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <MX_I2C1_Init+0x50>)
 80019fc:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <MX_I2C1_Init+0x58>)
 80019fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <MX_I2C1_Init+0x50>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <MX_I2C1_Init+0x50>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <MX_I2C1_Init+0x50>)
 8001a0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <MX_I2C1_Init+0x50>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <MX_I2C1_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a20:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <MX_I2C1_Init+0x50>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <MX_I2C1_Init+0x50>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a2c:	4804      	ldr	r0, [pc, #16]	@ (8001a40 <MX_I2C1_Init+0x50>)
 8001a2e:	f000 fe11 	bl	8002654 <HAL_I2C_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a38:	f000 f8d8 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000090 	.word	0x20000090
 8001a44:	40005400 	.word	0x40005400
 8001a48:	000186a0 	.word	0x000186a0

08001a4c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a50:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <MX_I2C3_Init+0x50>)
 8001a52:	4a13      	ldr	r2, [pc, #76]	@ (8001aa0 <MX_I2C3_Init+0x54>)
 8001a54:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a56:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <MX_I2C3_Init+0x50>)
 8001a58:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <MX_I2C3_Init+0x58>)
 8001a5a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <MX_I2C3_Init+0x50>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <MX_I2C3_Init+0x50>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <MX_I2C3_Init+0x50>)
 8001a6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a6e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a70:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <MX_I2C3_Init+0x50>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <MX_I2C3_Init+0x50>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a7c:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <MX_I2C3_Init+0x50>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <MX_I2C3_Init+0x50>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a88:	4804      	ldr	r0, [pc, #16]	@ (8001a9c <MX_I2C3_Init+0x50>)
 8001a8a:	f000 fde3 	bl	8002654 <HAL_I2C_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a94:	f000 f8aa 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200000e4 	.word	0x200000e4
 8001aa0:	40005c00 	.word	0x40005c00
 8001aa4:	000186a0 	.word	0x000186a0

08001aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	@ 0x28
 8001aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	4b46      	ldr	r3, [pc, #280]	@ (8001bdc <MX_GPIO_Init+0x134>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4a45      	ldr	r2, [pc, #276]	@ (8001bdc <MX_GPIO_Init+0x134>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ace:	4b43      	ldr	r3, [pc, #268]	@ (8001bdc <MX_GPIO_Init+0x134>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b3f      	ldr	r3, [pc, #252]	@ (8001bdc <MX_GPIO_Init+0x134>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8001bdc <MX_GPIO_Init+0x134>)
 8001ae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b3c      	ldr	r3, [pc, #240]	@ (8001bdc <MX_GPIO_Init+0x134>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	4b38      	ldr	r3, [pc, #224]	@ (8001bdc <MX_GPIO_Init+0x134>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a37      	ldr	r2, [pc, #220]	@ (8001bdc <MX_GPIO_Init+0x134>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b35      	ldr	r3, [pc, #212]	@ (8001bdc <MX_GPIO_Init+0x134>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	4b31      	ldr	r3, [pc, #196]	@ (8001bdc <MX_GPIO_Init+0x134>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a30      	ldr	r2, [pc, #192]	@ (8001bdc <MX_GPIO_Init+0x134>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b2e      	ldr	r3, [pc, #184]	@ (8001bdc <MX_GPIO_Init+0x134>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2120      	movs	r1, #32
 8001b32:	482b      	ldr	r0, [pc, #172]	@ (8001be0 <MX_GPIO_Init+0x138>)
 8001b34:	f000 fd74 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001b3e:	4829      	ldr	r0, [pc, #164]	@ (8001be4 <MX_GPIO_Init+0x13c>)
 8001b40:	f000 fd6e 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4823      	ldr	r0, [pc, #140]	@ (8001be8 <MX_GPIO_Init+0x140>)
 8001b5c:	f000 fbc4 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b60:	230c      	movs	r3, #12
 8001b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b70:	2307      	movs	r3, #7
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4819      	ldr	r0, [pc, #100]	@ (8001be0 <MX_GPIO_Init+0x138>)
 8001b7c:	f000 fbb4 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b80:	2320      	movs	r3, #32
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4812      	ldr	r0, [pc, #72]	@ (8001be0 <MX_GPIO_Init+0x138>)
 8001b98:	f000 fba6 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b9c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480b      	ldr	r0, [pc, #44]	@ (8001be4 <MX_GPIO_Init+0x13c>)
 8001bb6:	f000 fb97 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001bba:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4806      	ldr	r0, [pc, #24]	@ (8001be8 <MX_GPIO_Init+0x140>)
 8001bd0:	f000 fb8a 	bl	80022e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	@ 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40020800 	.word	0x40020800

08001bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf0:	b672      	cpsid	i
}
 8001bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <Error_Handler+0x8>

08001bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <HAL_MspInit+0x4c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	4a0f      	ldr	r2, [pc, #60]	@ (8001c44 <HAL_MspInit+0x4c>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <HAL_MspInit+0x4c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <HAL_MspInit+0x4c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	4a08      	ldr	r2, [pc, #32]	@ (8001c44 <HAL_MspInit+0x4c>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_MspInit+0x4c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c36:	2007      	movs	r0, #7
 8001c38:	f000 fb22 	bl	8002280 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800

08001c48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	@ 0x30
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a41      	ldr	r2, [pc, #260]	@ (8001d6c <HAL_I2C_MspInit+0x124>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d12c      	bne.n	8001cc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	4b40      	ldr	r3, [pc, #256]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a3f      	ldr	r2, [pc, #252]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c86:	23c0      	movs	r3, #192	@ 0xc0
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8a:	2312      	movs	r3, #18
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c92:	2303      	movs	r3, #3
 8001c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c96:	2304      	movs	r3, #4
 8001c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4834      	ldr	r0, [pc, #208]	@ (8001d74 <HAL_I2C_MspInit+0x12c>)
 8001ca2:	f000 fb21 	bl	80022e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	4b31      	ldr	r3, [pc, #196]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	4a30      	ldr	r2, [pc, #192]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001cb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001cc2:	e04f      	b.n	8001d64 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d78 <HAL_I2C_MspInit+0x130>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d14a      	bne.n	8001d64 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b27      	ldr	r3, [pc, #156]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	4a26      	ldr	r2, [pc, #152]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cde:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b20      	ldr	r3, [pc, #128]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0c:	2312      	movs	r3, #18
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4619      	mov	r1, r3
 8001d22:	4816      	ldr	r0, [pc, #88]	@ (8001d7c <HAL_I2C_MspInit+0x134>)
 8001d24:	f000 fae0 	bl	80022e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d28:	2310      	movs	r3, #16
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2c:	2312      	movs	r3, #18
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001d38:	2309      	movs	r3, #9
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f107 031c 	add.w	r3, r7, #28
 8001d40:	4619      	mov	r1, r3
 8001d42:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <HAL_I2C_MspInit+0x12c>)
 8001d44:	f000 fad0 	bl	80022e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001d52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_I2C_MspInit+0x128>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
}
 8001d64:	bf00      	nop
 8001d66:	3730      	adds	r7, #48	@ 0x30
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40005400 	.word	0x40005400
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40005c00 	.word	0x40005c00
 8001d7c:	40020000 	.word	0x40020000

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <NMI_Handler+0x4>

08001d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <HardFault_Handler+0x4>

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <MemManage_Handler+0x4>

08001d98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd6:	f000 f95d 	bl	8002094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001dea:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <ITM_SendChar+0x48>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a0e      	ldr	r2, [pc, #56]	@ (8001e28 <ITM_SendChar+0x48>)
 8001df0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001df4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001df6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <ITM_SendChar+0x4c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001e2c <ITM_SendChar+0x4c>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001e02:	bf00      	nop
 8001e04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f8      	beq.n	8001e04 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001e12:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	6013      	str	r3, [r2, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000edfc 	.word	0xe000edfc
 8001e2c:	e0000e00 	.word	0xe0000e00

08001e30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e00a      	b.n	8001e58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e42:	f3af 8000 	nop.w
 8001e46:	4601      	mov	r1, r0
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	b2ca      	uxtb	r2, r1
 8001e50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbf0      	blt.n	8001e42 <_read+0x12>
  }

  return len;
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e009      	b.n	8001e90 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	60ba      	str	r2, [r7, #8]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ffab 	bl	8001de0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dbf1      	blt.n	8001e7c <_write+0x12>
  }
  return len;
 8001e98:	687b      	ldr	r3, [r7, #4]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_close>:

int _close(int file)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eca:	605a      	str	r2, [r3, #4]
  return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_isatty>:

int _isatty(int file)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f14:	4a14      	ldr	r2, [pc, #80]	@ (8001f68 <_sbrk+0x5c>)
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <_sbrk+0x60>)
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f20:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <_sbrk+0x64>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <_sbrk+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2e:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d207      	bcs.n	8001f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f3c:	f001 fe12 	bl	8003b64 <__errno>
 8001f40:	4603      	mov	r3, r0
 8001f42:	220c      	movs	r2, #12
 8001f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e009      	b.n	8001f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f52:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a05      	ldr	r2, [pc, #20]	@ (8001f70 <_sbrk+0x64>)
 8001f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20018000 	.word	0x20018000
 8001f6c:	00000400 	.word	0x00000400
 8001f70:	200001b8 	.word	0x200001b8
 8001f74:	20000310 	.word	0x20000310

08001f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <SystemInit+0x20>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f82:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <SystemInit+0x20>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fa0:	f7ff ffea 	bl	8001f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa4:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fa6:	490d      	ldr	r1, [pc, #52]	@ (8001fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001fca:	f001 fdd1 	bl	8003b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fce:	f7fe fe03 	bl	8000bd8 <main>
  bx  lr    
 8001fd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001fe0:	080047f0 	.word	0x080047f0
  ldr r2, =_sbss
 8001fe4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001fe8:	2000030c 	.word	0x2000030c

08001fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC_IRQHandler>
	...

08001ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <HAL_Init+0x40>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8002030 <HAL_Init+0x40>)
 8001ffa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002000:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <HAL_Init+0x40>)
 8002006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800200a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800200c:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a07      	ldr	r2, [pc, #28]	@ (8002030 <HAL_Init+0x40>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002018:	2003      	movs	r0, #3
 800201a:	f000 f931 	bl	8002280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201e:	2000      	movs	r0, #0
 8002020:	f000 f808 	bl	8002034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002024:	f7ff fde8 	bl	8001bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023c00 	.word	0x40023c00

08002034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800203c:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <HAL_InitTick+0x54>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b12      	ldr	r3, [pc, #72]	@ (800208c <HAL_InitTick+0x58>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800204a:	fbb3 f3f1 	udiv	r3, r3, r1
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f93b 	bl	80022ce <HAL_SYSTICK_Config>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e00e      	b.n	8002080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b0f      	cmp	r3, #15
 8002066:	d80a      	bhi.n	800207e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002068:	2200      	movs	r2, #0
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f000 f911 	bl	8002296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002074:	4a06      	ldr	r2, [pc, #24]	@ (8002090 <HAL_InitTick+0x5c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e000      	b.n	8002080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000004 	.word	0x20000004
 800208c:	2000000c 	.word	0x2000000c
 8002090:	20000008 	.word	0x20000008

08002094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002098:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_IncTick+0x20>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_IncTick+0x24>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <HAL_IncTick+0x24>)
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	2000000c 	.word	0x2000000c
 80020b8:	200001bc 	.word	0x200001bc

080020bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return uwTick;
 80020c0:	4b03      	ldr	r3, [pc, #12]	@ (80020d0 <HAL_GetTick+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	200001bc 	.word	0x200001bc

080020d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff ffee 	bl	80020bc <HAL_GetTick>
 80020e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d005      	beq.n	80020fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <HAL_Delay+0x44>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020fa:	bf00      	nop
 80020fc:	f7ff ffde 	bl	80020bc <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	429a      	cmp	r2, r3
 800210a:	d8f7      	bhi.n	80020fc <HAL_Delay+0x28>
  {
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000000c 	.word	0x2000000c

0800211c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002168:	4b04      	ldr	r3, [pc, #16]	@ (800217c <__NVIC_GetPriorityGrouping+0x18>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 0307 	and.w	r3, r3, #7
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	db0a      	blt.n	80021aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	490c      	ldr	r1, [pc, #48]	@ (80021cc <__NVIC_SetPriority+0x4c>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	0112      	lsls	r2, r2, #4
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	440b      	add	r3, r1
 80021a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a8:	e00a      	b.n	80021c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4908      	ldr	r1, [pc, #32]	@ (80021d0 <__NVIC_SetPriority+0x50>)
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	3b04      	subs	r3, #4
 80021b8:	0112      	lsls	r2, r2, #4
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	440b      	add	r3, r1
 80021be:	761a      	strb	r2, [r3, #24]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000e100 	.word	0xe000e100
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	@ 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f1c3 0307 	rsb	r3, r3, #7
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	bf28      	it	cs
 80021f2:	2304      	movcs	r3, #4
 80021f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3304      	adds	r3, #4
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d902      	bls.n	8002204 <NVIC_EncodePriority+0x30>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3b03      	subs	r3, #3
 8002202:	e000      	b.n	8002206 <NVIC_EncodePriority+0x32>
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	f04f 32ff 	mov.w	r2, #4294967295
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	401a      	ands	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800221c:	f04f 31ff 	mov.w	r1, #4294967295
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43d9      	mvns	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	4313      	orrs	r3, r2
         );
}
 800222e:	4618      	mov	r0, r3
 8002230:	3724      	adds	r7, #36	@ 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800224c:	d301      	bcc.n	8002252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800224e:	2301      	movs	r3, #1
 8002250:	e00f      	b.n	8002272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002252:	4a0a      	ldr	r2, [pc, #40]	@ (800227c <SysTick_Config+0x40>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225a:	210f      	movs	r1, #15
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f7ff ff8e 	bl	8002180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002264:	4b05      	ldr	r3, [pc, #20]	@ (800227c <SysTick_Config+0x40>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226a:	4b04      	ldr	r3, [pc, #16]	@ (800227c <SysTick_Config+0x40>)
 800226c:	2207      	movs	r2, #7
 800226e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	e000e010 	.word	0xe000e010

08002280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ff47 	bl	800211c <__NVIC_SetPriorityGrouping>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a8:	f7ff ff5c 	bl	8002164 <__NVIC_GetPriorityGrouping>
 80022ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	6978      	ldr	r0, [r7, #20]
 80022b4:	f7ff ff8e 	bl	80021d4 <NVIC_EncodePriority>
 80022b8:	4602      	mov	r2, r0
 80022ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff5d 	bl	8002180 <__NVIC_SetPriority>
}
 80022c6:	bf00      	nop
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ffb0 	bl	800223c <SysTick_Config>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	@ 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e159      	b.n	80025b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002304:	2201      	movs	r2, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 8148 	bne.w	80025b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d005      	beq.n	800233a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002336:	2b02      	cmp	r3, #2
 8002338:	d130      	bne.n	800239c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 0201 	and.w	r2, r3, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d017      	beq.n	80023d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d123      	bne.n	800242c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	08da      	lsrs	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3208      	adds	r2, #8
 80023ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0203 	and.w	r2, r3, #3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80a2 	beq.w	80025b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b57      	ldr	r3, [pc, #348]	@ (80025d0 <HAL_GPIO_Init+0x2e8>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	4a56      	ldr	r2, [pc, #344]	@ (80025d0 <HAL_GPIO_Init+0x2e8>)
 8002478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800247c:	6453      	str	r3, [r2, #68]	@ 0x44
 800247e:	4b54      	ldr	r3, [pc, #336]	@ (80025d0 <HAL_GPIO_Init+0x2e8>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248a:	4a52      	ldr	r2, [pc, #328]	@ (80025d4 <HAL_GPIO_Init+0x2ec>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a49      	ldr	r2, [pc, #292]	@ (80025d8 <HAL_GPIO_Init+0x2f0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d019      	beq.n	80024ea <HAL_GPIO_Init+0x202>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a48      	ldr	r2, [pc, #288]	@ (80025dc <HAL_GPIO_Init+0x2f4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d013      	beq.n	80024e6 <HAL_GPIO_Init+0x1fe>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a47      	ldr	r2, [pc, #284]	@ (80025e0 <HAL_GPIO_Init+0x2f8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00d      	beq.n	80024e2 <HAL_GPIO_Init+0x1fa>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a46      	ldr	r2, [pc, #280]	@ (80025e4 <HAL_GPIO_Init+0x2fc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d007      	beq.n	80024de <HAL_GPIO_Init+0x1f6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a45      	ldr	r2, [pc, #276]	@ (80025e8 <HAL_GPIO_Init+0x300>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d101      	bne.n	80024da <HAL_GPIO_Init+0x1f2>
 80024d6:	2304      	movs	r3, #4
 80024d8:	e008      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024da:	2307      	movs	r3, #7
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024de:	2303      	movs	r3, #3
 80024e0:	e004      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024ea:	2300      	movs	r3, #0
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	f002 0203 	and.w	r2, r2, #3
 80024f2:	0092      	lsls	r2, r2, #2
 80024f4:	4093      	lsls	r3, r2
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024fc:	4935      	ldr	r1, [pc, #212]	@ (80025d4 <HAL_GPIO_Init+0x2ec>)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250a:	4b38      	ldr	r3, [pc, #224]	@ (80025ec <HAL_GPIO_Init+0x304>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252e:	4a2f      	ldr	r2, [pc, #188]	@ (80025ec <HAL_GPIO_Init+0x304>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002534:	4b2d      	ldr	r3, [pc, #180]	@ (80025ec <HAL_GPIO_Init+0x304>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002558:	4a24      	ldr	r2, [pc, #144]	@ (80025ec <HAL_GPIO_Init+0x304>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800255e:	4b23      	ldr	r3, [pc, #140]	@ (80025ec <HAL_GPIO_Init+0x304>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002582:	4a1a      	ldr	r2, [pc, #104]	@ (80025ec <HAL_GPIO_Init+0x304>)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002588:	4b18      	ldr	r3, [pc, #96]	@ (80025ec <HAL_GPIO_Init+0x304>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ac:	4a0f      	ldr	r2, [pc, #60]	@ (80025ec <HAL_GPIO_Init+0x304>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b0f      	cmp	r3, #15
 80025bc:	f67f aea2 	bls.w	8002304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3724      	adds	r7, #36	@ 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40020800 	.word	0x40020800
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40013c00 	.word	0x40013c00

080025f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	e001      	b.n	8002612 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800263c:	e003      	b.n	8002646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e12b      	b.n	80028be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff fae4 	bl	8001c48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2224      	movs	r2, #36	@ 0x24
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b8:	f001 f8da 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 80026bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a81      	ldr	r2, [pc, #516]	@ (80028c8 <HAL_I2C_Init+0x274>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d807      	bhi.n	80026d8 <HAL_I2C_Init+0x84>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a80      	ldr	r2, [pc, #512]	@ (80028cc <HAL_I2C_Init+0x278>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	bf94      	ite	ls
 80026d0:	2301      	movls	r3, #1
 80026d2:	2300      	movhi	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e006      	b.n	80026e6 <HAL_I2C_Init+0x92>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a7d      	ldr	r2, [pc, #500]	@ (80028d0 <HAL_I2C_Init+0x27c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	bf94      	ite	ls
 80026e0:	2301      	movls	r3, #1
 80026e2:	2300      	movhi	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0e7      	b.n	80028be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a78      	ldr	r2, [pc, #480]	@ (80028d4 <HAL_I2C_Init+0x280>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0c9b      	lsrs	r3, r3, #18
 80026f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a6a      	ldr	r2, [pc, #424]	@ (80028c8 <HAL_I2C_Init+0x274>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d802      	bhi.n	8002728 <HAL_I2C_Init+0xd4>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3301      	adds	r3, #1
 8002726:	e009      	b.n	800273c <HAL_I2C_Init+0xe8>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	4a69      	ldr	r2, [pc, #420]	@ (80028d8 <HAL_I2C_Init+0x284>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	3301      	adds	r3, #1
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	430b      	orrs	r3, r1
 8002742:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800274e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	495c      	ldr	r1, [pc, #368]	@ (80028c8 <HAL_I2C_Init+0x274>)
 8002758:	428b      	cmp	r3, r1
 800275a:	d819      	bhi.n	8002790 <HAL_I2C_Init+0x13c>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1e59      	subs	r1, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fbb1 f3f3 	udiv	r3, r1, r3
 800276a:	1c59      	adds	r1, r3, #1
 800276c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002770:	400b      	ands	r3, r1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_I2C_Init+0x138>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1e59      	subs	r1, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fbb1 f3f3 	udiv	r3, r1, r3
 8002784:	3301      	adds	r3, #1
 8002786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278a:	e051      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 800278c:	2304      	movs	r3, #4
 800278e:	e04f      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d111      	bne.n	80027bc <HAL_I2C_Init+0x168>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1e58      	subs	r0, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	440b      	add	r3, r1
 80027a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e012      	b.n	80027e2 <HAL_I2C_Init+0x18e>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e58      	subs	r0, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	0099      	lsls	r1, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Init+0x196>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e022      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10e      	bne.n	8002810 <HAL_I2C_Init+0x1bc>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1e58      	subs	r0, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	440b      	add	r3, r1
 8002800:	fbb0 f3f3 	udiv	r3, r0, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800280e:	e00f      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e58      	subs	r0, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	0099      	lsls	r1, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	fbb0 f3f3 	udiv	r3, r0, r3
 8002826:	3301      	adds	r3, #1
 8002828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	6809      	ldr	r1, [r1, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800285e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6911      	ldr	r1, [r2, #16]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68d2      	ldr	r2, [r2, #12]
 800286a:	4311      	orrs	r1, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	430b      	orrs	r3, r1
 8002872:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	000186a0 	.word	0x000186a0
 80028cc:	001e847f 	.word	0x001e847f
 80028d0:	003d08ff 	.word	0x003d08ff
 80028d4:	431bde83 	.word	0x431bde83
 80028d8:	10624dd3 	.word	0x10624dd3

080028dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	461a      	mov	r2, r3
 80028e8:	460b      	mov	r3, r1
 80028ea:	817b      	strh	r3, [r7, #10]
 80028ec:	4613      	mov	r3, r2
 80028ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff fbe4 	bl	80020bc <HAL_GetTick>
 80028f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b20      	cmp	r3, #32
 8002900:	f040 80e0 	bne.w	8002ac4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	2319      	movs	r3, #25
 800290a:	2201      	movs	r2, #1
 800290c:	4970      	ldr	r1, [pc, #448]	@ (8002ad0 <HAL_I2C_Master_Transmit+0x1f4>)
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f964 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
 800291c:	e0d3      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_I2C_Master_Transmit+0x50>
 8002928:	2302      	movs	r3, #2
 800292a:	e0cc      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x1ea>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d007      	beq.n	8002952 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002960:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2221      	movs	r2, #33	@ 0x21
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2210      	movs	r2, #16
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	893a      	ldrh	r2, [r7, #8]
 8002982:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4a50      	ldr	r2, [pc, #320]	@ (8002ad4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002992:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002994:	8979      	ldrh	r1, [r7, #10]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f89c 	bl	8002ad8 <I2C_MasterRequestWrite>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e08d      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029c0:	e066      	b.n	8002a90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	6a39      	ldr	r1, [r7, #32]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fa22 	bl	8002e10 <I2C_WaitOnTXEFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00d      	beq.n	80029ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d107      	bne.n	80029ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06b      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d11b      	bne.n	8002a64 <HAL_I2C_Master_Transmit+0x188>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d017      	beq.n	8002a64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	6a39      	ldr	r1, [r7, #32]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 fa19 	bl	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00d      	beq.n	8002a90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d107      	bne.n	8002a8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e01a      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d194      	bne.n	80029c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	00100002 	.word	0x00100002
 8002ad4:	ffff0000 	.word	0xffff0000

08002ad8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d006      	beq.n	8002b02 <I2C_MasterRequestWrite+0x2a>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d003      	beq.n	8002b02 <I2C_MasterRequestWrite+0x2a>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b00:	d108      	bne.n	8002b14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e00b      	b.n	8002b2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b18:	2b12      	cmp	r3, #18
 8002b1a:	d107      	bne.n	8002b2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f84f 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00d      	beq.n	8002b60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b52:	d103      	bne.n	8002b5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e035      	b.n	8002bcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b68:	d108      	bne.n	8002b7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b6a:	897b      	ldrh	r3, [r7, #10]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b78:	611a      	str	r2, [r3, #16]
 8002b7a:	e01b      	b.n	8002bb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b7c:	897b      	ldrh	r3, [r7, #10]
 8002b7e:	11db      	asrs	r3, r3, #7
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f003 0306 	and.w	r3, r3, #6
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f063 030f 	orn	r3, r3, #15
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	490e      	ldr	r1, [pc, #56]	@ (8002bd4 <I2C_MasterRequestWrite+0xfc>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f898 	bl	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e010      	b.n	8002bcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002baa:	897b      	ldrh	r3, [r7, #10]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4907      	ldr	r1, [pc, #28]	@ (8002bd8 <I2C_MasterRequestWrite+0x100>)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f888 	bl	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	00010008 	.word	0x00010008
 8002bd8:	00010002 	.word	0x00010002

08002bdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bec:	e048      	b.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d044      	beq.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf6:	f7ff fa61 	bl	80020bc <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d302      	bcc.n	8002c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d139      	bne.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	0c1b      	lsrs	r3, r3, #16
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d10d      	bne.n	8002c32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	4013      	ands	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	e00c      	b.n	8002c4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	43da      	mvns	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d116      	bne.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	f043 0220 	orr.w	r2, r3, #32
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e023      	b.n	8002cc8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	0c1b      	lsrs	r3, r3, #16
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d10d      	bne.n	8002ca6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	e00c      	b.n	8002cc0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	43da      	mvns	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d093      	beq.n	8002bee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cde:	e071      	b.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cee:	d123      	bne.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	f043 0204 	orr.w	r2, r3, #4
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e067      	b.n	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3e:	d041      	beq.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d40:	f7ff f9bc 	bl	80020bc <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d302      	bcc.n	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d136      	bne.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d10c      	bne.n	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf14      	ite	ne
 8002d72:	2301      	movne	r3, #1
 8002d74:	2300      	moveq	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	e00b      	b.n	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	43da      	mvns	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf14      	ite	ne
 8002d8c:	2301      	movne	r3, #1
 8002d8e:	2300      	moveq	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d016      	beq.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	f043 0220 	orr.w	r2, r3, #32
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e021      	b.n	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10c      	bne.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e00b      	b.n	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4013      	ands	r3, r2
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	bf14      	ite	ne
 8002dfa:	2301      	movne	r3, #1
 8002dfc:	2300      	moveq	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f47f af6d 	bne.w	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e1c:	e034      	b.n	8002e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f886 	bl	8002f30 <I2C_IsAcknowledgeFailed>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e034      	b.n	8002e98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d028      	beq.n	8002e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7ff f941 	bl	80020bc <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d11d      	bne.n	8002e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e56:	2b80      	cmp	r3, #128	@ 0x80
 8002e58:	d016      	beq.n	8002e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e007      	b.n	8002e98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e92:	2b80      	cmp	r3, #128	@ 0x80
 8002e94:	d1c3      	bne.n	8002e1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002eac:	e034      	b.n	8002f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f83e 	bl	8002f30 <I2C_IsAcknowledgeFailed>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e034      	b.n	8002f28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d028      	beq.n	8002f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7ff f8f9 	bl	80020bc <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d11d      	bne.n	8002f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d016      	beq.n	8002f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e007      	b.n	8002f28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d1c3      	bne.n	8002eae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f46:	d11b      	bne.n	8002f80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	f043 0204 	orr.w	r2, r3, #4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e267      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d075      	beq.n	800309a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002fae:	4b88      	ldr	r3, [pc, #544]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d00c      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fba:	4b85      	ldr	r3, [pc, #532]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d112      	bne.n	8002fec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc6:	4b82      	ldr	r3, [pc, #520]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd2:	d10b      	bne.n	8002fec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	4b7e      	ldr	r3, [pc, #504]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d05b      	beq.n	8003098 <HAL_RCC_OscConfig+0x108>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d157      	bne.n	8003098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e242      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff4:	d106      	bne.n	8003004 <HAL_RCC_OscConfig+0x74>
 8002ff6:	4b76      	ldr	r3, [pc, #472]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a75      	ldr	r2, [pc, #468]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e01d      	b.n	8003040 <HAL_RCC_OscConfig+0xb0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0x98>
 800300e:	4b70      	ldr	r3, [pc, #448]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a6f      	ldr	r2, [pc, #444]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b6d      	ldr	r3, [pc, #436]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a6c      	ldr	r2, [pc, #432]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0xb0>
 8003028:	4b69      	ldr	r3, [pc, #420]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a68      	ldr	r2, [pc, #416]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 800302e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b66      	ldr	r3, [pc, #408]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a65      	ldr	r2, [pc, #404]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 800303a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800303e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d013      	beq.n	8003070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7ff f838 	bl	80020bc <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003050:	f7ff f834 	bl	80020bc <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	@ 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e207      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b5b      	ldr	r3, [pc, #364]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0xc0>
 800306e:	e014      	b.n	800309a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7ff f824 	bl	80020bc <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7ff f820 	bl	80020bc <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	@ 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e1f3      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308a:	4b51      	ldr	r3, [pc, #324]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0xe8>
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d063      	beq.n	800316e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030a6:	4b4a      	ldr	r3, [pc, #296]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b2:	4b47      	ldr	r3, [pc, #284]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d11c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030be:	4b44      	ldr	r3, [pc, #272]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d116      	bne.n	80030f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ca:	4b41      	ldr	r3, [pc, #260]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <HAL_RCC_OscConfig+0x152>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d001      	beq.n	80030e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e1c7      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e2:	4b3b      	ldr	r3, [pc, #236]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4937      	ldr	r1, [pc, #220]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f6:	e03a      	b.n	800316e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003100:	4b34      	ldr	r3, [pc, #208]	@ (80031d4 <HAL_RCC_OscConfig+0x244>)
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7fe ffd9 	bl	80020bc <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310e:	f7fe ffd5 	bl	80020bc <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e1a8      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	4b2b      	ldr	r3, [pc, #172]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312c:	4b28      	ldr	r3, [pc, #160]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4925      	ldr	r1, [pc, #148]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 800313c:	4313      	orrs	r3, r2
 800313e:	600b      	str	r3, [r1, #0]
 8003140:	e015      	b.n	800316e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003142:	4b24      	ldr	r3, [pc, #144]	@ (80031d4 <HAL_RCC_OscConfig+0x244>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fe ffb8 	bl	80020bc <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003150:	f7fe ffb4 	bl	80020bc <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e187      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	4b1b      	ldr	r3, [pc, #108]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d036      	beq.n	80031e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d016      	beq.n	80031b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003182:	4b15      	ldr	r3, [pc, #84]	@ (80031d8 <HAL_RCC_OscConfig+0x248>)
 8003184:	2201      	movs	r2, #1
 8003186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe ff98 	bl	80020bc <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003190:	f7fe ff94 	bl	80020bc <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e167      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	4b0b      	ldr	r3, [pc, #44]	@ (80031d0 <HAL_RCC_OscConfig+0x240>)
 80031a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0x200>
 80031ae:	e01b      	b.n	80031e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b0:	4b09      	ldr	r3, [pc, #36]	@ (80031d8 <HAL_RCC_OscConfig+0x248>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b6:	f7fe ff81 	bl	80020bc <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	e00e      	b.n	80031dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031be:	f7fe ff7d 	bl	80020bc <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d907      	bls.n	80031dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e150      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
 80031d0:	40023800 	.word	0x40023800
 80031d4:	42470000 	.word	0x42470000
 80031d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031dc:	4b88      	ldr	r3, [pc, #544]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 80031de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1ea      	bne.n	80031be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8097 	beq.w	8003324 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f6:	2300      	movs	r3, #0
 80031f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fa:	4b81      	ldr	r3, [pc, #516]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	4b7d      	ldr	r3, [pc, #500]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	4a7c      	ldr	r2, [pc, #496]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	@ 0x40
 8003216:	4b7a      	ldr	r3, [pc, #488]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003226:	4b77      	ldr	r3, [pc, #476]	@ (8003404 <HAL_RCC_OscConfig+0x474>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d118      	bne.n	8003264 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003232:	4b74      	ldr	r3, [pc, #464]	@ (8003404 <HAL_RCC_OscConfig+0x474>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a73      	ldr	r2, [pc, #460]	@ (8003404 <HAL_RCC_OscConfig+0x474>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800323c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323e:	f7fe ff3d 	bl	80020bc <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003246:	f7fe ff39 	bl	80020bc <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e10c      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b6a      	ldr	r3, [pc, #424]	@ (8003404 <HAL_RCC_OscConfig+0x474>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x2ea>
 800326c:	4b64      	ldr	r3, [pc, #400]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003270:	4a63      	ldr	r2, [pc, #396]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6713      	str	r3, [r2, #112]	@ 0x70
 8003278:	e01c      	b.n	80032b4 <HAL_RCC_OscConfig+0x324>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b05      	cmp	r3, #5
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x30c>
 8003282:	4b5f      	ldr	r3, [pc, #380]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003286:	4a5e      	ldr	r2, [pc, #376]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	6713      	str	r3, [r2, #112]	@ 0x70
 800328e:	4b5c      	ldr	r3, [pc, #368]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003292:	4a5b      	ldr	r2, [pc, #364]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6713      	str	r3, [r2, #112]	@ 0x70
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0x324>
 800329c:	4b58      	ldr	r3, [pc, #352]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a0:	4a57      	ldr	r2, [pc, #348]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a8:	4b55      	ldr	r3, [pc, #340]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ac:	4a54      	ldr	r2, [pc, #336]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 80032ae:	f023 0304 	bic.w	r3, r3, #4
 80032b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d015      	beq.n	80032e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fe fefe 	bl	80020bc <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c2:	e00a      	b.n	80032da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c4:	f7fe fefa 	bl	80020bc <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e0cb      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032da:	4b49      	ldr	r3, [pc, #292]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0ee      	beq.n	80032c4 <HAL_RCC_OscConfig+0x334>
 80032e6:	e014      	b.n	8003312 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e8:	f7fe fee8 	bl	80020bc <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7fe fee4 	bl	80020bc <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e0b5      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003306:	4b3e      	ldr	r3, [pc, #248]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1ee      	bne.n	80032f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003312:	7dfb      	ldrb	r3, [r7, #23]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d105      	bne.n	8003324 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003318:	4b39      	ldr	r3, [pc, #228]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 800331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331c:	4a38      	ldr	r2, [pc, #224]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 800331e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003322:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80a1 	beq.w	8003470 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800332e:	4b34      	ldr	r3, [pc, #208]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b08      	cmp	r3, #8
 8003338:	d05c      	beq.n	80033f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d141      	bne.n	80033c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003342:	4b31      	ldr	r3, [pc, #196]	@ (8003408 <HAL_RCC_OscConfig+0x478>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe feb8 	bl	80020bc <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe feb4 	bl	80020bc <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e087      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	4b27      	ldr	r3, [pc, #156]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	019b      	lsls	r3, r3, #6
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	3b01      	subs	r3, #1
 8003388:	041b      	lsls	r3, r3, #16
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003390:	061b      	lsls	r3, r3, #24
 8003392:	491b      	ldr	r1, [pc, #108]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003398:	4b1b      	ldr	r3, [pc, #108]	@ (8003408 <HAL_RCC_OscConfig+0x478>)
 800339a:	2201      	movs	r2, #1
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7fe fe8d 	bl	80020bc <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a6:	f7fe fe89 	bl	80020bc <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e05c      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b8:	4b11      	ldr	r3, [pc, #68]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x416>
 80033c4:	e054      	b.n	8003470 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c6:	4b10      	ldr	r3, [pc, #64]	@ (8003408 <HAL_RCC_OscConfig+0x478>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fe fe76 	bl	80020bc <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fe fe72 	bl	80020bc <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e045      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <HAL_RCC_OscConfig+0x470>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x444>
 80033f2:	e03d      	b.n	8003470 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d107      	bne.n	800340c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e038      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
 8003400:	40023800 	.word	0x40023800
 8003404:	40007000 	.word	0x40007000
 8003408:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800340c:	4b1b      	ldr	r3, [pc, #108]	@ (800347c <HAL_RCC_OscConfig+0x4ec>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d028      	beq.n	800346c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d121      	bne.n	800346c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d11a      	bne.n	800346c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003442:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003444:	4293      	cmp	r3, r2
 8003446:	d111      	bne.n	800346c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003452:	085b      	lsrs	r3, r3, #1
 8003454:	3b01      	subs	r3, #1
 8003456:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003466:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800

08003480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0cc      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003494:	4b68      	ldr	r3, [pc, #416]	@ (8003638 <HAL_RCC_ClockConfig+0x1b8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d90c      	bls.n	80034bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b65      	ldr	r3, [pc, #404]	@ (8003638 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034aa:	4b63      	ldr	r3, [pc, #396]	@ (8003638 <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0b8      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d020      	beq.n	800350a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d4:	4b59      	ldr	r3, [pc, #356]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	4a58      	ldr	r2, [pc, #352]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034ec:	4b53      	ldr	r3, [pc, #332]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4a52      	ldr	r2, [pc, #328]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f8:	4b50      	ldr	r3, [pc, #320]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	494d      	ldr	r1, [pc, #308]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d044      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d107      	bne.n	800352e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351e:	4b47      	ldr	r3, [pc, #284]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d119      	bne.n	800355e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e07f      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d003      	beq.n	800353e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353a:	2b03      	cmp	r3, #3
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353e:	4b3f      	ldr	r3, [pc, #252]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e06f      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354e:	4b3b      	ldr	r3, [pc, #236]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e067      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800355e:	4b37      	ldr	r3, [pc, #220]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f023 0203 	bic.w	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	4934      	ldr	r1, [pc, #208]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	4313      	orrs	r3, r2
 800356e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003570:	f7fe fda4 	bl	80020bc <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003576:	e00a      	b.n	800358e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003578:	f7fe fda0 	bl	80020bc <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e04f      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358e:	4b2b      	ldr	r3, [pc, #172]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 020c 	and.w	r2, r3, #12
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	429a      	cmp	r2, r3
 800359e:	d1eb      	bne.n	8003578 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a0:	4b25      	ldr	r3, [pc, #148]	@ (8003638 <HAL_RCC_ClockConfig+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d20c      	bcs.n	80035c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b22      	ldr	r3, [pc, #136]	@ (8003638 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b20      	ldr	r3, [pc, #128]	@ (8003638 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e032      	b.n	800362e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d4:	4b19      	ldr	r3, [pc, #100]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4916      	ldr	r1, [pc, #88]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f2:	4b12      	ldr	r3, [pc, #72]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	490e      	ldr	r1, [pc, #56]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003606:	f000 f821 	bl	800364c <HAL_RCC_GetSysClockFreq>
 800360a:	4602      	mov	r2, r0
 800360c:	4b0b      	ldr	r3, [pc, #44]	@ (800363c <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	490a      	ldr	r1, [pc, #40]	@ (8003640 <HAL_RCC_ClockConfig+0x1c0>)
 8003618:	5ccb      	ldrb	r3, [r1, r3]
 800361a:	fa22 f303 	lsr.w	r3, r2, r3
 800361e:	4a09      	ldr	r2, [pc, #36]	@ (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003622:	4b09      	ldr	r3, [pc, #36]	@ (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fe fd04 	bl	8002034 <HAL_InitTick>

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023c00 	.word	0x40023c00
 800363c:	40023800 	.word	0x40023800
 8003640:	08004794 	.word	0x08004794
 8003644:	20000004 	.word	0x20000004
 8003648:	20000008 	.word	0x20000008

0800364c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800364c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003650:	b094      	sub	sp, #80	@ 0x50
 8003652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003664:	4b79      	ldr	r3, [pc, #484]	@ (800384c <HAL_RCC_GetSysClockFreq+0x200>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	2b08      	cmp	r3, #8
 800366e:	d00d      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0x40>
 8003670:	2b08      	cmp	r3, #8
 8003672:	f200 80e1 	bhi.w	8003838 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x34>
 800367a:	2b04      	cmp	r3, #4
 800367c:	d003      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0x3a>
 800367e:	e0db      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003680:	4b73      	ldr	r3, [pc, #460]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x204>)
 8003682:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003684:	e0db      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003686:	4b73      	ldr	r3, [pc, #460]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x208>)
 8003688:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800368a:	e0d8      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800368c:	4b6f      	ldr	r3, [pc, #444]	@ (800384c <HAL_RCC_GetSysClockFreq+0x200>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003694:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003696:	4b6d      	ldr	r3, [pc, #436]	@ (800384c <HAL_RCC_GetSysClockFreq+0x200>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d063      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a2:	4b6a      	ldr	r3, [pc, #424]	@ (800384c <HAL_RCC_GetSysClockFreq+0x200>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	099b      	lsrs	r3, r3, #6
 80036a8:	2200      	movs	r2, #0
 80036aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80036ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036b6:	2300      	movs	r3, #0
 80036b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80036ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80036be:	4622      	mov	r2, r4
 80036c0:	462b      	mov	r3, r5
 80036c2:	f04f 0000 	mov.w	r0, #0
 80036c6:	f04f 0100 	mov.w	r1, #0
 80036ca:	0159      	lsls	r1, r3, #5
 80036cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d0:	0150      	lsls	r0, r2, #5
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4621      	mov	r1, r4
 80036d8:	1a51      	subs	r1, r2, r1
 80036da:	6139      	str	r1, [r7, #16]
 80036dc:	4629      	mov	r1, r5
 80036de:	eb63 0301 	sbc.w	r3, r3, r1
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036f0:	4659      	mov	r1, fp
 80036f2:	018b      	lsls	r3, r1, #6
 80036f4:	4651      	mov	r1, sl
 80036f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036fa:	4651      	mov	r1, sl
 80036fc:	018a      	lsls	r2, r1, #6
 80036fe:	4651      	mov	r1, sl
 8003700:	ebb2 0801 	subs.w	r8, r2, r1
 8003704:	4659      	mov	r1, fp
 8003706:	eb63 0901 	sbc.w	r9, r3, r1
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800371a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800371e:	4690      	mov	r8, r2
 8003720:	4699      	mov	r9, r3
 8003722:	4623      	mov	r3, r4
 8003724:	eb18 0303 	adds.w	r3, r8, r3
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	462b      	mov	r3, r5
 800372c:	eb49 0303 	adc.w	r3, r9, r3
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800373e:	4629      	mov	r1, r5
 8003740:	024b      	lsls	r3, r1, #9
 8003742:	4621      	mov	r1, r4
 8003744:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003748:	4621      	mov	r1, r4
 800374a:	024a      	lsls	r2, r1, #9
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003752:	2200      	movs	r2, #0
 8003754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003756:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003758:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800375c:	f7fc fd90 	bl	8000280 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4613      	mov	r3, r2
 8003766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003768:	e058      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376a:	4b38      	ldr	r3, [pc, #224]	@ (800384c <HAL_RCC_GetSysClockFreq+0x200>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	099b      	lsrs	r3, r3, #6
 8003770:	2200      	movs	r2, #0
 8003772:	4618      	mov	r0, r3
 8003774:	4611      	mov	r1, r2
 8003776:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800377a:	623b      	str	r3, [r7, #32]
 800377c:	2300      	movs	r3, #0
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003780:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003784:	4642      	mov	r2, r8
 8003786:	464b      	mov	r3, r9
 8003788:	f04f 0000 	mov.w	r0, #0
 800378c:	f04f 0100 	mov.w	r1, #0
 8003790:	0159      	lsls	r1, r3, #5
 8003792:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003796:	0150      	lsls	r0, r2, #5
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4641      	mov	r1, r8
 800379e:	ebb2 0a01 	subs.w	sl, r2, r1
 80037a2:	4649      	mov	r1, r9
 80037a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037bc:	ebb2 040a 	subs.w	r4, r2, sl
 80037c0:	eb63 050b 	sbc.w	r5, r3, fp
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	00eb      	lsls	r3, r5, #3
 80037ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d2:	00e2      	lsls	r2, r4, #3
 80037d4:	4614      	mov	r4, r2
 80037d6:	461d      	mov	r5, r3
 80037d8:	4643      	mov	r3, r8
 80037da:	18e3      	adds	r3, r4, r3
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	464b      	mov	r3, r9
 80037e0:	eb45 0303 	adc.w	r3, r5, r3
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037f2:	4629      	mov	r1, r5
 80037f4:	028b      	lsls	r3, r1, #10
 80037f6:	4621      	mov	r1, r4
 80037f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037fc:	4621      	mov	r1, r4
 80037fe:	028a      	lsls	r2, r1, #10
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003806:	2200      	movs	r2, #0
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	61fa      	str	r2, [r7, #28]
 800380c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003810:	f7fc fd36 	bl	8000280 <__aeabi_uldivmod>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4613      	mov	r3, r2
 800381a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800381c:	4b0b      	ldr	r3, [pc, #44]	@ (800384c <HAL_RCC_GetSysClockFreq+0x200>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	3301      	adds	r3, #1
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800382c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800382e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003836:	e002      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003838:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x204>)
 800383a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800383c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003840:	4618      	mov	r0, r3
 8003842:	3750      	adds	r7, #80	@ 0x50
 8003844:	46bd      	mov	sp, r7
 8003846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800
 8003850:	00f42400 	.word	0x00f42400
 8003854:	007a1200 	.word	0x007a1200

08003858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800385c:	4b03      	ldr	r3, [pc, #12]	@ (800386c <HAL_RCC_GetHCLKFreq+0x14>)
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003874:	f7ff fff0 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	0a9b      	lsrs	r3, r3, #10
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	4903      	ldr	r1, [pc, #12]	@ (8003894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40023800 	.word	0x40023800
 8003894:	080047a4 	.word	0x080047a4

08003898 <std>:
 8003898:	2300      	movs	r3, #0
 800389a:	b510      	push	{r4, lr}
 800389c:	4604      	mov	r4, r0
 800389e:	e9c0 3300 	strd	r3, r3, [r0]
 80038a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038a6:	6083      	str	r3, [r0, #8]
 80038a8:	8181      	strh	r1, [r0, #12]
 80038aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80038ac:	81c2      	strh	r2, [r0, #14]
 80038ae:	6183      	str	r3, [r0, #24]
 80038b0:	4619      	mov	r1, r3
 80038b2:	2208      	movs	r2, #8
 80038b4:	305c      	adds	r0, #92	@ 0x5c
 80038b6:	f000 f906 	bl	8003ac6 <memset>
 80038ba:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <std+0x58>)
 80038bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80038be:	4b0d      	ldr	r3, [pc, #52]	@ (80038f4 <std+0x5c>)
 80038c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038c2:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <std+0x60>)
 80038c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038c6:	4b0d      	ldr	r3, [pc, #52]	@ (80038fc <std+0x64>)
 80038c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80038ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <std+0x68>)
 80038cc:	6224      	str	r4, [r4, #32]
 80038ce:	429c      	cmp	r4, r3
 80038d0:	d006      	beq.n	80038e0 <std+0x48>
 80038d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80038d6:	4294      	cmp	r4, r2
 80038d8:	d002      	beq.n	80038e0 <std+0x48>
 80038da:	33d0      	adds	r3, #208	@ 0xd0
 80038dc:	429c      	cmp	r4, r3
 80038de:	d105      	bne.n	80038ec <std+0x54>
 80038e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80038e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e8:	f000 b966 	b.w	8003bb8 <__retarget_lock_init_recursive>
 80038ec:	bd10      	pop	{r4, pc}
 80038ee:	bf00      	nop
 80038f0:	08003a41 	.word	0x08003a41
 80038f4:	08003a63 	.word	0x08003a63
 80038f8:	08003a9b 	.word	0x08003a9b
 80038fc:	08003abf 	.word	0x08003abf
 8003900:	200001c0 	.word	0x200001c0

08003904 <stdio_exit_handler>:
 8003904:	4a02      	ldr	r2, [pc, #8]	@ (8003910 <stdio_exit_handler+0xc>)
 8003906:	4903      	ldr	r1, [pc, #12]	@ (8003914 <stdio_exit_handler+0x10>)
 8003908:	4803      	ldr	r0, [pc, #12]	@ (8003918 <stdio_exit_handler+0x14>)
 800390a:	f000 b869 	b.w	80039e0 <_fwalk_sglue>
 800390e:	bf00      	nop
 8003910:	20000010 	.word	0x20000010
 8003914:	08004459 	.word	0x08004459
 8003918:	20000020 	.word	0x20000020

0800391c <cleanup_stdio>:
 800391c:	6841      	ldr	r1, [r0, #4]
 800391e:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <cleanup_stdio+0x34>)
 8003920:	4299      	cmp	r1, r3
 8003922:	b510      	push	{r4, lr}
 8003924:	4604      	mov	r4, r0
 8003926:	d001      	beq.n	800392c <cleanup_stdio+0x10>
 8003928:	f000 fd96 	bl	8004458 <_fflush_r>
 800392c:	68a1      	ldr	r1, [r4, #8]
 800392e:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <cleanup_stdio+0x38>)
 8003930:	4299      	cmp	r1, r3
 8003932:	d002      	beq.n	800393a <cleanup_stdio+0x1e>
 8003934:	4620      	mov	r0, r4
 8003936:	f000 fd8f 	bl	8004458 <_fflush_r>
 800393a:	68e1      	ldr	r1, [r4, #12]
 800393c:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <cleanup_stdio+0x3c>)
 800393e:	4299      	cmp	r1, r3
 8003940:	d004      	beq.n	800394c <cleanup_stdio+0x30>
 8003942:	4620      	mov	r0, r4
 8003944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003948:	f000 bd86 	b.w	8004458 <_fflush_r>
 800394c:	bd10      	pop	{r4, pc}
 800394e:	bf00      	nop
 8003950:	200001c0 	.word	0x200001c0
 8003954:	20000228 	.word	0x20000228
 8003958:	20000290 	.word	0x20000290

0800395c <global_stdio_init.part.0>:
 800395c:	b510      	push	{r4, lr}
 800395e:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <global_stdio_init.part.0+0x30>)
 8003960:	4c0b      	ldr	r4, [pc, #44]	@ (8003990 <global_stdio_init.part.0+0x34>)
 8003962:	4a0c      	ldr	r2, [pc, #48]	@ (8003994 <global_stdio_init.part.0+0x38>)
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	4620      	mov	r0, r4
 8003968:	2200      	movs	r2, #0
 800396a:	2104      	movs	r1, #4
 800396c:	f7ff ff94 	bl	8003898 <std>
 8003970:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003974:	2201      	movs	r2, #1
 8003976:	2109      	movs	r1, #9
 8003978:	f7ff ff8e 	bl	8003898 <std>
 800397c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003980:	2202      	movs	r2, #2
 8003982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003986:	2112      	movs	r1, #18
 8003988:	f7ff bf86 	b.w	8003898 <std>
 800398c:	200002f8 	.word	0x200002f8
 8003990:	200001c0 	.word	0x200001c0
 8003994:	08003905 	.word	0x08003905

08003998 <__sfp_lock_acquire>:
 8003998:	4801      	ldr	r0, [pc, #4]	@ (80039a0 <__sfp_lock_acquire+0x8>)
 800399a:	f000 b90e 	b.w	8003bba <__retarget_lock_acquire_recursive>
 800399e:	bf00      	nop
 80039a0:	20000301 	.word	0x20000301

080039a4 <__sfp_lock_release>:
 80039a4:	4801      	ldr	r0, [pc, #4]	@ (80039ac <__sfp_lock_release+0x8>)
 80039a6:	f000 b909 	b.w	8003bbc <__retarget_lock_release_recursive>
 80039aa:	bf00      	nop
 80039ac:	20000301 	.word	0x20000301

080039b0 <__sinit>:
 80039b0:	b510      	push	{r4, lr}
 80039b2:	4604      	mov	r4, r0
 80039b4:	f7ff fff0 	bl	8003998 <__sfp_lock_acquire>
 80039b8:	6a23      	ldr	r3, [r4, #32]
 80039ba:	b11b      	cbz	r3, 80039c4 <__sinit+0x14>
 80039bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c0:	f7ff bff0 	b.w	80039a4 <__sfp_lock_release>
 80039c4:	4b04      	ldr	r3, [pc, #16]	@ (80039d8 <__sinit+0x28>)
 80039c6:	6223      	str	r3, [r4, #32]
 80039c8:	4b04      	ldr	r3, [pc, #16]	@ (80039dc <__sinit+0x2c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f5      	bne.n	80039bc <__sinit+0xc>
 80039d0:	f7ff ffc4 	bl	800395c <global_stdio_init.part.0>
 80039d4:	e7f2      	b.n	80039bc <__sinit+0xc>
 80039d6:	bf00      	nop
 80039d8:	0800391d 	.word	0x0800391d
 80039dc:	200002f8 	.word	0x200002f8

080039e0 <_fwalk_sglue>:
 80039e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039e4:	4607      	mov	r7, r0
 80039e6:	4688      	mov	r8, r1
 80039e8:	4614      	mov	r4, r2
 80039ea:	2600      	movs	r6, #0
 80039ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039f0:	f1b9 0901 	subs.w	r9, r9, #1
 80039f4:	d505      	bpl.n	8003a02 <_fwalk_sglue+0x22>
 80039f6:	6824      	ldr	r4, [r4, #0]
 80039f8:	2c00      	cmp	r4, #0
 80039fa:	d1f7      	bne.n	80039ec <_fwalk_sglue+0xc>
 80039fc:	4630      	mov	r0, r6
 80039fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a02:	89ab      	ldrh	r3, [r5, #12]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d907      	bls.n	8003a18 <_fwalk_sglue+0x38>
 8003a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	d003      	beq.n	8003a18 <_fwalk_sglue+0x38>
 8003a10:	4629      	mov	r1, r5
 8003a12:	4638      	mov	r0, r7
 8003a14:	47c0      	blx	r8
 8003a16:	4306      	orrs	r6, r0
 8003a18:	3568      	adds	r5, #104	@ 0x68
 8003a1a:	e7e9      	b.n	80039f0 <_fwalk_sglue+0x10>

08003a1c <iprintf>:
 8003a1c:	b40f      	push	{r0, r1, r2, r3}
 8003a1e:	b507      	push	{r0, r1, r2, lr}
 8003a20:	4906      	ldr	r1, [pc, #24]	@ (8003a3c <iprintf+0x20>)
 8003a22:	ab04      	add	r3, sp, #16
 8003a24:	6808      	ldr	r0, [r1, #0]
 8003a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a2a:	6881      	ldr	r1, [r0, #8]
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	f000 f9e9 	bl	8003e04 <_vfiprintf_r>
 8003a32:	b003      	add	sp, #12
 8003a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a38:	b004      	add	sp, #16
 8003a3a:	4770      	bx	lr
 8003a3c:	2000001c 	.word	0x2000001c

08003a40 <__sread>:
 8003a40:	b510      	push	{r4, lr}
 8003a42:	460c      	mov	r4, r1
 8003a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a48:	f000 f868 	bl	8003b1c <_read_r>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	bfab      	itete	ge
 8003a50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a52:	89a3      	ldrhlt	r3, [r4, #12]
 8003a54:	181b      	addge	r3, r3, r0
 8003a56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a5a:	bfac      	ite	ge
 8003a5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a5e:	81a3      	strhlt	r3, [r4, #12]
 8003a60:	bd10      	pop	{r4, pc}

08003a62 <__swrite>:
 8003a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a66:	461f      	mov	r7, r3
 8003a68:	898b      	ldrh	r3, [r1, #12]
 8003a6a:	05db      	lsls	r3, r3, #23
 8003a6c:	4605      	mov	r5, r0
 8003a6e:	460c      	mov	r4, r1
 8003a70:	4616      	mov	r6, r2
 8003a72:	d505      	bpl.n	8003a80 <__swrite+0x1e>
 8003a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a78:	2302      	movs	r3, #2
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f000 f83c 	bl	8003af8 <_lseek_r>
 8003a80:	89a3      	ldrh	r3, [r4, #12]
 8003a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a8a:	81a3      	strh	r3, [r4, #12]
 8003a8c:	4632      	mov	r2, r6
 8003a8e:	463b      	mov	r3, r7
 8003a90:	4628      	mov	r0, r5
 8003a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a96:	f000 b853 	b.w	8003b40 <_write_r>

08003a9a <__sseek>:
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa2:	f000 f829 	bl	8003af8 <_lseek_r>
 8003aa6:	1c43      	adds	r3, r0, #1
 8003aa8:	89a3      	ldrh	r3, [r4, #12]
 8003aaa:	bf15      	itete	ne
 8003aac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003aae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ab2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ab6:	81a3      	strheq	r3, [r4, #12]
 8003ab8:	bf18      	it	ne
 8003aba:	81a3      	strhne	r3, [r4, #12]
 8003abc:	bd10      	pop	{r4, pc}

08003abe <__sclose>:
 8003abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac2:	f000 b809 	b.w	8003ad8 <_close_r>

08003ac6 <memset>:
 8003ac6:	4402      	add	r2, r0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d100      	bne.n	8003ad0 <memset+0xa>
 8003ace:	4770      	bx	lr
 8003ad0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad4:	e7f9      	b.n	8003aca <memset+0x4>
	...

08003ad8 <_close_r>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	4d06      	ldr	r5, [pc, #24]	@ (8003af4 <_close_r+0x1c>)
 8003adc:	2300      	movs	r3, #0
 8003ade:	4604      	mov	r4, r0
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	602b      	str	r3, [r5, #0]
 8003ae4:	f7fe f9dd 	bl	8001ea2 <_close>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d102      	bne.n	8003af2 <_close_r+0x1a>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	b103      	cbz	r3, 8003af2 <_close_r+0x1a>
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	200002fc 	.word	0x200002fc

08003af8 <_lseek_r>:
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	4d07      	ldr	r5, [pc, #28]	@ (8003b18 <_lseek_r+0x20>)
 8003afc:	4604      	mov	r4, r0
 8003afe:	4608      	mov	r0, r1
 8003b00:	4611      	mov	r1, r2
 8003b02:	2200      	movs	r2, #0
 8003b04:	602a      	str	r2, [r5, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f7fe f9f2 	bl	8001ef0 <_lseek>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d102      	bne.n	8003b16 <_lseek_r+0x1e>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	b103      	cbz	r3, 8003b16 <_lseek_r+0x1e>
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	bd38      	pop	{r3, r4, r5, pc}
 8003b18:	200002fc 	.word	0x200002fc

08003b1c <_read_r>:
 8003b1c:	b538      	push	{r3, r4, r5, lr}
 8003b1e:	4d07      	ldr	r5, [pc, #28]	@ (8003b3c <_read_r+0x20>)
 8003b20:	4604      	mov	r4, r0
 8003b22:	4608      	mov	r0, r1
 8003b24:	4611      	mov	r1, r2
 8003b26:	2200      	movs	r2, #0
 8003b28:	602a      	str	r2, [r5, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f7fe f980 	bl	8001e30 <_read>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d102      	bne.n	8003b3a <_read_r+0x1e>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	b103      	cbz	r3, 8003b3a <_read_r+0x1e>
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	bd38      	pop	{r3, r4, r5, pc}
 8003b3c:	200002fc 	.word	0x200002fc

08003b40 <_write_r>:
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	4d07      	ldr	r5, [pc, #28]	@ (8003b60 <_write_r+0x20>)
 8003b44:	4604      	mov	r4, r0
 8003b46:	4608      	mov	r0, r1
 8003b48:	4611      	mov	r1, r2
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	602a      	str	r2, [r5, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f7fe f98b 	bl	8001e6a <_write>
 8003b54:	1c43      	adds	r3, r0, #1
 8003b56:	d102      	bne.n	8003b5e <_write_r+0x1e>
 8003b58:	682b      	ldr	r3, [r5, #0]
 8003b5a:	b103      	cbz	r3, 8003b5e <_write_r+0x1e>
 8003b5c:	6023      	str	r3, [r4, #0]
 8003b5e:	bd38      	pop	{r3, r4, r5, pc}
 8003b60:	200002fc 	.word	0x200002fc

08003b64 <__errno>:
 8003b64:	4b01      	ldr	r3, [pc, #4]	@ (8003b6c <__errno+0x8>)
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	2000001c 	.word	0x2000001c

08003b70 <__libc_init_array>:
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	4d0d      	ldr	r5, [pc, #52]	@ (8003ba8 <__libc_init_array+0x38>)
 8003b74:	4c0d      	ldr	r4, [pc, #52]	@ (8003bac <__libc_init_array+0x3c>)
 8003b76:	1b64      	subs	r4, r4, r5
 8003b78:	10a4      	asrs	r4, r4, #2
 8003b7a:	2600      	movs	r6, #0
 8003b7c:	42a6      	cmp	r6, r4
 8003b7e:	d109      	bne.n	8003b94 <__libc_init_array+0x24>
 8003b80:	4d0b      	ldr	r5, [pc, #44]	@ (8003bb0 <__libc_init_array+0x40>)
 8003b82:	4c0c      	ldr	r4, [pc, #48]	@ (8003bb4 <__libc_init_array+0x44>)
 8003b84:	f000 fdb8 	bl	80046f8 <_init>
 8003b88:	1b64      	subs	r4, r4, r5
 8003b8a:	10a4      	asrs	r4, r4, #2
 8003b8c:	2600      	movs	r6, #0
 8003b8e:	42a6      	cmp	r6, r4
 8003b90:	d105      	bne.n	8003b9e <__libc_init_array+0x2e>
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b98:	4798      	blx	r3
 8003b9a:	3601      	adds	r6, #1
 8003b9c:	e7ee      	b.n	8003b7c <__libc_init_array+0xc>
 8003b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba2:	4798      	blx	r3
 8003ba4:	3601      	adds	r6, #1
 8003ba6:	e7f2      	b.n	8003b8e <__libc_init_array+0x1e>
 8003ba8:	080047e8 	.word	0x080047e8
 8003bac:	080047e8 	.word	0x080047e8
 8003bb0:	080047e8 	.word	0x080047e8
 8003bb4:	080047ec 	.word	0x080047ec

08003bb8 <__retarget_lock_init_recursive>:
 8003bb8:	4770      	bx	lr

08003bba <__retarget_lock_acquire_recursive>:
 8003bba:	4770      	bx	lr

08003bbc <__retarget_lock_release_recursive>:
 8003bbc:	4770      	bx	lr
	...

08003bc0 <_free_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4605      	mov	r5, r0
 8003bc4:	2900      	cmp	r1, #0
 8003bc6:	d041      	beq.n	8003c4c <_free_r+0x8c>
 8003bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bcc:	1f0c      	subs	r4, r1, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bfb8      	it	lt
 8003bd2:	18e4      	addlt	r4, r4, r3
 8003bd4:	f000 f8e0 	bl	8003d98 <__malloc_lock>
 8003bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c50 <_free_r+0x90>)
 8003bda:	6813      	ldr	r3, [r2, #0]
 8003bdc:	b933      	cbnz	r3, 8003bec <_free_r+0x2c>
 8003bde:	6063      	str	r3, [r4, #4]
 8003be0:	6014      	str	r4, [r2, #0]
 8003be2:	4628      	mov	r0, r5
 8003be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003be8:	f000 b8dc 	b.w	8003da4 <__malloc_unlock>
 8003bec:	42a3      	cmp	r3, r4
 8003bee:	d908      	bls.n	8003c02 <_free_r+0x42>
 8003bf0:	6820      	ldr	r0, [r4, #0]
 8003bf2:	1821      	adds	r1, r4, r0
 8003bf4:	428b      	cmp	r3, r1
 8003bf6:	bf01      	itttt	eq
 8003bf8:	6819      	ldreq	r1, [r3, #0]
 8003bfa:	685b      	ldreq	r3, [r3, #4]
 8003bfc:	1809      	addeq	r1, r1, r0
 8003bfe:	6021      	streq	r1, [r4, #0]
 8003c00:	e7ed      	b.n	8003bde <_free_r+0x1e>
 8003c02:	461a      	mov	r2, r3
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	b10b      	cbz	r3, 8003c0c <_free_r+0x4c>
 8003c08:	42a3      	cmp	r3, r4
 8003c0a:	d9fa      	bls.n	8003c02 <_free_r+0x42>
 8003c0c:	6811      	ldr	r1, [r2, #0]
 8003c0e:	1850      	adds	r0, r2, r1
 8003c10:	42a0      	cmp	r0, r4
 8003c12:	d10b      	bne.n	8003c2c <_free_r+0x6c>
 8003c14:	6820      	ldr	r0, [r4, #0]
 8003c16:	4401      	add	r1, r0
 8003c18:	1850      	adds	r0, r2, r1
 8003c1a:	4283      	cmp	r3, r0
 8003c1c:	6011      	str	r1, [r2, #0]
 8003c1e:	d1e0      	bne.n	8003be2 <_free_r+0x22>
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	6053      	str	r3, [r2, #4]
 8003c26:	4408      	add	r0, r1
 8003c28:	6010      	str	r0, [r2, #0]
 8003c2a:	e7da      	b.n	8003be2 <_free_r+0x22>
 8003c2c:	d902      	bls.n	8003c34 <_free_r+0x74>
 8003c2e:	230c      	movs	r3, #12
 8003c30:	602b      	str	r3, [r5, #0]
 8003c32:	e7d6      	b.n	8003be2 <_free_r+0x22>
 8003c34:	6820      	ldr	r0, [r4, #0]
 8003c36:	1821      	adds	r1, r4, r0
 8003c38:	428b      	cmp	r3, r1
 8003c3a:	bf04      	itt	eq
 8003c3c:	6819      	ldreq	r1, [r3, #0]
 8003c3e:	685b      	ldreq	r3, [r3, #4]
 8003c40:	6063      	str	r3, [r4, #4]
 8003c42:	bf04      	itt	eq
 8003c44:	1809      	addeq	r1, r1, r0
 8003c46:	6021      	streq	r1, [r4, #0]
 8003c48:	6054      	str	r4, [r2, #4]
 8003c4a:	e7ca      	b.n	8003be2 <_free_r+0x22>
 8003c4c:	bd38      	pop	{r3, r4, r5, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000308 	.word	0x20000308

08003c54 <sbrk_aligned>:
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	4e0f      	ldr	r6, [pc, #60]	@ (8003c94 <sbrk_aligned+0x40>)
 8003c58:	460c      	mov	r4, r1
 8003c5a:	6831      	ldr	r1, [r6, #0]
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	b911      	cbnz	r1, 8003c66 <sbrk_aligned+0x12>
 8003c60:	f000 fcb6 	bl	80045d0 <_sbrk_r>
 8003c64:	6030      	str	r0, [r6, #0]
 8003c66:	4621      	mov	r1, r4
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f000 fcb1 	bl	80045d0 <_sbrk_r>
 8003c6e:	1c43      	adds	r3, r0, #1
 8003c70:	d103      	bne.n	8003c7a <sbrk_aligned+0x26>
 8003c72:	f04f 34ff 	mov.w	r4, #4294967295
 8003c76:	4620      	mov	r0, r4
 8003c78:	bd70      	pop	{r4, r5, r6, pc}
 8003c7a:	1cc4      	adds	r4, r0, #3
 8003c7c:	f024 0403 	bic.w	r4, r4, #3
 8003c80:	42a0      	cmp	r0, r4
 8003c82:	d0f8      	beq.n	8003c76 <sbrk_aligned+0x22>
 8003c84:	1a21      	subs	r1, r4, r0
 8003c86:	4628      	mov	r0, r5
 8003c88:	f000 fca2 	bl	80045d0 <_sbrk_r>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d1f2      	bne.n	8003c76 <sbrk_aligned+0x22>
 8003c90:	e7ef      	b.n	8003c72 <sbrk_aligned+0x1e>
 8003c92:	bf00      	nop
 8003c94:	20000304 	.word	0x20000304

08003c98 <_malloc_r>:
 8003c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c9c:	1ccd      	adds	r5, r1, #3
 8003c9e:	f025 0503 	bic.w	r5, r5, #3
 8003ca2:	3508      	adds	r5, #8
 8003ca4:	2d0c      	cmp	r5, #12
 8003ca6:	bf38      	it	cc
 8003ca8:	250c      	movcc	r5, #12
 8003caa:	2d00      	cmp	r5, #0
 8003cac:	4606      	mov	r6, r0
 8003cae:	db01      	blt.n	8003cb4 <_malloc_r+0x1c>
 8003cb0:	42a9      	cmp	r1, r5
 8003cb2:	d904      	bls.n	8003cbe <_malloc_r+0x26>
 8003cb4:	230c      	movs	r3, #12
 8003cb6:	6033      	str	r3, [r6, #0]
 8003cb8:	2000      	movs	r0, #0
 8003cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d94 <_malloc_r+0xfc>
 8003cc2:	f000 f869 	bl	8003d98 <__malloc_lock>
 8003cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8003cca:	461c      	mov	r4, r3
 8003ccc:	bb44      	cbnz	r4, 8003d20 <_malloc_r+0x88>
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	f7ff ffbf 	bl	8003c54 <sbrk_aligned>
 8003cd6:	1c43      	adds	r3, r0, #1
 8003cd8:	4604      	mov	r4, r0
 8003cda:	d158      	bne.n	8003d8e <_malloc_r+0xf6>
 8003cdc:	f8d8 4000 	ldr.w	r4, [r8]
 8003ce0:	4627      	mov	r7, r4
 8003ce2:	2f00      	cmp	r7, #0
 8003ce4:	d143      	bne.n	8003d6e <_malloc_r+0xd6>
 8003ce6:	2c00      	cmp	r4, #0
 8003ce8:	d04b      	beq.n	8003d82 <_malloc_r+0xea>
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	4639      	mov	r1, r7
 8003cee:	4630      	mov	r0, r6
 8003cf0:	eb04 0903 	add.w	r9, r4, r3
 8003cf4:	f000 fc6c 	bl	80045d0 <_sbrk_r>
 8003cf8:	4581      	cmp	r9, r0
 8003cfa:	d142      	bne.n	8003d82 <_malloc_r+0xea>
 8003cfc:	6821      	ldr	r1, [r4, #0]
 8003cfe:	1a6d      	subs	r5, r5, r1
 8003d00:	4629      	mov	r1, r5
 8003d02:	4630      	mov	r0, r6
 8003d04:	f7ff ffa6 	bl	8003c54 <sbrk_aligned>
 8003d08:	3001      	adds	r0, #1
 8003d0a:	d03a      	beq.n	8003d82 <_malloc_r+0xea>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	442b      	add	r3, r5
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	f8d8 3000 	ldr.w	r3, [r8]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	bb62      	cbnz	r2, 8003d74 <_malloc_r+0xdc>
 8003d1a:	f8c8 7000 	str.w	r7, [r8]
 8003d1e:	e00f      	b.n	8003d40 <_malloc_r+0xa8>
 8003d20:	6822      	ldr	r2, [r4, #0]
 8003d22:	1b52      	subs	r2, r2, r5
 8003d24:	d420      	bmi.n	8003d68 <_malloc_r+0xd0>
 8003d26:	2a0b      	cmp	r2, #11
 8003d28:	d917      	bls.n	8003d5a <_malloc_r+0xc2>
 8003d2a:	1961      	adds	r1, r4, r5
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	6025      	str	r5, [r4, #0]
 8003d30:	bf18      	it	ne
 8003d32:	6059      	strne	r1, [r3, #4]
 8003d34:	6863      	ldr	r3, [r4, #4]
 8003d36:	bf08      	it	eq
 8003d38:	f8c8 1000 	streq.w	r1, [r8]
 8003d3c:	5162      	str	r2, [r4, r5]
 8003d3e:	604b      	str	r3, [r1, #4]
 8003d40:	4630      	mov	r0, r6
 8003d42:	f000 f82f 	bl	8003da4 <__malloc_unlock>
 8003d46:	f104 000b 	add.w	r0, r4, #11
 8003d4a:	1d23      	adds	r3, r4, #4
 8003d4c:	f020 0007 	bic.w	r0, r0, #7
 8003d50:	1ac2      	subs	r2, r0, r3
 8003d52:	bf1c      	itt	ne
 8003d54:	1a1b      	subne	r3, r3, r0
 8003d56:	50a3      	strne	r3, [r4, r2]
 8003d58:	e7af      	b.n	8003cba <_malloc_r+0x22>
 8003d5a:	6862      	ldr	r2, [r4, #4]
 8003d5c:	42a3      	cmp	r3, r4
 8003d5e:	bf0c      	ite	eq
 8003d60:	f8c8 2000 	streq.w	r2, [r8]
 8003d64:	605a      	strne	r2, [r3, #4]
 8003d66:	e7eb      	b.n	8003d40 <_malloc_r+0xa8>
 8003d68:	4623      	mov	r3, r4
 8003d6a:	6864      	ldr	r4, [r4, #4]
 8003d6c:	e7ae      	b.n	8003ccc <_malloc_r+0x34>
 8003d6e:	463c      	mov	r4, r7
 8003d70:	687f      	ldr	r7, [r7, #4]
 8003d72:	e7b6      	b.n	8003ce2 <_malloc_r+0x4a>
 8003d74:	461a      	mov	r2, r3
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	42a3      	cmp	r3, r4
 8003d7a:	d1fb      	bne.n	8003d74 <_malloc_r+0xdc>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	6053      	str	r3, [r2, #4]
 8003d80:	e7de      	b.n	8003d40 <_malloc_r+0xa8>
 8003d82:	230c      	movs	r3, #12
 8003d84:	6033      	str	r3, [r6, #0]
 8003d86:	4630      	mov	r0, r6
 8003d88:	f000 f80c 	bl	8003da4 <__malloc_unlock>
 8003d8c:	e794      	b.n	8003cb8 <_malloc_r+0x20>
 8003d8e:	6005      	str	r5, [r0, #0]
 8003d90:	e7d6      	b.n	8003d40 <_malloc_r+0xa8>
 8003d92:	bf00      	nop
 8003d94:	20000308 	.word	0x20000308

08003d98 <__malloc_lock>:
 8003d98:	4801      	ldr	r0, [pc, #4]	@ (8003da0 <__malloc_lock+0x8>)
 8003d9a:	f7ff bf0e 	b.w	8003bba <__retarget_lock_acquire_recursive>
 8003d9e:	bf00      	nop
 8003da0:	20000300 	.word	0x20000300

08003da4 <__malloc_unlock>:
 8003da4:	4801      	ldr	r0, [pc, #4]	@ (8003dac <__malloc_unlock+0x8>)
 8003da6:	f7ff bf09 	b.w	8003bbc <__retarget_lock_release_recursive>
 8003daa:	bf00      	nop
 8003dac:	20000300 	.word	0x20000300

08003db0 <__sfputc_r>:
 8003db0:	6893      	ldr	r3, [r2, #8]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	b410      	push	{r4}
 8003db8:	6093      	str	r3, [r2, #8]
 8003dba:	da08      	bge.n	8003dce <__sfputc_r+0x1e>
 8003dbc:	6994      	ldr	r4, [r2, #24]
 8003dbe:	42a3      	cmp	r3, r4
 8003dc0:	db01      	blt.n	8003dc6 <__sfputc_r+0x16>
 8003dc2:	290a      	cmp	r1, #10
 8003dc4:	d103      	bne.n	8003dce <__sfputc_r+0x1e>
 8003dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dca:	f000 bb6d 	b.w	80044a8 <__swbuf_r>
 8003dce:	6813      	ldr	r3, [r2, #0]
 8003dd0:	1c58      	adds	r0, r3, #1
 8003dd2:	6010      	str	r0, [r2, #0]
 8003dd4:	7019      	strb	r1, [r3, #0]
 8003dd6:	4608      	mov	r0, r1
 8003dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <__sfputs_r>:
 8003dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de0:	4606      	mov	r6, r0
 8003de2:	460f      	mov	r7, r1
 8003de4:	4614      	mov	r4, r2
 8003de6:	18d5      	adds	r5, r2, r3
 8003de8:	42ac      	cmp	r4, r5
 8003dea:	d101      	bne.n	8003df0 <__sfputs_r+0x12>
 8003dec:	2000      	movs	r0, #0
 8003dee:	e007      	b.n	8003e00 <__sfputs_r+0x22>
 8003df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df4:	463a      	mov	r2, r7
 8003df6:	4630      	mov	r0, r6
 8003df8:	f7ff ffda 	bl	8003db0 <__sfputc_r>
 8003dfc:	1c43      	adds	r3, r0, #1
 8003dfe:	d1f3      	bne.n	8003de8 <__sfputs_r+0xa>
 8003e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e04 <_vfiprintf_r>:
 8003e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e08:	460d      	mov	r5, r1
 8003e0a:	b09d      	sub	sp, #116	@ 0x74
 8003e0c:	4614      	mov	r4, r2
 8003e0e:	4698      	mov	r8, r3
 8003e10:	4606      	mov	r6, r0
 8003e12:	b118      	cbz	r0, 8003e1c <_vfiprintf_r+0x18>
 8003e14:	6a03      	ldr	r3, [r0, #32]
 8003e16:	b90b      	cbnz	r3, 8003e1c <_vfiprintf_r+0x18>
 8003e18:	f7ff fdca 	bl	80039b0 <__sinit>
 8003e1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e1e:	07d9      	lsls	r1, r3, #31
 8003e20:	d405      	bmi.n	8003e2e <_vfiprintf_r+0x2a>
 8003e22:	89ab      	ldrh	r3, [r5, #12]
 8003e24:	059a      	lsls	r2, r3, #22
 8003e26:	d402      	bmi.n	8003e2e <_vfiprintf_r+0x2a>
 8003e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e2a:	f7ff fec6 	bl	8003bba <__retarget_lock_acquire_recursive>
 8003e2e:	89ab      	ldrh	r3, [r5, #12]
 8003e30:	071b      	lsls	r3, r3, #28
 8003e32:	d501      	bpl.n	8003e38 <_vfiprintf_r+0x34>
 8003e34:	692b      	ldr	r3, [r5, #16]
 8003e36:	b99b      	cbnz	r3, 8003e60 <_vfiprintf_r+0x5c>
 8003e38:	4629      	mov	r1, r5
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	f000 fb72 	bl	8004524 <__swsetup_r>
 8003e40:	b170      	cbz	r0, 8003e60 <_vfiprintf_r+0x5c>
 8003e42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e44:	07dc      	lsls	r4, r3, #31
 8003e46:	d504      	bpl.n	8003e52 <_vfiprintf_r+0x4e>
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	b01d      	add	sp, #116	@ 0x74
 8003e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e52:	89ab      	ldrh	r3, [r5, #12]
 8003e54:	0598      	lsls	r0, r3, #22
 8003e56:	d4f7      	bmi.n	8003e48 <_vfiprintf_r+0x44>
 8003e58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e5a:	f7ff feaf 	bl	8003bbc <__retarget_lock_release_recursive>
 8003e5e:	e7f3      	b.n	8003e48 <_vfiprintf_r+0x44>
 8003e60:	2300      	movs	r3, #0
 8003e62:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e64:	2320      	movs	r3, #32
 8003e66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e6e:	2330      	movs	r3, #48	@ 0x30
 8003e70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004020 <_vfiprintf_r+0x21c>
 8003e74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e78:	f04f 0901 	mov.w	r9, #1
 8003e7c:	4623      	mov	r3, r4
 8003e7e:	469a      	mov	sl, r3
 8003e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e84:	b10a      	cbz	r2, 8003e8a <_vfiprintf_r+0x86>
 8003e86:	2a25      	cmp	r2, #37	@ 0x25
 8003e88:	d1f9      	bne.n	8003e7e <_vfiprintf_r+0x7a>
 8003e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8003e8e:	d00b      	beq.n	8003ea8 <_vfiprintf_r+0xa4>
 8003e90:	465b      	mov	r3, fp
 8003e92:	4622      	mov	r2, r4
 8003e94:	4629      	mov	r1, r5
 8003e96:	4630      	mov	r0, r6
 8003e98:	f7ff ffa1 	bl	8003dde <__sfputs_r>
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	f000 80a7 	beq.w	8003ff0 <_vfiprintf_r+0x1ec>
 8003ea2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ea4:	445a      	add	r2, fp
 8003ea6:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 809f 	beq.w	8003ff0 <_vfiprintf_r+0x1ec>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ebc:	f10a 0a01 	add.w	sl, sl, #1
 8003ec0:	9304      	str	r3, [sp, #16]
 8003ec2:	9307      	str	r3, [sp, #28]
 8003ec4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ec8:	931a      	str	r3, [sp, #104]	@ 0x68
 8003eca:	4654      	mov	r4, sl
 8003ecc:	2205      	movs	r2, #5
 8003ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed2:	4853      	ldr	r0, [pc, #332]	@ (8004020 <_vfiprintf_r+0x21c>)
 8003ed4:	f7fc f984 	bl	80001e0 <memchr>
 8003ed8:	9a04      	ldr	r2, [sp, #16]
 8003eda:	b9d8      	cbnz	r0, 8003f14 <_vfiprintf_r+0x110>
 8003edc:	06d1      	lsls	r1, r2, #27
 8003ede:	bf44      	itt	mi
 8003ee0:	2320      	movmi	r3, #32
 8003ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ee6:	0713      	lsls	r3, r2, #28
 8003ee8:	bf44      	itt	mi
 8003eea:	232b      	movmi	r3, #43	@ 0x2b
 8003eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ef6:	d015      	beq.n	8003f24 <_vfiprintf_r+0x120>
 8003ef8:	9a07      	ldr	r2, [sp, #28]
 8003efa:	4654      	mov	r4, sl
 8003efc:	2000      	movs	r0, #0
 8003efe:	f04f 0c0a 	mov.w	ip, #10
 8003f02:	4621      	mov	r1, r4
 8003f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f08:	3b30      	subs	r3, #48	@ 0x30
 8003f0a:	2b09      	cmp	r3, #9
 8003f0c:	d94b      	bls.n	8003fa6 <_vfiprintf_r+0x1a2>
 8003f0e:	b1b0      	cbz	r0, 8003f3e <_vfiprintf_r+0x13a>
 8003f10:	9207      	str	r2, [sp, #28]
 8003f12:	e014      	b.n	8003f3e <_vfiprintf_r+0x13a>
 8003f14:	eba0 0308 	sub.w	r3, r0, r8
 8003f18:	fa09 f303 	lsl.w	r3, r9, r3
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	9304      	str	r3, [sp, #16]
 8003f20:	46a2      	mov	sl, r4
 8003f22:	e7d2      	b.n	8003eca <_vfiprintf_r+0xc6>
 8003f24:	9b03      	ldr	r3, [sp, #12]
 8003f26:	1d19      	adds	r1, r3, #4
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	9103      	str	r1, [sp, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bfbb      	ittet	lt
 8003f30:	425b      	neglt	r3, r3
 8003f32:	f042 0202 	orrlt.w	r2, r2, #2
 8003f36:	9307      	strge	r3, [sp, #28]
 8003f38:	9307      	strlt	r3, [sp, #28]
 8003f3a:	bfb8      	it	lt
 8003f3c:	9204      	strlt	r2, [sp, #16]
 8003f3e:	7823      	ldrb	r3, [r4, #0]
 8003f40:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f42:	d10a      	bne.n	8003f5a <_vfiprintf_r+0x156>
 8003f44:	7863      	ldrb	r3, [r4, #1]
 8003f46:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f48:	d132      	bne.n	8003fb0 <_vfiprintf_r+0x1ac>
 8003f4a:	9b03      	ldr	r3, [sp, #12]
 8003f4c:	1d1a      	adds	r2, r3, #4
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	9203      	str	r2, [sp, #12]
 8003f52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f56:	3402      	adds	r4, #2
 8003f58:	9305      	str	r3, [sp, #20]
 8003f5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004030 <_vfiprintf_r+0x22c>
 8003f5e:	7821      	ldrb	r1, [r4, #0]
 8003f60:	2203      	movs	r2, #3
 8003f62:	4650      	mov	r0, sl
 8003f64:	f7fc f93c 	bl	80001e0 <memchr>
 8003f68:	b138      	cbz	r0, 8003f7a <_vfiprintf_r+0x176>
 8003f6a:	9b04      	ldr	r3, [sp, #16]
 8003f6c:	eba0 000a 	sub.w	r0, r0, sl
 8003f70:	2240      	movs	r2, #64	@ 0x40
 8003f72:	4082      	lsls	r2, r0
 8003f74:	4313      	orrs	r3, r2
 8003f76:	3401      	adds	r4, #1
 8003f78:	9304      	str	r3, [sp, #16]
 8003f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f7e:	4829      	ldr	r0, [pc, #164]	@ (8004024 <_vfiprintf_r+0x220>)
 8003f80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f84:	2206      	movs	r2, #6
 8003f86:	f7fc f92b 	bl	80001e0 <memchr>
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d03f      	beq.n	800400e <_vfiprintf_r+0x20a>
 8003f8e:	4b26      	ldr	r3, [pc, #152]	@ (8004028 <_vfiprintf_r+0x224>)
 8003f90:	bb1b      	cbnz	r3, 8003fda <_vfiprintf_r+0x1d6>
 8003f92:	9b03      	ldr	r3, [sp, #12]
 8003f94:	3307      	adds	r3, #7
 8003f96:	f023 0307 	bic.w	r3, r3, #7
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	9303      	str	r3, [sp, #12]
 8003f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fa0:	443b      	add	r3, r7
 8003fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fa4:	e76a      	b.n	8003e7c <_vfiprintf_r+0x78>
 8003fa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003faa:	460c      	mov	r4, r1
 8003fac:	2001      	movs	r0, #1
 8003fae:	e7a8      	b.n	8003f02 <_vfiprintf_r+0xfe>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	3401      	adds	r4, #1
 8003fb4:	9305      	str	r3, [sp, #20]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f04f 0c0a 	mov.w	ip, #10
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fc2:	3a30      	subs	r2, #48	@ 0x30
 8003fc4:	2a09      	cmp	r2, #9
 8003fc6:	d903      	bls.n	8003fd0 <_vfiprintf_r+0x1cc>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0c6      	beq.n	8003f5a <_vfiprintf_r+0x156>
 8003fcc:	9105      	str	r1, [sp, #20]
 8003fce:	e7c4      	b.n	8003f5a <_vfiprintf_r+0x156>
 8003fd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e7f0      	b.n	8003fbc <_vfiprintf_r+0x1b8>
 8003fda:	ab03      	add	r3, sp, #12
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	462a      	mov	r2, r5
 8003fe0:	4b12      	ldr	r3, [pc, #72]	@ (800402c <_vfiprintf_r+0x228>)
 8003fe2:	a904      	add	r1, sp, #16
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	f3af 8000 	nop.w
 8003fea:	4607      	mov	r7, r0
 8003fec:	1c78      	adds	r0, r7, #1
 8003fee:	d1d6      	bne.n	8003f9e <_vfiprintf_r+0x19a>
 8003ff0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ff2:	07d9      	lsls	r1, r3, #31
 8003ff4:	d405      	bmi.n	8004002 <_vfiprintf_r+0x1fe>
 8003ff6:	89ab      	ldrh	r3, [r5, #12]
 8003ff8:	059a      	lsls	r2, r3, #22
 8003ffa:	d402      	bmi.n	8004002 <_vfiprintf_r+0x1fe>
 8003ffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ffe:	f7ff fddd 	bl	8003bbc <__retarget_lock_release_recursive>
 8004002:	89ab      	ldrh	r3, [r5, #12]
 8004004:	065b      	lsls	r3, r3, #25
 8004006:	f53f af1f 	bmi.w	8003e48 <_vfiprintf_r+0x44>
 800400a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800400c:	e71e      	b.n	8003e4c <_vfiprintf_r+0x48>
 800400e:	ab03      	add	r3, sp, #12
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	462a      	mov	r2, r5
 8004014:	4b05      	ldr	r3, [pc, #20]	@ (800402c <_vfiprintf_r+0x228>)
 8004016:	a904      	add	r1, sp, #16
 8004018:	4630      	mov	r0, r6
 800401a:	f000 f879 	bl	8004110 <_printf_i>
 800401e:	e7e4      	b.n	8003fea <_vfiprintf_r+0x1e6>
 8004020:	080047ac 	.word	0x080047ac
 8004024:	080047b6 	.word	0x080047b6
 8004028:	00000000 	.word	0x00000000
 800402c:	08003ddf 	.word	0x08003ddf
 8004030:	080047b2 	.word	0x080047b2

08004034 <_printf_common>:
 8004034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	4616      	mov	r6, r2
 800403a:	4698      	mov	r8, r3
 800403c:	688a      	ldr	r2, [r1, #8]
 800403e:	690b      	ldr	r3, [r1, #16]
 8004040:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004044:	4293      	cmp	r3, r2
 8004046:	bfb8      	it	lt
 8004048:	4613      	movlt	r3, r2
 800404a:	6033      	str	r3, [r6, #0]
 800404c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004050:	4607      	mov	r7, r0
 8004052:	460c      	mov	r4, r1
 8004054:	b10a      	cbz	r2, 800405a <_printf_common+0x26>
 8004056:	3301      	adds	r3, #1
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	0699      	lsls	r1, r3, #26
 800405e:	bf42      	ittt	mi
 8004060:	6833      	ldrmi	r3, [r6, #0]
 8004062:	3302      	addmi	r3, #2
 8004064:	6033      	strmi	r3, [r6, #0]
 8004066:	6825      	ldr	r5, [r4, #0]
 8004068:	f015 0506 	ands.w	r5, r5, #6
 800406c:	d106      	bne.n	800407c <_printf_common+0x48>
 800406e:	f104 0a19 	add.w	sl, r4, #25
 8004072:	68e3      	ldr	r3, [r4, #12]
 8004074:	6832      	ldr	r2, [r6, #0]
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	42ab      	cmp	r3, r5
 800407a:	dc26      	bgt.n	80040ca <_printf_common+0x96>
 800407c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004080:	6822      	ldr	r2, [r4, #0]
 8004082:	3b00      	subs	r3, #0
 8004084:	bf18      	it	ne
 8004086:	2301      	movne	r3, #1
 8004088:	0692      	lsls	r2, r2, #26
 800408a:	d42b      	bmi.n	80040e4 <_printf_common+0xb0>
 800408c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004090:	4641      	mov	r1, r8
 8004092:	4638      	mov	r0, r7
 8004094:	47c8      	blx	r9
 8004096:	3001      	adds	r0, #1
 8004098:	d01e      	beq.n	80040d8 <_printf_common+0xa4>
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	6922      	ldr	r2, [r4, #16]
 800409e:	f003 0306 	and.w	r3, r3, #6
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	bf02      	ittt	eq
 80040a6:	68e5      	ldreq	r5, [r4, #12]
 80040a8:	6833      	ldreq	r3, [r6, #0]
 80040aa:	1aed      	subeq	r5, r5, r3
 80040ac:	68a3      	ldr	r3, [r4, #8]
 80040ae:	bf0c      	ite	eq
 80040b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b4:	2500      	movne	r5, #0
 80040b6:	4293      	cmp	r3, r2
 80040b8:	bfc4      	itt	gt
 80040ba:	1a9b      	subgt	r3, r3, r2
 80040bc:	18ed      	addgt	r5, r5, r3
 80040be:	2600      	movs	r6, #0
 80040c0:	341a      	adds	r4, #26
 80040c2:	42b5      	cmp	r5, r6
 80040c4:	d11a      	bne.n	80040fc <_printf_common+0xc8>
 80040c6:	2000      	movs	r0, #0
 80040c8:	e008      	b.n	80040dc <_printf_common+0xa8>
 80040ca:	2301      	movs	r3, #1
 80040cc:	4652      	mov	r2, sl
 80040ce:	4641      	mov	r1, r8
 80040d0:	4638      	mov	r0, r7
 80040d2:	47c8      	blx	r9
 80040d4:	3001      	adds	r0, #1
 80040d6:	d103      	bne.n	80040e0 <_printf_common+0xac>
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e0:	3501      	adds	r5, #1
 80040e2:	e7c6      	b.n	8004072 <_printf_common+0x3e>
 80040e4:	18e1      	adds	r1, r4, r3
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	2030      	movs	r0, #48	@ 0x30
 80040ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040ee:	4422      	add	r2, r4
 80040f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040f8:	3302      	adds	r3, #2
 80040fa:	e7c7      	b.n	800408c <_printf_common+0x58>
 80040fc:	2301      	movs	r3, #1
 80040fe:	4622      	mov	r2, r4
 8004100:	4641      	mov	r1, r8
 8004102:	4638      	mov	r0, r7
 8004104:	47c8      	blx	r9
 8004106:	3001      	adds	r0, #1
 8004108:	d0e6      	beq.n	80040d8 <_printf_common+0xa4>
 800410a:	3601      	adds	r6, #1
 800410c:	e7d9      	b.n	80040c2 <_printf_common+0x8e>
	...

08004110 <_printf_i>:
 8004110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004114:	7e0f      	ldrb	r7, [r1, #24]
 8004116:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004118:	2f78      	cmp	r7, #120	@ 0x78
 800411a:	4691      	mov	r9, r2
 800411c:	4680      	mov	r8, r0
 800411e:	460c      	mov	r4, r1
 8004120:	469a      	mov	sl, r3
 8004122:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004126:	d807      	bhi.n	8004138 <_printf_i+0x28>
 8004128:	2f62      	cmp	r7, #98	@ 0x62
 800412a:	d80a      	bhi.n	8004142 <_printf_i+0x32>
 800412c:	2f00      	cmp	r7, #0
 800412e:	f000 80d2 	beq.w	80042d6 <_printf_i+0x1c6>
 8004132:	2f58      	cmp	r7, #88	@ 0x58
 8004134:	f000 80b9 	beq.w	80042aa <_printf_i+0x19a>
 8004138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800413c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004140:	e03a      	b.n	80041b8 <_printf_i+0xa8>
 8004142:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004146:	2b15      	cmp	r3, #21
 8004148:	d8f6      	bhi.n	8004138 <_printf_i+0x28>
 800414a:	a101      	add	r1, pc, #4	@ (adr r1, 8004150 <_printf_i+0x40>)
 800414c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004150:	080041a9 	.word	0x080041a9
 8004154:	080041bd 	.word	0x080041bd
 8004158:	08004139 	.word	0x08004139
 800415c:	08004139 	.word	0x08004139
 8004160:	08004139 	.word	0x08004139
 8004164:	08004139 	.word	0x08004139
 8004168:	080041bd 	.word	0x080041bd
 800416c:	08004139 	.word	0x08004139
 8004170:	08004139 	.word	0x08004139
 8004174:	08004139 	.word	0x08004139
 8004178:	08004139 	.word	0x08004139
 800417c:	080042bd 	.word	0x080042bd
 8004180:	080041e7 	.word	0x080041e7
 8004184:	08004277 	.word	0x08004277
 8004188:	08004139 	.word	0x08004139
 800418c:	08004139 	.word	0x08004139
 8004190:	080042df 	.word	0x080042df
 8004194:	08004139 	.word	0x08004139
 8004198:	080041e7 	.word	0x080041e7
 800419c:	08004139 	.word	0x08004139
 80041a0:	08004139 	.word	0x08004139
 80041a4:	0800427f 	.word	0x0800427f
 80041a8:	6833      	ldr	r3, [r6, #0]
 80041aa:	1d1a      	adds	r2, r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6032      	str	r2, [r6, #0]
 80041b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041b8:	2301      	movs	r3, #1
 80041ba:	e09d      	b.n	80042f8 <_printf_i+0x1e8>
 80041bc:	6833      	ldr	r3, [r6, #0]
 80041be:	6820      	ldr	r0, [r4, #0]
 80041c0:	1d19      	adds	r1, r3, #4
 80041c2:	6031      	str	r1, [r6, #0]
 80041c4:	0606      	lsls	r6, r0, #24
 80041c6:	d501      	bpl.n	80041cc <_printf_i+0xbc>
 80041c8:	681d      	ldr	r5, [r3, #0]
 80041ca:	e003      	b.n	80041d4 <_printf_i+0xc4>
 80041cc:	0645      	lsls	r5, r0, #25
 80041ce:	d5fb      	bpl.n	80041c8 <_printf_i+0xb8>
 80041d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041d4:	2d00      	cmp	r5, #0
 80041d6:	da03      	bge.n	80041e0 <_printf_i+0xd0>
 80041d8:	232d      	movs	r3, #45	@ 0x2d
 80041da:	426d      	negs	r5, r5
 80041dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041e0:	4859      	ldr	r0, [pc, #356]	@ (8004348 <_printf_i+0x238>)
 80041e2:	230a      	movs	r3, #10
 80041e4:	e011      	b.n	800420a <_printf_i+0xfa>
 80041e6:	6821      	ldr	r1, [r4, #0]
 80041e8:	6833      	ldr	r3, [r6, #0]
 80041ea:	0608      	lsls	r0, r1, #24
 80041ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80041f0:	d402      	bmi.n	80041f8 <_printf_i+0xe8>
 80041f2:	0649      	lsls	r1, r1, #25
 80041f4:	bf48      	it	mi
 80041f6:	b2ad      	uxthmi	r5, r5
 80041f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80041fa:	4853      	ldr	r0, [pc, #332]	@ (8004348 <_printf_i+0x238>)
 80041fc:	6033      	str	r3, [r6, #0]
 80041fe:	bf14      	ite	ne
 8004200:	230a      	movne	r3, #10
 8004202:	2308      	moveq	r3, #8
 8004204:	2100      	movs	r1, #0
 8004206:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800420a:	6866      	ldr	r6, [r4, #4]
 800420c:	60a6      	str	r6, [r4, #8]
 800420e:	2e00      	cmp	r6, #0
 8004210:	bfa2      	ittt	ge
 8004212:	6821      	ldrge	r1, [r4, #0]
 8004214:	f021 0104 	bicge.w	r1, r1, #4
 8004218:	6021      	strge	r1, [r4, #0]
 800421a:	b90d      	cbnz	r5, 8004220 <_printf_i+0x110>
 800421c:	2e00      	cmp	r6, #0
 800421e:	d04b      	beq.n	80042b8 <_printf_i+0x1a8>
 8004220:	4616      	mov	r6, r2
 8004222:	fbb5 f1f3 	udiv	r1, r5, r3
 8004226:	fb03 5711 	mls	r7, r3, r1, r5
 800422a:	5dc7      	ldrb	r7, [r0, r7]
 800422c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004230:	462f      	mov	r7, r5
 8004232:	42bb      	cmp	r3, r7
 8004234:	460d      	mov	r5, r1
 8004236:	d9f4      	bls.n	8004222 <_printf_i+0x112>
 8004238:	2b08      	cmp	r3, #8
 800423a:	d10b      	bne.n	8004254 <_printf_i+0x144>
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	07df      	lsls	r7, r3, #31
 8004240:	d508      	bpl.n	8004254 <_printf_i+0x144>
 8004242:	6923      	ldr	r3, [r4, #16]
 8004244:	6861      	ldr	r1, [r4, #4]
 8004246:	4299      	cmp	r1, r3
 8004248:	bfde      	ittt	le
 800424a:	2330      	movle	r3, #48	@ 0x30
 800424c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004250:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004254:	1b92      	subs	r2, r2, r6
 8004256:	6122      	str	r2, [r4, #16]
 8004258:	f8cd a000 	str.w	sl, [sp]
 800425c:	464b      	mov	r3, r9
 800425e:	aa03      	add	r2, sp, #12
 8004260:	4621      	mov	r1, r4
 8004262:	4640      	mov	r0, r8
 8004264:	f7ff fee6 	bl	8004034 <_printf_common>
 8004268:	3001      	adds	r0, #1
 800426a:	d14a      	bne.n	8004302 <_printf_i+0x1f2>
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	b004      	add	sp, #16
 8004272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	f043 0320 	orr.w	r3, r3, #32
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	4833      	ldr	r0, [pc, #204]	@ (800434c <_printf_i+0x23c>)
 8004280:	2778      	movs	r7, #120	@ 0x78
 8004282:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	6831      	ldr	r1, [r6, #0]
 800428a:	061f      	lsls	r7, r3, #24
 800428c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004290:	d402      	bmi.n	8004298 <_printf_i+0x188>
 8004292:	065f      	lsls	r7, r3, #25
 8004294:	bf48      	it	mi
 8004296:	b2ad      	uxthmi	r5, r5
 8004298:	6031      	str	r1, [r6, #0]
 800429a:	07d9      	lsls	r1, r3, #31
 800429c:	bf44      	itt	mi
 800429e:	f043 0320 	orrmi.w	r3, r3, #32
 80042a2:	6023      	strmi	r3, [r4, #0]
 80042a4:	b11d      	cbz	r5, 80042ae <_printf_i+0x19e>
 80042a6:	2310      	movs	r3, #16
 80042a8:	e7ac      	b.n	8004204 <_printf_i+0xf4>
 80042aa:	4827      	ldr	r0, [pc, #156]	@ (8004348 <_printf_i+0x238>)
 80042ac:	e7e9      	b.n	8004282 <_printf_i+0x172>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	f023 0320 	bic.w	r3, r3, #32
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	e7f6      	b.n	80042a6 <_printf_i+0x196>
 80042b8:	4616      	mov	r6, r2
 80042ba:	e7bd      	b.n	8004238 <_printf_i+0x128>
 80042bc:	6833      	ldr	r3, [r6, #0]
 80042be:	6825      	ldr	r5, [r4, #0]
 80042c0:	6961      	ldr	r1, [r4, #20]
 80042c2:	1d18      	adds	r0, r3, #4
 80042c4:	6030      	str	r0, [r6, #0]
 80042c6:	062e      	lsls	r6, r5, #24
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	d501      	bpl.n	80042d0 <_printf_i+0x1c0>
 80042cc:	6019      	str	r1, [r3, #0]
 80042ce:	e002      	b.n	80042d6 <_printf_i+0x1c6>
 80042d0:	0668      	lsls	r0, r5, #25
 80042d2:	d5fb      	bpl.n	80042cc <_printf_i+0x1bc>
 80042d4:	8019      	strh	r1, [r3, #0]
 80042d6:	2300      	movs	r3, #0
 80042d8:	6123      	str	r3, [r4, #16]
 80042da:	4616      	mov	r6, r2
 80042dc:	e7bc      	b.n	8004258 <_printf_i+0x148>
 80042de:	6833      	ldr	r3, [r6, #0]
 80042e0:	1d1a      	adds	r2, r3, #4
 80042e2:	6032      	str	r2, [r6, #0]
 80042e4:	681e      	ldr	r6, [r3, #0]
 80042e6:	6862      	ldr	r2, [r4, #4]
 80042e8:	2100      	movs	r1, #0
 80042ea:	4630      	mov	r0, r6
 80042ec:	f7fb ff78 	bl	80001e0 <memchr>
 80042f0:	b108      	cbz	r0, 80042f6 <_printf_i+0x1e6>
 80042f2:	1b80      	subs	r0, r0, r6
 80042f4:	6060      	str	r0, [r4, #4]
 80042f6:	6863      	ldr	r3, [r4, #4]
 80042f8:	6123      	str	r3, [r4, #16]
 80042fa:	2300      	movs	r3, #0
 80042fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004300:	e7aa      	b.n	8004258 <_printf_i+0x148>
 8004302:	6923      	ldr	r3, [r4, #16]
 8004304:	4632      	mov	r2, r6
 8004306:	4649      	mov	r1, r9
 8004308:	4640      	mov	r0, r8
 800430a:	47d0      	blx	sl
 800430c:	3001      	adds	r0, #1
 800430e:	d0ad      	beq.n	800426c <_printf_i+0x15c>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	079b      	lsls	r3, r3, #30
 8004314:	d413      	bmi.n	800433e <_printf_i+0x22e>
 8004316:	68e0      	ldr	r0, [r4, #12]
 8004318:	9b03      	ldr	r3, [sp, #12]
 800431a:	4298      	cmp	r0, r3
 800431c:	bfb8      	it	lt
 800431e:	4618      	movlt	r0, r3
 8004320:	e7a6      	b.n	8004270 <_printf_i+0x160>
 8004322:	2301      	movs	r3, #1
 8004324:	4632      	mov	r2, r6
 8004326:	4649      	mov	r1, r9
 8004328:	4640      	mov	r0, r8
 800432a:	47d0      	blx	sl
 800432c:	3001      	adds	r0, #1
 800432e:	d09d      	beq.n	800426c <_printf_i+0x15c>
 8004330:	3501      	adds	r5, #1
 8004332:	68e3      	ldr	r3, [r4, #12]
 8004334:	9903      	ldr	r1, [sp, #12]
 8004336:	1a5b      	subs	r3, r3, r1
 8004338:	42ab      	cmp	r3, r5
 800433a:	dcf2      	bgt.n	8004322 <_printf_i+0x212>
 800433c:	e7eb      	b.n	8004316 <_printf_i+0x206>
 800433e:	2500      	movs	r5, #0
 8004340:	f104 0619 	add.w	r6, r4, #25
 8004344:	e7f5      	b.n	8004332 <_printf_i+0x222>
 8004346:	bf00      	nop
 8004348:	080047bd 	.word	0x080047bd
 800434c:	080047ce 	.word	0x080047ce

08004350 <__sflush_r>:
 8004350:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004358:	0716      	lsls	r6, r2, #28
 800435a:	4605      	mov	r5, r0
 800435c:	460c      	mov	r4, r1
 800435e:	d454      	bmi.n	800440a <__sflush_r+0xba>
 8004360:	684b      	ldr	r3, [r1, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	dc02      	bgt.n	800436c <__sflush_r+0x1c>
 8004366:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	dd48      	ble.n	80043fe <__sflush_r+0xae>
 800436c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800436e:	2e00      	cmp	r6, #0
 8004370:	d045      	beq.n	80043fe <__sflush_r+0xae>
 8004372:	2300      	movs	r3, #0
 8004374:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004378:	682f      	ldr	r7, [r5, #0]
 800437a:	6a21      	ldr	r1, [r4, #32]
 800437c:	602b      	str	r3, [r5, #0]
 800437e:	d030      	beq.n	80043e2 <__sflush_r+0x92>
 8004380:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004382:	89a3      	ldrh	r3, [r4, #12]
 8004384:	0759      	lsls	r1, r3, #29
 8004386:	d505      	bpl.n	8004394 <__sflush_r+0x44>
 8004388:	6863      	ldr	r3, [r4, #4]
 800438a:	1ad2      	subs	r2, r2, r3
 800438c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800438e:	b10b      	cbz	r3, 8004394 <__sflush_r+0x44>
 8004390:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	2300      	movs	r3, #0
 8004396:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004398:	6a21      	ldr	r1, [r4, #32]
 800439a:	4628      	mov	r0, r5
 800439c:	47b0      	blx	r6
 800439e:	1c43      	adds	r3, r0, #1
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	d106      	bne.n	80043b2 <__sflush_r+0x62>
 80043a4:	6829      	ldr	r1, [r5, #0]
 80043a6:	291d      	cmp	r1, #29
 80043a8:	d82b      	bhi.n	8004402 <__sflush_r+0xb2>
 80043aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004454 <__sflush_r+0x104>)
 80043ac:	410a      	asrs	r2, r1
 80043ae:	07d6      	lsls	r6, r2, #31
 80043b0:	d427      	bmi.n	8004402 <__sflush_r+0xb2>
 80043b2:	2200      	movs	r2, #0
 80043b4:	6062      	str	r2, [r4, #4]
 80043b6:	04d9      	lsls	r1, r3, #19
 80043b8:	6922      	ldr	r2, [r4, #16]
 80043ba:	6022      	str	r2, [r4, #0]
 80043bc:	d504      	bpl.n	80043c8 <__sflush_r+0x78>
 80043be:	1c42      	adds	r2, r0, #1
 80043c0:	d101      	bne.n	80043c6 <__sflush_r+0x76>
 80043c2:	682b      	ldr	r3, [r5, #0]
 80043c4:	b903      	cbnz	r3, 80043c8 <__sflush_r+0x78>
 80043c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80043c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043ca:	602f      	str	r7, [r5, #0]
 80043cc:	b1b9      	cbz	r1, 80043fe <__sflush_r+0xae>
 80043ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043d2:	4299      	cmp	r1, r3
 80043d4:	d002      	beq.n	80043dc <__sflush_r+0x8c>
 80043d6:	4628      	mov	r0, r5
 80043d8:	f7ff fbf2 	bl	8003bc0 <_free_r>
 80043dc:	2300      	movs	r3, #0
 80043de:	6363      	str	r3, [r4, #52]	@ 0x34
 80043e0:	e00d      	b.n	80043fe <__sflush_r+0xae>
 80043e2:	2301      	movs	r3, #1
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b0      	blx	r6
 80043e8:	4602      	mov	r2, r0
 80043ea:	1c50      	adds	r0, r2, #1
 80043ec:	d1c9      	bne.n	8004382 <__sflush_r+0x32>
 80043ee:	682b      	ldr	r3, [r5, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0c6      	beq.n	8004382 <__sflush_r+0x32>
 80043f4:	2b1d      	cmp	r3, #29
 80043f6:	d001      	beq.n	80043fc <__sflush_r+0xac>
 80043f8:	2b16      	cmp	r3, #22
 80043fa:	d11e      	bne.n	800443a <__sflush_r+0xea>
 80043fc:	602f      	str	r7, [r5, #0]
 80043fe:	2000      	movs	r0, #0
 8004400:	e022      	b.n	8004448 <__sflush_r+0xf8>
 8004402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004406:	b21b      	sxth	r3, r3
 8004408:	e01b      	b.n	8004442 <__sflush_r+0xf2>
 800440a:	690f      	ldr	r7, [r1, #16]
 800440c:	2f00      	cmp	r7, #0
 800440e:	d0f6      	beq.n	80043fe <__sflush_r+0xae>
 8004410:	0793      	lsls	r3, r2, #30
 8004412:	680e      	ldr	r6, [r1, #0]
 8004414:	bf08      	it	eq
 8004416:	694b      	ldreq	r3, [r1, #20]
 8004418:	600f      	str	r7, [r1, #0]
 800441a:	bf18      	it	ne
 800441c:	2300      	movne	r3, #0
 800441e:	eba6 0807 	sub.w	r8, r6, r7
 8004422:	608b      	str	r3, [r1, #8]
 8004424:	f1b8 0f00 	cmp.w	r8, #0
 8004428:	dde9      	ble.n	80043fe <__sflush_r+0xae>
 800442a:	6a21      	ldr	r1, [r4, #32]
 800442c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800442e:	4643      	mov	r3, r8
 8004430:	463a      	mov	r2, r7
 8004432:	4628      	mov	r0, r5
 8004434:	47b0      	blx	r6
 8004436:	2800      	cmp	r0, #0
 8004438:	dc08      	bgt.n	800444c <__sflush_r+0xfc>
 800443a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800443e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004442:	81a3      	strh	r3, [r4, #12]
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800444c:	4407      	add	r7, r0
 800444e:	eba8 0800 	sub.w	r8, r8, r0
 8004452:	e7e7      	b.n	8004424 <__sflush_r+0xd4>
 8004454:	dfbffffe 	.word	0xdfbffffe

08004458 <_fflush_r>:
 8004458:	b538      	push	{r3, r4, r5, lr}
 800445a:	690b      	ldr	r3, [r1, #16]
 800445c:	4605      	mov	r5, r0
 800445e:	460c      	mov	r4, r1
 8004460:	b913      	cbnz	r3, 8004468 <_fflush_r+0x10>
 8004462:	2500      	movs	r5, #0
 8004464:	4628      	mov	r0, r5
 8004466:	bd38      	pop	{r3, r4, r5, pc}
 8004468:	b118      	cbz	r0, 8004472 <_fflush_r+0x1a>
 800446a:	6a03      	ldr	r3, [r0, #32]
 800446c:	b90b      	cbnz	r3, 8004472 <_fflush_r+0x1a>
 800446e:	f7ff fa9f 	bl	80039b0 <__sinit>
 8004472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f3      	beq.n	8004462 <_fflush_r+0xa>
 800447a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800447c:	07d0      	lsls	r0, r2, #31
 800447e:	d404      	bmi.n	800448a <_fflush_r+0x32>
 8004480:	0599      	lsls	r1, r3, #22
 8004482:	d402      	bmi.n	800448a <_fflush_r+0x32>
 8004484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004486:	f7ff fb98 	bl	8003bba <__retarget_lock_acquire_recursive>
 800448a:	4628      	mov	r0, r5
 800448c:	4621      	mov	r1, r4
 800448e:	f7ff ff5f 	bl	8004350 <__sflush_r>
 8004492:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004494:	07da      	lsls	r2, r3, #31
 8004496:	4605      	mov	r5, r0
 8004498:	d4e4      	bmi.n	8004464 <_fflush_r+0xc>
 800449a:	89a3      	ldrh	r3, [r4, #12]
 800449c:	059b      	lsls	r3, r3, #22
 800449e:	d4e1      	bmi.n	8004464 <_fflush_r+0xc>
 80044a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044a2:	f7ff fb8b 	bl	8003bbc <__retarget_lock_release_recursive>
 80044a6:	e7dd      	b.n	8004464 <_fflush_r+0xc>

080044a8 <__swbuf_r>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	460e      	mov	r6, r1
 80044ac:	4614      	mov	r4, r2
 80044ae:	4605      	mov	r5, r0
 80044b0:	b118      	cbz	r0, 80044ba <__swbuf_r+0x12>
 80044b2:	6a03      	ldr	r3, [r0, #32]
 80044b4:	b90b      	cbnz	r3, 80044ba <__swbuf_r+0x12>
 80044b6:	f7ff fa7b 	bl	80039b0 <__sinit>
 80044ba:	69a3      	ldr	r3, [r4, #24]
 80044bc:	60a3      	str	r3, [r4, #8]
 80044be:	89a3      	ldrh	r3, [r4, #12]
 80044c0:	071a      	lsls	r2, r3, #28
 80044c2:	d501      	bpl.n	80044c8 <__swbuf_r+0x20>
 80044c4:	6923      	ldr	r3, [r4, #16]
 80044c6:	b943      	cbnz	r3, 80044da <__swbuf_r+0x32>
 80044c8:	4621      	mov	r1, r4
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 f82a 	bl	8004524 <__swsetup_r>
 80044d0:	b118      	cbz	r0, 80044da <__swbuf_r+0x32>
 80044d2:	f04f 37ff 	mov.w	r7, #4294967295
 80044d6:	4638      	mov	r0, r7
 80044d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	6922      	ldr	r2, [r4, #16]
 80044de:	1a98      	subs	r0, r3, r2
 80044e0:	6963      	ldr	r3, [r4, #20]
 80044e2:	b2f6      	uxtb	r6, r6
 80044e4:	4283      	cmp	r3, r0
 80044e6:	4637      	mov	r7, r6
 80044e8:	dc05      	bgt.n	80044f6 <__swbuf_r+0x4e>
 80044ea:	4621      	mov	r1, r4
 80044ec:	4628      	mov	r0, r5
 80044ee:	f7ff ffb3 	bl	8004458 <_fflush_r>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d1ed      	bne.n	80044d2 <__swbuf_r+0x2a>
 80044f6:	68a3      	ldr	r3, [r4, #8]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	60a3      	str	r3, [r4, #8]
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	6022      	str	r2, [r4, #0]
 8004502:	701e      	strb	r6, [r3, #0]
 8004504:	6962      	ldr	r2, [r4, #20]
 8004506:	1c43      	adds	r3, r0, #1
 8004508:	429a      	cmp	r2, r3
 800450a:	d004      	beq.n	8004516 <__swbuf_r+0x6e>
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	07db      	lsls	r3, r3, #31
 8004510:	d5e1      	bpl.n	80044d6 <__swbuf_r+0x2e>
 8004512:	2e0a      	cmp	r6, #10
 8004514:	d1df      	bne.n	80044d6 <__swbuf_r+0x2e>
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f7ff ff9d 	bl	8004458 <_fflush_r>
 800451e:	2800      	cmp	r0, #0
 8004520:	d0d9      	beq.n	80044d6 <__swbuf_r+0x2e>
 8004522:	e7d6      	b.n	80044d2 <__swbuf_r+0x2a>

08004524 <__swsetup_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4b29      	ldr	r3, [pc, #164]	@ (80045cc <__swsetup_r+0xa8>)
 8004528:	4605      	mov	r5, r0
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	460c      	mov	r4, r1
 800452e:	b118      	cbz	r0, 8004538 <__swsetup_r+0x14>
 8004530:	6a03      	ldr	r3, [r0, #32]
 8004532:	b90b      	cbnz	r3, 8004538 <__swsetup_r+0x14>
 8004534:	f7ff fa3c 	bl	80039b0 <__sinit>
 8004538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800453c:	0719      	lsls	r1, r3, #28
 800453e:	d422      	bmi.n	8004586 <__swsetup_r+0x62>
 8004540:	06da      	lsls	r2, r3, #27
 8004542:	d407      	bmi.n	8004554 <__swsetup_r+0x30>
 8004544:	2209      	movs	r2, #9
 8004546:	602a      	str	r2, [r5, #0]
 8004548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	f04f 30ff 	mov.w	r0, #4294967295
 8004552:	e033      	b.n	80045bc <__swsetup_r+0x98>
 8004554:	0758      	lsls	r0, r3, #29
 8004556:	d512      	bpl.n	800457e <__swsetup_r+0x5a>
 8004558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800455a:	b141      	cbz	r1, 800456e <__swsetup_r+0x4a>
 800455c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004560:	4299      	cmp	r1, r3
 8004562:	d002      	beq.n	800456a <__swsetup_r+0x46>
 8004564:	4628      	mov	r0, r5
 8004566:	f7ff fb2b 	bl	8003bc0 <_free_r>
 800456a:	2300      	movs	r3, #0
 800456c:	6363      	str	r3, [r4, #52]	@ 0x34
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004574:	81a3      	strh	r3, [r4, #12]
 8004576:	2300      	movs	r3, #0
 8004578:	6063      	str	r3, [r4, #4]
 800457a:	6923      	ldr	r3, [r4, #16]
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	f043 0308 	orr.w	r3, r3, #8
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	b94b      	cbnz	r3, 800459e <__swsetup_r+0x7a>
 800458a:	89a3      	ldrh	r3, [r4, #12]
 800458c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004594:	d003      	beq.n	800459e <__swsetup_r+0x7a>
 8004596:	4621      	mov	r1, r4
 8004598:	4628      	mov	r0, r5
 800459a:	f000 f84f 	bl	800463c <__smakebuf_r>
 800459e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045a2:	f013 0201 	ands.w	r2, r3, #1
 80045a6:	d00a      	beq.n	80045be <__swsetup_r+0x9a>
 80045a8:	2200      	movs	r2, #0
 80045aa:	60a2      	str	r2, [r4, #8]
 80045ac:	6962      	ldr	r2, [r4, #20]
 80045ae:	4252      	negs	r2, r2
 80045b0:	61a2      	str	r2, [r4, #24]
 80045b2:	6922      	ldr	r2, [r4, #16]
 80045b4:	b942      	cbnz	r2, 80045c8 <__swsetup_r+0xa4>
 80045b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80045ba:	d1c5      	bne.n	8004548 <__swsetup_r+0x24>
 80045bc:	bd38      	pop	{r3, r4, r5, pc}
 80045be:	0799      	lsls	r1, r3, #30
 80045c0:	bf58      	it	pl
 80045c2:	6962      	ldrpl	r2, [r4, #20]
 80045c4:	60a2      	str	r2, [r4, #8]
 80045c6:	e7f4      	b.n	80045b2 <__swsetup_r+0x8e>
 80045c8:	2000      	movs	r0, #0
 80045ca:	e7f7      	b.n	80045bc <__swsetup_r+0x98>
 80045cc:	2000001c 	.word	0x2000001c

080045d0 <_sbrk_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4d06      	ldr	r5, [pc, #24]	@ (80045ec <_sbrk_r+0x1c>)
 80045d4:	2300      	movs	r3, #0
 80045d6:	4604      	mov	r4, r0
 80045d8:	4608      	mov	r0, r1
 80045da:	602b      	str	r3, [r5, #0]
 80045dc:	f7fd fc96 	bl	8001f0c <_sbrk>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	d102      	bne.n	80045ea <_sbrk_r+0x1a>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	b103      	cbz	r3, 80045ea <_sbrk_r+0x1a>
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	bd38      	pop	{r3, r4, r5, pc}
 80045ec:	200002fc 	.word	0x200002fc

080045f0 <__swhatbuf_r>:
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	460c      	mov	r4, r1
 80045f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f8:	2900      	cmp	r1, #0
 80045fa:	b096      	sub	sp, #88	@ 0x58
 80045fc:	4615      	mov	r5, r2
 80045fe:	461e      	mov	r6, r3
 8004600:	da0d      	bge.n	800461e <__swhatbuf_r+0x2e>
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004608:	f04f 0100 	mov.w	r1, #0
 800460c:	bf14      	ite	ne
 800460e:	2340      	movne	r3, #64	@ 0x40
 8004610:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004614:	2000      	movs	r0, #0
 8004616:	6031      	str	r1, [r6, #0]
 8004618:	602b      	str	r3, [r5, #0]
 800461a:	b016      	add	sp, #88	@ 0x58
 800461c:	bd70      	pop	{r4, r5, r6, pc}
 800461e:	466a      	mov	r2, sp
 8004620:	f000 f848 	bl	80046b4 <_fstat_r>
 8004624:	2800      	cmp	r0, #0
 8004626:	dbec      	blt.n	8004602 <__swhatbuf_r+0x12>
 8004628:	9901      	ldr	r1, [sp, #4]
 800462a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800462e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004632:	4259      	negs	r1, r3
 8004634:	4159      	adcs	r1, r3
 8004636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800463a:	e7eb      	b.n	8004614 <__swhatbuf_r+0x24>

0800463c <__smakebuf_r>:
 800463c:	898b      	ldrh	r3, [r1, #12]
 800463e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004640:	079d      	lsls	r5, r3, #30
 8004642:	4606      	mov	r6, r0
 8004644:	460c      	mov	r4, r1
 8004646:	d507      	bpl.n	8004658 <__smakebuf_r+0x1c>
 8004648:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	6123      	str	r3, [r4, #16]
 8004650:	2301      	movs	r3, #1
 8004652:	6163      	str	r3, [r4, #20]
 8004654:	b003      	add	sp, #12
 8004656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004658:	ab01      	add	r3, sp, #4
 800465a:	466a      	mov	r2, sp
 800465c:	f7ff ffc8 	bl	80045f0 <__swhatbuf_r>
 8004660:	9f00      	ldr	r7, [sp, #0]
 8004662:	4605      	mov	r5, r0
 8004664:	4639      	mov	r1, r7
 8004666:	4630      	mov	r0, r6
 8004668:	f7ff fb16 	bl	8003c98 <_malloc_r>
 800466c:	b948      	cbnz	r0, 8004682 <__smakebuf_r+0x46>
 800466e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004672:	059a      	lsls	r2, r3, #22
 8004674:	d4ee      	bmi.n	8004654 <__smakebuf_r+0x18>
 8004676:	f023 0303 	bic.w	r3, r3, #3
 800467a:	f043 0302 	orr.w	r3, r3, #2
 800467e:	81a3      	strh	r3, [r4, #12]
 8004680:	e7e2      	b.n	8004648 <__smakebuf_r+0xc>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	6020      	str	r0, [r4, #0]
 8004686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800468a:	81a3      	strh	r3, [r4, #12]
 800468c:	9b01      	ldr	r3, [sp, #4]
 800468e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004692:	b15b      	cbz	r3, 80046ac <__smakebuf_r+0x70>
 8004694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004698:	4630      	mov	r0, r6
 800469a:	f000 f81d 	bl	80046d8 <_isatty_r>
 800469e:	b128      	cbz	r0, 80046ac <__smakebuf_r+0x70>
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	81a3      	strh	r3, [r4, #12]
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	431d      	orrs	r5, r3
 80046b0:	81a5      	strh	r5, [r4, #12]
 80046b2:	e7cf      	b.n	8004654 <__smakebuf_r+0x18>

080046b4 <_fstat_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4d07      	ldr	r5, [pc, #28]	@ (80046d4 <_fstat_r+0x20>)
 80046b8:	2300      	movs	r3, #0
 80046ba:	4604      	mov	r4, r0
 80046bc:	4608      	mov	r0, r1
 80046be:	4611      	mov	r1, r2
 80046c0:	602b      	str	r3, [r5, #0]
 80046c2:	f7fd fbfa 	bl	8001eba <_fstat>
 80046c6:	1c43      	adds	r3, r0, #1
 80046c8:	d102      	bne.n	80046d0 <_fstat_r+0x1c>
 80046ca:	682b      	ldr	r3, [r5, #0]
 80046cc:	b103      	cbz	r3, 80046d0 <_fstat_r+0x1c>
 80046ce:	6023      	str	r3, [r4, #0]
 80046d0:	bd38      	pop	{r3, r4, r5, pc}
 80046d2:	bf00      	nop
 80046d4:	200002fc 	.word	0x200002fc

080046d8 <_isatty_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4d06      	ldr	r5, [pc, #24]	@ (80046f4 <_isatty_r+0x1c>)
 80046dc:	2300      	movs	r3, #0
 80046de:	4604      	mov	r4, r0
 80046e0:	4608      	mov	r0, r1
 80046e2:	602b      	str	r3, [r5, #0]
 80046e4:	f7fd fbf9 	bl	8001eda <_isatty>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_isatty_r+0x1a>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_isatty_r+0x1a>
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	200002fc 	.word	0x200002fc

080046f8 <_init>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr

08004704 <_fini>:
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	bf00      	nop
 8004708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470a:	bc08      	pop	{r3}
 800470c:	469e      	mov	lr, r3
 800470e:	4770      	bx	lr
