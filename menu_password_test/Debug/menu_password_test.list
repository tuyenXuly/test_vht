
menu_password_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006070  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006210  08006210  00007210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062cc  080062cc  00008078  2**0
                  CONTENTS
  4 .ARM          00000008  080062cc  080062cc  000072cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062d4  080062d4  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062d4  080062d4  000072d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062d8  080062d8  000072d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080062dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000078  08006354  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08006354  000082e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2c4  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f6  00000000  00000000  0001536c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00017968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b7  00000000  00000000  00018610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179c5  00000000  00000000  00018fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b93  00000000  00000000  0003098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a455  00000000  00000000  0004151f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb974  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d60  00000000  00000000  000cb9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000cf718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080061f8 	.word	0x080061f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080061f8 	.word	0x080061f8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b96a 	b.w	8000dc8 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	460c      	mov	r4, r1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d14e      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b18:	4694      	mov	ip, r2
 8000b1a:	458c      	cmp	ip, r1
 8000b1c:	4686      	mov	lr, r0
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	d962      	bls.n	8000bea <__udivmoddi4+0xde>
 8000b24:	b14a      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b26:	f1c2 0320 	rsb	r3, r2, #32
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b34:	4319      	orrs	r1, r3
 8000b36:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3e:	fa1f f68c 	uxth.w	r6, ip
 8000b42:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b4a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb04 f106 	mul.w	r1, r4, r6
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b62:	f080 8112 	bcs.w	8000d8a <__udivmoddi4+0x27e>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 810f 	bls.w	8000d8a <__udivmoddi4+0x27e>
 8000b6c:	3c02      	subs	r4, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a59      	subs	r1, r3, r1
 8000b72:	fa1f f38e 	uxth.w	r3, lr
 8000b76:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb00 f606 	mul.w	r6, r0, r6
 8000b86:	429e      	cmp	r6, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x94>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b92:	f080 80fc 	bcs.w	8000d8e <__udivmoddi4+0x282>
 8000b96:	429e      	cmp	r6, r3
 8000b98:	f240 80f9 	bls.w	8000d8e <__udivmoddi4+0x282>
 8000b9c:	4463      	add	r3, ip
 8000b9e:	3802      	subs	r0, #2
 8000ba0:	1b9b      	subs	r3, r3, r6
 8000ba2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	b11d      	cbz	r5, 8000bb2 <__udivmoddi4+0xa6>
 8000baa:	40d3      	lsrs	r3, r2
 8000bac:	2200      	movs	r2, #0
 8000bae:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d905      	bls.n	8000bc6 <__udivmoddi4+0xba>
 8000bba:	b10d      	cbz	r5, 8000bc0 <__udivmoddi4+0xb4>
 8000bbc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	e7f5      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000bc6:	fab3 f183 	clz	r1, r3
 8000bca:	2900      	cmp	r1, #0
 8000bcc:	d146      	bne.n	8000c5c <__udivmoddi4+0x150>
 8000bce:	42a3      	cmp	r3, r4
 8000bd0:	d302      	bcc.n	8000bd8 <__udivmoddi4+0xcc>
 8000bd2:	4290      	cmp	r0, r2
 8000bd4:	f0c0 80f0 	bcc.w	8000db8 <__udivmoddi4+0x2ac>
 8000bd8:	1a86      	subs	r6, r0, r2
 8000bda:	eb64 0303 	sbc.w	r3, r4, r3
 8000bde:	2001      	movs	r0, #1
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	d0e6      	beq.n	8000bb2 <__udivmoddi4+0xa6>
 8000be4:	e9c5 6300 	strd	r6, r3, [r5]
 8000be8:	e7e3      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	f040 8090 	bne.w	8000d10 <__udivmoddi4+0x204>
 8000bf0:	eba1 040c 	sub.w	r4, r1, ip
 8000bf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf8:	fa1f f78c 	uxth.w	r7, ip
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c06:	fb08 4416 	mls	r4, r8, r6, r4
 8000c0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0e:	fb07 f006 	mul.w	r0, r7, r6
 8000c12:	4298      	cmp	r0, r3
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x11c>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x11a>
 8000c20:	4298      	cmp	r0, r3
 8000c22:	f200 80cd 	bhi.w	8000dc0 <__udivmoddi4+0x2b4>
 8000c26:	4626      	mov	r6, r4
 8000c28:	1a1c      	subs	r4, r3, r0
 8000c2a:	fa1f f38e 	uxth.w	r3, lr
 8000c2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c32:	fb08 4410 	mls	r4, r8, r0, r4
 8000c36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3a:	fb00 f707 	mul.w	r7, r0, r7
 8000c3e:	429f      	cmp	r7, r3
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x148>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x146>
 8000c4c:	429f      	cmp	r7, r3
 8000c4e:	f200 80b0 	bhi.w	8000db2 <__udivmoddi4+0x2a6>
 8000c52:	4620      	mov	r0, r4
 8000c54:	1bdb      	subs	r3, r3, r7
 8000c56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5a:	e7a5      	b.n	8000ba8 <__udivmoddi4+0x9c>
 8000c5c:	f1c1 0620 	rsb	r6, r1, #32
 8000c60:	408b      	lsls	r3, r1
 8000c62:	fa22 f706 	lsr.w	r7, r2, r6
 8000c66:	431f      	orrs	r7, r3
 8000c68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c70:	ea43 030c 	orr.w	r3, r3, ip
 8000c74:	40f4      	lsrs	r4, r6
 8000c76:	fa00 f801 	lsl.w	r8, r0, r1
 8000c7a:	0c38      	lsrs	r0, r7, #16
 8000c7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c80:	fbb4 fef0 	udiv	lr, r4, r0
 8000c84:	fa1f fc87 	uxth.w	ip, r7
 8000c88:	fb00 441e 	mls	r4, r0, lr, r4
 8000c8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c90:	fb0e f90c 	mul.w	r9, lr, ip
 8000c94:	45a1      	cmp	r9, r4
 8000c96:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9a:	d90a      	bls.n	8000cb2 <__udivmoddi4+0x1a6>
 8000c9c:	193c      	adds	r4, r7, r4
 8000c9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ca2:	f080 8084 	bcs.w	8000dae <__udivmoddi4+0x2a2>
 8000ca6:	45a1      	cmp	r9, r4
 8000ca8:	f240 8081 	bls.w	8000dae <__udivmoddi4+0x2a2>
 8000cac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cb0:	443c      	add	r4, r7
 8000cb2:	eba4 0409 	sub.w	r4, r4, r9
 8000cb6:	fa1f f983 	uxth.w	r9, r3
 8000cba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cbe:	fb00 4413 	mls	r4, r0, r3, r4
 8000cc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cca:	45a4      	cmp	ip, r4
 8000ccc:	d907      	bls.n	8000cde <__udivmoddi4+0x1d2>
 8000cce:	193c      	adds	r4, r7, r4
 8000cd0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cd4:	d267      	bcs.n	8000da6 <__udivmoddi4+0x29a>
 8000cd6:	45a4      	cmp	ip, r4
 8000cd8:	d965      	bls.n	8000da6 <__udivmoddi4+0x29a>
 8000cda:	3b02      	subs	r3, #2
 8000cdc:	443c      	add	r4, r7
 8000cde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ce2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ce6:	eba4 040c 	sub.w	r4, r4, ip
 8000cea:	429c      	cmp	r4, r3
 8000cec:	46ce      	mov	lr, r9
 8000cee:	469c      	mov	ip, r3
 8000cf0:	d351      	bcc.n	8000d96 <__udivmoddi4+0x28a>
 8000cf2:	d04e      	beq.n	8000d92 <__udivmoddi4+0x286>
 8000cf4:	b155      	cbz	r5, 8000d0c <__udivmoddi4+0x200>
 8000cf6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cfa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cfe:	fa04 f606 	lsl.w	r6, r4, r6
 8000d02:	40cb      	lsrs	r3, r1
 8000d04:	431e      	orrs	r6, r3
 8000d06:	40cc      	lsrs	r4, r1
 8000d08:	e9c5 6400 	strd	r6, r4, [r5]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	e750      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000d10:	f1c2 0320 	rsb	r3, r2, #32
 8000d14:	fa20 f103 	lsr.w	r1, r0, r3
 8000d18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d20:	4094      	lsls	r4, r2
 8000d22:	430c      	orrs	r4, r1
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d2c:	fa1f f78c 	uxth.w	r7, ip
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3110 	mls	r1, r8, r0, r3
 8000d38:	0c23      	lsrs	r3, r4, #16
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f107 	mul.w	r1, r0, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x24c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d4e:	d22c      	bcs.n	8000daa <__udivmoddi4+0x29e>
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d92a      	bls.n	8000daa <__udivmoddi4+0x29e>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4463      	add	r3, ip
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d60:	fb08 3311 	mls	r3, r8, r1, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb01 f307 	mul.w	r3, r1, r7
 8000d6c:	42a3      	cmp	r3, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x276>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d78:	d213      	bcs.n	8000da2 <__udivmoddi4+0x296>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d911      	bls.n	8000da2 <__udivmoddi4+0x296>
 8000d7e:	3902      	subs	r1, #2
 8000d80:	4464      	add	r4, ip
 8000d82:	1ae4      	subs	r4, r4, r3
 8000d84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d88:	e739      	b.n	8000bfe <__udivmoddi4+0xf2>
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	e6f0      	b.n	8000b70 <__udivmoddi4+0x64>
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e706      	b.n	8000ba0 <__udivmoddi4+0x94>
 8000d92:	45c8      	cmp	r8, r9
 8000d94:	d2ae      	bcs.n	8000cf4 <__udivmoddi4+0x1e8>
 8000d96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d9e:	3801      	subs	r0, #1
 8000da0:	e7a8      	b.n	8000cf4 <__udivmoddi4+0x1e8>
 8000da2:	4631      	mov	r1, r6
 8000da4:	e7ed      	b.n	8000d82 <__udivmoddi4+0x276>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e799      	b.n	8000cde <__udivmoddi4+0x1d2>
 8000daa:	4630      	mov	r0, r6
 8000dac:	e7d4      	b.n	8000d58 <__udivmoddi4+0x24c>
 8000dae:	46d6      	mov	lr, sl
 8000db0:	e77f      	b.n	8000cb2 <__udivmoddi4+0x1a6>
 8000db2:	4463      	add	r3, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	e74d      	b.n	8000c54 <__udivmoddi4+0x148>
 8000db8:	4606      	mov	r6, r0
 8000dba:	4623      	mov	r3, r4
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e70f      	b.n	8000be0 <__udivmoddi4+0xd4>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	4463      	add	r3, ip
 8000dc4:	e730      	b.n	8000c28 <__udivmoddi4+0x11c>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <CLCD_Delay>:
******************************************************************************************************************/
#include "LCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fac1 	bl	8002360 <HAL_Delay>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af02      	add	r7, sp, #8
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70fb      	strb	r3, [r7, #3]
 8000df2:	4613      	mov	r3, r2
 8000df4:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	f023 030f 	bic.w	r3, r3, #15
 8000dfc:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7adb      	ldrb	r3, [r3, #11]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d007      	beq.n	8000e1c <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	f043 0308 	orr.w	r3, r3, #8
 8000e12:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 8000e14:	7bbb      	ldrb	r3, [r7, #14]
 8000e16:	f043 0308 	orr.w	r3, r3, #8
 8000e1a:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8000e1c:	78bb      	ldrb	r3, [r7, #2]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d108      	bne.n	8000e34 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	73bb      	strb	r3, [r7, #14]
 8000e32:	e00a      	b.n	8000e4a <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8000e34:	78bb      	ldrb	r3, [r7, #2]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d107      	bne.n	8000e4a <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	f023 0301 	bic.w	r3, r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8000e42:	7bbb      	ldrb	r3, [r7, #14]
 8000e44:	f023 0301 	bic.w	r3, r3, #1
 8000e48:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff ffb9 	bl	8000dcc <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff ffaf 	bl	8000dcc <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6818      	ldr	r0, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	791b      	ldrb	r3, [r3, #4]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f107 0208 	add.w	r2, r7, #8
 8000e80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2304      	movs	r3, #4
 8000e88:	f002 f956 	bl	8003138 <HAL_I2C_Master_Transmit>
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	79fa      	ldrb	r2, [r7, #7]
 8000eb4:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	79ba      	ldrb	r2, [r7, #6]
 8000eba:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	7e3a      	ldrb	r2, [r7, #24]
 8000ec0:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2228      	movs	r2, #40	@ 0x28
 8000ec6:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2206      	movs	r2, #6
 8000ecc:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	220c      	movs	r2, #12
 8000ed2:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2214      	movs	r2, #20
 8000ed8:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2208      	movs	r2, #8
 8000ede:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000ee0:	2032      	movs	r0, #50	@ 0x32
 8000ee2:	f7ff ff73 	bl	8000dcc <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2133      	movs	r1, #51	@ 0x33
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff ff7b 	bl	8000de6 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2133      	movs	r1, #51	@ 0x33
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff ff76 	bl	8000de6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000efa:	2005      	movs	r0, #5
 8000efc:	f7ff ff66 	bl	8000dcc <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2132      	movs	r1, #50	@ 0x32
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f7ff ff6e 	bl	8000de6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000f0a:	2005      	movs	r0, #5
 8000f0c:	f7ff ff5e 	bl	8000dcc <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2120      	movs	r1, #32
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f7ff ff66 	bl	8000de6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000f1a:	2005      	movs	r0, #5
 8000f1c:	f7ff ff56 	bl	8000dcc <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	79db      	ldrb	r3, [r3, #7]
 8000f24:	2200      	movs	r2, #0
 8000f26:	4619      	mov	r1, r3
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff ff5c 	bl	8000de6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	7a1b      	ldrb	r3, [r3, #8]
 8000f32:	2200      	movs	r2, #0
 8000f34:	4619      	mov	r1, r3
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f7ff ff55 	bl	8000de6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	7a5b      	ldrb	r3, [r3, #9]
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff ff4e 	bl	8000de6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	7a9b      	ldrb	r3, [r3, #10]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f7ff ff47 	bl	8000de6 <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f7ff ff42 	bl	8000de6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2102      	movs	r1, #2
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f7ff ff3d 	bl	8000de6 <CLCD_WriteI2C>
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
 8000f80:	4613      	mov	r3, r2
 8000f82:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	795b      	ldrb	r3, [r3, #5]
 8000f8c:	78fa      	ldrb	r2, [r7, #3]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d303      	bcc.n	8000f9a <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	799b      	ldrb	r3, [r3, #6]
 8000f9e:	78ba      	ldrb	r2, [r7, #2]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d303      	bcc.n	8000fac <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	799b      	ldrb	r3, [r3, #6]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000fac:	78bb      	ldrb	r3, [r7, #2]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d102      	bne.n	8000fb8 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	e013      	b.n	8000fe0 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000fb8:	78bb      	ldrb	r3, [r7, #2]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d103      	bne.n	8000fc6 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	3340      	adds	r3, #64	@ 0x40
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e00c      	b.n	8000fe0 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000fc6:	78bb      	ldrb	r3, [r7, #2]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d103      	bne.n	8000fd4 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	3314      	adds	r3, #20
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e005      	b.n	8000fe0 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000fd4:	78bb      	ldrb	r3, [r7, #2]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d102      	bne.n	8000fe0 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	3354      	adds	r3, #84	@ 0x54
 8000fde:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4619      	mov	r1, r3
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff fefa 	bl	8000de6 <CLCD_WriteI2C>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	2201      	movs	r2, #1
 800100a:	4619      	mov	r1, r3
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff feea 	bl	8000de6 <CLCD_WriteI2C>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 8001024:	e007      	b.n	8001036 <CLCD_I2C_WriteString+0x1c>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	603a      	str	r2, [r7, #0]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4619      	mov	r1, r3
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ffe2 	bl	8000ffa <CLCD_I2C_WriteChar>
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f3      	bne.n	8001026 <CLCD_I2C_WriteString+0xc>
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8001050:	2200      	movs	r2, #0
 8001052:	2101      	movs	r1, #1
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fec6 	bl	8000de6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800105a:	2005      	movs	r0, #5
 800105c:	f7ff feb6 	bl	8000dcc <CLCD_Delay>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <flash_unlock>:
 */

#include "flash.h"

void flash_unlock()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800106c:	f001 fad6 	bl	800261c <HAL_FLASH_Unlock>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <flash_lock>:

void flash_lock()
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  HAL_FLASH_Lock();
 8001078:	f001 faf2 	bl	8002660 <HAL_FLASH_Lock>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <flash_erease>:
void flash_erease(uint32_t sector)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.Sector = sector;  //This parameter must be a value of @ref FLASHEx_Sectors
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	617b      	str	r3, [r7, #20]
	eraseInit.NbSectors = 1;
 800108c:	2301      	movs	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
	eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
	eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001094:	2302      	movs	r3, #2
 8001096:	61fb      	str	r3, [r7, #28]
	uint32_t PageError;
	HAL_FLASHEx_Erase(&eraseInit,&PageError);
 8001098:	f107 0208 	add.w	r2, r7, #8
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fc2c 	bl	8002900 <HAL_FLASHEx_Erase>
}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <flash_write_arr>:
void flash_write_arr(uint32_t addr,uint8_t *data,uint16_t len)
{
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	4613      	mov	r3, r2
 80010bc:	80fb      	strh	r3, [r7, #6]
	 for(uint16_t i=0;i<len;i+=2)
 80010be:	2300      	movs	r3, #0
 80010c0:	82fb      	strh	r3, [r7, #22]
 80010c2:	e019      	b.n	80010f8 <flash_write_arr+0x48>
	{
		 HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr+i ,*(data + i) | (uint16_t)*(data+i+1)<<8);
 80010c4:	8afa      	ldrh	r2, [r7, #22]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	18d1      	adds	r1, r2, r3
 80010ca:	8afb      	ldrh	r3, [r7, #22]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	8afb      	ldrh	r3, [r7, #22]
 80010d6:	3301      	adds	r3, #1
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	4413      	add	r3, r2
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	4303      	orrs	r3, r0
 80010e2:	17da      	asrs	r2, r3, #31
 80010e4:	461c      	mov	r4, r3
 80010e6:	4615      	mov	r5, r2
 80010e8:	4622      	mov	r2, r4
 80010ea:	462b      	mov	r3, r5
 80010ec:	2001      	movs	r0, #1
 80010ee:	f001 fa41 	bl	8002574 <HAL_FLASH_Program>
	 for(uint16_t i=0;i<len;i+=2)
 80010f2:	8afb      	ldrh	r3, [r7, #22]
 80010f4:	3302      	adds	r3, #2
 80010f6:	82fb      	strh	r3, [r7, #22]
 80010f8:	8afa      	ldrh	r2, [r7, #22]
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d3e1      	bcc.n	80010c4 <flash_write_arr+0x14>
	 }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bdb0      	pop	{r4, r5, r7, pc}

0800110a <flash_read_arr>:
void flash_read_arr(uint32_t addr,uint8_t *data,uint16_t len)
{
 800110a:	b480      	push	{r7}
 800110c:	b089      	sub	sp, #36	@ 0x24
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	4613      	mov	r3, r2
 8001116:	80fb      	strh	r3, [r7, #6]
	 for(uint16_t i=0;i<len;i+=2){
 8001118:	2300      	movs	r3, #0
 800111a:	83fb      	strh	r3, [r7, #30]
 800111c:	e018      	b.n	8001150 <flash_read_arr+0x46>
		 volatile uint32_t *p= (volatile uint32_t *)(addr+i);
 800111e:	8bfa      	ldrh	r2, [r7, #30]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
		 uint16_t data_temp=*p;
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	82fb      	strh	r3, [r7, #22]
		 //cach 1
//		 data[i] = data_temp;
//		 data[i+1] = data_temp>>8;
		 //cach 2
		 *(data+i) = data_temp;
 800112c:	8bfb      	ldrh	r3, [r7, #30]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	4413      	add	r3, r2
 8001132:	8afa      	ldrh	r2, [r7, #22]
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	701a      	strb	r2, [r3, #0]
		 *(data+i+1) = data_temp>>8;
 8001138:	8afb      	ldrh	r3, [r7, #22]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	b299      	uxth	r1, r3
 800113e:	8bfb      	ldrh	r3, [r7, #30]
 8001140:	3301      	adds	r3, #1
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	4413      	add	r3, r2
 8001146:	b2ca      	uxtb	r2, r1
 8001148:	701a      	strb	r2, [r3, #0]
	 for(uint16_t i=0;i<len;i+=2){
 800114a:	8bfb      	ldrh	r3, [r7, #30]
 800114c:	3302      	adds	r3, #2
 800114e:	83fb      	strh	r3, [r7, #30]
 8001150:	8bfa      	ldrh	r2, [r7, #30]
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3e2      	bcc.n	800111e <flash_read_arr+0x14>
	 }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3724      	adds	r7, #36	@ 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <process_button_pad_value>:
 *
 */
#include "keypad.h"
//////////////////////button fuctions/////////////////////////////
uint16_t process_button_pad_value(uint16_t btn_pad_value)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
  static button_state_t btn_sm_state = NOT_PRESSED;
  static uint32_t curr_time = 0;

  switch(btn_sm_state){
 8001172:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <process_button_pad_value+0xb0>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d026      	beq.n	80011c8 <process_button_pad_value+0x60>
 800117a:	2b02      	cmp	r3, #2
 800117c:	dc47      	bgt.n	800120e <process_button_pad_value+0xa6>
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <process_button_pad_value+0x20>
 8001182:	2b01      	cmp	r3, #1
 8001184:	d00c      	beq.n	80011a0 <process_button_pad_value+0x38>
 8001186:	e042      	b.n	800120e <process_button_pad_value+0xa6>
    case NOT_PRESSED:{
      if(btn_pad_value){
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d03a      	beq.n	8001204 <process_button_pad_value+0x9c>
        btn_sm_state = BOUNCE;
 800118e:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <process_button_pad_value+0xb0>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
        curr_time = HAL_GetTick();
 8001194:	f001 f8d8 	bl	8002348 <HAL_GetTick>
 8001198:	4603      	mov	r3, r0
 800119a:	4a20      	ldr	r2, [pc, #128]	@ (800121c <process_button_pad_value+0xb4>)
 800119c:	6013      	str	r3, [r2, #0]
      }
      break;
 800119e:	e031      	b.n	8001204 <process_button_pad_value+0x9c>
    }
    case BOUNCE:{
      if(HAL_GetTick() - curr_time >= 50 ){
 80011a0:	f001 f8d2 	bl	8002348 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <process_button_pad_value+0xb4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b31      	cmp	r3, #49	@ 0x31
 80011ae:	d92b      	bls.n	8001208 <process_button_pad_value+0xa0>
        //50ms has passed
        if(btn_pad_value){
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <process_button_pad_value+0x58>
          btn_sm_state = PRESSED;
 80011b6:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <process_button_pad_value+0xb0>)
 80011b8:	2202      	movs	r2, #2
 80011ba:	701a      	strb	r2, [r3, #0]
          return btn_pad_value;
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	e027      	b.n	8001210 <process_button_pad_value+0xa8>
        }
        else
          btn_sm_state = NOT_PRESSED;
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <process_button_pad_value+0xb0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80011c6:	e01f      	b.n	8001208 <process_button_pad_value+0xa0>
    }
    case PRESSED:{
      if(!btn_pad_value){
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d108      	bne.n	80011e0 <process_button_pad_value+0x78>
        btn_sm_state = BOUNCE;
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <process_button_pad_value+0xb0>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
        curr_time = HAL_GetTick();
 80011d4:	f001 f8b8 	bl	8002348 <HAL_GetTick>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a10      	ldr	r2, [pc, #64]	@ (800121c <process_button_pad_value+0xb4>)
 80011dc:	6013      	str	r3, [r2, #0]
				if(HAL_GetTick() - curr_time >= 300 ){
					btn_sm_state = BOUNCE;
					curr_time = HAL_GetTick();
				}
			}
      break;
 80011de:	e015      	b.n	800120c <process_button_pad_value+0xa4>
				if(HAL_GetTick() - curr_time >= 300 ){
 80011e0:	f001 f8b2 	bl	8002348 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <process_button_pad_value+0xb4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80011f0:	d30c      	bcc.n	800120c <process_button_pad_value+0xa4>
					btn_sm_state = BOUNCE;
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <process_button_pad_value+0xb0>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
					curr_time = HAL_GetTick();
 80011f8:	f001 f8a6 	bl	8002348 <HAL_GetTick>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a07      	ldr	r2, [pc, #28]	@ (800121c <process_button_pad_value+0xb4>)
 8001200:	6013      	str	r3, [r2, #0]
      break;
 8001202:	e003      	b.n	800120c <process_button_pad_value+0xa4>
      break;
 8001204:	bf00      	nop
 8001206:	e002      	b.n	800120e <process_button_pad_value+0xa6>
      break;
 8001208:	bf00      	nop
 800120a:	e000      	b.n	800120e <process_button_pad_value+0xa6>
      break;
 800120c:	bf00      	nop
    }

  }

  return 0;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000094 	.word	0x20000094
 800121c:	20000098 	.word	0x20000098

08001220 <read_keypad>:


uint16_t read_keypad (void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
	uint16_t key_state = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	80fb      	strh	r3, [r7, #6]
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  //Pull the R1 low
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001230:	488d      	ldr	r0, [pc, #564]	@ (8001468 <read_keypad+0x248>)
 8001232:	f001 fe23 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800123c:	488a      	ldr	r0, [pc, #552]	@ (8001468 <read_keypad+0x248>)
 800123e:	f001 fe1d 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8001242:	2201      	movs	r2, #1
 8001244:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001248:	4887      	ldr	r0, [pc, #540]	@ (8001468 <read_keypad+0x248>)
 800124a:	f001 fe17 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 800124e:	2201      	movs	r2, #1
 8001250:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001254:	4884      	ldr	r0, [pc, #528]	@ (8001468 <read_keypad+0x248>)
 8001256:	f001 fe11 	bl	8002e7c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 800125a:	2140      	movs	r1, #64	@ 0x40
 800125c:	4883      	ldr	r0, [pc, #524]	@ (800146c <read_keypad+0x24c>)
 800125e:	f001 fdf5 	bl	8002e4c <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d103      	bne.n	8001270 <read_keypad+0x50>
	{
		key_state |= (1 << 0); // button 1
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8001270:	2180      	movs	r1, #128	@ 0x80
 8001272:	487e      	ldr	r0, [pc, #504]	@ (800146c <read_keypad+0x24c>)
 8001274:	f001 fdea 	bl	8002e4c <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <read_keypad+0x66>
	{
		key_state |= (1 << 1); // button 2
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8001286:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800128a:	4878      	ldr	r0, [pc, #480]	@ (800146c <read_keypad+0x24c>)
 800128c:	f001 fdde 	bl	8002e4c <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d103      	bne.n	800129e <read_keypad+0x7e>
	{
		key_state |= (1 << 2); // button 3
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 800129e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a2:	4872      	ldr	r0, [pc, #456]	@ (800146c <read_keypad+0x24c>)
 80012a4:	f001 fdd2 	bl	8002e4c <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d103      	bne.n	80012b6 <read_keypad+0x96>
	{
		key_state |= (1 << 3); // button A
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	80fb      	strh	r3, [r7, #6]
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012bc:	486a      	ldr	r0, [pc, #424]	@ (8001468 <read_keypad+0x248>)
 80012be:	f001 fddd 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Pull the R2 High
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012c8:	4867      	ldr	r0, [pc, #412]	@ (8001468 <read_keypad+0x248>)
 80012ca:	f001 fdd7 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012d4:	4864      	ldr	r0, [pc, #400]	@ (8001468 <read_keypad+0x248>)
 80012d6:	f001 fdd1 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012e0:	4861      	ldr	r0, [pc, #388]	@ (8001468 <read_keypad+0x248>)
 80012e2:	f001 fdcb 	bl	8002e7c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 80012e6:	2140      	movs	r1, #64	@ 0x40
 80012e8:	4860      	ldr	r0, [pc, #384]	@ (800146c <read_keypad+0x24c>)
 80012ea:	f001 fdaf 	bl	8002e4c <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d103      	bne.n	80012fc <read_keypad+0xdc>
	{
		key_state |= (1 << 4); // button 4
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 80012fc:	2180      	movs	r1, #128	@ 0x80
 80012fe:	485b      	ldr	r0, [pc, #364]	@ (800146c <read_keypad+0x24c>)
 8001300:	f001 fda4 	bl	8002e4c <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d103      	bne.n	8001312 <read_keypad+0xf2>
	{
		key_state |= (1 << 5); // button 5
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	f043 0320 	orr.w	r3, r3, #32
 8001310:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8001312:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001316:	4855      	ldr	r0, [pc, #340]	@ (800146c <read_keypad+0x24c>)
 8001318:	f001 fd98 	bl	8002e4c <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d103      	bne.n	800132a <read_keypad+0x10a>
	{
		key_state |= (1 << 6); // button 6
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001328:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 800132a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800132e:	484f      	ldr	r0, [pc, #316]	@ (800146c <read_keypad+0x24c>)
 8001330:	f001 fd8c 	bl	8002e4c <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d103      	bne.n	8001342 <read_keypad+0x122>
	{
		key_state |= (1 << 7); // button B
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001340:	80fb      	strh	r3, [r7, #6]
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001348:	4847      	ldr	r0, [pc, #284]	@ (8001468 <read_keypad+0x248>)
 800134a:	f001 fd97 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 800134e:	2201      	movs	r2, #1
 8001350:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001354:	4844      	ldr	r0, [pc, #272]	@ (8001468 <read_keypad+0x248>)
 8001356:	f001 fd91 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Pull the R3 High
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001360:	4841      	ldr	r0, [pc, #260]	@ (8001468 <read_keypad+0x248>)
 8001362:	f001 fd8b 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800136c:	483e      	ldr	r0, [pc, #248]	@ (8001468 <read_keypad+0x248>)
 800136e:	f001 fd85 	bl	8002e7c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8001372:	2140      	movs	r1, #64	@ 0x40
 8001374:	483d      	ldr	r0, [pc, #244]	@ (800146c <read_keypad+0x24c>)
 8001376:	f001 fd69 	bl	8002e4c <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d103      	bne.n	8001388 <read_keypad+0x168>
	{
		key_state |= (1 << 8); // button 7
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001386:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	4838      	ldr	r0, [pc, #224]	@ (800146c <read_keypad+0x24c>)
 800138c:	f001 fd5e 	bl	8002e4c <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d103      	bne.n	800139e <read_keypad+0x17e>
	{
		key_state |= (1 << 9); // button 8
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139c:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 800139e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013a2:	4832      	ldr	r0, [pc, #200]	@ (800146c <read_keypad+0x24c>)
 80013a4:	f001 fd52 	bl	8002e4c <HAL_GPIO_ReadPin>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d103      	bne.n	80013b6 <read_keypad+0x196>
	{
		key_state |= (1 << 10); // button 9
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013b4:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 80013b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013ba:	482c      	ldr	r0, [pc, #176]	@ (800146c <read_keypad+0x24c>)
 80013bc:	f001 fd46 	bl	8002e4c <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d103      	bne.n	80013ce <read_keypad+0x1ae>
	{
		key_state |= (1 << 11); // button C
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013cc:	80fb      	strh	r3, [r7, #6]
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013d4:	4824      	ldr	r0, [pc, #144]	@ (8001468 <read_keypad+0x248>)
 80013d6:	f001 fd51 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013e0:	4821      	ldr	r0, [pc, #132]	@ (8001468 <read_keypad+0x248>)
 80013e2:	f001 fd4b 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ec:	481e      	ldr	r0, [pc, #120]	@ (8001468 <read_keypad+0x248>)
 80013ee:	f001 fd45 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Pull the R4 High
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013f8:	481b      	ldr	r0, [pc, #108]	@ (8001468 <read_keypad+0x248>)
 80013fa:	f001 fd3f 	bl	8002e7c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 80013fe:	2140      	movs	r1, #64	@ 0x40
 8001400:	481a      	ldr	r0, [pc, #104]	@ (800146c <read_keypad+0x24c>)
 8001402:	f001 fd23 	bl	8002e4c <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d103      	bne.n	8001414 <read_keypad+0x1f4>
	{
		key_state |= (1 << 12); // button *
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001412:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8001414:	2180      	movs	r1, #128	@ 0x80
 8001416:	4815      	ldr	r0, [pc, #84]	@ (800146c <read_keypad+0x24c>)
 8001418:	f001 fd18 	bl	8002e4c <HAL_GPIO_ReadPin>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d103      	bne.n	800142a <read_keypad+0x20a>
	{
		key_state |= (1 << 13); // button 0
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001428:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 800142a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800142e:	480f      	ldr	r0, [pc, #60]	@ (800146c <read_keypad+0x24c>)
 8001430:	f001 fd0c 	bl	8002e4c <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <read_keypad+0x222>
	{
		key_state |= (1 << 14); // button #
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001440:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8001442:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001446:	4809      	ldr	r0, [pc, #36]	@ (800146c <read_keypad+0x24c>)
 8001448:	f001 fd00 	bl	8002e4c <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <read_keypad+0x23e>
	{
		key_state |= (1 << 15); // button D
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800145c:	80fb      	strh	r3, [r7, #6]
	}

	return key_state ;
 800145e:	88fb      	ldrh	r3, [r7, #6]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40020400 	.word	0x40020400
 800146c:	40020800 	.word	0x40020800

08001470 <delete_data>:
	uint16_t len;
}parameter_t;

parameter_t data;

void delete_data(parameter_t *data) {
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    if (data->len > 0) { // Kiểm tra xem có dữ liệu để xóa không
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	899b      	ldrh	r3, [r3, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00b      	beq.n	8001498 <delete_data+0x28>
        data->len--; // Giảm độ dài
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	899b      	ldrh	r3, [r3, #12]
 8001484:	3b01      	subs	r3, #1
 8001486:	b29a      	uxth	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	819a      	strh	r2, [r3, #12]
        data->payload[data->len] = '\0'; // �?ặt ký tự cuối thành '\0'
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	899b      	ldrh	r3, [r3, #12]
 8001490:	461a      	mov	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2100      	movs	r1, #0
 8001496:	5499      	strb	r1, [r3, r2]
    }
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <add_data>:

void add_data(parameter_t *data, char c) {
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
    if (data->len < 10) { // �?ảm bảo không vượt quá mảng
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	899b      	ldrh	r3, [r3, #12]
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	d811      	bhi.n	80014dc <add_data+0x38>
        data->payload[data->len] = c; // Thêm ký tự vào vị trí tiếp theo
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	899b      	ldrh	r3, [r3, #12]
 80014bc:	4619      	mov	r1, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	78fa      	ldrb	r2, [r7, #3]
 80014c2:	545a      	strb	r2, [r3, r1]
        data->len++;                   // Cập nhật độ dài
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	899b      	ldrh	r3, [r3, #12]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	819a      	strh	r2, [r3, #12]
        data->payload[data->len] = '\0'; // �?ảm bảo kết thúc chuỗi
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	899b      	ldrh	r3, [r3, #12]
 80014d4:	461a      	mov	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2100      	movs	r1, #0
 80014da:	5499      	strb	r1, [r3, r2]
    }
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ee:	f000 fec5 	bl	800227c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f2:	f000 fa77 	bl	80019e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f6:	f000 fb39 	bl	8001b6c <MX_GPIO_Init>
  MX_I2C1_Init();
 80014fa:	f000 fadf 	bl	8001abc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014fe:	f000 fb0b 	bl	8001b18 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CLCD_I2C_Init(&LCD1,&hi2c1,0x4e,20,4);
 8001502:	2304      	movs	r3, #4
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2314      	movs	r3, #20
 8001508:	224e      	movs	r2, #78	@ 0x4e
 800150a:	49bf      	ldr	r1, [pc, #764]	@ (8001808 <main+0x320>)
 800150c:	48bf      	ldr	r0, [pc, #764]	@ (800180c <main+0x324>)
 800150e:	f7ff fcc1 	bl	8000e94 <CLCD_I2C_Init>
  CLCD_I2C_SetCursor(&LCD1, 3, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2103      	movs	r1, #3
 8001516:	48bd      	ldr	r0, [pc, #756]	@ (800180c <main+0x324>)
 8001518:	f7ff fd2c 	bl	8000f74 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1, "ENTER PASSWORD");
 800151c:	49bc      	ldr	r1, [pc, #752]	@ (8001810 <main+0x328>)
 800151e:	48bb      	ldr	r0, [pc, #748]	@ (800180c <main+0x324>)
 8001520:	f7ff fd7b 	bl	800101a <CLCD_I2C_WriteString>

 //  write parameter into flash
     flash_unlock();
 8001524:	f7ff fda0 	bl	8001068 <flash_unlock>
     flash_erease(FLASH_SECTOR_7);
 8001528:	2007      	movs	r0, #7
 800152a:	f7ff fda9 	bl	8001080 <flash_erease>
     flash_write_arr(0x08060000,(uint8_t *)&parameter,sizeof(parameter));
 800152e:	220e      	movs	r2, #14
 8001530:	49b8      	ldr	r1, [pc, #736]	@ (8001814 <main+0x32c>)
 8001532:	48b9      	ldr	r0, [pc, #740]	@ (8001818 <main+0x330>)
 8001534:	f7ff fdbc 	bl	80010b0 <flash_write_arr>
     flash_lock();
 8001538:	f7ff fd9c 	bl	8001074 <flash_lock>

  // read parameter from flash
  flash_read_arr(0x08060000, (uint8_t*)&parameter_read, sizeof(parameter_read));
 800153c:	220e      	movs	r2, #14
 800153e:	49b7      	ldr	r1, [pc, #732]	@ (800181c <main+0x334>)
 8001540:	48b5      	ldr	r0, [pc, #724]	@ (8001818 <main+0x330>)
 8001542:	f7ff fde2 	bl	800110a <flash_read_arr>
  print_cli("s1:%d s2:%d s3:%d s4:%d\n",parameter_read.s1,parameter_read.t1,parameter_read.s2,parameter_read.t2);
 8001546:	4bb5      	ldr	r3, [pc, #724]	@ (800181c <main+0x334>)
 8001548:	7a9b      	ldrb	r3, [r3, #10]
 800154a:	4619      	mov	r1, r3
 800154c:	4bb3      	ldr	r3, [pc, #716]	@ (800181c <main+0x334>)
 800154e:	7adb      	ldrb	r3, [r3, #11]
 8001550:	461a      	mov	r2, r3
 8001552:	4bb2      	ldr	r3, [pc, #712]	@ (800181c <main+0x334>)
 8001554:	7b1b      	ldrb	r3, [r3, #12]
 8001556:	4618      	mov	r0, r3
 8001558:	4bb0      	ldr	r3, [pc, #704]	@ (800181c <main+0x334>)
 800155a:	7b5b      	ldrb	r3, [r3, #13]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	4603      	mov	r3, r0
 8001560:	48af      	ldr	r0, [pc, #700]	@ (8001820 <main+0x338>)
 8001562:	f000 fbab 	bl	8001cbc <print_cli>

  HAL_Delay(3000);
 8001566:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800156a:	f000 fef9 	bl	8002360 <HAL_Delay>
  parameter.s1 = 25;
 800156e:	4ba9      	ldr	r3, [pc, #676]	@ (8001814 <main+0x32c>)
 8001570:	2219      	movs	r2, #25
 8001572:	729a      	strb	r2, [r3, #10]
  parameter.t1 = 10;
 8001574:	4ba7      	ldr	r3, [pc, #668]	@ (8001814 <main+0x32c>)
 8001576:	220a      	movs	r2, #10
 8001578:	72da      	strb	r2, [r3, #11]
  parameter.s2 = 90;
 800157a:	4ba6      	ldr	r3, [pc, #664]	@ (8001814 <main+0x32c>)
 800157c:	225a      	movs	r2, #90	@ 0x5a
 800157e:	731a      	strb	r2, [r3, #12]
  parameter.t2 = 10;
 8001580:	4ba4      	ldr	r3, [pc, #656]	@ (8001814 <main+0x32c>)
 8001582:	220a      	movs	r2, #10
 8001584:	735a      	strb	r2, [r3, #13]

  flash_unlock();
 8001586:	f7ff fd6f 	bl	8001068 <flash_unlock>
  flash_erease(FLASH_SECTOR_7);
 800158a:	2007      	movs	r0, #7
 800158c:	f7ff fd78 	bl	8001080 <flash_erease>
  flash_write_arr(0x08060000,(uint8_t *)&parameter,sizeof(parameter));
 8001590:	220e      	movs	r2, #14
 8001592:	49a0      	ldr	r1, [pc, #640]	@ (8001814 <main+0x32c>)
 8001594:	48a0      	ldr	r0, [pc, #640]	@ (8001818 <main+0x330>)
 8001596:	f7ff fd8b 	bl	80010b0 <flash_write_arr>
  flash_lock();
 800159a:	f7ff fd6b 	bl	8001074 <flash_lock>
// read parameter from flash
flash_read_arr(0x08060000, (uint8_t*)&parameter_read, sizeof(parameter_read));
 800159e:	220e      	movs	r2, #14
 80015a0:	499e      	ldr	r1, [pc, #632]	@ (800181c <main+0x334>)
 80015a2:	489d      	ldr	r0, [pc, #628]	@ (8001818 <main+0x330>)
 80015a4:	f7ff fdb1 	bl	800110a <flash_read_arr>
print_cli("s1:%d s2:%d s3:%d s4:%d\n",parameter_read.s1,parameter_read.t1,parameter_read.s2,parameter_read.t2);
 80015a8:	4b9c      	ldr	r3, [pc, #624]	@ (800181c <main+0x334>)
 80015aa:	7a9b      	ldrb	r3, [r3, #10]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4b9b      	ldr	r3, [pc, #620]	@ (800181c <main+0x334>)
 80015b0:	7adb      	ldrb	r3, [r3, #11]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b99      	ldr	r3, [pc, #612]	@ (800181c <main+0x334>)
 80015b6:	7b1b      	ldrb	r3, [r3, #12]
 80015b8:	4618      	mov	r0, r3
 80015ba:	4b98      	ldr	r3, [pc, #608]	@ (800181c <main+0x334>)
 80015bc:	7b5b      	ldrb	r3, [r3, #13]
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4603      	mov	r3, r0
 80015c2:	4897      	ldr	r0, [pc, #604]	@ (8001820 <main+0x338>)
 80015c4:	f000 fb7a 	bl	8001cbc <print_cli>
SHT2x_Init(&hi2c1);
 80015c8:	488f      	ldr	r0, [pc, #572]	@ (8001808 <main+0x320>)
 80015ca:	f000 fb99 	bl	8001d00 <SHT2x_Init>
SHT2x_SetResolution(RES_14_12);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f000 fc3c 	bl	8001e4c <SHT2x_SetResolution>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	temperature = SHT2x_GetTemperature(1);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f000 fbf3 	bl	8001dc0 <SHT2x_GetTemperature>
 80015da:	eef0 7a40 	vmov.f32	s15, s0
 80015de:	4b91      	ldr	r3, [pc, #580]	@ (8001824 <main+0x33c>)
 80015e0:	edc3 7a00 	vstr	s15, [r3]
//    	sprintf(buffer, "S1:%d T1:%d S2:%d T2:%d Temp:%.2f\n", parameter_read.s1, parameter_read.t1, parameter_read.s2, parameter_read.t2,temperature);
  	print_cli("temperature: %d\n",temperature);
 80015e4:	4b8f      	ldr	r3, [pc, #572]	@ (8001824 <main+0x33c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffbd 	bl	8000568 <__aeabi_f2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	488d      	ldr	r0, [pc, #564]	@ (8001828 <main+0x340>)
 80015f4:	f000 fb62 	bl	8001cbc <print_cli>
  	HAL_Delay(1000);
 80015f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015fc:	f000 feb0 	bl	8002360 <HAL_Delay>
	  static parameter_t password = {{0},0};
	  uint16_t btn_value;
	  btn_value = process_button_pad_value(read_keypad());
 8001600:	f7ff fe0e 	bl	8001220 <read_keypad>
 8001604:	4603      	mov	r3, r0
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fdae 	bl	8001168 <process_button_pad_value>
 800160c:	4603      	mov	r3, r0
 800160e:	80fb      	strh	r3, [r7, #6]
	    	  if (btn_value) {
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0de      	beq.n	80015d4 <main+0xec>
					switch (btn_value) {
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800161c:	f000 819f 	beq.w	800195e <main+0x476>
 8001620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001624:	f300 81c9 	bgt.w	80019ba <main+0x4d2>
 8001628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800162c:	f000 8192 	beq.w	8001954 <main+0x46c>
 8001630:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001634:	f300 81c1 	bgt.w	80019ba <main+0x4d2>
 8001638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800163c:	f000 8175 	beq.w	800192a <main+0x442>
 8001640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001644:	f300 81b9 	bgt.w	80019ba <main+0x4d2>
 8001648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800164c:	f000 8168 	beq.w	8001920 <main+0x438>
 8001650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001654:	f300 81b1 	bgt.w	80019ba <main+0x4d2>
 8001658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800165c:	f000 813e 	beq.w	80018dc <main+0x3f4>
 8001660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001664:	f300 81a9 	bgt.w	80019ba <main+0x4d2>
 8001668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800166c:	f000 8121 	beq.w	80018b2 <main+0x3ca>
 8001670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001674:	f300 81a1 	bgt.w	80019ba <main+0x4d2>
 8001678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800167c:	f000 8104 	beq.w	8001888 <main+0x3a0>
 8001680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001684:	f300 8199 	bgt.w	80019ba <main+0x4d2>
 8001688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800168c:	f000 80e7 	beq.w	800185e <main+0x376>
 8001690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001694:	f300 8191 	bgt.w	80019ba <main+0x4d2>
 8001698:	2b20      	cmp	r3, #32
 800169a:	dc49      	bgt.n	8001730 <main+0x248>
 800169c:	2b00      	cmp	r3, #0
 800169e:	f340 818c 	ble.w	80019ba <main+0x4d2>
 80016a2:	3b01      	subs	r3, #1
 80016a4:	2b1f      	cmp	r3, #31
 80016a6:	f200 8188 	bhi.w	80019ba <main+0x4d2>
 80016aa:	a201      	add	r2, pc, #4	@ (adr r2, 80016b0 <main+0x1c8>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	08001737 	.word	0x08001737
 80016b4:	08001761 	.word	0x08001761
 80016b8:	080019bb 	.word	0x080019bb
 80016bc:	0800178b 	.word	0x0800178b
 80016c0:	080019bb 	.word	0x080019bb
 80016c4:	080019bb 	.word	0x080019bb
 80016c8:	080019bb 	.word	0x080019bb
 80016cc:	080019bb 	.word	0x080019bb
 80016d0:	080019bb 	.word	0x080019bb
 80016d4:	080019bb 	.word	0x080019bb
 80016d8:	080019bb 	.word	0x080019bb
 80016dc:	080019bb 	.word	0x080019bb
 80016e0:	080019bb 	.word	0x080019bb
 80016e4:	080019bb 	.word	0x080019bb
 80016e8:	080019bb 	.word	0x080019bb
 80016ec:	080017b5 	.word	0x080017b5
 80016f0:	080019bb 	.word	0x080019bb
 80016f4:	080019bb 	.word	0x080019bb
 80016f8:	080019bb 	.word	0x080019bb
 80016fc:	080019bb 	.word	0x080019bb
 8001700:	080019bb 	.word	0x080019bb
 8001704:	080019bb 	.word	0x080019bb
 8001708:	080019bb 	.word	0x080019bb
 800170c:	080019bb 	.word	0x080019bb
 8001710:	080019bb 	.word	0x080019bb
 8001714:	080019bb 	.word	0x080019bb
 8001718:	080019bb 	.word	0x080019bb
 800171c:	080019bb 	.word	0x080019bb
 8001720:	080019bb 	.word	0x080019bb
 8001724:	080019bb 	.word	0x080019bb
 8001728:	080019bb 	.word	0x080019bb
 800172c:	080017df 	.word	0x080017df
 8001730:	2b40      	cmp	r3, #64	@ 0x40
 8001732:	d07f      	beq.n	8001834 <main+0x34c>
								password.len = 0;  // reset length
							}
							 break;

						 default:
							 break;
 8001734:	e141      	b.n	80019ba <main+0x4d2>
							add_data(&password, '1');
 8001736:	2131      	movs	r1, #49	@ 0x31
 8001738:	483c      	ldr	r0, [pc, #240]	@ (800182c <main+0x344>)
 800173a:	f7ff feb3 	bl	80014a4 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 800173e:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <main+0x344>)
 8001740:	899b      	ldrh	r3, [r3, #12]
 8001742:	4a3a      	ldr	r2, [pc, #232]	@ (800182c <main+0x344>)
 8001744:	4619      	mov	r1, r3
 8001746:	483a      	ldr	r0, [pc, #232]	@ (8001830 <main+0x348>)
 8001748:	f003 fd12 	bl	8005170 <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800174c:	2201      	movs	r2, #1
 800174e:	2106      	movs	r1, #6
 8001750:	482e      	ldr	r0, [pc, #184]	@ (800180c <main+0x324>)
 8001752:	f7ff fc0f 	bl	8000f74 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8001756:	4935      	ldr	r1, [pc, #212]	@ (800182c <main+0x344>)
 8001758:	482c      	ldr	r0, [pc, #176]	@ (800180c <main+0x324>)
 800175a:	f7ff fc5e 	bl	800101a <CLCD_I2C_WriteString>
							break;
 800175e:	e12d      	b.n	80019bc <main+0x4d4>
							add_data(&password, '2');
 8001760:	2132      	movs	r1, #50	@ 0x32
 8001762:	4832      	ldr	r0, [pc, #200]	@ (800182c <main+0x344>)
 8001764:	f7ff fe9e 	bl	80014a4 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8001768:	4b30      	ldr	r3, [pc, #192]	@ (800182c <main+0x344>)
 800176a:	899b      	ldrh	r3, [r3, #12]
 800176c:	4a2f      	ldr	r2, [pc, #188]	@ (800182c <main+0x344>)
 800176e:	4619      	mov	r1, r3
 8001770:	482f      	ldr	r0, [pc, #188]	@ (8001830 <main+0x348>)
 8001772:	f003 fcfd 	bl	8005170 <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8001776:	2201      	movs	r2, #1
 8001778:	2106      	movs	r1, #6
 800177a:	4824      	ldr	r0, [pc, #144]	@ (800180c <main+0x324>)
 800177c:	f7ff fbfa 	bl	8000f74 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8001780:	492a      	ldr	r1, [pc, #168]	@ (800182c <main+0x344>)
 8001782:	4822      	ldr	r0, [pc, #136]	@ (800180c <main+0x324>)
 8001784:	f7ff fc49 	bl	800101a <CLCD_I2C_WriteString>
							break;
 8001788:	e118      	b.n	80019bc <main+0x4d4>
							add_data(&password, '3');
 800178a:	2133      	movs	r1, #51	@ 0x33
 800178c:	4827      	ldr	r0, [pc, #156]	@ (800182c <main+0x344>)
 800178e:	f7ff fe89 	bl	80014a4 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8001792:	4b26      	ldr	r3, [pc, #152]	@ (800182c <main+0x344>)
 8001794:	899b      	ldrh	r3, [r3, #12]
 8001796:	4a25      	ldr	r2, [pc, #148]	@ (800182c <main+0x344>)
 8001798:	4619      	mov	r1, r3
 800179a:	4825      	ldr	r0, [pc, #148]	@ (8001830 <main+0x348>)
 800179c:	f003 fce8 	bl	8005170 <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 80017a0:	2201      	movs	r2, #1
 80017a2:	2106      	movs	r1, #6
 80017a4:	4819      	ldr	r0, [pc, #100]	@ (800180c <main+0x324>)
 80017a6:	f7ff fbe5 	bl	8000f74 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80017aa:	4920      	ldr	r1, [pc, #128]	@ (800182c <main+0x344>)
 80017ac:	4817      	ldr	r0, [pc, #92]	@ (800180c <main+0x324>)
 80017ae:	f7ff fc34 	bl	800101a <CLCD_I2C_WriteString>
							break;
 80017b2:	e103      	b.n	80019bc <main+0x4d4>
							add_data(&password, '4');
 80017b4:	2134      	movs	r1, #52	@ 0x34
 80017b6:	481d      	ldr	r0, [pc, #116]	@ (800182c <main+0x344>)
 80017b8:	f7ff fe74 	bl	80014a4 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <main+0x344>)
 80017be:	899b      	ldrh	r3, [r3, #12]
 80017c0:	4a1a      	ldr	r2, [pc, #104]	@ (800182c <main+0x344>)
 80017c2:	4619      	mov	r1, r3
 80017c4:	481a      	ldr	r0, [pc, #104]	@ (8001830 <main+0x348>)
 80017c6:	f003 fcd3 	bl	8005170 <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2106      	movs	r1, #6
 80017ce:	480f      	ldr	r0, [pc, #60]	@ (800180c <main+0x324>)
 80017d0:	f7ff fbd0 	bl	8000f74 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80017d4:	4915      	ldr	r1, [pc, #84]	@ (800182c <main+0x344>)
 80017d6:	480d      	ldr	r0, [pc, #52]	@ (800180c <main+0x324>)
 80017d8:	f7ff fc1f 	bl	800101a <CLCD_I2C_WriteString>
							break;
 80017dc:	e0ee      	b.n	80019bc <main+0x4d4>
							add_data(&password, '5');
 80017de:	2135      	movs	r1, #53	@ 0x35
 80017e0:	4812      	ldr	r0, [pc, #72]	@ (800182c <main+0x344>)
 80017e2:	f7ff fe5f 	bl	80014a4 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <main+0x344>)
 80017e8:	899b      	ldrh	r3, [r3, #12]
 80017ea:	4a10      	ldr	r2, [pc, #64]	@ (800182c <main+0x344>)
 80017ec:	4619      	mov	r1, r3
 80017ee:	4810      	ldr	r0, [pc, #64]	@ (8001830 <main+0x348>)
 80017f0:	f003 fcbe 	bl	8005170 <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2106      	movs	r1, #6
 80017f8:	4804      	ldr	r0, [pc, #16]	@ (800180c <main+0x324>)
 80017fa:	f7ff fbbb 	bl	8000f74 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80017fe:	490b      	ldr	r1, [pc, #44]	@ (800182c <main+0x344>)
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <main+0x324>)
 8001802:	f7ff fc0a 	bl	800101a <CLCD_I2C_WriteString>
							break;
 8001806:	e0d9      	b.n	80019bc <main+0x4d4>
 8001808:	2000009c 	.word	0x2000009c
 800180c:	20000138 	.word	0x20000138
 8001810:	08006210 	.word	0x08006210
 8001814:	20000000 	.word	0x20000000
 8001818:	08060000 	.word	0x08060000
 800181c:	20000144 	.word	0x20000144
 8001820:	08006220 	.word	0x08006220
 8001824:	20000154 	.word	0x20000154
 8001828:	0800623c 	.word	0x0800623c
 800182c:	20000158 	.word	0x20000158
 8001830:	08006250 	.word	0x08006250
							add_data(&password, '6');
 8001834:	2136      	movs	r1, #54	@ 0x36
 8001836:	4862      	ldr	r0, [pc, #392]	@ (80019c0 <main+0x4d8>)
 8001838:	f7ff fe34 	bl	80014a4 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 800183c:	4b60      	ldr	r3, [pc, #384]	@ (80019c0 <main+0x4d8>)
 800183e:	899b      	ldrh	r3, [r3, #12]
 8001840:	4a5f      	ldr	r2, [pc, #380]	@ (80019c0 <main+0x4d8>)
 8001842:	4619      	mov	r1, r3
 8001844:	485f      	ldr	r0, [pc, #380]	@ (80019c4 <main+0x4dc>)
 8001846:	f003 fc93 	bl	8005170 <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800184a:	2201      	movs	r2, #1
 800184c:	2106      	movs	r1, #6
 800184e:	485e      	ldr	r0, [pc, #376]	@ (80019c8 <main+0x4e0>)
 8001850:	f7ff fb90 	bl	8000f74 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8001854:	495a      	ldr	r1, [pc, #360]	@ (80019c0 <main+0x4d8>)
 8001856:	485c      	ldr	r0, [pc, #368]	@ (80019c8 <main+0x4e0>)
 8001858:	f7ff fbdf 	bl	800101a <CLCD_I2C_WriteString>
							break;
 800185c:	e0ae      	b.n	80019bc <main+0x4d4>
							add_data(&password, '7');
 800185e:	2137      	movs	r1, #55	@ 0x37
 8001860:	4857      	ldr	r0, [pc, #348]	@ (80019c0 <main+0x4d8>)
 8001862:	f7ff fe1f 	bl	80014a4 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8001866:	4b56      	ldr	r3, [pc, #344]	@ (80019c0 <main+0x4d8>)
 8001868:	899b      	ldrh	r3, [r3, #12]
 800186a:	4a55      	ldr	r2, [pc, #340]	@ (80019c0 <main+0x4d8>)
 800186c:	4619      	mov	r1, r3
 800186e:	4855      	ldr	r0, [pc, #340]	@ (80019c4 <main+0x4dc>)
 8001870:	f003 fc7e 	bl	8005170 <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8001874:	2201      	movs	r2, #1
 8001876:	2106      	movs	r1, #6
 8001878:	4853      	ldr	r0, [pc, #332]	@ (80019c8 <main+0x4e0>)
 800187a:	f7ff fb7b 	bl	8000f74 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800187e:	4950      	ldr	r1, [pc, #320]	@ (80019c0 <main+0x4d8>)
 8001880:	4851      	ldr	r0, [pc, #324]	@ (80019c8 <main+0x4e0>)
 8001882:	f7ff fbca 	bl	800101a <CLCD_I2C_WriteString>
							break;
 8001886:	e099      	b.n	80019bc <main+0x4d4>
							add_data(&password, '8');
 8001888:	2138      	movs	r1, #56	@ 0x38
 800188a:	484d      	ldr	r0, [pc, #308]	@ (80019c0 <main+0x4d8>)
 800188c:	f7ff fe0a 	bl	80014a4 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8001890:	4b4b      	ldr	r3, [pc, #300]	@ (80019c0 <main+0x4d8>)
 8001892:	899b      	ldrh	r3, [r3, #12]
 8001894:	4a4a      	ldr	r2, [pc, #296]	@ (80019c0 <main+0x4d8>)
 8001896:	4619      	mov	r1, r3
 8001898:	484a      	ldr	r0, [pc, #296]	@ (80019c4 <main+0x4dc>)
 800189a:	f003 fc69 	bl	8005170 <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800189e:	2201      	movs	r2, #1
 80018a0:	2106      	movs	r1, #6
 80018a2:	4849      	ldr	r0, [pc, #292]	@ (80019c8 <main+0x4e0>)
 80018a4:	f7ff fb66 	bl	8000f74 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80018a8:	4945      	ldr	r1, [pc, #276]	@ (80019c0 <main+0x4d8>)
 80018aa:	4847      	ldr	r0, [pc, #284]	@ (80019c8 <main+0x4e0>)
 80018ac:	f7ff fbb5 	bl	800101a <CLCD_I2C_WriteString>
							break;
 80018b0:	e084      	b.n	80019bc <main+0x4d4>
							add_data(&password, '9');
 80018b2:	2139      	movs	r1, #57	@ 0x39
 80018b4:	4842      	ldr	r0, [pc, #264]	@ (80019c0 <main+0x4d8>)
 80018b6:	f7ff fdf5 	bl	80014a4 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 80018ba:	4b41      	ldr	r3, [pc, #260]	@ (80019c0 <main+0x4d8>)
 80018bc:	899b      	ldrh	r3, [r3, #12]
 80018be:	4a40      	ldr	r2, [pc, #256]	@ (80019c0 <main+0x4d8>)
 80018c0:	4619      	mov	r1, r3
 80018c2:	4840      	ldr	r0, [pc, #256]	@ (80019c4 <main+0x4dc>)
 80018c4:	f003 fc54 	bl	8005170 <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2106      	movs	r1, #6
 80018cc:	483e      	ldr	r0, [pc, #248]	@ (80019c8 <main+0x4e0>)
 80018ce:	f7ff fb51 	bl	8000f74 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80018d2:	493b      	ldr	r1, [pc, #236]	@ (80019c0 <main+0x4d8>)
 80018d4:	483c      	ldr	r0, [pc, #240]	@ (80019c8 <main+0x4e0>)
 80018d6:	f7ff fba0 	bl	800101a <CLCD_I2C_WriteString>
							break;
 80018da:	e06f      	b.n	80019bc <main+0x4d4>
							delete_data(&password);
 80018dc:	4838      	ldr	r0, [pc, #224]	@ (80019c0 <main+0x4d8>)
 80018de:	f7ff fdc7 	bl	8001470 <delete_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 80018e2:	4b37      	ldr	r3, [pc, #220]	@ (80019c0 <main+0x4d8>)
 80018e4:	899b      	ldrh	r3, [r3, #12]
 80018e6:	4a36      	ldr	r2, [pc, #216]	@ (80019c0 <main+0x4d8>)
 80018e8:	4619      	mov	r1, r3
 80018ea:	4836      	ldr	r0, [pc, #216]	@ (80019c4 <main+0x4dc>)
 80018ec:	f003 fc40 	bl	8005170 <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6+password.len, 1);
 80018f0:	4b33      	ldr	r3, [pc, #204]	@ (80019c0 <main+0x4d8>)
 80018f2:	899b      	ldrh	r3, [r3, #12]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	3306      	adds	r3, #6
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2201      	movs	r2, #1
 80018fc:	4619      	mov	r1, r3
 80018fe:	4832      	ldr	r0, [pc, #200]	@ (80019c8 <main+0x4e0>)
 8001900:	f7ff fb38 	bl	8000f74 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, " ");
 8001904:	4931      	ldr	r1, [pc, #196]	@ (80019cc <main+0x4e4>)
 8001906:	4830      	ldr	r0, [pc, #192]	@ (80019c8 <main+0x4e0>)
 8001908:	f7ff fb87 	bl	800101a <CLCD_I2C_WriteString>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	2106      	movs	r1, #6
 8001910:	482d      	ldr	r0, [pc, #180]	@ (80019c8 <main+0x4e0>)
 8001912:	f7ff fb2f 	bl	8000f74 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8001916:	492a      	ldr	r1, [pc, #168]	@ (80019c0 <main+0x4d8>)
 8001918:	482b      	ldr	r0, [pc, #172]	@ (80019c8 <main+0x4e0>)
 800191a:	f7ff fb7e 	bl	800101a <CLCD_I2C_WriteString>
							break;
 800191e:	e04d      	b.n	80019bc <main+0x4d4>
							 CLCD_I2C_WriteString(&LCD1, "*");
 8001920:	492b      	ldr	r1, [pc, #172]	@ (80019d0 <main+0x4e8>)
 8001922:	4829      	ldr	r0, [pc, #164]	@ (80019c8 <main+0x4e0>)
 8001924:	f7ff fb79 	bl	800101a <CLCD_I2C_WriteString>
							 break;
 8001928:	e048      	b.n	80019bc <main+0x4d4>
							add_data(&password, '0');
 800192a:	2130      	movs	r1, #48	@ 0x30
 800192c:	4824      	ldr	r0, [pc, #144]	@ (80019c0 <main+0x4d8>)
 800192e:	f7ff fdb9 	bl	80014a4 <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8001932:	4b23      	ldr	r3, [pc, #140]	@ (80019c0 <main+0x4d8>)
 8001934:	899b      	ldrh	r3, [r3, #12]
 8001936:	4a22      	ldr	r2, [pc, #136]	@ (80019c0 <main+0x4d8>)
 8001938:	4619      	mov	r1, r3
 800193a:	4822      	ldr	r0, [pc, #136]	@ (80019c4 <main+0x4dc>)
 800193c:	f003 fc18 	bl	8005170 <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8001940:	2201      	movs	r2, #1
 8001942:	2106      	movs	r1, #6
 8001944:	4820      	ldr	r0, [pc, #128]	@ (80019c8 <main+0x4e0>)
 8001946:	f7ff fb15 	bl	8000f74 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800194a:	491d      	ldr	r1, [pc, #116]	@ (80019c0 <main+0x4d8>)
 800194c:	481e      	ldr	r0, [pc, #120]	@ (80019c8 <main+0x4e0>)
 800194e:	f7ff fb64 	bl	800101a <CLCD_I2C_WriteString>
							 break;
 8001952:	e033      	b.n	80019bc <main+0x4d4>
							 CLCD_I2C_WriteString(&LCD1, "#");
 8001954:	491f      	ldr	r1, [pc, #124]	@ (80019d4 <main+0x4ec>)
 8001956:	481c      	ldr	r0, [pc, #112]	@ (80019c8 <main+0x4e0>)
 8001958:	f7ff fb5f 	bl	800101a <CLCD_I2C_WriteString>
							 break;
 800195c:	e02e      	b.n	80019bc <main+0x4d4>
							 if (strcmp((char*)password.payload, (char*)parameter_read.password) == 0)
 800195e:	491e      	ldr	r1, [pc, #120]	@ (80019d8 <main+0x4f0>)
 8001960:	4817      	ldr	r0, [pc, #92]	@ (80019c0 <main+0x4d8>)
 8001962:	f7fe fc3d 	bl	80001e0 <strcmp>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10c      	bne.n	8001986 <main+0x49e>
								CLCD_I2C_Clear(&LCD1);
 800196c:	4816      	ldr	r0, [pc, #88]	@ (80019c8 <main+0x4e0>)
 800196e:	f7ff fb6b 	bl	8001048 <CLCD_I2C_Clear>
								CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	4814      	ldr	r0, [pc, #80]	@ (80019c8 <main+0x4e0>)
 8001978:	f7ff fafc 	bl	8000f74 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1, "successful");
 800197c:	4917      	ldr	r1, [pc, #92]	@ (80019dc <main+0x4f4>)
 800197e:	4812      	ldr	r0, [pc, #72]	@ (80019c8 <main+0x4e0>)
 8001980:	f7ff fb4b 	bl	800101a <CLCD_I2C_WriteString>
							 break;
 8001984:	e01a      	b.n	80019bc <main+0x4d4>
								CLCD_I2C_Clear(&LCD1);
 8001986:	4810      	ldr	r0, [pc, #64]	@ (80019c8 <main+0x4e0>)
 8001988:	f7ff fb5e 	bl	8001048 <CLCD_I2C_Clear>
								CLCD_I2C_SetCursor(&LCD1, 3, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2103      	movs	r1, #3
 8001990:	480d      	ldr	r0, [pc, #52]	@ (80019c8 <main+0x4e0>)
 8001992:	f7ff faef 	bl	8000f74 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1, "ENTER PASSWORD");
 8001996:	4912      	ldr	r1, [pc, #72]	@ (80019e0 <main+0x4f8>)
 8001998:	480b      	ldr	r0, [pc, #44]	@ (80019c8 <main+0x4e0>)
 800199a:	f7ff fb3e 	bl	800101a <CLCD_I2C_WriteString>
								CLCD_I2C_SetCursor(&LCD1, 3, 1);
 800199e:	2201      	movs	r2, #1
 80019a0:	2103      	movs	r1, #3
 80019a2:	4809      	ldr	r0, [pc, #36]	@ (80019c8 <main+0x4e0>)
 80019a4:	f7ff fae6 	bl	8000f74 <CLCD_I2C_SetCursor>
								memset(password.payload, 0, sizeof(password.payload));  // reset data
 80019a8:	220b      	movs	r2, #11
 80019aa:	2100      	movs	r1, #0
 80019ac:	4804      	ldr	r0, [pc, #16]	@ (80019c0 <main+0x4d8>)
 80019ae:	f003 fc55 	bl	800525c <memset>
								password.len = 0;  // reset length
 80019b2:	4b03      	ldr	r3, [pc, #12]	@ (80019c0 <main+0x4d8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	819a      	strh	r2, [r3, #12]
							 break;
 80019b8:	e000      	b.n	80019bc <main+0x4d4>
							 break;
 80019ba:	bf00      	nop
  {
 80019bc:	e60a      	b.n	80015d4 <main+0xec>
 80019be:	bf00      	nop
 80019c0:	20000158 	.word	0x20000158
 80019c4:	08006250 	.word	0x08006250
 80019c8:	20000138 	.word	0x20000138
 80019cc:	08006264 	.word	0x08006264
 80019d0:	08006268 	.word	0x08006268
 80019d4:	0800626c 	.word	0x0800626c
 80019d8:	20000144 	.word	0x20000144
 80019dc:	08006270 	.word	0x08006270
 80019e0:	08006210 	.word	0x08006210

080019e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b094      	sub	sp, #80	@ 0x50
 80019e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ea:	f107 0320 	add.w	r3, r7, #32
 80019ee:	2230      	movs	r2, #48	@ 0x30
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fc32 	bl	800525c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <SystemClock_Config+0xd0>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	4a28      	ldr	r2, [pc, #160]	@ (8001ab4 <SystemClock_Config+0xd0>)
 8001a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a18:	4b26      	ldr	r3, [pc, #152]	@ (8001ab4 <SystemClock_Config+0xd0>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <SystemClock_Config+0xd4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a30:	4a21      	ldr	r2, [pc, #132]	@ (8001ab8 <SystemClock_Config+0xd4>)
 8001a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <SystemClock_Config+0xd4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a44:	2302      	movs	r3, #2
 8001a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a50:	2302      	movs	r3, #2
 8001a52:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a58:	2310      	movs	r3, #16
 8001a5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a5c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a62:	2304      	movs	r3, #4
 8001a64:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a66:	2307      	movs	r3, #7
 8001a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6a:	f107 0320 	add.w	r3, r7, #32
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fa18 	bl	8003ea4 <HAL_RCC_OscConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a7a:	f000 f919 	bl	8001cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7e:	230f      	movs	r3, #15
 8001a80:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a82:	2302      	movs	r3, #2
 8001a84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	2102      	movs	r1, #2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 fc7a 	bl	8004394 <HAL_RCC_ClockConfig>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001aa6:	f000 f903 	bl	8001cb0 <Error_Handler>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	3750      	adds	r7, #80	@ 0x50
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40007000 	.word	0x40007000

08001abc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ac2:	4a13      	ldr	r2, [pc, #76]	@ (8001b10 <MX_I2C1_Init+0x54>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ac8:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <MX_I2C1_Init+0x58>)
 8001aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ada:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ade:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aec:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001af8:	4804      	ldr	r0, [pc, #16]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001afa:	f001 f9d9 	bl	8002eb0 <HAL_I2C_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b04:	f000 f8d4 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000009c 	.word	0x2000009c
 8001b10:	40005400 	.word	0x40005400
 8001b14:	000186a0 	.word	0x000186a0

08001b18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <MX_USART1_UART_Init+0x50>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_USART1_UART_Init+0x4c>)
 8001b50:	f002 fe40 	bl	80047d4 <HAL_UART_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b5a:	f000 f8a9 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200000f0 	.word	0x200000f0
 8001b68:	40011000 	.word	0x40011000

08001b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b46      	ldr	r3, [pc, #280]	@ (8001ca0 <MX_GPIO_Init+0x134>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a45      	ldr	r2, [pc, #276]	@ (8001ca0 <MX_GPIO_Init+0x134>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b43      	ldr	r3, [pc, #268]	@ (8001ca0 <MX_GPIO_Init+0x134>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca0 <MX_GPIO_Init+0x134>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ca0 <MX_GPIO_Init+0x134>)
 8001ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bae:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca0 <MX_GPIO_Init+0x134>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b38      	ldr	r3, [pc, #224]	@ (8001ca0 <MX_GPIO_Init+0x134>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	4a37      	ldr	r2, [pc, #220]	@ (8001ca0 <MX_GPIO_Init+0x134>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bca:	4b35      	ldr	r3, [pc, #212]	@ (8001ca0 <MX_GPIO_Init+0x134>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b31      	ldr	r3, [pc, #196]	@ (8001ca0 <MX_GPIO_Init+0x134>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a30      	ldr	r2, [pc, #192]	@ (8001ca0 <MX_GPIO_Init+0x134>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca0 <MX_GPIO_Init+0x134>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2120      	movs	r1, #32
 8001bf6:	482b      	ldr	r0, [pc, #172]	@ (8001ca4 <MX_GPIO_Init+0x138>)
 8001bf8:	f001 f940 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001c02:	4829      	ldr	r0, [pc, #164]	@ (8001ca8 <MX_GPIO_Init+0x13c>)
 8001c04:	f001 f93a 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c0e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4823      	ldr	r0, [pc, #140]	@ (8001cac <MX_GPIO_Init+0x140>)
 8001c20:	f000 ff90 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c24:	230c      	movs	r3, #12
 8001c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c34:	2307      	movs	r3, #7
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4819      	ldr	r0, [pc, #100]	@ (8001ca4 <MX_GPIO_Init+0x138>)
 8001c40:	f000 ff80 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c44:	2320      	movs	r3, #32
 8001c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4812      	ldr	r0, [pc, #72]	@ (8001ca4 <MX_GPIO_Init+0x138>)
 8001c5c:	f000 ff72 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c60:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	480b      	ldr	r0, [pc, #44]	@ (8001ca8 <MX_GPIO_Init+0x13c>)
 8001c7a:	f000 ff63 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c7e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	4806      	ldr	r0, [pc, #24]	@ (8001cac <MX_GPIO_Init+0x140>)
 8001c94:	f000 ff56 	bl	8002b44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	@ 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <Error_Handler+0x8>

08001cbc <print_cli>:
#include "stdarg.h"
#include "stdio.h"
extern UART_HandleTypeDef huart1;

void print_cli(const char* str, ...)
{
 8001cbc:	b40f      	push	{r0, r1, r2, r3}
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b0a2      	sub	sp, #136	@ 0x88
 8001cc2:	af00      	add	r7, sp, #0
  char stringArray[128];
	
	va_list args;
	va_start(args,str);
 8001cc4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001cc8:	603b      	str	r3, [r7, #0]
	uint8_t len_str = vsprintf(stringArray,str,args);
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 fab8 	bl	8005248 <vsiprintf>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	va_end(args);
	
	HAL_UART_Transmit(&huart1,(uint8_t *)stringArray,len_str,200);
 8001cde:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	1d39      	adds	r1, r7, #4
 8001ce6:	23c8      	movs	r3, #200	@ 0xc8
 8001ce8:	4804      	ldr	r0, [pc, #16]	@ (8001cfc <print_cli+0x40>)
 8001cea:	f002 fdc3 	bl	8004874 <HAL_UART_Transmit>
}
 8001cee:	bf00      	nop
 8001cf0:	3788      	adds	r7, #136	@ 0x88
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cf8:	b004      	add	sp, #16
 8001cfa:	4770      	bx	lr
 8001cfc:	200000f0 	.word	0x200000f0

08001d00 <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 8001d08:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <SHT2x_Init+0x1c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000168 	.word	0x20000168

08001d20 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 8001d26:	23e7      	movs	r3, #231	@ 0xe7
 8001d28:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <SHT2x_ReadUserReg+0x3c>)
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	1dba      	adds	r2, r7, #6
 8001d30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2301      	movs	r3, #1
 8001d38:	2180      	movs	r1, #128	@ 0x80
 8001d3a:	f001 f9fd 	bl	8003138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <SHT2x_ReadUserReg+0x3c>)
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	1dfa      	adds	r2, r7, #7
 8001d44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	2180      	movs	r1, #128	@ 0x80
 8001d4e:	f001 faf1 	bl	8003334 <HAL_I2C_Master_Receive>
	return val;
 8001d52:	79fb      	ldrb	r3, [r7, #7]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000168 	.word	0x20000168

08001d60 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 8001d6a:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <SHT2x_GetRaw+0x58>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	81bb      	strh	r3, [r7, #12]
 8001d70:	2300      	movs	r3, #0
 8001d72:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <SHT2x_GetRaw+0x5c>)
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	1dfa      	adds	r2, r7, #7
 8001d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2301      	movs	r3, #1
 8001d82:	2180      	movs	r1, #128	@ 0x80
 8001d84:	f001 f9d8 	bl	8003138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 8001d88:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <SHT2x_GetRaw+0x5c>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	f107 020c 	add.w	r2, r7, #12
 8001d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2303      	movs	r3, #3
 8001d98:	2180      	movs	r1, #128	@ 0x80
 8001d9a:	f001 facb 	bl	8003334 <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 8001d9e:	7b3b      	ldrb	r3, [r7, #12]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	b21a      	sxth	r2, r3
 8001da4:	7b7b      	ldrb	r3, [r7, #13]
 8001da6:	b21b      	sxth	r3, r3
 8001da8:	4313      	orrs	r3, r2
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	b29b      	uxth	r3, r3
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	0800627c 	.word	0x0800627c
 8001dbc:	20000168 	.word	0x20000168

08001dc0 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <SHT2x_GetTemperature+0x14>
 8001dd0:	23e3      	movs	r3, #227	@ 0xe3
 8001dd2:	e000      	b.n	8001dd6 <SHT2x_GetTemperature+0x16>
 8001dd4:	23f3      	movs	r3, #243	@ 0xf3
 8001dd6:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ffc0 	bl	8001d60 <SHT2x_GetRaw>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fbae 	bl	8000544 <__aeabi_i2d>
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <SHT2x_GetTemperature+0x88>)
 8001dee:	f7fe fd3d 	bl	800086c <__aeabi_ddiv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	a30f      	add	r3, pc, #60	@ (adr r3, 8001e38 <SHT2x_GetTemperature+0x78>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fc0a 	bl	8000618 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	a30c      	add	r3, pc, #48	@ (adr r3, 8001e40 <SHT2x_GetTemperature+0x80>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe fa49 	bl	80002a8 <__aeabi_dsub>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe fe0d 	bl	8000a3c <__aeabi_d2f>
 8001e22:	4603      	mov	r3, r0
 8001e24:	ee07 3a90 	vmov	s15, r3
}
 8001e28:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	f3af 8000 	nop.w
 8001e38:	3d70a3d7 	.word	0x3d70a3d7
 8001e3c:	4065f70a 	.word	0x4065f70a
 8001e40:	cccccccd 	.word	0xcccccccd
 8001e44:	40476ccc 	.word	0x40476ccc
 8001e48:	40f00000 	.word	0x40f00000

08001e4c <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 8001e56:	f7ff ff63 	bl	8001d20 <SHT2x_ReadUserReg>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 8001e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e62:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001e66:	b25a      	sxtb	r2, r3
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 8001e72:	23e6      	movs	r3, #230	@ 0xe6
 8001e74:	733b      	strb	r3, [r7, #12]
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <SHT2x_SetResolution+0x4c>)
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	f107 020c 	add.w	r2, r7, #12
 8001e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2302      	movs	r3, #2
 8001e8a:	2180      	movs	r1, #128	@ 0x80
 8001e8c:	f001 f954 	bl	8003138 <HAL_I2C_Master_Transmit>
}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000168 	.word	0x20000168

08001e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <HAL_MspInit+0x4c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee8 <HAL_MspInit+0x4c>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <HAL_MspInit+0x4c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_MspInit+0x4c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	4a08      	ldr	r2, [pc, #32]	@ (8001ee8 <HAL_MspInit+0x4c>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_MspInit+0x4c>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001eda:	2007      	movs	r0, #7
 8001edc:	f000 fb16 	bl	800250c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800

08001eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a19      	ldr	r2, [pc, #100]	@ (8001f70 <HAL_I2C_MspInit+0x84>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d12b      	bne.n	8001f66 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f2a:	23c0      	movs	r3, #192	@ 0xc0
 8001f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f2e:	2312      	movs	r3, #18
 8001f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	480c      	ldr	r0, [pc, #48]	@ (8001f78 <HAL_I2C_MspInit+0x8c>)
 8001f46:	f000 fdfd 	bl	8002b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	4a08      	ldr	r2, [pc, #32]	@ (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	@ 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40005400 	.word	0x40005400
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020400 	.word	0x40020400

08001f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a19      	ldr	r2, [pc, #100]	@ (8002000 <HAL_UART_MspInit+0x84>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d12c      	bne.n	8001ff8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <HAL_UART_MspInit+0x88>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <HAL_UART_MspInit+0x88>)
 8001fa8:	f043 0310 	orr.w	r3, r3, #16
 8001fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <HAL_UART_MspInit+0x88>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <HAL_UART_MspInit+0x88>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a10      	ldr	r2, [pc, #64]	@ (8002004 <HAL_UART_MspInit+0x88>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_UART_MspInit+0x88>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fd6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fe8:	2307      	movs	r3, #7
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4805      	ldr	r0, [pc, #20]	@ (8002008 <HAL_UART_MspInit+0x8c>)
 8001ff4:	f000 fda6 	bl	8002b44 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	@ 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40011000 	.word	0x40011000
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000

0800200c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <NMI_Handler+0x4>

08002014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <HardFault_Handler+0x4>

0800201c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <MemManage_Handler+0x4>

08002024 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <BusFault_Handler+0x4>

0800202c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <UsageFault_Handler+0x4>

08002034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002062:	f000 f95d 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002076:	4b0f      	ldr	r3, [pc, #60]	@ (80020b4 <ITM_SendChar+0x48>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a0e      	ldr	r2, [pc, #56]	@ (80020b4 <ITM_SendChar+0x48>)
 800207c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002080:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <ITM_SendChar+0x4c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <ITM_SendChar+0x4c>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800208e:	bf00      	nop
 8002090:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f8      	beq.n	8002090 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800209e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	6013      	str	r3, [r2, #0]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000edfc 	.word	0xe000edfc
 80020b8:	e0000e00 	.word	0xe0000e00

080020bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	e00a      	b.n	80020e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ce:	f3af 8000 	nop.w
 80020d2:	4601      	mov	r1, r0
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60ba      	str	r2, [r7, #8]
 80020da:	b2ca      	uxtb	r2, r1
 80020dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	dbf0      	blt.n	80020ce <_read+0x12>
  }

  return len;
 80020ec:	687b      	ldr	r3, [r7, #4]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	e009      	b.n	800211c <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ffab 	bl	800206c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf1      	blt.n	8002108 <_write+0x12>
  }
  return len;
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_close>:

int _close(int file)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002156:	605a      	str	r2, [r3, #4]
  return 0;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_isatty>:

int _isatty(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800216e:	2301      	movs	r3, #1
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a0:	4a14      	ldr	r2, [pc, #80]	@ (80021f4 <_sbrk+0x5c>)
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <_sbrk+0x60>)
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ac:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <_sbrk+0x64>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <_sbrk+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d207      	bcs.n	80021d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c8:	f003 f896 	bl	80052f8 <__errno>
 80021cc:	4603      	mov	r3, r0
 80021ce:	220c      	movs	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	e009      	b.n	80021ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	4a05      	ldr	r2, [pc, #20]	@ (80021fc <_sbrk+0x64>)
 80021e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20018000 	.word	0x20018000
 80021f8:	00000400 	.word	0x00000400
 80021fc:	2000016c 	.word	0x2000016c
 8002200:	200002e0 	.word	0x200002e0

08002204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <SystemInit+0x20>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220e:	4a05      	ldr	r2, [pc, #20]	@ (8002224 <SystemInit+0x20>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002228:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002260 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800222c:	f7ff ffea 	bl	8002204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002230:	480c      	ldr	r0, [pc, #48]	@ (8002264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002232:	490d      	ldr	r1, [pc, #52]	@ (8002268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002234:	4a0d      	ldr	r2, [pc, #52]	@ (800226c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002238:	e002      	b.n	8002240 <LoopCopyDataInit>

0800223a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800223c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002246:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002248:	4c0a      	ldr	r4, [pc, #40]	@ (8002274 <LoopFillZerobss+0x22>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800224c:	e001      	b.n	8002252 <LoopFillZerobss>

0800224e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002250:	3204      	adds	r2, #4

08002252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002254:	d3fb      	bcc.n	800224e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002256:	f003 f855 	bl	8005304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225a:	f7ff f945 	bl	80014e8 <main>
  bx  lr    
 800225e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002260:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800226c:	080062dc 	.word	0x080062dc
  ldr r2, =_sbss
 8002270:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002274:	200002e0 	.word	0x200002e0

08002278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC_IRQHandler>
	...

0800227c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002280:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0d      	ldr	r2, [pc, #52]	@ (80022bc <HAL_Init+0x40>)
 8002286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800228a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800228c:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0a      	ldr	r2, [pc, #40]	@ (80022bc <HAL_Init+0x40>)
 8002292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	@ (80022bc <HAL_Init+0x40>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 f931 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f000 f808 	bl	80022c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b0:	f7ff fdf4 	bl	8001e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00

080022c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c8:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <HAL_InitTick+0x54>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <HAL_InitTick+0x58>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f93b 	bl	800255a <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f000 f911 	bl	8002522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002300:	4a06      	ldr	r2, [pc, #24]	@ (800231c <HAL_InitTick+0x5c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000010 	.word	0x20000010
 8002318:	20000018 	.word	0x20000018
 800231c:	20000014 	.word	0x20000014

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000018 	.word	0x20000018
 8002344:	20000170 	.word	0x20000170

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000170 	.word	0x20000170

08002360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff ffee 	bl	8002348 <HAL_GetTick>
 800236c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002386:	bf00      	nop
 8002388:	f7ff ffde 	bl	8002348 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
  {
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000018 	.word	0x20000018

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db0a      	blt.n	8002436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	490c      	ldr	r1, [pc, #48]	@ (8002458 <__NVIC_SetPriority+0x4c>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	440b      	add	r3, r1
 8002430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002434:	e00a      	b.n	800244c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4908      	ldr	r1, [pc, #32]	@ (800245c <__NVIC_SetPriority+0x50>)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3b04      	subs	r3, #4
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	440b      	add	r3, r1
 800244a:	761a      	strb	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	@ 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f1c3 0307 	rsb	r3, r3, #7
 800247a:	2b04      	cmp	r3, #4
 800247c:	bf28      	it	cs
 800247e:	2304      	movcs	r3, #4
 8002480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3304      	adds	r3, #4
 8002486:	2b06      	cmp	r3, #6
 8002488:	d902      	bls.n	8002490 <NVIC_EncodePriority+0x30>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3b03      	subs	r3, #3
 800248e:	e000      	b.n	8002492 <NVIC_EncodePriority+0x32>
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	401a      	ands	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	4313      	orrs	r3, r2
         );
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	@ 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f7ff ff8e 	bl	800240c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff47 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff5c 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff8e 	bl	8002460 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5d 	bl	800240c <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffb0 	bl	80024c8 <SysTick_Config>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002586:	4b23      	ldr	r3, [pc, #140]	@ (8002614 <HAL_FLASH_Program+0xa0>)
 8002588:	7e1b      	ldrb	r3, [r3, #24]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_FLASH_Program+0x1e>
 800258e:	2302      	movs	r3, #2
 8002590:	e03b      	b.n	800260a <HAL_FLASH_Program+0x96>
 8002592:	4b20      	ldr	r3, [pc, #128]	@ (8002614 <HAL_FLASH_Program+0xa0>)
 8002594:	2201      	movs	r2, #1
 8002596:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002598:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800259c:	f000 f870 	bl	8002680 <FLASH_WaitForLastOperation>
 80025a0:	4603      	mov	r3, r0
 80025a2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d12b      	bne.n	8002602 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80025b0:	783b      	ldrb	r3, [r7, #0]
 80025b2:	4619      	mov	r1, r3
 80025b4:	68b8      	ldr	r0, [r7, #8]
 80025b6:	f000 f91b 	bl	80027f0 <FLASH_Program_Byte>
 80025ba:	e016      	b.n	80025ea <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80025c2:	883b      	ldrh	r3, [r7, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	68b8      	ldr	r0, [r7, #8]
 80025c8:	f000 f8ee 	bl	80027a8 <FLASH_Program_HalfWord>
 80025cc:	e00d      	b.n	80025ea <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d105      	bne.n	80025e0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4619      	mov	r1, r3
 80025d8:	68b8      	ldr	r0, [r7, #8]
 80025da:	f000 f8c3 	bl	8002764 <FLASH_Program_Word>
 80025de:	e004      	b.n	80025ea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80025e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025e4:	68b8      	ldr	r0, [r7, #8]
 80025e6:	f000 f88b 	bl	8002700 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025ea:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80025ee:	f000 f847 	bl	8002680 <FLASH_WaitForLastOperation>
 80025f2:	4603      	mov	r3, r0
 80025f4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80025f6:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <HAL_FLASH_Program+0xa4>)
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	4a07      	ldr	r2, [pc, #28]	@ (8002618 <HAL_FLASH_Program+0xa4>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002602:	4b04      	ldr	r3, [pc, #16]	@ (8002614 <HAL_FLASH_Program+0xa0>)
 8002604:	2200      	movs	r2, #0
 8002606:	761a      	strb	r2, [r3, #24]

  return status;
 8002608:	7dfb      	ldrb	r3, [r7, #23]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000174 	.word	0x20000174
 8002618:	40023c00 	.word	0x40023c00

0800261c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <HAL_FLASH_Unlock+0x38>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b00      	cmp	r3, #0
 800262c:	da0b      	bge.n	8002646 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800262e:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <HAL_FLASH_Unlock+0x38>)
 8002630:	4a09      	ldr	r2, [pc, #36]	@ (8002658 <HAL_FLASH_Unlock+0x3c>)
 8002632:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002634:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <HAL_FLASH_Unlock+0x38>)
 8002636:	4a09      	ldr	r2, [pc, #36]	@ (800265c <HAL_FLASH_Unlock+0x40>)
 8002638:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <HAL_FLASH_Unlock+0x38>)
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	da01      	bge.n	8002646 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002646:	79fb      	ldrb	r3, [r7, #7]
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40023c00 	.word	0x40023c00
 8002658:	45670123 	.word	0x45670123
 800265c:	cdef89ab 	.word	0xcdef89ab

08002660 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <HAL_FLASH_Lock+0x1c>)
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	4a04      	ldr	r2, [pc, #16]	@ (800267c <HAL_FLASH_Lock+0x1c>)
 800266a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800266e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	40023c00 	.word	0x40023c00

08002680 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800268c:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <FLASH_WaitForLastOperation+0x78>)
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002692:	f7ff fe59 	bl	8002348 <HAL_GetTick>
 8002696:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002698:	e010      	b.n	80026bc <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d00c      	beq.n	80026bc <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <FLASH_WaitForLastOperation+0x38>
 80026a8:	f7ff fe4e 	bl	8002348 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d201      	bcs.n	80026bc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e019      	b.n	80026f0 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80026bc:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <FLASH_WaitForLastOperation+0x7c>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1e8      	bne.n	800269a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80026c8:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <FLASH_WaitForLastOperation+0x7c>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80026d4:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <FLASH_WaitForLastOperation+0x7c>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80026da:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <FLASH_WaitForLastOperation+0x7c>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80026e6:	f000 f8a5 	bl	8002834 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0

}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000174 	.word	0x20000174
 80026fc:	40023c00 	.word	0x40023c00

08002700 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800270c:	4b14      	ldr	r3, [pc, #80]	@ (8002760 <FLASH_Program_DoubleWord+0x60>)
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	4a13      	ldr	r2, [pc, #76]	@ (8002760 <FLASH_Program_DoubleWord+0x60>)
 8002712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002716:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <FLASH_Program_DoubleWord+0x60>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	4a10      	ldr	r2, [pc, #64]	@ (8002760 <FLASH_Program_DoubleWord+0x60>)
 800271e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002722:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002724:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <FLASH_Program_DoubleWord+0x60>)
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	4a0d      	ldr	r2, [pc, #52]	@ (8002760 <FLASH_Program_DoubleWord+0x60>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002736:	f3bf 8f6f 	isb	sy
}
 800273a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 800273c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	000a      	movs	r2, r1
 800274a:	2300      	movs	r3, #0
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	3104      	adds	r1, #4
 8002750:	4613      	mov	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	40023c00 	.word	0x40023c00

08002764 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800276e:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <FLASH_Program_Word+0x40>)
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	4a0c      	ldr	r2, [pc, #48]	@ (80027a4 <FLASH_Program_Word+0x40>)
 8002774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002778:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800277a:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <FLASH_Program_Word+0x40>)
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	4a09      	ldr	r2, [pc, #36]	@ (80027a4 <FLASH_Program_Word+0x40>)
 8002780:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002784:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002786:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <FLASH_Program_Word+0x40>)
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	4a06      	ldr	r2, [pc, #24]	@ (80027a4 <FLASH_Program_Word+0x40>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	601a      	str	r2, [r3, #0]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40023c00 	.word	0x40023c00

080027a8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027b4:	4b0d      	ldr	r3, [pc, #52]	@ (80027ec <FLASH_Program_HalfWord+0x44>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	4a0c      	ldr	r2, [pc, #48]	@ (80027ec <FLASH_Program_HalfWord+0x44>)
 80027ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80027c0:	4b0a      	ldr	r3, [pc, #40]	@ (80027ec <FLASH_Program_HalfWord+0x44>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	4a09      	ldr	r2, [pc, #36]	@ (80027ec <FLASH_Program_HalfWord+0x44>)
 80027c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80027cc:	4b07      	ldr	r3, [pc, #28]	@ (80027ec <FLASH_Program_HalfWord+0x44>)
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	4a06      	ldr	r2, [pc, #24]	@ (80027ec <FLASH_Program_HalfWord+0x44>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	801a      	strh	r2, [r3, #0]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00

080027f0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <FLASH_Program_Byte+0x40>)
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	4a0b      	ldr	r2, [pc, #44]	@ (8002830 <FLASH_Program_Byte+0x40>)
 8002802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002806:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002808:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <FLASH_Program_Byte+0x40>)
 800280a:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <FLASH_Program_Byte+0x40>)
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002810:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <FLASH_Program_Byte+0x40>)
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	4a06      	ldr	r2, [pc, #24]	@ (8002830 <FLASH_Program_Byte+0x40>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	701a      	strb	r2, [r3, #0]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00

08002834 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002838:	4b2f      	ldr	r3, [pc, #188]	@ (80028f8 <FLASH_SetErrorCode+0xc4>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002844:	4b2d      	ldr	r3, [pc, #180]	@ (80028fc <FLASH_SetErrorCode+0xc8>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f043 0310 	orr.w	r3, r3, #16
 800284c:	4a2b      	ldr	r2, [pc, #172]	@ (80028fc <FLASH_SetErrorCode+0xc8>)
 800284e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002850:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <FLASH_SetErrorCode+0xc4>)
 8002852:	2210      	movs	r2, #16
 8002854:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002856:	4b28      	ldr	r3, [pc, #160]	@ (80028f8 <FLASH_SetErrorCode+0xc4>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002862:	4b26      	ldr	r3, [pc, #152]	@ (80028fc <FLASH_SetErrorCode+0xc8>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f043 0308 	orr.w	r3, r3, #8
 800286a:	4a24      	ldr	r2, [pc, #144]	@ (80028fc <FLASH_SetErrorCode+0xc8>)
 800286c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800286e:	4b22      	ldr	r3, [pc, #136]	@ (80028f8 <FLASH_SetErrorCode+0xc4>)
 8002870:	2220      	movs	r2, #32
 8002872:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002874:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <FLASH_SetErrorCode+0xc4>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002880:	4b1e      	ldr	r3, [pc, #120]	@ (80028fc <FLASH_SetErrorCode+0xc8>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	4a1c      	ldr	r2, [pc, #112]	@ (80028fc <FLASH_SetErrorCode+0xc8>)
 800288a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800288c:	4b1a      	ldr	r3, [pc, #104]	@ (80028f8 <FLASH_SetErrorCode+0xc4>)
 800288e:	2240      	movs	r2, #64	@ 0x40
 8002890:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002892:	4b19      	ldr	r3, [pc, #100]	@ (80028f8 <FLASH_SetErrorCode+0xc4>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800289e:	4b17      	ldr	r3, [pc, #92]	@ (80028fc <FLASH_SetErrorCode+0xc8>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f043 0302 	orr.w	r3, r3, #2
 80028a6:	4a15      	ldr	r2, [pc, #84]	@ (80028fc <FLASH_SetErrorCode+0xc8>)
 80028a8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80028aa:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <FLASH_SetErrorCode+0xc4>)
 80028ac:	2280      	movs	r2, #128	@ 0x80
 80028ae:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <FLASH_SetErrorCode+0xc4>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d009      	beq.n	80028d0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	@ (80028fc <FLASH_SetErrorCode+0xc8>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	4a0d      	ldr	r2, [pc, #52]	@ (80028fc <FLASH_SetErrorCode+0xc8>)
 80028c6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <FLASH_SetErrorCode+0xc4>)
 80028ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80028d0:	4b09      	ldr	r3, [pc, #36]	@ (80028f8 <FLASH_SetErrorCode+0xc4>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80028dc:	4b07      	ldr	r3, [pc, #28]	@ (80028fc <FLASH_SetErrorCode+0xc8>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	f043 0320 	orr.w	r3, r3, #32
 80028e4:	4a05      	ldr	r2, [pc, #20]	@ (80028fc <FLASH_SetErrorCode+0xc8>)
 80028e6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80028e8:	4b03      	ldr	r3, [pc, #12]	@ (80028f8 <FLASH_SetErrorCode+0xc4>)
 80028ea:	2202      	movs	r2, #2
 80028ec:	60da      	str	r2, [r3, #12]
  }
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40023c00 	.word	0x40023c00
 80028fc:	20000174 	.word	0x20000174

08002900 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002912:	4b31      	ldr	r3, [pc, #196]	@ (80029d8 <HAL_FLASHEx_Erase+0xd8>)
 8002914:	7e1b      	ldrb	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_FLASHEx_Erase+0x1e>
 800291a:	2302      	movs	r3, #2
 800291c:	e058      	b.n	80029d0 <HAL_FLASHEx_Erase+0xd0>
 800291e:	4b2e      	ldr	r3, [pc, #184]	@ (80029d8 <HAL_FLASHEx_Erase+0xd8>)
 8002920:	2201      	movs	r2, #1
 8002922:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002924:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002928:	f7ff feaa 	bl	8002680 <FLASH_WaitForLastOperation>
 800292c:	4603      	mov	r3, r0
 800292e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d148      	bne.n	80029c8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d115      	bne.n	8002972 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4619      	mov	r1, r3
 8002952:	4610      	mov	r0, r2
 8002954:	f000 f844 	bl	80029e0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002958:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800295c:	f7ff fe90 	bl	8002680 <FLASH_WaitForLastOperation>
 8002960:	4603      	mov	r3, r0
 8002962:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002964:	4b1d      	ldr	r3, [pc, #116]	@ (80029dc <HAL_FLASHEx_Erase+0xdc>)
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	4a1c      	ldr	r2, [pc, #112]	@ (80029dc <HAL_FLASHEx_Erase+0xdc>)
 800296a:	f023 0304 	bic.w	r3, r3, #4
 800296e:	6113      	str	r3, [r2, #16]
 8002970:	e028      	b.n	80029c4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	e01c      	b.n	80029b4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	4619      	mov	r1, r3
 8002982:	68b8      	ldr	r0, [r7, #8]
 8002984:	f000 f850 	bl	8002a28 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002988:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800298c:	f7ff fe78 	bl	8002680 <FLASH_WaitForLastOperation>
 8002990:	4603      	mov	r3, r0
 8002992:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002994:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <HAL_FLASHEx_Erase+0xdc>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	4a10      	ldr	r2, [pc, #64]	@ (80029dc <HAL_FLASHEx_Erase+0xdc>)
 800299a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800299e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	601a      	str	r2, [r3, #0]
          break;
 80029ac:	e00a      	b.n	80029c4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	3301      	adds	r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4413      	add	r3, r2
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d3da      	bcc.n	800297a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80029c4:	f000 f878 	bl	8002ab8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029c8:	4b03      	ldr	r3, [pc, #12]	@ (80029d8 <HAL_FLASHEx_Erase+0xd8>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	761a      	strb	r2, [r3, #24]

  return status;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000174 	.word	0x20000174
 80029dc:	40023c00 	.word	0x40023c00

080029e0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	6039      	str	r1, [r7, #0]
 80029ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002a24 <FLASH_MassErase+0x44>)
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002a24 <FLASH_MassErase+0x44>)
 80029f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80029f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <FLASH_MassErase+0x44>)
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <FLASH_MassErase+0x44>)
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002a04:	4b07      	ldr	r3, [pc, #28]	@ (8002a24 <FLASH_MassErase+0x44>)
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	4a05      	ldr	r2, [pc, #20]	@ (8002a24 <FLASH_MassErase+0x44>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a14:	6113      	str	r3, [r2, #16]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40023c00 	.word	0x40023c00

08002a28 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e010      	b.n	8002a66 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d103      	bne.n	8002a52 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002a4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e009      	b.n	8002a66 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d103      	bne.n	8002a60 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002a58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e002      	b.n	8002a66 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002a60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a66:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <FLASH_Erase_Sector+0x8c>)
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	4a12      	ldr	r2, [pc, #72]	@ (8002ab4 <FLASH_Erase_Sector+0x8c>)
 8002a6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002a72:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <FLASH_Erase_Sector+0x8c>)
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	490f      	ldr	r1, [pc, #60]	@ (8002ab4 <FLASH_Erase_Sector+0x8c>)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab4 <FLASH_Erase_Sector+0x8c>)
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab4 <FLASH_Erase_Sector+0x8c>)
 8002a84:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002a88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab4 <FLASH_Erase_Sector+0x8c>)
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4313      	orrs	r3, r2
 8002a94:	4a07      	ldr	r2, [pc, #28]	@ (8002ab4 <FLASH_Erase_Sector+0x8c>)
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002a9c:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <FLASH_Erase_Sector+0x8c>)
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	4a04      	ldr	r2, [pc, #16]	@ (8002ab4 <FLASH_Erase_Sector+0x8c>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa6:	6113      	str	r3, [r2, #16]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40023c00 	.word	0x40023c00

08002ab8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002abc:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d017      	beq.n	8002af8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002ace:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ad2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a19      	ldr	r2, [pc, #100]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002ada:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b17      	ldr	r3, [pc, #92]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a16      	ldr	r2, [pc, #88]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002ae6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002aea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aec:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a13      	ldr	r2, [pc, #76]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002af2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002af6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002af8:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d017      	beq.n	8002b34 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002b04:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0d      	ldr	r2, [pc, #52]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002b0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b0e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002b16:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a07      	ldr	r2, [pc, #28]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002b22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b26:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b28:	4b05      	ldr	r3, [pc, #20]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	@ (8002b40 <FLASH_FlushCaches+0x88>)
 8002b2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b32:	6013      	str	r3, [r2, #0]
  }
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40023c00 	.word	0x40023c00

08002b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	@ 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	e159      	b.n	8002e14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	f040 8148 	bne.w	8002e0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d005      	beq.n	8002b96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d130      	bne.n	8002bf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bcc:	2201      	movs	r2, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 0201 	and.w	r2, r3, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d017      	beq.n	8002c34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d123      	bne.n	8002c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	08da      	lsrs	r2, r3, #3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3208      	adds	r2, #8
 8002c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	220f      	movs	r2, #15
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	08da      	lsrs	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3208      	adds	r2, #8
 8002c82:	69b9      	ldr	r1, [r7, #24]
 8002c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0203 	and.w	r2, r3, #3
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80a2 	beq.w	8002e0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	4b57      	ldr	r3, [pc, #348]	@ (8002e2c <HAL_GPIO_Init+0x2e8>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	4a56      	ldr	r2, [pc, #344]	@ (8002e2c <HAL_GPIO_Init+0x2e8>)
 8002cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cda:	4b54      	ldr	r3, [pc, #336]	@ (8002e2c <HAL_GPIO_Init+0x2e8>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ce6:	4a52      	ldr	r2, [pc, #328]	@ (8002e30 <HAL_GPIO_Init+0x2ec>)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	089b      	lsrs	r3, r3, #2
 8002cec:	3302      	adds	r3, #2
 8002cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	220f      	movs	r2, #15
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a49      	ldr	r2, [pc, #292]	@ (8002e34 <HAL_GPIO_Init+0x2f0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d019      	beq.n	8002d46 <HAL_GPIO_Init+0x202>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a48      	ldr	r2, [pc, #288]	@ (8002e38 <HAL_GPIO_Init+0x2f4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_GPIO_Init+0x1fe>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a47      	ldr	r2, [pc, #284]	@ (8002e3c <HAL_GPIO_Init+0x2f8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00d      	beq.n	8002d3e <HAL_GPIO_Init+0x1fa>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a46      	ldr	r2, [pc, #280]	@ (8002e40 <HAL_GPIO_Init+0x2fc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <HAL_GPIO_Init+0x1f6>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a45      	ldr	r2, [pc, #276]	@ (8002e44 <HAL_GPIO_Init+0x300>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_GPIO_Init+0x1f2>
 8002d32:	2304      	movs	r3, #4
 8002d34:	e008      	b.n	8002d48 <HAL_GPIO_Init+0x204>
 8002d36:	2307      	movs	r3, #7
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x204>
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e004      	b.n	8002d48 <HAL_GPIO_Init+0x204>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e002      	b.n	8002d48 <HAL_GPIO_Init+0x204>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_GPIO_Init+0x204>
 8002d46:	2300      	movs	r3, #0
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	f002 0203 	and.w	r2, r2, #3
 8002d4e:	0092      	lsls	r2, r2, #2
 8002d50:	4093      	lsls	r3, r2
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d58:	4935      	ldr	r1, [pc, #212]	@ (8002e30 <HAL_GPIO_Init+0x2ec>)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d66:	4b38      	ldr	r3, [pc, #224]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d90:	4b2d      	ldr	r3, [pc, #180]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db4:	4a24      	ldr	r2, [pc, #144]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dba:	4b23      	ldr	r3, [pc, #140]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dde:	4a1a      	ldr	r2, [pc, #104]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002de4:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e08:	4a0f      	ldr	r2, [pc, #60]	@ (8002e48 <HAL_GPIO_Init+0x304>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3301      	adds	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b0f      	cmp	r3, #15
 8002e18:	f67f aea2 	bls.w	8002b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	3724      	adds	r7, #36	@ 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40013800 	.word	0x40013800
 8002e34:	40020000 	.word	0x40020000
 8002e38:	40020400 	.word	0x40020400
 8002e3c:	40020800 	.word	0x40020800
 8002e40:	40020c00 	.word	0x40020c00
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40013c00 	.word	0x40013c00

08002e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	887b      	ldrh	r3, [r7, #2]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e001      	b.n	8002e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e8c:	787b      	ldrb	r3, [r7, #1]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e98:	e003      	b.n	8002ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	041a      	lsls	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	619a      	str	r2, [r3, #24]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e12b      	b.n	800311a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff f808 	bl	8001eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	@ 0x24
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f14:	f001 fc36 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8002f18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4a81      	ldr	r2, [pc, #516]	@ (8003124 <HAL_I2C_Init+0x274>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d807      	bhi.n	8002f34 <HAL_I2C_Init+0x84>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a80      	ldr	r2, [pc, #512]	@ (8003128 <HAL_I2C_Init+0x278>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	bf94      	ite	ls
 8002f2c:	2301      	movls	r3, #1
 8002f2e:	2300      	movhi	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e006      	b.n	8002f42 <HAL_I2C_Init+0x92>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a7d      	ldr	r2, [pc, #500]	@ (800312c <HAL_I2C_Init+0x27c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	bf94      	ite	ls
 8002f3c:	2301      	movls	r3, #1
 8002f3e:	2300      	movhi	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0e7      	b.n	800311a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4a78      	ldr	r2, [pc, #480]	@ (8003130 <HAL_I2C_Init+0x280>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	0c9b      	lsrs	r3, r3, #18
 8002f54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4a6a      	ldr	r2, [pc, #424]	@ (8003124 <HAL_I2C_Init+0x274>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d802      	bhi.n	8002f84 <HAL_I2C_Init+0xd4>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	3301      	adds	r3, #1
 8002f82:	e009      	b.n	8002f98 <HAL_I2C_Init+0xe8>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	4a69      	ldr	r2, [pc, #420]	@ (8003134 <HAL_I2C_Init+0x284>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	099b      	lsrs	r3, r3, #6
 8002f96:	3301      	adds	r3, #1
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002faa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	495c      	ldr	r1, [pc, #368]	@ (8003124 <HAL_I2C_Init+0x274>)
 8002fb4:	428b      	cmp	r3, r1
 8002fb6:	d819      	bhi.n	8002fec <HAL_I2C_Init+0x13c>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e59      	subs	r1, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc6:	1c59      	adds	r1, r3, #1
 8002fc8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fcc:	400b      	ands	r3, r1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_I2C_Init+0x138>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1e59      	subs	r1, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe6:	e051      	b.n	800308c <HAL_I2C_Init+0x1dc>
 8002fe8:	2304      	movs	r3, #4
 8002fea:	e04f      	b.n	800308c <HAL_I2C_Init+0x1dc>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d111      	bne.n	8003018 <HAL_I2C_Init+0x168>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1e58      	subs	r0, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e012      	b.n	800303e <HAL_I2C_Init+0x18e>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1e58      	subs	r0, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	0099      	lsls	r1, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	fbb0 f3f3 	udiv	r3, r0, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Init+0x196>
 8003042:	2301      	movs	r3, #1
 8003044:	e022      	b.n	800308c <HAL_I2C_Init+0x1dc>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10e      	bne.n	800306c <HAL_I2C_Init+0x1bc>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1e58      	subs	r0, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	440b      	add	r3, r1
 800305c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003060:	3301      	adds	r3, #1
 8003062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800306a:	e00f      	b.n	800308c <HAL_I2C_Init+0x1dc>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e58      	subs	r0, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	0099      	lsls	r1, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003082:	3301      	adds	r3, #1
 8003084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003088:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	6809      	ldr	r1, [r1, #0]
 8003090:	4313      	orrs	r3, r2
 8003092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6911      	ldr	r1, [r2, #16]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68d2      	ldr	r2, [r2, #12]
 80030c6:	4311      	orrs	r1, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	000186a0 	.word	0x000186a0
 8003128:	001e847f 	.word	0x001e847f
 800312c:	003d08ff 	.word	0x003d08ff
 8003130:	431bde83 	.word	0x431bde83
 8003134:	10624dd3 	.word	0x10624dd3

08003138 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	460b      	mov	r3, r1
 8003146:	817b      	strh	r3, [r7, #10]
 8003148:	4613      	mov	r3, r2
 800314a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800314c:	f7ff f8fc 	bl	8002348 <HAL_GetTick>
 8003150:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b20      	cmp	r3, #32
 800315c:	f040 80e0 	bne.w	8003320 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2319      	movs	r3, #25
 8003166:	2201      	movs	r2, #1
 8003168:	4970      	ldr	r1, [pc, #448]	@ (800332c <HAL_I2C_Master_Transmit+0x1f4>)
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fc64 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
 8003178:	e0d3      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_I2C_Master_Transmit+0x50>
 8003184:	2302      	movs	r3, #2
 8003186:	e0cc      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d007      	beq.n	80031ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0201 	orr.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2221      	movs	r2, #33	@ 0x21
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2210      	movs	r2, #16
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	893a      	ldrh	r2, [r7, #8]
 80031de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4a50      	ldr	r2, [pc, #320]	@ (8003330 <HAL_I2C_Master_Transmit+0x1f8>)
 80031ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031f0:	8979      	ldrh	r1, [r7, #10]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	6a3a      	ldr	r2, [r7, #32]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 face 	bl	8003798 <I2C_MasterRequestWrite>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e08d      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800321c:	e066      	b.n	80032ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	6a39      	ldr	r1, [r7, #32]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 fd22 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00d      	beq.n	800324a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	2b04      	cmp	r3, #4
 8003234:	d107      	bne.n	8003246 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003244:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e06b      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b04      	cmp	r3, #4
 8003286:	d11b      	bne.n	80032c0 <HAL_I2C_Master_Transmit+0x188>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328c:	2b00      	cmp	r3, #0
 800328e:	d017      	beq.n	80032c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	6a39      	ldr	r1, [r7, #32]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fd19 	bl	8003cfc <I2C_WaitOnBTFFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00d      	beq.n	80032ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d107      	bne.n	80032e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e01a      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d194      	bne.n	800321e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	00100002 	.word	0x00100002
 8003330:	ffff0000 	.word	0xffff0000

08003334 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	@ 0x30
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	461a      	mov	r2, r3
 8003340:	460b      	mov	r3, r1
 8003342:	817b      	strh	r3, [r7, #10]
 8003344:	4613      	mov	r3, r2
 8003346:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003348:	f7fe fffe 	bl	8002348 <HAL_GetTick>
 800334c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b20      	cmp	r3, #32
 8003358:	f040 8217 	bne.w	800378a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	2319      	movs	r3, #25
 8003362:	2201      	movs	r2, #1
 8003364:	497c      	ldr	r1, [pc, #496]	@ (8003558 <HAL_I2C_Master_Receive+0x224>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fb66 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003372:	2302      	movs	r3, #2
 8003374:	e20a      	b.n	800378c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_I2C_Master_Receive+0x50>
 8003380:	2302      	movs	r3, #2
 8003382:	e203      	b.n	800378c <HAL_I2C_Master_Receive+0x458>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d007      	beq.n	80033aa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2222      	movs	r2, #34	@ 0x22
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2210      	movs	r2, #16
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	893a      	ldrh	r2, [r7, #8]
 80033da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a5c      	ldr	r2, [pc, #368]	@ (800355c <HAL_I2C_Master_Receive+0x228>)
 80033ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033ec:	8979      	ldrh	r1, [r7, #10]
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fa52 	bl	800389c <I2C_MasterRequestRead>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e1c4      	b.n	800378c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d113      	bne.n	8003432 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	623b      	str	r3, [r7, #32]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	623b      	str	r3, [r7, #32]
 800341e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e198      	b.n	8003764 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003436:	2b01      	cmp	r3, #1
 8003438:	d11b      	bne.n	8003472 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e178      	b.n	8003764 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003476:	2b02      	cmp	r3, #2
 8003478:	d11b      	bne.n	80034b2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003488:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349a:	2300      	movs	r3, #0
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	e158      	b.n	8003764 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034d8:	e144      	b.n	8003764 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034de:	2b03      	cmp	r3, #3
 80034e0:	f200 80f1 	bhi.w	80036c6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d123      	bne.n	8003534 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fc4b 	bl	8003d8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e145      	b.n	800378c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003532:	e117      	b.n	8003764 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003538:	2b02      	cmp	r3, #2
 800353a:	d14e      	bne.n	80035da <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003542:	2200      	movs	r2, #0
 8003544:	4906      	ldr	r1, [pc, #24]	@ (8003560 <HAL_I2C_Master_Receive+0x22c>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fa76 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e11a      	b.n	800378c <HAL_I2C_Master_Receive+0x458>
 8003556:	bf00      	nop
 8003558:	00100002 	.word	0x00100002
 800355c:	ffff0000 	.word	0xffff0000
 8003560:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035d8:	e0c4      	b.n	8003764 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e0:	2200      	movs	r2, #0
 80035e2:	496c      	ldr	r1, [pc, #432]	@ (8003794 <HAL_I2C_Master_Receive+0x460>)
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fa27 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0cb      	b.n	800378c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363c:	2200      	movs	r2, #0
 800363e:	4955      	ldr	r1, [pc, #340]	@ (8003794 <HAL_I2C_Master_Receive+0x460>)
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f9f9 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e09d      	b.n	800378c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036c4:	e04e      	b.n	8003764 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fb5e 	bl	8003d8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e058      	b.n	800378c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b04      	cmp	r3, #4
 8003718:	d124      	bne.n	8003764 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371e:	2b03      	cmp	r3, #3
 8003720:	d107      	bne.n	8003732 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003730:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003768:	2b00      	cmp	r3, #0
 800376a:	f47f aeb6 	bne.w	80034da <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	e000      	b.n	800378c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800378a:	2302      	movs	r3, #2
  }
}
 800378c:	4618      	mov	r0, r3
 800378e:	3728      	adds	r7, #40	@ 0x28
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	00010004 	.word	0x00010004

08003798 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	460b      	mov	r3, r1
 80037a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d006      	beq.n	80037c2 <I2C_MasterRequestWrite+0x2a>
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d003      	beq.n	80037c2 <I2C_MasterRequestWrite+0x2a>
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037c0:	d108      	bne.n	80037d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	e00b      	b.n	80037ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d8:	2b12      	cmp	r3, #18
 80037da:	d107      	bne.n	80037ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f91d 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00d      	beq.n	8003820 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003812:	d103      	bne.n	800381c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800381a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e035      	b.n	800388c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003828:	d108      	bne.n	800383c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800382a:	897b      	ldrh	r3, [r7, #10]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003838:	611a      	str	r2, [r3, #16]
 800383a:	e01b      	b.n	8003874 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800383c:	897b      	ldrh	r3, [r7, #10]
 800383e:	11db      	asrs	r3, r3, #7
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f003 0306 	and.w	r3, r3, #6
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f063 030f 	orn	r3, r3, #15
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	490e      	ldr	r1, [pc, #56]	@ (8003894 <I2C_MasterRequestWrite+0xfc>)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f966 	bl	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e010      	b.n	800388c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800386a:	897b      	ldrh	r3, [r7, #10]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4907      	ldr	r1, [pc, #28]	@ (8003898 <I2C_MasterRequestWrite+0x100>)
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f956 	bl	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	00010008 	.word	0x00010008
 8003898:	00010002 	.word	0x00010002

0800389c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	460b      	mov	r3, r1
 80038aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d006      	beq.n	80038d6 <I2C_MasterRequestRead+0x3a>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d003      	beq.n	80038d6 <I2C_MasterRequestRead+0x3a>
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038d4:	d108      	bne.n	80038e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	e00b      	b.n	8003900 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	2b11      	cmp	r3, #17
 80038ee:	d107      	bne.n	8003900 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f893 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00d      	beq.n	8003934 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003926:	d103      	bne.n	8003930 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800392e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e079      	b.n	8003a28 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800393c:	d108      	bne.n	8003950 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800393e:	897b      	ldrh	r3, [r7, #10]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	611a      	str	r2, [r3, #16]
 800394e:	e05f      	b.n	8003a10 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003950:	897b      	ldrh	r3, [r7, #10]
 8003952:	11db      	asrs	r3, r3, #7
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f003 0306 	and.w	r3, r3, #6
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f063 030f 	orn	r3, r3, #15
 8003960:	b2da      	uxtb	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4930      	ldr	r1, [pc, #192]	@ (8003a30 <I2C_MasterRequestRead+0x194>)
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f8dc 	bl	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e054      	b.n	8003a28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800397e:	897b      	ldrh	r3, [r7, #10]
 8003980:	b2da      	uxtb	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4929      	ldr	r1, [pc, #164]	@ (8003a34 <I2C_MasterRequestRead+0x198>)
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f8cc 	bl	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e044      	b.n	8003a28 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f831 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00d      	beq.n	80039f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ea:	d103      	bne.n	80039f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039f2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e017      	b.n	8003a28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039f8:	897b      	ldrh	r3, [r7, #10]
 80039fa:	11db      	asrs	r3, r3, #7
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f003 0306 	and.w	r3, r3, #6
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f063 030e 	orn	r3, r3, #14
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	4907      	ldr	r1, [pc, #28]	@ (8003a34 <I2C_MasterRequestRead+0x198>)
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f888 	bl	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	00010008 	.word	0x00010008
 8003a34:	00010002 	.word	0x00010002

08003a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a48:	e048      	b.n	8003adc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d044      	beq.n	8003adc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a52:	f7fe fc79 	bl	8002348 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d302      	bcc.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d139      	bne.n	8003adc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	0c1b      	lsrs	r3, r3, #16
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d10d      	bne.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	43da      	mvns	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	e00c      	b.n	8003aa8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	43da      	mvns	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d116      	bne.n	8003adc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	f043 0220 	orr.w	r2, r3, #32
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e023      	b.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	0c1b      	lsrs	r3, r3, #16
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d10d      	bne.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	43da      	mvns	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4013      	ands	r3, r2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	e00c      	b.n	8003b1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	43da      	mvns	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d093      	beq.n	8003a4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b3a:	e071      	b.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b4a:	d123      	bne.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	f043 0204 	orr.w	r2, r3, #4
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e067      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d041      	beq.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9c:	f7fe fbd4 	bl	8002348 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d302      	bcc.n	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d136      	bne.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d10c      	bne.n	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	43da      	mvns	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	e00b      	b.n	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4013      	ands	r3, r2
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d016      	beq.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0c:	f043 0220 	orr.w	r2, r3, #32
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e021      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	0c1b      	lsrs	r3, r3, #16
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d10c      	bne.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	43da      	mvns	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4013      	ands	r3, r2
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	e00b      	b.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bf14      	ite	ne
 8003c56:	2301      	movne	r3, #1
 8003c58:	2300      	moveq	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f47f af6d 	bne.w	8003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c78:	e034      	b.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f8e3 	bl	8003e46 <I2C_IsAcknowledgeFailed>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e034      	b.n	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d028      	beq.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7fe fb59 	bl	8002348 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d11d      	bne.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb2:	2b80      	cmp	r3, #128	@ 0x80
 8003cb4:	d016      	beq.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd0:	f043 0220 	orr.w	r2, r3, #32
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e007      	b.n	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b80      	cmp	r3, #128	@ 0x80
 8003cf0:	d1c3      	bne.n	8003c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d08:	e034      	b.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f89b 	bl	8003e46 <I2C_IsAcknowledgeFailed>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e034      	b.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d028      	beq.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fe fb11 	bl	8002348 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d11d      	bne.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d016      	beq.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	f043 0220 	orr.w	r2, r3, #32
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e007      	b.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d1c3      	bne.n	8003d0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d98:	e049      	b.n	8003e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d119      	bne.n	8003ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0210 	mvn.w	r2, #16
 8003db0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e030      	b.n	8003e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ddc:	f7fe fab4 	bl	8002348 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d302      	bcc.n	8003df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d11d      	bne.n	8003e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfc:	2b40      	cmp	r3, #64	@ 0x40
 8003dfe:	d016      	beq.n	8003e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	f043 0220 	orr.w	r2, r3, #32
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e007      	b.n	8003e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e38:	2b40      	cmp	r3, #64	@ 0x40
 8003e3a:	d1ae      	bne.n	8003d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e5c:	d11b      	bne.n	8003e96 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e66:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	f043 0204 	orr.w	r2, r3, #4
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e267      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d075      	beq.n	8003fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ec2:	4b88      	ldr	r3, [pc, #544]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d00c      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ece:	4b85      	ldr	r3, [pc, #532]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d112      	bne.n	8003f00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eda:	4b82      	ldr	r3, [pc, #520]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ee2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ee6:	d10b      	bne.n	8003f00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	4b7e      	ldr	r3, [pc, #504]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d05b      	beq.n	8003fac <HAL_RCC_OscConfig+0x108>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d157      	bne.n	8003fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e242      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f08:	d106      	bne.n	8003f18 <HAL_RCC_OscConfig+0x74>
 8003f0a:	4b76      	ldr	r3, [pc, #472]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a75      	ldr	r2, [pc, #468]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e01d      	b.n	8003f54 <HAL_RCC_OscConfig+0xb0>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x98>
 8003f22:	4b70      	ldr	r3, [pc, #448]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a6f      	ldr	r2, [pc, #444]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6c      	ldr	r2, [pc, #432]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCC_OscConfig+0xb0>
 8003f3c:	4b69      	ldr	r3, [pc, #420]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a68      	ldr	r2, [pc, #416]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4b66      	ldr	r3, [pc, #408]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a65      	ldr	r2, [pc, #404]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d013      	beq.n	8003f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5c:	f7fe f9f4 	bl	8002348 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fe f9f0 	bl	8002348 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	@ 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e207      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	4b5b      	ldr	r3, [pc, #364]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0xc0>
 8003f82:	e014      	b.n	8003fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f84:	f7fe f9e0 	bl	8002348 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f8c:	f7fe f9dc 	bl	8002348 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	@ 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1f3      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9e:	4b51      	ldr	r3, [pc, #324]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0xe8>
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d063      	beq.n	8004082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fba:	4b4a      	ldr	r3, [pc, #296]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc6:	4b47      	ldr	r3, [pc, #284]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d11c      	bne.n	800400c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fd2:	4b44      	ldr	r3, [pc, #272]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d116      	bne.n	800400c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fde:	4b41      	ldr	r3, [pc, #260]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x152>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e1c7      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4937      	ldr	r1, [pc, #220]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	e03a      	b.n	8004082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d020      	beq.n	8004056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004014:	4b34      	ldr	r3, [pc, #208]	@ (80040e8 <HAL_RCC_OscConfig+0x244>)
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401a:	f7fe f995 	bl	8002348 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004022:	f7fe f991 	bl	8002348 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e1a8      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004034:	4b2b      	ldr	r3, [pc, #172]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004040:	4b28      	ldr	r3, [pc, #160]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4925      	ldr	r1, [pc, #148]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]
 8004054:	e015      	b.n	8004082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004056:	4b24      	ldr	r3, [pc, #144]	@ (80040e8 <HAL_RCC_OscConfig+0x244>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fe f974 	bl	8002348 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004064:	f7fe f970 	bl	8002348 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e187      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004076:	4b1b      	ldr	r3, [pc, #108]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d036      	beq.n	80040fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d016      	beq.n	80040c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004096:	4b15      	ldr	r3, [pc, #84]	@ (80040ec <HAL_RCC_OscConfig+0x248>)
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409c:	f7fe f954 	bl	8002348 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a4:	f7fe f950 	bl	8002348 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e167      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b6:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 80040b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x200>
 80040c2:	e01b      	b.n	80040fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c4:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <HAL_RCC_OscConfig+0x248>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ca:	f7fe f93d 	bl	8002348 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d0:	e00e      	b.n	80040f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d2:	f7fe f939 	bl	8002348 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d907      	bls.n	80040f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e150      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
 80040e4:	40023800 	.word	0x40023800
 80040e8:	42470000 	.word	0x42470000
 80040ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f0:	4b88      	ldr	r3, [pc, #544]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80040f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ea      	bne.n	80040d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8097 	beq.w	8004238 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410e:	4b81      	ldr	r3, [pc, #516]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10f      	bne.n	800413a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	4b7d      	ldr	r3, [pc, #500]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	4a7c      	ldr	r2, [pc, #496]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004128:	6413      	str	r3, [r2, #64]	@ 0x40
 800412a:	4b7a      	ldr	r3, [pc, #488]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413a:	4b77      	ldr	r3, [pc, #476]	@ (8004318 <HAL_RCC_OscConfig+0x474>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d118      	bne.n	8004178 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004146:	4b74      	ldr	r3, [pc, #464]	@ (8004318 <HAL_RCC_OscConfig+0x474>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a73      	ldr	r2, [pc, #460]	@ (8004318 <HAL_RCC_OscConfig+0x474>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004152:	f7fe f8f9 	bl	8002348 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415a:	f7fe f8f5 	bl	8002348 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e10c      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416c:	4b6a      	ldr	r3, [pc, #424]	@ (8004318 <HAL_RCC_OscConfig+0x474>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d106      	bne.n	800418e <HAL_RCC_OscConfig+0x2ea>
 8004180:	4b64      	ldr	r3, [pc, #400]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004184:	4a63      	ldr	r2, [pc, #396]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	6713      	str	r3, [r2, #112]	@ 0x70
 800418c:	e01c      	b.n	80041c8 <HAL_RCC_OscConfig+0x324>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b05      	cmp	r3, #5
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x30c>
 8004196:	4b5f      	ldr	r3, [pc, #380]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419a:	4a5e      	ldr	r2, [pc, #376]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0x324>
 80041b0:	4b58      	ldr	r3, [pc, #352]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b4:	4a57      	ldr	r2, [pc, #348]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80041bc:	4b55      	ldr	r3, [pc, #340]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c0:	4a54      	ldr	r2, [pc, #336]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041c2:	f023 0304 	bic.w	r3, r3, #4
 80041c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d015      	beq.n	80041fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fe f8ba 	bl	8002348 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d8:	f7fe f8b6 	bl	8002348 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e0cb      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ee:	4b49      	ldr	r3, [pc, #292]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ee      	beq.n	80041d8 <HAL_RCC_OscConfig+0x334>
 80041fa:	e014      	b.n	8004226 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fc:	f7fe f8a4 	bl	8002348 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fe f8a0 	bl	8002348 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0b5      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800421a:	4b3e      	ldr	r3, [pc, #248]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ee      	bne.n	8004204 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004226:	7dfb      	ldrb	r3, [r7, #23]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d105      	bne.n	8004238 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422c:	4b39      	ldr	r3, [pc, #228]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	4a38      	ldr	r2, [pc, #224]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004236:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80a1 	beq.w	8004384 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004242:	4b34      	ldr	r3, [pc, #208]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b08      	cmp	r3, #8
 800424c:	d05c      	beq.n	8004308 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d141      	bne.n	80042da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004256:	4b31      	ldr	r3, [pc, #196]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425c:	f7fe f874 	bl	8002348 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004264:	f7fe f870 	bl	8002348 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e087      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004276:	4b27      	ldr	r3, [pc, #156]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69da      	ldr	r2, [r3, #28]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	019b      	lsls	r3, r3, #6
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	3b01      	subs	r3, #1
 800429c:	041b      	lsls	r3, r3, #16
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	061b      	lsls	r3, r3, #24
 80042a6:	491b      	ldr	r1, [pc, #108]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ac:	4b1b      	ldr	r3, [pc, #108]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b2:	f7fe f849 	bl	8002348 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ba:	f7fe f845 	bl	8002348 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e05c      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042cc:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x416>
 80042d8:	e054      	b.n	8004384 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042da:	4b10      	ldr	r3, [pc, #64]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e0:	f7fe f832 	bl	8002348 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fe f82e 	bl	8002348 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e045      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fa:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x444>
 8004306:	e03d      	b.n	8004384 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d107      	bne.n	8004320 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e038      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
 8004314:	40023800 	.word	0x40023800
 8004318:	40007000 	.word	0x40007000
 800431c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004320:	4b1b      	ldr	r3, [pc, #108]	@ (8004390 <HAL_RCC_OscConfig+0x4ec>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d028      	beq.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004338:	429a      	cmp	r2, r3
 800433a:	d121      	bne.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d11a      	bne.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004350:	4013      	ands	r3, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004356:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004358:	4293      	cmp	r3, r2
 800435a:	d111      	bne.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	3b01      	subs	r3, #1
 800436a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d107      	bne.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800

08004394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0cc      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a8:	4b68      	ldr	r3, [pc, #416]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d90c      	bls.n	80043d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b65      	ldr	r3, [pc, #404]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b63      	ldr	r3, [pc, #396]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0b8      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d020      	beq.n	800441e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e8:	4b59      	ldr	r3, [pc, #356]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4a58      	ldr	r2, [pc, #352]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004400:	4b53      	ldr	r3, [pc, #332]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a52      	ldr	r2, [pc, #328]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800440a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800440c:	4b50      	ldr	r3, [pc, #320]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	494d      	ldr	r1, [pc, #308]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d044      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d107      	bne.n	8004442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	4b47      	ldr	r3, [pc, #284]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d119      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e07f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d003      	beq.n	8004452 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800444e:	2b03      	cmp	r3, #3
 8004450:	d107      	bne.n	8004462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004452:	4b3f      	ldr	r3, [pc, #252]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e06f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004462:	4b3b      	ldr	r3, [pc, #236]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e067      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004472:	4b37      	ldr	r3, [pc, #220]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 0203 	bic.w	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4934      	ldr	r1, [pc, #208]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	4313      	orrs	r3, r2
 8004482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004484:	f7fd ff60 	bl	8002348 <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448c:	f7fd ff5c 	bl	8002348 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e04f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 020c 	and.w	r2, r3, #12
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d1eb      	bne.n	800448c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044b4:	4b25      	ldr	r3, [pc, #148]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d20c      	bcs.n	80044dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c2:	4b22      	ldr	r3, [pc, #136]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b20      	ldr	r3, [pc, #128]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e032      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e8:	4b19      	ldr	r3, [pc, #100]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4916      	ldr	r1, [pc, #88]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004506:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	490e      	ldr	r1, [pc, #56]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800451a:	f000 f821 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 800451e:	4602      	mov	r2, r0
 8004520:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	091b      	lsrs	r3, r3, #4
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	490a      	ldr	r1, [pc, #40]	@ (8004554 <HAL_RCC_ClockConfig+0x1c0>)
 800452c:	5ccb      	ldrb	r3, [r1, r3]
 800452e:	fa22 f303 	lsr.w	r3, r2, r3
 8004532:	4a09      	ldr	r2, [pc, #36]	@ (8004558 <HAL_RCC_ClockConfig+0x1c4>)
 8004534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004536:	4b09      	ldr	r3, [pc, #36]	@ (800455c <HAL_RCC_ClockConfig+0x1c8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fd fec0 	bl	80022c0 <HAL_InitTick>

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40023c00 	.word	0x40023c00
 8004550:	40023800 	.word	0x40023800
 8004554:	08006280 	.word	0x08006280
 8004558:	20000010 	.word	0x20000010
 800455c:	20000014 	.word	0x20000014

08004560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004564:	b094      	sub	sp, #80	@ 0x50
 8004566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004578:	4b79      	ldr	r3, [pc, #484]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x200>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b08      	cmp	r3, #8
 8004582:	d00d      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004584:	2b08      	cmp	r3, #8
 8004586:	f200 80e1 	bhi.w	800474c <HAL_RCC_GetSysClockFreq+0x1ec>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x34>
 800458e:	2b04      	cmp	r3, #4
 8004590:	d003      	beq.n	800459a <HAL_RCC_GetSysClockFreq+0x3a>
 8004592:	e0db      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4b73      	ldr	r3, [pc, #460]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x204>)
 8004596:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004598:	e0db      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800459a:	4b73      	ldr	r3, [pc, #460]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x208>)
 800459c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800459e:	e0d8      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x200>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045aa:	4b6d      	ldr	r3, [pc, #436]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d063      	beq.n	800467e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	099b      	lsrs	r3, r3, #6
 80045bc:	2200      	movs	r2, #0
 80045be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ca:	2300      	movs	r3, #0
 80045cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80045d2:	4622      	mov	r2, r4
 80045d4:	462b      	mov	r3, r5
 80045d6:	f04f 0000 	mov.w	r0, #0
 80045da:	f04f 0100 	mov.w	r1, #0
 80045de:	0159      	lsls	r1, r3, #5
 80045e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e4:	0150      	lsls	r0, r2, #5
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4621      	mov	r1, r4
 80045ec:	1a51      	subs	r1, r2, r1
 80045ee:	6139      	str	r1, [r7, #16]
 80045f0:	4629      	mov	r1, r5
 80045f2:	eb63 0301 	sbc.w	r3, r3, r1
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004604:	4659      	mov	r1, fp
 8004606:	018b      	lsls	r3, r1, #6
 8004608:	4651      	mov	r1, sl
 800460a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800460e:	4651      	mov	r1, sl
 8004610:	018a      	lsls	r2, r1, #6
 8004612:	4651      	mov	r1, sl
 8004614:	ebb2 0801 	subs.w	r8, r2, r1
 8004618:	4659      	mov	r1, fp
 800461a:	eb63 0901 	sbc.w	r9, r3, r1
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800462a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800462e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004632:	4690      	mov	r8, r2
 8004634:	4699      	mov	r9, r3
 8004636:	4623      	mov	r3, r4
 8004638:	eb18 0303 	adds.w	r3, r8, r3
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	462b      	mov	r3, r5
 8004640:	eb49 0303 	adc.w	r3, r9, r3
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004652:	4629      	mov	r1, r5
 8004654:	024b      	lsls	r3, r1, #9
 8004656:	4621      	mov	r1, r4
 8004658:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800465c:	4621      	mov	r1, r4
 800465e:	024a      	lsls	r2, r1, #9
 8004660:	4610      	mov	r0, r2
 8004662:	4619      	mov	r1, r3
 8004664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004666:	2200      	movs	r2, #0
 8004668:	62bb      	str	r3, [r7, #40]	@ 0x28
 800466a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800466c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004670:	f7fc fa34 	bl	8000adc <__aeabi_uldivmod>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4613      	mov	r3, r2
 800467a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800467c:	e058      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467e:	4b38      	ldr	r3, [pc, #224]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x200>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	099b      	lsrs	r3, r3, #6
 8004684:	2200      	movs	r2, #0
 8004686:	4618      	mov	r0, r3
 8004688:	4611      	mov	r1, r2
 800468a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	2300      	movs	r3, #0
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
 8004694:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004698:	4642      	mov	r2, r8
 800469a:	464b      	mov	r3, r9
 800469c:	f04f 0000 	mov.w	r0, #0
 80046a0:	f04f 0100 	mov.w	r1, #0
 80046a4:	0159      	lsls	r1, r3, #5
 80046a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046aa:	0150      	lsls	r0, r2, #5
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4641      	mov	r1, r8
 80046b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80046b6:	4649      	mov	r1, r9
 80046b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046d0:	ebb2 040a 	subs.w	r4, r2, sl
 80046d4:	eb63 050b 	sbc.w	r5, r3, fp
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	00eb      	lsls	r3, r5, #3
 80046e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046e6:	00e2      	lsls	r2, r4, #3
 80046e8:	4614      	mov	r4, r2
 80046ea:	461d      	mov	r5, r3
 80046ec:	4643      	mov	r3, r8
 80046ee:	18e3      	adds	r3, r4, r3
 80046f0:	603b      	str	r3, [r7, #0]
 80046f2:	464b      	mov	r3, r9
 80046f4:	eb45 0303 	adc.w	r3, r5, r3
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004706:	4629      	mov	r1, r5
 8004708:	028b      	lsls	r3, r1, #10
 800470a:	4621      	mov	r1, r4
 800470c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004710:	4621      	mov	r1, r4
 8004712:	028a      	lsls	r2, r1, #10
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800471a:	2200      	movs	r2, #0
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	61fa      	str	r2, [r7, #28]
 8004720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004724:	f7fc f9da 	bl	8000adc <__aeabi_uldivmod>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4613      	mov	r3, r2
 800472e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004730:	4b0b      	ldr	r3, [pc, #44]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x200>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	3301      	adds	r3, #1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004740:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800474a:	e002      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800474c:	4b05      	ldr	r3, [pc, #20]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x204>)
 800474e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004754:	4618      	mov	r0, r3
 8004756:	3750      	adds	r7, #80	@ 0x50
 8004758:	46bd      	mov	sp, r7
 800475a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800475e:	bf00      	nop
 8004760:	40023800 	.word	0x40023800
 8004764:	00f42400 	.word	0x00f42400
 8004768:	007a1200 	.word	0x007a1200

0800476c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004770:	4b03      	ldr	r3, [pc, #12]	@ (8004780 <HAL_RCC_GetHCLKFreq+0x14>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000010 	.word	0x20000010

08004784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004788:	f7ff fff0 	bl	800476c <HAL_RCC_GetHCLKFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0a9b      	lsrs	r3, r3, #10
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4903      	ldr	r1, [pc, #12]	@ (80047a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40023800 	.word	0x40023800
 80047a8:	08006290 	.word	0x08006290

080047ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047b0:	f7ff ffdc 	bl	800476c <HAL_RCC_GetHCLKFreq>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b05      	ldr	r3, [pc, #20]	@ (80047cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	0b5b      	lsrs	r3, r3, #13
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	4903      	ldr	r1, [pc, #12]	@ (80047d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047c2:	5ccb      	ldrb	r3, [r1, r3]
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40023800 	.word	0x40023800
 80047d0:	08006290 	.word	0x08006290

080047d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e042      	b.n	800486c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fd fbbe 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2224      	movs	r2, #36	@ 0x24
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f973 	bl	8004b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800482c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800483c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800484c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08a      	sub	sp, #40	@ 0x28
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b20      	cmp	r3, #32
 8004892:	d175      	bne.n	8004980 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_UART_Transmit+0x2c>
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e06e      	b.n	8004982 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2221      	movs	r2, #33	@ 0x21
 80048ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048b2:	f7fd fd49 	bl	8002348 <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	88fa      	ldrh	r2, [r7, #6]
 80048bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048cc:	d108      	bne.n	80048e0 <HAL_UART_Transmit+0x6c>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d104      	bne.n	80048e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	e003      	b.n	80048e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048e8:	e02e      	b.n	8004948 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2200      	movs	r2, #0
 80048f2:	2180      	movs	r1, #128	@ 0x80
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f848 	bl	800498a <UART_WaitOnFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e03a      	b.n	8004982 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10b      	bne.n	800492a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	3302      	adds	r3, #2
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	e007      	b.n	800493a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	781a      	ldrb	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1cb      	bne.n	80048ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2200      	movs	r2, #0
 800495a:	2140      	movs	r1, #64	@ 0x40
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f814 	bl	800498a <UART_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e006      	b.n	8004982 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	e000      	b.n	8004982 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004980:	2302      	movs	r3, #2
  }
}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b086      	sub	sp, #24
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	4613      	mov	r3, r2
 8004998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499a:	e03b      	b.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d037      	beq.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a4:	f7fd fcd0 	bl	8002348 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	6a3a      	ldr	r2, [r7, #32]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d302      	bcc.n	80049ba <UART_WaitOnFlagUntilTimeout+0x30>
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e03a      	b.n	8004a34 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d023      	beq.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b80      	cmp	r3, #128	@ 0x80
 80049d0:	d020      	beq.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b40      	cmp	r3, #64	@ 0x40
 80049d6:	d01d      	beq.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d116      	bne.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f81d 	bl	8004a3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2208      	movs	r2, #8
 8004a06:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e00f      	b.n	8004a34 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d0b4      	beq.n	800499c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b095      	sub	sp, #84	@ 0x54
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a64:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e5      	bne.n	8004a44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3314      	adds	r3, #20
 8004a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f023 0301 	bic.w	r3, r3, #1
 8004a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3314      	adds	r3, #20
 8004a96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e5      	bne.n	8004a78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d119      	bne.n	8004ae8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f023 0310 	bic.w	r3, r3, #16
 8004aca:	647b      	str	r3, [r7, #68]	@ 0x44
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ad4:	61ba      	str	r2, [r7, #24]
 8004ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	6979      	ldr	r1, [r7, #20]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e5      	bne.n	8004ab4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004af6:	bf00      	nop
 8004af8:	3754      	adds	r7, #84	@ 0x54
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b08:	b0c0      	sub	sp, #256	@ 0x100
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b20:	68d9      	ldr	r1, [r3, #12]
 8004b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	ea40 0301 	orr.w	r3, r0, r1
 8004b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b5c:	f021 010c 	bic.w	r1, r1, #12
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7e:	6999      	ldr	r1, [r3, #24]
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	ea40 0301 	orr.w	r3, r0, r1
 8004b8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b8f      	ldr	r3, [pc, #572]	@ (8004dd0 <UART_SetConfig+0x2cc>)
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d005      	beq.n	8004ba4 <UART_SetConfig+0xa0>
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8004dd4 <UART_SetConfig+0x2d0>)
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d104      	bne.n	8004bae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ba4:	f7ff fe02 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
 8004ba8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bac:	e003      	b.n	8004bb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bae:	f7ff fde9 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8004bb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bc0:	f040 810c 	bne.w	8004ddc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	1891      	adds	r1, r2, r2
 8004bdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bde:	415b      	adcs	r3, r3
 8004be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004be2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004be6:	4621      	mov	r1, r4
 8004be8:	eb12 0801 	adds.w	r8, r2, r1
 8004bec:	4629      	mov	r1, r5
 8004bee:	eb43 0901 	adc.w	r9, r3, r1
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c06:	4690      	mov	r8, r2
 8004c08:	4699      	mov	r9, r3
 8004c0a:	4623      	mov	r3, r4
 8004c0c:	eb18 0303 	adds.w	r3, r8, r3
 8004c10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c14:	462b      	mov	r3, r5
 8004c16:	eb49 0303 	adc.w	r3, r9, r3
 8004c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c32:	460b      	mov	r3, r1
 8004c34:	18db      	adds	r3, r3, r3
 8004c36:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c38:	4613      	mov	r3, r2
 8004c3a:	eb42 0303 	adc.w	r3, r2, r3
 8004c3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c48:	f7fb ff48 	bl	8000adc <__aeabi_uldivmod>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4b61      	ldr	r3, [pc, #388]	@ (8004dd8 <UART_SetConfig+0x2d4>)
 8004c52:	fba3 2302 	umull	r2, r3, r3, r2
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	011c      	lsls	r4, r3, #4
 8004c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	464b      	mov	r3, r9
 8004c70:	1891      	adds	r1, r2, r2
 8004c72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c74:	415b      	adcs	r3, r3
 8004c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	eb12 0a01 	adds.w	sl, r2, r1
 8004c82:	4649      	mov	r1, r9
 8004c84:	eb43 0b01 	adc.w	fp, r3, r1
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c9c:	4692      	mov	sl, r2
 8004c9e:	469b      	mov	fp, r3
 8004ca0:	4643      	mov	r3, r8
 8004ca2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004caa:	464b      	mov	r3, r9
 8004cac:	eb4b 0303 	adc.w	r3, fp, r3
 8004cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004cc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	18db      	adds	r3, r3, r3
 8004ccc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cce:	4613      	mov	r3, r2
 8004cd0:	eb42 0303 	adc.w	r3, r2, r3
 8004cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cde:	f7fb fefd 	bl	8000adc <__aeabi_uldivmod>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd8 <UART_SetConfig+0x2d4>)
 8004cea:	fba3 2301 	umull	r2, r3, r3, r1
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2264      	movs	r2, #100	@ 0x64
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	1acb      	subs	r3, r1, r3
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cfe:	4b36      	ldr	r3, [pc, #216]	@ (8004dd8 <UART_SetConfig+0x2d4>)
 8004d00:	fba3 2302 	umull	r2, r3, r3, r2
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d0c:	441c      	add	r4, r3
 8004d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d20:	4642      	mov	r2, r8
 8004d22:	464b      	mov	r3, r9
 8004d24:	1891      	adds	r1, r2, r2
 8004d26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d28:	415b      	adcs	r3, r3
 8004d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d30:	4641      	mov	r1, r8
 8004d32:	1851      	adds	r1, r2, r1
 8004d34:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d36:	4649      	mov	r1, r9
 8004d38:	414b      	adcs	r3, r1
 8004d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d48:	4659      	mov	r1, fp
 8004d4a:	00cb      	lsls	r3, r1, #3
 8004d4c:	4651      	mov	r1, sl
 8004d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d52:	4651      	mov	r1, sl
 8004d54:	00ca      	lsls	r2, r1, #3
 8004d56:	4610      	mov	r0, r2
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	189b      	adds	r3, r3, r2
 8004d60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d64:	464b      	mov	r3, r9
 8004d66:	460a      	mov	r2, r1
 8004d68:	eb42 0303 	adc.w	r3, r2, r3
 8004d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d84:	460b      	mov	r3, r1
 8004d86:	18db      	adds	r3, r3, r3
 8004d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	eb42 0303 	adc.w	r3, r2, r3
 8004d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d9a:	f7fb fe9f 	bl	8000adc <__aeabi_uldivmod>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd8 <UART_SetConfig+0x2d4>)
 8004da4:	fba3 1302 	umull	r1, r3, r3, r2
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	2164      	movs	r1, #100	@ 0x64
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	3332      	adds	r3, #50	@ 0x32
 8004db6:	4a08      	ldr	r2, [pc, #32]	@ (8004dd8 <UART_SetConfig+0x2d4>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	095b      	lsrs	r3, r3, #5
 8004dbe:	f003 0207 	and.w	r2, r3, #7
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4422      	add	r2, r4
 8004dca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dcc:	e106      	b.n	8004fdc <UART_SetConfig+0x4d8>
 8004dce:	bf00      	nop
 8004dd0:	40011000 	.word	0x40011000
 8004dd4:	40011400 	.word	0x40011400
 8004dd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004de0:	2200      	movs	r2, #0
 8004de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004de6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004dea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004dee:	4642      	mov	r2, r8
 8004df0:	464b      	mov	r3, r9
 8004df2:	1891      	adds	r1, r2, r2
 8004df4:	6239      	str	r1, [r7, #32]
 8004df6:	415b      	adcs	r3, r3
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dfe:	4641      	mov	r1, r8
 8004e00:	1854      	adds	r4, r2, r1
 8004e02:	4649      	mov	r1, r9
 8004e04:	eb43 0501 	adc.w	r5, r3, r1
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	00eb      	lsls	r3, r5, #3
 8004e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e16:	00e2      	lsls	r2, r4, #3
 8004e18:	4614      	mov	r4, r2
 8004e1a:	461d      	mov	r5, r3
 8004e1c:	4643      	mov	r3, r8
 8004e1e:	18e3      	adds	r3, r4, r3
 8004e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e24:	464b      	mov	r3, r9
 8004e26:	eb45 0303 	adc.w	r3, r5, r3
 8004e2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	008b      	lsls	r3, r1, #2
 8004e4e:	4621      	mov	r1, r4
 8004e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e54:	4621      	mov	r1, r4
 8004e56:	008a      	lsls	r2, r1, #2
 8004e58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e5c:	f7fb fe3e 	bl	8000adc <__aeabi_uldivmod>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4b60      	ldr	r3, [pc, #384]	@ (8004fe8 <UART_SetConfig+0x4e4>)
 8004e66:	fba3 2302 	umull	r2, r3, r3, r2
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	011c      	lsls	r4, r3, #4
 8004e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e80:	4642      	mov	r2, r8
 8004e82:	464b      	mov	r3, r9
 8004e84:	1891      	adds	r1, r2, r2
 8004e86:	61b9      	str	r1, [r7, #24]
 8004e88:	415b      	adcs	r3, r3
 8004e8a:	61fb      	str	r3, [r7, #28]
 8004e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e90:	4641      	mov	r1, r8
 8004e92:	1851      	adds	r1, r2, r1
 8004e94:	6139      	str	r1, [r7, #16]
 8004e96:	4649      	mov	r1, r9
 8004e98:	414b      	adcs	r3, r1
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ea8:	4659      	mov	r1, fp
 8004eaa:	00cb      	lsls	r3, r1, #3
 8004eac:	4651      	mov	r1, sl
 8004eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eb2:	4651      	mov	r1, sl
 8004eb4:	00ca      	lsls	r2, r1, #3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	189b      	adds	r3, r3, r2
 8004ec0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ec4:	464b      	mov	r3, r9
 8004ec6:	460a      	mov	r2, r1
 8004ec8:	eb42 0303 	adc.w	r3, r2, r3
 8004ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004eda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ee8:	4649      	mov	r1, r9
 8004eea:	008b      	lsls	r3, r1, #2
 8004eec:	4641      	mov	r1, r8
 8004eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ef2:	4641      	mov	r1, r8
 8004ef4:	008a      	lsls	r2, r1, #2
 8004ef6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004efa:	f7fb fdef 	bl	8000adc <__aeabi_uldivmod>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4611      	mov	r1, r2
 8004f04:	4b38      	ldr	r3, [pc, #224]	@ (8004fe8 <UART_SetConfig+0x4e4>)
 8004f06:	fba3 2301 	umull	r2, r3, r3, r1
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	2264      	movs	r2, #100	@ 0x64
 8004f0e:	fb02 f303 	mul.w	r3, r2, r3
 8004f12:	1acb      	subs	r3, r1, r3
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	3332      	adds	r3, #50	@ 0x32
 8004f18:	4a33      	ldr	r2, [pc, #204]	@ (8004fe8 <UART_SetConfig+0x4e4>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f24:	441c      	add	r4, r3
 8004f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f34:	4642      	mov	r2, r8
 8004f36:	464b      	mov	r3, r9
 8004f38:	1891      	adds	r1, r2, r2
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	415b      	adcs	r3, r3
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f44:	4641      	mov	r1, r8
 8004f46:	1851      	adds	r1, r2, r1
 8004f48:	6039      	str	r1, [r7, #0]
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	414b      	adcs	r3, r1
 8004f4e:	607b      	str	r3, [r7, #4]
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f5c:	4659      	mov	r1, fp
 8004f5e:	00cb      	lsls	r3, r1, #3
 8004f60:	4651      	mov	r1, sl
 8004f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f66:	4651      	mov	r1, sl
 8004f68:	00ca      	lsls	r2, r1, #3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4642      	mov	r2, r8
 8004f72:	189b      	adds	r3, r3, r2
 8004f74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f76:	464b      	mov	r3, r9
 8004f78:	460a      	mov	r2, r1
 8004f7a:	eb42 0303 	adc.w	r3, r2, r3
 8004f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f98:	4649      	mov	r1, r9
 8004f9a:	008b      	lsls	r3, r1, #2
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fa2:	4641      	mov	r1, r8
 8004fa4:	008a      	lsls	r2, r1, #2
 8004fa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004faa:	f7fb fd97 	bl	8000adc <__aeabi_uldivmod>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe8 <UART_SetConfig+0x4e4>)
 8004fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	2164      	movs	r1, #100	@ 0x64
 8004fbc:	fb01 f303 	mul.w	r3, r1, r3
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	3332      	adds	r3, #50	@ 0x32
 8004fc6:	4a08      	ldr	r2, [pc, #32]	@ (8004fe8 <UART_SetConfig+0x4e4>)
 8004fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	f003 020f 	and.w	r2, r3, #15
 8004fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4422      	add	r2, r4
 8004fda:	609a      	str	r2, [r3, #8]
}
 8004fdc:	bf00      	nop
 8004fde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe8:	51eb851f 	.word	0x51eb851f

08004fec <std>:
 8004fec:	2300      	movs	r3, #0
 8004fee:	b510      	push	{r4, lr}
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ffa:	6083      	str	r3, [r0, #8]
 8004ffc:	8181      	strh	r1, [r0, #12]
 8004ffe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005000:	81c2      	strh	r2, [r0, #14]
 8005002:	6183      	str	r3, [r0, #24]
 8005004:	4619      	mov	r1, r3
 8005006:	2208      	movs	r2, #8
 8005008:	305c      	adds	r0, #92	@ 0x5c
 800500a:	f000 f927 	bl	800525c <memset>
 800500e:	4b0d      	ldr	r3, [pc, #52]	@ (8005044 <std+0x58>)
 8005010:	6263      	str	r3, [r4, #36]	@ 0x24
 8005012:	4b0d      	ldr	r3, [pc, #52]	@ (8005048 <std+0x5c>)
 8005014:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005016:	4b0d      	ldr	r3, [pc, #52]	@ (800504c <std+0x60>)
 8005018:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800501a:	4b0d      	ldr	r3, [pc, #52]	@ (8005050 <std+0x64>)
 800501c:	6323      	str	r3, [r4, #48]	@ 0x30
 800501e:	4b0d      	ldr	r3, [pc, #52]	@ (8005054 <std+0x68>)
 8005020:	6224      	str	r4, [r4, #32]
 8005022:	429c      	cmp	r4, r3
 8005024:	d006      	beq.n	8005034 <std+0x48>
 8005026:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800502a:	4294      	cmp	r4, r2
 800502c:	d002      	beq.n	8005034 <std+0x48>
 800502e:	33d0      	adds	r3, #208	@ 0xd0
 8005030:	429c      	cmp	r4, r3
 8005032:	d105      	bne.n	8005040 <std+0x54>
 8005034:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800503c:	f000 b986 	b.w	800534c <__retarget_lock_init_recursive>
 8005040:	bd10      	pop	{r4, pc}
 8005042:	bf00      	nop
 8005044:	08005195 	.word	0x08005195
 8005048:	080051b7 	.word	0x080051b7
 800504c:	080051ef 	.word	0x080051ef
 8005050:	08005213 	.word	0x08005213
 8005054:	20000194 	.word	0x20000194

08005058 <stdio_exit_handler>:
 8005058:	4a02      	ldr	r2, [pc, #8]	@ (8005064 <stdio_exit_handler+0xc>)
 800505a:	4903      	ldr	r1, [pc, #12]	@ (8005068 <stdio_exit_handler+0x10>)
 800505c:	4803      	ldr	r0, [pc, #12]	@ (800506c <stdio_exit_handler+0x14>)
 800505e:	f000 b869 	b.w	8005134 <_fwalk_sglue>
 8005062:	bf00      	nop
 8005064:	2000001c 	.word	0x2000001c
 8005068:	08005e9d 	.word	0x08005e9d
 800506c:	2000002c 	.word	0x2000002c

08005070 <cleanup_stdio>:
 8005070:	6841      	ldr	r1, [r0, #4]
 8005072:	4b0c      	ldr	r3, [pc, #48]	@ (80050a4 <cleanup_stdio+0x34>)
 8005074:	4299      	cmp	r1, r3
 8005076:	b510      	push	{r4, lr}
 8005078:	4604      	mov	r4, r0
 800507a:	d001      	beq.n	8005080 <cleanup_stdio+0x10>
 800507c:	f000 ff0e 	bl	8005e9c <_fflush_r>
 8005080:	68a1      	ldr	r1, [r4, #8]
 8005082:	4b09      	ldr	r3, [pc, #36]	@ (80050a8 <cleanup_stdio+0x38>)
 8005084:	4299      	cmp	r1, r3
 8005086:	d002      	beq.n	800508e <cleanup_stdio+0x1e>
 8005088:	4620      	mov	r0, r4
 800508a:	f000 ff07 	bl	8005e9c <_fflush_r>
 800508e:	68e1      	ldr	r1, [r4, #12]
 8005090:	4b06      	ldr	r3, [pc, #24]	@ (80050ac <cleanup_stdio+0x3c>)
 8005092:	4299      	cmp	r1, r3
 8005094:	d004      	beq.n	80050a0 <cleanup_stdio+0x30>
 8005096:	4620      	mov	r0, r4
 8005098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800509c:	f000 befe 	b.w	8005e9c <_fflush_r>
 80050a0:	bd10      	pop	{r4, pc}
 80050a2:	bf00      	nop
 80050a4:	20000194 	.word	0x20000194
 80050a8:	200001fc 	.word	0x200001fc
 80050ac:	20000264 	.word	0x20000264

080050b0 <global_stdio_init.part.0>:
 80050b0:	b510      	push	{r4, lr}
 80050b2:	4b0b      	ldr	r3, [pc, #44]	@ (80050e0 <global_stdio_init.part.0+0x30>)
 80050b4:	4c0b      	ldr	r4, [pc, #44]	@ (80050e4 <global_stdio_init.part.0+0x34>)
 80050b6:	4a0c      	ldr	r2, [pc, #48]	@ (80050e8 <global_stdio_init.part.0+0x38>)
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	4620      	mov	r0, r4
 80050bc:	2200      	movs	r2, #0
 80050be:	2104      	movs	r1, #4
 80050c0:	f7ff ff94 	bl	8004fec <std>
 80050c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050c8:	2201      	movs	r2, #1
 80050ca:	2109      	movs	r1, #9
 80050cc:	f7ff ff8e 	bl	8004fec <std>
 80050d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050d4:	2202      	movs	r2, #2
 80050d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050da:	2112      	movs	r1, #18
 80050dc:	f7ff bf86 	b.w	8004fec <std>
 80050e0:	200002cc 	.word	0x200002cc
 80050e4:	20000194 	.word	0x20000194
 80050e8:	08005059 	.word	0x08005059

080050ec <__sfp_lock_acquire>:
 80050ec:	4801      	ldr	r0, [pc, #4]	@ (80050f4 <__sfp_lock_acquire+0x8>)
 80050ee:	f000 b92e 	b.w	800534e <__retarget_lock_acquire_recursive>
 80050f2:	bf00      	nop
 80050f4:	200002d5 	.word	0x200002d5

080050f8 <__sfp_lock_release>:
 80050f8:	4801      	ldr	r0, [pc, #4]	@ (8005100 <__sfp_lock_release+0x8>)
 80050fa:	f000 b929 	b.w	8005350 <__retarget_lock_release_recursive>
 80050fe:	bf00      	nop
 8005100:	200002d5 	.word	0x200002d5

08005104 <__sinit>:
 8005104:	b510      	push	{r4, lr}
 8005106:	4604      	mov	r4, r0
 8005108:	f7ff fff0 	bl	80050ec <__sfp_lock_acquire>
 800510c:	6a23      	ldr	r3, [r4, #32]
 800510e:	b11b      	cbz	r3, 8005118 <__sinit+0x14>
 8005110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005114:	f7ff bff0 	b.w	80050f8 <__sfp_lock_release>
 8005118:	4b04      	ldr	r3, [pc, #16]	@ (800512c <__sinit+0x28>)
 800511a:	6223      	str	r3, [r4, #32]
 800511c:	4b04      	ldr	r3, [pc, #16]	@ (8005130 <__sinit+0x2c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f5      	bne.n	8005110 <__sinit+0xc>
 8005124:	f7ff ffc4 	bl	80050b0 <global_stdio_init.part.0>
 8005128:	e7f2      	b.n	8005110 <__sinit+0xc>
 800512a:	bf00      	nop
 800512c:	08005071 	.word	0x08005071
 8005130:	200002cc 	.word	0x200002cc

08005134 <_fwalk_sglue>:
 8005134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005138:	4607      	mov	r7, r0
 800513a:	4688      	mov	r8, r1
 800513c:	4614      	mov	r4, r2
 800513e:	2600      	movs	r6, #0
 8005140:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005144:	f1b9 0901 	subs.w	r9, r9, #1
 8005148:	d505      	bpl.n	8005156 <_fwalk_sglue+0x22>
 800514a:	6824      	ldr	r4, [r4, #0]
 800514c:	2c00      	cmp	r4, #0
 800514e:	d1f7      	bne.n	8005140 <_fwalk_sglue+0xc>
 8005150:	4630      	mov	r0, r6
 8005152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005156:	89ab      	ldrh	r3, [r5, #12]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d907      	bls.n	800516c <_fwalk_sglue+0x38>
 800515c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005160:	3301      	adds	r3, #1
 8005162:	d003      	beq.n	800516c <_fwalk_sglue+0x38>
 8005164:	4629      	mov	r1, r5
 8005166:	4638      	mov	r0, r7
 8005168:	47c0      	blx	r8
 800516a:	4306      	orrs	r6, r0
 800516c:	3568      	adds	r5, #104	@ 0x68
 800516e:	e7e9      	b.n	8005144 <_fwalk_sglue+0x10>

08005170 <iprintf>:
 8005170:	b40f      	push	{r0, r1, r2, r3}
 8005172:	b507      	push	{r0, r1, r2, lr}
 8005174:	4906      	ldr	r1, [pc, #24]	@ (8005190 <iprintf+0x20>)
 8005176:	ab04      	add	r3, sp, #16
 8005178:	6808      	ldr	r0, [r1, #0]
 800517a:	f853 2b04 	ldr.w	r2, [r3], #4
 800517e:	6881      	ldr	r1, [r0, #8]
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	f000 fb61 	bl	8005848 <_vfiprintf_r>
 8005186:	b003      	add	sp, #12
 8005188:	f85d eb04 	ldr.w	lr, [sp], #4
 800518c:	b004      	add	sp, #16
 800518e:	4770      	bx	lr
 8005190:	20000028 	.word	0x20000028

08005194 <__sread>:
 8005194:	b510      	push	{r4, lr}
 8005196:	460c      	mov	r4, r1
 8005198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800519c:	f000 f888 	bl	80052b0 <_read_r>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	bfab      	itete	ge
 80051a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051a6:	89a3      	ldrhlt	r3, [r4, #12]
 80051a8:	181b      	addge	r3, r3, r0
 80051aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051ae:	bfac      	ite	ge
 80051b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051b2:	81a3      	strhlt	r3, [r4, #12]
 80051b4:	bd10      	pop	{r4, pc}

080051b6 <__swrite>:
 80051b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ba:	461f      	mov	r7, r3
 80051bc:	898b      	ldrh	r3, [r1, #12]
 80051be:	05db      	lsls	r3, r3, #23
 80051c0:	4605      	mov	r5, r0
 80051c2:	460c      	mov	r4, r1
 80051c4:	4616      	mov	r6, r2
 80051c6:	d505      	bpl.n	80051d4 <__swrite+0x1e>
 80051c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051cc:	2302      	movs	r3, #2
 80051ce:	2200      	movs	r2, #0
 80051d0:	f000 f85c 	bl	800528c <_lseek_r>
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	4632      	mov	r2, r6
 80051e2:	463b      	mov	r3, r7
 80051e4:	4628      	mov	r0, r5
 80051e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ea:	f000 b873 	b.w	80052d4 <_write_r>

080051ee <__sseek>:
 80051ee:	b510      	push	{r4, lr}
 80051f0:	460c      	mov	r4, r1
 80051f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f6:	f000 f849 	bl	800528c <_lseek_r>
 80051fa:	1c43      	adds	r3, r0, #1
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	bf15      	itete	ne
 8005200:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005202:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005206:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800520a:	81a3      	strheq	r3, [r4, #12]
 800520c:	bf18      	it	ne
 800520e:	81a3      	strhne	r3, [r4, #12]
 8005210:	bd10      	pop	{r4, pc}

08005212 <__sclose>:
 8005212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005216:	f000 b829 	b.w	800526c <_close_r>
	...

0800521c <_vsiprintf_r>:
 800521c:	b500      	push	{lr}
 800521e:	b09b      	sub	sp, #108	@ 0x6c
 8005220:	9100      	str	r1, [sp, #0]
 8005222:	9104      	str	r1, [sp, #16]
 8005224:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005228:	9105      	str	r1, [sp, #20]
 800522a:	9102      	str	r1, [sp, #8]
 800522c:	4905      	ldr	r1, [pc, #20]	@ (8005244 <_vsiprintf_r+0x28>)
 800522e:	9103      	str	r1, [sp, #12]
 8005230:	4669      	mov	r1, sp
 8005232:	f000 f9e3 	bl	80055fc <_svfiprintf_r>
 8005236:	9b00      	ldr	r3, [sp, #0]
 8005238:	2200      	movs	r2, #0
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	b01b      	add	sp, #108	@ 0x6c
 800523e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005242:	bf00      	nop
 8005244:	ffff0208 	.word	0xffff0208

08005248 <vsiprintf>:
 8005248:	4613      	mov	r3, r2
 800524a:	460a      	mov	r2, r1
 800524c:	4601      	mov	r1, r0
 800524e:	4802      	ldr	r0, [pc, #8]	@ (8005258 <vsiprintf+0x10>)
 8005250:	6800      	ldr	r0, [r0, #0]
 8005252:	f7ff bfe3 	b.w	800521c <_vsiprintf_r>
 8005256:	bf00      	nop
 8005258:	20000028 	.word	0x20000028

0800525c <memset>:
 800525c:	4402      	add	r2, r0
 800525e:	4603      	mov	r3, r0
 8005260:	4293      	cmp	r3, r2
 8005262:	d100      	bne.n	8005266 <memset+0xa>
 8005264:	4770      	bx	lr
 8005266:	f803 1b01 	strb.w	r1, [r3], #1
 800526a:	e7f9      	b.n	8005260 <memset+0x4>

0800526c <_close_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4d06      	ldr	r5, [pc, #24]	@ (8005288 <_close_r+0x1c>)
 8005270:	2300      	movs	r3, #0
 8005272:	4604      	mov	r4, r0
 8005274:	4608      	mov	r0, r1
 8005276:	602b      	str	r3, [r5, #0]
 8005278:	f7fc ff59 	bl	800212e <_close>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d102      	bne.n	8005286 <_close_r+0x1a>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	b103      	cbz	r3, 8005286 <_close_r+0x1a>
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	200002d0 	.word	0x200002d0

0800528c <_lseek_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4d07      	ldr	r5, [pc, #28]	@ (80052ac <_lseek_r+0x20>)
 8005290:	4604      	mov	r4, r0
 8005292:	4608      	mov	r0, r1
 8005294:	4611      	mov	r1, r2
 8005296:	2200      	movs	r2, #0
 8005298:	602a      	str	r2, [r5, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	f7fc ff6e 	bl	800217c <_lseek>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d102      	bne.n	80052aa <_lseek_r+0x1e>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	b103      	cbz	r3, 80052aa <_lseek_r+0x1e>
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
 80052ac:	200002d0 	.word	0x200002d0

080052b0 <_read_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4d07      	ldr	r5, [pc, #28]	@ (80052d0 <_read_r+0x20>)
 80052b4:	4604      	mov	r4, r0
 80052b6:	4608      	mov	r0, r1
 80052b8:	4611      	mov	r1, r2
 80052ba:	2200      	movs	r2, #0
 80052bc:	602a      	str	r2, [r5, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	f7fc fefc 	bl	80020bc <_read>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d102      	bne.n	80052ce <_read_r+0x1e>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b103      	cbz	r3, 80052ce <_read_r+0x1e>
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	200002d0 	.word	0x200002d0

080052d4 <_write_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d07      	ldr	r5, [pc, #28]	@ (80052f4 <_write_r+0x20>)
 80052d8:	4604      	mov	r4, r0
 80052da:	4608      	mov	r0, r1
 80052dc:	4611      	mov	r1, r2
 80052de:	2200      	movs	r2, #0
 80052e0:	602a      	str	r2, [r5, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f7fc ff07 	bl	80020f6 <_write>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_write_r+0x1e>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_write_r+0x1e>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	200002d0 	.word	0x200002d0

080052f8 <__errno>:
 80052f8:	4b01      	ldr	r3, [pc, #4]	@ (8005300 <__errno+0x8>)
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000028 	.word	0x20000028

08005304 <__libc_init_array>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	4d0d      	ldr	r5, [pc, #52]	@ (800533c <__libc_init_array+0x38>)
 8005308:	4c0d      	ldr	r4, [pc, #52]	@ (8005340 <__libc_init_array+0x3c>)
 800530a:	1b64      	subs	r4, r4, r5
 800530c:	10a4      	asrs	r4, r4, #2
 800530e:	2600      	movs	r6, #0
 8005310:	42a6      	cmp	r6, r4
 8005312:	d109      	bne.n	8005328 <__libc_init_array+0x24>
 8005314:	4d0b      	ldr	r5, [pc, #44]	@ (8005344 <__libc_init_array+0x40>)
 8005316:	4c0c      	ldr	r4, [pc, #48]	@ (8005348 <__libc_init_array+0x44>)
 8005318:	f000 ff6e 	bl	80061f8 <_init>
 800531c:	1b64      	subs	r4, r4, r5
 800531e:	10a4      	asrs	r4, r4, #2
 8005320:	2600      	movs	r6, #0
 8005322:	42a6      	cmp	r6, r4
 8005324:	d105      	bne.n	8005332 <__libc_init_array+0x2e>
 8005326:	bd70      	pop	{r4, r5, r6, pc}
 8005328:	f855 3b04 	ldr.w	r3, [r5], #4
 800532c:	4798      	blx	r3
 800532e:	3601      	adds	r6, #1
 8005330:	e7ee      	b.n	8005310 <__libc_init_array+0xc>
 8005332:	f855 3b04 	ldr.w	r3, [r5], #4
 8005336:	4798      	blx	r3
 8005338:	3601      	adds	r6, #1
 800533a:	e7f2      	b.n	8005322 <__libc_init_array+0x1e>
 800533c:	080062d4 	.word	0x080062d4
 8005340:	080062d4 	.word	0x080062d4
 8005344:	080062d4 	.word	0x080062d4
 8005348:	080062d8 	.word	0x080062d8

0800534c <__retarget_lock_init_recursive>:
 800534c:	4770      	bx	lr

0800534e <__retarget_lock_acquire_recursive>:
 800534e:	4770      	bx	lr

08005350 <__retarget_lock_release_recursive>:
 8005350:	4770      	bx	lr
	...

08005354 <_free_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	4605      	mov	r5, r0
 8005358:	2900      	cmp	r1, #0
 800535a:	d041      	beq.n	80053e0 <_free_r+0x8c>
 800535c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005360:	1f0c      	subs	r4, r1, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	bfb8      	it	lt
 8005366:	18e4      	addlt	r4, r4, r3
 8005368:	f000 f8e0 	bl	800552c <__malloc_lock>
 800536c:	4a1d      	ldr	r2, [pc, #116]	@ (80053e4 <_free_r+0x90>)
 800536e:	6813      	ldr	r3, [r2, #0]
 8005370:	b933      	cbnz	r3, 8005380 <_free_r+0x2c>
 8005372:	6063      	str	r3, [r4, #4]
 8005374:	6014      	str	r4, [r2, #0]
 8005376:	4628      	mov	r0, r5
 8005378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800537c:	f000 b8dc 	b.w	8005538 <__malloc_unlock>
 8005380:	42a3      	cmp	r3, r4
 8005382:	d908      	bls.n	8005396 <_free_r+0x42>
 8005384:	6820      	ldr	r0, [r4, #0]
 8005386:	1821      	adds	r1, r4, r0
 8005388:	428b      	cmp	r3, r1
 800538a:	bf01      	itttt	eq
 800538c:	6819      	ldreq	r1, [r3, #0]
 800538e:	685b      	ldreq	r3, [r3, #4]
 8005390:	1809      	addeq	r1, r1, r0
 8005392:	6021      	streq	r1, [r4, #0]
 8005394:	e7ed      	b.n	8005372 <_free_r+0x1e>
 8005396:	461a      	mov	r2, r3
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	b10b      	cbz	r3, 80053a0 <_free_r+0x4c>
 800539c:	42a3      	cmp	r3, r4
 800539e:	d9fa      	bls.n	8005396 <_free_r+0x42>
 80053a0:	6811      	ldr	r1, [r2, #0]
 80053a2:	1850      	adds	r0, r2, r1
 80053a4:	42a0      	cmp	r0, r4
 80053a6:	d10b      	bne.n	80053c0 <_free_r+0x6c>
 80053a8:	6820      	ldr	r0, [r4, #0]
 80053aa:	4401      	add	r1, r0
 80053ac:	1850      	adds	r0, r2, r1
 80053ae:	4283      	cmp	r3, r0
 80053b0:	6011      	str	r1, [r2, #0]
 80053b2:	d1e0      	bne.n	8005376 <_free_r+0x22>
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	6053      	str	r3, [r2, #4]
 80053ba:	4408      	add	r0, r1
 80053bc:	6010      	str	r0, [r2, #0]
 80053be:	e7da      	b.n	8005376 <_free_r+0x22>
 80053c0:	d902      	bls.n	80053c8 <_free_r+0x74>
 80053c2:	230c      	movs	r3, #12
 80053c4:	602b      	str	r3, [r5, #0]
 80053c6:	e7d6      	b.n	8005376 <_free_r+0x22>
 80053c8:	6820      	ldr	r0, [r4, #0]
 80053ca:	1821      	adds	r1, r4, r0
 80053cc:	428b      	cmp	r3, r1
 80053ce:	bf04      	itt	eq
 80053d0:	6819      	ldreq	r1, [r3, #0]
 80053d2:	685b      	ldreq	r3, [r3, #4]
 80053d4:	6063      	str	r3, [r4, #4]
 80053d6:	bf04      	itt	eq
 80053d8:	1809      	addeq	r1, r1, r0
 80053da:	6021      	streq	r1, [r4, #0]
 80053dc:	6054      	str	r4, [r2, #4]
 80053de:	e7ca      	b.n	8005376 <_free_r+0x22>
 80053e0:	bd38      	pop	{r3, r4, r5, pc}
 80053e2:	bf00      	nop
 80053e4:	200002dc 	.word	0x200002dc

080053e8 <sbrk_aligned>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	4e0f      	ldr	r6, [pc, #60]	@ (8005428 <sbrk_aligned+0x40>)
 80053ec:	460c      	mov	r4, r1
 80053ee:	6831      	ldr	r1, [r6, #0]
 80053f0:	4605      	mov	r5, r0
 80053f2:	b911      	cbnz	r1, 80053fa <sbrk_aligned+0x12>
 80053f4:	f000 fe28 	bl	8006048 <_sbrk_r>
 80053f8:	6030      	str	r0, [r6, #0]
 80053fa:	4621      	mov	r1, r4
 80053fc:	4628      	mov	r0, r5
 80053fe:	f000 fe23 	bl	8006048 <_sbrk_r>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	d103      	bne.n	800540e <sbrk_aligned+0x26>
 8005406:	f04f 34ff 	mov.w	r4, #4294967295
 800540a:	4620      	mov	r0, r4
 800540c:	bd70      	pop	{r4, r5, r6, pc}
 800540e:	1cc4      	adds	r4, r0, #3
 8005410:	f024 0403 	bic.w	r4, r4, #3
 8005414:	42a0      	cmp	r0, r4
 8005416:	d0f8      	beq.n	800540a <sbrk_aligned+0x22>
 8005418:	1a21      	subs	r1, r4, r0
 800541a:	4628      	mov	r0, r5
 800541c:	f000 fe14 	bl	8006048 <_sbrk_r>
 8005420:	3001      	adds	r0, #1
 8005422:	d1f2      	bne.n	800540a <sbrk_aligned+0x22>
 8005424:	e7ef      	b.n	8005406 <sbrk_aligned+0x1e>
 8005426:	bf00      	nop
 8005428:	200002d8 	.word	0x200002d8

0800542c <_malloc_r>:
 800542c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005430:	1ccd      	adds	r5, r1, #3
 8005432:	f025 0503 	bic.w	r5, r5, #3
 8005436:	3508      	adds	r5, #8
 8005438:	2d0c      	cmp	r5, #12
 800543a:	bf38      	it	cc
 800543c:	250c      	movcc	r5, #12
 800543e:	2d00      	cmp	r5, #0
 8005440:	4606      	mov	r6, r0
 8005442:	db01      	blt.n	8005448 <_malloc_r+0x1c>
 8005444:	42a9      	cmp	r1, r5
 8005446:	d904      	bls.n	8005452 <_malloc_r+0x26>
 8005448:	230c      	movs	r3, #12
 800544a:	6033      	str	r3, [r6, #0]
 800544c:	2000      	movs	r0, #0
 800544e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005452:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005528 <_malloc_r+0xfc>
 8005456:	f000 f869 	bl	800552c <__malloc_lock>
 800545a:	f8d8 3000 	ldr.w	r3, [r8]
 800545e:	461c      	mov	r4, r3
 8005460:	bb44      	cbnz	r4, 80054b4 <_malloc_r+0x88>
 8005462:	4629      	mov	r1, r5
 8005464:	4630      	mov	r0, r6
 8005466:	f7ff ffbf 	bl	80053e8 <sbrk_aligned>
 800546a:	1c43      	adds	r3, r0, #1
 800546c:	4604      	mov	r4, r0
 800546e:	d158      	bne.n	8005522 <_malloc_r+0xf6>
 8005470:	f8d8 4000 	ldr.w	r4, [r8]
 8005474:	4627      	mov	r7, r4
 8005476:	2f00      	cmp	r7, #0
 8005478:	d143      	bne.n	8005502 <_malloc_r+0xd6>
 800547a:	2c00      	cmp	r4, #0
 800547c:	d04b      	beq.n	8005516 <_malloc_r+0xea>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	4639      	mov	r1, r7
 8005482:	4630      	mov	r0, r6
 8005484:	eb04 0903 	add.w	r9, r4, r3
 8005488:	f000 fdde 	bl	8006048 <_sbrk_r>
 800548c:	4581      	cmp	r9, r0
 800548e:	d142      	bne.n	8005516 <_malloc_r+0xea>
 8005490:	6821      	ldr	r1, [r4, #0]
 8005492:	1a6d      	subs	r5, r5, r1
 8005494:	4629      	mov	r1, r5
 8005496:	4630      	mov	r0, r6
 8005498:	f7ff ffa6 	bl	80053e8 <sbrk_aligned>
 800549c:	3001      	adds	r0, #1
 800549e:	d03a      	beq.n	8005516 <_malloc_r+0xea>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	442b      	add	r3, r5
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	f8d8 3000 	ldr.w	r3, [r8]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	bb62      	cbnz	r2, 8005508 <_malloc_r+0xdc>
 80054ae:	f8c8 7000 	str.w	r7, [r8]
 80054b2:	e00f      	b.n	80054d4 <_malloc_r+0xa8>
 80054b4:	6822      	ldr	r2, [r4, #0]
 80054b6:	1b52      	subs	r2, r2, r5
 80054b8:	d420      	bmi.n	80054fc <_malloc_r+0xd0>
 80054ba:	2a0b      	cmp	r2, #11
 80054bc:	d917      	bls.n	80054ee <_malloc_r+0xc2>
 80054be:	1961      	adds	r1, r4, r5
 80054c0:	42a3      	cmp	r3, r4
 80054c2:	6025      	str	r5, [r4, #0]
 80054c4:	bf18      	it	ne
 80054c6:	6059      	strne	r1, [r3, #4]
 80054c8:	6863      	ldr	r3, [r4, #4]
 80054ca:	bf08      	it	eq
 80054cc:	f8c8 1000 	streq.w	r1, [r8]
 80054d0:	5162      	str	r2, [r4, r5]
 80054d2:	604b      	str	r3, [r1, #4]
 80054d4:	4630      	mov	r0, r6
 80054d6:	f000 f82f 	bl	8005538 <__malloc_unlock>
 80054da:	f104 000b 	add.w	r0, r4, #11
 80054de:	1d23      	adds	r3, r4, #4
 80054e0:	f020 0007 	bic.w	r0, r0, #7
 80054e4:	1ac2      	subs	r2, r0, r3
 80054e6:	bf1c      	itt	ne
 80054e8:	1a1b      	subne	r3, r3, r0
 80054ea:	50a3      	strne	r3, [r4, r2]
 80054ec:	e7af      	b.n	800544e <_malloc_r+0x22>
 80054ee:	6862      	ldr	r2, [r4, #4]
 80054f0:	42a3      	cmp	r3, r4
 80054f2:	bf0c      	ite	eq
 80054f4:	f8c8 2000 	streq.w	r2, [r8]
 80054f8:	605a      	strne	r2, [r3, #4]
 80054fa:	e7eb      	b.n	80054d4 <_malloc_r+0xa8>
 80054fc:	4623      	mov	r3, r4
 80054fe:	6864      	ldr	r4, [r4, #4]
 8005500:	e7ae      	b.n	8005460 <_malloc_r+0x34>
 8005502:	463c      	mov	r4, r7
 8005504:	687f      	ldr	r7, [r7, #4]
 8005506:	e7b6      	b.n	8005476 <_malloc_r+0x4a>
 8005508:	461a      	mov	r2, r3
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	42a3      	cmp	r3, r4
 800550e:	d1fb      	bne.n	8005508 <_malloc_r+0xdc>
 8005510:	2300      	movs	r3, #0
 8005512:	6053      	str	r3, [r2, #4]
 8005514:	e7de      	b.n	80054d4 <_malloc_r+0xa8>
 8005516:	230c      	movs	r3, #12
 8005518:	6033      	str	r3, [r6, #0]
 800551a:	4630      	mov	r0, r6
 800551c:	f000 f80c 	bl	8005538 <__malloc_unlock>
 8005520:	e794      	b.n	800544c <_malloc_r+0x20>
 8005522:	6005      	str	r5, [r0, #0]
 8005524:	e7d6      	b.n	80054d4 <_malloc_r+0xa8>
 8005526:	bf00      	nop
 8005528:	200002dc 	.word	0x200002dc

0800552c <__malloc_lock>:
 800552c:	4801      	ldr	r0, [pc, #4]	@ (8005534 <__malloc_lock+0x8>)
 800552e:	f7ff bf0e 	b.w	800534e <__retarget_lock_acquire_recursive>
 8005532:	bf00      	nop
 8005534:	200002d4 	.word	0x200002d4

08005538 <__malloc_unlock>:
 8005538:	4801      	ldr	r0, [pc, #4]	@ (8005540 <__malloc_unlock+0x8>)
 800553a:	f7ff bf09 	b.w	8005350 <__retarget_lock_release_recursive>
 800553e:	bf00      	nop
 8005540:	200002d4 	.word	0x200002d4

08005544 <__ssputs_r>:
 8005544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005548:	688e      	ldr	r6, [r1, #8]
 800554a:	461f      	mov	r7, r3
 800554c:	42be      	cmp	r6, r7
 800554e:	680b      	ldr	r3, [r1, #0]
 8005550:	4682      	mov	sl, r0
 8005552:	460c      	mov	r4, r1
 8005554:	4690      	mov	r8, r2
 8005556:	d82d      	bhi.n	80055b4 <__ssputs_r+0x70>
 8005558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800555c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005560:	d026      	beq.n	80055b0 <__ssputs_r+0x6c>
 8005562:	6965      	ldr	r5, [r4, #20]
 8005564:	6909      	ldr	r1, [r1, #16]
 8005566:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800556a:	eba3 0901 	sub.w	r9, r3, r1
 800556e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005572:	1c7b      	adds	r3, r7, #1
 8005574:	444b      	add	r3, r9
 8005576:	106d      	asrs	r5, r5, #1
 8005578:	429d      	cmp	r5, r3
 800557a:	bf38      	it	cc
 800557c:	461d      	movcc	r5, r3
 800557e:	0553      	lsls	r3, r2, #21
 8005580:	d527      	bpl.n	80055d2 <__ssputs_r+0x8e>
 8005582:	4629      	mov	r1, r5
 8005584:	f7ff ff52 	bl	800542c <_malloc_r>
 8005588:	4606      	mov	r6, r0
 800558a:	b360      	cbz	r0, 80055e6 <__ssputs_r+0xa2>
 800558c:	6921      	ldr	r1, [r4, #16]
 800558e:	464a      	mov	r2, r9
 8005590:	f000 fd6a 	bl	8006068 <memcpy>
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800559a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800559e:	81a3      	strh	r3, [r4, #12]
 80055a0:	6126      	str	r6, [r4, #16]
 80055a2:	6165      	str	r5, [r4, #20]
 80055a4:	444e      	add	r6, r9
 80055a6:	eba5 0509 	sub.w	r5, r5, r9
 80055aa:	6026      	str	r6, [r4, #0]
 80055ac:	60a5      	str	r5, [r4, #8]
 80055ae:	463e      	mov	r6, r7
 80055b0:	42be      	cmp	r6, r7
 80055b2:	d900      	bls.n	80055b6 <__ssputs_r+0x72>
 80055b4:	463e      	mov	r6, r7
 80055b6:	6820      	ldr	r0, [r4, #0]
 80055b8:	4632      	mov	r2, r6
 80055ba:	4641      	mov	r1, r8
 80055bc:	f000 fd2a 	bl	8006014 <memmove>
 80055c0:	68a3      	ldr	r3, [r4, #8]
 80055c2:	1b9b      	subs	r3, r3, r6
 80055c4:	60a3      	str	r3, [r4, #8]
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	4433      	add	r3, r6
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	2000      	movs	r0, #0
 80055ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d2:	462a      	mov	r2, r5
 80055d4:	f000 fd56 	bl	8006084 <_realloc_r>
 80055d8:	4606      	mov	r6, r0
 80055da:	2800      	cmp	r0, #0
 80055dc:	d1e0      	bne.n	80055a0 <__ssputs_r+0x5c>
 80055de:	6921      	ldr	r1, [r4, #16]
 80055e0:	4650      	mov	r0, sl
 80055e2:	f7ff feb7 	bl	8005354 <_free_r>
 80055e6:	230c      	movs	r3, #12
 80055e8:	f8ca 3000 	str.w	r3, [sl]
 80055ec:	89a3      	ldrh	r3, [r4, #12]
 80055ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295
 80055f8:	e7e9      	b.n	80055ce <__ssputs_r+0x8a>
	...

080055fc <_svfiprintf_r>:
 80055fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005600:	4698      	mov	r8, r3
 8005602:	898b      	ldrh	r3, [r1, #12]
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	b09d      	sub	sp, #116	@ 0x74
 8005608:	4607      	mov	r7, r0
 800560a:	460d      	mov	r5, r1
 800560c:	4614      	mov	r4, r2
 800560e:	d510      	bpl.n	8005632 <_svfiprintf_r+0x36>
 8005610:	690b      	ldr	r3, [r1, #16]
 8005612:	b973      	cbnz	r3, 8005632 <_svfiprintf_r+0x36>
 8005614:	2140      	movs	r1, #64	@ 0x40
 8005616:	f7ff ff09 	bl	800542c <_malloc_r>
 800561a:	6028      	str	r0, [r5, #0]
 800561c:	6128      	str	r0, [r5, #16]
 800561e:	b930      	cbnz	r0, 800562e <_svfiprintf_r+0x32>
 8005620:	230c      	movs	r3, #12
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	f04f 30ff 	mov.w	r0, #4294967295
 8005628:	b01d      	add	sp, #116	@ 0x74
 800562a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562e:	2340      	movs	r3, #64	@ 0x40
 8005630:	616b      	str	r3, [r5, #20]
 8005632:	2300      	movs	r3, #0
 8005634:	9309      	str	r3, [sp, #36]	@ 0x24
 8005636:	2320      	movs	r3, #32
 8005638:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800563c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005640:	2330      	movs	r3, #48	@ 0x30
 8005642:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80057e0 <_svfiprintf_r+0x1e4>
 8005646:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800564a:	f04f 0901 	mov.w	r9, #1
 800564e:	4623      	mov	r3, r4
 8005650:	469a      	mov	sl, r3
 8005652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005656:	b10a      	cbz	r2, 800565c <_svfiprintf_r+0x60>
 8005658:	2a25      	cmp	r2, #37	@ 0x25
 800565a:	d1f9      	bne.n	8005650 <_svfiprintf_r+0x54>
 800565c:	ebba 0b04 	subs.w	fp, sl, r4
 8005660:	d00b      	beq.n	800567a <_svfiprintf_r+0x7e>
 8005662:	465b      	mov	r3, fp
 8005664:	4622      	mov	r2, r4
 8005666:	4629      	mov	r1, r5
 8005668:	4638      	mov	r0, r7
 800566a:	f7ff ff6b 	bl	8005544 <__ssputs_r>
 800566e:	3001      	adds	r0, #1
 8005670:	f000 80a7 	beq.w	80057c2 <_svfiprintf_r+0x1c6>
 8005674:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005676:	445a      	add	r2, fp
 8005678:	9209      	str	r2, [sp, #36]	@ 0x24
 800567a:	f89a 3000 	ldrb.w	r3, [sl]
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 809f 	beq.w	80057c2 <_svfiprintf_r+0x1c6>
 8005684:	2300      	movs	r3, #0
 8005686:	f04f 32ff 	mov.w	r2, #4294967295
 800568a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800568e:	f10a 0a01 	add.w	sl, sl, #1
 8005692:	9304      	str	r3, [sp, #16]
 8005694:	9307      	str	r3, [sp, #28]
 8005696:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800569a:	931a      	str	r3, [sp, #104]	@ 0x68
 800569c:	4654      	mov	r4, sl
 800569e:	2205      	movs	r2, #5
 80056a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a4:	484e      	ldr	r0, [pc, #312]	@ (80057e0 <_svfiprintf_r+0x1e4>)
 80056a6:	f7fa fdab 	bl	8000200 <memchr>
 80056aa:	9a04      	ldr	r2, [sp, #16]
 80056ac:	b9d8      	cbnz	r0, 80056e6 <_svfiprintf_r+0xea>
 80056ae:	06d0      	lsls	r0, r2, #27
 80056b0:	bf44      	itt	mi
 80056b2:	2320      	movmi	r3, #32
 80056b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056b8:	0711      	lsls	r1, r2, #28
 80056ba:	bf44      	itt	mi
 80056bc:	232b      	movmi	r3, #43	@ 0x2b
 80056be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056c2:	f89a 3000 	ldrb.w	r3, [sl]
 80056c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80056c8:	d015      	beq.n	80056f6 <_svfiprintf_r+0xfa>
 80056ca:	9a07      	ldr	r2, [sp, #28]
 80056cc:	4654      	mov	r4, sl
 80056ce:	2000      	movs	r0, #0
 80056d0:	f04f 0c0a 	mov.w	ip, #10
 80056d4:	4621      	mov	r1, r4
 80056d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056da:	3b30      	subs	r3, #48	@ 0x30
 80056dc:	2b09      	cmp	r3, #9
 80056de:	d94b      	bls.n	8005778 <_svfiprintf_r+0x17c>
 80056e0:	b1b0      	cbz	r0, 8005710 <_svfiprintf_r+0x114>
 80056e2:	9207      	str	r2, [sp, #28]
 80056e4:	e014      	b.n	8005710 <_svfiprintf_r+0x114>
 80056e6:	eba0 0308 	sub.w	r3, r0, r8
 80056ea:	fa09 f303 	lsl.w	r3, r9, r3
 80056ee:	4313      	orrs	r3, r2
 80056f0:	9304      	str	r3, [sp, #16]
 80056f2:	46a2      	mov	sl, r4
 80056f4:	e7d2      	b.n	800569c <_svfiprintf_r+0xa0>
 80056f6:	9b03      	ldr	r3, [sp, #12]
 80056f8:	1d19      	adds	r1, r3, #4
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	9103      	str	r1, [sp, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	bfbb      	ittet	lt
 8005702:	425b      	neglt	r3, r3
 8005704:	f042 0202 	orrlt.w	r2, r2, #2
 8005708:	9307      	strge	r3, [sp, #28]
 800570a:	9307      	strlt	r3, [sp, #28]
 800570c:	bfb8      	it	lt
 800570e:	9204      	strlt	r2, [sp, #16]
 8005710:	7823      	ldrb	r3, [r4, #0]
 8005712:	2b2e      	cmp	r3, #46	@ 0x2e
 8005714:	d10a      	bne.n	800572c <_svfiprintf_r+0x130>
 8005716:	7863      	ldrb	r3, [r4, #1]
 8005718:	2b2a      	cmp	r3, #42	@ 0x2a
 800571a:	d132      	bne.n	8005782 <_svfiprintf_r+0x186>
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	9203      	str	r2, [sp, #12]
 8005724:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005728:	3402      	adds	r4, #2
 800572a:	9305      	str	r3, [sp, #20]
 800572c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80057f0 <_svfiprintf_r+0x1f4>
 8005730:	7821      	ldrb	r1, [r4, #0]
 8005732:	2203      	movs	r2, #3
 8005734:	4650      	mov	r0, sl
 8005736:	f7fa fd63 	bl	8000200 <memchr>
 800573a:	b138      	cbz	r0, 800574c <_svfiprintf_r+0x150>
 800573c:	9b04      	ldr	r3, [sp, #16]
 800573e:	eba0 000a 	sub.w	r0, r0, sl
 8005742:	2240      	movs	r2, #64	@ 0x40
 8005744:	4082      	lsls	r2, r0
 8005746:	4313      	orrs	r3, r2
 8005748:	3401      	adds	r4, #1
 800574a:	9304      	str	r3, [sp, #16]
 800574c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005750:	4824      	ldr	r0, [pc, #144]	@ (80057e4 <_svfiprintf_r+0x1e8>)
 8005752:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005756:	2206      	movs	r2, #6
 8005758:	f7fa fd52 	bl	8000200 <memchr>
 800575c:	2800      	cmp	r0, #0
 800575e:	d036      	beq.n	80057ce <_svfiprintf_r+0x1d2>
 8005760:	4b21      	ldr	r3, [pc, #132]	@ (80057e8 <_svfiprintf_r+0x1ec>)
 8005762:	bb1b      	cbnz	r3, 80057ac <_svfiprintf_r+0x1b0>
 8005764:	9b03      	ldr	r3, [sp, #12]
 8005766:	3307      	adds	r3, #7
 8005768:	f023 0307 	bic.w	r3, r3, #7
 800576c:	3308      	adds	r3, #8
 800576e:	9303      	str	r3, [sp, #12]
 8005770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005772:	4433      	add	r3, r6
 8005774:	9309      	str	r3, [sp, #36]	@ 0x24
 8005776:	e76a      	b.n	800564e <_svfiprintf_r+0x52>
 8005778:	fb0c 3202 	mla	r2, ip, r2, r3
 800577c:	460c      	mov	r4, r1
 800577e:	2001      	movs	r0, #1
 8005780:	e7a8      	b.n	80056d4 <_svfiprintf_r+0xd8>
 8005782:	2300      	movs	r3, #0
 8005784:	3401      	adds	r4, #1
 8005786:	9305      	str	r3, [sp, #20]
 8005788:	4619      	mov	r1, r3
 800578a:	f04f 0c0a 	mov.w	ip, #10
 800578e:	4620      	mov	r0, r4
 8005790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005794:	3a30      	subs	r2, #48	@ 0x30
 8005796:	2a09      	cmp	r2, #9
 8005798:	d903      	bls.n	80057a2 <_svfiprintf_r+0x1a6>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0c6      	beq.n	800572c <_svfiprintf_r+0x130>
 800579e:	9105      	str	r1, [sp, #20]
 80057a0:	e7c4      	b.n	800572c <_svfiprintf_r+0x130>
 80057a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80057a6:	4604      	mov	r4, r0
 80057a8:	2301      	movs	r3, #1
 80057aa:	e7f0      	b.n	800578e <_svfiprintf_r+0x192>
 80057ac:	ab03      	add	r3, sp, #12
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	462a      	mov	r2, r5
 80057b2:	4b0e      	ldr	r3, [pc, #56]	@ (80057ec <_svfiprintf_r+0x1f0>)
 80057b4:	a904      	add	r1, sp, #16
 80057b6:	4638      	mov	r0, r7
 80057b8:	f3af 8000 	nop.w
 80057bc:	1c42      	adds	r2, r0, #1
 80057be:	4606      	mov	r6, r0
 80057c0:	d1d6      	bne.n	8005770 <_svfiprintf_r+0x174>
 80057c2:	89ab      	ldrh	r3, [r5, #12]
 80057c4:	065b      	lsls	r3, r3, #25
 80057c6:	f53f af2d 	bmi.w	8005624 <_svfiprintf_r+0x28>
 80057ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057cc:	e72c      	b.n	8005628 <_svfiprintf_r+0x2c>
 80057ce:	ab03      	add	r3, sp, #12
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	462a      	mov	r2, r5
 80057d4:	4b05      	ldr	r3, [pc, #20]	@ (80057ec <_svfiprintf_r+0x1f0>)
 80057d6:	a904      	add	r1, sp, #16
 80057d8:	4638      	mov	r0, r7
 80057da:	f000 f9bb 	bl	8005b54 <_printf_i>
 80057de:	e7ed      	b.n	80057bc <_svfiprintf_r+0x1c0>
 80057e0:	08006298 	.word	0x08006298
 80057e4:	080062a2 	.word	0x080062a2
 80057e8:	00000000 	.word	0x00000000
 80057ec:	08005545 	.word	0x08005545
 80057f0:	0800629e 	.word	0x0800629e

080057f4 <__sfputc_r>:
 80057f4:	6893      	ldr	r3, [r2, #8]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	b410      	push	{r4}
 80057fc:	6093      	str	r3, [r2, #8]
 80057fe:	da08      	bge.n	8005812 <__sfputc_r+0x1e>
 8005800:	6994      	ldr	r4, [r2, #24]
 8005802:	42a3      	cmp	r3, r4
 8005804:	db01      	blt.n	800580a <__sfputc_r+0x16>
 8005806:	290a      	cmp	r1, #10
 8005808:	d103      	bne.n	8005812 <__sfputc_r+0x1e>
 800580a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800580e:	f000 bb6d 	b.w	8005eec <__swbuf_r>
 8005812:	6813      	ldr	r3, [r2, #0]
 8005814:	1c58      	adds	r0, r3, #1
 8005816:	6010      	str	r0, [r2, #0]
 8005818:	7019      	strb	r1, [r3, #0]
 800581a:	4608      	mov	r0, r1
 800581c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005820:	4770      	bx	lr

08005822 <__sfputs_r>:
 8005822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005824:	4606      	mov	r6, r0
 8005826:	460f      	mov	r7, r1
 8005828:	4614      	mov	r4, r2
 800582a:	18d5      	adds	r5, r2, r3
 800582c:	42ac      	cmp	r4, r5
 800582e:	d101      	bne.n	8005834 <__sfputs_r+0x12>
 8005830:	2000      	movs	r0, #0
 8005832:	e007      	b.n	8005844 <__sfputs_r+0x22>
 8005834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005838:	463a      	mov	r2, r7
 800583a:	4630      	mov	r0, r6
 800583c:	f7ff ffda 	bl	80057f4 <__sfputc_r>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d1f3      	bne.n	800582c <__sfputs_r+0xa>
 8005844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005848 <_vfiprintf_r>:
 8005848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584c:	460d      	mov	r5, r1
 800584e:	b09d      	sub	sp, #116	@ 0x74
 8005850:	4614      	mov	r4, r2
 8005852:	4698      	mov	r8, r3
 8005854:	4606      	mov	r6, r0
 8005856:	b118      	cbz	r0, 8005860 <_vfiprintf_r+0x18>
 8005858:	6a03      	ldr	r3, [r0, #32]
 800585a:	b90b      	cbnz	r3, 8005860 <_vfiprintf_r+0x18>
 800585c:	f7ff fc52 	bl	8005104 <__sinit>
 8005860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005862:	07d9      	lsls	r1, r3, #31
 8005864:	d405      	bmi.n	8005872 <_vfiprintf_r+0x2a>
 8005866:	89ab      	ldrh	r3, [r5, #12]
 8005868:	059a      	lsls	r2, r3, #22
 800586a:	d402      	bmi.n	8005872 <_vfiprintf_r+0x2a>
 800586c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800586e:	f7ff fd6e 	bl	800534e <__retarget_lock_acquire_recursive>
 8005872:	89ab      	ldrh	r3, [r5, #12]
 8005874:	071b      	lsls	r3, r3, #28
 8005876:	d501      	bpl.n	800587c <_vfiprintf_r+0x34>
 8005878:	692b      	ldr	r3, [r5, #16]
 800587a:	b99b      	cbnz	r3, 80058a4 <_vfiprintf_r+0x5c>
 800587c:	4629      	mov	r1, r5
 800587e:	4630      	mov	r0, r6
 8005880:	f000 fb72 	bl	8005f68 <__swsetup_r>
 8005884:	b170      	cbz	r0, 80058a4 <_vfiprintf_r+0x5c>
 8005886:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005888:	07dc      	lsls	r4, r3, #31
 800588a:	d504      	bpl.n	8005896 <_vfiprintf_r+0x4e>
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	b01d      	add	sp, #116	@ 0x74
 8005892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005896:	89ab      	ldrh	r3, [r5, #12]
 8005898:	0598      	lsls	r0, r3, #22
 800589a:	d4f7      	bmi.n	800588c <_vfiprintf_r+0x44>
 800589c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800589e:	f7ff fd57 	bl	8005350 <__retarget_lock_release_recursive>
 80058a2:	e7f3      	b.n	800588c <_vfiprintf_r+0x44>
 80058a4:	2300      	movs	r3, #0
 80058a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80058a8:	2320      	movs	r3, #32
 80058aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80058b2:	2330      	movs	r3, #48	@ 0x30
 80058b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005a64 <_vfiprintf_r+0x21c>
 80058b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058bc:	f04f 0901 	mov.w	r9, #1
 80058c0:	4623      	mov	r3, r4
 80058c2:	469a      	mov	sl, r3
 80058c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058c8:	b10a      	cbz	r2, 80058ce <_vfiprintf_r+0x86>
 80058ca:	2a25      	cmp	r2, #37	@ 0x25
 80058cc:	d1f9      	bne.n	80058c2 <_vfiprintf_r+0x7a>
 80058ce:	ebba 0b04 	subs.w	fp, sl, r4
 80058d2:	d00b      	beq.n	80058ec <_vfiprintf_r+0xa4>
 80058d4:	465b      	mov	r3, fp
 80058d6:	4622      	mov	r2, r4
 80058d8:	4629      	mov	r1, r5
 80058da:	4630      	mov	r0, r6
 80058dc:	f7ff ffa1 	bl	8005822 <__sfputs_r>
 80058e0:	3001      	adds	r0, #1
 80058e2:	f000 80a7 	beq.w	8005a34 <_vfiprintf_r+0x1ec>
 80058e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058e8:	445a      	add	r2, fp
 80058ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80058ec:	f89a 3000 	ldrb.w	r3, [sl]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 809f 	beq.w	8005a34 <_vfiprintf_r+0x1ec>
 80058f6:	2300      	movs	r3, #0
 80058f8:	f04f 32ff 	mov.w	r2, #4294967295
 80058fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005900:	f10a 0a01 	add.w	sl, sl, #1
 8005904:	9304      	str	r3, [sp, #16]
 8005906:	9307      	str	r3, [sp, #28]
 8005908:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800590c:	931a      	str	r3, [sp, #104]	@ 0x68
 800590e:	4654      	mov	r4, sl
 8005910:	2205      	movs	r2, #5
 8005912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005916:	4853      	ldr	r0, [pc, #332]	@ (8005a64 <_vfiprintf_r+0x21c>)
 8005918:	f7fa fc72 	bl	8000200 <memchr>
 800591c:	9a04      	ldr	r2, [sp, #16]
 800591e:	b9d8      	cbnz	r0, 8005958 <_vfiprintf_r+0x110>
 8005920:	06d1      	lsls	r1, r2, #27
 8005922:	bf44      	itt	mi
 8005924:	2320      	movmi	r3, #32
 8005926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800592a:	0713      	lsls	r3, r2, #28
 800592c:	bf44      	itt	mi
 800592e:	232b      	movmi	r3, #43	@ 0x2b
 8005930:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005934:	f89a 3000 	ldrb.w	r3, [sl]
 8005938:	2b2a      	cmp	r3, #42	@ 0x2a
 800593a:	d015      	beq.n	8005968 <_vfiprintf_r+0x120>
 800593c:	9a07      	ldr	r2, [sp, #28]
 800593e:	4654      	mov	r4, sl
 8005940:	2000      	movs	r0, #0
 8005942:	f04f 0c0a 	mov.w	ip, #10
 8005946:	4621      	mov	r1, r4
 8005948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800594c:	3b30      	subs	r3, #48	@ 0x30
 800594e:	2b09      	cmp	r3, #9
 8005950:	d94b      	bls.n	80059ea <_vfiprintf_r+0x1a2>
 8005952:	b1b0      	cbz	r0, 8005982 <_vfiprintf_r+0x13a>
 8005954:	9207      	str	r2, [sp, #28]
 8005956:	e014      	b.n	8005982 <_vfiprintf_r+0x13a>
 8005958:	eba0 0308 	sub.w	r3, r0, r8
 800595c:	fa09 f303 	lsl.w	r3, r9, r3
 8005960:	4313      	orrs	r3, r2
 8005962:	9304      	str	r3, [sp, #16]
 8005964:	46a2      	mov	sl, r4
 8005966:	e7d2      	b.n	800590e <_vfiprintf_r+0xc6>
 8005968:	9b03      	ldr	r3, [sp, #12]
 800596a:	1d19      	adds	r1, r3, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	9103      	str	r1, [sp, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	bfbb      	ittet	lt
 8005974:	425b      	neglt	r3, r3
 8005976:	f042 0202 	orrlt.w	r2, r2, #2
 800597a:	9307      	strge	r3, [sp, #28]
 800597c:	9307      	strlt	r3, [sp, #28]
 800597e:	bfb8      	it	lt
 8005980:	9204      	strlt	r2, [sp, #16]
 8005982:	7823      	ldrb	r3, [r4, #0]
 8005984:	2b2e      	cmp	r3, #46	@ 0x2e
 8005986:	d10a      	bne.n	800599e <_vfiprintf_r+0x156>
 8005988:	7863      	ldrb	r3, [r4, #1]
 800598a:	2b2a      	cmp	r3, #42	@ 0x2a
 800598c:	d132      	bne.n	80059f4 <_vfiprintf_r+0x1ac>
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	1d1a      	adds	r2, r3, #4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	9203      	str	r2, [sp, #12]
 8005996:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800599a:	3402      	adds	r4, #2
 800599c:	9305      	str	r3, [sp, #20]
 800599e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005a74 <_vfiprintf_r+0x22c>
 80059a2:	7821      	ldrb	r1, [r4, #0]
 80059a4:	2203      	movs	r2, #3
 80059a6:	4650      	mov	r0, sl
 80059a8:	f7fa fc2a 	bl	8000200 <memchr>
 80059ac:	b138      	cbz	r0, 80059be <_vfiprintf_r+0x176>
 80059ae:	9b04      	ldr	r3, [sp, #16]
 80059b0:	eba0 000a 	sub.w	r0, r0, sl
 80059b4:	2240      	movs	r2, #64	@ 0x40
 80059b6:	4082      	lsls	r2, r0
 80059b8:	4313      	orrs	r3, r2
 80059ba:	3401      	adds	r4, #1
 80059bc:	9304      	str	r3, [sp, #16]
 80059be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c2:	4829      	ldr	r0, [pc, #164]	@ (8005a68 <_vfiprintf_r+0x220>)
 80059c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059c8:	2206      	movs	r2, #6
 80059ca:	f7fa fc19 	bl	8000200 <memchr>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d03f      	beq.n	8005a52 <_vfiprintf_r+0x20a>
 80059d2:	4b26      	ldr	r3, [pc, #152]	@ (8005a6c <_vfiprintf_r+0x224>)
 80059d4:	bb1b      	cbnz	r3, 8005a1e <_vfiprintf_r+0x1d6>
 80059d6:	9b03      	ldr	r3, [sp, #12]
 80059d8:	3307      	adds	r3, #7
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	3308      	adds	r3, #8
 80059e0:	9303      	str	r3, [sp, #12]
 80059e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059e4:	443b      	add	r3, r7
 80059e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80059e8:	e76a      	b.n	80058c0 <_vfiprintf_r+0x78>
 80059ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ee:	460c      	mov	r4, r1
 80059f0:	2001      	movs	r0, #1
 80059f2:	e7a8      	b.n	8005946 <_vfiprintf_r+0xfe>
 80059f4:	2300      	movs	r3, #0
 80059f6:	3401      	adds	r4, #1
 80059f8:	9305      	str	r3, [sp, #20]
 80059fa:	4619      	mov	r1, r3
 80059fc:	f04f 0c0a 	mov.w	ip, #10
 8005a00:	4620      	mov	r0, r4
 8005a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a06:	3a30      	subs	r2, #48	@ 0x30
 8005a08:	2a09      	cmp	r2, #9
 8005a0a:	d903      	bls.n	8005a14 <_vfiprintf_r+0x1cc>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0c6      	beq.n	800599e <_vfiprintf_r+0x156>
 8005a10:	9105      	str	r1, [sp, #20]
 8005a12:	e7c4      	b.n	800599e <_vfiprintf_r+0x156>
 8005a14:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a18:	4604      	mov	r4, r0
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e7f0      	b.n	8005a00 <_vfiprintf_r+0x1b8>
 8005a1e:	ab03      	add	r3, sp, #12
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	462a      	mov	r2, r5
 8005a24:	4b12      	ldr	r3, [pc, #72]	@ (8005a70 <_vfiprintf_r+0x228>)
 8005a26:	a904      	add	r1, sp, #16
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f3af 8000 	nop.w
 8005a2e:	4607      	mov	r7, r0
 8005a30:	1c78      	adds	r0, r7, #1
 8005a32:	d1d6      	bne.n	80059e2 <_vfiprintf_r+0x19a>
 8005a34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a36:	07d9      	lsls	r1, r3, #31
 8005a38:	d405      	bmi.n	8005a46 <_vfiprintf_r+0x1fe>
 8005a3a:	89ab      	ldrh	r3, [r5, #12]
 8005a3c:	059a      	lsls	r2, r3, #22
 8005a3e:	d402      	bmi.n	8005a46 <_vfiprintf_r+0x1fe>
 8005a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a42:	f7ff fc85 	bl	8005350 <__retarget_lock_release_recursive>
 8005a46:	89ab      	ldrh	r3, [r5, #12]
 8005a48:	065b      	lsls	r3, r3, #25
 8005a4a:	f53f af1f 	bmi.w	800588c <_vfiprintf_r+0x44>
 8005a4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a50:	e71e      	b.n	8005890 <_vfiprintf_r+0x48>
 8005a52:	ab03      	add	r3, sp, #12
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	462a      	mov	r2, r5
 8005a58:	4b05      	ldr	r3, [pc, #20]	@ (8005a70 <_vfiprintf_r+0x228>)
 8005a5a:	a904      	add	r1, sp, #16
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f000 f879 	bl	8005b54 <_printf_i>
 8005a62:	e7e4      	b.n	8005a2e <_vfiprintf_r+0x1e6>
 8005a64:	08006298 	.word	0x08006298
 8005a68:	080062a2 	.word	0x080062a2
 8005a6c:	00000000 	.word	0x00000000
 8005a70:	08005823 	.word	0x08005823
 8005a74:	0800629e 	.word	0x0800629e

08005a78 <_printf_common>:
 8005a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	4616      	mov	r6, r2
 8005a7e:	4698      	mov	r8, r3
 8005a80:	688a      	ldr	r2, [r1, #8]
 8005a82:	690b      	ldr	r3, [r1, #16]
 8005a84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	bfb8      	it	lt
 8005a8c:	4613      	movlt	r3, r2
 8005a8e:	6033      	str	r3, [r6, #0]
 8005a90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a94:	4607      	mov	r7, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	b10a      	cbz	r2, 8005a9e <_printf_common+0x26>
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	6033      	str	r3, [r6, #0]
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	0699      	lsls	r1, r3, #26
 8005aa2:	bf42      	ittt	mi
 8005aa4:	6833      	ldrmi	r3, [r6, #0]
 8005aa6:	3302      	addmi	r3, #2
 8005aa8:	6033      	strmi	r3, [r6, #0]
 8005aaa:	6825      	ldr	r5, [r4, #0]
 8005aac:	f015 0506 	ands.w	r5, r5, #6
 8005ab0:	d106      	bne.n	8005ac0 <_printf_common+0x48>
 8005ab2:	f104 0a19 	add.w	sl, r4, #25
 8005ab6:	68e3      	ldr	r3, [r4, #12]
 8005ab8:	6832      	ldr	r2, [r6, #0]
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	42ab      	cmp	r3, r5
 8005abe:	dc26      	bgt.n	8005b0e <_printf_common+0x96>
 8005ac0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ac4:	6822      	ldr	r2, [r4, #0]
 8005ac6:	3b00      	subs	r3, #0
 8005ac8:	bf18      	it	ne
 8005aca:	2301      	movne	r3, #1
 8005acc:	0692      	lsls	r2, r2, #26
 8005ace:	d42b      	bmi.n	8005b28 <_printf_common+0xb0>
 8005ad0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	47c8      	blx	r9
 8005ada:	3001      	adds	r0, #1
 8005adc:	d01e      	beq.n	8005b1c <_printf_common+0xa4>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	6922      	ldr	r2, [r4, #16]
 8005ae2:	f003 0306 	and.w	r3, r3, #6
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	bf02      	ittt	eq
 8005aea:	68e5      	ldreq	r5, [r4, #12]
 8005aec:	6833      	ldreq	r3, [r6, #0]
 8005aee:	1aed      	subeq	r5, r5, r3
 8005af0:	68a3      	ldr	r3, [r4, #8]
 8005af2:	bf0c      	ite	eq
 8005af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af8:	2500      	movne	r5, #0
 8005afa:	4293      	cmp	r3, r2
 8005afc:	bfc4      	itt	gt
 8005afe:	1a9b      	subgt	r3, r3, r2
 8005b00:	18ed      	addgt	r5, r5, r3
 8005b02:	2600      	movs	r6, #0
 8005b04:	341a      	adds	r4, #26
 8005b06:	42b5      	cmp	r5, r6
 8005b08:	d11a      	bne.n	8005b40 <_printf_common+0xc8>
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	e008      	b.n	8005b20 <_printf_common+0xa8>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4652      	mov	r2, sl
 8005b12:	4641      	mov	r1, r8
 8005b14:	4638      	mov	r0, r7
 8005b16:	47c8      	blx	r9
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d103      	bne.n	8005b24 <_printf_common+0xac>
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b24:	3501      	adds	r5, #1
 8005b26:	e7c6      	b.n	8005ab6 <_printf_common+0x3e>
 8005b28:	18e1      	adds	r1, r4, r3
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	2030      	movs	r0, #48	@ 0x30
 8005b2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b32:	4422      	add	r2, r4
 8005b34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	e7c7      	b.n	8005ad0 <_printf_common+0x58>
 8005b40:	2301      	movs	r3, #1
 8005b42:	4622      	mov	r2, r4
 8005b44:	4641      	mov	r1, r8
 8005b46:	4638      	mov	r0, r7
 8005b48:	47c8      	blx	r9
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	d0e6      	beq.n	8005b1c <_printf_common+0xa4>
 8005b4e:	3601      	adds	r6, #1
 8005b50:	e7d9      	b.n	8005b06 <_printf_common+0x8e>
	...

08005b54 <_printf_i>:
 8005b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b58:	7e0f      	ldrb	r7, [r1, #24]
 8005b5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b5c:	2f78      	cmp	r7, #120	@ 0x78
 8005b5e:	4691      	mov	r9, r2
 8005b60:	4680      	mov	r8, r0
 8005b62:	460c      	mov	r4, r1
 8005b64:	469a      	mov	sl, r3
 8005b66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b6a:	d807      	bhi.n	8005b7c <_printf_i+0x28>
 8005b6c:	2f62      	cmp	r7, #98	@ 0x62
 8005b6e:	d80a      	bhi.n	8005b86 <_printf_i+0x32>
 8005b70:	2f00      	cmp	r7, #0
 8005b72:	f000 80d2 	beq.w	8005d1a <_printf_i+0x1c6>
 8005b76:	2f58      	cmp	r7, #88	@ 0x58
 8005b78:	f000 80b9 	beq.w	8005cee <_printf_i+0x19a>
 8005b7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b84:	e03a      	b.n	8005bfc <_printf_i+0xa8>
 8005b86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b8a:	2b15      	cmp	r3, #21
 8005b8c:	d8f6      	bhi.n	8005b7c <_printf_i+0x28>
 8005b8e:	a101      	add	r1, pc, #4	@ (adr r1, 8005b94 <_printf_i+0x40>)
 8005b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b94:	08005bed 	.word	0x08005bed
 8005b98:	08005c01 	.word	0x08005c01
 8005b9c:	08005b7d 	.word	0x08005b7d
 8005ba0:	08005b7d 	.word	0x08005b7d
 8005ba4:	08005b7d 	.word	0x08005b7d
 8005ba8:	08005b7d 	.word	0x08005b7d
 8005bac:	08005c01 	.word	0x08005c01
 8005bb0:	08005b7d 	.word	0x08005b7d
 8005bb4:	08005b7d 	.word	0x08005b7d
 8005bb8:	08005b7d 	.word	0x08005b7d
 8005bbc:	08005b7d 	.word	0x08005b7d
 8005bc0:	08005d01 	.word	0x08005d01
 8005bc4:	08005c2b 	.word	0x08005c2b
 8005bc8:	08005cbb 	.word	0x08005cbb
 8005bcc:	08005b7d 	.word	0x08005b7d
 8005bd0:	08005b7d 	.word	0x08005b7d
 8005bd4:	08005d23 	.word	0x08005d23
 8005bd8:	08005b7d 	.word	0x08005b7d
 8005bdc:	08005c2b 	.word	0x08005c2b
 8005be0:	08005b7d 	.word	0x08005b7d
 8005be4:	08005b7d 	.word	0x08005b7d
 8005be8:	08005cc3 	.word	0x08005cc3
 8005bec:	6833      	ldr	r3, [r6, #0]
 8005bee:	1d1a      	adds	r2, r3, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6032      	str	r2, [r6, #0]
 8005bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e09d      	b.n	8005d3c <_printf_i+0x1e8>
 8005c00:	6833      	ldr	r3, [r6, #0]
 8005c02:	6820      	ldr	r0, [r4, #0]
 8005c04:	1d19      	adds	r1, r3, #4
 8005c06:	6031      	str	r1, [r6, #0]
 8005c08:	0606      	lsls	r6, r0, #24
 8005c0a:	d501      	bpl.n	8005c10 <_printf_i+0xbc>
 8005c0c:	681d      	ldr	r5, [r3, #0]
 8005c0e:	e003      	b.n	8005c18 <_printf_i+0xc4>
 8005c10:	0645      	lsls	r5, r0, #25
 8005c12:	d5fb      	bpl.n	8005c0c <_printf_i+0xb8>
 8005c14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c18:	2d00      	cmp	r5, #0
 8005c1a:	da03      	bge.n	8005c24 <_printf_i+0xd0>
 8005c1c:	232d      	movs	r3, #45	@ 0x2d
 8005c1e:	426d      	negs	r5, r5
 8005c20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c24:	4859      	ldr	r0, [pc, #356]	@ (8005d8c <_printf_i+0x238>)
 8005c26:	230a      	movs	r3, #10
 8005c28:	e011      	b.n	8005c4e <_printf_i+0xfa>
 8005c2a:	6821      	ldr	r1, [r4, #0]
 8005c2c:	6833      	ldr	r3, [r6, #0]
 8005c2e:	0608      	lsls	r0, r1, #24
 8005c30:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c34:	d402      	bmi.n	8005c3c <_printf_i+0xe8>
 8005c36:	0649      	lsls	r1, r1, #25
 8005c38:	bf48      	it	mi
 8005c3a:	b2ad      	uxthmi	r5, r5
 8005c3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c3e:	4853      	ldr	r0, [pc, #332]	@ (8005d8c <_printf_i+0x238>)
 8005c40:	6033      	str	r3, [r6, #0]
 8005c42:	bf14      	ite	ne
 8005c44:	230a      	movne	r3, #10
 8005c46:	2308      	moveq	r3, #8
 8005c48:	2100      	movs	r1, #0
 8005c4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c4e:	6866      	ldr	r6, [r4, #4]
 8005c50:	60a6      	str	r6, [r4, #8]
 8005c52:	2e00      	cmp	r6, #0
 8005c54:	bfa2      	ittt	ge
 8005c56:	6821      	ldrge	r1, [r4, #0]
 8005c58:	f021 0104 	bicge.w	r1, r1, #4
 8005c5c:	6021      	strge	r1, [r4, #0]
 8005c5e:	b90d      	cbnz	r5, 8005c64 <_printf_i+0x110>
 8005c60:	2e00      	cmp	r6, #0
 8005c62:	d04b      	beq.n	8005cfc <_printf_i+0x1a8>
 8005c64:	4616      	mov	r6, r2
 8005c66:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c6a:	fb03 5711 	mls	r7, r3, r1, r5
 8005c6e:	5dc7      	ldrb	r7, [r0, r7]
 8005c70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c74:	462f      	mov	r7, r5
 8005c76:	42bb      	cmp	r3, r7
 8005c78:	460d      	mov	r5, r1
 8005c7a:	d9f4      	bls.n	8005c66 <_printf_i+0x112>
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d10b      	bne.n	8005c98 <_printf_i+0x144>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	07df      	lsls	r7, r3, #31
 8005c84:	d508      	bpl.n	8005c98 <_printf_i+0x144>
 8005c86:	6923      	ldr	r3, [r4, #16]
 8005c88:	6861      	ldr	r1, [r4, #4]
 8005c8a:	4299      	cmp	r1, r3
 8005c8c:	bfde      	ittt	le
 8005c8e:	2330      	movle	r3, #48	@ 0x30
 8005c90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c98:	1b92      	subs	r2, r2, r6
 8005c9a:	6122      	str	r2, [r4, #16]
 8005c9c:	f8cd a000 	str.w	sl, [sp]
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	aa03      	add	r2, sp, #12
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4640      	mov	r0, r8
 8005ca8:	f7ff fee6 	bl	8005a78 <_printf_common>
 8005cac:	3001      	adds	r0, #1
 8005cae:	d14a      	bne.n	8005d46 <_printf_i+0x1f2>
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb4:	b004      	add	sp, #16
 8005cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	f043 0320 	orr.w	r3, r3, #32
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	4833      	ldr	r0, [pc, #204]	@ (8005d90 <_printf_i+0x23c>)
 8005cc4:	2778      	movs	r7, #120	@ 0x78
 8005cc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	6831      	ldr	r1, [r6, #0]
 8005cce:	061f      	lsls	r7, r3, #24
 8005cd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cd4:	d402      	bmi.n	8005cdc <_printf_i+0x188>
 8005cd6:	065f      	lsls	r7, r3, #25
 8005cd8:	bf48      	it	mi
 8005cda:	b2ad      	uxthmi	r5, r5
 8005cdc:	6031      	str	r1, [r6, #0]
 8005cde:	07d9      	lsls	r1, r3, #31
 8005ce0:	bf44      	itt	mi
 8005ce2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ce6:	6023      	strmi	r3, [r4, #0]
 8005ce8:	b11d      	cbz	r5, 8005cf2 <_printf_i+0x19e>
 8005cea:	2310      	movs	r3, #16
 8005cec:	e7ac      	b.n	8005c48 <_printf_i+0xf4>
 8005cee:	4827      	ldr	r0, [pc, #156]	@ (8005d8c <_printf_i+0x238>)
 8005cf0:	e7e9      	b.n	8005cc6 <_printf_i+0x172>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	f023 0320 	bic.w	r3, r3, #32
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	e7f6      	b.n	8005cea <_printf_i+0x196>
 8005cfc:	4616      	mov	r6, r2
 8005cfe:	e7bd      	b.n	8005c7c <_printf_i+0x128>
 8005d00:	6833      	ldr	r3, [r6, #0]
 8005d02:	6825      	ldr	r5, [r4, #0]
 8005d04:	6961      	ldr	r1, [r4, #20]
 8005d06:	1d18      	adds	r0, r3, #4
 8005d08:	6030      	str	r0, [r6, #0]
 8005d0a:	062e      	lsls	r6, r5, #24
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	d501      	bpl.n	8005d14 <_printf_i+0x1c0>
 8005d10:	6019      	str	r1, [r3, #0]
 8005d12:	e002      	b.n	8005d1a <_printf_i+0x1c6>
 8005d14:	0668      	lsls	r0, r5, #25
 8005d16:	d5fb      	bpl.n	8005d10 <_printf_i+0x1bc>
 8005d18:	8019      	strh	r1, [r3, #0]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6123      	str	r3, [r4, #16]
 8005d1e:	4616      	mov	r6, r2
 8005d20:	e7bc      	b.n	8005c9c <_printf_i+0x148>
 8005d22:	6833      	ldr	r3, [r6, #0]
 8005d24:	1d1a      	adds	r2, r3, #4
 8005d26:	6032      	str	r2, [r6, #0]
 8005d28:	681e      	ldr	r6, [r3, #0]
 8005d2a:	6862      	ldr	r2, [r4, #4]
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4630      	mov	r0, r6
 8005d30:	f7fa fa66 	bl	8000200 <memchr>
 8005d34:	b108      	cbz	r0, 8005d3a <_printf_i+0x1e6>
 8005d36:	1b80      	subs	r0, r0, r6
 8005d38:	6060      	str	r0, [r4, #4]
 8005d3a:	6863      	ldr	r3, [r4, #4]
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d44:	e7aa      	b.n	8005c9c <_printf_i+0x148>
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	4632      	mov	r2, r6
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	47d0      	blx	sl
 8005d50:	3001      	adds	r0, #1
 8005d52:	d0ad      	beq.n	8005cb0 <_printf_i+0x15c>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	079b      	lsls	r3, r3, #30
 8005d58:	d413      	bmi.n	8005d82 <_printf_i+0x22e>
 8005d5a:	68e0      	ldr	r0, [r4, #12]
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	4298      	cmp	r0, r3
 8005d60:	bfb8      	it	lt
 8005d62:	4618      	movlt	r0, r3
 8005d64:	e7a6      	b.n	8005cb4 <_printf_i+0x160>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4632      	mov	r2, r6
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	47d0      	blx	sl
 8005d70:	3001      	adds	r0, #1
 8005d72:	d09d      	beq.n	8005cb0 <_printf_i+0x15c>
 8005d74:	3501      	adds	r5, #1
 8005d76:	68e3      	ldr	r3, [r4, #12]
 8005d78:	9903      	ldr	r1, [sp, #12]
 8005d7a:	1a5b      	subs	r3, r3, r1
 8005d7c:	42ab      	cmp	r3, r5
 8005d7e:	dcf2      	bgt.n	8005d66 <_printf_i+0x212>
 8005d80:	e7eb      	b.n	8005d5a <_printf_i+0x206>
 8005d82:	2500      	movs	r5, #0
 8005d84:	f104 0619 	add.w	r6, r4, #25
 8005d88:	e7f5      	b.n	8005d76 <_printf_i+0x222>
 8005d8a:	bf00      	nop
 8005d8c:	080062a9 	.word	0x080062a9
 8005d90:	080062ba 	.word	0x080062ba

08005d94 <__sflush_r>:
 8005d94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9c:	0716      	lsls	r6, r2, #28
 8005d9e:	4605      	mov	r5, r0
 8005da0:	460c      	mov	r4, r1
 8005da2:	d454      	bmi.n	8005e4e <__sflush_r+0xba>
 8005da4:	684b      	ldr	r3, [r1, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	dc02      	bgt.n	8005db0 <__sflush_r+0x1c>
 8005daa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	dd48      	ble.n	8005e42 <__sflush_r+0xae>
 8005db0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005db2:	2e00      	cmp	r6, #0
 8005db4:	d045      	beq.n	8005e42 <__sflush_r+0xae>
 8005db6:	2300      	movs	r3, #0
 8005db8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005dbc:	682f      	ldr	r7, [r5, #0]
 8005dbe:	6a21      	ldr	r1, [r4, #32]
 8005dc0:	602b      	str	r3, [r5, #0]
 8005dc2:	d030      	beq.n	8005e26 <__sflush_r+0x92>
 8005dc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	0759      	lsls	r1, r3, #29
 8005dca:	d505      	bpl.n	8005dd8 <__sflush_r+0x44>
 8005dcc:	6863      	ldr	r3, [r4, #4]
 8005dce:	1ad2      	subs	r2, r2, r3
 8005dd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005dd2:	b10b      	cbz	r3, 8005dd8 <__sflush_r+0x44>
 8005dd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dd6:	1ad2      	subs	r2, r2, r3
 8005dd8:	2300      	movs	r3, #0
 8005dda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ddc:	6a21      	ldr	r1, [r4, #32]
 8005dde:	4628      	mov	r0, r5
 8005de0:	47b0      	blx	r6
 8005de2:	1c43      	adds	r3, r0, #1
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	d106      	bne.n	8005df6 <__sflush_r+0x62>
 8005de8:	6829      	ldr	r1, [r5, #0]
 8005dea:	291d      	cmp	r1, #29
 8005dec:	d82b      	bhi.n	8005e46 <__sflush_r+0xb2>
 8005dee:	4a2a      	ldr	r2, [pc, #168]	@ (8005e98 <__sflush_r+0x104>)
 8005df0:	410a      	asrs	r2, r1
 8005df2:	07d6      	lsls	r6, r2, #31
 8005df4:	d427      	bmi.n	8005e46 <__sflush_r+0xb2>
 8005df6:	2200      	movs	r2, #0
 8005df8:	6062      	str	r2, [r4, #4]
 8005dfa:	04d9      	lsls	r1, r3, #19
 8005dfc:	6922      	ldr	r2, [r4, #16]
 8005dfe:	6022      	str	r2, [r4, #0]
 8005e00:	d504      	bpl.n	8005e0c <__sflush_r+0x78>
 8005e02:	1c42      	adds	r2, r0, #1
 8005e04:	d101      	bne.n	8005e0a <__sflush_r+0x76>
 8005e06:	682b      	ldr	r3, [r5, #0]
 8005e08:	b903      	cbnz	r3, 8005e0c <__sflush_r+0x78>
 8005e0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e0e:	602f      	str	r7, [r5, #0]
 8005e10:	b1b9      	cbz	r1, 8005e42 <__sflush_r+0xae>
 8005e12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e16:	4299      	cmp	r1, r3
 8005e18:	d002      	beq.n	8005e20 <__sflush_r+0x8c>
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f7ff fa9a 	bl	8005354 <_free_r>
 8005e20:	2300      	movs	r3, #0
 8005e22:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e24:	e00d      	b.n	8005e42 <__sflush_r+0xae>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4628      	mov	r0, r5
 8005e2a:	47b0      	blx	r6
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	1c50      	adds	r0, r2, #1
 8005e30:	d1c9      	bne.n	8005dc6 <__sflush_r+0x32>
 8005e32:	682b      	ldr	r3, [r5, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0c6      	beq.n	8005dc6 <__sflush_r+0x32>
 8005e38:	2b1d      	cmp	r3, #29
 8005e3a:	d001      	beq.n	8005e40 <__sflush_r+0xac>
 8005e3c:	2b16      	cmp	r3, #22
 8005e3e:	d11e      	bne.n	8005e7e <__sflush_r+0xea>
 8005e40:	602f      	str	r7, [r5, #0]
 8005e42:	2000      	movs	r0, #0
 8005e44:	e022      	b.n	8005e8c <__sflush_r+0xf8>
 8005e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e4a:	b21b      	sxth	r3, r3
 8005e4c:	e01b      	b.n	8005e86 <__sflush_r+0xf2>
 8005e4e:	690f      	ldr	r7, [r1, #16]
 8005e50:	2f00      	cmp	r7, #0
 8005e52:	d0f6      	beq.n	8005e42 <__sflush_r+0xae>
 8005e54:	0793      	lsls	r3, r2, #30
 8005e56:	680e      	ldr	r6, [r1, #0]
 8005e58:	bf08      	it	eq
 8005e5a:	694b      	ldreq	r3, [r1, #20]
 8005e5c:	600f      	str	r7, [r1, #0]
 8005e5e:	bf18      	it	ne
 8005e60:	2300      	movne	r3, #0
 8005e62:	eba6 0807 	sub.w	r8, r6, r7
 8005e66:	608b      	str	r3, [r1, #8]
 8005e68:	f1b8 0f00 	cmp.w	r8, #0
 8005e6c:	dde9      	ble.n	8005e42 <__sflush_r+0xae>
 8005e6e:	6a21      	ldr	r1, [r4, #32]
 8005e70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e72:	4643      	mov	r3, r8
 8005e74:	463a      	mov	r2, r7
 8005e76:	4628      	mov	r0, r5
 8005e78:	47b0      	blx	r6
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	dc08      	bgt.n	8005e90 <__sflush_r+0xfc>
 8005e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e86:	81a3      	strh	r3, [r4, #12]
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e90:	4407      	add	r7, r0
 8005e92:	eba8 0800 	sub.w	r8, r8, r0
 8005e96:	e7e7      	b.n	8005e68 <__sflush_r+0xd4>
 8005e98:	dfbffffe 	.word	0xdfbffffe

08005e9c <_fflush_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	690b      	ldr	r3, [r1, #16]
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	b913      	cbnz	r3, 8005eac <_fflush_r+0x10>
 8005ea6:	2500      	movs	r5, #0
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	b118      	cbz	r0, 8005eb6 <_fflush_r+0x1a>
 8005eae:	6a03      	ldr	r3, [r0, #32]
 8005eb0:	b90b      	cbnz	r3, 8005eb6 <_fflush_r+0x1a>
 8005eb2:	f7ff f927 	bl	8005104 <__sinit>
 8005eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f3      	beq.n	8005ea6 <_fflush_r+0xa>
 8005ebe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ec0:	07d0      	lsls	r0, r2, #31
 8005ec2:	d404      	bmi.n	8005ece <_fflush_r+0x32>
 8005ec4:	0599      	lsls	r1, r3, #22
 8005ec6:	d402      	bmi.n	8005ece <_fflush_r+0x32>
 8005ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eca:	f7ff fa40 	bl	800534e <__retarget_lock_acquire_recursive>
 8005ece:	4628      	mov	r0, r5
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	f7ff ff5f 	bl	8005d94 <__sflush_r>
 8005ed6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ed8:	07da      	lsls	r2, r3, #31
 8005eda:	4605      	mov	r5, r0
 8005edc:	d4e4      	bmi.n	8005ea8 <_fflush_r+0xc>
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	059b      	lsls	r3, r3, #22
 8005ee2:	d4e1      	bmi.n	8005ea8 <_fflush_r+0xc>
 8005ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ee6:	f7ff fa33 	bl	8005350 <__retarget_lock_release_recursive>
 8005eea:	e7dd      	b.n	8005ea8 <_fflush_r+0xc>

08005eec <__swbuf_r>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	460e      	mov	r6, r1
 8005ef0:	4614      	mov	r4, r2
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	b118      	cbz	r0, 8005efe <__swbuf_r+0x12>
 8005ef6:	6a03      	ldr	r3, [r0, #32]
 8005ef8:	b90b      	cbnz	r3, 8005efe <__swbuf_r+0x12>
 8005efa:	f7ff f903 	bl	8005104 <__sinit>
 8005efe:	69a3      	ldr	r3, [r4, #24]
 8005f00:	60a3      	str	r3, [r4, #8]
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	071a      	lsls	r2, r3, #28
 8005f06:	d501      	bpl.n	8005f0c <__swbuf_r+0x20>
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	b943      	cbnz	r3, 8005f1e <__swbuf_r+0x32>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f82a 	bl	8005f68 <__swsetup_r>
 8005f14:	b118      	cbz	r0, 8005f1e <__swbuf_r+0x32>
 8005f16:	f04f 37ff 	mov.w	r7, #4294967295
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	6922      	ldr	r2, [r4, #16]
 8005f22:	1a98      	subs	r0, r3, r2
 8005f24:	6963      	ldr	r3, [r4, #20]
 8005f26:	b2f6      	uxtb	r6, r6
 8005f28:	4283      	cmp	r3, r0
 8005f2a:	4637      	mov	r7, r6
 8005f2c:	dc05      	bgt.n	8005f3a <__swbuf_r+0x4e>
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4628      	mov	r0, r5
 8005f32:	f7ff ffb3 	bl	8005e9c <_fflush_r>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	d1ed      	bne.n	8005f16 <__swbuf_r+0x2a>
 8005f3a:	68a3      	ldr	r3, [r4, #8]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	60a3      	str	r3, [r4, #8]
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	6022      	str	r2, [r4, #0]
 8005f46:	701e      	strb	r6, [r3, #0]
 8005f48:	6962      	ldr	r2, [r4, #20]
 8005f4a:	1c43      	adds	r3, r0, #1
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d004      	beq.n	8005f5a <__swbuf_r+0x6e>
 8005f50:	89a3      	ldrh	r3, [r4, #12]
 8005f52:	07db      	lsls	r3, r3, #31
 8005f54:	d5e1      	bpl.n	8005f1a <__swbuf_r+0x2e>
 8005f56:	2e0a      	cmp	r6, #10
 8005f58:	d1df      	bne.n	8005f1a <__swbuf_r+0x2e>
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f7ff ff9d 	bl	8005e9c <_fflush_r>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d0d9      	beq.n	8005f1a <__swbuf_r+0x2e>
 8005f66:	e7d6      	b.n	8005f16 <__swbuf_r+0x2a>

08005f68 <__swsetup_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4b29      	ldr	r3, [pc, #164]	@ (8006010 <__swsetup_r+0xa8>)
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	460c      	mov	r4, r1
 8005f72:	b118      	cbz	r0, 8005f7c <__swsetup_r+0x14>
 8005f74:	6a03      	ldr	r3, [r0, #32]
 8005f76:	b90b      	cbnz	r3, 8005f7c <__swsetup_r+0x14>
 8005f78:	f7ff f8c4 	bl	8005104 <__sinit>
 8005f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f80:	0719      	lsls	r1, r3, #28
 8005f82:	d422      	bmi.n	8005fca <__swsetup_r+0x62>
 8005f84:	06da      	lsls	r2, r3, #27
 8005f86:	d407      	bmi.n	8005f98 <__swsetup_r+0x30>
 8005f88:	2209      	movs	r2, #9
 8005f8a:	602a      	str	r2, [r5, #0]
 8005f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	f04f 30ff 	mov.w	r0, #4294967295
 8005f96:	e033      	b.n	8006000 <__swsetup_r+0x98>
 8005f98:	0758      	lsls	r0, r3, #29
 8005f9a:	d512      	bpl.n	8005fc2 <__swsetup_r+0x5a>
 8005f9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f9e:	b141      	cbz	r1, 8005fb2 <__swsetup_r+0x4a>
 8005fa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fa4:	4299      	cmp	r1, r3
 8005fa6:	d002      	beq.n	8005fae <__swsetup_r+0x46>
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f7ff f9d3 	bl	8005354 <_free_r>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fb2:	89a3      	ldrh	r3, [r4, #12]
 8005fb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005fb8:	81a3      	strh	r3, [r4, #12]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6063      	str	r3, [r4, #4]
 8005fbe:	6923      	ldr	r3, [r4, #16]
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	89a3      	ldrh	r3, [r4, #12]
 8005fc4:	f043 0308 	orr.w	r3, r3, #8
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	6923      	ldr	r3, [r4, #16]
 8005fcc:	b94b      	cbnz	r3, 8005fe2 <__swsetup_r+0x7a>
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fd8:	d003      	beq.n	8005fe2 <__swsetup_r+0x7a>
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 f8a5 	bl	800612c <__smakebuf_r>
 8005fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fe6:	f013 0201 	ands.w	r2, r3, #1
 8005fea:	d00a      	beq.n	8006002 <__swsetup_r+0x9a>
 8005fec:	2200      	movs	r2, #0
 8005fee:	60a2      	str	r2, [r4, #8]
 8005ff0:	6962      	ldr	r2, [r4, #20]
 8005ff2:	4252      	negs	r2, r2
 8005ff4:	61a2      	str	r2, [r4, #24]
 8005ff6:	6922      	ldr	r2, [r4, #16]
 8005ff8:	b942      	cbnz	r2, 800600c <__swsetup_r+0xa4>
 8005ffa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ffe:	d1c5      	bne.n	8005f8c <__swsetup_r+0x24>
 8006000:	bd38      	pop	{r3, r4, r5, pc}
 8006002:	0799      	lsls	r1, r3, #30
 8006004:	bf58      	it	pl
 8006006:	6962      	ldrpl	r2, [r4, #20]
 8006008:	60a2      	str	r2, [r4, #8]
 800600a:	e7f4      	b.n	8005ff6 <__swsetup_r+0x8e>
 800600c:	2000      	movs	r0, #0
 800600e:	e7f7      	b.n	8006000 <__swsetup_r+0x98>
 8006010:	20000028 	.word	0x20000028

08006014 <memmove>:
 8006014:	4288      	cmp	r0, r1
 8006016:	b510      	push	{r4, lr}
 8006018:	eb01 0402 	add.w	r4, r1, r2
 800601c:	d902      	bls.n	8006024 <memmove+0x10>
 800601e:	4284      	cmp	r4, r0
 8006020:	4623      	mov	r3, r4
 8006022:	d807      	bhi.n	8006034 <memmove+0x20>
 8006024:	1e43      	subs	r3, r0, #1
 8006026:	42a1      	cmp	r1, r4
 8006028:	d008      	beq.n	800603c <memmove+0x28>
 800602a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800602e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006032:	e7f8      	b.n	8006026 <memmove+0x12>
 8006034:	4402      	add	r2, r0
 8006036:	4601      	mov	r1, r0
 8006038:	428a      	cmp	r2, r1
 800603a:	d100      	bne.n	800603e <memmove+0x2a>
 800603c:	bd10      	pop	{r4, pc}
 800603e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006046:	e7f7      	b.n	8006038 <memmove+0x24>

08006048 <_sbrk_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4d06      	ldr	r5, [pc, #24]	@ (8006064 <_sbrk_r+0x1c>)
 800604c:	2300      	movs	r3, #0
 800604e:	4604      	mov	r4, r0
 8006050:	4608      	mov	r0, r1
 8006052:	602b      	str	r3, [r5, #0]
 8006054:	f7fc f8a0 	bl	8002198 <_sbrk>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d102      	bne.n	8006062 <_sbrk_r+0x1a>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	b103      	cbz	r3, 8006062 <_sbrk_r+0x1a>
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	bd38      	pop	{r3, r4, r5, pc}
 8006064:	200002d0 	.word	0x200002d0

08006068 <memcpy>:
 8006068:	440a      	add	r2, r1
 800606a:	4291      	cmp	r1, r2
 800606c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006070:	d100      	bne.n	8006074 <memcpy+0xc>
 8006072:	4770      	bx	lr
 8006074:	b510      	push	{r4, lr}
 8006076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800607a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800607e:	4291      	cmp	r1, r2
 8006080:	d1f9      	bne.n	8006076 <memcpy+0xe>
 8006082:	bd10      	pop	{r4, pc}

08006084 <_realloc_r>:
 8006084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006088:	4680      	mov	r8, r0
 800608a:	4615      	mov	r5, r2
 800608c:	460c      	mov	r4, r1
 800608e:	b921      	cbnz	r1, 800609a <_realloc_r+0x16>
 8006090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006094:	4611      	mov	r1, r2
 8006096:	f7ff b9c9 	b.w	800542c <_malloc_r>
 800609a:	b92a      	cbnz	r2, 80060a8 <_realloc_r+0x24>
 800609c:	f7ff f95a 	bl	8005354 <_free_r>
 80060a0:	2400      	movs	r4, #0
 80060a2:	4620      	mov	r0, r4
 80060a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a8:	f000 f89e 	bl	80061e8 <_malloc_usable_size_r>
 80060ac:	4285      	cmp	r5, r0
 80060ae:	4606      	mov	r6, r0
 80060b0:	d802      	bhi.n	80060b8 <_realloc_r+0x34>
 80060b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060b6:	d8f4      	bhi.n	80060a2 <_realloc_r+0x1e>
 80060b8:	4629      	mov	r1, r5
 80060ba:	4640      	mov	r0, r8
 80060bc:	f7ff f9b6 	bl	800542c <_malloc_r>
 80060c0:	4607      	mov	r7, r0
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d0ec      	beq.n	80060a0 <_realloc_r+0x1c>
 80060c6:	42b5      	cmp	r5, r6
 80060c8:	462a      	mov	r2, r5
 80060ca:	4621      	mov	r1, r4
 80060cc:	bf28      	it	cs
 80060ce:	4632      	movcs	r2, r6
 80060d0:	f7ff ffca 	bl	8006068 <memcpy>
 80060d4:	4621      	mov	r1, r4
 80060d6:	4640      	mov	r0, r8
 80060d8:	f7ff f93c 	bl	8005354 <_free_r>
 80060dc:	463c      	mov	r4, r7
 80060de:	e7e0      	b.n	80060a2 <_realloc_r+0x1e>

080060e0 <__swhatbuf_r>:
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	460c      	mov	r4, r1
 80060e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e8:	2900      	cmp	r1, #0
 80060ea:	b096      	sub	sp, #88	@ 0x58
 80060ec:	4615      	mov	r5, r2
 80060ee:	461e      	mov	r6, r3
 80060f0:	da0d      	bge.n	800610e <__swhatbuf_r+0x2e>
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80060f8:	f04f 0100 	mov.w	r1, #0
 80060fc:	bf14      	ite	ne
 80060fe:	2340      	movne	r3, #64	@ 0x40
 8006100:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006104:	2000      	movs	r0, #0
 8006106:	6031      	str	r1, [r6, #0]
 8006108:	602b      	str	r3, [r5, #0]
 800610a:	b016      	add	sp, #88	@ 0x58
 800610c:	bd70      	pop	{r4, r5, r6, pc}
 800610e:	466a      	mov	r2, sp
 8006110:	f000 f848 	bl	80061a4 <_fstat_r>
 8006114:	2800      	cmp	r0, #0
 8006116:	dbec      	blt.n	80060f2 <__swhatbuf_r+0x12>
 8006118:	9901      	ldr	r1, [sp, #4]
 800611a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800611e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006122:	4259      	negs	r1, r3
 8006124:	4159      	adcs	r1, r3
 8006126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800612a:	e7eb      	b.n	8006104 <__swhatbuf_r+0x24>

0800612c <__smakebuf_r>:
 800612c:	898b      	ldrh	r3, [r1, #12]
 800612e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006130:	079d      	lsls	r5, r3, #30
 8006132:	4606      	mov	r6, r0
 8006134:	460c      	mov	r4, r1
 8006136:	d507      	bpl.n	8006148 <__smakebuf_r+0x1c>
 8006138:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	6123      	str	r3, [r4, #16]
 8006140:	2301      	movs	r3, #1
 8006142:	6163      	str	r3, [r4, #20]
 8006144:	b003      	add	sp, #12
 8006146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006148:	ab01      	add	r3, sp, #4
 800614a:	466a      	mov	r2, sp
 800614c:	f7ff ffc8 	bl	80060e0 <__swhatbuf_r>
 8006150:	9f00      	ldr	r7, [sp, #0]
 8006152:	4605      	mov	r5, r0
 8006154:	4639      	mov	r1, r7
 8006156:	4630      	mov	r0, r6
 8006158:	f7ff f968 	bl	800542c <_malloc_r>
 800615c:	b948      	cbnz	r0, 8006172 <__smakebuf_r+0x46>
 800615e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006162:	059a      	lsls	r2, r3, #22
 8006164:	d4ee      	bmi.n	8006144 <__smakebuf_r+0x18>
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	f043 0302 	orr.w	r3, r3, #2
 800616e:	81a3      	strh	r3, [r4, #12]
 8006170:	e7e2      	b.n	8006138 <__smakebuf_r+0xc>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	6020      	str	r0, [r4, #0]
 8006176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800617a:	81a3      	strh	r3, [r4, #12]
 800617c:	9b01      	ldr	r3, [sp, #4]
 800617e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006182:	b15b      	cbz	r3, 800619c <__smakebuf_r+0x70>
 8006184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006188:	4630      	mov	r0, r6
 800618a:	f000 f81d 	bl	80061c8 <_isatty_r>
 800618e:	b128      	cbz	r0, 800619c <__smakebuf_r+0x70>
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	81a3      	strh	r3, [r4, #12]
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	431d      	orrs	r5, r3
 80061a0:	81a5      	strh	r5, [r4, #12]
 80061a2:	e7cf      	b.n	8006144 <__smakebuf_r+0x18>

080061a4 <_fstat_r>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	4d07      	ldr	r5, [pc, #28]	@ (80061c4 <_fstat_r+0x20>)
 80061a8:	2300      	movs	r3, #0
 80061aa:	4604      	mov	r4, r0
 80061ac:	4608      	mov	r0, r1
 80061ae:	4611      	mov	r1, r2
 80061b0:	602b      	str	r3, [r5, #0]
 80061b2:	f7fb ffc8 	bl	8002146 <_fstat>
 80061b6:	1c43      	adds	r3, r0, #1
 80061b8:	d102      	bne.n	80061c0 <_fstat_r+0x1c>
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	b103      	cbz	r3, 80061c0 <_fstat_r+0x1c>
 80061be:	6023      	str	r3, [r4, #0]
 80061c0:	bd38      	pop	{r3, r4, r5, pc}
 80061c2:	bf00      	nop
 80061c4:	200002d0 	.word	0x200002d0

080061c8 <_isatty_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4d06      	ldr	r5, [pc, #24]	@ (80061e4 <_isatty_r+0x1c>)
 80061cc:	2300      	movs	r3, #0
 80061ce:	4604      	mov	r4, r0
 80061d0:	4608      	mov	r0, r1
 80061d2:	602b      	str	r3, [r5, #0]
 80061d4:	f7fb ffc7 	bl	8002166 <_isatty>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_isatty_r+0x1a>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_isatty_r+0x1a>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	200002d0 	.word	0x200002d0

080061e8 <_malloc_usable_size_r>:
 80061e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ec:	1f18      	subs	r0, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bfbc      	itt	lt
 80061f2:	580b      	ldrlt	r3, [r1, r0]
 80061f4:	18c0      	addlt	r0, r0, r3
 80061f6:	4770      	bx	lr

080061f8 <_init>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	bf00      	nop
 80061fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fe:	bc08      	pop	{r3}
 8006200:	469e      	mov	lr, r3
 8006202:	4770      	bx	lr

08006204 <_fini>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr
