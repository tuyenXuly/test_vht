
keypad_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003364  08003364  00004364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a8  080033a8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080033a8  080033a8  000043a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033b0  080033b0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033b0  080033b0  000043b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033b4  080033b4  000043b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080033b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006cc  2000000c  080033c4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  080033c4  000056d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011490  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f9  00000000  00000000  000164cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  000189c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfd  00000000  00000000  00019a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001638e  00000000  00000000  0001a795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115aa  00000000  00000000  00030b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a922c  00000000  00000000  000420cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb2f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b8  00000000  00000000  000eb33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000ef9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800334c 	.word	0x0800334c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	0800334c 	.word	0x0800334c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2000010c 	.word	0x2000010c

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fa0e 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f804 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 f86e 	bl	8000650 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <main+0x10>

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	@ 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fea6 	bl	80032d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b29      	ldr	r3, [pc, #164]	@ (8000648 <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a28      	ldr	r2, [pc, #160]	@ (8000648 <SystemClock_Config+0xd0>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ac:	4b26      	ldr	r3, [pc, #152]	@ (8000648 <SystemClock_Config+0xd0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b23      	ldr	r3, [pc, #140]	@ (800064c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005c4:	4a21      	ldr	r2, [pc, #132]	@ (800064c <SystemClock_Config+0xd4>)
 80005c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005ec:	2310      	movs	r3, #16
 80005ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fc82 	bl	8000f0c <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800060e:	f000 f8af 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000622:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fee4 	bl	80013fc <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063a:	f000 f899 	bl	8000770 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	@ 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b35      	ldr	r3, [pc, #212]	@ (8000740 <MX_GPIO_Init+0xf0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a34      	ldr	r2, [pc, #208]	@ (8000740 <MX_GPIO_Init+0xf0>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b32      	ldr	r3, [pc, #200]	@ (8000740 <MX_GPIO_Init+0xf0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b2e      	ldr	r3, [pc, #184]	@ (8000740 <MX_GPIO_Init+0xf0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a2d      	ldr	r2, [pc, #180]	@ (8000740 <MX_GPIO_Init+0xf0>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b2b      	ldr	r3, [pc, #172]	@ (8000740 <MX_GPIO_Init+0xf0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <MX_GPIO_Init+0xf0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a26      	ldr	r2, [pc, #152]	@ (8000740 <MX_GPIO_Init+0xf0>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <MX_GPIO_Init+0xf0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <MX_GPIO_Init+0xf0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a1f      	ldr	r2, [pc, #124]	@ (8000740 <MX_GPIO_Init+0xf0>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <MX_GPIO_Init+0xf0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2120      	movs	r1, #32
 80006da:	481a      	ldr	r0, [pc, #104]	@ (8000744 <MX_GPIO_Init+0xf4>)
 80006dc:	f000 fbfc 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	4814      	ldr	r0, [pc, #80]	@ (8000748 <MX_GPIO_Init+0xf8>)
 80006f8:	f000 fa6a 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006fc:	230c      	movs	r3, #12
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000700:	2302      	movs	r3, #2
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800070c:	2307      	movs	r3, #7
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	480b      	ldr	r0, [pc, #44]	@ (8000744 <MX_GPIO_Init+0xf4>)
 8000718:	f000 fa5a 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800071c:	2320      	movs	r3, #32
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4804      	ldr	r0, [pc, #16]	@ (8000744 <MX_GPIO_Init+0xf4>)
 8000734:	f000 fa4c 	bl	8000bd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	@ 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40020000 	.word	0x40020000
 8000748:	40020800 	.word	0x40020800

0800074c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a04      	ldr	r2, [pc, #16]	@ (800076c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d101      	bne.n	8000762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800075e:	f000 f935 	bl	80009cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40000400 	.word	0x40000400

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <Error_Handler+0x8>

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	4a0f      	ldr	r2, [pc, #60]	@ (80007c8 <HAL_MspInit+0x4c>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6453      	str	r3, [r2, #68]	@ 0x44
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <HAL_MspInit+0x4c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <HAL_MspInit+0x4c>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <HAL_MspInit+0x4c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08e      	sub	sp, #56	@ 0x38
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	4b33      	ldr	r3, [pc, #204]	@ (80008b0 <HAL_InitTick+0xe4>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e4:	4a32      	ldr	r2, [pc, #200]	@ (80008b0 <HAL_InitTick+0xe4>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ec:	4b30      	ldr	r3, [pc, #192]	@ (80008b0 <HAL_InitTick+0xe4>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f0:	f003 0302 	and.w	r3, r3, #2
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007f8:	f107 0210 	add.w	r2, r7, #16
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4611      	mov	r1, r2
 8000802:	4618      	mov	r0, r3
 8000804:	f001 f806 	bl	8001814 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000808:	6a3b      	ldr	r3, [r7, #32]
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800080c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800080e:	2b00      	cmp	r3, #0
 8000810:	d103      	bne.n	800081a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000812:	f000 ffeb 	bl	80017ec <HAL_RCC_GetPCLK1Freq>
 8000816:	6378      	str	r0, [r7, #52]	@ 0x34
 8000818:	e004      	b.n	8000824 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800081a:	f000 ffe7 	bl	80017ec <HAL_RCC_GetPCLK1Freq>
 800081e:	4603      	mov	r3, r0
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000826:	4a23      	ldr	r2, [pc, #140]	@ (80008b4 <HAL_InitTick+0xe8>)
 8000828:	fba2 2303 	umull	r2, r3, r2, r3
 800082c:	0c9b      	lsrs	r3, r3, #18
 800082e:	3b01      	subs	r3, #1
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000832:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <HAL_InitTick+0xec>)
 8000834:	4a21      	ldr	r2, [pc, #132]	@ (80008bc <HAL_InitTick+0xf0>)
 8000836:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000838:	4b1f      	ldr	r3, [pc, #124]	@ (80008b8 <HAL_InitTick+0xec>)
 800083a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800083e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000840:	4a1d      	ldr	r2, [pc, #116]	@ (80008b8 <HAL_InitTick+0xec>)
 8000842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000844:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000846:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <HAL_InitTick+0xec>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <HAL_InitTick+0xec>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <HAL_InitTick+0xec>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000858:	4817      	ldr	r0, [pc, #92]	@ (80008b8 <HAL_InitTick+0xec>)
 800085a:	f001 f80d 	bl	8001878 <HAL_TIM_Base_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000864:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000868:	2b00      	cmp	r3, #0
 800086a:	d11b      	bne.n	80008a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800086c:	4812      	ldr	r0, [pc, #72]	@ (80008b8 <HAL_InitTick+0xec>)
 800086e:	f001 f85d 	bl	800192c <HAL_TIM_Base_Start_IT>
 8000872:	4603      	mov	r3, r0
 8000874:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000878:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800087c:	2b00      	cmp	r3, #0
 800087e:	d111      	bne.n	80008a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000880:	201d      	movs	r0, #29
 8000882:	f000 f997 	bl	8000bb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b0f      	cmp	r3, #15
 800088a:	d808      	bhi.n	800089e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800088c:	2200      	movs	r2, #0
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	201d      	movs	r0, #29
 8000892:	f000 f973 	bl	8000b7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000896:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <HAL_InitTick+0xf4>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	e002      	b.n	80008a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3738      	adds	r7, #56	@ 0x38
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	431bde83 	.word	0x431bde83
 80008b8:	20000028 	.word	0x20000028
 80008bc:	40000400 	.word	0x40000400
 80008c0:	20000004 	.word	0x20000004

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <NMI_Handler+0x4>

080008cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <MemManage_Handler+0x4>

080008dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
	...

080008fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000900:	4802      	ldr	r0, [pc, #8]	@ (800090c <TIM3_IRQHandler+0x10>)
 8000902:	f001 f875 	bl	80019f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000028 	.word	0x20000028

08000910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800096c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000938:	f7ff ffea 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	@ (8000970 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	@ (8000974 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	@ (8000980 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000962:	f002 fcc1 	bl	80032e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000966:	f7ff fdfd 	bl	8000564 <main>
  bx  lr    
 800096a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800096c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000978:	080033b8 	.word	0x080033b8
  ldr r2, =_sbss
 800097c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000980:	200006d8 	.word	0x200006d8

08000984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <HAL_Init+0x40>)
 8000992:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <HAL_Init+0x40>)
 800099e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	@ (80009c8 <HAL_Init+0x40>)
 80009aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f8d8 	bl	8000b66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff ff08 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff fede 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023c00 	.word	0x40023c00

080009cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <HAL_IncTick+0x20>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_IncTick+0x24>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <HAL_IncTick+0x24>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000070 	.word	0x20000070

080009f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;
 80009f8:	4b03      	ldr	r3, [pc, #12]	@ (8000a08 <HAL_GetTick+0x14>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000070 	.word	0x20000070

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db0b      	blt.n	8000a9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 021f 	and.w	r2, r3, #31
 8000a88:	4907      	ldr	r1, [pc, #28]	@ (8000aa8 <__NVIC_EnableIRQ+0x38>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	095b      	lsrs	r3, r3, #5
 8000a90:	2001      	movs	r0, #1
 8000a92:	fa00 f202 	lsl.w	r2, r0, r2
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	@ (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	@ (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	@ 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	@ 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ff4c 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8e:	f7ff ff61 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000b92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	68b9      	ldr	r1, [r7, #8]
 8000b98:	6978      	ldr	r0, [r7, #20]
 8000b9a:	f7ff ffb1 	bl	8000b00 <NVIC_EncodePriority>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff80 	bl	8000aac <__NVIC_SetPriority>
}
 8000bac:	bf00      	nop
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff54 	bl	8000a70 <__NVIC_EnableIRQ>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	@ 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
 8000bea:	e159      	b.n	8000ea0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bec:	2201      	movs	r2, #1
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	f040 8148 	bne.w	8000e9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d005      	beq.n	8000c22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d130      	bne.n	8000c84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c58:	2201      	movs	r2, #1
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	091b      	lsrs	r3, r3, #4
 8000c6e:	f003 0201 	and.w	r2, r3, #1
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d017      	beq.n	8000cc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d123      	bne.n	8000d14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	08da      	lsrs	r2, r3, #3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3208      	adds	r2, #8
 8000cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	08da      	lsrs	r2, r3, #3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3208      	adds	r2, #8
 8000d0e:	69b9      	ldr	r1, [r7, #24]
 8000d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0203 	and.w	r2, r3, #3
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 80a2 	beq.w	8000e9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b57      	ldr	r3, [pc, #348]	@ (8000eb8 <HAL_GPIO_Init+0x2e8>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	4a56      	ldr	r2, [pc, #344]	@ (8000eb8 <HAL_GPIO_Init+0x2e8>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d66:	4b54      	ldr	r3, [pc, #336]	@ (8000eb8 <HAL_GPIO_Init+0x2e8>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d72:	4a52      	ldr	r2, [pc, #328]	@ (8000ebc <HAL_GPIO_Init+0x2ec>)
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	3302      	adds	r3, #2
 8000d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a49      	ldr	r2, [pc, #292]	@ (8000ec0 <HAL_GPIO_Init+0x2f0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d019      	beq.n	8000dd2 <HAL_GPIO_Init+0x202>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a48      	ldr	r2, [pc, #288]	@ (8000ec4 <HAL_GPIO_Init+0x2f4>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d013      	beq.n	8000dce <HAL_GPIO_Init+0x1fe>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a47      	ldr	r2, [pc, #284]	@ (8000ec8 <HAL_GPIO_Init+0x2f8>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d00d      	beq.n	8000dca <HAL_GPIO_Init+0x1fa>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a46      	ldr	r2, [pc, #280]	@ (8000ecc <HAL_GPIO_Init+0x2fc>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_Init+0x1f6>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a45      	ldr	r2, [pc, #276]	@ (8000ed0 <HAL_GPIO_Init+0x300>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_GPIO_Init+0x1f2>
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	e008      	b.n	8000dd4 <HAL_GPIO_Init+0x204>
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x204>
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x204>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x204>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x204>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	f002 0203 	and.w	r2, r2, #3
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de4:	4935      	ldr	r1, [pc, #212]	@ (8000ebc <HAL_GPIO_Init+0x2ec>)
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df2:	4b38      	ldr	r3, [pc, #224]	@ (8000ed4 <HAL_GPIO_Init+0x304>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e16:	4a2f      	ldr	r2, [pc, #188]	@ (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e40:	4a24      	ldr	r2, [pc, #144]	@ (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e46:	4b23      	ldr	r3, [pc, #140]	@ (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e70:	4b18      	ldr	r3, [pc, #96]	@ (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e94:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	f67f aea2 	bls.w	8000bec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3724      	adds	r7, #36	@ 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40013c00 	.word	0x40013c00

08000ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee8:	787b      	ldrb	r3, [r7, #1]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ef4:	e003      	b.n	8000efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ef6:	887b      	ldrh	r3, [r7, #2]
 8000ef8:	041a      	lsls	r2, r3, #16
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	619a      	str	r2, [r3, #24]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e267      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d075      	beq.n	8001016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f2a:	4b88      	ldr	r3, [pc, #544]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d00c      	beq.n	8000f50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f36:	4b85      	ldr	r3, [pc, #532]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d112      	bne.n	8000f68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f42:	4b82      	ldr	r3, [pc, #520]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f4e:	d10b      	bne.n	8000f68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f50:	4b7e      	ldr	r3, [pc, #504]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d05b      	beq.n	8001014 <HAL_RCC_OscConfig+0x108>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d157      	bne.n	8001014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e242      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f70:	d106      	bne.n	8000f80 <HAL_RCC_OscConfig+0x74>
 8000f72:	4b76      	ldr	r3, [pc, #472]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a75      	ldr	r2, [pc, #468]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e01d      	b.n	8000fbc <HAL_RCC_OscConfig+0xb0>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x98>
 8000f8a:	4b70      	ldr	r3, [pc, #448]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a6f      	ldr	r2, [pc, #444]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b6d      	ldr	r3, [pc, #436]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a6c      	ldr	r2, [pc, #432]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e00b      	b.n	8000fbc <HAL_RCC_OscConfig+0xb0>
 8000fa4:	4b69      	ldr	r3, [pc, #420]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a68      	ldr	r2, [pc, #416]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b66      	ldr	r3, [pc, #408]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a65      	ldr	r2, [pc, #404]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d013      	beq.n	8000fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fd16 	bl	80009f4 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fd12 	bl	80009f4 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	@ 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e207      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	4b5b      	ldr	r3, [pc, #364]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0xc0>
 8000fea:	e014      	b.n	8001016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fd02 	bl	80009f4 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fcfe 	bl	80009f4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	@ 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e1f3      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001006:	4b51      	ldr	r3, [pc, #324]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0xe8>
 8001012:	e000      	b.n	8001016 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d063      	beq.n	80010ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001022:	4b4a      	ldr	r3, [pc, #296]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00b      	beq.n	8001046 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800102e:	4b47      	ldr	r3, [pc, #284]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001036:	2b08      	cmp	r3, #8
 8001038:	d11c      	bne.n	8001074 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800103a:	4b44      	ldr	r3, [pc, #272]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d116      	bne.n	8001074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001046:	4b41      	ldr	r3, [pc, #260]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <HAL_RCC_OscConfig+0x152>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d001      	beq.n	800105e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e1c7      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105e:	4b3b      	ldr	r3, [pc, #236]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4937      	ldr	r1, [pc, #220]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 800106e:	4313      	orrs	r3, r2
 8001070:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001072:	e03a      	b.n	80010ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d020      	beq.n	80010be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107c:	4b34      	ldr	r3, [pc, #208]	@ (8001150 <HAL_RCC_OscConfig+0x244>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001082:	f7ff fcb7 	bl	80009f4 <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108a:	f7ff fcb3 	bl	80009f4 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e1a8      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109c:	4b2b      	ldr	r3, [pc, #172]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f0      	beq.n	800108a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a8:	4b28      	ldr	r3, [pc, #160]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	4925      	ldr	r1, [pc, #148]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	600b      	str	r3, [r1, #0]
 80010bc:	e015      	b.n	80010ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010be:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <HAL_RCC_OscConfig+0x244>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c4:	f7ff fc96 	bl	80009f4 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010cc:	f7ff fc92 	bl	80009f4 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e187      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010de:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d036      	beq.n	8001164 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d016      	beq.n	800112c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_RCC_OscConfig+0x248>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001104:	f7ff fc76 	bl	80009f4 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800110c:	f7ff fc72 	bl	80009f4 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e167      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <HAL_RCC_OscConfig+0x240>)
 8001120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f0      	beq.n	800110c <HAL_RCC_OscConfig+0x200>
 800112a:	e01b      	b.n	8001164 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <HAL_RCC_OscConfig+0x248>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fc5f 	bl	80009f4 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001138:	e00e      	b.n	8001158 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113a:	f7ff fc5b 	bl	80009f4 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d907      	bls.n	8001158 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e150      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
 800114c:	40023800 	.word	0x40023800
 8001150:	42470000 	.word	0x42470000
 8001154:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001158:	4b88      	ldr	r3, [pc, #544]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 800115a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1ea      	bne.n	800113a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 8097 	beq.w	80012a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001176:	4b81      	ldr	r3, [pc, #516]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10f      	bne.n	80011a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	4b7d      	ldr	r3, [pc, #500]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	4a7c      	ldr	r2, [pc, #496]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001190:	6413      	str	r3, [r2, #64]	@ 0x40
 8001192:	4b7a      	ldr	r3, [pc, #488]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800119e:	2301      	movs	r3, #1
 80011a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a2:	4b77      	ldr	r3, [pc, #476]	@ (8001380 <HAL_RCC_OscConfig+0x474>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d118      	bne.n	80011e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ae:	4b74      	ldr	r3, [pc, #464]	@ (8001380 <HAL_RCC_OscConfig+0x474>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a73      	ldr	r2, [pc, #460]	@ (8001380 <HAL_RCC_OscConfig+0x474>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fc1b 	bl	80009f4 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c2:	f7ff fc17 	bl	80009f4 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e10c      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001380 <HAL_RCC_OscConfig+0x474>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x2ea>
 80011e8:	4b64      	ldr	r3, [pc, #400]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 80011ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011ec:	4a63      	ldr	r2, [pc, #396]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80011f4:	e01c      	b.n	8001230 <HAL_RCC_OscConfig+0x324>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x30c>
 80011fe:	4b5f      	ldr	r3, [pc, #380]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 8001200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001202:	4a5e      	ldr	r2, [pc, #376]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	6713      	str	r3, [r2, #112]	@ 0x70
 800120a:	4b5c      	ldr	r3, [pc, #368]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 800120c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800120e:	4a5b      	ldr	r2, [pc, #364]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6713      	str	r3, [r2, #112]	@ 0x70
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0x324>
 8001218:	4b58      	ldr	r3, [pc, #352]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 800121a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800121c:	4a57      	ldr	r2, [pc, #348]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 800121e:	f023 0301 	bic.w	r3, r3, #1
 8001222:	6713      	str	r3, [r2, #112]	@ 0x70
 8001224:	4b55      	ldr	r3, [pc, #340]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 8001226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001228:	4a54      	ldr	r2, [pc, #336]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 800122a:	f023 0304 	bic.w	r3, r3, #4
 800122e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d015      	beq.n	8001264 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001238:	f7ff fbdc 	bl	80009f4 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123e:	e00a      	b.n	8001256 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001240:	f7ff fbd8 	bl	80009f4 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800124e:	4293      	cmp	r3, r2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e0cb      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001256:	4b49      	ldr	r3, [pc, #292]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 8001258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0ee      	beq.n	8001240 <HAL_RCC_OscConfig+0x334>
 8001262:	e014      	b.n	800128e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001264:	f7ff fbc6 	bl	80009f4 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126a:	e00a      	b.n	8001282 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126c:	f7ff fbc2 	bl	80009f4 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800127a:	4293      	cmp	r3, r2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e0b5      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001282:	4b3e      	ldr	r3, [pc, #248]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 8001284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1ee      	bne.n	800126c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d105      	bne.n	80012a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001294:	4b39      	ldr	r3, [pc, #228]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001298:	4a38      	ldr	r2, [pc, #224]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 800129a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800129e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80a1 	beq.w	80013ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012aa:	4b34      	ldr	r3, [pc, #208]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d05c      	beq.n	8001370 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d141      	bne.n	8001342 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012be:	4b31      	ldr	r3, [pc, #196]	@ (8001384 <HAL_RCC_OscConfig+0x478>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fb96 	bl	80009f4 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012cc:	f7ff fb92 	bl	80009f4 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e087      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012de:	4b27      	ldr	r3, [pc, #156]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69da      	ldr	r2, [r3, #28]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f8:	019b      	lsls	r3, r3, #6
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001300:	085b      	lsrs	r3, r3, #1
 8001302:	3b01      	subs	r3, #1
 8001304:	041b      	lsls	r3, r3, #16
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130c:	061b      	lsls	r3, r3, #24
 800130e:	491b      	ldr	r1, [pc, #108]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001314:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <HAL_RCC_OscConfig+0x478>)
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fb6b 	bl	80009f4 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001322:	f7ff fb67 	bl	80009f4 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e05c      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x416>
 8001340:	e054      	b.n	80013ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <HAL_RCC_OscConfig+0x478>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fb54 	bl	80009f4 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001350:	f7ff fb50 	bl	80009f4 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e045      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_RCC_OscConfig+0x470>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x444>
 800136e:	e03d      	b.n	80013ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d107      	bne.n	8001388 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e038      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000
 8001384:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001388:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <HAL_RCC_OscConfig+0x4ec>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d028      	beq.n	80013e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d121      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d11a      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013b8:	4013      	ands	r3, r2
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d111      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ce:	085b      	lsrs	r3, r3, #1
 80013d0:	3b01      	subs	r3, #1
 80013d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d107      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0cc      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001410:	4b68      	ldr	r3, [pc, #416]	@ (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d90c      	bls.n	8001438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141e:	4b65      	ldr	r3, [pc, #404]	@ (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001426:	4b63      	ldr	r3, [pc, #396]	@ (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d001      	beq.n	8001438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0b8      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d020      	beq.n	8001486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001450:	4b59      	ldr	r3, [pc, #356]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a58      	ldr	r2, [pc, #352]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800145a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001468:	4b53      	ldr	r3, [pc, #332]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	4a52      	ldr	r2, [pc, #328]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001474:	4b50      	ldr	r3, [pc, #320]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	494d      	ldr	r1, [pc, #308]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	4313      	orrs	r3, r2
 8001484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d044      	beq.n	800151c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	4b47      	ldr	r3, [pc, #284]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d119      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e07f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d003      	beq.n	80014ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ba:	4b3f      	ldr	r3, [pc, #252]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e06f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ca:	4b3b      	ldr	r3, [pc, #236]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e067      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014da:	4b37      	ldr	r3, [pc, #220]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f023 0203 	bic.w	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4934      	ldr	r1, [pc, #208]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014ec:	f7ff fa82 	bl	80009f4 <HAL_GetTick>
 80014f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	e00a      	b.n	800150a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f4:	f7ff fa7e 	bl	80009f4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e04f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 020c 	and.w	r2, r3, #12
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	429a      	cmp	r2, r3
 800151a:	d1eb      	bne.n	80014f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800151c:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d20c      	bcs.n	8001544 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b22      	ldr	r3, [pc, #136]	@ (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001532:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d001      	beq.n	8001544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e032      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001550:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4916      	ldr	r1, [pc, #88]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	4313      	orrs	r3, r2
 8001560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d009      	beq.n	8001582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	490e      	ldr	r1, [pc, #56]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001582:	f000 f821 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 8001586:	4602      	mov	r2, r0
 8001588:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	490a      	ldr	r1, [pc, #40]	@ (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	5ccb      	ldrb	r3, [r1, r3]
 8001596:	fa22 f303 	lsr.w	r3, r2, r3
 800159a:	4a09      	ldr	r2, [pc, #36]	@ (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800159e:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f912 	bl	80007cc <HAL_InitTick>

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023c00 	.word	0x40023c00
 80015b8:	40023800 	.word	0x40023800
 80015bc:	08003370 	.word	0x08003370
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015cc:	b094      	sub	sp, #80	@ 0x50
 80015ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015e0:	4b79      	ldr	r3, [pc, #484]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d00d      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0x40>
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	f200 80e1 	bhi.w	80017b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0x34>
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d003      	beq.n	8001602 <HAL_RCC_GetSysClockFreq+0x3a>
 80015fa:	e0db      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015fc:	4b73      	ldr	r3, [pc, #460]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x204>)
 80015fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001600:	e0db      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001602:	4b73      	ldr	r3, [pc, #460]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001604:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001606:	e0d8      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001608:	4b6f      	ldr	r3, [pc, #444]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001610:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001612:	4b6d      	ldr	r3, [pc, #436]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d063      	beq.n	80016e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161e:	4b6a      	ldr	r3, [pc, #424]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	099b      	lsrs	r3, r3, #6
 8001624:	2200      	movs	r2, #0
 8001626:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001628:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800162a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800162c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001630:	633b      	str	r3, [r7, #48]	@ 0x30
 8001632:	2300      	movs	r3, #0
 8001634:	637b      	str	r3, [r7, #52]	@ 0x34
 8001636:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800163a:	4622      	mov	r2, r4
 800163c:	462b      	mov	r3, r5
 800163e:	f04f 0000 	mov.w	r0, #0
 8001642:	f04f 0100 	mov.w	r1, #0
 8001646:	0159      	lsls	r1, r3, #5
 8001648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800164c:	0150      	lsls	r0, r2, #5
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4621      	mov	r1, r4
 8001654:	1a51      	subs	r1, r2, r1
 8001656:	6139      	str	r1, [r7, #16]
 8001658:	4629      	mov	r1, r5
 800165a:	eb63 0301 	sbc.w	r3, r3, r1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800166c:	4659      	mov	r1, fp
 800166e:	018b      	lsls	r3, r1, #6
 8001670:	4651      	mov	r1, sl
 8001672:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001676:	4651      	mov	r1, sl
 8001678:	018a      	lsls	r2, r1, #6
 800167a:	4651      	mov	r1, sl
 800167c:	ebb2 0801 	subs.w	r8, r2, r1
 8001680:	4659      	mov	r1, fp
 8001682:	eb63 0901 	sbc.w	r9, r3, r1
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800169a:	4690      	mov	r8, r2
 800169c:	4699      	mov	r9, r3
 800169e:	4623      	mov	r3, r4
 80016a0:	eb18 0303 	adds.w	r3, r8, r3
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	462b      	mov	r3, r5
 80016a8:	eb49 0303 	adc.w	r3, r9, r3
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016ba:	4629      	mov	r1, r5
 80016bc:	024b      	lsls	r3, r1, #9
 80016be:	4621      	mov	r1, r4
 80016c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016c4:	4621      	mov	r1, r4
 80016c6:	024a      	lsls	r2, r1, #9
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ce:	2200      	movs	r2, #0
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80016d8:	f7fe fdcc 	bl	8000274 <__aeabi_uldivmod>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4613      	mov	r3, r2
 80016e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016e4:	e058      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e6:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	099b      	lsrs	r3, r3, #6
 80016ec:	2200      	movs	r2, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	4611      	mov	r1, r2
 80016f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80016fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001700:	4642      	mov	r2, r8
 8001702:	464b      	mov	r3, r9
 8001704:	f04f 0000 	mov.w	r0, #0
 8001708:	f04f 0100 	mov.w	r1, #0
 800170c:	0159      	lsls	r1, r3, #5
 800170e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001712:	0150      	lsls	r0, r2, #5
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4641      	mov	r1, r8
 800171a:	ebb2 0a01 	subs.w	sl, r2, r1
 800171e:	4649      	mov	r1, r9
 8001720:	eb63 0b01 	sbc.w	fp, r3, r1
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001730:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001734:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001738:	ebb2 040a 	subs.w	r4, r2, sl
 800173c:	eb63 050b 	sbc.w	r5, r3, fp
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	00eb      	lsls	r3, r5, #3
 800174a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800174e:	00e2      	lsls	r2, r4, #3
 8001750:	4614      	mov	r4, r2
 8001752:	461d      	mov	r5, r3
 8001754:	4643      	mov	r3, r8
 8001756:	18e3      	adds	r3, r4, r3
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	464b      	mov	r3, r9
 800175c:	eb45 0303 	adc.w	r3, r5, r3
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800176e:	4629      	mov	r1, r5
 8001770:	028b      	lsls	r3, r1, #10
 8001772:	4621      	mov	r1, r4
 8001774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001778:	4621      	mov	r1, r4
 800177a:	028a      	lsls	r2, r1, #10
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001782:	2200      	movs	r2, #0
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	61fa      	str	r2, [r7, #28]
 8001788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800178c:	f7fe fd72 	bl	8000274 <__aeabi_uldivmod>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4613      	mov	r3, r2
 8001796:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	3301      	adds	r3, #1
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80017a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017b2:	e002      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x204>)
 80017b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3750      	adds	r7, #80	@ 0x50
 80017c0:	46bd      	mov	sp, r7
 80017c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	00f42400 	.word	0x00f42400
 80017d0:	007a1200 	.word	0x007a1200

080017d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d8:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000000 	.word	0x20000000

080017ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017f0:	f7ff fff0 	bl	80017d4 <HAL_RCC_GetHCLKFreq>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_RCC_GetPCLK1Freq+0x20>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	0a9b      	lsrs	r3, r3, #10
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	4903      	ldr	r1, [pc, #12]	@ (8001810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001802:	5ccb      	ldrb	r3, [r1, r3]
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001808:	4618      	mov	r0, r3
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	08003380 	.word	0x08003380

08001814 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	220f      	movs	r2, #15
 8001822:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_RCC_GetClockConfig+0x5c>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0203 	and.w	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001830:	4b0f      	ldr	r3, [pc, #60]	@ (8001870 <HAL_RCC_GetClockConfig+0x5c>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <HAL_RCC_GetClockConfig+0x5c>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001848:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <HAL_RCC_GetClockConfig+0x5c>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	08db      	lsrs	r3, r3, #3
 800184e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <HAL_RCC_GetClockConfig+0x60>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0207 	and.w	r2, r3, #7
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	601a      	str	r2, [r3, #0]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e041      	b.n	800190e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f839 	bl	8001916 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3304      	adds	r3, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4610      	mov	r0, r2
 80018b8:	f000 f9b2 	bl	8001c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d001      	beq.n	8001944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e044      	b.n	80019ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1e      	ldr	r2, [pc, #120]	@ (80019dc <HAL_TIM_Base_Start_IT+0xb0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d018      	beq.n	8001998 <HAL_TIM_Base_Start_IT+0x6c>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800196e:	d013      	beq.n	8001998 <HAL_TIM_Base_Start_IT+0x6c>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1a      	ldr	r2, [pc, #104]	@ (80019e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00e      	beq.n	8001998 <HAL_TIM_Base_Start_IT+0x6c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a19      	ldr	r2, [pc, #100]	@ (80019e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d009      	beq.n	8001998 <HAL_TIM_Base_Start_IT+0x6c>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a17      	ldr	r2, [pc, #92]	@ (80019e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d004      	beq.n	8001998 <HAL_TIM_Base_Start_IT+0x6c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a16      	ldr	r2, [pc, #88]	@ (80019ec <HAL_TIM_Base_Start_IT+0xc0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d111      	bne.n	80019bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d010      	beq.n	80019cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0201 	orr.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ba:	e007      	b.n	80019cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40010000 	.word	0x40010000
 80019e0:	40000400 	.word	0x40000400
 80019e4:	40000800 	.word	0x40000800
 80019e8:	40000c00 	.word	0x40000c00
 80019ec:	40014000 	.word	0x40014000

080019f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d020      	beq.n	8001a54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01b      	beq.n	8001a54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f06f 0202 	mvn.w	r2, #2
 8001a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f8d2 	bl	8001be4 <HAL_TIM_IC_CaptureCallback>
 8001a40:	e005      	b.n	8001a4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f8c4 	bl	8001bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f8d5 	bl	8001bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d020      	beq.n	8001aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01b      	beq.n	8001aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f06f 0204 	mvn.w	r2, #4
 8001a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2202      	movs	r2, #2
 8001a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f8ac 	bl	8001be4 <HAL_TIM_IC_CaptureCallback>
 8001a8c:	e005      	b.n	8001a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f89e 	bl	8001bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f8af 	bl	8001bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d020      	beq.n	8001aec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d01b      	beq.n	8001aec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f06f 0208 	mvn.w	r2, #8
 8001abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f886 	bl	8001be4 <HAL_TIM_IC_CaptureCallback>
 8001ad8:	e005      	b.n	8001ae6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f878 	bl	8001bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f889 	bl	8001bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d020      	beq.n	8001b38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01b      	beq.n	8001b38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f06f 0210 	mvn.w	r2, #16
 8001b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f860 	bl	8001be4 <HAL_TIM_IC_CaptureCallback>
 8001b24:	e005      	b.n	8001b32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f852 	bl	8001bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f863 	bl	8001bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0201 	mvn.w	r2, #1
 8001b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7fe fdf8 	bl	800074c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00c      	beq.n	8001b80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f8e6 	bl	8001d4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00c      	beq.n	8001ba4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f834 	bl	8001c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f003 0320 	and.w	r3, r3, #32
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00c      	beq.n	8001bc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f06f 0220 	mvn.w	r2, #32
 8001bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8b8 	bl	8001d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3a      	ldr	r2, [pc, #232]	@ (8001d1c <TIM_Base_SetConfig+0xfc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00f      	beq.n	8001c58 <TIM_Base_SetConfig+0x38>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c3e:	d00b      	beq.n	8001c58 <TIM_Base_SetConfig+0x38>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a37      	ldr	r2, [pc, #220]	@ (8001d20 <TIM_Base_SetConfig+0x100>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d007      	beq.n	8001c58 <TIM_Base_SetConfig+0x38>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a36      	ldr	r2, [pc, #216]	@ (8001d24 <TIM_Base_SetConfig+0x104>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d003      	beq.n	8001c58 <TIM_Base_SetConfig+0x38>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a35      	ldr	r2, [pc, #212]	@ (8001d28 <TIM_Base_SetConfig+0x108>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d108      	bne.n	8001c6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d1c <TIM_Base_SetConfig+0xfc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01b      	beq.n	8001caa <TIM_Base_SetConfig+0x8a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c78:	d017      	beq.n	8001caa <TIM_Base_SetConfig+0x8a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a28      	ldr	r2, [pc, #160]	@ (8001d20 <TIM_Base_SetConfig+0x100>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <TIM_Base_SetConfig+0x8a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a27      	ldr	r2, [pc, #156]	@ (8001d24 <TIM_Base_SetConfig+0x104>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00f      	beq.n	8001caa <TIM_Base_SetConfig+0x8a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a26      	ldr	r2, [pc, #152]	@ (8001d28 <TIM_Base_SetConfig+0x108>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00b      	beq.n	8001caa <TIM_Base_SetConfig+0x8a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a25      	ldr	r2, [pc, #148]	@ (8001d2c <TIM_Base_SetConfig+0x10c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d007      	beq.n	8001caa <TIM_Base_SetConfig+0x8a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a24      	ldr	r2, [pc, #144]	@ (8001d30 <TIM_Base_SetConfig+0x110>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d003      	beq.n	8001caa <TIM_Base_SetConfig+0x8a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a23      	ldr	r2, [pc, #140]	@ (8001d34 <TIM_Base_SetConfig+0x114>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d108      	bne.n	8001cbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8001d1c <TIM_Base_SetConfig+0xfc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d103      	bne.n	8001cf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d105      	bne.n	8001d0e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f023 0201 	bic.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	40000400 	.word	0x40000400
 8001d24:	40000800 	.word	0x40000800
 8001d28:	40000c00 	.word	0x40000c00
 8001d2c:	40014000 	.word	0x40014000
 8001d30:	40014400 	.word	0x40014400
 8001d34:	40014800 	.word	0x40014800

08001d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	@ 0x28
 8001d64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001d6a:	4b83      	ldr	r3, [pc, #524]	@ (8001f78 <xTaskIncrementTick+0x218>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 80f3 	bne.w	8001f5a <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d74:	4b81      	ldr	r3, [pc, #516]	@ (8001f7c <xTaskIncrementTick+0x21c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001d7c:	4a7f      	ldr	r2, [pc, #508]	@ (8001f7c <xTaskIncrementTick+0x21c>)
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d121      	bne.n	8001dcc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001d88:	4b7d      	ldr	r3, [pc, #500]	@ (8001f80 <xTaskIncrementTick+0x220>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8001d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d96:	f383 8811 	msr	BASEPRI, r3
 8001d9a:	f3bf 8f6f 	isb	sy
 8001d9e:	f3bf 8f4f 	dsb	sy
 8001da2:	607b      	str	r3, [r7, #4]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	e7fd      	b.n	8001da6 <xTaskIncrementTick+0x46>
 8001daa:	4b75      	ldr	r3, [pc, #468]	@ (8001f80 <xTaskIncrementTick+0x220>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	4b74      	ldr	r3, [pc, #464]	@ (8001f84 <xTaskIncrementTick+0x224>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a72      	ldr	r2, [pc, #456]	@ (8001f80 <xTaskIncrementTick+0x220>)
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4a72      	ldr	r2, [pc, #456]	@ (8001f84 <xTaskIncrementTick+0x224>)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b72      	ldr	r3, [pc, #456]	@ (8001f88 <xTaskIncrementTick+0x228>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	4a70      	ldr	r2, [pc, #448]	@ (8001f88 <xTaskIncrementTick+0x228>)
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	f000 f958 	bl	800207c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8001f8c <xTaskIncrementTick+0x22c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a3a      	ldr	r2, [r7, #32]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	f0c0 80ac 	bcc.w	8001f30 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dd8:	4b69      	ldr	r3, [pc, #420]	@ (8001f80 <xTaskIncrementTick+0x220>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d104      	bne.n	8001dec <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001de2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f8c <xTaskIncrementTick+0x22c>)
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	601a      	str	r2, [r3, #0]
                    break;
 8001dea:	e0a1      	b.n	8001f30 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001dec:	4b64      	ldr	r3, [pc, #400]	@ (8001f80 <xTaskIncrementTick+0x220>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001dfc:	6a3a      	ldr	r2, [r7, #32]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d203      	bcs.n	8001e0c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001e04:	4a61      	ldr	r2, [pc, #388]	@ (8001f8c <xTaskIncrementTick+0x22c>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	6013      	str	r3, [r2, #0]
                        break;
 8001e0a:	e091      	b.n	8001f30 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	68d2      	ldr	r2, [r2, #12]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	6892      	ldr	r2, [r2, #8]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d103      	bne.n	8001e3a <xTaskIncrementTick+0xda>
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	1e5a      	subs	r2, r3, #1
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01e      	beq.n	8001e90 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	6a12      	ldr	r2, [r2, #32]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	69d2      	ldr	r2, [r2, #28]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	3318      	adds	r3, #24
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d103      	bne.n	8001e80 <xTaskIncrementTick+0x120>
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6a1a      	ldr	r2, [r3, #32]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2200      	movs	r2, #0
 8001e84:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	1e5a      	subs	r2, r3, #1
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 f8f8 	bl	8003088 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8001f90 <xTaskIncrementTick+0x230>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	4a3a      	ldr	r2, [pc, #232]	@ (8001f90 <xTaskIncrementTick+0x230>)
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eae:	4939      	ldr	r1, [pc, #228]	@ (8001f94 <xTaskIncrementTick+0x234>)
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	3304      	adds	r3, #4
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	3204      	adds	r2, #4
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	1d1a      	adds	r2, r3, #4
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4a29      	ldr	r2, [pc, #164]	@ (8001f94 <xTaskIncrementTick+0x234>)
 8001eee:	441a      	add	r2, r3
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	615a      	str	r2, [r3, #20]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ef8:	4926      	ldr	r1, [pc, #152]	@ (8001f94 <xTaskIncrementTick+0x234>)
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f0a:	1c59      	adds	r1, r3, #1
 8001f0c:	4821      	ldr	r0, [pc, #132]	@ (8001f94 <xTaskIncrementTick+0x234>)
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4403      	add	r3, r0
 8001f18:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <xTaskIncrementTick+0x238>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f24:	429a      	cmp	r2, r3
 8001f26:	f67f af57 	bls.w	8001dd8 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f2e:	e753      	b.n	8001dd8 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <xTaskIncrementTick+0x238>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f36:	4917      	ldr	r1, [pc, #92]	@ (8001f94 <xTaskIncrementTick+0x234>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d901      	bls.n	8001f4c <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001f4c:	4b13      	ldr	r3, [pc, #76]	@ (8001f9c <xTaskIncrementTick+0x23c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f58:	e004      	b.n	8001f64 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <xTaskIncrementTick+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	4a0f      	ldr	r2, [pc, #60]	@ (8001fa0 <xTaskIncrementTick+0x240>)
 8001f62:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	4619      	mov	r1, r3
 8001f68:	20db      	movs	r0, #219	@ 0xdb
 8001f6a:	f000 ffd7 	bl	8002f1c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3728      	adds	r7, #40	@ 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000100 	.word	0x20000100
 8001f7c:	200000e4 	.word	0x200000e4
 8001f80:	200000dc 	.word	0x200000dc
 8001f84:	200000e0 	.word	0x200000e0
 8001f88:	200000f4 	.word	0x200000f4
 8001f8c:	200000f8 	.word	0x200000f8
 8001f90:	200000e8 	.word	0x200000e8
 8001f94:	20000078 	.word	0x20000078
 8001f98:	20000074 	.word	0x20000074
 8001f9c:	200000f0 	.word	0x200000f0
 8001fa0:	200000ec 	.word	0x200000ec

08001fa4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001faa:	4b2e      	ldr	r3, [pc, #184]	@ (8002064 <vTaskSwitchContext+0xc0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002068 <vTaskSwitchContext+0xc4>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001fb8:	e04f      	b.n	800205a <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8001fba:	4b2b      	ldr	r3, [pc, #172]	@ (8002068 <vTaskSwitchContext+0xc4>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800206c <vTaskSwitchContext+0xc8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	f1c3 031f 	rsb	r3, r3, #31
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	4926      	ldr	r1, [pc, #152]	@ (8002070 <vTaskSwitchContext+0xcc>)
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10b      	bne.n	8002002 <vTaskSwitchContext+0x5e>
    __asm volatile
 8001fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fee:	f383 8811 	msr	BASEPRI, r3
 8001ff2:	f3bf 8f6f 	isb	sy
 8001ff6:	f3bf 8f4f 	dsb	sy
 8001ffa:	607b      	str	r3, [r7, #4]
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	e7fd      	b.n	8001ffe <vTaskSwitchContext+0x5a>
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <vTaskSwitchContext+0xcc>)
 800200e:	4413      	add	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	3308      	adds	r3, #8
 8002024:	429a      	cmp	r2, r3
 8002026:	d103      	bne.n	8002030 <vTaskSwitchContext+0x8c>
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	4a0f      	ldr	r2, [pc, #60]	@ (8002074 <vTaskSwitchContext+0xd0>)
 8002038:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800203a:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <vTaskSwitchContext+0xd4>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <vTaskSwitchContext+0xd0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d102      	bne.n	800204c <vTaskSwitchContext+0xa8>
 8002046:	f000 ffc1 	bl	8002fcc <SEGGER_SYSVIEW_OnIdle>
 800204a:	e004      	b.n	8002056 <vTaskSwitchContext+0xb2>
 800204c:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <vTaskSwitchContext+0xd0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f000 ffd7 	bl	8003004 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002056:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <vTaskSwitchContext+0xd0>)
 8002058:	681b      	ldr	r3, [r3, #0]
    }
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000100 	.word	0x20000100
 8002068:	200000f0 	.word	0x200000f0
 800206c:	200000e8 	.word	0x200000e8
 8002070:	20000078 	.word	0x20000078
 8002074:	20000074 	.word	0x20000074
 8002078:	200000fc 	.word	0x200000fc

0800207c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002080:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <prvResetNextTaskUnblockTime+0x30>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d104      	bne.n	8002094 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800208a:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <prvResetNextTaskUnblockTime+0x34>)
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002092:	e005      	b.n	80020a0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002094:	4b05      	ldr	r3, [pc, #20]	@ (80020ac <prvResetNextTaskUnblockTime+0x30>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <prvResetNextTaskUnblockTime+0x34>)
 800209e:	6013      	str	r3, [r2, #0]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	200000dc 	.word	0x200000dc
 80020b0:	200000f8 	.word	0x200000f8
	...

080020c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80020c0:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <pxCurrentTCBConst2>)
 80020c2:	6819      	ldr	r1, [r3, #0]
 80020c4:	6808      	ldr	r0, [r1, #0]
 80020c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ca:	f380 8809 	msr	PSP, r0
 80020ce:	f3bf 8f6f 	isb	sy
 80020d2:	f04f 0000 	mov.w	r0, #0
 80020d6:	f380 8811 	msr	BASEPRI, r0
 80020da:	4770      	bx	lr
 80020dc:	f3af 8000 	nop.w

080020e0 <pxCurrentTCBConst2>:
 80020e0:	20000074 	.word	0x20000074
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
	...

080020f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80020f0:	f3ef 8009 	mrs	r0, PSP
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <pxCurrentTCBConst>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	f01e 0f10 	tst.w	lr, #16
 8002100:	bf08      	it	eq
 8002102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800210a:	6010      	str	r0, [r2, #0]
 800210c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002114:	f380 8811 	msr	BASEPRI, r0
 8002118:	f3bf 8f4f 	dsb	sy
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	f7ff ff40 	bl	8001fa4 <vTaskSwitchContext>
 8002124:	f04f 0000 	mov.w	r0, #0
 8002128:	f380 8811 	msr	BASEPRI, r0
 800212c:	bc09      	pop	{r0, r3}
 800212e:	6819      	ldr	r1, [r3, #0]
 8002130:	6808      	ldr	r0, [r1, #0]
 8002132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002136:	f01e 0f10 	tst.w	lr, #16
 800213a:	bf08      	it	eq
 800213c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002140:	f380 8809 	msr	PSP, r0
 8002144:	f3bf 8f6f 	isb	sy
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	f3af 8000 	nop.w

08002150 <pxCurrentTCBConst>:
 8002150:	20000074 	.word	0x20000074
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop

08002158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
    __asm volatile
 800215e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002162:	f383 8811 	msr	BASEPRI, r3
 8002166:	f3bf 8f6f 	isb	sy
 800216a:	f3bf 8f4f 	dsb	sy
 800216e:	607b      	str	r3, [r7, #4]
}
 8002170:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8002172:	f000 fe59 	bl	8002e28 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002176:	f7ff fdf3 	bl	8001d60 <xTaskIncrementTick>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8002180:	f000 feb0 	bl	8002ee4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002184:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <SysTick_Handler+0x50>)
 8002186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e001      	b.n	8002192 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800218e:	f000 fe8d 	bl	8002eac <SEGGER_SYSVIEW_RecordExitISR>
 8002192:	2300      	movs	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800219c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000ed04 	.word	0xe000ed04

080021ac <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80021b2:	4b1e      	ldr	r3, [pc, #120]	@ (800222c <USART2_IRQHandler+0x80>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d011      	beq.n	80021e6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80021c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <USART2_IRQHandler+0x84>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 030b 	and.w	r3, r3, #11
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d108      	bne.n	80021e6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <USART2_IRQHandler+0x88>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d004      	beq.n	80021e6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80021dc:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <USART2_IRQHandler+0x88>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	79fa      	ldrb	r2, [r7, #7]
 80021e2:	4610      	mov	r0, r2
 80021e4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01a      	beq.n	8002226 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80021f0:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <USART2_IRQHandler+0x8c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d015      	beq.n	8002224 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80021f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <USART2_IRQHandler+0x8c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	1dfa      	adds	r2, r7, #7
 80021fe:	4610      	mov	r0, r2
 8002200:	4798      	blx	r3
 8002202:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800220a:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <USART2_IRQHandler+0x90>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a0b      	ldr	r2, [pc, #44]	@ (800223c <USART2_IRQHandler+0x90>)
 8002210:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e006      	b.n	8002226 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002218:	4b04      	ldr	r3, [pc, #16]	@ (800222c <USART2_IRQHandler+0x80>)
 800221a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800221c:	79fa      	ldrb	r2, [r7, #7]
 800221e:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <USART2_IRQHandler+0x84>)
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e000      	b.n	8002226 <USART2_IRQHandler+0x7a>
      return;
 8002224:	bf00      	nop
    }
  }
}
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40004400 	.word	0x40004400
 8002230:	40004404 	.word	0x40004404
 8002234:	20000104 	.word	0x20000104
 8002238:	20000108 	.word	0x20000108
 800223c:	4000440c 	.word	0x4000440c

08002240 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a04      	ldr	r2, [pc, #16]	@ (800225c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800224a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	4000440c 	.word	0x4000440c

08002260 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002266:	4b26      	ldr	r3, [pc, #152]	@ (8002300 <_DoInit+0xa0>)
 8002268:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800226a:	22a8      	movs	r2, #168	@ 0xa8
 800226c:	2100      	movs	r1, #0
 800226e:	6838      	ldr	r0, [r7, #0]
 8002270:	f001 f832 	bl	80032d8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2203      	movs	r2, #3
 8002278:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2203      	movs	r2, #3
 800227e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4a20      	ldr	r2, [pc, #128]	@ (8002304 <_DoInit+0xa4>)
 8002284:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	4a1f      	ldr	r2, [pc, #124]	@ (8002308 <_DoInit+0xa8>)
 800228a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002292:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2200      	movs	r2, #0
 800229e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	4a16      	ldr	r2, [pc, #88]	@ (8002304 <_DoInit+0xa4>)
 80022aa:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4a17      	ldr	r2, [pc, #92]	@ (800230c <_DoInit+0xac>)
 80022b0:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2210      	movs	r2, #16
 80022b6:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2200      	movs	r2, #0
 80022c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80022ca:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	e00c      	b.n	80022ee <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f1c3 030f 	rsb	r3, r3, #15
 80022da:	4a0d      	ldr	r2, [pc, #52]	@ (8002310 <_DoInit+0xb0>)
 80022dc:	5cd1      	ldrb	r1, [r2, r3]
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	460a      	mov	r2, r1
 80022e6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3301      	adds	r3, #1
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d9ef      	bls.n	80022d4 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80022f4:	f3bf 8f5f 	dmb	sy
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	2000010c 	.word	0x2000010c
 8002304:	08003364 	.word	0x08003364
 8002308:	200001b4 	.word	0x200001b4
 800230c:	200005b4 	.word	0x200005b4
 8002310:	08003388 	.word	0x08003388

08002314 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b08c      	sub	sp, #48	@ 0x30
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002320:	4b3e      	ldr	r3, [pc, #248]	@ (800241c <SEGGER_RTT_ReadNoLock+0x108>)
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b53      	cmp	r3, #83	@ 0x53
 800232c:	d001      	beq.n	8002332 <SEGGER_RTT_ReadNoLock+0x1e>
 800232e:	f7ff ff97 	bl	8002260 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	3360      	adds	r3, #96	@ 0x60
 800233e:	4a37      	ldr	r2, [pc, #220]	@ (800241c <SEGGER_RTT_ReadNoLock+0x108>)
 8002340:	4413      	add	r3, r2
 8002342:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002354:	2300      	movs	r3, #0
 8002356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002358:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	429a      	cmp	r2, r3
 800235e:	d92b      	bls.n	80023b8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4293      	cmp	r3, r2
 8002370:	bf28      	it	cs
 8002372:	4613      	movcs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237c:	4413      	add	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	6939      	ldr	r1, [r7, #16]
 8002384:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002386:	f000 ffd3 	bl	8003330 <memcpy>
    NumBytesRead += NumBytesRem;
 800238a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	4413      	add	r3, r2
 8002390:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8002392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	4413      	add	r3, r2
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80023a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	4413      	add	r3, r2
 80023a8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d101      	bne.n	80023b8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4293      	cmp	r3, r2
 80023c6:	bf28      	it	cs
 80023c8:	4613      	movcs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d8:	4413      	add	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	6939      	ldr	r1, [r7, #16]
 80023e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023e2:	f000 ffa5 	bl	8003330 <memcpy>
    NumBytesRead += NumBytesRem;
 80023e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	4413      	add	r3, r2
 80023ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80023ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	4413      	add	r3, r2
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80023fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	4413      	add	r3, r2
 8002404:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8002406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002410:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002414:	4618      	mov	r0, r3
 8002416:	3730      	adds	r7, #48	@ 0x30
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	2000010c 	.word	0x2000010c

08002420 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	60fa      	str	r2, [r7, #12]
 8002436:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b80      	cmp	r3, #128	@ 0x80
 800243c:	d90a      	bls.n	8002454 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800243e:	2380      	movs	r3, #128	@ 0x80
 8002440:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8002442:	e007      	b.n	8002454 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	1c53      	adds	r3, r2, #1
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1c59      	adds	r1, r3, #1
 800244e:	60f9      	str	r1, [r7, #12]
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	1e5a      	subs	r2, r3, #1
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <_EncodeStr+0x46>
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1ee      	bne.n	8002444 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	b2da      	uxtb	r2, r3
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8002472:	68fb      	ldr	r3, [r7, #12]
}
 8002474:	4618      	mov	r0, r3
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3307      	adds	r3, #7
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800249e:	4b34      	ldr	r3, [pc, #208]	@ (8002570 <_HandleIncomingPacket+0xd8>)
 80024a0:	7e1b      	ldrb	r3, [r3, #24]
 80024a2:	4618      	mov	r0, r3
 80024a4:	1cfb      	adds	r3, r7, #3
 80024a6:	2201      	movs	r2, #1
 80024a8:	4619      	mov	r1, r3
 80024aa:	f7ff ff33 	bl	8002314 <SEGGER_RTT_ReadNoLock>
 80024ae:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d057      	beq.n	8002566 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	2b80      	cmp	r3, #128	@ 0x80
 80024ba:	d031      	beq.n	8002520 <_HandleIncomingPacket+0x88>
 80024bc:	2b80      	cmp	r3, #128	@ 0x80
 80024be:	dc40      	bgt.n	8002542 <_HandleIncomingPacket+0xaa>
 80024c0:	2b07      	cmp	r3, #7
 80024c2:	dc15      	bgt.n	80024f0 <_HandleIncomingPacket+0x58>
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	dd3c      	ble.n	8002542 <_HandleIncomingPacket+0xaa>
 80024c8:	3b01      	subs	r3, #1
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d839      	bhi.n	8002542 <_HandleIncomingPacket+0xaa>
 80024ce:	a201      	add	r2, pc, #4	@ (adr r2, 80024d4 <_HandleIncomingPacket+0x3c>)
 80024d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d4:	080024f7 	.word	0x080024f7
 80024d8:	080024fd 	.word	0x080024fd
 80024dc:	08002503 	.word	0x08002503
 80024e0:	08002509 	.word	0x08002509
 80024e4:	0800250f 	.word	0x0800250f
 80024e8:	08002515 	.word	0x08002515
 80024ec:	0800251b 	.word	0x0800251b
 80024f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80024f2:	d033      	beq.n	800255c <_HandleIncomingPacket+0xc4>
 80024f4:	e025      	b.n	8002542 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80024f6:	f000 fad5 	bl	8002aa4 <SEGGER_SYSVIEW_Start>
      break;
 80024fa:	e034      	b.n	8002566 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80024fc:	f000 fb8e 	bl	8002c1c <SEGGER_SYSVIEW_Stop>
      break;
 8002500:	e031      	b.n	8002566 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002502:	f000 fc5f 	bl	8002dc4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002506:	e02e      	b.n	8002566 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002508:	f000 fc48 	bl	8002d9c <SEGGER_SYSVIEW_SendTaskList>
      break;
 800250c:	e02b      	b.n	8002566 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800250e:	f000 fbab 	bl	8002c68 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002512:	e028      	b.n	8002566 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002514:	f000 fea2 	bl	800325c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002518:	e025      	b.n	8002566 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800251a:	f000 fe81 	bl	8003220 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800251e:	e022      	b.n	8002566 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002520:	4b13      	ldr	r3, [pc, #76]	@ (8002570 <_HandleIncomingPacket+0xd8>)
 8002522:	7e1b      	ldrb	r3, [r3, #24]
 8002524:	4618      	mov	r0, r3
 8002526:	1cfb      	adds	r3, r7, #3
 8002528:	2201      	movs	r2, #1
 800252a:	4619      	mov	r1, r3
 800252c:	f7ff fef2 	bl	8002314 <SEGGER_RTT_ReadNoLock>
 8002530:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fde6 	bl	800310c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002540:	e00e      	b.n	8002560 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	b25b      	sxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	da0c      	bge.n	8002564 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800254a:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <_HandleIncomingPacket+0xd8>)
 800254c:	7e1b      	ldrb	r3, [r3, #24]
 800254e:	4618      	mov	r0, r3
 8002550:	1cfb      	adds	r3, r7, #3
 8002552:	2201      	movs	r2, #1
 8002554:	4619      	mov	r1, r3
 8002556:	f7ff fedd 	bl	8002314 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800255a:	e003      	b.n	8002564 <_HandleIncomingPacket+0xcc>
      break;
 800255c:	bf00      	nop
 800255e:	e002      	b.n	8002566 <_HandleIncomingPacket+0xce>
      break;
 8002560:	bf00      	nop
 8002562:	e000      	b.n	8002566 <_HandleIncomingPacket+0xce>
      break;
 8002564:	bf00      	nop
    }
  }
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200005c4 	.word	0x200005c4

08002574 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	@ 0x30
 8002578:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800257a:	2301      	movs	r3, #1
 800257c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002588:	4b32      	ldr	r3, [pc, #200]	@ (8002654 <_TrySendOverflowPacket+0xe0>)
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800258e:	e00b      	b.n	80025a8 <_TrySendOverflowPacket+0x34>
 8002590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002592:	b2da      	uxtb	r2, r3
 8002594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002596:	1c59      	adds	r1, r3, #1
 8002598:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800259a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a4:	09db      	lsrs	r3, r3, #7
 80025a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80025ac:	d8f0      	bhi.n	8002590 <_TrySendOverflowPacket+0x1c>
 80025ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025bc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80025be:	4b26      	ldr	r3, [pc, #152]	@ (8002658 <_TrySendOverflowPacket+0xe4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80025c4:	4b23      	ldr	r3, [pc, #140]	@ (8002654 <_TrySendOverflowPacket+0xe0>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	623b      	str	r3, [r7, #32]
 80025d6:	e00b      	b.n	80025f0 <_TrySendOverflowPacket+0x7c>
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	1c59      	adds	r1, r3, #1
 80025e0:	6279      	str	r1, [r7, #36]	@ 0x24
 80025e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	09db      	lsrs	r3, r3, #7
 80025ee:	623b      	str	r3, [r7, #32]
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80025f4:	d8f0      	bhi.n	80025d8 <_TrySendOverflowPacket+0x64>
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80025fc:	6a3a      	ldr	r2, [r7, #32]
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8002606:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <_TrySendOverflowPacket+0xe0>)
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	4618      	mov	r0, r3
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	461a      	mov	r2, r3
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	4619      	mov	r1, r3
 8002618:	f7fd fde2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800261c:	4603      	mov	r3, r0
 800261e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002620:	f7ff fe0e 	bl	8002240 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d009      	beq.n	800263e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800262a:	4a0a      	ldr	r2, [pc, #40]	@ (8002654 <_TrySendOverflowPacket+0xe0>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002630:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <_TrySendOverflowPacket+0xe0>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	3b01      	subs	r3, #1
 8002636:	b2da      	uxtb	r2, r3
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <_TrySendOverflowPacket+0xe0>)
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e004      	b.n	8002648 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800263e:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <_TrySendOverflowPacket+0xe0>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	3301      	adds	r3, #1
 8002644:	4a03      	ldr	r2, [pc, #12]	@ (8002654 <_TrySendOverflowPacket+0xe0>)
 8002646:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002648:	693b      	ldr	r3, [r7, #16]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3730      	adds	r7, #48	@ 0x30
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200005c4 	.word	0x200005c4
 8002658:	e0001004 	.word	0xe0001004

0800265c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	@ 0x28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002668:	4b96      	ldr	r3, [pc, #600]	@ (80028c4 <_SendPacket+0x268>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d010      	beq.n	8002692 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002670:	4b94      	ldr	r3, [pc, #592]	@ (80028c4 <_SendPacket+0x268>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8130 	beq.w	80028da <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800267a:	4b92      	ldr	r3, [pc, #584]	@ (80028c4 <_SendPacket+0x268>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d109      	bne.n	8002696 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002682:	f7ff ff77 	bl	8002574 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002686:	4b8f      	ldr	r3, [pc, #572]	@ (80028c4 <_SendPacket+0x268>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	f040 8127 	bne.w	80028de <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8002690:	e001      	b.n	8002696 <_SendPacket+0x3a>
    goto Send;
 8002692:	bf00      	nop
 8002694:	e000      	b.n	8002698 <_SendPacket+0x3c>
Send:
 8002696:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b1f      	cmp	r3, #31
 800269c:	d809      	bhi.n	80026b2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800269e:	4b89      	ldr	r3, [pc, #548]	@ (80028c4 <_SendPacket+0x268>)
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f040 8118 	bne.w	80028e2 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b17      	cmp	r3, #23
 80026b6:	d807      	bhi.n	80026c8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e0c4      	b.n	8002852 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80026d4:	d912      	bls.n	80026fc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	09da      	lsrs	r2, r3, #7
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3b01      	subs	r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	3a01      	subs	r2, #1
 80026ee:	60fa      	str	r2, [r7, #12]
 80026f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	e006      	b.n	800270a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3b01      	subs	r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b7e      	cmp	r3, #126	@ 0x7e
 800270e:	d807      	bhi.n	8002720 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3b01      	subs	r3, #1
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	e098      	b.n	8002852 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002726:	d212      	bcs.n	800274e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	09da      	lsrs	r2, r3, #7
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3b01      	subs	r3, #1
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	3a01      	subs	r2, #1
 8002740:	60fa      	str	r2, [r7, #12]
 8002742:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	e081      	b.n	8002852 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002754:	d21d      	bcs.n	8002792 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	0b9a      	lsrs	r2, r3, #14
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3b01      	subs	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	09db      	lsrs	r3, r3, #7
 800276a:	b2db      	uxtb	r3, r3
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	3a01      	subs	r2, #1
 8002770:	60fa      	str	r2, [r7, #12]
 8002772:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002776:	b2da      	uxtb	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	3a01      	subs	r2, #1
 8002784:	60fa      	str	r2, [r7, #12]
 8002786:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800278a:	b2da      	uxtb	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e05f      	b.n	8002852 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002798:	d228      	bcs.n	80027ec <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0d5a      	lsrs	r2, r3, #21
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	0b9b      	lsrs	r3, r3, #14
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	3a01      	subs	r2, #1
 80027b4:	60fa      	str	r2, [r7, #12]
 80027b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	09db      	lsrs	r3, r3, #7
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	3a01      	subs	r2, #1
 80027ca:	60fa      	str	r2, [r7, #12]
 80027cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	3a01      	subs	r2, #1
 80027de:	60fa      	str	r2, [r7, #12]
 80027e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	e032      	b.n	8002852 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	0f1a      	lsrs	r2, r3, #28
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	0d5b      	lsrs	r3, r3, #21
 8002800:	b2db      	uxtb	r3, r3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	3a01      	subs	r2, #1
 8002806:	60fa      	str	r2, [r7, #12]
 8002808:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	0b9b      	lsrs	r3, r3, #14
 8002816:	b2db      	uxtb	r3, r3
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	3a01      	subs	r2, #1
 800281c:	60fa      	str	r2, [r7, #12]
 800281e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002822:	b2da      	uxtb	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	09db      	lsrs	r3, r3, #7
 800282c:	b2db      	uxtb	r3, r3
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	3a01      	subs	r2, #1
 8002832:	60fa      	str	r2, [r7, #12]
 8002834:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	3a01      	subs	r2, #1
 8002846:	60fa      	str	r2, [r7, #12]
 8002848:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002852:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <_SendPacket+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002858:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <_SendPacket+0x268>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	623b      	str	r3, [r7, #32]
 800286a:	e00b      	b.n	8002884 <_SendPacket+0x228>
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	1c59      	adds	r1, r3, #1
 8002874:	6279      	str	r1, [r7, #36]	@ 0x24
 8002876:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	09db      	lsrs	r3, r3, #7
 8002882:	623b      	str	r3, [r7, #32]
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	2b7f      	cmp	r3, #127	@ 0x7f
 8002888:	d8f0      	bhi.n	800286c <_SendPacket+0x210>
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002890:	6a3a      	ldr	r2, [r7, #32]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <_SendPacket+0x268>)
 800289c:	785b      	ldrb	r3, [r3, #1]
 800289e:	4618      	mov	r0, r3
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	68f9      	ldr	r1, [r7, #12]
 80028aa:	f7fd fc99 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80028ae:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80028b0:	f7ff fcc6 	bl	8002240 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80028ba:	4a02      	ldr	r2, [pc, #8]	@ (80028c4 <_SendPacket+0x268>)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	60d3      	str	r3, [r2, #12]
 80028c0:	e010      	b.n	80028e4 <_SendPacket+0x288>
 80028c2:	bf00      	nop
 80028c4:	200005c4 	.word	0x200005c4
 80028c8:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80028cc:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <_SendPacket+0x2d8>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	3301      	adds	r3, #1
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4b17      	ldr	r3, [pc, #92]	@ (8002934 <_SendPacket+0x2d8>)
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	e004      	b.n	80028e4 <_SendPacket+0x288>
    goto SendDone;
 80028da:	bf00      	nop
 80028dc:	e002      	b.n	80028e4 <_SendPacket+0x288>
      goto SendDone;
 80028de:	bf00      	nop
 80028e0:	e000      	b.n	80028e4 <_SendPacket+0x288>
      goto SendDone;
 80028e2:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80028e4:	4b13      	ldr	r3, [pc, #76]	@ (8002934 <_SendPacket+0x2d8>)
 80028e6:	7e1b      	ldrb	r3, [r3, #24]
 80028e8:	4619      	mov	r1, r3
 80028ea:	4a13      	ldr	r2, [pc, #76]	@ (8002938 <_SendPacket+0x2dc>)
 80028ec:	460b      	mov	r3, r1
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	440b      	add	r3, r1
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	336c      	adds	r3, #108	@ 0x6c
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002934 <_SendPacket+0x2d8>)
 80028fc:	7e1b      	ldrb	r3, [r3, #24]
 80028fe:	4618      	mov	r0, r3
 8002900:	490d      	ldr	r1, [pc, #52]	@ (8002938 <_SendPacket+0x2dc>)
 8002902:	4603      	mov	r3, r0
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4403      	add	r3, r0
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	3370      	adds	r3, #112	@ 0x70
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d00b      	beq.n	800292c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002914:	4b07      	ldr	r3, [pc, #28]	@ (8002934 <_SendPacket+0x2d8>)
 8002916:	789b      	ldrb	r3, [r3, #2]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d107      	bne.n	800292c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800291c:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <_SendPacket+0x2d8>)
 800291e:	2201      	movs	r2, #1
 8002920:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002922:	f7ff fdb9 	bl	8002498 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002926:	4b03      	ldr	r3, [pc, #12]	@ (8002934 <_SendPacket+0x2d8>)
 8002928:	2200      	movs	r2, #0
 800292a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800292c:	bf00      	nop
 800292e:	3728      	adds	r7, #40	@ 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200005c4 	.word	0x200005c4
 8002938:	2000010c 	.word	0x2000010c

0800293c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002944:	f3ef 8311 	mrs	r3, BASEPRI
 8002948:	f04f 0120 	mov.w	r1, #32
 800294c:	f381 8811 	msr	BASEPRI, r1
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4808      	ldr	r0, [pc, #32]	@ (8002974 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002954:	f7ff fd94 	bl	8002480 <_PreparePacket>
 8002958:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	68b8      	ldr	r0, [r7, #8]
 8002960:	f7ff fe7c 	bl	800265c <_SendPacket>
  RECORD_END();
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f383 8811 	msr	BASEPRI, r3
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200005f4 	.word	0x200005f4

08002978 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002982:	f3ef 8311 	mrs	r3, BASEPRI
 8002986:	f04f 0120 	mov.w	r1, #32
 800298a:	f381 8811 	msr	BASEPRI, r1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	4816      	ldr	r0, [pc, #88]	@ (80029ec <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002992:	f7ff fd75 	bl	8002480 <_PreparePacket>
 8002996:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	e00b      	b.n	80029be <SEGGER_SYSVIEW_RecordU32+0x46>
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	1c59      	adds	r1, r3, #1
 80029ae:	61f9      	str	r1, [r7, #28]
 80029b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	09db      	lsrs	r3, r3, #7
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80029c2:	d8f0      	bhi.n	80029a6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	61fa      	str	r2, [r7, #28]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68f9      	ldr	r1, [r7, #12]
 80029d8:	6938      	ldr	r0, [r7, #16]
 80029da:	f7ff fe3f 	bl	800265c <_SendPacket>
  RECORD_END();
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f383 8811 	msr	BASEPRI, r3
}
 80029e4:	bf00      	nop
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	200005f4 	.word	0x200005f4

080029f0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08c      	sub	sp, #48	@ 0x30
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80029fc:	f3ef 8311 	mrs	r3, BASEPRI
 8002a00:	f04f 0120 	mov.w	r1, #32
 8002a04:	f381 8811 	msr	BASEPRI, r1
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	4825      	ldr	r0, [pc, #148]	@ (8002aa0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002a0c:	f7ff fd38 	bl	8002480 <_PreparePacket>
 8002a10:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a1e:	e00b      	b.n	8002a38 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a26:	1c59      	adds	r1, r3, #1
 8002a28:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8002a2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a34:	09db      	lsrs	r3, r3, #7
 8002a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a3c:	d8f0      	bhi.n	8002a20 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	623b      	str	r3, [r7, #32]
 8002a56:	e00b      	b.n	8002a70 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	1c59      	adds	r1, r3, #1
 8002a60:	6279      	str	r1, [r7, #36]	@ 0x24
 8002a62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	09db      	lsrs	r3, r3, #7
 8002a6e:	623b      	str	r3, [r7, #32]
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a74:	d8f0      	bhi.n	8002a58 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a7c:	6a3a      	ldr	r2, [r7, #32]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	6979      	ldr	r1, [r7, #20]
 8002a8a:	69b8      	ldr	r0, [r7, #24]
 8002a8c:	f7ff fde6 	bl	800265c <_SendPacket>
  RECORD_END();
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f383 8811 	msr	BASEPRI, r3
}
 8002a96:	bf00      	nop
 8002a98:	3730      	adds	r7, #48	@ 0x30
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200005f4 	.word	0x200005f4

08002aa4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	@ 0x30
 8002aa8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8002aaa:	4b59      	ldr	r3, [pc, #356]	@ (8002c10 <SEGGER_SYSVIEW_Start+0x16c>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002ab0:	f3ef 8311 	mrs	r3, BASEPRI
 8002ab4:	f04f 0120 	mov.w	r1, #32
 8002ab8:	f381 8811 	msr	BASEPRI, r1
 8002abc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002abe:	4b54      	ldr	r3, [pc, #336]	@ (8002c10 <SEGGER_SYSVIEW_Start+0x16c>)
 8002ac0:	785b      	ldrb	r3, [r3, #1]
 8002ac2:	220a      	movs	r2, #10
 8002ac4:	4953      	ldr	r1, [pc, #332]	@ (8002c14 <SEGGER_SYSVIEW_Start+0x170>)
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fd fb8a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8002ad2:	f7ff fbb5 	bl	8002240 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002ad6:	200a      	movs	r0, #10
 8002ad8:	f7ff ff30 	bl	800293c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002adc:	f3ef 8311 	mrs	r3, BASEPRI
 8002ae0:	f04f 0120 	mov.w	r1, #32
 8002ae4:	f381 8811 	msr	BASEPRI, r1
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	484b      	ldr	r0, [pc, #300]	@ (8002c18 <SEGGER_SYSVIEW_Start+0x174>)
 8002aec:	f7ff fcc8 	bl	8002480 <_PreparePacket>
 8002af0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002afa:	4b45      	ldr	r3, [pc, #276]	@ (8002c10 <SEGGER_SYSVIEW_Start+0x16c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b00:	e00b      	b.n	8002b1a <SEGGER_SYSVIEW_Start+0x76>
 8002b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b08:	1c59      	adds	r1, r3, #1
 8002b0a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8002b0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b16:	09db      	lsrs	r3, r3, #7
 8002b18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b1e:	d8f0      	bhi.n	8002b02 <SEGGER_SYSVIEW_Start+0x5e>
 8002b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b34:	4b36      	ldr	r3, [pc, #216]	@ (8002c10 <SEGGER_SYSVIEW_Start+0x16c>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	623b      	str	r3, [r7, #32]
 8002b3a:	e00b      	b.n	8002b54 <SEGGER_SYSVIEW_Start+0xb0>
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	1c59      	adds	r1, r3, #1
 8002b44:	6279      	str	r1, [r7, #36]	@ 0x24
 8002b46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	09db      	lsrs	r3, r3, #7
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b58:	d8f0      	bhi.n	8002b3c <SEGGER_SYSVIEW_Start+0x98>
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b60:	6a3a      	ldr	r2, [r7, #32]
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	4b28      	ldr	r3, [pc, #160]	@ (8002c10 <SEGGER_SYSVIEW_Start+0x16c>)
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	e00b      	b.n	8002b8e <SEGGER_SYSVIEW_Start+0xea>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	1c59      	adds	r1, r3, #1
 8002b7e:	61f9      	str	r1, [r7, #28]
 8002b80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	09db      	lsrs	r3, r3, #7
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b92:	d8f0      	bhi.n	8002b76 <SEGGER_SYSVIEW_Start+0xd2>
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	61fa      	str	r2, [r7, #28]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	e00b      	b.n	8002bc6 <SEGGER_SYSVIEW_Start+0x122>
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	1c59      	adds	r1, r3, #1
 8002bb6:	6179      	str	r1, [r7, #20]
 8002bb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	09db      	lsrs	r3, r3, #7
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bca:	d8f0      	bhi.n	8002bae <SEGGER_SYSVIEW_Start+0x10a>
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	617a      	str	r2, [r7, #20]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002bdc:	2218      	movs	r2, #24
 8002bde:	6839      	ldr	r1, [r7, #0]
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fd3b 	bl	800265c <_SendPacket>
      RECORD_END();
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002bec:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <SEGGER_SYSVIEW_Start+0x16c>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002bf4:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <SEGGER_SYSVIEW_Start+0x16c>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002bfa:	f000 f8e3 	bl	8002dc4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002bfe:	f000 f8cd 	bl	8002d9c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002c02:	f000 fb2b 	bl	800325c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8002c06:	bf00      	nop
 8002c08:	3730      	adds	r7, #48	@ 0x30
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200005c4 	.word	0x200005c4
 8002c14:	0800339c 	.word	0x0800339c
 8002c18:	200005f4 	.word	0x200005f4

08002c1c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002c22:	f3ef 8311 	mrs	r3, BASEPRI
 8002c26:	f04f 0120 	mov.w	r1, #32
 8002c2a:	f381 8811 	msr	BASEPRI, r1
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	480b      	ldr	r0, [pc, #44]	@ (8002c60 <SEGGER_SYSVIEW_Stop+0x44>)
 8002c32:	f7ff fc25 	bl	8002480 <_PreparePacket>
 8002c36:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002c38:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <SEGGER_SYSVIEW_Stop+0x48>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002c40:	220b      	movs	r2, #11
 8002c42:	6839      	ldr	r1, [r7, #0]
 8002c44:	6838      	ldr	r0, [r7, #0]
 8002c46:	f7ff fd09 	bl	800265c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <SEGGER_SYSVIEW_Stop+0x48>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f383 8811 	msr	BASEPRI, r3
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200005f4 	.word	0x200005f4
 8002c64:	200005c4 	.word	0x200005c4

08002c68 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08c      	sub	sp, #48	@ 0x30
 8002c6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8002c72:	f04f 0120 	mov.w	r1, #32
 8002c76:	f381 8811 	msr	BASEPRI, r1
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	4845      	ldr	r0, [pc, #276]	@ (8002d94 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002c7e:	f7ff fbff 	bl	8002480 <_PreparePacket>
 8002c82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c8c:	4b42      	ldr	r3, [pc, #264]	@ (8002d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c92:	e00b      	b.n	8002cac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c9a:	1c59      	adds	r1, r3, #1
 8002c9c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8002c9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca8:	09db      	lsrs	r3, r3, #7
 8002caa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cae:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cb0:	d8f0      	bhi.n	8002c94 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc6:	4b34      	ldr	r3, [pc, #208]	@ (8002d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	623b      	str	r3, [r7, #32]
 8002ccc:	e00b      	b.n	8002ce6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	1c59      	adds	r1, r3, #1
 8002cd6:	6279      	str	r1, [r7, #36]	@ 0x24
 8002cd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	09db      	lsrs	r3, r3, #7
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cea:	d8f0      	bhi.n	8002cce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cf2:	6a3a      	ldr	r2, [r7, #32]
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	4b25      	ldr	r3, [pc, #148]	@ (8002d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	e00b      	b.n	8002d20 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	1c59      	adds	r1, r3, #1
 8002d10:	61f9      	str	r1, [r7, #28]
 8002d12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	09db      	lsrs	r3, r3, #7
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d24:	d8f0      	bhi.n	8002d08 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	61fa      	str	r2, [r7, #28]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	e00b      	b.n	8002d58 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	1c59      	adds	r1, r3, #1
 8002d48:	6179      	str	r1, [r7, #20]
 8002d4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	09db      	lsrs	r3, r3, #7
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d5c:	d8f0      	bhi.n	8002d40 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	617a      	str	r2, [r7, #20]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002d6e:	2218      	movs	r2, #24
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	68b8      	ldr	r0, [r7, #8]
 8002d74:	f7ff fc72 	bl	800265c <_SendPacket>
  RECORD_END();
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002d7e:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002d86:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	4798      	blx	r3
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	3730      	adds	r7, #48	@ 0x30
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	200005f4 	.word	0x200005f4
 8002d98:	200005c4 	.word	0x200005c4

08002d9c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002da0:	4b07      	ldr	r3, [pc, #28]	@ (8002dc0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002da8:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002db2:	4b03      	ldr	r3, [pc, #12]	@ (8002dc0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4798      	blx	r3
  }
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200005c4 	.word	0x200005c4

08002dc4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002dca:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d01a      	beq.n	8002e08 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8002dd2:	4b13      	ldr	r3, [pc, #76]	@ (8002e20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d015      	beq.n	8002e08 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002ddc:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4798      	blx	r3
 8002de4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002de8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002dea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	000a      	movs	r2, r1
 8002df8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4621      	mov	r1, r4
 8002e00:	200d      	movs	r0, #13
 8002e02:	f7ff fdf5 	bl	80029f0 <SEGGER_SYSVIEW_RecordU32x2>
 8002e06:	e006      	b.n	8002e16 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002e08:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	200c      	movs	r0, #12
 8002e10:	f7ff fdb2 	bl	8002978 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd90      	pop	{r4, r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200005c4 	.word	0x200005c4
 8002e24:	e0001004 	.word	0xe0001004

08002e28 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002e2e:	f3ef 8311 	mrs	r3, BASEPRI
 8002e32:	f04f 0120 	mov.w	r1, #32
 8002e36:	f381 8811 	msr	BASEPRI, r1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	4819      	ldr	r0, [pc, #100]	@ (8002ea4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002e3e:	f7ff fb1f 	bl	8002480 <_PreparePacket>
 8002e42:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002e48:	4b17      	ldr	r3, [pc, #92]	@ (8002ea8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e50:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	e00b      	b.n	8002e74 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	1c59      	adds	r1, r3, #1
 8002e64:	6179      	str	r1, [r7, #20]
 8002e66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	09db      	lsrs	r3, r3, #7
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e78:	d8f0      	bhi.n	8002e5c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	617a      	str	r2, [r7, #20]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	68b8      	ldr	r0, [r7, #8]
 8002e90:	f7ff fbe4 	bl	800265c <_SendPacket>
  RECORD_END();
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f383 8811 	msr	BASEPRI, r3
}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	200005f4 	.word	0x200005f4
 8002ea8:	e000ed04 	.word	0xe000ed04

08002eac <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8002eb6:	f04f 0120 	mov.w	r1, #32
 8002eba:	f381 8811 	msr	BASEPRI, r1
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	4807      	ldr	r0, [pc, #28]	@ (8002ee0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002ec2:	f7ff fadd 	bl	8002480 <_PreparePacket>
 8002ec6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8002ec8:	2203      	movs	r2, #3
 8002eca:	6839      	ldr	r1, [r7, #0]
 8002ecc:	6838      	ldr	r0, [r7, #0]
 8002ece:	f7ff fbc5 	bl	800265c <_SendPacket>
  RECORD_END();
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f383 8811 	msr	BASEPRI, r3
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200005f4 	.word	0x200005f4

08002ee4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002eea:	f3ef 8311 	mrs	r3, BASEPRI
 8002eee:	f04f 0120 	mov.w	r1, #32
 8002ef2:	f381 8811 	msr	BASEPRI, r1
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	4807      	ldr	r0, [pc, #28]	@ (8002f18 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8002efa:	f7ff fac1 	bl	8002480 <_PreparePacket>
 8002efe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002f00:	2212      	movs	r2, #18
 8002f02:	6839      	ldr	r1, [r7, #0]
 8002f04:	6838      	ldr	r0, [r7, #0]
 8002f06:	f7ff fba9 	bl	800265c <_SendPacket>
  RECORD_END();
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f383 8811 	msr	BASEPRI, r3
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	200005f4 	.word	0x200005f4

08002f1c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	@ 0x28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002f26:	f3ef 8311 	mrs	r3, BASEPRI
 8002f2a:	f04f 0120 	mov.w	r1, #32
 8002f2e:	f381 8811 	msr	BASEPRI, r1
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	4824      	ldr	r0, [pc, #144]	@ (8002fc8 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8002f36:	f7ff faa3 	bl	8002480 <_PreparePacket>
 8002f3a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	623b      	str	r3, [r7, #32]
 8002f48:	e00b      	b.n	8002f62 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	1c59      	adds	r1, r3, #1
 8002f52:	6279      	str	r1, [r7, #36]	@ 0x24
 8002f54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	09db      	lsrs	r3, r3, #7
 8002f60:	623b      	str	r3, [r7, #32]
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f66:	d8f0      	bhi.n	8002f4a <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f6e:	6a3a      	ldr	r2, [r7, #32]
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e00b      	b.n	8002f9a <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	1c59      	adds	r1, r3, #1
 8002f8a:	61f9      	str	r1, [r7, #28]
 8002f8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	09db      	lsrs	r3, r3, #7
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f9e:	d8f0      	bhi.n	8002f82 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	61fa      	str	r2, [r7, #28]
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8002fb0:	221c      	movs	r2, #28
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	6938      	ldr	r0, [r7, #16]
 8002fb6:	f7ff fb51 	bl	800265c <_SendPacket>
  RECORD_END();
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f383 8811 	msr	BASEPRI, r3
}
 8002fc0:	bf00      	nop
 8002fc2:	3728      	adds	r7, #40	@ 0x28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	200005f4 	.word	0x200005f4

08002fcc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002fd2:	f3ef 8311 	mrs	r3, BASEPRI
 8002fd6:	f04f 0120 	mov.w	r1, #32
 8002fda:	f381 8811 	msr	BASEPRI, r1
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	4807      	ldr	r0, [pc, #28]	@ (8003000 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002fe2:	f7ff fa4d 	bl	8002480 <_PreparePacket>
 8002fe6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002fe8:	2211      	movs	r2, #17
 8002fea:	6839      	ldr	r1, [r7, #0]
 8002fec:	6838      	ldr	r0, [r7, #0]
 8002fee:	f7ff fb35 	bl	800265c <_SendPacket>
  RECORD_END();
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f383 8811 	msr	BASEPRI, r3
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	200005f4 	.word	0x200005f4

08003004 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800300c:	f3ef 8311 	mrs	r3, BASEPRI
 8003010:	f04f 0120 	mov.w	r1, #32
 8003014:	f381 8811 	msr	BASEPRI, r1
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	4819      	ldr	r0, [pc, #100]	@ (8003080 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800301c:	f7ff fa30 	bl	8002480 <_PreparePacket>
 8003020:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003026:	4b17      	ldr	r3, [pc, #92]	@ (8003084 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	e00b      	b.n	8003052 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	1c59      	adds	r1, r3, #1
 8003042:	61f9      	str	r1, [r7, #28]
 8003044:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	09db      	lsrs	r3, r3, #7
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b7f      	cmp	r3, #127	@ 0x7f
 8003056:	d8f0      	bhi.n	800303a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	61fa      	str	r2, [r7, #28]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003068:	2204      	movs	r2, #4
 800306a:	68f9      	ldr	r1, [r7, #12]
 800306c:	6938      	ldr	r0, [r7, #16]
 800306e:	f7ff faf5 	bl	800265c <_SendPacket>
  RECORD_END();
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f383 8811 	msr	BASEPRI, r3
}
 8003078:	bf00      	nop
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	200005f4 	.word	0x200005f4
 8003084:	200005c4 	.word	0x200005c4

08003088 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003090:	f3ef 8311 	mrs	r3, BASEPRI
 8003094:	f04f 0120 	mov.w	r1, #32
 8003098:	f381 8811 	msr	BASEPRI, r1
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	4819      	ldr	r0, [pc, #100]	@ (8003104 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80030a0:	f7ff f9ee 	bl	8002480 <_PreparePacket>
 80030a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80030aa:	4b17      	ldr	r3, [pc, #92]	@ (8003108 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	e00b      	b.n	80030d6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	1c59      	adds	r1, r3, #1
 80030c6:	61f9      	str	r1, [r7, #28]
 80030c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	09db      	lsrs	r3, r3, #7
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80030da:	d8f0      	bhi.n	80030be <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	61fa      	str	r2, [r7, #28]
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80030ec:	2206      	movs	r2, #6
 80030ee:	68f9      	ldr	r1, [r7, #12]
 80030f0:	6938      	ldr	r0, [r7, #16]
 80030f2:	f7ff fab3 	bl	800265c <_SendPacket>
  RECORD_END();
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f383 8811 	msr	BASEPRI, r3
}
 80030fc:	bf00      	nop
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200005f4 	.word	0x200005f4
 8003108:	200005c4 	.word	0x200005c4

0800310c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b08c      	sub	sp, #48	@ 0x30
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003116:	4b40      	ldr	r3, [pc, #256]	@ (8003218 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d077      	beq.n	800320e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800311e:	4b3e      	ldr	r3, [pc, #248]	@ (8003218 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003124:	2300      	movs	r3, #0
 8003126:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003128:	e008      	b.n	800313c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800312a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8003130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003138:	3301      	adds	r3, #1
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003140:	429a      	cmp	r2, r3
 8003142:	d3f2      	bcc.n	800312a <SEGGER_SYSVIEW_SendModule+0x1e>
 8003144:	e000      	b.n	8003148 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003146:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d055      	beq.n	80031fa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800314e:	f3ef 8311 	mrs	r3, BASEPRI
 8003152:	f04f 0120 	mov.w	r1, #32
 8003156:	f381 8811 	msr	BASEPRI, r1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	482f      	ldr	r0, [pc, #188]	@ (800321c <SEGGER_SYSVIEW_SendModule+0x110>)
 800315e:	f7ff f98f 	bl	8002480 <_PreparePacket>
 8003162:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	627b      	str	r3, [r7, #36]	@ 0x24
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	623b      	str	r3, [r7, #32]
 8003170:	e00b      	b.n	800318a <SEGGER_SYSVIEW_SendModule+0x7e>
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	1c59      	adds	r1, r3, #1
 800317a:	6279      	str	r1, [r7, #36]	@ 0x24
 800317c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	09db      	lsrs	r3, r3, #7
 8003188:	623b      	str	r3, [r7, #32]
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	2b7f      	cmp	r3, #127	@ 0x7f
 800318e:	d8f0      	bhi.n	8003172 <SEGGER_SYSVIEW_SendModule+0x66>
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	627a      	str	r2, [r7, #36]	@ 0x24
 8003196:	6a3a      	ldr	r2, [r7, #32]
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	e00b      	b.n	80031c4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	1c59      	adds	r1, r3, #1
 80031b4:	61f9      	str	r1, [r7, #28]
 80031b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	09db      	lsrs	r3, r3, #7
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80031c8:	d8f0      	bhi.n	80031ac <SEGGER_SYSVIEW_SendModule+0xa0>
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	61fa      	str	r2, [r7, #28]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80031da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2280      	movs	r2, #128	@ 0x80
 80031e0:	4619      	mov	r1, r3
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7ff f91c 	bl	8002420 <_EncodeStr>
 80031e8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80031ea:	2216      	movs	r2, #22
 80031ec:	68f9      	ldr	r1, [r7, #12]
 80031ee:	6938      	ldr	r0, [r7, #16]
 80031f0:	f7ff fa34 	bl	800265c <_SendPacket>
      RECORD_END();
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80031fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d006      	beq.n	800320e <SEGGER_SYSVIEW_SendModule+0x102>
 8003200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8003208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4798      	blx	r3
    }
  }
}
 800320e:	bf00      	nop
 8003210:	3730      	adds	r7, #48	@ 0x30
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	200005ec 	.word	0x200005ec
 800321c:	200005f4 	.word	0x200005f4

08003220 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003226:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00f      	beq.n	800324e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800322e:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f2      	bne.n	8003234 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200005ec 	.word	0x200005ec

0800325c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003262:	f3ef 8311 	mrs	r3, BASEPRI
 8003266:	f04f 0120 	mov.w	r1, #32
 800326a:	f381 8811 	msr	BASEPRI, r1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	4817      	ldr	r0, [pc, #92]	@ (80032d0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003272:	f7ff f905 	bl	8002480 <_PreparePacket>
 8003276:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	4b14      	ldr	r3, [pc, #80]	@ (80032d4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	e00b      	b.n	80032a0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	1c59      	adds	r1, r3, #1
 8003290:	6179      	str	r1, [r7, #20]
 8003292:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	09db      	lsrs	r3, r3, #7
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80032a4:	d8f0      	bhi.n	8003288 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	617a      	str	r2, [r7, #20]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80032b6:	221b      	movs	r2, #27
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	68b8      	ldr	r0, [r7, #8]
 80032bc:	f7ff f9ce 	bl	800265c <_SendPacket>
  RECORD_END();
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f383 8811 	msr	BASEPRI, r3
}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200005f4 	.word	0x200005f4
 80032d4:	200005f0 	.word	0x200005f0

080032d8 <memset>:
 80032d8:	4402      	add	r2, r0
 80032da:	4603      	mov	r3, r0
 80032dc:	4293      	cmp	r3, r2
 80032de:	d100      	bne.n	80032e2 <memset+0xa>
 80032e0:	4770      	bx	lr
 80032e2:	f803 1b01 	strb.w	r1, [r3], #1
 80032e6:	e7f9      	b.n	80032dc <memset+0x4>

080032e8 <__libc_init_array>:
 80032e8:	b570      	push	{r4, r5, r6, lr}
 80032ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003320 <__libc_init_array+0x38>)
 80032ec:	4c0d      	ldr	r4, [pc, #52]	@ (8003324 <__libc_init_array+0x3c>)
 80032ee:	1b64      	subs	r4, r4, r5
 80032f0:	10a4      	asrs	r4, r4, #2
 80032f2:	2600      	movs	r6, #0
 80032f4:	42a6      	cmp	r6, r4
 80032f6:	d109      	bne.n	800330c <__libc_init_array+0x24>
 80032f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003328 <__libc_init_array+0x40>)
 80032fa:	4c0c      	ldr	r4, [pc, #48]	@ (800332c <__libc_init_array+0x44>)
 80032fc:	f000 f826 	bl	800334c <_init>
 8003300:	1b64      	subs	r4, r4, r5
 8003302:	10a4      	asrs	r4, r4, #2
 8003304:	2600      	movs	r6, #0
 8003306:	42a6      	cmp	r6, r4
 8003308:	d105      	bne.n	8003316 <__libc_init_array+0x2e>
 800330a:	bd70      	pop	{r4, r5, r6, pc}
 800330c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003310:	4798      	blx	r3
 8003312:	3601      	adds	r6, #1
 8003314:	e7ee      	b.n	80032f4 <__libc_init_array+0xc>
 8003316:	f855 3b04 	ldr.w	r3, [r5], #4
 800331a:	4798      	blx	r3
 800331c:	3601      	adds	r6, #1
 800331e:	e7f2      	b.n	8003306 <__libc_init_array+0x1e>
 8003320:	080033b0 	.word	0x080033b0
 8003324:	080033b0 	.word	0x080033b0
 8003328:	080033b0 	.word	0x080033b0
 800332c:	080033b4 	.word	0x080033b4

08003330 <memcpy>:
 8003330:	440a      	add	r2, r1
 8003332:	4291      	cmp	r1, r2
 8003334:	f100 33ff 	add.w	r3, r0, #4294967295
 8003338:	d100      	bne.n	800333c <memcpy+0xc>
 800333a:	4770      	bx	lr
 800333c:	b510      	push	{r4, lr}
 800333e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003346:	4291      	cmp	r1, r2
 8003348:	d1f9      	bne.n	800333e <memcpy+0xe>
 800334a:	bd10      	pop	{r4, pc}

0800334c <_init>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	bf00      	nop
 8003350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003352:	bc08      	pop	{r3}
 8003354:	469e      	mov	lr, r3
 8003356:	4770      	bx	lr

08003358 <_fini>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	bf00      	nop
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr
