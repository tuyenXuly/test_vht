
final_testvht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001437c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  08014520  08014520  00015520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015070  08015070  000171fc  2**0
                  CONTENTS
  4 .ARM          00000008  08015070  08015070  00016070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015078  08015078  000171fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015078  08015078  00016078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801507c  0801507c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  08015080  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016f70  200001fc  0801527c  000171fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001716c  0801527c  0001816c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000171fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000280b6  00000000  00000000  0001722c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c70  00000000  00000000  0003f2e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023b8  00000000  00000000  00044f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bb3  00000000  00000000  00047310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ce1  00000000  00000000  00048ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030a8b  00000000  00000000  0006aba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3af8  00000000  00000000  0009b62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f127  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7bc  00000000  00000000  0015f16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00169928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014504 	.word	0x08014504

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	08014504 	.word	0x08014504

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20016a50 	.word	0x20016a50

08000274 <strcmp>:
 8000274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800027c:	2a01      	cmp	r2, #1
 800027e:	bf28      	it	cs
 8000280:	429a      	cmpcs	r2, r3
 8000282:	d0f7      	beq.n	8000274 <strcmp>
 8000284:	1ad0      	subs	r0, r2, r3
 8000286:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <strlen>:
 8000330:	4603      	mov	r3, r0
 8000332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000336:	2a00      	cmp	r2, #0
 8000338:	d1fb      	bne.n	8000332 <strlen+0x2>
 800033a:	1a18      	subs	r0, r3, r0
 800033c:	3801      	subs	r0, #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	@ 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2140      	movs	r1, #64	@ 0x40
 8000f60:	4803      	ldr	r0, [pc, #12]	@ (8000f70 <SELECT+0x18>)
 8000f62:	f002 feb5 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f001 fd46 	bl	80029f8 <HAL_Delay>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40020000 	.word	0x40020000

08000f74 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2140      	movs	r1, #64	@ 0x40
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <DESELECT+0x18>)
 8000f7e:	f002 fea7 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f001 fd38 	bl	80029f8 <HAL_Delay>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40020000 	.word	0x40020000

08000f90 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f9a:	bf00      	nop
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <SPI_TxByte+0x30>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d1f8      	bne.n	8000f9c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000faa:	1df9      	adds	r1, r7, #7
 8000fac:	2364      	movs	r3, #100	@ 0x64
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <SPI_TxByte+0x30>)
 8000fb2:	f004 f898 	bl	80050e6 <HAL_SPI_Transmit>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002b8 	.word	0x200002b8

08000fc4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fd0:	bf00      	nop
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <SPI_TxBuffer+0x30>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d1f8      	bne.n	8000fd2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000fe0:	887a      	ldrh	r2, [r7, #2]
 8000fe2:	2364      	movs	r3, #100	@ 0x64
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <SPI_TxBuffer+0x30>)
 8000fe8:	f004 f87d 	bl	80050e6 <HAL_SPI_Transmit>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200002b8 	.word	0x200002b8

08000ff8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000ffe:	23ff      	movs	r3, #255	@ 0xff
 8001000:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001002:	bf00      	nop
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <SPI_RxByte+0x34>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b02      	cmp	r3, #2
 8001010:	d1f8      	bne.n	8001004 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001012:	1dba      	adds	r2, r7, #6
 8001014:	1df9      	adds	r1, r7, #7
 8001016:	2364      	movs	r3, #100	@ 0x64
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	4803      	ldr	r0, [pc, #12]	@ (800102c <SPI_RxByte+0x34>)
 800101e:	f004 f9a6 	bl	800536e <HAL_SPI_TransmitReceive>

	return data;
 8001022:	79bb      	ldrb	r3, [r7, #6]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200002b8 	.word	0x200002b8

08001030 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001038:	f7ff ffde 	bl	8000ff8 <SPI_RxByte>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	701a      	strb	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <SD_ReadyWait+0x30>)
 8001054:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001058:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800105a:	f7ff ffcd 	bl	8000ff8 <SPI_RxByte>
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2bff      	cmp	r3, #255	@ 0xff
 8001066:	d004      	beq.n	8001072 <SD_ReadyWait+0x26>
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <SD_ReadyWait+0x30>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f3      	bne.n	800105a <SD_ReadyWait+0xe>

	return res;
 8001072:	79fb      	ldrb	r3, [r7, #7]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20002498 	.word	0x20002498

08001080 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001086:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800108a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800108c:	f7ff ff72 	bl	8000f74 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	e005      	b.n	80010a2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001096:	20ff      	movs	r0, #255	@ 0xff
 8001098:	f7ff ff7a 	bl	8000f90 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	3301      	adds	r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b09      	cmp	r3, #9
 80010a6:	ddf6      	ble.n	8001096 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80010a8:	f7ff ff56 	bl	8000f58 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80010ac:	2340      	movs	r3, #64	@ 0x40
 80010ae:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80010c0:	2395      	movs	r3, #149	@ 0x95
 80010c2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80010c4:	463b      	mov	r3, r7
 80010c6:	2106      	movs	r1, #6
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff7b 	bl	8000fc4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80010ce:	e002      	b.n	80010d6 <SD_PowerOn+0x56>
	{
		cnt--;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80010d6:	f7ff ff8f 	bl	8000ff8 <SPI_RxByte>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d002      	beq.n	80010e6 <SD_PowerOn+0x66>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f4      	bne.n	80010d0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80010e6:	f7ff ff45 	bl	8000f74 <DESELECT>
	SPI_TxByte(0XFF);
 80010ea:	20ff      	movs	r0, #255	@ 0xff
 80010ec:	f7ff ff50 	bl	8000f90 <SPI_TxByte>

	PowerFlag = 1;
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <SD_PowerOn+0x80>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000219 	.word	0x20000219

08001104 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <SD_PowerOff+0x14>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	20000219 	.word	0x20000219

0800111c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <SD_CheckPower+0x14>)
 8001122:	781b      	ldrb	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000219 	.word	0x20000219

08001134 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800113e:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <SD_RxDataBlock+0x5c>)
 8001140:	22c8      	movs	r2, #200	@ 0xc8
 8001142:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001144:	f7ff ff58 	bl	8000ff8 <SPI_RxByte>
 8001148:	4603      	mov	r3, r0
 800114a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2bff      	cmp	r3, #255	@ 0xff
 8001150:	d104      	bne.n	800115c <SD_RxDataBlock+0x28>
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <SD_RxDataBlock+0x5c>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f3      	bne.n	8001144 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001160:	d001      	beq.n	8001166 <SD_RxDataBlock+0x32>
 8001162:	2300      	movs	r3, #0
 8001164:	e00f      	b.n	8001186 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5f 	bl	8001030 <SPI_RxBytePtr>
	} while(len--);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	1e5a      	subs	r2, r3, #1
 8001176:	603a      	str	r2, [r7, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f4      	bne.n	8001166 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800117c:	f7ff ff3c 	bl	8000ff8 <SPI_RxByte>
	SPI_RxByte();
 8001180:	f7ff ff3a 	bl	8000ff8 <SPI_RxByte>

	return TRUE;
 8001184:	2301      	movs	r3, #1
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20002497 	.word	0x20002497

08001194 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80011a4:	f7ff ff52 	bl	800104c <SD_ReadyWait>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2bff      	cmp	r3, #255	@ 0xff
 80011ac:	d001      	beq.n	80011b2 <SD_TxDataBlock+0x1e>
 80011ae:	2300      	movs	r3, #0
 80011b0:	e02f      	b.n	8001212 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff feeb 	bl	8000f90 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	2bfd      	cmp	r3, #253	@ 0xfd
 80011be:	d020      	beq.n	8001202 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80011c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fefd 	bl	8000fc4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80011ca:	f7ff ff15 	bl	8000ff8 <SPI_RxByte>
		SPI_RxByte();
 80011ce:	f7ff ff13 	bl	8000ff8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80011d2:	e00b      	b.n	80011ec <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80011d4:	f7ff ff10 	bl	8000ff8 <SPI_RxByte>
 80011d8:	4603      	mov	r3, r0
 80011da:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	f003 031f 	and.w	r3, r3, #31
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	d006      	beq.n	80011f4 <SD_TxDataBlock+0x60>
			i++;
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	3301      	adds	r3, #1
 80011ea:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	2b40      	cmp	r3, #64	@ 0x40
 80011f0:	d9f0      	bls.n	80011d4 <SD_TxDataBlock+0x40>
 80011f2:	e000      	b.n	80011f6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80011f4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80011f6:	bf00      	nop
 80011f8:	f7ff fefe 	bl	8000ff8 <SPI_RxByte>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0fa      	beq.n	80011f8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f003 031f 	and.w	r3, r3, #31
 8001208:	2b05      	cmp	r3, #5
 800120a:	d101      	bne.n	8001210 <SD_TxDataBlock+0x7c>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	6039      	str	r1, [r7, #0]
 8001224:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001226:	f7ff ff11 	bl	800104c <SD_ReadyWait>
 800122a:	4603      	mov	r3, r0
 800122c:	2bff      	cmp	r3, #255	@ 0xff
 800122e:	d001      	beq.n	8001234 <SD_SendCmd+0x1a>
 8001230:	23ff      	movs	r3, #255	@ 0xff
 8001232:	e042      	b.n	80012ba <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff feaa 	bl	8000f90 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	0e1b      	lsrs	r3, r3, #24
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fea4 	bl	8000f90 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	0c1b      	lsrs	r3, r3, #16
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fe9e 	bl	8000f90 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fe98 	bl	8000f90 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fe93 	bl	8000f90 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b40      	cmp	r3, #64	@ 0x40
 800126e:	d102      	bne.n	8001276 <SD_SendCmd+0x5c>
 8001270:	2395      	movs	r3, #149	@ 0x95
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e007      	b.n	8001286 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b48      	cmp	r3, #72	@ 0x48
 800127a:	d102      	bne.n	8001282 <SD_SendCmd+0x68>
 800127c:	2387      	movs	r3, #135	@ 0x87
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e001      	b.n	8001286 <SD_SendCmd+0x6c>
	else crc = 1;
 8001282:	2301      	movs	r3, #1
 8001284:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fe81 	bl	8000f90 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b4c      	cmp	r3, #76	@ 0x4c
 8001292:	d101      	bne.n	8001298 <SD_SendCmd+0x7e>
 8001294:	f7ff feb0 	bl	8000ff8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001298:	230a      	movs	r3, #10
 800129a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800129c:	f7ff feac 	bl	8000ff8 <SPI_RxByte>
 80012a0:	4603      	mov	r3, r0
 80012a2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80012a4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da05      	bge.n	80012b8 <SD_SendCmd+0x9e>
 80012ac:	7bbb      	ldrb	r3, [r7, #14]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	73bb      	strb	r3, [r7, #14]
 80012b2:	7bbb      	ldrb	r3, [r7, #14]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f1      	bne.n	800129c <SD_SendCmd+0x82>

	return res;
 80012b8:	7b7b      	ldrb	r3, [r7, #13]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SD_disk_initialize+0x14>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0d6      	b.n	8001486 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80012d8:	4b6d      	ldr	r3, [pc, #436]	@ (8001490 <SD_disk_initialize+0x1cc>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <SD_disk_initialize+0x2a>
 80012e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001490 <SD_disk_initialize+0x1cc>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	e0cb      	b.n	8001486 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80012ee:	f7ff fec7 	bl	8001080 <SD_PowerOn>

	/* slave select */
	SELECT();
 80012f2:	f7ff fe31 	bl	8000f58 <SELECT>

	/* check disk type */
	type = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80012fa:	2100      	movs	r1, #0
 80012fc:	2040      	movs	r0, #64	@ 0x40
 80012fe:	f7ff ff8c 	bl	800121a <SD_SendCmd>
 8001302:	4603      	mov	r3, r0
 8001304:	2b01      	cmp	r3, #1
 8001306:	f040 80a6 	bne.w	8001456 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800130a:	4b62      	ldr	r3, [pc, #392]	@ (8001494 <SD_disk_initialize+0x1d0>)
 800130c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001310:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001312:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001316:	2048      	movs	r0, #72	@ 0x48
 8001318:	f7ff ff7f 	bl	800121a <SD_SendCmd>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d158      	bne.n	80013d4 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e00c      	b.n	8001342 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001328:	7bfc      	ldrb	r4, [r7, #15]
 800132a:	f7ff fe65 	bl	8000ff8 <SPI_RxByte>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	f104 0310 	add.w	r3, r4, #16
 8001336:	443b      	add	r3, r7
 8001338:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	3301      	adds	r3, #1
 8001340:	73fb      	strb	r3, [r7, #15]
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	2b03      	cmp	r3, #3
 8001346:	d9ef      	bls.n	8001328 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001348:	7abb      	ldrb	r3, [r7, #10]
 800134a:	2b01      	cmp	r3, #1
 800134c:	f040 8083 	bne.w	8001456 <SD_disk_initialize+0x192>
 8001350:	7afb      	ldrb	r3, [r7, #11]
 8001352:	2baa      	cmp	r3, #170	@ 0xaa
 8001354:	d17f      	bne.n	8001456 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001356:	2100      	movs	r1, #0
 8001358:	2077      	movs	r0, #119	@ 0x77
 800135a:	f7ff ff5e 	bl	800121a <SD_SendCmd>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d807      	bhi.n	8001374 <SD_disk_initialize+0xb0>
 8001364:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001368:	2069      	movs	r0, #105	@ 0x69
 800136a:	f7ff ff56 	bl	800121a <SD_SendCmd>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001374:	4b47      	ldr	r3, [pc, #284]	@ (8001494 <SD_disk_initialize+0x1d0>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1eb      	bne.n	8001356 <SD_disk_initialize+0x92>
 800137e:	e000      	b.n	8001382 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001380:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001382:	4b44      	ldr	r3, [pc, #272]	@ (8001494 <SD_disk_initialize+0x1d0>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d064      	beq.n	8001456 <SD_disk_initialize+0x192>
 800138c:	2100      	movs	r1, #0
 800138e:	207a      	movs	r0, #122	@ 0x7a
 8001390:	f7ff ff43 	bl	800121a <SD_SendCmd>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d15d      	bne.n	8001456 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	e00c      	b.n	80013ba <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80013a0:	7bfc      	ldrb	r4, [r7, #15]
 80013a2:	f7ff fe29 	bl	8000ff8 <SPI_RxByte>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	f104 0310 	add.w	r3, r4, #16
 80013ae:	443b      	add	r3, r7
 80013b0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	3301      	adds	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d9ef      	bls.n	80013a0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80013c0:	7a3b      	ldrb	r3, [r7, #8]
 80013c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SD_disk_initialize+0x10a>
 80013ca:	230c      	movs	r3, #12
 80013cc:	e000      	b.n	80013d0 <SD_disk_initialize+0x10c>
 80013ce:	2304      	movs	r3, #4
 80013d0:	73bb      	strb	r3, [r7, #14]
 80013d2:	e040      	b.n	8001456 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80013d4:	2100      	movs	r1, #0
 80013d6:	2077      	movs	r0, #119	@ 0x77
 80013d8:	f7ff ff1f 	bl	800121a <SD_SendCmd>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d808      	bhi.n	80013f4 <SD_disk_initialize+0x130>
 80013e2:	2100      	movs	r1, #0
 80013e4:	2069      	movs	r0, #105	@ 0x69
 80013e6:	f7ff ff18 	bl	800121a <SD_SendCmd>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d801      	bhi.n	80013f4 <SD_disk_initialize+0x130>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e000      	b.n	80013f6 <SD_disk_initialize+0x132>
 80013f4:	2301      	movs	r3, #1
 80013f6:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d10e      	bne.n	800141c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80013fe:	2100      	movs	r1, #0
 8001400:	2077      	movs	r0, #119	@ 0x77
 8001402:	f7ff ff0a 	bl	800121a <SD_SendCmd>
 8001406:	4603      	mov	r3, r0
 8001408:	2b01      	cmp	r3, #1
 800140a:	d80e      	bhi.n	800142a <SD_disk_initialize+0x166>
 800140c:	2100      	movs	r1, #0
 800140e:	2069      	movs	r0, #105	@ 0x69
 8001410:	f7ff ff03 	bl	800121a <SD_SendCmd>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d107      	bne.n	800142a <SD_disk_initialize+0x166>
 800141a:	e00d      	b.n	8001438 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800141c:	2100      	movs	r1, #0
 800141e:	2041      	movs	r0, #65	@ 0x41
 8001420:	f7ff fefb 	bl	800121a <SD_SendCmd>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d005      	beq.n	8001436 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <SD_disk_initialize+0x1d0>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1e1      	bne.n	80013f8 <SD_disk_initialize+0x134>
 8001434:	e000      	b.n	8001438 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001436:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001438:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <SD_disk_initialize+0x1d0>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d007      	beq.n	8001452 <SD_disk_initialize+0x18e>
 8001442:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001446:	2050      	movs	r0, #80	@ 0x50
 8001448:	f7ff fee7 	bl	800121a <SD_SendCmd>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SD_disk_initialize+0x192>
 8001452:	2300      	movs	r3, #0
 8001454:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001456:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <SD_disk_initialize+0x1d4>)
 8001458:	7bbb      	ldrb	r3, [r7, #14]
 800145a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800145c:	f7ff fd8a 	bl	8000f74 <DESELECT>
	SPI_RxByte();
 8001460:	f7ff fdca 	bl	8000ff8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001464:	7bbb      	ldrb	r3, [r7, #14]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d008      	beq.n	800147c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <SD_disk_initialize+0x1cc>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <SD_disk_initialize+0x1cc>)
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	e001      	b.n	8001480 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800147c:	f7ff fe42 	bl	8001104 <SD_PowerOff>
	}

	return Stat;
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <SD_disk_initialize+0x1cc>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	bf00      	nop
 8001490:	20000000 	.word	0x20000000
 8001494:	20002497 	.word	0x20002497
 8001498:	20000218 	.word	0x20000218

0800149c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SD_disk_status+0x14>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e002      	b.n	80014b6 <SD_disk_status+0x1a>
	return Stat;
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <SD_disk_status+0x28>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000

080014c8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <SD_disk_read+0x1c>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <SD_disk_read+0x20>
 80014e4:	2304      	movs	r3, #4
 80014e6:	e051      	b.n	800158c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <SD_disk_read+0xcc>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SD_disk_read+0x32>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e048      	b.n	800158c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80014fa:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <SD_disk_read+0xd0>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <SD_disk_read+0x44>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	025b      	lsls	r3, r3, #9
 800150a:	607b      	str	r3, [r7, #4]

	SELECT();
 800150c:	f7ff fd24 	bl	8000f58 <SELECT>

	if (count == 1)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d111      	bne.n	800153a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	2051      	movs	r0, #81	@ 0x51
 800151a:	f7ff fe7e 	bl	800121a <SD_SendCmd>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d129      	bne.n	8001578 <SD_disk_read+0xb0>
 8001524:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f7ff fe03 	bl	8001134 <SD_RxDataBlock>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d021      	beq.n	8001578 <SD_disk_read+0xb0>
 8001534:	2300      	movs	r3, #0
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	e01e      	b.n	8001578 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	2052      	movs	r0, #82	@ 0x52
 800153e:	f7ff fe6c 	bl	800121a <SD_SendCmd>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d117      	bne.n	8001578 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001548:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800154c:	68b8      	ldr	r0, [r7, #8]
 800154e:	f7ff fdf1 	bl	8001134 <SD_RxDataBlock>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00a      	beq.n	800156e <SD_disk_read+0xa6>
				buff += 512;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800155e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	3b01      	subs	r3, #1
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1ed      	bne.n	8001548 <SD_disk_read+0x80>
 800156c:	e000      	b.n	8001570 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800156e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001570:	2100      	movs	r1, #0
 8001572:	204c      	movs	r0, #76	@ 0x4c
 8001574:	f7ff fe51 	bl	800121a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001578:	f7ff fcfc 	bl	8000f74 <DESELECT>
	SPI_RxByte();
 800157c:	f7ff fd3c 	bl	8000ff8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	bf14      	ite	ne
 8001586:	2301      	movne	r3, #1
 8001588:	2300      	moveq	r3, #0
 800158a:	b2db      	uxtb	r3, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000000 	.word	0x20000000
 8001598:	20000218 	.word	0x20000218

0800159c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <SD_disk_write+0x1c>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <SD_disk_write+0x20>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e06b      	b.n	8001694 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015bc:	4b37      	ldr	r3, [pc, #220]	@ (800169c <SD_disk_write+0x100>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SD_disk_write+0x32>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e062      	b.n	8001694 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80015ce:	4b33      	ldr	r3, [pc, #204]	@ (800169c <SD_disk_write+0x100>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <SD_disk_write+0x44>
 80015dc:	2302      	movs	r3, #2
 80015de:	e059      	b.n	8001694 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015e0:	4b2f      	ldr	r3, [pc, #188]	@ (80016a0 <SD_disk_write+0x104>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <SD_disk_write+0x56>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	025b      	lsls	r3, r3, #9
 80015f0:	607b      	str	r3, [r7, #4]

	SELECT();
 80015f2:	f7ff fcb1 	bl	8000f58 <SELECT>

	if (count == 1)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d110      	bne.n	800161e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	2058      	movs	r0, #88	@ 0x58
 8001600:	f7ff fe0b 	bl	800121a <SD_SendCmd>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d13a      	bne.n	8001680 <SD_disk_write+0xe4>
 800160a:	21fe      	movs	r1, #254	@ 0xfe
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f7ff fdc1 	bl	8001194 <SD_TxDataBlock>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d033      	beq.n	8001680 <SD_disk_write+0xe4>
			count = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	e030      	b.n	8001680 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <SD_disk_write+0x104>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d007      	beq.n	800163a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800162a:	2100      	movs	r1, #0
 800162c:	2077      	movs	r0, #119	@ 0x77
 800162e:	f7ff fdf4 	bl	800121a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001632:	6839      	ldr	r1, [r7, #0]
 8001634:	2057      	movs	r0, #87	@ 0x57
 8001636:	f7ff fdf0 	bl	800121a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	2059      	movs	r0, #89	@ 0x59
 800163e:	f7ff fdec 	bl	800121a <SD_SendCmd>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d11b      	bne.n	8001680 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001648:	21fc      	movs	r1, #252	@ 0xfc
 800164a:	68b8      	ldr	r0, [r7, #8]
 800164c:	f7ff fda2 	bl	8001194 <SD_TxDataBlock>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00a      	beq.n	800166c <SD_disk_write+0xd0>
				buff += 512;
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800165c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1ee      	bne.n	8001648 <SD_disk_write+0xac>
 800166a:	e000      	b.n	800166e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800166c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800166e:	21fd      	movs	r1, #253	@ 0xfd
 8001670:	2000      	movs	r0, #0
 8001672:	f7ff fd8f 	bl	8001194 <SD_TxDataBlock>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <SD_disk_write+0xe4>
			{
				count = 1;
 800167c:	2301      	movs	r3, #1
 800167e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001680:	f7ff fc78 	bl	8000f74 <DESELECT>
	SPI_RxByte();
 8001684:	f7ff fcb8 	bl	8000ff8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000218 	.word	0x20000218

080016a4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b08b      	sub	sp, #44	@ 0x2c
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	603a      	str	r2, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	460b      	mov	r3, r1
 80016b2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SD_disk_ioctl+0x1e>
 80016be:	2304      	movs	r3, #4
 80016c0:	e113      	b.n	80018ea <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80016c8:	79bb      	ldrb	r3, [r7, #6]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d124      	bne.n	8001718 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d012      	beq.n	80016fc <SD_disk_ioctl+0x58>
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	dc1a      	bgt.n	8001710 <SD_disk_ioctl+0x6c>
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <SD_disk_ioctl+0x40>
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d006      	beq.n	80016f0 <SD_disk_ioctl+0x4c>
 80016e2:	e015      	b.n	8001710 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80016e4:	f7ff fd0e 	bl	8001104 <SD_PowerOff>
			res = RES_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80016ee:	e0fa      	b.n	80018e6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80016f0:	f7ff fcc6 	bl	8001080 <SD_PowerOn>
			res = RES_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80016fa:	e0f4      	b.n	80018e6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	1c5c      	adds	r4, r3, #1
 8001700:	f7ff fd0c 	bl	800111c <SD_CheckPower>
 8001704:	4603      	mov	r3, r0
 8001706:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001708:	2300      	movs	r3, #0
 800170a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800170e:	e0ea      	b.n	80018e6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001710:	2304      	movs	r3, #4
 8001712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001716:	e0e6      	b.n	80018e6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001718:	4b76      	ldr	r3, [pc, #472]	@ (80018f4 <SD_disk_ioctl+0x250>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SD_disk_ioctl+0x86>
 8001726:	2303      	movs	r3, #3
 8001728:	e0df      	b.n	80018ea <SD_disk_ioctl+0x246>

		SELECT();
 800172a:	f7ff fc15 	bl	8000f58 <SELECT>

		switch (ctrl)
 800172e:	79bb      	ldrb	r3, [r7, #6]
 8001730:	2b0d      	cmp	r3, #13
 8001732:	f200 80c9 	bhi.w	80018c8 <SD_disk_ioctl+0x224>
 8001736:	a201      	add	r2, pc, #4	@ (adr r2, 800173c <SD_disk_ioctl+0x98>)
 8001738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173c:	08001833 	.word	0x08001833
 8001740:	08001775 	.word	0x08001775
 8001744:	08001823 	.word	0x08001823
 8001748:	080018c9 	.word	0x080018c9
 800174c:	080018c9 	.word	0x080018c9
 8001750:	080018c9 	.word	0x080018c9
 8001754:	080018c9 	.word	0x080018c9
 8001758:	080018c9 	.word	0x080018c9
 800175c:	080018c9 	.word	0x080018c9
 8001760:	080018c9 	.word	0x080018c9
 8001764:	080018c9 	.word	0x080018c9
 8001768:	08001845 	.word	0x08001845
 800176c:	08001869 	.word	0x08001869
 8001770:	0800188d 	.word	0x0800188d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001774:	2100      	movs	r1, #0
 8001776:	2049      	movs	r0, #73	@ 0x49
 8001778:	f7ff fd4f 	bl	800121a <SD_SendCmd>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 80a6 	bne.w	80018d0 <SD_disk_ioctl+0x22c>
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	2110      	movs	r1, #16
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fcd2 	bl	8001134 <SD_RxDataBlock>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 809c 	beq.w	80018d0 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001798:	7b3b      	ldrb	r3, [r7, #12]
 800179a:	099b      	lsrs	r3, r3, #6
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d10d      	bne.n	80017be <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80017a2:	7d7b      	ldrb	r3, [r7, #21]
 80017a4:	461a      	mov	r2, r3
 80017a6:	7d3b      	ldrb	r3, [r7, #20]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80017b4:	8bfb      	ldrh	r3, [r7, #30]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e02d      	b.n	800181a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80017be:	7c7b      	ldrb	r3, [r7, #17]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	7dbb      	ldrb	r3, [r7, #22]
 80017c8:	09db      	lsrs	r3, r3, #7
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	7d7b      	ldrb	r3, [r7, #21]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f003 0306 	and.w	r3, r3, #6
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4413      	add	r3, r2
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	3302      	adds	r3, #2
 80017e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80017e6:	7d3b      	ldrb	r3, [r7, #20]
 80017e8:	099b      	lsrs	r3, r3, #6
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	7cfb      	ldrb	r3, [r7, #19]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	7cbb      	ldrb	r3, [r7, #18]
 80017fa:	029b      	lsls	r3, r3, #10
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001802:	b29b      	uxth	r3, r3
 8001804:	4413      	add	r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	3301      	adds	r3, #1
 800180a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800180c:	8bfa      	ldrh	r2, [r7, #30]
 800180e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001812:	3b09      	subs	r3, #9
 8001814:	409a      	lsls	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001820:	e056      	b.n	80018d0 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001828:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001830:	e055      	b.n	80018de <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001832:	f7ff fc0b 	bl	800104c <SD_ReadyWait>
 8001836:	4603      	mov	r3, r0
 8001838:	2bff      	cmp	r3, #255	@ 0xff
 800183a:	d14b      	bne.n	80018d4 <SD_disk_ioctl+0x230>
 800183c:	2300      	movs	r3, #0
 800183e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001842:	e047      	b.n	80018d4 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001844:	2100      	movs	r1, #0
 8001846:	2049      	movs	r0, #73	@ 0x49
 8001848:	f7ff fce7 	bl	800121a <SD_SendCmd>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d142      	bne.n	80018d8 <SD_disk_ioctl+0x234>
 8001852:	2110      	movs	r1, #16
 8001854:	6a38      	ldr	r0, [r7, #32]
 8001856:	f7ff fc6d 	bl	8001134 <SD_RxDataBlock>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d03b      	beq.n	80018d8 <SD_disk_ioctl+0x234>
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001866:	e037      	b.n	80018d8 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001868:	2100      	movs	r1, #0
 800186a:	204a      	movs	r0, #74	@ 0x4a
 800186c:	f7ff fcd5 	bl	800121a <SD_SendCmd>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d132      	bne.n	80018dc <SD_disk_ioctl+0x238>
 8001876:	2110      	movs	r1, #16
 8001878:	6a38      	ldr	r0, [r7, #32]
 800187a:	f7ff fc5b 	bl	8001134 <SD_RxDataBlock>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d02b      	beq.n	80018dc <SD_disk_ioctl+0x238>
 8001884:	2300      	movs	r3, #0
 8001886:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800188a:	e027      	b.n	80018dc <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800188c:	2100      	movs	r1, #0
 800188e:	207a      	movs	r0, #122	@ 0x7a
 8001890:	f7ff fcc3 	bl	800121a <SD_SendCmd>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d116      	bne.n	80018c8 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800189a:	2300      	movs	r3, #0
 800189c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018a0:	e00b      	b.n	80018ba <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80018a2:	6a3c      	ldr	r4, [r7, #32]
 80018a4:	1c63      	adds	r3, r4, #1
 80018a6:	623b      	str	r3, [r7, #32]
 80018a8:	f7ff fba6 	bl	8000ff8 <SPI_RxByte>
 80018ac:	4603      	mov	r3, r0
 80018ae:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80018b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018b4:	3301      	adds	r3, #1
 80018b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d9ef      	bls.n	80018a2 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80018c8:	2304      	movs	r3, #4
 80018ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80018ce:	e006      	b.n	80018de <SD_disk_ioctl+0x23a>
			break;
 80018d0:	bf00      	nop
 80018d2:	e004      	b.n	80018de <SD_disk_ioctl+0x23a>
			break;
 80018d4:	bf00      	nop
 80018d6:	e002      	b.n	80018de <SD_disk_ioctl+0x23a>
			break;
 80018d8:	bf00      	nop
 80018da:	e000      	b.n	80018de <SD_disk_ioctl+0x23a>
			break;
 80018dc:	bf00      	nop
		}

		DESELECT();
 80018de:	f7ff fb49 	bl	8000f74 <DESELECT>
		SPI_RxByte();
 80018e2:	f7ff fb89 	bl	8000ff8 <SPI_RxByte>
	}

	return res;
 80018e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	372c      	adds	r7, #44	@ 0x2c
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd90      	pop	{r4, r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000000 	.word	0x20000000

080018f8 <SDTimer_Handler>:
// init timer of fatfs
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80018fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <SDTimer_Handler+0x40>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <SDTimer_Handler+0x1c>
    Timer1--;
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <SDTimer_Handler+0x40>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	3b01      	subs	r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <SDTimer_Handler+0x40>)
 8001912:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <SDTimer_Handler+0x44>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <SDTimer_Handler+0x34>
    Timer2--;
 800191e:	4b07      	ldr	r3, [pc, #28]	@ (800193c <SDTimer_Handler+0x44>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	3b01      	subs	r3, #1
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <SDTimer_Handler+0x44>)
 800192a:	701a      	strb	r2, [r3, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20002497 	.word	0x20002497
 800193c:	20002498 	.word	0x20002498

08001940 <clear_buffer>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void clear_buffer (void)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	e007      	b.n	800195c <clear_buffer+0x1c>
 800194c:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <clear_buffer+0x30>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3301      	adds	r3, #1
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b31      	cmp	r3, #49	@ 0x31
 8001960:	ddf4      	ble.n	800194c <clear_buffer+0xc>
}
 8001962:	bf00      	nop
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	20002464 	.word	0x20002464

08001974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08c      	sub	sp, #48	@ 0x30
 8001978:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800197a:	f000 fffb 	bl	8002974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800197e:	f000 f989 	bl	8001c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001982:	f000 fb73 	bl	800206c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001986:	f000 fa43 	bl	8001e10 <MX_I2C1_Init>
  MX_TIM1_Init();
 800198a:	f000 faa5 	bl	8001ed8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800198e:	f000 fb43 	bl	8002018 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001992:	f000 fa6b 	bl	8001e6c <MX_SPI2_Init>
  MX_FATFS_Init();
 8001996:	f005 fb85 	bl	80070a4 <MX_FATFS_Init>
  MX_ADC1_Init();
 800199a:	f000 f9e7 	bl	8001d6c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // init lcd
  CLCD_I2C_Init(&LCD1,&hi2c1,0x4e,20,4);
 800199e:	2304      	movs	r3, #4
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2314      	movs	r3, #20
 80019a4:	224e      	movs	r2, #78	@ 0x4e
 80019a6:	4997      	ldr	r1, [pc, #604]	@ (8001c04 <main+0x290>)
 80019a8:	4897      	ldr	r0, [pc, #604]	@ (8001c08 <main+0x294>)
 80019aa:	f008 fe53 	bl	800a654 <CLCD_I2C_Init>
//     flash_write_arr(0x08060000,(uint8_t *)&parameter,sizeof(parameter));
//     flash_lock();

  // read parameter from flash
  //flash_unlock();
  flash_read_arr(0x08060000, (uint8_t*)&parameter_read, sizeof(parameter_read));
 80019ae:	2211      	movs	r2, #17
 80019b0:	4996      	ldr	r1, [pc, #600]	@ (8001c0c <main+0x298>)
 80019b2:	4897      	ldr	r0, [pc, #604]	@ (8001c10 <main+0x29c>)
 80019b4:	f008 ffb8 	bl	800a928 <flash_read_arr>
  //flash_lock();
  print_cli("read first - s1:%d s2:%d s3:%d s4:%d\n",parameter_read.s1,parameter_read.t1,parameter_read.s2,parameter_read.t2);
 80019b8:	4b94      	ldr	r3, [pc, #592]	@ (8001c0c <main+0x298>)
 80019ba:	7adb      	ldrb	r3, [r3, #11]
 80019bc:	4619      	mov	r1, r3
 80019be:	4b93      	ldr	r3, [pc, #588]	@ (8001c0c <main+0x298>)
 80019c0:	7b1b      	ldrb	r3, [r3, #12]
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b91      	ldr	r3, [pc, #580]	@ (8001c0c <main+0x298>)
 80019c6:	7b5b      	ldrb	r3, [r3, #13]
 80019c8:	4618      	mov	r0, r3
 80019ca:	4b90      	ldr	r3, [pc, #576]	@ (8001c0c <main+0x298>)
 80019cc:	7b9b      	ldrb	r3, [r3, #14]
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	4603      	mov	r3, r0
 80019d2:	4890      	ldr	r0, [pc, #576]	@ (8001c14 <main+0x2a0>)
 80019d4:	f009 f95a 	bl	800ac8c <print_cli>

  sprintf(str, "file%d.txt", parameter_read.file_counter);
 80019d8:	4b8c      	ldr	r3, [pc, #560]	@ (8001c0c <main+0x298>)
 80019da:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	498d      	ldr	r1, [pc, #564]	@ (8001c18 <main+0x2a4>)
 80019e4:	488d      	ldr	r0, [pc, #564]	@ (8001c1c <main+0x2a8>)
 80019e6:	f010 fb0f 	bl	8012008 <siprintf>
  print_cli("%s\n",str);
 80019ea:	498c      	ldr	r1, [pc, #560]	@ (8001c1c <main+0x2a8>)
 80019ec:	488c      	ldr	r0, [pc, #560]	@ (8001c20 <main+0x2ac>)
 80019ee:	f009 f94d 	bl	800ac8c <print_cli>
  parameter_read.file_counter ++;
 80019f2:	4b86      	ldr	r3, [pc, #536]	@ (8001c0c <main+0x298>)
 80019f4:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b83      	ldr	r3, [pc, #524]	@ (8001c0c <main+0x298>)
 8001a00:	f8a3 200f 	strh.w	r2, [r3, #15]
  // write parameter into flash
     flash_unlock();
 8001a04:	f008 ff3c 	bl	800a880 <flash_unlock>
     if(flash_erease(FLASH_SECTOR_7) != HAL_OK){
 8001a08:	2007      	movs	r0, #7
 8001a0a:	f008 ff45 	bl	800a898 <flash_erease>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <main+0xa6>
    	 flash_erease(FLASH_SECTOR_7);
 8001a14:	2007      	movs	r0, #7
 8001a16:	f008 ff3f 	bl	800a898 <flash_erease>
     }
     flash_write_arr(0x08060000,(uint8_t *)&parameter_read,sizeof(parameter_read));
 8001a1a:	2211      	movs	r2, #17
 8001a1c:	497b      	ldr	r1, [pc, #492]	@ (8001c0c <main+0x298>)
 8001a1e:	487c      	ldr	r0, [pc, #496]	@ (8001c10 <main+0x29c>)
 8001a20:	f008 ff55 	bl	800a8ce <flash_write_arr>
     flash_lock();
 8001a24:	f008 ff32 	bl	800a88c <flash_lock>

     // init fatfs
     fresult = f_mount(&fs, "/", 1);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	497e      	ldr	r1, [pc, #504]	@ (8001c24 <main+0x2b0>)
 8001a2c:	487e      	ldr	r0, [pc, #504]	@ (8001c28 <main+0x2b4>)
 8001a2e:	f007 fd81 	bl	8009534 <f_mount>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b7d      	ldr	r3, [pc, #500]	@ (8001c2c <main+0x2b8>)
 8001a38:	701a      	strb	r2, [r3, #0]
     if (fresult != FR_OK)  print_cli("ERROR!!! in mounting SD CARD...\n\n");
 8001a3a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c2c <main+0x2b8>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <main+0xd6>
 8001a42:	487b      	ldr	r0, [pc, #492]	@ (8001c30 <main+0x2bc>)
 8001a44:	f009 f922 	bl	800ac8c <print_cli>
 8001a48:	e002      	b.n	8001a50 <main+0xdc>
     else print_cli("SD CARD mounted successfully...\n\n");
 8001a4a:	487a      	ldr	r0, [pc, #488]	@ (8001c34 <main+0x2c0>)
 8001a4c:	f009 f91e 	bl	800ac8c <print_cli>



// create tasks
  status = xTaskCreate(sensor_task, "sensor_task", 250, NULL, 2, &handle_sensor_task);
 8001a50:	4b79      	ldr	r3, [pc, #484]	@ (8001c38 <main+0x2c4>)
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	2302      	movs	r3, #2
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	22fa      	movs	r2, #250	@ 0xfa
 8001a5c:	4977      	ldr	r1, [pc, #476]	@ (8001c3c <main+0x2c8>)
 8001a5e:	4878      	ldr	r0, [pc, #480]	@ (8001c40 <main+0x2cc>)
 8001a60:	f00b fbc9 	bl	800d1f6 <xTaskCreate>
 8001a64:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10b      	bne.n	8001a84 <main+0x110>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8001a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a70:	f383 8811 	msr	BASEPRI, r3
 8001a74:	f3bf 8f6f 	isb	sy
 8001a78:	f3bf 8f4f 	dsb	sy
 8001a7c:	623b      	str	r3, [r7, #32]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8001a7e:	bf00      	nop
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <main+0x10c>

  status = xTaskCreate(scan_keypad_task, "scan_keypad_task", 250, NULL, 3, &handle_scan_keypad_task);
 8001a84:	4b6f      	ldr	r3, [pc, #444]	@ (8001c44 <main+0x2d0>)
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2303      	movs	r3, #3
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	22fa      	movs	r2, #250	@ 0xfa
 8001a90:	496d      	ldr	r1, [pc, #436]	@ (8001c48 <main+0x2d4>)
 8001a92:	486e      	ldr	r0, [pc, #440]	@ (8001c4c <main+0x2d8>)
 8001a94:	f00b fbaf 	bl	800d1f6 <xTaskCreate>
 8001a98:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10b      	bne.n	8001ab8 <main+0x144>
    __asm volatile
 8001aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aa4:	f383 8811 	msr	BASEPRI, r3
 8001aa8:	f3bf 8f6f 	isb	sy
 8001aac:	f3bf 8f4f 	dsb	sy
 8001ab0:	61fb      	str	r3, [r7, #28]
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <main+0x140>

  status = xTaskCreate(print_task, "print_task", 150, NULL, 1, &handle_print_task);
 8001ab8:	4b65      	ldr	r3, [pc, #404]	@ (8001c50 <main+0x2dc>)
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	2301      	movs	r3, #1
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2296      	movs	r2, #150	@ 0x96
 8001ac4:	4963      	ldr	r1, [pc, #396]	@ (8001c54 <main+0x2e0>)
 8001ac6:	4864      	ldr	r0, [pc, #400]	@ (8001c58 <main+0x2e4>)
 8001ac8:	f00b fb95 	bl	800d1f6 <xTaskCreate>
 8001acc:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10b      	bne.n	8001aec <main+0x178>
    __asm volatile
 8001ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ad8:	f383 8811 	msr	BASEPRI, r3
 8001adc:	f3bf 8f6f 	isb	sy
 8001ae0:	f3bf 8f4f 	dsb	sy
 8001ae4:	61bb      	str	r3, [r7, #24]
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <main+0x174>

  status = xTaskCreate(motor_task, "motor_task", 200, NULL, 3, &handle_motor_task);
 8001aec:	4b5b      	ldr	r3, [pc, #364]	@ (8001c5c <main+0x2e8>)
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2303      	movs	r3, #3
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2300      	movs	r3, #0
 8001af6:	22c8      	movs	r2, #200	@ 0xc8
 8001af8:	4959      	ldr	r1, [pc, #356]	@ (8001c60 <main+0x2ec>)
 8001afa:	485a      	ldr	r0, [pc, #360]	@ (8001c64 <main+0x2f0>)
 8001afc:	f00b fb7b 	bl	800d1f6 <xTaskCreate>
 8001b00:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10b      	bne.n	8001b20 <main+0x1ac>
    __asm volatile
 8001b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b0c:	f383 8811 	msr	BASEPRI, r3
 8001b10:	f3bf 8f6f 	isb	sy
 8001b14:	f3bf 8f4f 	dsb	sy
 8001b18:	617b      	str	r3, [r7, #20]
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <main+0x1a8>

  status = xTaskCreate(menuconfig_task, "menuconfig_task", 200, NULL, 1, &handle_menuconfig_task);
 8001b20:	4b51      	ldr	r3, [pc, #324]	@ (8001c68 <main+0x2f4>)
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	2301      	movs	r3, #1
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	22c8      	movs	r2, #200	@ 0xc8
 8001b2c:	494f      	ldr	r1, [pc, #316]	@ (8001c6c <main+0x2f8>)
 8001b2e:	4850      	ldr	r0, [pc, #320]	@ (8001c70 <main+0x2fc>)
 8001b30:	f00b fb61 	bl	800d1f6 <xTaskCreate>
 8001b34:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10b      	bne.n	8001b54 <main+0x1e0>
    __asm volatile
 8001b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b40:	f383 8811 	msr	BASEPRI, r3
 8001b44:	f3bf 8f6f 	isb	sy
 8001b48:	f3bf 8f4f 	dsb	sy
 8001b4c:	613b      	str	r3, [r7, #16]
}
 8001b4e:	bf00      	nop
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <main+0x1dc>

  status = xTaskCreate(password_task, "password_task", 100, NULL, 1, &handle_password_task);
 8001b54:	4b47      	ldr	r3, [pc, #284]	@ (8001c74 <main+0x300>)
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2264      	movs	r2, #100	@ 0x64
 8001b60:	4945      	ldr	r1, [pc, #276]	@ (8001c78 <main+0x304>)
 8001b62:	4846      	ldr	r0, [pc, #280]	@ (8001c7c <main+0x308>)
 8001b64:	f00b fb47 	bl	800d1f6 <xTaskCreate>
 8001b68:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10b      	bne.n	8001b88 <main+0x214>
    __asm volatile
 8001b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b74:	f383 8811 	msr	BASEPRI, r3
 8001b78:	f3bf 8f6f 	isb	sy
 8001b7c:	f3bf 8f4f 	dsb	sy
 8001b80:	60fb      	str	r3, [r7, #12]
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <main+0x210>

  status = xTaskCreate(sd_card_task, "sd_card_task", 250, NULL, 1, &handle_sd_card_task);
 8001b88:	4b3d      	ldr	r3, [pc, #244]	@ (8001c80 <main+0x30c>)
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2300      	movs	r3, #0
 8001b92:	22fa      	movs	r2, #250	@ 0xfa
 8001b94:	493b      	ldr	r1, [pc, #236]	@ (8001c84 <main+0x310>)
 8001b96:	483c      	ldr	r0, [pc, #240]	@ (8001c88 <main+0x314>)
 8001b98:	f00b fb2d 	bl	800d1f6 <xTaskCreate>
 8001b9c:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10b      	bne.n	8001bbc <main+0x248>
    __asm volatile
 8001ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ba8:	f383 8811 	msr	BASEPRI, r3
 8001bac:	f3bf 8f6f 	isb	sy
 8001bb0:	f3bf 8f4f 	dsb	sy
 8001bb4:	60bb      	str	r3, [r7, #8]
}
 8001bb6:	bf00      	nop
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <main+0x244>

  // create queues
  q_print = xQueueCreate(10, sizeof(size_t));
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	200a      	movs	r0, #10
 8001bc2:	f00a fda9 	bl	800c718 <xQueueGenericCreate>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a30      	ldr	r2, [pc, #192]	@ (8001c8c <main+0x318>)
 8001bca:	6013      	str	r3, [r2, #0]

  configASSERT(q_print != NULL);
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8001c8c <main+0x318>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10b      	bne.n	8001bec <main+0x278>
    __asm volatile
 8001bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bd8:	f383 8811 	msr	BASEPRI, r3
 8001bdc:	f3bf 8f6f 	isb	sy
 8001be0:	f3bf 8f4f 	dsb	sy
 8001be4:	607b      	str	r3, [r7, #4]
}
 8001be6:	bf00      	nop
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <main+0x274>

  // create semaphore
  xSemaphore = xSemaphoreCreateBinary();
 8001bec:	2203      	movs	r2, #3
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f00a fd91 	bl	800c718 <xQueueGenericCreate>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a25      	ldr	r2, [pc, #148]	@ (8001c90 <main+0x31c>)
 8001bfa:	6013      	str	r3, [r2, #0]

  // start schedule
  vTaskStartScheduler();
 8001bfc:	f00b fe68 	bl	800d8d0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <main+0x28c>
 8001c04:	20000264 	.word	0x20000264
 8001c08:	200003a0 	.word	0x200003a0
 8001c0c:	200003e4 	.word	0x200003e4
 8001c10:	08060000 	.word	0x08060000
 8001c14:	08014520 	.word	0x08014520
 8001c18:	08014548 	.word	0x08014548
 8001c1c:	200003d4 	.word	0x200003d4
 8001c20:	08014554 	.word	0x08014554
 8001c24:	08014558 	.word	0x08014558
 8001c28:	200003f8 	.word	0x200003f8
 8001c2c:	20002460 	.word	0x20002460
 8001c30:	0801455c 	.word	0x0801455c
 8001c34:	08014580 	.word	0x08014580
 8001c38:	200003ac 	.word	0x200003ac
 8001c3c:	080145a4 	.word	0x080145a4
 8001c40:	0800ae61 	.word	0x0800ae61
 8001c44:	200003b4 	.word	0x200003b4
 8001c48:	080145b0 	.word	0x080145b0
 8001c4c:	0800b205 	.word	0x0800b205
 8001c50:	200003b0 	.word	0x200003b0
 8001c54:	080145c4 	.word	0x080145c4
 8001c58:	0800afe9 	.word	0x0800afe9
 8001c5c:	200003c0 	.word	0x200003c0
 8001c60:	080145d0 	.word	0x080145d0
 8001c64:	0800b029 	.word	0x0800b029
 8001c68:	200003b8 	.word	0x200003b8
 8001c6c:	080145dc 	.word	0x080145dc
 8001c70:	0800b301 	.word	0x0800b301
 8001c74:	200003bc 	.word	0x200003bc
 8001c78:	080145ec 	.word	0x080145ec
 8001c7c:	0800c0a5 	.word	0x0800c0a5
 8001c80:	200003c4 	.word	0x200003c4
 8001c84:	080145fc 	.word	0x080145fc
 8001c88:	080021bd 	.word	0x080021bd
 8001c8c:	200003c8 	.word	0x200003c8
 8001c90:	200003cc 	.word	0x200003cc

08001c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b094      	sub	sp, #80	@ 0x50
 8001c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9a:	f107 0320 	add.w	r3, r7, #32
 8001c9e:	2230      	movs	r2, #48	@ 0x30
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f010 fa44 	bl	8012130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	4b29      	ldr	r3, [pc, #164]	@ (8001d64 <SystemClock_Config+0xd0>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	4a28      	ldr	r2, [pc, #160]	@ (8001d64 <SystemClock_Config+0xd0>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc8:	4b26      	ldr	r3, [pc, #152]	@ (8001d64 <SystemClock_Config+0xd0>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <SystemClock_Config+0xd4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ce0:	4a21      	ldr	r2, [pc, #132]	@ (8001d68 <SystemClock_Config+0xd4>)
 8001ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <SystemClock_Config+0xd4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d00:	2302      	movs	r3, #2
 8001d02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d04:	2300      	movs	r3, #0
 8001d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d08:	2310      	movs	r3, #16
 8001d0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d0c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d12:	2304      	movs	r3, #4
 8001d14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d16:	2307      	movs	r3, #7
 8001d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1a:	f107 0320 	add.w	r3, r7, #32
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 fc8e 	bl	8004640 <HAL_RCC_OscConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d2a:	f000 fb0b 	bl	8002344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2e:	230f      	movs	r3, #15
 8001d30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d32:	2302      	movs	r3, #2
 8001d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	2102      	movs	r1, #2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f002 fef0 	bl	8004b30 <HAL_RCC_ClockConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001d56:	f000 faf5 	bl	8002344 <Error_Handler>
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3750      	adds	r7, #80	@ 0x50
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40007000 	.word	0x40007000

08001d6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d72:	463b      	mov	r3, r7
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d7e:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001d80:	4a21      	ldr	r2, [pc, #132]	@ (8001e08 <MX_ADC1_Init+0x9c>)
 8001d82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d84:	4b1f      	ldr	r3, [pc, #124]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001d86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d92:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d98:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d9e:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001da6:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dac:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001dae:	4a17      	ldr	r2, [pc, #92]	@ (8001e0c <MX_ADC1_Init+0xa0>)
 8001db0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dcc:	480d      	ldr	r0, [pc, #52]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001dce:	f000 fe37 	bl	8002a40 <HAL_ADC_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001dd8:	f000 fab4 	bl	8002344 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001de4:	2307      	movs	r3, #7
 8001de6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de8:	463b      	mov	r3, r7
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <MX_ADC1_Init+0x98>)
 8001dee:	f000 ffeb 	bl	8002dc8 <HAL_ADC_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001df8:	f000 faa4 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	2000021c 	.word	0x2000021c
 8001e08:	40012000 	.word	0x40012000
 8001e0c:	0f000001 	.word	0x0f000001

08001e10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e16:	4a13      	ldr	r2, [pc, #76]	@ (8001e64 <MX_I2C1_Init+0x54>)
 8001e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e1c:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <MX_I2C1_Init+0x58>)
 8001e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e34:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e3a:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e40:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e4c:	4804      	ldr	r0, [pc, #16]	@ (8001e60 <MX_I2C1_Init+0x50>)
 8001e4e:	f001 ff59 	bl	8003d04 <HAL_I2C_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e58:	f000 fa74 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000264 	.word	0x20000264
 8001e64:	40005400 	.word	0x40005400
 8001e68:	000186a0 	.word	0x000186a0

08001e6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e70:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <MX_SPI2_Init+0x64>)
 8001e72:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <MX_SPI2_Init+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e76:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <MX_SPI2_Init+0x64>)
 8001e78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <MX_SPI2_Init+0x64>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <MX_SPI2_Init+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <MX_SPI2_Init+0x64>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <MX_SPI2_Init+0x64>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <MX_SPI2_Init+0x64>)
 8001e98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <MX_SPI2_Init+0x64>)
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <MX_SPI2_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <MX_SPI2_Init+0x64>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eb0:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <MX_SPI2_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <MX_SPI2_Init+0x64>)
 8001eb8:	220a      	movs	r2, #10
 8001eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ebc:	4804      	ldr	r0, [pc, #16]	@ (8001ed0 <MX_SPI2_Init+0x64>)
 8001ebe:	f003 f889 	bl	8004fd4 <HAL_SPI_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ec8:	f000 fa3c 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200002b8 	.word	0x200002b8
 8001ed4:	40003800 	.word	0x40003800

08001ed8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b096      	sub	sp, #88	@ 0x58
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	615a      	str	r2, [r3, #20]
 8001f08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f010 f90d 	bl	8012130 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f16:	4b3e      	ldr	r3, [pc, #248]	@ (8002010 <MX_TIM1_Init+0x138>)
 8001f18:	4a3e      	ldr	r2, [pc, #248]	@ (8002014 <MX_TIM1_Init+0x13c>)
 8001f1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8002010 <MX_TIM1_Init+0x138>)
 8001f1e:	2253      	movs	r2, #83	@ 0x53
 8001f20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f22:	4b3b      	ldr	r3, [pc, #236]	@ (8002010 <MX_TIM1_Init+0x138>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001f28:	4b39      	ldr	r3, [pc, #228]	@ (8002010 <MX_TIM1_Init+0x138>)
 8001f2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f30:	4b37      	ldr	r3, [pc, #220]	@ (8002010 <MX_TIM1_Init+0x138>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f36:	4b36      	ldr	r3, [pc, #216]	@ (8002010 <MX_TIM1_Init+0x138>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3c:	4b34      	ldr	r3, [pc, #208]	@ (8002010 <MX_TIM1_Init+0x138>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f42:	4833      	ldr	r0, [pc, #204]	@ (8002010 <MX_TIM1_Init+0x138>)
 8001f44:	f003 fc98 	bl	8005878 <HAL_TIM_Base_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f4e:	f000 f9f9 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f56:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f58:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	482c      	ldr	r0, [pc, #176]	@ (8002010 <MX_TIM1_Init+0x138>)
 8001f60:	f003 fff8 	bl	8005f54 <HAL_TIM_ConfigClockSource>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f6a:	f000 f9eb 	bl	8002344 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f6e:	4828      	ldr	r0, [pc, #160]	@ (8002010 <MX_TIM1_Init+0x138>)
 8001f70:	f003 fd34 	bl	80059dc <HAL_TIM_PWM_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f7a:	f000 f9e3 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4820      	ldr	r0, [pc, #128]	@ (8002010 <MX_TIM1_Init+0x138>)
 8001f8e:	f004 fba9 	bl	80066e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f98:	f000 f9d4 	bl	8002344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f9c:	2360      	movs	r3, #96	@ 0x60
 8001f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4813      	ldr	r0, [pc, #76]	@ (8002010 <MX_TIM1_Init+0x138>)
 8001fc2:	f003 ff05 	bl	8005dd0 <HAL_TIM_PWM_ConfigChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001fcc:	f000 f9ba 	bl	8002344 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fe4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fe8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4807      	ldr	r0, [pc, #28]	@ (8002010 <MX_TIM1_Init+0x138>)
 8001ff4:	f004 fbe4 	bl	80067c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001ffe:	f000 f9a1 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002002:	4803      	ldr	r0, [pc, #12]	@ (8002010 <MX_TIM1_Init+0x138>)
 8002004:	f000 fae2 	bl	80025cc <HAL_TIM_MspPostInit>

}
 8002008:	bf00      	nop
 800200a:	3758      	adds	r7, #88	@ 0x58
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000310 	.word	0x20000310
 8002014:	40010000 	.word	0x40010000

08002018 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800201c:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 800201e:	4a12      	ldr	r2, [pc, #72]	@ (8002068 <MX_USART1_UART_Init+0x50>)
 8002020:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 8002024:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002028:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800202a:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800203c:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 800203e:	220c      	movs	r2, #12
 8002040:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002042:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800204e:	4805      	ldr	r0, [pc, #20]	@ (8002064 <MX_USART1_UART_Init+0x4c>)
 8002050:	f004 fc1c 	bl	800688c <HAL_UART_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800205a:	f000 f973 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000358 	.word	0x20000358
 8002068:	40011000 	.word	0x40011000

0800206c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	@ 0x28
 8002070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	4b49      	ldr	r3, [pc, #292]	@ (80021ac <MX_GPIO_Init+0x140>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	4a48      	ldr	r2, [pc, #288]	@ (80021ac <MX_GPIO_Init+0x140>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6313      	str	r3, [r2, #48]	@ 0x30
 8002092:	4b46      	ldr	r3, [pc, #280]	@ (80021ac <MX_GPIO_Init+0x140>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b42      	ldr	r3, [pc, #264]	@ (80021ac <MX_GPIO_Init+0x140>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	4a41      	ldr	r2, [pc, #260]	@ (80021ac <MX_GPIO_Init+0x140>)
 80020a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ae:	4b3f      	ldr	r3, [pc, #252]	@ (80021ac <MX_GPIO_Init+0x140>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	4b3b      	ldr	r3, [pc, #236]	@ (80021ac <MX_GPIO_Init+0x140>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	4a3a      	ldr	r2, [pc, #232]	@ (80021ac <MX_GPIO_Init+0x140>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ca:	4b38      	ldr	r3, [pc, #224]	@ (80021ac <MX_GPIO_Init+0x140>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	4b34      	ldr	r3, [pc, #208]	@ (80021ac <MX_GPIO_Init+0x140>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	4a33      	ldr	r2, [pc, #204]	@ (80021ac <MX_GPIO_Init+0x140>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e6:	4b31      	ldr	r3, [pc, #196]	@ (80021ac <MX_GPIO_Init+0x140>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2160      	movs	r1, #96	@ 0x60
 80020f6:	482e      	ldr	r0, [pc, #184]	@ (80021b0 <MX_GPIO_Init+0x144>)
 80020f8:	f001 fdea 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2106      	movs	r1, #6
 8002100:	482c      	ldr	r0, [pc, #176]	@ (80021b4 <MX_GPIO_Init+0x148>)
 8002102:	f001 fde5 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8002106:	2201      	movs	r2, #1
 8002108:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800210c:	4829      	ldr	r0, [pc, #164]	@ (80021b4 <MX_GPIO_Init+0x148>)
 800210e:	f001 fddf 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002112:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002118:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800211c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	4823      	ldr	r0, [pc, #140]	@ (80021b8 <MX_GPIO_Init+0x14c>)
 800212a:	f001 fc35 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800212e:	230c      	movs	r3, #12
 8002130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213e:	2307      	movs	r3, #7
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	4819      	ldr	r0, [pc, #100]	@ (80021b0 <MX_GPIO_Init+0x144>)
 800214a:	f001 fc25 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 800214e:	2360      	movs	r3, #96	@ 0x60
 8002150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	2301      	movs	r3, #1
 8002154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	4812      	ldr	r0, [pc, #72]	@ (80021b0 <MX_GPIO_Init+0x144>)
 8002166:	f001 fc17 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800216a:	f24f 0306 	movw	r3, #61446	@ 0xf006
 800216e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002170:	2301      	movs	r3, #1
 8002172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	480c      	ldr	r0, [pc, #48]	@ (80021b4 <MX_GPIO_Init+0x148>)
 8002184:	f001 fc08 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002188:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800218c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002192:	2301      	movs	r3, #1
 8002194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	4806      	ldr	r0, [pc, #24]	@ (80021b8 <MX_GPIO_Init+0x14c>)
 800219e:	f001 fbfb 	bl	8003998 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021a2:	bf00      	nop
 80021a4:	3728      	adds	r7, #40	@ 0x28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40020400 	.word	0x40020400
 80021b8:	40020800 	.word	0x40020800

080021bc <sd_card_task>:

/* USER CODE BEGIN 4 */
extern float temp;
void sd_card_task(void *param){
 80021bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021c0:	b08a      	sub	sp, #40	@ 0x28
 80021c2:	af04      	add	r7, sp, #16
 80021c4:	6078      	str	r0, [r7, #4]
	static char show_data[40];
	const char* msg_error_open = "error open sd card to write\n";
 80021c6:	4b40      	ldr	r3, [pc, #256]	@ (80022c8 <sd_card_task+0x10c>)
 80021c8:	617b      	str	r3, [r7, #20]
	const char* msg_error_write = "error write to sd card\n";
 80021ca:	4b40      	ldr	r3, [pc, #256]	@ (80022cc <sd_card_task+0x110>)
 80021cc:	613b      	str	r3, [r7, #16]
	const char* msg_lseek = "error lseek\n";
 80021ce:	4b40      	ldr	r3, [pc, #256]	@ (80022d0 <sd_card_task+0x114>)
 80021d0:	60fb      	str	r3, [r7, #12]
	const char* msg_write = "write to sd card sucessfully\n";
 80021d2:	4b40      	ldr	r3, [pc, #256]	@ (80022d4 <sd_card_task+0x118>)
 80021d4:	60bb      	str	r3, [r7, #8]
//	const char* msg_error_open_read = "error open file to read\n";
//	UBaseType_t uxHighWaterMark;
	while(1){
	   	/************* The following operation is using PUTS and GETS *********************/
	   	/* Open file to write/ create a file if it doesn't exist */
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE) {
 80021d6:	4b40      	ldr	r3, [pc, #256]	@ (80022d8 <sd_card_task+0x11c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f04f 31ff 	mov.w	r1, #4294967295
 80021de:	4618      	mov	r0, r3
 80021e0:	f00a fd12 	bl	800cc08 <xQueueSemaphoreTake>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d1f5      	bne.n	80021d6 <sd_card_task+0x1a>
		sprintf((char*)show_data,"s1:%d t1:%d s2:%d t2:%d T:%.2f\n",parameter_read.s1,parameter_read.t1,parameter_read.s2,parameter_read.t2,temp);
 80021ea:	4b3c      	ldr	r3, [pc, #240]	@ (80022dc <sd_card_task+0x120>)
 80021ec:	7adb      	ldrb	r3, [r3, #11]
 80021ee:	461e      	mov	r6, r3
 80021f0:	4b3a      	ldr	r3, [pc, #232]	@ (80022dc <sd_card_task+0x120>)
 80021f2:	7b1b      	ldrb	r3, [r3, #12]
 80021f4:	4698      	mov	r8, r3
 80021f6:	4b39      	ldr	r3, [pc, #228]	@ (80022dc <sd_card_task+0x120>)
 80021f8:	7b5b      	ldrb	r3, [r3, #13]
 80021fa:	461c      	mov	r4, r3
 80021fc:	4b37      	ldr	r3, [pc, #220]	@ (80022dc <sd_card_task+0x120>)
 80021fe:	7b9b      	ldrb	r3, [r3, #14]
 8002200:	461d      	mov	r5, r3
 8002202:	4b37      	ldr	r3, [pc, #220]	@ (80022e0 <sd_card_task+0x124>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe f9fe 	bl	8000608 <__aeabi_f2d>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002214:	9501      	str	r5, [sp, #4]
 8002216:	9400      	str	r4, [sp, #0]
 8002218:	4643      	mov	r3, r8
 800221a:	4632      	mov	r2, r6
 800221c:	4931      	ldr	r1, [pc, #196]	@ (80022e4 <sd_card_task+0x128>)
 800221e:	4832      	ldr	r0, [pc, #200]	@ (80022e8 <sd_card_task+0x12c>)
 8002220:	f00f fef2 	bl	8012008 <siprintf>
	    fresult = f_open(&fil, str, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002224:	2213      	movs	r2, #19
 8002226:	4931      	ldr	r1, [pc, #196]	@ (80022ec <sd_card_task+0x130>)
 8002228:	4831      	ldr	r0, [pc, #196]	@ (80022f0 <sd_card_task+0x134>)
 800222a:	f007 f9c9 	bl	80095c0 <f_open>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	4b30      	ldr	r3, [pc, #192]	@ (80022f4 <sd_card_task+0x138>)
 8002234:	701a      	strb	r2, [r3, #0]

	    if(fresult != FR_OK) xQueueSend(q_print,&msg_error_open,portMAX_DELAY);
 8002236:	4b2f      	ldr	r3, [pc, #188]	@ (80022f4 <sd_card_task+0x138>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <sd_card_task+0x94>
 800223e:	4b2e      	ldr	r3, [pc, #184]	@ (80022f8 <sd_card_task+0x13c>)
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	f107 0114 	add.w	r1, r7, #20
 8002246:	2300      	movs	r3, #0
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	f00a fae0 	bl	800c810 <xQueueGenericSend>
	    fresult = f_lseek(&fil, f_size(&fil));
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <sd_card_task+0x134>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4619      	mov	r1, r3
 8002256:	4826      	ldr	r0, [pc, #152]	@ (80022f0 <sd_card_task+0x134>)
 8002258:	f007 fdb6 	bl	8009dc8 <f_lseek>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <sd_card_task+0x138>)
 8002262:	701a      	strb	r2, [r3, #0]
	    if(fresult != FR_OK) xQueueSend(q_print,&msg_lseek,portMAX_DELAY);
 8002264:	4b23      	ldr	r3, [pc, #140]	@ (80022f4 <sd_card_task+0x138>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <sd_card_task+0xc2>
 800226c:	4b22      	ldr	r3, [pc, #136]	@ (80022f8 <sd_card_task+0x13c>)
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	f107 010c 	add.w	r1, r7, #12
 8002274:	2300      	movs	r3, #0
 8002276:	f04f 32ff 	mov.w	r2, #4294967295
 800227a:	f00a fac9 	bl	800c810 <xQueueGenericSend>
	   	/* Writing text */
	   	f_puts(show_data, &fil);
 800227e:	491c      	ldr	r1, [pc, #112]	@ (80022f0 <sd_card_task+0x134>)
 8002280:	4819      	ldr	r0, [pc, #100]	@ (80022e8 <sd_card_task+0x12c>)
 8002282:	f008 f83c 	bl	800a2fe <f_puts>

	   	/* Close file */

	   	fresult = f_close(&fil);
 8002286:	481a      	ldr	r0, [pc, #104]	@ (80022f0 <sd_card_task+0x134>)
 8002288:	f007 fd74 	bl	8009d74 <f_close>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <sd_card_task+0x138>)
 8002292:	701a      	strb	r2, [r3, #0]
	   	if (fresult != FR_OK) xQueueSend(q_print,&msg_error_write,portMAX_DELAY);
 8002294:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <sd_card_task+0x138>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d009      	beq.n	80022b0 <sd_card_task+0xf4>
 800229c:	4b16      	ldr	r3, [pc, #88]	@ (80022f8 <sd_card_task+0x13c>)
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	f107 0110 	add.w	r1, r7, #16
 80022a4:	2300      	movs	r3, #0
 80022a6:	f04f 32ff 	mov.w	r2, #4294967295
 80022aa:	f00a fab1 	bl	800c810 <xQueueGenericSend>
 80022ae:	e008      	b.n	80022c2 <sd_card_task+0x106>
	   	else xQueueSend(q_print,&msg_write,portMAX_DELAY);
 80022b0:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <sd_card_task+0x13c>)
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	f107 0108 	add.w	r1, r7, #8
 80022b8:	2300      	movs	r3, #0
 80022ba:	f04f 32ff 	mov.w	r2, #4294967295
 80022be:	f00a faa7 	bl	800c810 <xQueueGenericSend>
//        else xQueueSend(q_print,&msg_read,portMAX_DELAY);
//	  	/* Read string from the file */
//	  	f_gets(buffer, f_size(&fil), &fil);
//	  	xQueueSend(q_print,buffer,portMAX_DELAY);

	   	clear_buffer();
 80022c2:	f7ff fb3d 	bl	8001940 <clear_buffer>
		if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE) {
 80022c6:	e786      	b.n	80021d6 <sd_card_task+0x1a>
 80022c8:	0801460c 	.word	0x0801460c
 80022cc:	0801462c 	.word	0x0801462c
 80022d0:	08014644 	.word	0x08014644
 80022d4:	08014654 	.word	0x08014654
 80022d8:	200003cc 	.word	0x200003cc
 80022dc:	200003e4 	.word	0x200003e4
 80022e0:	20002774 	.word	0x20002774
 80022e4:	08014674 	.word	0x08014674
 80022e8:	2000249c 	.word	0x2000249c
 80022ec:	200003d4 	.word	0x200003d4
 80022f0:	20001430 	.word	0x20001430
 80022f4:	20002460 	.word	0x20002460
 80022f8:	200003c8 	.word	0x200003c8

080022fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	  FatFsCnt++;
 8002304:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	3301      	adds	r3, #1
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002310:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002312:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b09      	cmp	r3, #9
 800231a:	d904      	bls.n	8002326 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  {
	    FatFsCnt = 0;
 800231c:	4b07      	ldr	r3, [pc, #28]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002322:	f7ff fae9 	bl	80018f8 <SDTimer_Handler>
	  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a05      	ldr	r2, [pc, #20]	@ (8002340 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d101      	bne.n	8002334 <HAL_TIM_PeriodElapsedCallback+0x38>
    HAL_IncTick();
 8002330:	f000 fb42 	bl	80029b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20002496 	.word	0x20002496
 8002340:	40000800 	.word	0x40000800

08002344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002348:	b672      	cpsid	i
}
 800234a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <Error_Handler+0x8>

08002350 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	4b10      	ldr	r3, [pc, #64]	@ (800239c <HAL_MspInit+0x4c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	4a0f      	ldr	r2, [pc, #60]	@ (800239c <HAL_MspInit+0x4c>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002364:	6453      	str	r3, [r2, #68]	@ 0x44
 8002366:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <HAL_MspInit+0x4c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_MspInit+0x4c>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	4a08      	ldr	r2, [pc, #32]	@ (800239c <HAL_MspInit+0x4c>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	@ 0x40
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_MspInit+0x4c>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800

080023a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a17      	ldr	r2, [pc, #92]	@ (800241c <HAL_ADC_MspInit+0x7c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d127      	bne.n	8002412 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <HAL_ADC_MspInit+0x80>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	4a15      	ldr	r2, [pc, #84]	@ (8002420 <HAL_ADC_MspInit+0x80>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d2:	4b13      	ldr	r3, [pc, #76]	@ (8002420 <HAL_ADC_MspInit+0x80>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <HAL_ADC_MspInit+0x80>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002420 <HAL_ADC_MspInit+0x80>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <HAL_ADC_MspInit+0x80>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023fa:	2301      	movs	r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023fe:	2303      	movs	r3, #3
 8002400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	@ (8002424 <HAL_ADC_MspInit+0x84>)
 800240e:	f001 fac3 	bl	8003998 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	@ 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40012000 	.word	0x40012000
 8002420:	40023800 	.word	0x40023800
 8002424:	40020000 	.word	0x40020000

08002428 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a19      	ldr	r2, [pc, #100]	@ (80024ac <HAL_I2C_MspInit+0x84>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d12b      	bne.n	80024a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b18      	ldr	r3, [pc, #96]	@ (80024b0 <HAL_I2C_MspInit+0x88>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	4a17      	ldr	r2, [pc, #92]	@ (80024b0 <HAL_I2C_MspInit+0x88>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6313      	str	r3, [r2, #48]	@ 0x30
 800245a:	4b15      	ldr	r3, [pc, #84]	@ (80024b0 <HAL_I2C_MspInit+0x88>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002466:	23c0      	movs	r3, #192	@ 0xc0
 8002468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246a:	2312      	movs	r3, #18
 800246c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002476:	2304      	movs	r3, #4
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	480c      	ldr	r0, [pc, #48]	@ (80024b4 <HAL_I2C_MspInit+0x8c>)
 8002482:	f001 fa89 	bl	8003998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <HAL_I2C_MspInit+0x88>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	4a08      	ldr	r2, [pc, #32]	@ (80024b0 <HAL_I2C_MspInit+0x88>)
 8002490:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002494:	6413      	str	r3, [r2, #64]	@ 0x40
 8002496:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <HAL_I2C_MspInit+0x88>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024a2:	bf00      	nop
 80024a4:	3728      	adds	r7, #40	@ 0x28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40005400 	.word	0x40005400
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020400 	.word	0x40020400

080024b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	@ 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a28      	ldr	r2, [pc, #160]	@ (8002578 <HAL_SPI_MspInit+0xc0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d14a      	bne.n	8002570 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b27      	ldr	r3, [pc, #156]	@ (800257c <HAL_SPI_MspInit+0xc4>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	4a26      	ldr	r2, [pc, #152]	@ (800257c <HAL_SPI_MspInit+0xc4>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ea:	4b24      	ldr	r3, [pc, #144]	@ (800257c <HAL_SPI_MspInit+0xc4>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_SPI_MspInit+0xc4>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	4a1f      	ldr	r2, [pc, #124]	@ (800257c <HAL_SPI_MspInit+0xc4>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6313      	str	r3, [r2, #48]	@ 0x30
 8002506:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <HAL_SPI_MspInit+0xc4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	4b19      	ldr	r3, [pc, #100]	@ (800257c <HAL_SPI_MspInit+0xc4>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	4a18      	ldr	r2, [pc, #96]	@ (800257c <HAL_SPI_MspInit+0xc4>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	6313      	str	r3, [r2, #48]	@ 0x30
 8002522:	4b16      	ldr	r3, [pc, #88]	@ (800257c <HAL_SPI_MspInit+0xc4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800252e:	230c      	movs	r3, #12
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	2303      	movs	r3, #3
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800253e:	2305      	movs	r3, #5
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	480d      	ldr	r0, [pc, #52]	@ (8002580 <HAL_SPI_MspInit+0xc8>)
 800254a:	f001 fa25 	bl	8003998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800254e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	2303      	movs	r3, #3
 800255e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002560:	2305      	movs	r3, #5
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	4619      	mov	r1, r3
 800256a:	4806      	ldr	r0, [pc, #24]	@ (8002584 <HAL_SPI_MspInit+0xcc>)
 800256c:	f001 fa14 	bl	8003998 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002570:	bf00      	nop
 8002572:	3728      	adds	r7, #40	@ 0x28
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40003800 	.word	0x40003800
 800257c:	40023800 	.word	0x40023800
 8002580:	40020800 	.word	0x40020800
 8002584:	40020400 	.word	0x40020400

08002588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <HAL_TIM_Base_MspInit+0x3c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10d      	bne.n	80025b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <HAL_TIM_Base_MspInit+0x40>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	4a09      	ldr	r2, [pc, #36]	@ (80025c8 <HAL_TIM_Base_MspInit+0x40>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025aa:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <HAL_TIM_Base_MspInit+0x40>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40023800 	.word	0x40023800

080025cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 030c 	add.w	r3, r7, #12
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a12      	ldr	r2, [pc, #72]	@ (8002634 <HAL_TIM_MspPostInit+0x68>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d11e      	bne.n	800262c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	4b11      	ldr	r3, [pc, #68]	@ (8002638 <HAL_TIM_MspPostInit+0x6c>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	4a10      	ldr	r2, [pc, #64]	@ (8002638 <HAL_TIM_MspPostInit+0x6c>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <HAL_TIM_MspPostInit+0x6c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800260a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800260e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800261c:	2301      	movs	r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	4619      	mov	r1, r3
 8002626:	4805      	ldr	r0, [pc, #20]	@ (800263c <HAL_TIM_MspPostInit+0x70>)
 8002628:	f001 f9b6 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800262c:	bf00      	nop
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40010000 	.word	0x40010000
 8002638:	40023800 	.word	0x40023800
 800263c:	40020000 	.word	0x40020000

08002640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	@ 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a19      	ldr	r2, [pc, #100]	@ (80026c4 <HAL_UART_MspInit+0x84>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d12c      	bne.n	80026bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	4b18      	ldr	r3, [pc, #96]	@ (80026c8 <HAL_UART_MspInit+0x88>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	4a17      	ldr	r2, [pc, #92]	@ (80026c8 <HAL_UART_MspInit+0x88>)
 800266c:	f043 0310 	orr.w	r3, r3, #16
 8002670:	6453      	str	r3, [r2, #68]	@ 0x44
 8002672:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <HAL_UART_MspInit+0x88>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <HAL_UART_MspInit+0x88>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	4a10      	ldr	r2, [pc, #64]	@ (80026c8 <HAL_UART_MspInit+0x88>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6313      	str	r3, [r2, #48]	@ 0x30
 800268e:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <HAL_UART_MspInit+0x88>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800269a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800269e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026ac:	2307      	movs	r3, #7
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4619      	mov	r1, r3
 80026b6:	4805      	ldr	r0, [pc, #20]	@ (80026cc <HAL_UART_MspInit+0x8c>)
 80026b8:	f001 f96e 	bl	8003998 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80026bc:	bf00      	nop
 80026be:	3728      	adds	r7, #40	@ 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40011000 	.word	0x40011000
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40020000 	.word	0x40020000

080026d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08e      	sub	sp, #56	@ 0x38
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <HAL_InitTick+0xe4>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	4a32      	ldr	r2, [pc, #200]	@ (80027b4 <HAL_InitTick+0xe4>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f0:	4b30      	ldr	r3, [pc, #192]	@ (80027b4 <HAL_InitTick+0xe4>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026fc:	f107 0210 	add.w	r2, r7, #16
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f002 fc32 	bl	8004f70 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002716:	f002 fc03 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 800271a:	6378      	str	r0, [r7, #52]	@ 0x34
 800271c:	e004      	b.n	8002728 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800271e:	f002 fbff 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8002722:	4603      	mov	r3, r0
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272a:	4a23      	ldr	r2, [pc, #140]	@ (80027b8 <HAL_InitTick+0xe8>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	0c9b      	lsrs	r3, r3, #18
 8002732:	3b01      	subs	r3, #1
 8002734:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002736:	4b21      	ldr	r3, [pc, #132]	@ (80027bc <HAL_InitTick+0xec>)
 8002738:	4a21      	ldr	r2, [pc, #132]	@ (80027c0 <HAL_InitTick+0xf0>)
 800273a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800273c:	4b1f      	ldr	r3, [pc, #124]	@ (80027bc <HAL_InitTick+0xec>)
 800273e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002742:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002744:	4a1d      	ldr	r2, [pc, #116]	@ (80027bc <HAL_InitTick+0xec>)
 8002746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002748:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800274a:	4b1c      	ldr	r3, [pc, #112]	@ (80027bc <HAL_InitTick+0xec>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002750:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <HAL_InitTick+0xec>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002756:	4b19      	ldr	r3, [pc, #100]	@ (80027bc <HAL_InitTick+0xec>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800275c:	4817      	ldr	r0, [pc, #92]	@ (80027bc <HAL_InitTick+0xec>)
 800275e:	f003 f88b 	bl	8005878 <HAL_TIM_Base_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002768:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800276c:	2b00      	cmp	r3, #0
 800276e:	d11b      	bne.n	80027a8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002770:	4812      	ldr	r0, [pc, #72]	@ (80027bc <HAL_InitTick+0xec>)
 8002772:	f003 f8d1 	bl	8005918 <HAL_TIM_Base_Start_IT>
 8002776:	4603      	mov	r3, r0
 8002778:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800277c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002784:	201e      	movs	r0, #30
 8002786:	f000 fe11 	bl	80033ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b0f      	cmp	r3, #15
 800278e:	d808      	bhi.n	80027a2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002790:	2200      	movs	r2, #0
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	201e      	movs	r0, #30
 8002796:	f000 fded 	bl	8003374 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800279a:	4a0a      	ldr	r2, [pc, #40]	@ (80027c4 <HAL_InitTick+0xf4>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	e002      	b.n	80027a8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80027a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3738      	adds	r7, #56	@ 0x38
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	431bde83 	.word	0x431bde83
 80027bc:	200024c4 	.word	0x200024c4
 80027c0:	40000800 	.word	0x40000800
 80027c4:	20000008 	.word	0x20000008

080027c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <NMI_Handler+0x4>

080027d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <HardFault_Handler+0x4>

080027d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <MemManage_Handler+0x4>

080027e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <BusFault_Handler+0x4>

080027e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <UsageFault_Handler+0x4>

080027f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002804:	4802      	ldr	r0, [pc, #8]	@ (8002810 <TIM4_IRQHandler+0x10>)
 8002806:	f003 f9f3 	bl	8005bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200024c4 	.word	0x200024c4

08002814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return 1;
 8002818:	2301      	movs	r3, #1
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_kill>:

int _kill(int pid, int sig)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800282e:	f00f fcbf 	bl	80121b0 <__errno>
 8002832:	4603      	mov	r3, r0
 8002834:	2216      	movs	r2, #22
 8002836:	601a      	str	r2, [r3, #0]
  return -1;
 8002838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <_exit>:

void _exit (int status)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800284c:	f04f 31ff 	mov.w	r1, #4294967295
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ffe7 	bl	8002824 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002856:	bf00      	nop
 8002858:	e7fd      	b.n	8002856 <_exit+0x12>

0800285a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e00a      	b.n	8002882 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800286c:	f3af 8000 	nop.w
 8002870:	4601      	mov	r1, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	60ba      	str	r2, [r7, #8]
 8002878:	b2ca      	uxtb	r2, r1
 800287a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3301      	adds	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	429a      	cmp	r2, r3
 8002888:	dbf0      	blt.n	800286c <_read+0x12>
  }

  return len;
 800288a:	687b      	ldr	r3, [r7, #4]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028bc:	605a      	str	r2, [r3, #4]
  return 0;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <_isatty>:

int _isatty(int file)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028d4:	2301      	movs	r3, #1
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <SystemInit+0x20>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002906:	4a05      	ldr	r2, [pc, #20]	@ (800291c <SystemInit+0x20>)
 8002908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800290c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002958 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002924:	f7ff ffea 	bl	80028fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002928:	480c      	ldr	r0, [pc, #48]	@ (800295c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800292a:	490d      	ldr	r1, [pc, #52]	@ (8002960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002930:	e002      	b.n	8002938 <LoopCopyDataInit>

08002932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002936:	3304      	adds	r3, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800293c:	d3f9      	bcc.n	8002932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002940:	4c0a      	ldr	r4, [pc, #40]	@ (800296c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002944:	e001      	b.n	800294a <LoopFillZerobss>

08002946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002948:	3204      	adds	r2, #4

0800294a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800294c:	d3fb      	bcc.n	8002946 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800294e:	f00f fc35 	bl	80121bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002952:	f7ff f80f 	bl	8001974 <main>
  bx  lr    
 8002956:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002958:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002960:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002964:	08015080 	.word	0x08015080
  ldr r2, =_sbss
 8002968:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800296c:	2001716c 	.word	0x2001716c

08002970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002970:	e7fe      	b.n	8002970 <ADC_IRQHandler>
	...

08002974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002978:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <HAL_Init+0x40>)
 800297e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <HAL_Init+0x40>)
 800298a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800298e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002990:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <HAL_Init+0x40>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a07      	ldr	r2, [pc, #28]	@ (80029b4 <HAL_Init+0x40>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299c:	2003      	movs	r0, #3
 800299e:	f000 fcde 	bl	800335e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029a2:	200f      	movs	r0, #15
 80029a4:	f7ff fe94 	bl	80026d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a8:	f7ff fcd2 	bl	8002350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023c00 	.word	0x40023c00

080029b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029bc:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_IncTick+0x20>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_IncTick+0x24>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	4a04      	ldr	r2, [pc, #16]	@ (80029dc <HAL_IncTick+0x24>)
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	2000000c 	.word	0x2000000c
 80029dc:	2000250c 	.word	0x2000250c

080029e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return uwTick;
 80029e4:	4b03      	ldr	r3, [pc, #12]	@ (80029f4 <HAL_GetTick+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	2000250c 	.word	0x2000250c

080029f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff ffee 	bl	80029e0 <HAL_GetTick>
 8002a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d005      	beq.n	8002a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a12:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <HAL_Delay+0x44>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a1e:	bf00      	nop
 8002a20:	f7ff ffde 	bl	80029e0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d8f7      	bhi.n	8002a20 <HAL_Delay+0x28>
  {
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	2000000c 	.word	0x2000000c

08002a40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e033      	b.n	8002abe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff fc9e 	bl	80023a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d118      	bne.n	8002ab0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a86:	f023 0302 	bic.w	r3, r3, #2
 8002a8a:	f043 0202 	orr.w	r2, r3, #2
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 faba 	bl	800300c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	641a      	str	r2, [r3, #64]	@ 0x40
 8002aae:	e001      	b.n	8002ab4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_Start+0x1a>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e097      	b.n	8002c12 <HAL_ADC_Start+0x14a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d018      	beq.n	8002b2a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b08:	4b45      	ldr	r3, [pc, #276]	@ (8002c20 <HAL_ADC_Start+0x158>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a45      	ldr	r2, [pc, #276]	@ (8002c24 <HAL_ADC_Start+0x15c>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0c9a      	lsrs	r2, r3, #18
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002b1c:	e002      	b.n	8002b24 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f9      	bne.n	8002b1e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d15f      	bne.n	8002bf8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b62:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b76:	d106      	bne.n	8002b86 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7c:	f023 0206 	bic.w	r2, r3, #6
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b84:	e002      	b.n	8002b8c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b94:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <HAL_ADC_Start+0x160>)
 8002b96:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ba0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d129      	bne.n	8002c10 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	e020      	b.n	8002c10 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a16      	ldr	r2, [pc, #88]	@ (8002c2c <HAL_ADC_Start+0x164>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d11b      	bne.n	8002c10 <HAL_ADC_Start+0x148>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d114      	bne.n	8002c10 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	e00b      	b.n	8002c10 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	f043 0210 	orr.w	r2, r3, #16
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000004 	.word	0x20000004
 8002c24:	431bde83 	.word	0x431bde83
 8002c28:	40012300 	.word	0x40012300
 8002c2c:	40012000 	.word	0x40012000

08002c30 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_Stop+0x16>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e021      	b.n	8002c8a <HAL_ADC_Stop+0x5a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb2:	d113      	bne.n	8002cdc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cc2:	d10b      	bne.n	8002cdc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	f043 0220 	orr.w	r2, r3, #32
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e063      	b.n	8002da4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cdc:	f7ff fe80 	bl	80029e0 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ce2:	e021      	b.n	8002d28 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d01d      	beq.n	8002d28 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d007      	beq.n	8002d02 <HAL_ADC_PollForConversion+0x6c>
 8002cf2:	f7ff fe75 	bl	80029e0 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d212      	bcs.n	8002d28 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d00b      	beq.n	8002d28 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	f043 0204 	orr.w	r2, r3, #4
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e03d      	b.n	8002da4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d1d6      	bne.n	8002ce4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f06f 0212 	mvn.w	r2, #18
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d123      	bne.n	8002da2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d11f      	bne.n	8002da2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d006      	beq.n	8002d7e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d111      	bne.n	8002da2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	f043 0201 	orr.w	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x1c>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e105      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x228>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b09      	cmp	r3, #9
 8002df2:	d925      	bls.n	8002e40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68d9      	ldr	r1, [r3, #12]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	4613      	mov	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	3b1e      	subs	r3, #30
 8002e0a:	2207      	movs	r2, #7
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43da      	mvns	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	400a      	ands	r2, r1
 8002e18:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68d9      	ldr	r1, [r3, #12]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4403      	add	r3, r0
 8002e32:	3b1e      	subs	r3, #30
 8002e34:	409a      	lsls	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	e022      	b.n	8002e86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6919      	ldr	r1, [r3, #16]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	2207      	movs	r2, #7
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	400a      	ands	r2, r1
 8002e62:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6919      	ldr	r1, [r3, #16]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	4618      	mov	r0, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4403      	add	r3, r0
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b06      	cmp	r3, #6
 8002e8c:	d824      	bhi.n	8002ed8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3b05      	subs	r3, #5
 8002ea0:	221f      	movs	r2, #31
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	400a      	ands	r2, r1
 8002eae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3b05      	subs	r3, #5
 8002eca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ed6:	e04c      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	d824      	bhi.n	8002f2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	3b23      	subs	r3, #35	@ 0x23
 8002ef2:	221f      	movs	r2, #31
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	400a      	ands	r2, r1
 8002f00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4618      	mov	r0, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b23      	subs	r3, #35	@ 0x23
 8002f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f28:	e023      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	3b41      	subs	r3, #65	@ 0x41
 8002f3c:	221f      	movs	r2, #31
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	400a      	ands	r2, r1
 8002f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	4618      	mov	r0, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	3b41      	subs	r3, #65	@ 0x41
 8002f66:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f72:	4b22      	ldr	r3, [pc, #136]	@ (8002ffc <HAL_ADC_ConfigChannel+0x234>)
 8002f74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a21      	ldr	r2, [pc, #132]	@ (8003000 <HAL_ADC_ConfigChannel+0x238>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d109      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x1cc>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b12      	cmp	r3, #18
 8002f86:	d105      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a19      	ldr	r2, [pc, #100]	@ (8003000 <HAL_ADC_ConfigChannel+0x238>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d123      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x21e>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	d003      	beq.n	8002fae <HAL_ADC_ConfigChannel+0x1e6>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b11      	cmp	r3, #17
 8002fac:	d11b      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b10      	cmp	r3, #16
 8002fc0:	d111      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fc2:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <HAL_ADC_ConfigChannel+0x23c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a10      	ldr	r2, [pc, #64]	@ (8003008 <HAL_ADC_ConfigChannel+0x240>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	0c9a      	lsrs	r2, r3, #18
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fd8:	e002      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f9      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40012300 	.word	0x40012300
 8003000:	40012000 	.word	0x40012000
 8003004:	20000004 	.word	0x20000004
 8003008:	431bde83 	.word	0x431bde83

0800300c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003014:	4b79      	ldr	r3, [pc, #484]	@ (80031fc <ADC_Init+0x1f0>)
 8003016:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	431a      	orrs	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003040:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	021a      	lsls	r2, r3, #8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003064:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6899      	ldr	r1, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309e:	4a58      	ldr	r2, [pc, #352]	@ (8003200 <ADC_Init+0x1f4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d022      	beq.n	80030ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6899      	ldr	r1, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	e00f      	b.n	800310a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003108:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0202 	bic.w	r2, r2, #2
 8003118:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6899      	ldr	r1, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7e1b      	ldrb	r3, [r3, #24]
 8003124:	005a      	lsls	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01b      	beq.n	8003170 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003146:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003156:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	3b01      	subs	r3, #1
 8003164:	035a      	lsls	r2, r3, #13
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	e007      	b.n	8003180 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800317e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800318e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	3b01      	subs	r3, #1
 800319c:	051a      	lsls	r2, r3, #20
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031c2:	025a      	lsls	r2, r3, #9
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6899      	ldr	r1, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	029a      	lsls	r2, r3, #10
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	40012300 	.word	0x40012300
 8003200:	0f000001 	.word	0x0f000001

08003204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800322c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003236:	4a04      	ldr	r2, [pc, #16]	@ (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4907      	ldr	r1, [pc, #28]	@ (80032a0 <__NVIC_EnableIRQ+0x38>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0a      	blt.n	80032ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	490c      	ldr	r1, [pc, #48]	@ (80032f0 <__NVIC_SetPriority+0x4c>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032cc:	e00a      	b.n	80032e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4908      	ldr	r1, [pc, #32]	@ (80032f4 <__NVIC_SetPriority+0x50>)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3b04      	subs	r3, #4
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	440b      	add	r3, r1
 80032e2:	761a      	strb	r2, [r3, #24]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	@ 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf28      	it	cs
 8003316:	2304      	movcs	r3, #4
 8003318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3304      	adds	r3, #4
 800331e:	2b06      	cmp	r3, #6
 8003320:	d902      	bls.n	8003328 <NVIC_EncodePriority+0x30>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b03      	subs	r3, #3
 8003326:	e000      	b.n	800332a <NVIC_EncodePriority+0x32>
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003340:	f04f 31ff 	mov.w	r1, #4294967295
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43d9      	mvns	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	4313      	orrs	r3, r2
         );
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	@ 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ff4c 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003386:	f7ff ff61 	bl	800324c <__NVIC_GetPriorityGrouping>
 800338a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	6978      	ldr	r0, [r7, #20]
 8003392:	f7ff ffb1 	bl	80032f8 <NVIC_EncodePriority>
 8003396:	4602      	mov	r2, r0
 8003398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339c:	4611      	mov	r1, r2
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ff80 	bl	80032a4 <__NVIC_SetPriority>
}
 80033a4:	bf00      	nop
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff54 	bl	8003268 <__NVIC_EnableIRQ>
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80033da:	4b23      	ldr	r3, [pc, #140]	@ (8003468 <HAL_FLASH_Program+0xa0>)
 80033dc:	7e1b      	ldrb	r3, [r3, #24]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_FLASH_Program+0x1e>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e03b      	b.n	800345e <HAL_FLASH_Program+0x96>
 80033e6:	4b20      	ldr	r3, [pc, #128]	@ (8003468 <HAL_FLASH_Program+0xa0>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80033f0:	f000 f870 	bl	80034d4 <FLASH_WaitForLastOperation>
 80033f4:	4603      	mov	r3, r0
 80033f6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d12b      	bne.n	8003456 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003404:	783b      	ldrb	r3, [r7, #0]
 8003406:	4619      	mov	r1, r3
 8003408:	68b8      	ldr	r0, [r7, #8]
 800340a:	f000 f91b 	bl	8003644 <FLASH_Program_Byte>
 800340e:	e016      	b.n	800343e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d105      	bne.n	8003422 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003416:	883b      	ldrh	r3, [r7, #0]
 8003418:	4619      	mov	r1, r3
 800341a:	68b8      	ldr	r0, [r7, #8]
 800341c:	f000 f8ee 	bl	80035fc <FLASH_Program_HalfWord>
 8003420:	e00d      	b.n	800343e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d105      	bne.n	8003434 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4619      	mov	r1, r3
 800342c:	68b8      	ldr	r0, [r7, #8]
 800342e:	f000 f8c3 	bl	80035b8 <FLASH_Program_Word>
 8003432:	e004      	b.n	800343e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003438:	68b8      	ldr	r0, [r7, #8]
 800343a:	f000 f88b 	bl	8003554 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800343e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003442:	f000 f847 	bl	80034d4 <FLASH_WaitForLastOperation>
 8003446:	4603      	mov	r3, r0
 8003448:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800344a:	4b08      	ldr	r3, [pc, #32]	@ (800346c <HAL_FLASH_Program+0xa4>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	4a07      	ldr	r2, [pc, #28]	@ (800346c <HAL_FLASH_Program+0xa4>)
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003456:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <HAL_FLASH_Program+0xa0>)
 8003458:	2200      	movs	r2, #0
 800345a:	761a      	strb	r2, [r3, #24]

  return status;
 800345c:	7dfb      	ldrb	r3, [r7, #23]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20002510 	.word	0x20002510
 800346c:	40023c00 	.word	0x40023c00

08003470 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800347a:	4b0b      	ldr	r3, [pc, #44]	@ (80034a8 <HAL_FLASH_Unlock+0x38>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	da0b      	bge.n	800349a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003482:	4b09      	ldr	r3, [pc, #36]	@ (80034a8 <HAL_FLASH_Unlock+0x38>)
 8003484:	4a09      	ldr	r2, [pc, #36]	@ (80034ac <HAL_FLASH_Unlock+0x3c>)
 8003486:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003488:	4b07      	ldr	r3, [pc, #28]	@ (80034a8 <HAL_FLASH_Unlock+0x38>)
 800348a:	4a09      	ldr	r2, [pc, #36]	@ (80034b0 <HAL_FLASH_Unlock+0x40>)
 800348c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800348e:	4b06      	ldr	r3, [pc, #24]	@ (80034a8 <HAL_FLASH_Unlock+0x38>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	da01      	bge.n	800349a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800349a:	79fb      	ldrb	r3, [r7, #7]
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40023c00 	.word	0x40023c00
 80034ac:	45670123 	.word	0x45670123
 80034b0:	cdef89ab 	.word	0xcdef89ab

080034b4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <HAL_FLASH_Lock+0x1c>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	4a04      	ldr	r2, [pc, #16]	@ (80034d0 <HAL_FLASH_Lock+0x1c>)
 80034be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034c2:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40023c00 	.word	0x40023c00

080034d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034e0:	4b1a      	ldr	r3, [pc, #104]	@ (800354c <FLASH_WaitForLastOperation+0x78>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80034e6:	f7ff fa7b 	bl	80029e0 <HAL_GetTick>
 80034ea:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80034ec:	e010      	b.n	8003510 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d00c      	beq.n	8003510 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d007      	beq.n	800350c <FLASH_WaitForLastOperation+0x38>
 80034fc:	f7ff fa70 	bl	80029e0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d201      	bcs.n	8003510 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e019      	b.n	8003544 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8003510:	4b0f      	ldr	r3, [pc, #60]	@ (8003550 <FLASH_WaitForLastOperation+0x7c>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e8      	bne.n	80034ee <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800351c:	4b0c      	ldr	r3, [pc, #48]	@ (8003550 <FLASH_WaitForLastOperation+0x7c>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003528:	4b09      	ldr	r3, [pc, #36]	@ (8003550 <FLASH_WaitForLastOperation+0x7c>)
 800352a:	2201      	movs	r2, #1
 800352c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800352e:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <FLASH_WaitForLastOperation+0x7c>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800353a:	f000 f8a5 	bl	8003688 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003542:	2300      	movs	r3, #0

}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20002510 	.word	0x20002510
 8003550:	40023c00 	.word	0x40023c00

08003554 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003560:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <FLASH_Program_DoubleWord+0x60>)
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	4a13      	ldr	r2, [pc, #76]	@ (80035b4 <FLASH_Program_DoubleWord+0x60>)
 8003566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800356a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800356c:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <FLASH_Program_DoubleWord+0x60>)
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	4a10      	ldr	r2, [pc, #64]	@ (80035b4 <FLASH_Program_DoubleWord+0x60>)
 8003572:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003576:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003578:	4b0e      	ldr	r3, [pc, #56]	@ (80035b4 <FLASH_Program_DoubleWord+0x60>)
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	4a0d      	ldr	r2, [pc, #52]	@ (80035b4 <FLASH_Program_DoubleWord+0x60>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800358a:	f3bf 8f6f 	isb	sy
}
 800358e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8003590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	000a      	movs	r2, r1
 800359e:	2300      	movs	r3, #0
 80035a0:	68f9      	ldr	r1, [r7, #12]
 80035a2:	3104      	adds	r1, #4
 80035a4:	4613      	mov	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40023c00 	.word	0x40023c00

080035b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035c2:	4b0d      	ldr	r3, [pc, #52]	@ (80035f8 <FLASH_Program_Word+0x40>)
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	4a0c      	ldr	r2, [pc, #48]	@ (80035f8 <FLASH_Program_Word+0x40>)
 80035c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80035ce:	4b0a      	ldr	r3, [pc, #40]	@ (80035f8 <FLASH_Program_Word+0x40>)
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	4a09      	ldr	r2, [pc, #36]	@ (80035f8 <FLASH_Program_Word+0x40>)
 80035d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80035da:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <FLASH_Program_Word+0x40>)
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	4a06      	ldr	r2, [pc, #24]	@ (80035f8 <FLASH_Program_Word+0x40>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	601a      	str	r2, [r3, #0]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	40023c00 	.word	0x40023c00

080035fc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003608:	4b0d      	ldr	r3, [pc, #52]	@ (8003640 <FLASH_Program_HalfWord+0x44>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	4a0c      	ldr	r2, [pc, #48]	@ (8003640 <FLASH_Program_HalfWord+0x44>)
 800360e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003612:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003614:	4b0a      	ldr	r3, [pc, #40]	@ (8003640 <FLASH_Program_HalfWord+0x44>)
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	4a09      	ldr	r2, [pc, #36]	@ (8003640 <FLASH_Program_HalfWord+0x44>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800361e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003620:	4b07      	ldr	r3, [pc, #28]	@ (8003640 <FLASH_Program_HalfWord+0x44>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	4a06      	ldr	r2, [pc, #24]	@ (8003640 <FLASH_Program_HalfWord+0x44>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	801a      	strh	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40023c00 	.word	0x40023c00

08003644 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003650:	4b0c      	ldr	r3, [pc, #48]	@ (8003684 <FLASH_Program_Byte+0x40>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4a0b      	ldr	r2, [pc, #44]	@ (8003684 <FLASH_Program_Byte+0x40>)
 8003656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800365c:	4b09      	ldr	r3, [pc, #36]	@ (8003684 <FLASH_Program_Byte+0x40>)
 800365e:	4a09      	ldr	r2, [pc, #36]	@ (8003684 <FLASH_Program_Byte+0x40>)
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003664:	4b07      	ldr	r3, [pc, #28]	@ (8003684 <FLASH_Program_Byte+0x40>)
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	4a06      	ldr	r2, [pc, #24]	@ (8003684 <FLASH_Program_Byte+0x40>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	701a      	strb	r2, [r3, #0]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40023c00 	.word	0x40023c00

08003688 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800368c:	4b2f      	ldr	r3, [pc, #188]	@ (800374c <FLASH_SetErrorCode+0xc4>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003698:	4b2d      	ldr	r3, [pc, #180]	@ (8003750 <FLASH_SetErrorCode+0xc8>)
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	f043 0310 	orr.w	r3, r3, #16
 80036a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003750 <FLASH_SetErrorCode+0xc8>)
 80036a2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80036a4:	4b29      	ldr	r3, [pc, #164]	@ (800374c <FLASH_SetErrorCode+0xc4>)
 80036a6:	2210      	movs	r2, #16
 80036a8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80036aa:	4b28      	ldr	r3, [pc, #160]	@ (800374c <FLASH_SetErrorCode+0xc4>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80036b6:	4b26      	ldr	r3, [pc, #152]	@ (8003750 <FLASH_SetErrorCode+0xc8>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f043 0308 	orr.w	r3, r3, #8
 80036be:	4a24      	ldr	r2, [pc, #144]	@ (8003750 <FLASH_SetErrorCode+0xc8>)
 80036c0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80036c2:	4b22      	ldr	r3, [pc, #136]	@ (800374c <FLASH_SetErrorCode+0xc4>)
 80036c4:	2220      	movs	r2, #32
 80036c6:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80036c8:	4b20      	ldr	r3, [pc, #128]	@ (800374c <FLASH_SetErrorCode+0xc4>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80036d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003750 <FLASH_SetErrorCode+0xc8>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f043 0304 	orr.w	r3, r3, #4
 80036dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003750 <FLASH_SetErrorCode+0xc8>)
 80036de:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80036e0:	4b1a      	ldr	r3, [pc, #104]	@ (800374c <FLASH_SetErrorCode+0xc4>)
 80036e2:	2240      	movs	r2, #64	@ 0x40
 80036e4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80036e6:	4b19      	ldr	r3, [pc, #100]	@ (800374c <FLASH_SetErrorCode+0xc4>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80036f2:	4b17      	ldr	r3, [pc, #92]	@ (8003750 <FLASH_SetErrorCode+0xc8>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f043 0302 	orr.w	r3, r3, #2
 80036fa:	4a15      	ldr	r2, [pc, #84]	@ (8003750 <FLASH_SetErrorCode+0xc8>)
 80036fc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80036fe:	4b13      	ldr	r3, [pc, #76]	@ (800374c <FLASH_SetErrorCode+0xc4>)
 8003700:	2280      	movs	r2, #128	@ 0x80
 8003702:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003704:	4b11      	ldr	r3, [pc, #68]	@ (800374c <FLASH_SetErrorCode+0xc4>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d009      	beq.n	8003724 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003710:	4b0f      	ldr	r3, [pc, #60]	@ (8003750 <FLASH_SetErrorCode+0xc8>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <FLASH_SetErrorCode+0xc8>)
 800371a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800371c:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <FLASH_SetErrorCode+0xc4>)
 800371e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003722:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003724:	4b09      	ldr	r3, [pc, #36]	@ (800374c <FLASH_SetErrorCode+0xc4>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003730:	4b07      	ldr	r3, [pc, #28]	@ (8003750 <FLASH_SetErrorCode+0xc8>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f043 0320 	orr.w	r3, r3, #32
 8003738:	4a05      	ldr	r2, [pc, #20]	@ (8003750 <FLASH_SetErrorCode+0xc8>)
 800373a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800373c:	4b03      	ldr	r3, [pc, #12]	@ (800374c <FLASH_SetErrorCode+0xc4>)
 800373e:	2202      	movs	r2, #2
 8003740:	60da      	str	r2, [r3, #12]
  }
}
 8003742:	bf00      	nop
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40023c00 	.word	0x40023c00
 8003750:	20002510 	.word	0x20002510

08003754 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003766:	4b31      	ldr	r3, [pc, #196]	@ (800382c <HAL_FLASHEx_Erase+0xd8>)
 8003768:	7e1b      	ldrb	r3, [r3, #24]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_FLASHEx_Erase+0x1e>
 800376e:	2302      	movs	r3, #2
 8003770:	e058      	b.n	8003824 <HAL_FLASHEx_Erase+0xd0>
 8003772:	4b2e      	ldr	r3, [pc, #184]	@ (800382c <HAL_FLASHEx_Erase+0xd8>)
 8003774:	2201      	movs	r2, #1
 8003776:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003778:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800377c:	f7ff feaa 	bl	80034d4 <FLASH_WaitForLastOperation>
 8003780:	4603      	mov	r3, r0
 8003782:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d148      	bne.n	800381c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f04f 32ff 	mov.w	r2, #4294967295
 8003790:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d115      	bne.n	80037c6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4619      	mov	r1, r3
 80037a6:	4610      	mov	r0, r2
 80037a8:	f000 f844 	bl	8003834 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80037b0:	f7ff fe90 	bl	80034d4 <FLASH_WaitForLastOperation>
 80037b4:	4603      	mov	r3, r0
 80037b6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80037b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003830 <HAL_FLASHEx_Erase+0xdc>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003830 <HAL_FLASHEx_Erase+0xdc>)
 80037be:	f023 0304 	bic.w	r3, r3, #4
 80037c2:	6113      	str	r3, [r2, #16]
 80037c4:	e028      	b.n	8003818 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	e01c      	b.n	8003808 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	4619      	mov	r1, r3
 80037d6:	68b8      	ldr	r0, [r7, #8]
 80037d8:	f000 f850 	bl	800387c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80037e0:	f7ff fe78 	bl	80034d4 <FLASH_WaitForLastOperation>
 80037e4:	4603      	mov	r3, r0
 80037e6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80037e8:	4b11      	ldr	r3, [pc, #68]	@ (8003830 <HAL_FLASHEx_Erase+0xdc>)
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	4a10      	ldr	r2, [pc, #64]	@ (8003830 <HAL_FLASHEx_Erase+0xdc>)
 80037ee:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80037f2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	601a      	str	r2, [r3, #0]
          break;
 8003800:	e00a      	b.n	8003818 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3301      	adds	r3, #1
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4413      	add	r3, r2
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d3da      	bcc.n	80037ce <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003818:	f000 f878 	bl	800390c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800381c:	4b03      	ldr	r3, [pc, #12]	@ (800382c <HAL_FLASHEx_Erase+0xd8>)
 800381e:	2200      	movs	r2, #0
 8003820:	761a      	strb	r2, [r3, #24]

  return status;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20002510 	.word	0x20002510
 8003830:	40023c00 	.word	0x40023c00

08003834 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	6039      	str	r1, [r7, #0]
 800383e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003840:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <FLASH_MassErase+0x44>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	4a0c      	ldr	r2, [pc, #48]	@ (8003878 <FLASH_MassErase+0x44>)
 8003846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800384a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800384c:	4b0a      	ldr	r3, [pc, #40]	@ (8003878 <FLASH_MassErase+0x44>)
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	4a09      	ldr	r2, [pc, #36]	@ (8003878 <FLASH_MassErase+0x44>)
 8003852:	f043 0304 	orr.w	r3, r3, #4
 8003856:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003858:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <FLASH_MassErase+0x44>)
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	4313      	orrs	r3, r2
 8003862:	4a05      	ldr	r2, [pc, #20]	@ (8003878 <FLASH_MassErase+0x44>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003868:	6113      	str	r3, [r2, #16]
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40023c00 	.word	0x40023c00

0800387c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	e010      	b.n	80038ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d103      	bne.n	80038a6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800389e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e009      	b.n	80038ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d103      	bne.n	80038b4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80038ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	e002      	b.n	80038ba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80038b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80038b8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80038ba:	4b13      	ldr	r3, [pc, #76]	@ (8003908 <FLASH_Erase_Sector+0x8c>)
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	4a12      	ldr	r2, [pc, #72]	@ (8003908 <FLASH_Erase_Sector+0x8c>)
 80038c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80038c6:	4b10      	ldr	r3, [pc, #64]	@ (8003908 <FLASH_Erase_Sector+0x8c>)
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	490f      	ldr	r1, [pc, #60]	@ (8003908 <FLASH_Erase_Sector+0x8c>)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80038d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <FLASH_Erase_Sector+0x8c>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003908 <FLASH_Erase_Sector+0x8c>)
 80038d8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80038dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80038de:	4b0a      	ldr	r3, [pc, #40]	@ (8003908 <FLASH_Erase_Sector+0x8c>)
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4313      	orrs	r3, r2
 80038e8:	4a07      	ldr	r2, [pc, #28]	@ (8003908 <FLASH_Erase_Sector+0x8c>)
 80038ea:	f043 0302 	orr.w	r3, r3, #2
 80038ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <FLASH_Erase_Sector+0x8c>)
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	4a04      	ldr	r2, [pc, #16]	@ (8003908 <FLASH_Erase_Sector+0x8c>)
 80038f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fa:	6113      	str	r3, [r2, #16]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40023c00 	.word	0x40023c00

0800390c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003910:	4b20      	ldr	r3, [pc, #128]	@ (8003994 <FLASH_FlushCaches+0x88>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003918:	2b00      	cmp	r3, #0
 800391a:	d017      	beq.n	800394c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800391c:	4b1d      	ldr	r3, [pc, #116]	@ (8003994 <FLASH_FlushCaches+0x88>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1c      	ldr	r2, [pc, #112]	@ (8003994 <FLASH_FlushCaches+0x88>)
 8003922:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003926:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003928:	4b1a      	ldr	r3, [pc, #104]	@ (8003994 <FLASH_FlushCaches+0x88>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a19      	ldr	r2, [pc, #100]	@ (8003994 <FLASH_FlushCaches+0x88>)
 800392e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	4b17      	ldr	r3, [pc, #92]	@ (8003994 <FLASH_FlushCaches+0x88>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a16      	ldr	r2, [pc, #88]	@ (8003994 <FLASH_FlushCaches+0x88>)
 800393a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800393e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003940:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <FLASH_FlushCaches+0x88>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a13      	ldr	r2, [pc, #76]	@ (8003994 <FLASH_FlushCaches+0x88>)
 8003946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800394a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800394c:	4b11      	ldr	r3, [pc, #68]	@ (8003994 <FLASH_FlushCaches+0x88>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d017      	beq.n	8003988 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003958:	4b0e      	ldr	r3, [pc, #56]	@ (8003994 <FLASH_FlushCaches+0x88>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0d      	ldr	r2, [pc, #52]	@ (8003994 <FLASH_FlushCaches+0x88>)
 800395e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003962:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003964:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <FLASH_FlushCaches+0x88>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0a      	ldr	r2, [pc, #40]	@ (8003994 <FLASH_FlushCaches+0x88>)
 800396a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b08      	ldr	r3, [pc, #32]	@ (8003994 <FLASH_FlushCaches+0x88>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a07      	ldr	r2, [pc, #28]	@ (8003994 <FLASH_FlushCaches+0x88>)
 8003976:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800397a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800397c:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <FLASH_FlushCaches+0x88>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a04      	ldr	r2, [pc, #16]	@ (8003994 <FLASH_FlushCaches+0x88>)
 8003982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003986:	6013      	str	r3, [r2, #0]
  }
}
 8003988:	bf00      	nop
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023c00 	.word	0x40023c00

08003998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	@ 0x24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	e159      	b.n	8003c68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039b4:	2201      	movs	r2, #1
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	f040 8148 	bne.w	8003c62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d005      	beq.n	80039ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d130      	bne.n	8003a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a20:	2201      	movs	r2, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 0201 	and.w	r2, r3, #1
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d017      	beq.n	8003a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	2203      	movs	r2, #3
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d123      	bne.n	8003adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	08da      	lsrs	r2, r3, #3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3208      	adds	r2, #8
 8003a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	220f      	movs	r2, #15
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	08da      	lsrs	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3208      	adds	r2, #8
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0203 	and.w	r2, r3, #3
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a2 	beq.w	8003c62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b57      	ldr	r3, [pc, #348]	@ (8003c80 <HAL_GPIO_Init+0x2e8>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b26:	4a56      	ldr	r2, [pc, #344]	@ (8003c80 <HAL_GPIO_Init+0x2e8>)
 8003b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b2e:	4b54      	ldr	r3, [pc, #336]	@ (8003c80 <HAL_GPIO_Init+0x2e8>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b3a:	4a52      	ldr	r2, [pc, #328]	@ (8003c84 <HAL_GPIO_Init+0x2ec>)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	3302      	adds	r3, #2
 8003b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a49      	ldr	r2, [pc, #292]	@ (8003c88 <HAL_GPIO_Init+0x2f0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d019      	beq.n	8003b9a <HAL_GPIO_Init+0x202>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a48      	ldr	r2, [pc, #288]	@ (8003c8c <HAL_GPIO_Init+0x2f4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_GPIO_Init+0x1fe>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a47      	ldr	r2, [pc, #284]	@ (8003c90 <HAL_GPIO_Init+0x2f8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00d      	beq.n	8003b92 <HAL_GPIO_Init+0x1fa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a46      	ldr	r2, [pc, #280]	@ (8003c94 <HAL_GPIO_Init+0x2fc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <HAL_GPIO_Init+0x1f6>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a45      	ldr	r2, [pc, #276]	@ (8003c98 <HAL_GPIO_Init+0x300>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_GPIO_Init+0x1f2>
 8003b86:	2304      	movs	r3, #4
 8003b88:	e008      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b8a:	2307      	movs	r3, #7
 8003b8c:	e006      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e004      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	f002 0203 	and.w	r2, r2, #3
 8003ba2:	0092      	lsls	r2, r2, #2
 8003ba4:	4093      	lsls	r3, r2
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bac:	4935      	ldr	r1, [pc, #212]	@ (8003c84 <HAL_GPIO_Init+0x2ec>)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	089b      	lsrs	r3, r3, #2
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bba:	4b38      	ldr	r3, [pc, #224]	@ (8003c9c <HAL_GPIO_Init+0x304>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bde:	4a2f      	ldr	r2, [pc, #188]	@ (8003c9c <HAL_GPIO_Init+0x304>)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003be4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c9c <HAL_GPIO_Init+0x304>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c08:	4a24      	ldr	r2, [pc, #144]	@ (8003c9c <HAL_GPIO_Init+0x304>)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c0e:	4b23      	ldr	r3, [pc, #140]	@ (8003c9c <HAL_GPIO_Init+0x304>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c32:	4a1a      	ldr	r2, [pc, #104]	@ (8003c9c <HAL_GPIO_Init+0x304>)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c38:	4b18      	ldr	r3, [pc, #96]	@ (8003c9c <HAL_GPIO_Init+0x304>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c9c <HAL_GPIO_Init+0x304>)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3301      	adds	r3, #1
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2b0f      	cmp	r3, #15
 8003c6c:	f67f aea2 	bls.w	80039b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	3724      	adds	r7, #36	@ 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40013800 	.word	0x40013800
 8003c88:	40020000 	.word	0x40020000
 8003c8c:	40020400 	.word	0x40020400
 8003c90:	40020800 	.word	0x40020800
 8003c94:	40020c00 	.word	0x40020c00
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40013c00 	.word	0x40013c00

08003ca0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
 8003cbc:	e001      	b.n	8003cc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ce0:	787b      	ldrb	r3, [r7, #1]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cec:	e003      	b.n	8003cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cee:	887b      	ldrh	r3, [r7, #2]
 8003cf0:	041a      	lsls	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	619a      	str	r2, [r3, #24]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e12b      	b.n	8003f6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fe fb7c 	bl	8002428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2224      	movs	r2, #36	@ 0x24
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d68:	f001 f8da 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8003d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4a81      	ldr	r2, [pc, #516]	@ (8003f78 <HAL_I2C_Init+0x274>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d807      	bhi.n	8003d88 <HAL_I2C_Init+0x84>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a80      	ldr	r2, [pc, #512]	@ (8003f7c <HAL_I2C_Init+0x278>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	bf94      	ite	ls
 8003d80:	2301      	movls	r3, #1
 8003d82:	2300      	movhi	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	e006      	b.n	8003d96 <HAL_I2C_Init+0x92>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4a7d      	ldr	r2, [pc, #500]	@ (8003f80 <HAL_I2C_Init+0x27c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	bf94      	ite	ls
 8003d90:	2301      	movls	r3, #1
 8003d92:	2300      	movhi	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0e7      	b.n	8003f6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a78      	ldr	r2, [pc, #480]	@ (8003f84 <HAL_I2C_Init+0x280>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	0c9b      	lsrs	r3, r3, #18
 8003da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4a6a      	ldr	r2, [pc, #424]	@ (8003f78 <HAL_I2C_Init+0x274>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d802      	bhi.n	8003dd8 <HAL_I2C_Init+0xd4>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	e009      	b.n	8003dec <HAL_I2C_Init+0xe8>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003dde:	fb02 f303 	mul.w	r3, r2, r3
 8003de2:	4a69      	ldr	r2, [pc, #420]	@ (8003f88 <HAL_I2C_Init+0x284>)
 8003de4:	fba2 2303 	umull	r2, r3, r2, r3
 8003de8:	099b      	lsrs	r3, r3, #6
 8003dea:	3301      	adds	r3, #1
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003dfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	495c      	ldr	r1, [pc, #368]	@ (8003f78 <HAL_I2C_Init+0x274>)
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	d819      	bhi.n	8003e40 <HAL_I2C_Init+0x13c>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1e59      	subs	r1, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e1a:	1c59      	adds	r1, r3, #1
 8003e1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e20:	400b      	ands	r3, r1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_I2C_Init+0x138>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1e59      	subs	r1, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3a:	e051      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	e04f      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d111      	bne.n	8003e6c <HAL_I2C_Init+0x168>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	440b      	add	r3, r1
 8003e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e012      	b.n	8003e92 <HAL_I2C_Init+0x18e>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e58      	subs	r0, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	0099      	lsls	r1, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e82:	3301      	adds	r3, #1
 8003e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Init+0x196>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e022      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_I2C_Init+0x1bc>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1e58      	subs	r0, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6859      	ldr	r1, [r3, #4]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	440b      	add	r3, r1
 8003eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ebe:	e00f      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1e58      	subs	r0, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	0099      	lsls	r1, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003edc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	6809      	ldr	r1, [r1, #0]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69da      	ldr	r2, [r3, #28]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6911      	ldr	r1, [r2, #16]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68d2      	ldr	r2, [r2, #12]
 8003f1a:	4311      	orrs	r1, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	000186a0 	.word	0x000186a0
 8003f7c:	001e847f 	.word	0x001e847f
 8003f80:	003d08ff 	.word	0x003d08ff
 8003f84:	431bde83 	.word	0x431bde83
 8003f88:	10624dd3 	.word	0x10624dd3

08003f8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	461a      	mov	r2, r3
 8003f98:	460b      	mov	r3, r1
 8003f9a:	817b      	strh	r3, [r7, #10]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fa0:	f7fe fd1e 	bl	80029e0 <HAL_GetTick>
 8003fa4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	f040 80e0 	bne.w	8004174 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	2319      	movs	r3, #25
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4970      	ldr	r1, [pc, #448]	@ (8004180 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f964 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e0d3      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_I2C_Master_Transmit+0x50>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e0cc      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d007      	beq.n	8004002 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004010:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2221      	movs	r2, #33	@ 0x21
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2210      	movs	r2, #16
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	893a      	ldrh	r2, [r7, #8]
 8004032:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a50      	ldr	r2, [pc, #320]	@ (8004184 <HAL_I2C_Master_Transmit+0x1f8>)
 8004042:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004044:	8979      	ldrh	r1, [r7, #10]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f89c 	bl	8004188 <I2C_MasterRequestWrite>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e08d      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004070:	e066      	b.n	8004140 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	6a39      	ldr	r1, [r7, #32]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 fa22 	bl	80044c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	2b04      	cmp	r3, #4
 8004088:	d107      	bne.n	800409a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004098:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06b      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d11b      	bne.n	8004114 <HAL_I2C_Master_Transmit+0x188>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d017      	beq.n	8004114 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	6a39      	ldr	r1, [r7, #32]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fa19 	bl	8004550 <I2C_WaitOnBTFFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004128:	2b04      	cmp	r3, #4
 800412a:	d107      	bne.n	800413c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e01a      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	d194      	bne.n	8004072 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	00100002 	.word	0x00100002
 8004184:	ffff0000 	.word	0xffff0000

08004188 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af02      	add	r7, sp, #8
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	460b      	mov	r3, r1
 8004196:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d006      	beq.n	80041b2 <I2C_MasterRequestWrite+0x2a>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d003      	beq.n	80041b2 <I2C_MasterRequestWrite+0x2a>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041b0:	d108      	bne.n	80041c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e00b      	b.n	80041dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c8:	2b12      	cmp	r3, #18
 80041ca:	d107      	bne.n	80041dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f84f 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00d      	beq.n	8004210 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004202:	d103      	bne.n	800420c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800420a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e035      	b.n	800427c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004218:	d108      	bne.n	800422c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800421a:	897b      	ldrh	r3, [r7, #10]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004228:	611a      	str	r2, [r3, #16]
 800422a:	e01b      	b.n	8004264 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800422c:	897b      	ldrh	r3, [r7, #10]
 800422e:	11db      	asrs	r3, r3, #7
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0306 	and.w	r3, r3, #6
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f063 030f 	orn	r3, r3, #15
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	490e      	ldr	r1, [pc, #56]	@ (8004284 <I2C_MasterRequestWrite+0xfc>)
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f898 	bl	8004380 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e010      	b.n	800427c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800425a:	897b      	ldrh	r3, [r7, #10]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	4907      	ldr	r1, [pc, #28]	@ (8004288 <I2C_MasterRequestWrite+0x100>)
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f888 	bl	8004380 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	00010008 	.word	0x00010008
 8004288:	00010002 	.word	0x00010002

0800428c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800429c:	e048      	b.n	8004330 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d044      	beq.n	8004330 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a6:	f7fe fb9b 	bl	80029e0 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d302      	bcc.n	80042bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d139      	bne.n	8004330 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	0c1b      	lsrs	r3, r3, #16
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d10d      	bne.n	80042e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	43da      	mvns	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	e00c      	b.n	80042fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	43da      	mvns	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4013      	ands	r3, r2
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d116      	bne.n	8004330 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e023      	b.n	8004378 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	0c1b      	lsrs	r3, r3, #16
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b01      	cmp	r3, #1
 8004338:	d10d      	bne.n	8004356 <I2C_WaitOnFlagUntilTimeout+0xca>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	43da      	mvns	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4013      	ands	r3, r2
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	e00c      	b.n	8004370 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	43da      	mvns	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4013      	ands	r3, r2
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	429a      	cmp	r2, r3
 8004374:	d093      	beq.n	800429e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800438e:	e071      	b.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439e:	d123      	bne.n	80043e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d4:	f043 0204 	orr.w	r2, r3, #4
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e067      	b.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d041      	beq.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f0:	f7fe faf6 	bl	80029e0 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d302      	bcc.n	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d136      	bne.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	0c1b      	lsrs	r3, r3, #16
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d10c      	bne.n	800442a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	43da      	mvns	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4013      	ands	r3, r2
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	bf14      	ite	ne
 8004422:	2301      	movne	r3, #1
 8004424:	2300      	moveq	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	e00b      	b.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	43da      	mvns	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4013      	ands	r3, r2
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d016      	beq.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e021      	b.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	0c1b      	lsrs	r3, r3, #16
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b01      	cmp	r3, #1
 800447c:	d10c      	bne.n	8004498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	43da      	mvns	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4013      	ands	r3, r2
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf14      	ite	ne
 8004490:	2301      	movne	r3, #1
 8004492:	2300      	moveq	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	e00b      	b.n	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	43da      	mvns	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4013      	ands	r3, r2
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bf14      	ite	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	2300      	moveq	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f47f af6d 	bne.w	8004390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044cc:	e034      	b.n	8004538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f886 	bl	80045e0 <I2C_IsAcknowledgeFailed>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e034      	b.n	8004548 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e4:	d028      	beq.n	8004538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e6:	f7fe fa7b 	bl	80029e0 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d302      	bcc.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11d      	bne.n	8004538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004506:	2b80      	cmp	r3, #128	@ 0x80
 8004508:	d016      	beq.n	8004538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e007      	b.n	8004548 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004542:	2b80      	cmp	r3, #128	@ 0x80
 8004544:	d1c3      	bne.n	80044ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800455c:	e034      	b.n	80045c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f83e 	bl	80045e0 <I2C_IsAcknowledgeFailed>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e034      	b.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004574:	d028      	beq.n	80045c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004576:	f7fe fa33 	bl	80029e0 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	429a      	cmp	r2, r3
 8004584:	d302      	bcc.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d11d      	bne.n	80045c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d016      	beq.n	80045c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e007      	b.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d1c3      	bne.n	800455e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f6:	d11b      	bne.n	8004630 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004600:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461c:	f043 0204 	orr.w	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e267      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d075      	beq.n	800474a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800465e:	4b88      	ldr	r3, [pc, #544]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b04      	cmp	r3, #4
 8004668:	d00c      	beq.n	8004684 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800466a:	4b85      	ldr	r3, [pc, #532]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004672:	2b08      	cmp	r3, #8
 8004674:	d112      	bne.n	800469c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004676:	4b82      	ldr	r3, [pc, #520]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800467e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004682:	d10b      	bne.n	800469c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004684:	4b7e      	ldr	r3, [pc, #504]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d05b      	beq.n	8004748 <HAL_RCC_OscConfig+0x108>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d157      	bne.n	8004748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e242      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a4:	d106      	bne.n	80046b4 <HAL_RCC_OscConfig+0x74>
 80046a6:	4b76      	ldr	r3, [pc, #472]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a75      	ldr	r2, [pc, #468]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e01d      	b.n	80046f0 <HAL_RCC_OscConfig+0xb0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x98>
 80046be:	4b70      	ldr	r3, [pc, #448]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6f      	ldr	r2, [pc, #444]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80046c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a6c      	ldr	r2, [pc, #432]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e00b      	b.n	80046f0 <HAL_RCC_OscConfig+0xb0>
 80046d8:	4b69      	ldr	r3, [pc, #420]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a68      	ldr	r2, [pc, #416]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80046de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4b66      	ldr	r3, [pc, #408]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a65      	ldr	r2, [pc, #404]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80046ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d013      	beq.n	8004720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fe f972 	bl	80029e0 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004700:	f7fe f96e 	bl	80029e0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	@ 0x64
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e207      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	4b5b      	ldr	r3, [pc, #364]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0xc0>
 800471e:	e014      	b.n	800474a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fe f95e 	bl	80029e0 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004728:	f7fe f95a 	bl	80029e0 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	@ 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e1f3      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473a:	4b51      	ldr	r3, [pc, #324]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0xe8>
 8004746:	e000      	b.n	800474a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d063      	beq.n	800481e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004756:	4b4a      	ldr	r3, [pc, #296]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004762:	4b47      	ldr	r3, [pc, #284]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800476a:	2b08      	cmp	r3, #8
 800476c:	d11c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476e:	4b44      	ldr	r3, [pc, #272]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d116      	bne.n	80047a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477a:	4b41      	ldr	r3, [pc, #260]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <HAL_RCC_OscConfig+0x152>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e1c7      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004792:	4b3b      	ldr	r3, [pc, #236]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4937      	ldr	r1, [pc, #220]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a6:	e03a      	b.n	800481e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d020      	beq.n	80047f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b0:	4b34      	ldr	r3, [pc, #208]	@ (8004884 <HAL_RCC_OscConfig+0x244>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fe f913 	bl	80029e0 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047be:	f7fe f90f 	bl	80029e0 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e1a8      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	4b28      	ldr	r3, [pc, #160]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4925      	ldr	r1, [pc, #148]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	600b      	str	r3, [r1, #0]
 80047f0:	e015      	b.n	800481e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f2:	4b24      	ldr	r3, [pc, #144]	@ (8004884 <HAL_RCC_OscConfig+0x244>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fe f8f2 	bl	80029e0 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004800:	f7fe f8ee 	bl	80029e0 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e187      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004812:	4b1b      	ldr	r3, [pc, #108]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d036      	beq.n	8004898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004832:	4b15      	ldr	r3, [pc, #84]	@ (8004888 <HAL_RCC_OscConfig+0x248>)
 8004834:	2201      	movs	r2, #1
 8004836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fe f8d2 	bl	80029e0 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004840:	f7fe f8ce 	bl	80029e0 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e167      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004852:	4b0b      	ldr	r3, [pc, #44]	@ (8004880 <HAL_RCC_OscConfig+0x240>)
 8004854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x200>
 800485e:	e01b      	b.n	8004898 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004860:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <HAL_RCC_OscConfig+0x248>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004866:	f7fe f8bb 	bl	80029e0 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486c:	e00e      	b.n	800488c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800486e:	f7fe f8b7 	bl	80029e0 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d907      	bls.n	800488c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e150      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
 8004880:	40023800 	.word	0x40023800
 8004884:	42470000 	.word	0x42470000
 8004888:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488c:	4b88      	ldr	r3, [pc, #544]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800488e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1ea      	bne.n	800486e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 8097 	beq.w	80049d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048aa:	4b81      	ldr	r3, [pc, #516]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	4b7d      	ldr	r3, [pc, #500]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	4a7c      	ldr	r2, [pc, #496]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80048c6:	4b7a      	ldr	r3, [pc, #488]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d6:	4b77      	ldr	r3, [pc, #476]	@ (8004ab4 <HAL_RCC_OscConfig+0x474>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d118      	bne.n	8004914 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e2:	4b74      	ldr	r3, [pc, #464]	@ (8004ab4 <HAL_RCC_OscConfig+0x474>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a73      	ldr	r2, [pc, #460]	@ (8004ab4 <HAL_RCC_OscConfig+0x474>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ee:	f7fe f877 	bl	80029e0 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f6:	f7fe f873 	bl	80029e0 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e10c      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004908:	4b6a      	ldr	r3, [pc, #424]	@ (8004ab4 <HAL_RCC_OscConfig+0x474>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d106      	bne.n	800492a <HAL_RCC_OscConfig+0x2ea>
 800491c:	4b64      	ldr	r3, [pc, #400]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004920:	4a63      	ldr	r2, [pc, #396]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6713      	str	r3, [r2, #112]	@ 0x70
 8004928:	e01c      	b.n	8004964 <HAL_RCC_OscConfig+0x324>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b05      	cmp	r3, #5
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0x30c>
 8004932:	4b5f      	ldr	r3, [pc, #380]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004936:	4a5e      	ldr	r2, [pc, #376]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004938:	f043 0304 	orr.w	r3, r3, #4
 800493c:	6713      	str	r3, [r2, #112]	@ 0x70
 800493e:	4b5c      	ldr	r3, [pc, #368]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004942:	4a5b      	ldr	r2, [pc, #364]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6713      	str	r3, [r2, #112]	@ 0x70
 800494a:	e00b      	b.n	8004964 <HAL_RCC_OscConfig+0x324>
 800494c:	4b58      	ldr	r3, [pc, #352]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004950:	4a57      	ldr	r2, [pc, #348]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	6713      	str	r3, [r2, #112]	@ 0x70
 8004958:	4b55      	ldr	r3, [pc, #340]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800495a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495c:	4a54      	ldr	r2, [pc, #336]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800495e:	f023 0304 	bic.w	r3, r3, #4
 8004962:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d015      	beq.n	8004998 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fe f838 	bl	80029e0 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004972:	e00a      	b.n	800498a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004974:	f7fe f834 	bl	80029e0 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e0cb      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498a:	4b49      	ldr	r3, [pc, #292]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0ee      	beq.n	8004974 <HAL_RCC_OscConfig+0x334>
 8004996:	e014      	b.n	80049c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004998:	f7fe f822 	bl	80029e0 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a0:	f7fe f81e 	bl	80029e0 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0b5      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1ee      	bne.n	80049a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d105      	bne.n	80049d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049c8:	4b39      	ldr	r3, [pc, #228]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	4a38      	ldr	r2, [pc, #224]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80a1 	beq.w	8004b20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049de:	4b34      	ldr	r3, [pc, #208]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d05c      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d141      	bne.n	8004a76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f2:	4b31      	ldr	r3, [pc, #196]	@ (8004ab8 <HAL_RCC_OscConfig+0x478>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fd fff2 	bl	80029e0 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fd ffee 	bl	80029e0 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e087      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a12:	4b27      	ldr	r3, [pc, #156]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69da      	ldr	r2, [r3, #28]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	019b      	lsls	r3, r3, #6
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	3b01      	subs	r3, #1
 8004a38:	041b      	lsls	r3, r3, #16
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	061b      	lsls	r3, r3, #24
 8004a42:	491b      	ldr	r1, [pc, #108]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a48:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab8 <HAL_RCC_OscConfig+0x478>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4e:	f7fd ffc7 	bl	80029e0 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a56:	f7fd ffc3 	bl	80029e0 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e05c      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a68:	4b11      	ldr	r3, [pc, #68]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x416>
 8004a74:	e054      	b.n	8004b20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a76:	4b10      	ldr	r3, [pc, #64]	@ (8004ab8 <HAL_RCC_OscConfig+0x478>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fd ffb0 	bl	80029e0 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a84:	f7fd ffac 	bl	80029e0 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e045      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	4b06      	ldr	r3, [pc, #24]	@ (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x444>
 8004aa2:	e03d      	b.n	8004b20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d107      	bne.n	8004abc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e038      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004abc:	4b1b      	ldr	r3, [pc, #108]	@ (8004b2c <HAL_RCC_OscConfig+0x4ec>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d028      	beq.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d121      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d11a      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004aec:	4013      	ands	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d111      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b02:	085b      	lsrs	r3, r3, #1
 8004b04:	3b01      	subs	r3, #1
 8004b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40023800 	.word	0x40023800

08004b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0cc      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b44:	4b68      	ldr	r3, [pc, #416]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d90c      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b52:	4b65      	ldr	r3, [pc, #404]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b63      	ldr	r3, [pc, #396]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0b8      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d020      	beq.n	8004bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b84:	4b59      	ldr	r3, [pc, #356]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a58      	ldr	r2, [pc, #352]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b9c:	4b53      	ldr	r3, [pc, #332]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a52      	ldr	r2, [pc, #328]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba8:	4b50      	ldr	r3, [pc, #320]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	494d      	ldr	r1, [pc, #308]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d044      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	4b47      	ldr	r3, [pc, #284]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d119      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e07f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d003      	beq.n	8004bee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bee:	4b3f      	ldr	r3, [pc, #252]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e06f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e067      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c0e:	4b37      	ldr	r3, [pc, #220]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f023 0203 	bic.w	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4934      	ldr	r1, [pc, #208]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c20:	f7fd fede 	bl	80029e0 <HAL_GetTick>
 8004c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c28:	f7fd feda 	bl	80029e0 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e04f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 020c 	and.w	r2, r3, #12
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d1eb      	bne.n	8004c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c50:	4b25      	ldr	r3, [pc, #148]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d20c      	bcs.n	8004c78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5e:	4b22      	ldr	r3, [pc, #136]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c66:	4b20      	ldr	r3, [pc, #128]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e032      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c84:	4b19      	ldr	r3, [pc, #100]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4916      	ldr	r1, [pc, #88]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ca2:	4b12      	ldr	r3, [pc, #72]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	490e      	ldr	r1, [pc, #56]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cb6:	f000 f821 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	490a      	ldr	r1, [pc, #40]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc8:	5ccb      	ldrb	r3, [r1, r3]
 8004cca:	fa22 f303 	lsr.w	r3, r2, r3
 8004cce:	4a09      	ldr	r2, [pc, #36]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cd2:	4b09      	ldr	r3, [pc, #36]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd fcfa 	bl	80026d0 <HAL_InitTick>

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40023c00 	.word	0x40023c00
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	08014888 	.word	0x08014888
 8004cf4:	20000004 	.word	0x20000004
 8004cf8:	20000008 	.word	0x20000008

08004cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d00:	b094      	sub	sp, #80	@ 0x50
 8004d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d14:	4b79      	ldr	r3, [pc, #484]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d00d      	beq.n	8004d3c <HAL_RCC_GetSysClockFreq+0x40>
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	f200 80e1 	bhi.w	8004ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x34>
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d003      	beq.n	8004d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d2e:	e0db      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d30:	4b73      	ldr	r3, [pc, #460]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d34:	e0db      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d36:	4b73      	ldr	r3, [pc, #460]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d3a:	e0d8      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d46:	4b6d      	ldr	r3, [pc, #436]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d063      	beq.n	8004e1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d52:	4b6a      	ldr	r3, [pc, #424]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	2200      	movs	r2, #0
 8004d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d66:	2300      	movs	r3, #0
 8004d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d6e:	4622      	mov	r2, r4
 8004d70:	462b      	mov	r3, r5
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f04f 0100 	mov.w	r1, #0
 8004d7a:	0159      	lsls	r1, r3, #5
 8004d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d80:	0150      	lsls	r0, r2, #5
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4621      	mov	r1, r4
 8004d88:	1a51      	subs	r1, r2, r1
 8004d8a:	6139      	str	r1, [r7, #16]
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004da0:	4659      	mov	r1, fp
 8004da2:	018b      	lsls	r3, r1, #6
 8004da4:	4651      	mov	r1, sl
 8004da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004daa:	4651      	mov	r1, sl
 8004dac:	018a      	lsls	r2, r1, #6
 8004dae:	4651      	mov	r1, sl
 8004db0:	ebb2 0801 	subs.w	r8, r2, r1
 8004db4:	4659      	mov	r1, fp
 8004db6:	eb63 0901 	sbc.w	r9, r3, r1
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dce:	4690      	mov	r8, r2
 8004dd0:	4699      	mov	r9, r3
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	eb18 0303 	adds.w	r3, r8, r3
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	462b      	mov	r3, r5
 8004ddc:	eb49 0303 	adc.w	r3, r9, r3
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dee:	4629      	mov	r1, r5
 8004df0:	024b      	lsls	r3, r1, #9
 8004df2:	4621      	mov	r1, r4
 8004df4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004df8:	4621      	mov	r1, r4
 8004dfa:	024a      	lsls	r2, r1, #9
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e02:	2200      	movs	r2, #0
 8004e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e0c:	f7fb ff2c 	bl	8000c68 <__aeabi_uldivmod>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4613      	mov	r3, r2
 8004e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e18:	e058      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1a:	4b38      	ldr	r3, [pc, #224]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	099b      	lsrs	r3, r3, #6
 8004e20:	2200      	movs	r2, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	4611      	mov	r1, r2
 8004e26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e2a:	623b      	str	r3, [r7, #32]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e34:	4642      	mov	r2, r8
 8004e36:	464b      	mov	r3, r9
 8004e38:	f04f 0000 	mov.w	r0, #0
 8004e3c:	f04f 0100 	mov.w	r1, #0
 8004e40:	0159      	lsls	r1, r3, #5
 8004e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e46:	0150      	lsls	r0, r2, #5
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e52:	4649      	mov	r1, r9
 8004e54:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e6c:	ebb2 040a 	subs.w	r4, r2, sl
 8004e70:	eb63 050b 	sbc.w	r5, r3, fp
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	00eb      	lsls	r3, r5, #3
 8004e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e82:	00e2      	lsls	r2, r4, #3
 8004e84:	4614      	mov	r4, r2
 8004e86:	461d      	mov	r5, r3
 8004e88:	4643      	mov	r3, r8
 8004e8a:	18e3      	adds	r3, r4, r3
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	464b      	mov	r3, r9
 8004e90:	eb45 0303 	adc.w	r3, r5, r3
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	028b      	lsls	r3, r1, #10
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eac:	4621      	mov	r1, r4
 8004eae:	028a      	lsls	r2, r1, #10
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	61bb      	str	r3, [r7, #24]
 8004eba:	61fa      	str	r2, [r7, #28]
 8004ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ec0:	f7fb fed2 	bl	8000c68 <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4613      	mov	r3, r2
 8004eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004edc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ee6:	e002      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee8:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3750      	adds	r7, #80	@ 0x50
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004efa:	bf00      	nop
 8004efc:	40023800 	.word	0x40023800
 8004f00:	00f42400 	.word	0x00f42400
 8004f04:	007a1200 	.word	0x007a1200

08004f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	@ (8004f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000004 	.word	0x20000004

08004f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f24:	f7ff fff0 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b05      	ldr	r3, [pc, #20]	@ (8004f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	0a9b      	lsrs	r3, r3, #10
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	4903      	ldr	r1, [pc, #12]	@ (8004f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f36:	5ccb      	ldrb	r3, [r1, r3]
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40023800 	.word	0x40023800
 8004f44:	08014898 	.word	0x08014898

08004f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f4c:	f7ff ffdc 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f50:	4602      	mov	r2, r0
 8004f52:	4b05      	ldr	r3, [pc, #20]	@ (8004f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	0b5b      	lsrs	r3, r3, #13
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	4903      	ldr	r1, [pc, #12]	@ (8004f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f5e:	5ccb      	ldrb	r3, [r1, r3]
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	08014898 	.word	0x08014898

08004f70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	220f      	movs	r2, #15
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f80:	4b12      	ldr	r3, [pc, #72]	@ (8004fcc <HAL_RCC_GetClockConfig+0x5c>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0203 	and.w	r2, r3, #3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fcc <HAL_RCC_GetClockConfig+0x5c>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f98:	4b0c      	ldr	r3, [pc, #48]	@ (8004fcc <HAL_RCC_GetClockConfig+0x5c>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004fa4:	4b09      	ldr	r3, [pc, #36]	@ (8004fcc <HAL_RCC_GetClockConfig+0x5c>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	08db      	lsrs	r3, r3, #3
 8004faa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fb2:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <HAL_RCC_GetClockConfig+0x60>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0207 	and.w	r2, r3, #7
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	601a      	str	r2, [r3, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	40023c00 	.word	0x40023c00

08004fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e07b      	b.n	80050de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d108      	bne.n	8005000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ff6:	d009      	beq.n	800500c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	61da      	str	r2, [r3, #28]
 8004ffe:	e005      	b.n	800500c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fd fa46 	bl	80024b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005090:	ea42 0103 	orr.w	r1, r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	0c1b      	lsrs	r3, r3, #16
 80050aa:	f003 0104 	and.w	r1, r3, #4
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b2:	f003 0210 	and.w	r2, r3, #16
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b088      	sub	sp, #32
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	603b      	str	r3, [r7, #0]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050f6:	f7fd fc73 	bl	80029e0 <HAL_GetTick>
 80050fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d001      	beq.n	8005110 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
 800510e:	e12a      	b.n	8005366 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_SPI_Transmit+0x36>
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e122      	b.n	8005366 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_SPI_Transmit+0x48>
 800512a:	2302      	movs	r3, #2
 800512c:	e11b      	b.n	8005366 <HAL_SPI_Transmit+0x280>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2203      	movs	r2, #3
 800513a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	88fa      	ldrh	r2, [r7, #6]
 800514e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800517c:	d10f      	bne.n	800519e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800518c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800519c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a8:	2b40      	cmp	r3, #64	@ 0x40
 80051aa:	d007      	beq.n	80051bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051c4:	d152      	bne.n	800526c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_SPI_Transmit+0xee>
 80051ce:	8b7b      	ldrh	r3, [r7, #26]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d145      	bne.n	8005260 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d8:	881a      	ldrh	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e4:	1c9a      	adds	r2, r3, #2
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051f8:	e032      	b.n	8005260 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b02      	cmp	r3, #2
 8005206:	d112      	bne.n	800522e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520c:	881a      	ldrh	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005218:	1c9a      	adds	r2, r3, #2
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800522c:	e018      	b.n	8005260 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800522e:	f7fd fbd7 	bl	80029e0 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d803      	bhi.n	8005246 <HAL_SPI_Transmit+0x160>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005244:	d102      	bne.n	800524c <HAL_SPI_Transmit+0x166>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d109      	bne.n	8005260 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e082      	b.n	8005366 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1c7      	bne.n	80051fa <HAL_SPI_Transmit+0x114>
 800526a:	e053      	b.n	8005314 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_SPI_Transmit+0x194>
 8005274:	8b7b      	ldrh	r3, [r7, #26]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d147      	bne.n	800530a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	7812      	ldrb	r2, [r2, #0]
 8005286:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052a0:	e033      	b.n	800530a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d113      	bne.n	80052d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	7812      	ldrb	r2, [r2, #0]
 80052bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80052d6:	e018      	b.n	800530a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052d8:	f7fd fb82 	bl	80029e0 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d803      	bhi.n	80052f0 <HAL_SPI_Transmit+0x20a>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ee:	d102      	bne.n	80052f6 <HAL_SPI_Transmit+0x210>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e02d      	b.n	8005366 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1c6      	bne.n	80052a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fa59 	bl	80057d0 <SPI_EndRxTxTransaction>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10a      	bne.n	8005348 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e000      	b.n	8005366 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005364:	2300      	movs	r3, #0
  }
}
 8005366:	4618      	mov	r0, r3
 8005368:	3720      	adds	r7, #32
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b08a      	sub	sp, #40	@ 0x28
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	607a      	str	r2, [r7, #4]
 800537a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800537c:	2301      	movs	r3, #1
 800537e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005380:	f7fd fb2e 	bl	80029e0 <HAL_GetTick>
 8005384:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800538c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005398:	7ffb      	ldrb	r3, [r7, #31]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d00c      	beq.n	80053b8 <HAL_SPI_TransmitReceive+0x4a>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053a4:	d106      	bne.n	80053b4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <HAL_SPI_TransmitReceive+0x46>
 80053ae:	7ffb      	ldrb	r3, [r7, #31]
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d001      	beq.n	80053b8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80053b4:	2302      	movs	r3, #2
 80053b6:	e17f      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_SPI_TransmitReceive+0x5c>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <HAL_SPI_TransmitReceive+0x5c>
 80053c4:	887b      	ldrh	r3, [r7, #2]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e174      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_SPI_TransmitReceive+0x6e>
 80053d8:	2302      	movs	r3, #2
 80053da:	e16d      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x34a>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d003      	beq.n	80053f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2205      	movs	r2, #5
 80053f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	887a      	ldrh	r2, [r7, #2]
 8005408:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	887a      	ldrh	r2, [r7, #2]
 800540e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	887a      	ldrh	r2, [r7, #2]
 800541a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	887a      	ldrh	r2, [r7, #2]
 8005420:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005438:	2b40      	cmp	r3, #64	@ 0x40
 800543a:	d007      	beq.n	800544c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800544a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005454:	d17e      	bne.n	8005554 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <HAL_SPI_TransmitReceive+0xf6>
 800545e:	8afb      	ldrh	r3, [r7, #22]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d16c      	bne.n	800553e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005468:	881a      	ldrh	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005474:	1c9a      	adds	r2, r3, #2
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005488:	e059      	b.n	800553e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b02      	cmp	r3, #2
 8005496:	d11b      	bne.n	80054d0 <HAL_SPI_TransmitReceive+0x162>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d016      	beq.n	80054d0 <HAL_SPI_TransmitReceive+0x162>
 80054a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d113      	bne.n	80054d0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ac:	881a      	ldrh	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b8:	1c9a      	adds	r2, r3, #2
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d119      	bne.n	8005512 <HAL_SPI_TransmitReceive+0x1a4>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d014      	beq.n	8005512 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f2:	b292      	uxth	r2, r2
 80054f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fa:	1c9a      	adds	r2, r3, #2
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800550e:	2301      	movs	r3, #1
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005512:	f7fd fa65 	bl	80029e0 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800551e:	429a      	cmp	r2, r3
 8005520:	d80d      	bhi.n	800553e <HAL_SPI_TransmitReceive+0x1d0>
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d009      	beq.n	800553e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e0bc      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1a0      	bne.n	800548a <HAL_SPI_TransmitReceive+0x11c>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d19b      	bne.n	800548a <HAL_SPI_TransmitReceive+0x11c>
 8005552:	e082      	b.n	800565a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <HAL_SPI_TransmitReceive+0x1f4>
 800555c:	8afb      	ldrh	r3, [r7, #22]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d171      	bne.n	8005646 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	330c      	adds	r3, #12
 800556c:	7812      	ldrb	r2, [r2, #0]
 800556e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005588:	e05d      	b.n	8005646 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	d11c      	bne.n	80055d2 <HAL_SPI_TransmitReceive+0x264>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d017      	beq.n	80055d2 <HAL_SPI_TransmitReceive+0x264>
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d114      	bne.n	80055d2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	7812      	ldrb	r2, [r2, #0]
 80055b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d119      	bne.n	8005614 <HAL_SPI_TransmitReceive+0x2a6>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d014      	beq.n	8005614 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005610:	2301      	movs	r3, #1
 8005612:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005614:	f7fd f9e4 	bl	80029e0 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005620:	429a      	cmp	r2, r3
 8005622:	d803      	bhi.n	800562c <HAL_SPI_TransmitReceive+0x2be>
 8005624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562a:	d102      	bne.n	8005632 <HAL_SPI_TransmitReceive+0x2c4>
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e038      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d19c      	bne.n	800558a <HAL_SPI_TransmitReceive+0x21c>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d197      	bne.n	800558a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800565a:	6a3a      	ldr	r2, [r7, #32]
 800565c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f8b6 	bl	80057d0 <SPI_EndRxTxTransaction>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d008      	beq.n	800567c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2220      	movs	r2, #32
 800566e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e01d      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	613b      	str	r3, [r7, #16]
 8005698:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80056b6:	2300      	movs	r3, #0
  }
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3728      	adds	r7, #40	@ 0x28
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056d0:	f7fd f986 	bl	80029e0 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	4413      	add	r3, r2
 80056de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056e0:	f7fd f97e 	bl	80029e0 <HAL_GetTick>
 80056e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056e6:	4b39      	ldr	r3, [pc, #228]	@ (80057cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	015b      	lsls	r3, r3, #5
 80056ec:	0d1b      	lsrs	r3, r3, #20
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	fb02 f303 	mul.w	r3, r2, r3
 80056f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056f6:	e054      	b.n	80057a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fe:	d050      	beq.n	80057a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005700:	f7fd f96e 	bl	80029e0 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	429a      	cmp	r2, r3
 800570e:	d902      	bls.n	8005716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d13d      	bne.n	8005792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800572e:	d111      	bne.n	8005754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005738:	d004      	beq.n	8005744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005742:	d107      	bne.n	8005754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800575c:	d10f      	bne.n	800577e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800577c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e017      	b.n	80057c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	3b01      	subs	r3, #1
 80057a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4013      	ands	r3, r2
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	bf0c      	ite	eq
 80057b2:	2301      	moveq	r3, #1
 80057b4:	2300      	movne	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d19b      	bne.n	80056f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20000004 	.word	0x20000004

080057d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2201      	movs	r2, #1
 80057e4:	2102      	movs	r1, #2
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f7ff ff6a 	bl	80056c0 <SPI_WaitFlagStateUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d007      	beq.n	8005802 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f6:	f043 0220 	orr.w	r2, r3, #32
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e032      	b.n	8005868 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005802:	4b1b      	ldr	r3, [pc, #108]	@ (8005870 <SPI_EndRxTxTransaction+0xa0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1b      	ldr	r2, [pc, #108]	@ (8005874 <SPI_EndRxTxTransaction+0xa4>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	0d5b      	lsrs	r3, r3, #21
 800580e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005812:	fb02 f303 	mul.w	r3, r2, r3
 8005816:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005820:	d112      	bne.n	8005848 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2200      	movs	r2, #0
 800582a:	2180      	movs	r1, #128	@ 0x80
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f7ff ff47 	bl	80056c0 <SPI_WaitFlagStateUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d016      	beq.n	8005866 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583c:	f043 0220 	orr.w	r2, r3, #32
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e00f      	b.n	8005868 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	3b01      	subs	r3, #1
 8005852:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585e:	2b80      	cmp	r3, #128	@ 0x80
 8005860:	d0f2      	beq.n	8005848 <SPI_EndRxTxTransaction+0x78>
 8005862:	e000      	b.n	8005866 <SPI_EndRxTxTransaction+0x96>
        break;
 8005864:	bf00      	nop
  }

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20000004 	.word	0x20000004
 8005874:	165e9f81 	.word	0x165e9f81

08005878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e041      	b.n	800590e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fc fe72 	bl	8002588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f000 fc3c 	bl	8006134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b01      	cmp	r3, #1
 800592a:	d001      	beq.n	8005930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e044      	b.n	80059ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1e      	ldr	r2, [pc, #120]	@ (80059c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d018      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0x6c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800595a:	d013      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0x6c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a1a      	ldr	r2, [pc, #104]	@ (80059cc <HAL_TIM_Base_Start_IT+0xb4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00e      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0x6c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a19      	ldr	r2, [pc, #100]	@ (80059d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d009      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0x6c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a17      	ldr	r2, [pc, #92]	@ (80059d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d004      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0x6c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a16      	ldr	r2, [pc, #88]	@ (80059d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d111      	bne.n	80059a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b06      	cmp	r3, #6
 8005994:	d010      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a6:	e007      	b.n	80059b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0201 	orr.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40010000 	.word	0x40010000
 80059cc:	40000400 	.word	0x40000400
 80059d0:	40000800 	.word	0x40000800
 80059d4:	40000c00 	.word	0x40000c00
 80059d8:	40014000 	.word	0x40014000

080059dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e041      	b.n	8005a72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f839 	bl	8005a7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f000 fb8a 	bl	8006134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d109      	bne.n	8005ab4 <HAL_TIM_PWM_Start+0x24>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	bf14      	ite	ne
 8005aac:	2301      	movne	r3, #1
 8005aae:	2300      	moveq	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	e022      	b.n	8005afa <HAL_TIM_PWM_Start+0x6a>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d109      	bne.n	8005ace <HAL_TIM_PWM_Start+0x3e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	bf14      	ite	ne
 8005ac6:	2301      	movne	r3, #1
 8005ac8:	2300      	moveq	r3, #0
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	e015      	b.n	8005afa <HAL_TIM_PWM_Start+0x6a>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d109      	bne.n	8005ae8 <HAL_TIM_PWM_Start+0x58>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	bf14      	ite	ne
 8005ae0:	2301      	movne	r3, #1
 8005ae2:	2300      	moveq	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	e008      	b.n	8005afa <HAL_TIM_PWM_Start+0x6a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	bf14      	ite	ne
 8005af4:	2301      	movne	r3, #1
 8005af6:	2300      	moveq	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e068      	b.n	8005bd4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d104      	bne.n	8005b12 <HAL_TIM_PWM_Start+0x82>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b10:	e013      	b.n	8005b3a <HAL_TIM_PWM_Start+0xaa>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d104      	bne.n	8005b22 <HAL_TIM_PWM_Start+0x92>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b20:	e00b      	b.n	8005b3a <HAL_TIM_PWM_Start+0xaa>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d104      	bne.n	8005b32 <HAL_TIM_PWM_Start+0xa2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b30:	e003      	b.n	8005b3a <HAL_TIM_PWM_Start+0xaa>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fda8 	bl	8006698 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a23      	ldr	r2, [pc, #140]	@ (8005bdc <HAL_TIM_PWM_Start+0x14c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d107      	bne.n	8005b62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1d      	ldr	r2, [pc, #116]	@ (8005bdc <HAL_TIM_PWM_Start+0x14c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d018      	beq.n	8005b9e <HAL_TIM_PWM_Start+0x10e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b74:	d013      	beq.n	8005b9e <HAL_TIM_PWM_Start+0x10e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a19      	ldr	r2, [pc, #100]	@ (8005be0 <HAL_TIM_PWM_Start+0x150>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00e      	beq.n	8005b9e <HAL_TIM_PWM_Start+0x10e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a17      	ldr	r2, [pc, #92]	@ (8005be4 <HAL_TIM_PWM_Start+0x154>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d009      	beq.n	8005b9e <HAL_TIM_PWM_Start+0x10e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a16      	ldr	r2, [pc, #88]	@ (8005be8 <HAL_TIM_PWM_Start+0x158>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d004      	beq.n	8005b9e <HAL_TIM_PWM_Start+0x10e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a14      	ldr	r2, [pc, #80]	@ (8005bec <HAL_TIM_PWM_Start+0x15c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d111      	bne.n	8005bc2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b06      	cmp	r3, #6
 8005bae:	d010      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc0:	e007      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40010000 	.word	0x40010000
 8005be0:	40000400 	.word	0x40000400
 8005be4:	40000800 	.word	0x40000800
 8005be8:	40000c00 	.word	0x40000c00
 8005bec:	40014000 	.word	0x40014000

08005bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d020      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01b      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0202 	mvn.w	r2, #2
 8005c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fa5b 	bl	80060f6 <HAL_TIM_IC_CaptureCallback>
 8005c40:	e005      	b.n	8005c4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fa4d 	bl	80060e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fa5e 	bl	800610a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d020      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01b      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0204 	mvn.w	r2, #4
 8005c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fa35 	bl	80060f6 <HAL_TIM_IC_CaptureCallback>
 8005c8c:	e005      	b.n	8005c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa27 	bl	80060e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fa38 	bl	800610a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d020      	beq.n	8005cec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01b      	beq.n	8005cec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0208 	mvn.w	r2, #8
 8005cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa0f 	bl	80060f6 <HAL_TIM_IC_CaptureCallback>
 8005cd8:	e005      	b.n	8005ce6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fa01 	bl	80060e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fa12 	bl	800610a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d020      	beq.n	8005d38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01b      	beq.n	8005d38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f06f 0210 	mvn.w	r2, #16
 8005d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2208      	movs	r2, #8
 8005d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f9e9 	bl	80060f6 <HAL_TIM_IC_CaptureCallback>
 8005d24:	e005      	b.n	8005d32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f9db 	bl	80060e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f9ec 	bl	800610a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00c      	beq.n	8005d5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d007      	beq.n	8005d5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f06f 0201 	mvn.w	r2, #1
 8005d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fc fad0 	bl	80022fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00c      	beq.n	8005d80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fd7c 	bl	8006878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00c      	beq.n	8005da4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f9bd 	bl	800611e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00c      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0220 	mvn.w	r2, #32
 8005dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fd4e 	bl	8006864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dc8:	bf00      	nop
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e0ae      	b.n	8005f4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b0c      	cmp	r3, #12
 8005dfa:	f200 809f 	bhi.w	8005f3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8005e04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e39 	.word	0x08005e39
 8005e08:	08005f3d 	.word	0x08005f3d
 8005e0c:	08005f3d 	.word	0x08005f3d
 8005e10:	08005f3d 	.word	0x08005f3d
 8005e14:	08005e79 	.word	0x08005e79
 8005e18:	08005f3d 	.word	0x08005f3d
 8005e1c:	08005f3d 	.word	0x08005f3d
 8005e20:	08005f3d 	.word	0x08005f3d
 8005e24:	08005ebb 	.word	0x08005ebb
 8005e28:	08005f3d 	.word	0x08005f3d
 8005e2c:	08005f3d 	.word	0x08005f3d
 8005e30:	08005f3d 	.word	0x08005f3d
 8005e34:	08005efb 	.word	0x08005efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68b9      	ldr	r1, [r7, #8]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fa04 	bl	800624c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0208 	orr.w	r2, r2, #8
 8005e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0204 	bic.w	r2, r2, #4
 8005e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6999      	ldr	r1, [r3, #24]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	619a      	str	r2, [r3, #24]
      break;
 8005e76:	e064      	b.n	8005f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fa4a 	bl	8006318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6999      	ldr	r1, [r3, #24]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	021a      	lsls	r2, r3, #8
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	619a      	str	r2, [r3, #24]
      break;
 8005eb8:	e043      	b.n	8005f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 fa95 	bl	80063f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69da      	ldr	r2, [r3, #28]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0208 	orr.w	r2, r2, #8
 8005ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0204 	bic.w	r2, r2, #4
 8005ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69d9      	ldr	r1, [r3, #28]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	61da      	str	r2, [r3, #28]
      break;
 8005ef8:	e023      	b.n	8005f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 fadf 	bl	80064c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69da      	ldr	r2, [r3, #28]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69d9      	ldr	r1, [r3, #28]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	021a      	lsls	r2, r3, #8
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	61da      	str	r2, [r3, #28]
      break;
 8005f3a:	e002      	b.n	8005f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_TIM_ConfigClockSource+0x1c>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e0b4      	b.n	80060da <HAL_TIM_ConfigClockSource+0x186>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fa8:	d03e      	beq.n	8006028 <HAL_TIM_ConfigClockSource+0xd4>
 8005faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fae:	f200 8087 	bhi.w	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fb6:	f000 8086 	beq.w	80060c6 <HAL_TIM_ConfigClockSource+0x172>
 8005fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fbe:	d87f      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc0:	2b70      	cmp	r3, #112	@ 0x70
 8005fc2:	d01a      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0xa6>
 8005fc4:	2b70      	cmp	r3, #112	@ 0x70
 8005fc6:	d87b      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc8:	2b60      	cmp	r3, #96	@ 0x60
 8005fca:	d050      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x11a>
 8005fcc:	2b60      	cmp	r3, #96	@ 0x60
 8005fce:	d877      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd0:	2b50      	cmp	r3, #80	@ 0x50
 8005fd2:	d03c      	beq.n	800604e <HAL_TIM_ConfigClockSource+0xfa>
 8005fd4:	2b50      	cmp	r3, #80	@ 0x50
 8005fd6:	d873      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd8:	2b40      	cmp	r3, #64	@ 0x40
 8005fda:	d058      	beq.n	800608e <HAL_TIM_ConfigClockSource+0x13a>
 8005fdc:	2b40      	cmp	r3, #64	@ 0x40
 8005fde:	d86f      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe0:	2b30      	cmp	r3, #48	@ 0x30
 8005fe2:	d064      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x15a>
 8005fe4:	2b30      	cmp	r3, #48	@ 0x30
 8005fe6:	d86b      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d060      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x15a>
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d867      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d05c      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x15a>
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d05a      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x15a>
 8005ff8:	e062      	b.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800600a:	f000 fb25 	bl	8006658 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800601c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	609a      	str	r2, [r3, #8]
      break;
 8006026:	e04f      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006038:	f000 fb0e 	bl	8006658 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800604a:	609a      	str	r2, [r3, #8]
      break;
 800604c:	e03c      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800605a:	461a      	mov	r2, r3
 800605c:	f000 fa82 	bl	8006564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2150      	movs	r1, #80	@ 0x50
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fadb 	bl	8006622 <TIM_ITRx_SetConfig>
      break;
 800606c:	e02c      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800607a:	461a      	mov	r2, r3
 800607c:	f000 faa1 	bl	80065c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2160      	movs	r1, #96	@ 0x60
 8006086:	4618      	mov	r0, r3
 8006088:	f000 facb 	bl	8006622 <TIM_ITRx_SetConfig>
      break;
 800608c:	e01c      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800609a:	461a      	mov	r2, r3
 800609c:	f000 fa62 	bl	8006564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2140      	movs	r1, #64	@ 0x40
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 fabb 	bl	8006622 <TIM_ITRx_SetConfig>
      break;
 80060ac:	e00c      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f000 fab2 	bl	8006622 <TIM_ITRx_SetConfig>
      break;
 80060be:	e003      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	73fb      	strb	r3, [r7, #15]
      break;
 80060c4:	e000      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a3a      	ldr	r2, [pc, #232]	@ (8006230 <TIM_Base_SetConfig+0xfc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00f      	beq.n	800616c <TIM_Base_SetConfig+0x38>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006152:	d00b      	beq.n	800616c <TIM_Base_SetConfig+0x38>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a37      	ldr	r2, [pc, #220]	@ (8006234 <TIM_Base_SetConfig+0x100>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d007      	beq.n	800616c <TIM_Base_SetConfig+0x38>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a36      	ldr	r2, [pc, #216]	@ (8006238 <TIM_Base_SetConfig+0x104>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d003      	beq.n	800616c <TIM_Base_SetConfig+0x38>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a35      	ldr	r2, [pc, #212]	@ (800623c <TIM_Base_SetConfig+0x108>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d108      	bne.n	800617e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a2b      	ldr	r2, [pc, #172]	@ (8006230 <TIM_Base_SetConfig+0xfc>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d01b      	beq.n	80061be <TIM_Base_SetConfig+0x8a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800618c:	d017      	beq.n	80061be <TIM_Base_SetConfig+0x8a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a28      	ldr	r2, [pc, #160]	@ (8006234 <TIM_Base_SetConfig+0x100>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <TIM_Base_SetConfig+0x8a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a27      	ldr	r2, [pc, #156]	@ (8006238 <TIM_Base_SetConfig+0x104>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00f      	beq.n	80061be <TIM_Base_SetConfig+0x8a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a26      	ldr	r2, [pc, #152]	@ (800623c <TIM_Base_SetConfig+0x108>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00b      	beq.n	80061be <TIM_Base_SetConfig+0x8a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a25      	ldr	r2, [pc, #148]	@ (8006240 <TIM_Base_SetConfig+0x10c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d007      	beq.n	80061be <TIM_Base_SetConfig+0x8a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a24      	ldr	r2, [pc, #144]	@ (8006244 <TIM_Base_SetConfig+0x110>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d003      	beq.n	80061be <TIM_Base_SetConfig+0x8a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a23      	ldr	r2, [pc, #140]	@ (8006248 <TIM_Base_SetConfig+0x114>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d108      	bne.n	80061d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006230 <TIM_Base_SetConfig+0xfc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d103      	bne.n	8006204 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	691a      	ldr	r2, [r3, #16]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b01      	cmp	r3, #1
 8006214:	d105      	bne.n	8006222 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f023 0201 	bic.w	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	611a      	str	r2, [r3, #16]
  }
}
 8006222:	bf00      	nop
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40010000 	.word	0x40010000
 8006234:	40000400 	.word	0x40000400
 8006238:	40000800 	.word	0x40000800
 800623c:	40000c00 	.word	0x40000c00
 8006240:	40014000 	.word	0x40014000
 8006244:	40014400 	.word	0x40014400
 8006248:	40014800 	.word	0x40014800

0800624c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f023 0201 	bic.w	r2, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0303 	bic.w	r3, r3, #3
 8006282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f023 0302 	bic.w	r3, r3, #2
 8006294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006314 <TIM_OC1_SetConfig+0xc8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d10c      	bne.n	80062c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f023 0308 	bic.w	r3, r3, #8
 80062ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 0304 	bic.w	r3, r3, #4
 80062c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a13      	ldr	r2, [pc, #76]	@ (8006314 <TIM_OC1_SetConfig+0xc8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d111      	bne.n	80062ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	621a      	str	r2, [r3, #32]
}
 8006308:	bf00      	nop
 800630a:	371c      	adds	r7, #28
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	40010000 	.word	0x40010000

08006318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	f023 0210 	bic.w	r2, r3, #16
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800634e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	021b      	lsls	r3, r3, #8
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f023 0320 	bic.w	r3, r3, #32
 8006362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a1e      	ldr	r2, [pc, #120]	@ (80063ec <TIM_OC2_SetConfig+0xd4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d10d      	bne.n	8006394 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800637e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4313      	orrs	r3, r2
 800638a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006392:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a15      	ldr	r2, [pc, #84]	@ (80063ec <TIM_OC2_SetConfig+0xd4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d113      	bne.n	80063c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000

080063f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0303 	bic.w	r3, r3, #3
 8006426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a1d      	ldr	r2, [pc, #116]	@ (80064c0 <TIM_OC3_SetConfig+0xd0>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d10d      	bne.n	800646a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a14      	ldr	r2, [pc, #80]	@ (80064c0 <TIM_OC3_SetConfig+0xd0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d113      	bne.n	800649a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	621a      	str	r2, [r3, #32]
}
 80064b4:	bf00      	nop
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	40010000 	.word	0x40010000

080064c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800650e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	031b      	lsls	r3, r3, #12
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a10      	ldr	r2, [pc, #64]	@ (8006560 <TIM_OC4_SetConfig+0x9c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d109      	bne.n	8006538 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800652a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	019b      	lsls	r3, r3, #6
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4313      	orrs	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40010000 	.word	0x40010000

08006564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f023 0201 	bic.w	r2, r3, #1
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800658e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f023 030a 	bic.w	r3, r3, #10
 80065a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	621a      	str	r2, [r3, #32]
}
 80065b6:	bf00      	nop
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b087      	sub	sp, #28
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	f023 0210 	bic.w	r2, r3, #16
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	031b      	lsls	r3, r3, #12
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006638:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	f043 0307 	orr.w	r3, r3, #7
 8006644:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	609a      	str	r2, [r3, #8]
}
 800664c:	bf00      	nop
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006672:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	021a      	lsls	r2, r3, #8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	431a      	orrs	r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4313      	orrs	r3, r2
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	609a      	str	r2, [r3, #8]
}
 800668c:	bf00      	nop
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 031f 	and.w	r3, r3, #31
 80066aa:	2201      	movs	r2, #1
 80066ac:	fa02 f303 	lsl.w	r3, r2, r3
 80066b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a1a      	ldr	r2, [r3, #32]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	43db      	mvns	r3, r3
 80066ba:	401a      	ands	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a1a      	ldr	r2, [r3, #32]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f003 031f 	and.w	r3, r3, #31
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	fa01 f303 	lsl.w	r3, r1, r3
 80066d0:	431a      	orrs	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e050      	b.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a1c      	ldr	r2, [pc, #112]	@ (80067ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d018      	beq.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006748:	d013      	beq.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a18      	ldr	r2, [pc, #96]	@ (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00e      	beq.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a16      	ldr	r2, [pc, #88]	@ (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d009      	beq.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a15      	ldr	r2, [pc, #84]	@ (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d004      	beq.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a13      	ldr	r2, [pc, #76]	@ (80067bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d10c      	bne.n	800678c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006778:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	4313      	orrs	r3, r2
 8006782:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40010000 	.word	0x40010000
 80067b0:	40000400 	.word	0x40000400
 80067b4:	40000800 	.word	0x40000800
 80067b8:	40000c00 	.word	0x40000c00
 80067bc:	40014000 	.word	0x40014000

080067c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067d8:	2302      	movs	r3, #2
 80067da:	e03d      	b.n	8006858 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e042      	b.n	8006924 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fb fec4 	bl	8002640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2224      	movs	r2, #36	@ 0x24
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f973 	bl	8006bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695a      	ldr	r2, [r3, #20]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	@ 0x28
 8006930:	af02      	add	r7, sp, #8
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	4613      	mov	r3, r2
 800693a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b20      	cmp	r3, #32
 800694a:	d175      	bne.n	8006a38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <HAL_UART_Transmit+0x2c>
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e06e      	b.n	8006a3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2221      	movs	r2, #33	@ 0x21
 8006966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800696a:	f7fc f839 	bl	80029e0 <HAL_GetTick>
 800696e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	88fa      	ldrh	r2, [r7, #6]
 8006974:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	88fa      	ldrh	r2, [r7, #6]
 800697a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006984:	d108      	bne.n	8006998 <HAL_UART_Transmit+0x6c>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d104      	bne.n	8006998 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	e003      	b.n	80069a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800699c:	2300      	movs	r3, #0
 800699e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069a0:	e02e      	b.n	8006a00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2200      	movs	r2, #0
 80069aa:	2180      	movs	r1, #128	@ 0x80
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f848 	bl	8006a42 <UART_WaitOnFlagUntilTimeout>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e03a      	b.n	8006a3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10b      	bne.n	80069e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	3302      	adds	r3, #2
 80069de:	61bb      	str	r3, [r7, #24]
 80069e0:	e007      	b.n	80069f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	781a      	ldrb	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	3301      	adds	r3, #1
 80069f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1cb      	bne.n	80069a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2200      	movs	r2, #0
 8006a12:	2140      	movs	r1, #64	@ 0x40
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f814 	bl	8006a42 <UART_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e006      	b.n	8006a3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	e000      	b.n	8006a3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006a38:	2302      	movs	r3, #2
  }
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3720      	adds	r7, #32
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b086      	sub	sp, #24
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	60f8      	str	r0, [r7, #12]
 8006a4a:	60b9      	str	r1, [r7, #8]
 8006a4c:	603b      	str	r3, [r7, #0]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a52:	e03b      	b.n	8006acc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d037      	beq.n	8006acc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a5c:	f7fb ffc0 	bl	80029e0 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	6a3a      	ldr	r2, [r7, #32]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d302      	bcc.n	8006a72 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e03a      	b.n	8006aec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d023      	beq.n	8006acc <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b80      	cmp	r3, #128	@ 0x80
 8006a88:	d020      	beq.n	8006acc <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b40      	cmp	r3, #64	@ 0x40
 8006a8e:	d01d      	beq.n	8006acc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d116      	bne.n	8006acc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f81d 	bl	8006af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2208      	movs	r2, #8
 8006abe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e00f      	b.n	8006aec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	bf0c      	ite	eq
 8006adc:	2301      	moveq	r3, #1
 8006ade:	2300      	movne	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d0b4      	beq.n	8006a54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b095      	sub	sp, #84	@ 0x54
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	330c      	adds	r3, #12
 8006b02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	330c      	adds	r3, #12
 8006b1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e5      	bne.n	8006afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3314      	adds	r3, #20
 8006b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f023 0301 	bic.w	r3, r3, #1
 8006b46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3314      	adds	r3, #20
 8006b4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e5      	bne.n	8006b30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d119      	bne.n	8006ba0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	330c      	adds	r3, #12
 8006b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f023 0310 	bic.w	r3, r3, #16
 8006b82:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	330c      	adds	r3, #12
 8006b8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b8c:	61ba      	str	r2, [r7, #24]
 8006b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6979      	ldr	r1, [r7, #20]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	613b      	str	r3, [r7, #16]
   return(result);
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e5      	bne.n	8006b6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006bae:	bf00      	nop
 8006bb0:	3754      	adds	r7, #84	@ 0x54
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
	...

08006bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bc0:	b0c0      	sub	sp, #256	@ 0x100
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd8:	68d9      	ldr	r1, [r3, #12]
 8006bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	ea40 0301 	orr.w	r3, r0, r1
 8006be4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c14:	f021 010c 	bic.w	r1, r1, #12
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c22:	430b      	orrs	r3, r1
 8006c24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c36:	6999      	ldr	r1, [r3, #24]
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	ea40 0301 	orr.w	r3, r0, r1
 8006c42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b8f      	ldr	r3, [pc, #572]	@ (8006e88 <UART_SetConfig+0x2cc>)
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d005      	beq.n	8006c5c <UART_SetConfig+0xa0>
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b8d      	ldr	r3, [pc, #564]	@ (8006e8c <UART_SetConfig+0x2d0>)
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d104      	bne.n	8006c66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c5c:	f7fe f974 	bl	8004f48 <HAL_RCC_GetPCLK2Freq>
 8006c60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c64:	e003      	b.n	8006c6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c66:	f7fe f95b 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8006c6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c78:	f040 810c 	bne.w	8006e94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c8e:	4622      	mov	r2, r4
 8006c90:	462b      	mov	r3, r5
 8006c92:	1891      	adds	r1, r2, r2
 8006c94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c96:	415b      	adcs	r3, r3
 8006c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	eb12 0801 	adds.w	r8, r2, r1
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	eb43 0901 	adc.w	r9, r3, r1
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cbe:	4690      	mov	r8, r2
 8006cc0:	4699      	mov	r9, r3
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	eb18 0303 	adds.w	r3, r8, r3
 8006cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ccc:	462b      	mov	r3, r5
 8006cce:	eb49 0303 	adc.w	r3, r9, r3
 8006cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ce2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ce6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006cea:	460b      	mov	r3, r1
 8006cec:	18db      	adds	r3, r3, r3
 8006cee:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	eb42 0303 	adc.w	r3, r2, r3
 8006cf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006cfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d00:	f7f9 ffb2 	bl	8000c68 <__aeabi_uldivmod>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4b61      	ldr	r3, [pc, #388]	@ (8006e90 <UART_SetConfig+0x2d4>)
 8006d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	011c      	lsls	r4, r3, #4
 8006d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d24:	4642      	mov	r2, r8
 8006d26:	464b      	mov	r3, r9
 8006d28:	1891      	adds	r1, r2, r2
 8006d2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d2c:	415b      	adcs	r3, r3
 8006d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d34:	4641      	mov	r1, r8
 8006d36:	eb12 0a01 	adds.w	sl, r2, r1
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d54:	4692      	mov	sl, r2
 8006d56:	469b      	mov	fp, r3
 8006d58:	4643      	mov	r3, r8
 8006d5a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d62:	464b      	mov	r3, r9
 8006d64:	eb4b 0303 	adc.w	r3, fp, r3
 8006d68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d80:	460b      	mov	r3, r1
 8006d82:	18db      	adds	r3, r3, r3
 8006d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d86:	4613      	mov	r3, r2
 8006d88:	eb42 0303 	adc.w	r3, r2, r3
 8006d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d96:	f7f9 ff67 	bl	8000c68 <__aeabi_uldivmod>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4b3b      	ldr	r3, [pc, #236]	@ (8006e90 <UART_SetConfig+0x2d4>)
 8006da2:	fba3 2301 	umull	r2, r3, r3, r1
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	2264      	movs	r2, #100	@ 0x64
 8006daa:	fb02 f303 	mul.w	r3, r2, r3
 8006dae:	1acb      	subs	r3, r1, r3
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006db6:	4b36      	ldr	r3, [pc, #216]	@ (8006e90 <UART_SetConfig+0x2d4>)
 8006db8:	fba3 2302 	umull	r2, r3, r3, r2
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006dc4:	441c      	add	r4, r3
 8006dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dd0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006dd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006dd8:	4642      	mov	r2, r8
 8006dda:	464b      	mov	r3, r9
 8006ddc:	1891      	adds	r1, r2, r2
 8006dde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006de0:	415b      	adcs	r3, r3
 8006de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006de8:	4641      	mov	r1, r8
 8006dea:	1851      	adds	r1, r2, r1
 8006dec:	6339      	str	r1, [r7, #48]	@ 0x30
 8006dee:	4649      	mov	r1, r9
 8006df0:	414b      	adcs	r3, r1
 8006df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df4:	f04f 0200 	mov.w	r2, #0
 8006df8:	f04f 0300 	mov.w	r3, #0
 8006dfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e00:	4659      	mov	r1, fp
 8006e02:	00cb      	lsls	r3, r1, #3
 8006e04:	4651      	mov	r1, sl
 8006e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e0a:	4651      	mov	r1, sl
 8006e0c:	00ca      	lsls	r2, r1, #3
 8006e0e:	4610      	mov	r0, r2
 8006e10:	4619      	mov	r1, r3
 8006e12:	4603      	mov	r3, r0
 8006e14:	4642      	mov	r2, r8
 8006e16:	189b      	adds	r3, r3, r2
 8006e18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e1c:	464b      	mov	r3, r9
 8006e1e:	460a      	mov	r2, r1
 8006e20:	eb42 0303 	adc.w	r3, r2, r3
 8006e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	18db      	adds	r3, r3, r3
 8006e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e42:	4613      	mov	r3, r2
 8006e44:	eb42 0303 	adc.w	r3, r2, r3
 8006e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e52:	f7f9 ff09 	bl	8000c68 <__aeabi_uldivmod>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e90 <UART_SetConfig+0x2d4>)
 8006e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	2164      	movs	r1, #100	@ 0x64
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	3332      	adds	r3, #50	@ 0x32
 8006e6e:	4a08      	ldr	r2, [pc, #32]	@ (8006e90 <UART_SetConfig+0x2d4>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	f003 0207 	and.w	r2, r3, #7
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4422      	add	r2, r4
 8006e82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e84:	e106      	b.n	8007094 <UART_SetConfig+0x4d8>
 8006e86:	bf00      	nop
 8006e88:	40011000 	.word	0x40011000
 8006e8c:	40011400 	.word	0x40011400
 8006e90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ea2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ea6:	4642      	mov	r2, r8
 8006ea8:	464b      	mov	r3, r9
 8006eaa:	1891      	adds	r1, r2, r2
 8006eac:	6239      	str	r1, [r7, #32]
 8006eae:	415b      	adcs	r3, r3
 8006eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	1854      	adds	r4, r2, r1
 8006eba:	4649      	mov	r1, r9
 8006ebc:	eb43 0501 	adc.w	r5, r3, r1
 8006ec0:	f04f 0200 	mov.w	r2, #0
 8006ec4:	f04f 0300 	mov.w	r3, #0
 8006ec8:	00eb      	lsls	r3, r5, #3
 8006eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ece:	00e2      	lsls	r2, r4, #3
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	461d      	mov	r5, r3
 8006ed4:	4643      	mov	r3, r8
 8006ed6:	18e3      	adds	r3, r4, r3
 8006ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006edc:	464b      	mov	r3, r9
 8006ede:	eb45 0303 	adc.w	r3, r5, r3
 8006ee2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ef2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	f04f 0300 	mov.w	r3, #0
 8006efe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f02:	4629      	mov	r1, r5
 8006f04:	008b      	lsls	r3, r1, #2
 8006f06:	4621      	mov	r1, r4
 8006f08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	008a      	lsls	r2, r1, #2
 8006f10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f14:	f7f9 fea8 	bl	8000c68 <__aeabi_uldivmod>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4b60      	ldr	r3, [pc, #384]	@ (80070a0 <UART_SetConfig+0x4e4>)
 8006f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	011c      	lsls	r4, r3, #4
 8006f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f38:	4642      	mov	r2, r8
 8006f3a:	464b      	mov	r3, r9
 8006f3c:	1891      	adds	r1, r2, r2
 8006f3e:	61b9      	str	r1, [r7, #24]
 8006f40:	415b      	adcs	r3, r3
 8006f42:	61fb      	str	r3, [r7, #28]
 8006f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f48:	4641      	mov	r1, r8
 8006f4a:	1851      	adds	r1, r2, r1
 8006f4c:	6139      	str	r1, [r7, #16]
 8006f4e:	4649      	mov	r1, r9
 8006f50:	414b      	adcs	r3, r1
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	f04f 0300 	mov.w	r3, #0
 8006f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f60:	4659      	mov	r1, fp
 8006f62:	00cb      	lsls	r3, r1, #3
 8006f64:	4651      	mov	r1, sl
 8006f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f6a:	4651      	mov	r1, sl
 8006f6c:	00ca      	lsls	r2, r1, #3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	4619      	mov	r1, r3
 8006f72:	4603      	mov	r3, r0
 8006f74:	4642      	mov	r2, r8
 8006f76:	189b      	adds	r3, r3, r2
 8006f78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f7c:	464b      	mov	r3, r9
 8006f7e:	460a      	mov	r2, r1
 8006f80:	eb42 0303 	adc.w	r3, r2, r3
 8006f84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	008b      	lsls	r3, r1, #2
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006faa:	4641      	mov	r1, r8
 8006fac:	008a      	lsls	r2, r1, #2
 8006fae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fb2:	f7f9 fe59 	bl	8000c68 <__aeabi_uldivmod>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4b38      	ldr	r3, [pc, #224]	@ (80070a0 <UART_SetConfig+0x4e4>)
 8006fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	2264      	movs	r2, #100	@ 0x64
 8006fc6:	fb02 f303 	mul.w	r3, r2, r3
 8006fca:	1acb      	subs	r3, r1, r3
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	3332      	adds	r3, #50	@ 0x32
 8006fd0:	4a33      	ldr	r2, [pc, #204]	@ (80070a0 <UART_SetConfig+0x4e4>)
 8006fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fdc:	441c      	add	r4, r3
 8006fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fe6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fe8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006fec:	4642      	mov	r2, r8
 8006fee:	464b      	mov	r3, r9
 8006ff0:	1891      	adds	r1, r2, r2
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	415b      	adcs	r3, r3
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ffc:	4641      	mov	r1, r8
 8006ffe:	1851      	adds	r1, r2, r1
 8007000:	6039      	str	r1, [r7, #0]
 8007002:	4649      	mov	r1, r9
 8007004:	414b      	adcs	r3, r1
 8007006:	607b      	str	r3, [r7, #4]
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007014:	4659      	mov	r1, fp
 8007016:	00cb      	lsls	r3, r1, #3
 8007018:	4651      	mov	r1, sl
 800701a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800701e:	4651      	mov	r1, sl
 8007020:	00ca      	lsls	r2, r1, #3
 8007022:	4610      	mov	r0, r2
 8007024:	4619      	mov	r1, r3
 8007026:	4603      	mov	r3, r0
 8007028:	4642      	mov	r2, r8
 800702a:	189b      	adds	r3, r3, r2
 800702c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800702e:	464b      	mov	r3, r9
 8007030:	460a      	mov	r2, r1
 8007032:	eb42 0303 	adc.w	r3, r2, r3
 8007036:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	663b      	str	r3, [r7, #96]	@ 0x60
 8007042:	667a      	str	r2, [r7, #100]	@ 0x64
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007050:	4649      	mov	r1, r9
 8007052:	008b      	lsls	r3, r1, #2
 8007054:	4641      	mov	r1, r8
 8007056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800705a:	4641      	mov	r1, r8
 800705c:	008a      	lsls	r2, r1, #2
 800705e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007062:	f7f9 fe01 	bl	8000c68 <__aeabi_uldivmod>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	4b0d      	ldr	r3, [pc, #52]	@ (80070a0 <UART_SetConfig+0x4e4>)
 800706c:	fba3 1302 	umull	r1, r3, r3, r2
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	2164      	movs	r1, #100	@ 0x64
 8007074:	fb01 f303 	mul.w	r3, r1, r3
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	3332      	adds	r3, #50	@ 0x32
 800707e:	4a08      	ldr	r2, [pc, #32]	@ (80070a0 <UART_SetConfig+0x4e4>)
 8007080:	fba2 2303 	umull	r2, r3, r2, r3
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	f003 020f 	and.w	r2, r3, #15
 800708a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4422      	add	r2, r4
 8007092:	609a      	str	r2, [r3, #8]
}
 8007094:	bf00      	nop
 8007096:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800709a:	46bd      	mov	sp, r7
 800709c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070a0:	51eb851f 	.word	0x51eb851f

080070a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80070a8:	4904      	ldr	r1, [pc, #16]	@ (80070bc <MX_FATFS_Init+0x18>)
 80070aa:	4805      	ldr	r0, [pc, #20]	@ (80070c0 <MX_FATFS_Init+0x1c>)
 80070ac:	f003 f998 	bl	800a3e0 <FATFS_LinkDriver>
 80070b0:	4603      	mov	r3, r0
 80070b2:	461a      	mov	r2, r3
 80070b4:	4b03      	ldr	r3, [pc, #12]	@ (80070c4 <MX_FATFS_Init+0x20>)
 80070b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80070b8:	bf00      	nop
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20002534 	.word	0x20002534
 80070c0:	20000010 	.word	0x20000010
 80070c4:	20002530 	.word	0x20002530

080070c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80070cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fa f8ed 	bl	80012c4 <SD_disk_initialize>
 80070ea:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	4618      	mov	r0, r3
 8007102:	f7fa f9cb 	bl	800149c <SD_disk_status>
 8007106:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	4603      	mov	r3, r0
 800711e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read (pdrv, buff, sector, count);
 8007120:	7bf8      	ldrb	r0, [r7, #15]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	f7fa f9ce 	bl	80014c8 <SD_disk_read>
 800712c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	4603      	mov	r3, r0
 8007144:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 8007146:	7bf8      	ldrb	r0, [r7, #15]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	68b9      	ldr	r1, [r7, #8]
 800714e:	f7fa fa25 	bl	800159c <SD_disk_write>
 8007152:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	603a      	str	r2, [r7, #0]
 8007166:	71fb      	strb	r3, [r7, #7]
 8007168:	460b      	mov	r3, r1
 800716a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv, cmd, buff);
 800716c:	79b9      	ldrb	r1, [r7, #6]
 800716e:	79fb      	ldrb	r3, [r7, #7]
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	4618      	mov	r0, r3
 8007174:	f7fa fa96 	bl	80016a4 <SD_disk_ioctl>
 8007178:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	4a08      	ldr	r2, [pc, #32]	@ (80071b4 <disk_status+0x30>)
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	79fa      	ldrb	r2, [r7, #7]
 800719c:	4905      	ldr	r1, [pc, #20]	@ (80071b4 <disk_status+0x30>)
 800719e:	440a      	add	r2, r1
 80071a0:	7a12      	ldrb	r2, [r2, #8]
 80071a2:	4610      	mov	r0, r2
 80071a4:	4798      	blx	r3
 80071a6:	4603      	mov	r3, r0
 80071a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20002760 	.word	0x20002760

080071b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80071c6:	79fb      	ldrb	r3, [r7, #7]
 80071c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007204 <disk_initialize+0x4c>)
 80071ca:	5cd3      	ldrb	r3, [r2, r3]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d114      	bne.n	80071fa <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007204 <disk_initialize+0x4c>)
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	79fa      	ldrb	r2, [r7, #7]
 80071de:	4909      	ldr	r1, [pc, #36]	@ (8007204 <disk_initialize+0x4c>)
 80071e0:	440a      	add	r2, r1
 80071e2:	7a12      	ldrb	r2, [r2, #8]
 80071e4:	4610      	mov	r0, r2
 80071e6:	4798      	blx	r3
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d103      	bne.n	80071fa <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	4a03      	ldr	r2, [pc, #12]	@ (8007204 <disk_initialize+0x4c>)
 80071f6:	2101      	movs	r1, #1
 80071f8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20002760 	.word	0x20002760

08007208 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007208:	b590      	push	{r4, r7, lr}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	4603      	mov	r3, r0
 8007216:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	4a0a      	ldr	r2, [pc, #40]	@ (8007244 <disk_read+0x3c>)
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	689c      	ldr	r4, [r3, #8]
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	4a07      	ldr	r2, [pc, #28]	@ (8007244 <disk_read+0x3c>)
 8007228:	4413      	add	r3, r2
 800722a:	7a18      	ldrb	r0, [r3, #8]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	47a0      	blx	r4
 8007234:	4603      	mov	r3, r0
 8007236:	75fb      	strb	r3, [r7, #23]
  return res;
 8007238:	7dfb      	ldrb	r3, [r7, #23]
}
 800723a:	4618      	mov	r0, r3
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	bd90      	pop	{r4, r7, pc}
 8007242:	bf00      	nop
 8007244:	20002760 	.word	0x20002760

08007248 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007248:	b590      	push	{r4, r7, lr}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	607a      	str	r2, [r7, #4]
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	4603      	mov	r3, r0
 8007256:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	4a0a      	ldr	r2, [pc, #40]	@ (8007284 <disk_write+0x3c>)
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	68dc      	ldr	r4, [r3, #12]
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	4a07      	ldr	r2, [pc, #28]	@ (8007284 <disk_write+0x3c>)
 8007268:	4413      	add	r3, r2
 800726a:	7a18      	ldrb	r0, [r3, #8]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	47a0      	blx	r4
 8007274:	4603      	mov	r3, r0
 8007276:	75fb      	strb	r3, [r7, #23]
  return res;
 8007278:	7dfb      	ldrb	r3, [r7, #23]
}
 800727a:	4618      	mov	r0, r3
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	bd90      	pop	{r4, r7, pc}
 8007282:	bf00      	nop
 8007284:	20002760 	.word	0x20002760

08007288 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	4603      	mov	r3, r0
 8007290:	603a      	str	r2, [r7, #0]
 8007292:	71fb      	strb	r3, [r7, #7]
 8007294:	460b      	mov	r3, r1
 8007296:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	4a09      	ldr	r2, [pc, #36]	@ (80072c0 <disk_ioctl+0x38>)
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	79fa      	ldrb	r2, [r7, #7]
 80072a6:	4906      	ldr	r1, [pc, #24]	@ (80072c0 <disk_ioctl+0x38>)
 80072a8:	440a      	add	r2, r1
 80072aa:	7a10      	ldrb	r0, [r2, #8]
 80072ac:	79b9      	ldrb	r1, [r7, #6]
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	4798      	blx	r3
 80072b2:	4603      	mov	r3, r0
 80072b4:	73fb      	strb	r3, [r7, #15]
  return res;
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20002760 	.word	0x20002760

080072c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3301      	adds	r3, #1
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80072d4:	89fb      	ldrh	r3, [r7, #14]
 80072d6:	021b      	lsls	r3, r3, #8
 80072d8:	b21a      	sxth	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	b21b      	sxth	r3, r3
 80072e0:	4313      	orrs	r3, r2
 80072e2:	b21b      	sxth	r3, r3
 80072e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80072e6:	89fb      	ldrh	r3, [r7, #14]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3303      	adds	r3, #3
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	021b      	lsls	r3, r3, #8
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	3202      	adds	r2, #2
 800730c:	7812      	ldrb	r2, [r2, #0]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	021b      	lsls	r3, r3, #8
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	3201      	adds	r2, #1
 800731a:	7812      	ldrb	r2, [r2, #0]
 800731c:	4313      	orrs	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	7812      	ldrb	r2, [r2, #0]
 8007328:	4313      	orrs	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]
	return rv;
 800732c:	68fb      	ldr	r3, [r7, #12]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800733a:	b480      	push	{r7}
 800733c:	b083      	sub	sp, #12
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	887a      	ldrh	r2, [r7, #2]
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	887b      	ldrh	r3, [r7, #2]
 8007354:	0a1b      	lsrs	r3, r3, #8
 8007356:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	887a      	ldrh	r2, [r7, #2]
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	701a      	strb	r2, [r3, #0]
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	607a      	str	r2, [r7, #4]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	0a1b      	lsrs	r3, r3, #8
 800738a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	b2d2      	uxtb	r2, r2
 8007396:	701a      	strb	r2, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	0a1b      	lsrs	r3, r3, #8
 800739c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	701a      	strb	r2, [r3, #0]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	0a1b      	lsrs	r3, r3, #8
 80073ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	607a      	str	r2, [r7, #4]
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	b2d2      	uxtb	r2, r2
 80073ba:	701a      	strb	r2, [r3, #0]
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00d      	beq.n	80073fe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	1c53      	adds	r3, r2, #1
 80073e6:	613b      	str	r3, [r7, #16]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	1c59      	adds	r1, r3, #1
 80073ec:	6179      	str	r1, [r7, #20]
 80073ee:	7812      	ldrb	r2, [r2, #0]
 80073f0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	607b      	str	r3, [r7, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1f1      	bne.n	80073e2 <mem_cpy+0x1a>
	}
}
 80073fe:	bf00      	nop
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800740a:	b480      	push	{r7}
 800740c:	b087      	sub	sp, #28
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	617a      	str	r2, [r7, #20]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3b01      	subs	r3, #1
 800742a:	607b      	str	r3, [r7, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1f3      	bne.n	800741a <mem_set+0x10>
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007440:	b480      	push	{r7}
 8007442:	b089      	sub	sp, #36	@ 0x24
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	61fb      	str	r3, [r7, #28]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	61fa      	str	r2, [r7, #28]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	4619      	mov	r1, r3
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	61ba      	str	r2, [r7, #24]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	1acb      	subs	r3, r1, r3
 800746c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3b01      	subs	r3, #1
 8007472:	607b      	str	r3, [r7, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <mem_cmp+0x40>
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0eb      	beq.n	8007458 <mem_cmp+0x18>

	return r;
 8007480:	697b      	ldr	r3, [r7, #20]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3724      	adds	r7, #36	@ 0x24
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007498:	e002      	b.n	80074a0 <chk_chr+0x12>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3301      	adds	r3, #1
 800749e:	607b      	str	r3, [r7, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <chk_chr+0x26>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d1f2      	bne.n	800749a <chk_chr+0xc>
	return *str;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	781b      	ldrb	r3, [r3, #0]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80074ce:	2300      	movs	r3, #0
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	e029      	b.n	800752c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80074d8:	4a27      	ldr	r2, [pc, #156]	@ (8007578 <chk_lock+0xb4>)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	4413      	add	r3, r2
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d01d      	beq.n	8007522 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80074e6:	4a24      	ldr	r2, [pc, #144]	@ (8007578 <chk_lock+0xb4>)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	4413      	add	r3, r2
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d116      	bne.n	8007526 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80074f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007578 <chk_lock+0xb4>)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	4413      	add	r3, r2
 8007500:	3304      	adds	r3, #4
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007508:	429a      	cmp	r2, r3
 800750a:	d10c      	bne.n	8007526 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800750c:	4a1a      	ldr	r2, [pc, #104]	@ (8007578 <chk_lock+0xb4>)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	011b      	lsls	r3, r3, #4
 8007512:	4413      	add	r3, r2
 8007514:	3308      	adds	r3, #8
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800751c:	429a      	cmp	r2, r3
 800751e:	d102      	bne.n	8007526 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007520:	e007      	b.n	8007532 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007522:	2301      	movs	r3, #1
 8007524:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3301      	adds	r3, #1
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d9d2      	bls.n	80074d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b02      	cmp	r3, #2
 8007536:	d109      	bne.n	800754c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d102      	bne.n	8007544 <chk_lock+0x80>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d101      	bne.n	8007548 <chk_lock+0x84>
 8007544:	2300      	movs	r3, #0
 8007546:	e010      	b.n	800756a <chk_lock+0xa6>
 8007548:	2312      	movs	r3, #18
 800754a:	e00e      	b.n	800756a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d108      	bne.n	8007564 <chk_lock+0xa0>
 8007552:	4a09      	ldr	r2, [pc, #36]	@ (8007578 <chk_lock+0xb4>)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	011b      	lsls	r3, r3, #4
 8007558:	4413      	add	r3, r2
 800755a:	330c      	adds	r3, #12
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007562:	d101      	bne.n	8007568 <chk_lock+0xa4>
 8007564:	2310      	movs	r3, #16
 8007566:	e000      	b.n	800756a <chk_lock+0xa6>
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	20002540 	.word	0x20002540

0800757c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007582:	2300      	movs	r3, #0
 8007584:	607b      	str	r3, [r7, #4]
 8007586:	e002      	b.n	800758e <enq_lock+0x12>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3301      	adds	r3, #1
 800758c:	607b      	str	r3, [r7, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d806      	bhi.n	80075a2 <enq_lock+0x26>
 8007594:	4a09      	ldr	r2, [pc, #36]	@ (80075bc <enq_lock+0x40>)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	4413      	add	r3, r2
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1f2      	bne.n	8007588 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	bf14      	ite	ne
 80075a8:	2301      	movne	r3, #1
 80075aa:	2300      	moveq	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	20002540 	.word	0x20002540

080075c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80075ca:	2300      	movs	r3, #0
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	e01f      	b.n	8007610 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80075d0:	4a41      	ldr	r2, [pc, #260]	@ (80076d8 <inc_lock+0x118>)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	4413      	add	r3, r2
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d113      	bne.n	800760a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80075e2:	4a3d      	ldr	r2, [pc, #244]	@ (80076d8 <inc_lock+0x118>)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	4413      	add	r3, r2
 80075ea:	3304      	adds	r3, #4
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d109      	bne.n	800760a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80075f6:	4a38      	ldr	r2, [pc, #224]	@ (80076d8 <inc_lock+0x118>)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	4413      	add	r3, r2
 80075fe:	3308      	adds	r3, #8
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007606:	429a      	cmp	r2, r3
 8007608:	d006      	beq.n	8007618 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3301      	adds	r3, #1
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d9dc      	bls.n	80075d0 <inc_lock+0x10>
 8007616:	e000      	b.n	800761a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007618:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d132      	bne.n	8007686 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	e002      	b.n	800762c <inc_lock+0x6c>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3301      	adds	r3, #1
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d806      	bhi.n	8007640 <inc_lock+0x80>
 8007632:	4a29      	ldr	r2, [pc, #164]	@ (80076d8 <inc_lock+0x118>)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	4413      	add	r3, r2
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1f2      	bne.n	8007626 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b02      	cmp	r3, #2
 8007644:	d101      	bne.n	800764a <inc_lock+0x8a>
 8007646:	2300      	movs	r3, #0
 8007648:	e040      	b.n	80076cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4922      	ldr	r1, [pc, #136]	@ (80076d8 <inc_lock+0x118>)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	440b      	add	r3, r1
 8007656:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	491e      	ldr	r1, [pc, #120]	@ (80076d8 <inc_lock+0x118>)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	440b      	add	r3, r1
 8007664:	3304      	adds	r3, #4
 8007666:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	695a      	ldr	r2, [r3, #20]
 800766c:	491a      	ldr	r1, [pc, #104]	@ (80076d8 <inc_lock+0x118>)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	011b      	lsls	r3, r3, #4
 8007672:	440b      	add	r3, r1
 8007674:	3308      	adds	r3, #8
 8007676:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007678:	4a17      	ldr	r2, [pc, #92]	@ (80076d8 <inc_lock+0x118>)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	4413      	add	r3, r2
 8007680:	330c      	adds	r3, #12
 8007682:	2200      	movs	r2, #0
 8007684:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d009      	beq.n	80076a0 <inc_lock+0xe0>
 800768c:	4a12      	ldr	r2, [pc, #72]	@ (80076d8 <inc_lock+0x118>)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	4413      	add	r3, r2
 8007694:	330c      	adds	r3, #12
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <inc_lock+0xe0>
 800769c:	2300      	movs	r3, #0
 800769e:	e015      	b.n	80076cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d108      	bne.n	80076b8 <inc_lock+0xf8>
 80076a6:	4a0c      	ldr	r2, [pc, #48]	@ (80076d8 <inc_lock+0x118>)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	4413      	add	r3, r2
 80076ae:	330c      	adds	r3, #12
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	3301      	adds	r3, #1
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	e001      	b.n	80076bc <inc_lock+0xfc>
 80076b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076bc:	4906      	ldr	r1, [pc, #24]	@ (80076d8 <inc_lock+0x118>)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	011b      	lsls	r3, r3, #4
 80076c2:	440b      	add	r3, r1
 80076c4:	330c      	adds	r3, #12
 80076c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	3301      	adds	r3, #1
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	20002540 	.word	0x20002540

080076dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	607b      	str	r3, [r7, #4]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d825      	bhi.n	800773c <dec_lock+0x60>
		n = Files[i].ctr;
 80076f0:	4a17      	ldr	r2, [pc, #92]	@ (8007750 <dec_lock+0x74>)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	4413      	add	r3, r2
 80076f8:	330c      	adds	r3, #12
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80076fe:	89fb      	ldrh	r3, [r7, #14]
 8007700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007704:	d101      	bne.n	800770a <dec_lock+0x2e>
 8007706:	2300      	movs	r3, #0
 8007708:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800770a:	89fb      	ldrh	r3, [r7, #14]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <dec_lock+0x3a>
 8007710:	89fb      	ldrh	r3, [r7, #14]
 8007712:	3b01      	subs	r3, #1
 8007714:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007716:	4a0e      	ldr	r2, [pc, #56]	@ (8007750 <dec_lock+0x74>)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	4413      	add	r3, r2
 800771e:	330c      	adds	r3, #12
 8007720:	89fa      	ldrh	r2, [r7, #14]
 8007722:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007724:	89fb      	ldrh	r3, [r7, #14]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d105      	bne.n	8007736 <dec_lock+0x5a>
 800772a:	4a09      	ldr	r2, [pc, #36]	@ (8007750 <dec_lock+0x74>)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	4413      	add	r3, r2
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	737b      	strb	r3, [r7, #13]
 800773a:	e001      	b.n	8007740 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800773c:	2302      	movs	r3, #2
 800773e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007740:	7b7b      	ldrb	r3, [r7, #13]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	20002540 	.word	0x20002540

08007754 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	e010      	b.n	8007784 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007762:	4a0d      	ldr	r2, [pc, #52]	@ (8007798 <clear_lock+0x44>)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	4413      	add	r3, r2
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	429a      	cmp	r2, r3
 8007770:	d105      	bne.n	800777e <clear_lock+0x2a>
 8007772:	4a09      	ldr	r2, [pc, #36]	@ (8007798 <clear_lock+0x44>)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	4413      	add	r3, r2
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3301      	adds	r3, #1
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d9eb      	bls.n	8007762 <clear_lock+0xe>
	}
}
 800778a:	bf00      	nop
 800778c:	bf00      	nop
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	20002540 	.word	0x20002540

0800779c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	78db      	ldrb	r3, [r3, #3]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d034      	beq.n	800781a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	7858      	ldrb	r0, [r3, #1]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80077c0:	2301      	movs	r3, #1
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	f7ff fd40 	bl	8007248 <disk_write>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	73fb      	strb	r3, [r7, #15]
 80077d2:	e022      	b.n	800781a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	1ad2      	subs	r2, r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d217      	bcs.n	800781a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	789b      	ldrb	r3, [r3, #2]
 80077ee:	613b      	str	r3, [r7, #16]
 80077f0:	e010      	b.n	8007814 <sync_window+0x78>
					wsect += fs->fsize;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	4413      	add	r3, r2
 80077fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	7858      	ldrb	r0, [r3, #1]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007806:	2301      	movs	r3, #1
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	f7ff fd1d 	bl	8007248 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	3b01      	subs	r3, #1
 8007812:	613b      	str	r3, [r7, #16]
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d8eb      	bhi.n	80077f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800781a:	7bfb      	ldrb	r3, [r7, #15]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d01b      	beq.n	8007874 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff ffad 	bl	800779c <sync_window>
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d113      	bne.n	8007874 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	7858      	ldrb	r0, [r3, #1]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007856:	2301      	movs	r3, #1
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	f7ff fcd5 	bl	8007208 <disk_read>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007864:	f04f 33ff 	mov.w	r3, #4294967295
 8007868:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800786a:	2301      	movs	r3, #1
 800786c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff ff87 	bl	800779c <sync_window>
 800788e:	4603      	mov	r3, r0
 8007890:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007892:	7bfb      	ldrb	r3, [r7, #15]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d159      	bne.n	800794c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b03      	cmp	r3, #3
 800789e:	d149      	bne.n	8007934 <sync_fs+0xb4>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	791b      	ldrb	r3, [r3, #4]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d145      	bne.n	8007934 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	899b      	ldrh	r3, [r3, #12]
 80078b2:	461a      	mov	r2, r3
 80078b4:	2100      	movs	r1, #0
 80078b6:	f7ff fda8 	bl	800740a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3338      	adds	r3, #56	@ 0x38
 80078be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80078c2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff fd37 	bl	800733a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3338      	adds	r3, #56	@ 0x38
 80078d0:	4921      	ldr	r1, [pc, #132]	@ (8007958 <sync_fs+0xd8>)
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7ff fd4c 	bl	8007370 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3338      	adds	r3, #56	@ 0x38
 80078dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80078e0:	491e      	ldr	r1, [pc, #120]	@ (800795c <sync_fs+0xdc>)
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7ff fd44 	bl	8007370 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3338      	adds	r3, #56	@ 0x38
 80078ec:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f7ff fd3a 	bl	8007370 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3338      	adds	r3, #56	@ 0x38
 8007900:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	4619      	mov	r1, r3
 800790a:	4610      	mov	r0, r2
 800790c:	f7ff fd30 	bl	8007370 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7858      	ldrb	r0, [r3, #1]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007928:	2301      	movs	r3, #1
 800792a:	f7ff fc8d 	bl	8007248 <disk_write>
			fs->fsi_flag = 0;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	785b      	ldrb	r3, [r3, #1]
 8007938:	2200      	movs	r2, #0
 800793a:	2100      	movs	r1, #0
 800793c:	4618      	mov	r0, r3
 800793e:	f7ff fca3 	bl	8007288 <disk_ioctl>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <sync_fs+0xcc>
 8007948:	2301      	movs	r3, #1
 800794a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800794c:	7bfb      	ldrb	r3, [r7, #15]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	41615252 	.word	0x41615252
 800795c:	61417272 	.word	0x61417272

08007960 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	3b02      	subs	r3, #2
 800796e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	3b02      	subs	r3, #2
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	d301      	bcc.n	8007980 <clust2sect+0x20>
 800797c:	2300      	movs	r3, #0
 800797e:	e008      	b.n	8007992 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	895b      	ldrh	r3, [r3, #10]
 8007984:	461a      	mov	r2, r3
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	fb03 f202 	mul.w	r2, r3, r2
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007990:	4413      	add	r3, r2
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b086      	sub	sp, #24
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d904      	bls.n	80079be <get_fat+0x20>
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d302      	bcc.n	80079c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80079be:	2301      	movs	r3, #1
 80079c0:	617b      	str	r3, [r7, #20]
 80079c2:	e0ba      	b.n	8007b3a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80079c4:	f04f 33ff 	mov.w	r3, #4294967295
 80079c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	f000 8082 	beq.w	8007ad8 <get_fat+0x13a>
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	f300 80a6 	bgt.w	8007b26 <get_fat+0x188>
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d002      	beq.n	80079e4 <get_fat+0x46>
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d055      	beq.n	8007a8e <get_fat+0xf0>
 80079e2:	e0a0      	b.n	8007b26 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	899b      	ldrh	r3, [r3, #12]
 80079fa:	4619      	mov	r1, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a02:	4413      	add	r3, r2
 8007a04:	4619      	mov	r1, r3
 8007a06:	6938      	ldr	r0, [r7, #16]
 8007a08:	f7ff ff0c 	bl	8007824 <move_window>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f040 808c 	bne.w	8007b2c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	60fa      	str	r2, [r7, #12]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	8992      	ldrh	r2, [r2, #12]
 8007a1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a22:	fb01 f202 	mul.w	r2, r1, r2
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	899b      	ldrh	r3, [r3, #12]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a42:	4413      	add	r3, r2
 8007a44:	4619      	mov	r1, r3
 8007a46:	6938      	ldr	r0, [r7, #16]
 8007a48:	f7ff feec 	bl	8007824 <move_window>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d16e      	bne.n	8007b30 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	899b      	ldrh	r3, [r3, #12]
 8007a56:	461a      	mov	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a5e:	fb01 f202 	mul.w	r2, r1, r2
 8007a62:	1a9b      	subs	r3, r3, r2
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4413      	add	r3, r2
 8007a68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a6c:	021b      	lsls	r3, r3, #8
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <get_fat+0xe6>
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	091b      	lsrs	r3, r3, #4
 8007a82:	e002      	b.n	8007a8a <get_fat+0xec>
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a8a:	617b      	str	r3, [r7, #20]
			break;
 8007a8c:	e055      	b.n	8007b3a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	899b      	ldrh	r3, [r3, #12]
 8007a96:	085b      	lsrs	r3, r3, #1
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007aa2:	4413      	add	r3, r2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6938      	ldr	r0, [r7, #16]
 8007aa8:	f7ff febc 	bl	8007824 <move_window>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d140      	bne.n	8007b34 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	8992      	ldrh	r2, [r2, #12]
 8007ac0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ac4:	fb00 f202 	mul.w	r2, r0, r2
 8007ac8:	1a9b      	subs	r3, r3, r2
 8007aca:	440b      	add	r3, r1
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7ff fbf9 	bl	80072c4 <ld_word>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	617b      	str	r3, [r7, #20]
			break;
 8007ad6:	e030      	b.n	8007b3a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	899b      	ldrh	r3, [r3, #12]
 8007ae0:	089b      	lsrs	r3, r3, #2
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007aec:	4413      	add	r3, r2
 8007aee:	4619      	mov	r1, r3
 8007af0:	6938      	ldr	r0, [r7, #16]
 8007af2:	f7ff fe97 	bl	8007824 <move_window>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d11d      	bne.n	8007b38 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	8992      	ldrh	r2, [r2, #12]
 8007b0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b0e:	fb00 f202 	mul.w	r2, r0, r2
 8007b12:	1a9b      	subs	r3, r3, r2
 8007b14:	440b      	add	r3, r1
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fbec 	bl	80072f4 <ld_dword>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007b22:	617b      	str	r3, [r7, #20]
			break;
 8007b24:	e009      	b.n	8007b3a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007b26:	2301      	movs	r3, #1
 8007b28:	617b      	str	r3, [r7, #20]
 8007b2a:	e006      	b.n	8007b3a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b2c:	bf00      	nop
 8007b2e:	e004      	b.n	8007b3a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b30:	bf00      	nop
 8007b32:	e002      	b.n	8007b3a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007b34:	bf00      	nop
 8007b36:	e000      	b.n	8007b3a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b38:	bf00      	nop
		}
	}

	return val;
 8007b3a:	697b      	ldr	r3, [r7, #20]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007b44:	b590      	push	{r4, r7, lr}
 8007b46:	b089      	sub	sp, #36	@ 0x24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007b50:	2302      	movs	r3, #2
 8007b52:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	f240 8109 	bls.w	8007d6e <put_fat+0x22a>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	f080 8103 	bcs.w	8007d6e <put_fat+0x22a>
		switch (fs->fs_type) {
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	f000 80b6 	beq.w	8007cde <put_fat+0x19a>
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	f300 80fb 	bgt.w	8007d6e <put_fat+0x22a>
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d003      	beq.n	8007b84 <put_fat+0x40>
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	f000 8083 	beq.w	8007c88 <put_fat+0x144>
 8007b82:	e0f4      	b.n	8007d6e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	61bb      	str	r3, [r7, #24]
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	085b      	lsrs	r3, r3, #1
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	4413      	add	r3, r2
 8007b90:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	899b      	ldrh	r3, [r3, #12]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ba2:	4413      	add	r3, r2
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f7ff fe3c 	bl	8007824 <move_window>
 8007bac:	4603      	mov	r3, r0
 8007bae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007bb0:	7ffb      	ldrb	r3, [r7, #31]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f040 80d4 	bne.w	8007d60 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	61ba      	str	r2, [r7, #24]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	8992      	ldrh	r2, [r2, #12]
 8007bc8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bcc:	fb00 f202 	mul.w	r2, r0, r2
 8007bd0:	1a9b      	subs	r3, r3, r2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00d      	beq.n	8007bfc <put_fat+0xb8>
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	b25b      	sxtb	r3, r3
 8007be6:	f003 030f 	and.w	r3, r3, #15
 8007bea:	b25a      	sxtb	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	b25b      	sxtb	r3, r3
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	b25b      	sxtb	r3, r3
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	e001      	b.n	8007c00 <put_fat+0xbc>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2201      	movs	r2, #1
 8007c08:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	899b      	ldrh	r3, [r3, #12]
 8007c12:	4619      	mov	r1, r3
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c1a:	4413      	add	r3, r2
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff fe00 	bl	8007824 <move_window>
 8007c24:	4603      	mov	r3, r0
 8007c26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c28:	7ffb      	ldrb	r3, [r7, #31]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f040 809a 	bne.w	8007d64 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	899b      	ldrh	r3, [r3, #12]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c42:	fb00 f202 	mul.w	r2, r0, r2
 8007c46:	1a9b      	subs	r3, r3, r2
 8007c48:	440b      	add	r3, r1
 8007c4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <put_fat+0x11a>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	091b      	lsrs	r3, r3, #4
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	e00e      	b.n	8007c7c <put_fat+0x138>
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	b25b      	sxtb	r3, r3
 8007c64:	f023 030f 	bic.w	r3, r3, #15
 8007c68:	b25a      	sxtb	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	0a1b      	lsrs	r3, r3, #8
 8007c6e:	b25b      	sxtb	r3, r3
 8007c70:	f003 030f 	and.w	r3, r3, #15
 8007c74:	b25b      	sxtb	r3, r3
 8007c76:	4313      	orrs	r3, r2
 8007c78:	b25b      	sxtb	r3, r3
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2201      	movs	r2, #1
 8007c84:	70da      	strb	r2, [r3, #3]
			break;
 8007c86:	e072      	b.n	8007d6e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	899b      	ldrh	r3, [r3, #12]
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	4619      	mov	r1, r3
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c9c:	4413      	add	r3, r2
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff fdbf 	bl	8007824 <move_window>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007caa:	7ffb      	ldrb	r3, [r7, #31]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d15b      	bne.n	8007d68 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	8992      	ldrh	r2, [r2, #12]
 8007cbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cc2:	fb00 f202 	mul.w	r2, r0, r2
 8007cc6:	1a9b      	subs	r3, r3, r2
 8007cc8:	440b      	add	r3, r1
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	b292      	uxth	r2, r2
 8007cce:	4611      	mov	r1, r2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff fb32 	bl	800733a <st_word>
			fs->wflag = 1;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	70da      	strb	r2, [r3, #3]
			break;
 8007cdc:	e047      	b.n	8007d6e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	899b      	ldrh	r3, [r3, #12]
 8007ce6:	089b      	lsrs	r3, r3, #2
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	4619      	mov	r1, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cf2:	4413      	add	r3, r2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f7ff fd94 	bl	8007824 <move_window>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d00:	7ffb      	ldrb	r3, [r7, #31]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d132      	bne.n	8007d6c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	8992      	ldrh	r2, [r2, #12]
 8007d1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d1e:	fb00 f202 	mul.w	r2, r0, r2
 8007d22:	1a9b      	subs	r3, r3, r2
 8007d24:	440b      	add	r3, r1
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7ff fae4 	bl	80072f4 <ld_dword>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007d32:	4323      	orrs	r3, r4
 8007d34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	8992      	ldrh	r2, [r2, #12]
 8007d44:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d48:	fb00 f202 	mul.w	r2, r0, r2
 8007d4c:	1a9b      	subs	r3, r3, r2
 8007d4e:	440b      	add	r3, r1
 8007d50:	6879      	ldr	r1, [r7, #4]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff fb0c 	bl	8007370 <st_dword>
			fs->wflag = 1;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	70da      	strb	r2, [r3, #3]
			break;
 8007d5e:	e006      	b.n	8007d6e <put_fat+0x22a>
			if (res != FR_OK) break;
 8007d60:	bf00      	nop
 8007d62:	e004      	b.n	8007d6e <put_fat+0x22a>
			if (res != FR_OK) break;
 8007d64:	bf00      	nop
 8007d66:	e002      	b.n	8007d6e <put_fat+0x22a>
			if (res != FR_OK) break;
 8007d68:	bf00      	nop
 8007d6a:	e000      	b.n	8007d6e <put_fat+0x22a>
			if (res != FR_OK) break;
 8007d6c:	bf00      	nop
		}
	}
	return res;
 8007d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3724      	adds	r7, #36	@ 0x24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd90      	pop	{r4, r7, pc}

08007d78 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d904      	bls.n	8007d9e <remove_chain+0x26>
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d301      	bcc.n	8007da2 <remove_chain+0x2a>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e04b      	b.n	8007e3a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00c      	beq.n	8007dc2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007da8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	69b8      	ldr	r0, [r7, #24]
 8007db0:	f7ff fec8 	bl	8007b44 <put_fat>
 8007db4:	4603      	mov	r3, r0
 8007db6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007db8:	7ffb      	ldrb	r3, [r7, #31]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <remove_chain+0x4a>
 8007dbe:	7ffb      	ldrb	r3, [r7, #31]
 8007dc0:	e03b      	b.n	8007e3a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7ff fdea 	bl	800799e <get_fat>
 8007dca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d031      	beq.n	8007e36 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <remove_chain+0x64>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e02e      	b.n	8007e3a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de2:	d101      	bne.n	8007de8 <remove_chain+0x70>
 8007de4:	2301      	movs	r3, #1
 8007de6:	e028      	b.n	8007e3a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007de8:	2200      	movs	r2, #0
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	69b8      	ldr	r0, [r7, #24]
 8007dee:	f7ff fea9 	bl	8007b44 <put_fat>
 8007df2:	4603      	mov	r3, r0
 8007df4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007df6:	7ffb      	ldrb	r3, [r7, #31]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <remove_chain+0x88>
 8007dfc:	7ffb      	ldrb	r3, [r7, #31]
 8007dfe:	e01c      	b.n	8007e3a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	699a      	ldr	r2, [r3, #24]
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	3b02      	subs	r3, #2
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d20b      	bcs.n	8007e26 <remove_chain+0xae>
			fs->free_clst++;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	791b      	ldrb	r3, [r3, #4]
 8007e1c:	f043 0301 	orr.w	r3, r3, #1
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d3c6      	bcc.n	8007dc2 <remove_chain+0x4a>
 8007e34:	e000      	b.n	8007e38 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007e36:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3720      	adds	r7, #32
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b088      	sub	sp, #32
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10d      	bne.n	8007e74 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d004      	beq.n	8007e6e <create_chain+0x2c>
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d31b      	bcc.n	8007ea6 <create_chain+0x64>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	61bb      	str	r3, [r7, #24]
 8007e72:	e018      	b.n	8007ea6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7ff fd91 	bl	800799e <get_fat>
 8007e7c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d801      	bhi.n	8007e88 <create_chain+0x46>
 8007e84:	2301      	movs	r3, #1
 8007e86:	e070      	b.n	8007f6a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8e:	d101      	bne.n	8007e94 <create_chain+0x52>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	e06a      	b.n	8007f6a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d201      	bcs.n	8007ea2 <create_chain+0x60>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	e063      	b.n	8007f6a <create_chain+0x128>
		scl = clst;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	3301      	adds	r3, #1
 8007eae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	69fa      	ldr	r2, [r7, #28]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d307      	bcc.n	8007eca <create_chain+0x88>
				ncl = 2;
 8007eba:	2302      	movs	r3, #2
 8007ebc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d901      	bls.n	8007eca <create_chain+0x88>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e04f      	b.n	8007f6a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007eca:	69f9      	ldr	r1, [r7, #28]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff fd66 	bl	800799e <get_fat>
 8007ed2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00e      	beq.n	8007ef8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d003      	beq.n	8007ee8 <create_chain+0xa6>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee6:	d101      	bne.n	8007eec <create_chain+0xaa>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	e03e      	b.n	8007f6a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007eec:	69fa      	ldr	r2, [r7, #28]
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d1da      	bne.n	8007eaa <create_chain+0x68>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	e038      	b.n	8007f6a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007ef8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007efa:	f04f 32ff 	mov.w	r2, #4294967295
 8007efe:	69f9      	ldr	r1, [r7, #28]
 8007f00:	6938      	ldr	r0, [r7, #16]
 8007f02:	f7ff fe1f 	bl	8007b44 <put_fat>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d109      	bne.n	8007f24 <create_chain+0xe2>
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d006      	beq.n	8007f24 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6938      	ldr	r0, [r7, #16]
 8007f1c:	f7ff fe12 	bl	8007b44 <put_fat>
 8007f20:	4603      	mov	r3, r0
 8007f22:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d116      	bne.n	8007f58 <create_chain+0x116>
		fs->last_clst = ncl;
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	69fa      	ldr	r2, [r7, #28]
 8007f2e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	699a      	ldr	r2, [r3, #24]
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	3b02      	subs	r3, #2
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d804      	bhi.n	8007f48 <create_chain+0x106>
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	1e5a      	subs	r2, r3, #1
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	791b      	ldrb	r3, [r3, #4]
 8007f4c:	f043 0301 	orr.w	r3, r3, #1
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	711a      	strb	r2, [r3, #4]
 8007f56:	e007      	b.n	8007f68 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d102      	bne.n	8007f64 <create_chain+0x122>
 8007f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f62:	e000      	b.n	8007f66 <create_chain+0x124>
 8007f64:	2301      	movs	r3, #1
 8007f66:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007f68:	69fb      	ldr	r3, [r7, #28]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3720      	adds	r7, #32
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b087      	sub	sp, #28
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f86:	3304      	adds	r3, #4
 8007f88:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	899b      	ldrh	r3, [r3, #12]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	8952      	ldrh	r2, [r2, #10]
 8007f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f9e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	1d1a      	adds	r2, r3, #4
 8007fa4:	613a      	str	r2, [r7, #16]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <clmt_clust+0x42>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e010      	b.n	8007fd6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d307      	bcc.n	8007fcc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007fca:	e7e9      	b.n	8007fa0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007fcc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	4413      	add	r3, r2
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	371c      	adds	r7, #28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ff8:	d204      	bcs.n	8008004 <dir_sdi+0x22>
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	f003 031f 	and.w	r3, r3, #31
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008004:	2302      	movs	r3, #2
 8008006:	e071      	b.n	80080ec <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d106      	bne.n	8008028 <dir_sdi+0x46>
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d902      	bls.n	8008028 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008026:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10c      	bne.n	8008048 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	095b      	lsrs	r3, r3, #5
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	8912      	ldrh	r2, [r2, #8]
 8008036:	4293      	cmp	r3, r2
 8008038:	d301      	bcc.n	800803e <dir_sdi+0x5c>
 800803a:	2302      	movs	r3, #2
 800803c:	e056      	b.n	80080ec <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	61da      	str	r2, [r3, #28]
 8008046:	e02d      	b.n	80080a4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	895b      	ldrh	r3, [r3, #10]
 800804c:	461a      	mov	r2, r3
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	899b      	ldrh	r3, [r3, #12]
 8008052:	fb02 f303 	mul.w	r3, r2, r3
 8008056:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008058:	e019      	b.n	800808e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6979      	ldr	r1, [r7, #20]
 800805e:	4618      	mov	r0, r3
 8008060:	f7ff fc9d 	bl	800799e <get_fat>
 8008064:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806c:	d101      	bne.n	8008072 <dir_sdi+0x90>
 800806e:	2301      	movs	r3, #1
 8008070:	e03c      	b.n	80080ec <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d904      	bls.n	8008082 <dir_sdi+0xa0>
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	429a      	cmp	r2, r3
 8008080:	d301      	bcc.n	8008086 <dir_sdi+0xa4>
 8008082:	2302      	movs	r3, #2
 8008084:	e032      	b.n	80080ec <dir_sdi+0x10a>
			ofs -= csz;
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	429a      	cmp	r2, r3
 8008094:	d2e1      	bcs.n	800805a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008096:	6979      	ldr	r1, [r7, #20]
 8008098:	6938      	ldr	r0, [r7, #16]
 800809a:	f7ff fc61 	bl	8007960 <clust2sect>
 800809e:	4602      	mov	r2, r0
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <dir_sdi+0xd4>
 80080b2:	2302      	movs	r3, #2
 80080b4:	e01a      	b.n	80080ec <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	69da      	ldr	r2, [r3, #28]
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	899b      	ldrh	r3, [r3, #12]
 80080be:	4619      	mov	r1, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80080c6:	441a      	add	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	899b      	ldrh	r3, [r3, #12]
 80080d6:	461a      	mov	r2, r3
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	fbb3 f0f2 	udiv	r0, r3, r2
 80080de:	fb00 f202 	mul.w	r2, r0, r2
 80080e2:	1a9b      	subs	r3, r3, r2
 80080e4:	18ca      	adds	r2, r1, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	3320      	adds	r3, #32
 800810a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <dir_next+0x28>
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800811a:	d301      	bcc.n	8008120 <dir_next+0x2c>
 800811c:	2304      	movs	r3, #4
 800811e:	e0bb      	b.n	8008298 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	899b      	ldrh	r3, [r3, #12]
 8008124:	461a      	mov	r2, r3
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	fbb3 f1f2 	udiv	r1, r3, r2
 800812c:	fb01 f202 	mul.w	r2, r1, r2
 8008130:	1a9b      	subs	r3, r3, r2
 8008132:	2b00      	cmp	r3, #0
 8008134:	f040 809d 	bne.w	8008272 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10b      	bne.n	8008162 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	095b      	lsrs	r3, r3, #5
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	8912      	ldrh	r2, [r2, #8]
 8008152:	4293      	cmp	r3, r2
 8008154:	f0c0 808d 	bcc.w	8008272 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	61da      	str	r2, [r3, #28]
 800815e:	2304      	movs	r3, #4
 8008160:	e09a      	b.n	8008298 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	899b      	ldrh	r3, [r3, #12]
 8008166:	461a      	mov	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	fbb3 f3f2 	udiv	r3, r3, r2
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	8952      	ldrh	r2, [r2, #10]
 8008172:	3a01      	subs	r2, #1
 8008174:	4013      	ands	r3, r2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d17b      	bne.n	8008272 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	4619      	mov	r1, r3
 8008182:	4610      	mov	r0, r2
 8008184:	f7ff fc0b 	bl	800799e <get_fat>
 8008188:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d801      	bhi.n	8008194 <dir_next+0xa0>
 8008190:	2302      	movs	r3, #2
 8008192:	e081      	b.n	8008298 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819a:	d101      	bne.n	80081a0 <dir_next+0xac>
 800819c:	2301      	movs	r3, #1
 800819e:	e07b      	b.n	8008298 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d359      	bcc.n	800825e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d104      	bne.n	80081ba <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	61da      	str	r2, [r3, #28]
 80081b6:	2304      	movs	r3, #4
 80081b8:	e06e      	b.n	8008298 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f7ff fe3d 	bl	8007e42 <create_chain>
 80081c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <dir_next+0xe0>
 80081d0:	2307      	movs	r3, #7
 80081d2:	e061      	b.n	8008298 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d101      	bne.n	80081de <dir_next+0xea>
 80081da:	2302      	movs	r3, #2
 80081dc:	e05c      	b.n	8008298 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e4:	d101      	bne.n	80081ea <dir_next+0xf6>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e056      	b.n	8008298 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f7ff fad6 	bl	800779c <sync_window>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <dir_next+0x106>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e04e      	b.n	8008298 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	899b      	ldrh	r3, [r3, #12]
 8008204:	461a      	mov	r2, r3
 8008206:	2100      	movs	r1, #0
 8008208:	f7ff f8ff 	bl	800740a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800820c:	2300      	movs	r3, #0
 800820e:	613b      	str	r3, [r7, #16]
 8008210:	6979      	ldr	r1, [r7, #20]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f7ff fba4 	bl	8007960 <clust2sect>
 8008218:	4602      	mov	r2, r0
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	635a      	str	r2, [r3, #52]	@ 0x34
 800821e:	e012      	b.n	8008246 <dir_next+0x152>
						fs->wflag = 1;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2201      	movs	r2, #1
 8008224:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff fab8 	bl	800779c <sync_window>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <dir_next+0x142>
 8008232:	2301      	movs	r3, #1
 8008234:	e030      	b.n	8008298 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	3301      	adds	r3, #1
 800823a:	613b      	str	r3, [r7, #16]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	635a      	str	r2, [r3, #52]	@ 0x34
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	895b      	ldrh	r3, [r3, #10]
 800824a:	461a      	mov	r2, r3
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	4293      	cmp	r3, r2
 8008250:	d3e6      	bcc.n	8008220 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	1ad2      	subs	r2, r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008264:	6979      	ldr	r1, [r7, #20]
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f7ff fb7a 	bl	8007960 <clust2sect>
 800826c:	4602      	mov	r2, r0
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	899b      	ldrh	r3, [r3, #12]
 8008282:	461a      	mov	r2, r3
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	fbb3 f0f2 	udiv	r0, r3, r2
 800828a:	fb00 f202 	mul.w	r2, r0, r2
 800828e:	1a9b      	subs	r3, r3, r2
 8008290:	18ca      	adds	r2, r1, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80082b0:	2100      	movs	r1, #0
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff fe95 	bl	8007fe2 <dir_sdi>
 80082b8:	4603      	mov	r3, r0
 80082ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80082bc:	7dfb      	ldrb	r3, [r7, #23]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d12b      	bne.n	800831a <dir_alloc+0x7a>
		n = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	4619      	mov	r1, r3
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7ff faa9 	bl	8007824 <move_window>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11d      	bne.n	8008318 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a1b      	ldr	r3, [r3, #32]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	2be5      	cmp	r3, #229	@ 0xe5
 80082e4:	d004      	beq.n	80082f0 <dir_alloc+0x50>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d107      	bne.n	8008300 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	3301      	adds	r3, #1
 80082f4:	613b      	str	r3, [r7, #16]
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d102      	bne.n	8008304 <dir_alloc+0x64>
 80082fe:	e00c      	b.n	800831a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008300:	2300      	movs	r3, #0
 8008302:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008304:	2101      	movs	r1, #1
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff fef4 	bl	80080f4 <dir_next>
 800830c:	4603      	mov	r3, r0
 800830e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008310:	7dfb      	ldrb	r3, [r7, #23]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d0d7      	beq.n	80082c6 <dir_alloc+0x26>
 8008316:	e000      	b.n	800831a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008318:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	2b04      	cmp	r3, #4
 800831e:	d101      	bne.n	8008324 <dir_alloc+0x84>
 8008320:	2307      	movs	r3, #7
 8008322:	75fb      	strb	r3, [r7, #23]
	return res;
 8008324:	7dfb      	ldrb	r3, [r7, #23]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	331a      	adds	r3, #26
 800833c:	4618      	mov	r0, r3
 800833e:	f7fe ffc1 	bl	80072c4 <ld_word>
 8008342:	4603      	mov	r3, r0
 8008344:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b03      	cmp	r3, #3
 800834c:	d109      	bne.n	8008362 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	3314      	adds	r3, #20
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe ffb6 	bl	80072c4 <ld_word>
 8008358:	4603      	mov	r3, r0
 800835a:	041b      	lsls	r3, r3, #16
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008362:	68fb      	ldr	r3, [r7, #12]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	331a      	adds	r3, #26
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	b292      	uxth	r2, r2
 8008380:	4611      	mov	r1, r2
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe ffd9 	bl	800733a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b03      	cmp	r3, #3
 800838e:	d109      	bne.n	80083a4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f103 0214 	add.w	r2, r3, #20
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	0c1b      	lsrs	r3, r3, #16
 800839a:	b29b      	uxth	r3, r3
 800839c:	4619      	mov	r1, r3
 800839e:	4610      	mov	r0, r2
 80083a0:	f7fe ffcb 	bl	800733a <st_word>
	}
}
 80083a4:	bf00      	nop
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80083ac:	b590      	push	{r4, r7, lr}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	331a      	adds	r3, #26
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe ff82 	bl	80072c4 <ld_word>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <cmp_lfn+0x1e>
 80083c6:	2300      	movs	r3, #0
 80083c8:	e059      	b.n	800847e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083d2:	1e5a      	subs	r2, r3, #1
 80083d4:	4613      	mov	r3, r2
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	4413      	add	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80083e0:	2301      	movs	r3, #1
 80083e2:	81fb      	strh	r3, [r7, #14]
 80083e4:	2300      	movs	r3, #0
 80083e6:	613b      	str	r3, [r7, #16]
 80083e8:	e033      	b.n	8008452 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80083ea:	4a27      	ldr	r2, [pc, #156]	@ (8008488 <cmp_lfn+0xdc>)
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	4413      	add	r3, r2
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	4413      	add	r3, r2
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fe ff63 	bl	80072c4 <ld_word>
 80083fe:	4603      	mov	r3, r0
 8008400:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008402:	89fb      	ldrh	r3, [r7, #14]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d01a      	beq.n	800843e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2bfe      	cmp	r3, #254	@ 0xfe
 800840c:	d812      	bhi.n	8008434 <cmp_lfn+0x88>
 800840e:	89bb      	ldrh	r3, [r7, #12]
 8008410:	4618      	mov	r0, r3
 8008412:	f002 f831 	bl	800a478 <ff_wtoupper>
 8008416:	4603      	mov	r3, r0
 8008418:	461c      	mov	r4, r3
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	617a      	str	r2, [r7, #20]
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	4413      	add	r3, r2
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	4618      	mov	r0, r3
 800842a:	f002 f825 	bl	800a478 <ff_wtoupper>
 800842e:	4603      	mov	r3, r0
 8008430:	429c      	cmp	r4, r3
 8008432:	d001      	beq.n	8008438 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008434:	2300      	movs	r3, #0
 8008436:	e022      	b.n	800847e <cmp_lfn+0xd2>
			}
			wc = uc;
 8008438:	89bb      	ldrh	r3, [r7, #12]
 800843a:	81fb      	strh	r3, [r7, #14]
 800843c:	e006      	b.n	800844c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800843e:	89bb      	ldrh	r3, [r7, #12]
 8008440:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008444:	4293      	cmp	r3, r2
 8008446:	d001      	beq.n	800844c <cmp_lfn+0xa0>
 8008448:	2300      	movs	r3, #0
 800844a:	e018      	b.n	800847e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	3301      	adds	r3, #1
 8008450:	613b      	str	r3, [r7, #16]
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b0c      	cmp	r3, #12
 8008456:	d9c8      	bls.n	80083ea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00b      	beq.n	800847c <cmp_lfn+0xd0>
 8008464:	89fb      	ldrh	r3, [r7, #14]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d008      	beq.n	800847c <cmp_lfn+0xd0>
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	005b      	lsls	r3, r3, #1
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	4413      	add	r3, r2
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <cmp_lfn+0xd0>
 8008478:	2300      	movs	r3, #0
 800847a:	e000      	b.n	800847e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800847c:	2301      	movs	r3, #1
}
 800847e:	4618      	mov	r0, r3
 8008480:	371c      	adds	r7, #28
 8008482:	46bd      	mov	sp, r7
 8008484:	bd90      	pop	{r4, r7, pc}
 8008486:	bf00      	nop
 8008488:	08014920 	.word	0x08014920

0800848c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4611      	mov	r1, r2
 8008498:	461a      	mov	r2, r3
 800849a:	460b      	mov	r3, r1
 800849c:	71fb      	strb	r3, [r7, #7]
 800849e:	4613      	mov	r3, r2
 80084a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	330d      	adds	r3, #13
 80084a6:	79ba      	ldrb	r2, [r7, #6]
 80084a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	330b      	adds	r3, #11
 80084ae:	220f      	movs	r2, #15
 80084b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	330c      	adds	r3, #12
 80084b6:	2200      	movs	r2, #0
 80084b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	331a      	adds	r3, #26
 80084be:	2100      	movs	r1, #0
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fe ff3a 	bl	800733a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80084c6:	79fb      	ldrb	r3, [r7, #7]
 80084c8:	1e5a      	subs	r2, r3, #1
 80084ca:	4613      	mov	r3, r2
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	4413      	add	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	82fb      	strh	r3, [r7, #22]
 80084da:	2300      	movs	r3, #0
 80084dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80084de:	8afb      	ldrh	r3, [r7, #22]
 80084e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d007      	beq.n	80084f8 <put_lfn+0x6c>
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	61fa      	str	r2, [r7, #28]
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	4413      	add	r3, r2
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80084f8:	4a17      	ldr	r2, [pc, #92]	@ (8008558 <put_lfn+0xcc>)
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	4413      	add	r3, r2
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	4413      	add	r3, r2
 8008506:	8afa      	ldrh	r2, [r7, #22]
 8008508:	4611      	mov	r1, r2
 800850a:	4618      	mov	r0, r3
 800850c:	f7fe ff15 	bl	800733a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008510:	8afb      	ldrh	r3, [r7, #22]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d102      	bne.n	800851c <put_lfn+0x90>
 8008516:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800851a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	3301      	adds	r3, #1
 8008520:	61bb      	str	r3, [r7, #24]
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	2b0c      	cmp	r3, #12
 8008526:	d9da      	bls.n	80084de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008528:	8afb      	ldrh	r3, [r7, #22]
 800852a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800852e:	4293      	cmp	r3, r2
 8008530:	d006      	beq.n	8008540 <put_lfn+0xb4>
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	4413      	add	r3, r2
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d103      	bne.n	8008548 <put_lfn+0xbc>
 8008540:	79fb      	ldrb	r3, [r7, #7]
 8008542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008546:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	79fa      	ldrb	r2, [r7, #7]
 800854c:	701a      	strb	r2, [r3, #0]
}
 800854e:	bf00      	nop
 8008550:	3720      	adds	r7, #32
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	08014920 	.word	0x08014920

0800855c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08c      	sub	sp, #48	@ 0x30
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800856a:	220b      	movs	r2, #11
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f7fe ff2a 	bl	80073c8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	2b05      	cmp	r3, #5
 8008578:	d92b      	bls.n	80085d2 <gen_numname+0x76>
		sr = seq;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800857e:	e022      	b.n	80085c6 <gen_numname+0x6a>
			wc = *lfn++;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	1c9a      	adds	r2, r3, #2
 8008584:	607a      	str	r2, [r7, #4]
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800858a:	2300      	movs	r3, #0
 800858c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800858e:	e017      	b.n	80085c0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	005a      	lsls	r2, r3, #1
 8008594:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	4413      	add	r3, r2
 800859c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800859e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80085a0:	085b      	lsrs	r3, r3, #1
 80085a2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d005      	beq.n	80085ba <gen_numname+0x5e>
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80085b4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80085b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80085ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085bc:	3301      	adds	r3, #1
 80085be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c2:	2b0f      	cmp	r3, #15
 80085c4:	d9e4      	bls.n	8008590 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1d8      	bne.n	8008580 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80085d2:	2307      	movs	r3, #7
 80085d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	3330      	adds	r3, #48	@ 0x30
 80085e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80085e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085ea:	2b39      	cmp	r3, #57	@ 0x39
 80085ec:	d904      	bls.n	80085f8 <gen_numname+0x9c>
 80085ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085f2:	3307      	adds	r3, #7
 80085f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80085f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fa:	1e5a      	subs	r2, r3, #1
 80085fc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80085fe:	3330      	adds	r3, #48	@ 0x30
 8008600:	443b      	add	r3, r7
 8008602:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008606:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	091b      	lsrs	r3, r3, #4
 800860e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1df      	bne.n	80085d6 <gen_numname+0x7a>
	ns[i] = '~';
 8008616:	f107 0214 	add.w	r2, r7, #20
 800861a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861c:	4413      	add	r3, r2
 800861e:	227e      	movs	r2, #126	@ 0x7e
 8008620:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008622:	2300      	movs	r3, #0
 8008624:	627b      	str	r3, [r7, #36]	@ 0x24
 8008626:	e002      	b.n	800862e <gen_numname+0xd2>
 8008628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862a:	3301      	adds	r3, #1
 800862c:	627b      	str	r3, [r7, #36]	@ 0x24
 800862e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008632:	429a      	cmp	r2, r3
 8008634:	d205      	bcs.n	8008642 <gen_numname+0xe6>
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863a:	4413      	add	r3, r2
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	2b20      	cmp	r3, #32
 8008640:	d1f2      	bne.n	8008628 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008644:	2b07      	cmp	r3, #7
 8008646:	d807      	bhi.n	8008658 <gen_numname+0xfc>
 8008648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800864e:	3330      	adds	r3, #48	@ 0x30
 8008650:	443b      	add	r3, r7
 8008652:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008656:	e000      	b.n	800865a <gen_numname+0xfe>
 8008658:	2120      	movs	r1, #32
 800865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865c:	1c5a      	adds	r2, r3, #1
 800865e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4413      	add	r3, r2
 8008664:	460a      	mov	r2, r1
 8008666:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	2b07      	cmp	r3, #7
 800866c:	d9e9      	bls.n	8008642 <gen_numname+0xe6>
}
 800866e:	bf00      	nop
 8008670:	bf00      	nop
 8008672:	3730      	adds	r7, #48	@ 0x30
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008684:	230b      	movs	r3, #11
 8008686:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	b2da      	uxtb	r2, r3
 800868c:	0852      	lsrs	r2, r2, #1
 800868e:	01db      	lsls	r3, r3, #7
 8008690:	4313      	orrs	r3, r2
 8008692:	b2da      	uxtb	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	1c59      	adds	r1, r3, #1
 8008698:	6079      	str	r1, [r7, #4]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	4413      	add	r3, r2
 800869e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	60bb      	str	r3, [r7, #8]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1ed      	bne.n	8008688 <sum_sfn+0x10>
	return sum;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b086      	sub	sp, #24
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80086c8:	2100      	movs	r1, #0
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7ff fc89 	bl	8007fe2 <dir_sdi>
 80086d0:	4603      	mov	r3, r0
 80086d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <dir_find+0x24>
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	e0a9      	b.n	8008832 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80086de:	23ff      	movs	r3, #255	@ 0xff
 80086e0:	753b      	strb	r3, [r7, #20]
 80086e2:	7d3b      	ldrb	r3, [r7, #20]
 80086e4:	757b      	strb	r3, [r7, #21]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f04f 32ff 	mov.w	r2, #4294967295
 80086ec:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	4619      	mov	r1, r3
 80086f4:	6938      	ldr	r0, [r7, #16]
 80086f6:	f7ff f895 	bl	8007824 <move_window>
 80086fa:	4603      	mov	r3, r0
 80086fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f040 8090 	bne.w	8008826 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800870e:	7dbb      	ldrb	r3, [r7, #22]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d102      	bne.n	800871a <dir_find+0x60>
 8008714:	2304      	movs	r3, #4
 8008716:	75fb      	strb	r3, [r7, #23]
 8008718:	e08a      	b.n	8008830 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	330b      	adds	r3, #11
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008726:	73fb      	strb	r3, [r7, #15]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	7bfa      	ldrb	r2, [r7, #15]
 800872c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800872e:	7dbb      	ldrb	r3, [r7, #22]
 8008730:	2be5      	cmp	r3, #229	@ 0xe5
 8008732:	d007      	beq.n	8008744 <dir_find+0x8a>
 8008734:	7bfb      	ldrb	r3, [r7, #15]
 8008736:	f003 0308 	and.w	r3, r3, #8
 800873a:	2b00      	cmp	r3, #0
 800873c:	d009      	beq.n	8008752 <dir_find+0x98>
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	2b0f      	cmp	r3, #15
 8008742:	d006      	beq.n	8008752 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008744:	23ff      	movs	r3, #255	@ 0xff
 8008746:	757b      	strb	r3, [r7, #21]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f04f 32ff 	mov.w	r2, #4294967295
 800874e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008750:	e05e      	b.n	8008810 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	2b0f      	cmp	r3, #15
 8008756:	d136      	bne.n	80087c6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800875e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008762:	2b00      	cmp	r3, #0
 8008764:	d154      	bne.n	8008810 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008766:	7dbb      	ldrb	r3, [r7, #22]
 8008768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00d      	beq.n	800878c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	7b5b      	ldrb	r3, [r3, #13]
 8008776:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008778:	7dbb      	ldrb	r3, [r7, #22]
 800877a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800877e:	75bb      	strb	r3, [r7, #22]
 8008780:	7dbb      	ldrb	r3, [r7, #22]
 8008782:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	695a      	ldr	r2, [r3, #20]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800878c:	7dba      	ldrb	r2, [r7, #22]
 800878e:	7d7b      	ldrb	r3, [r7, #21]
 8008790:	429a      	cmp	r2, r3
 8008792:	d115      	bne.n	80087c0 <dir_find+0x106>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	330d      	adds	r3, #13
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	7d3a      	ldrb	r2, [r7, #20]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d10e      	bne.n	80087c0 <dir_find+0x106>
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	691a      	ldr	r2, [r3, #16]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	4619      	mov	r1, r3
 80087ac:	4610      	mov	r0, r2
 80087ae:	f7ff fdfd 	bl	80083ac <cmp_lfn>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d003      	beq.n	80087c0 <dir_find+0x106>
 80087b8:	7d7b      	ldrb	r3, [r7, #21]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	e000      	b.n	80087c2 <dir_find+0x108>
 80087c0:	23ff      	movs	r3, #255	@ 0xff
 80087c2:	757b      	strb	r3, [r7, #21]
 80087c4:	e024      	b.n	8008810 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80087c6:	7d7b      	ldrb	r3, [r7, #21]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d109      	bne.n	80087e0 <dir_find+0x126>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7ff ff51 	bl	8008678 <sum_sfn>
 80087d6:	4603      	mov	r3, r0
 80087d8:	461a      	mov	r2, r3
 80087da:	7d3b      	ldrb	r3, [r7, #20]
 80087dc:	4293      	cmp	r3, r2
 80087de:	d024      	beq.n	800882a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10a      	bne.n	8008804 <dir_find+0x14a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a18      	ldr	r0, [r3, #32]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3324      	adds	r3, #36	@ 0x24
 80087f6:	220b      	movs	r2, #11
 80087f8:	4619      	mov	r1, r3
 80087fa:	f7fe fe21 	bl	8007440 <mem_cmp>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d014      	beq.n	800882e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008804:	23ff      	movs	r3, #255	@ 0xff
 8008806:	757b      	strb	r3, [r7, #21]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f04f 32ff 	mov.w	r2, #4294967295
 800880e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008810:	2100      	movs	r1, #0
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff fc6e 	bl	80080f4 <dir_next>
 8008818:	4603      	mov	r3, r0
 800881a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	2b00      	cmp	r3, #0
 8008820:	f43f af65 	beq.w	80086ee <dir_find+0x34>
 8008824:	e004      	b.n	8008830 <dir_find+0x176>
		if (res != FR_OK) break;
 8008826:	bf00      	nop
 8008828:	e002      	b.n	8008830 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800882a:	bf00      	nop
 800882c:	e000      	b.n	8008830 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800882e:	bf00      	nop

	return res;
 8008830:	7dfb      	ldrb	r3, [r7, #23]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
	...

0800883c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08c      	sub	sp, #48	@ 0x30
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008850:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <dir_register+0x20>
 8008858:	2306      	movs	r3, #6
 800885a:	e0e0      	b.n	8008a1e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800885c:	2300      	movs	r3, #0
 800885e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008860:	e002      	b.n	8008868 <dir_register+0x2c>
 8008862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008864:	3301      	adds	r3, #1
 8008866:	627b      	str	r3, [r7, #36]	@ 0x24
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	691a      	ldr	r2, [r3, #16]
 800886c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886e:	005b      	lsls	r3, r3, #1
 8008870:	4413      	add	r3, r2
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1f4      	bne.n	8008862 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800887e:	f107 030c 	add.w	r3, r7, #12
 8008882:	220c      	movs	r2, #12
 8008884:	4618      	mov	r0, r3
 8008886:	f7fe fd9f 	bl	80073c8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800888a:	7dfb      	ldrb	r3, [r7, #23]
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b00      	cmp	r3, #0
 8008892:	d032      	beq.n	80088fa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2240      	movs	r2, #64	@ 0x40
 8008898:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800889c:	2301      	movs	r3, #1
 800889e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088a0:	e016      	b.n	80088d0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	691a      	ldr	r2, [r3, #16]
 80088ac:	f107 010c 	add.w	r1, r7, #12
 80088b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b2:	f7ff fe53 	bl	800855c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff feff 	bl	80086ba <dir_find>
 80088bc:	4603      	mov	r3, r0
 80088be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80088c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d106      	bne.n	80088d8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80088ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088cc:	3301      	adds	r3, #1
 80088ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d2:	2b63      	cmp	r3, #99	@ 0x63
 80088d4:	d9e5      	bls.n	80088a2 <dir_register+0x66>
 80088d6:	e000      	b.n	80088da <dir_register+0x9e>
			if (res != FR_OK) break;
 80088d8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80088da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088dc:	2b64      	cmp	r3, #100	@ 0x64
 80088de:	d101      	bne.n	80088e4 <dir_register+0xa8>
 80088e0:	2307      	movs	r3, #7
 80088e2:	e09c      	b.n	8008a1e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80088e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088e8:	2b04      	cmp	r3, #4
 80088ea:	d002      	beq.n	80088f2 <dir_register+0xb6>
 80088ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088f0:	e095      	b.n	8008a1e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80088f2:	7dfa      	ldrb	r2, [r7, #23]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d007      	beq.n	8008914 <dir_register+0xd8>
 8008904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008906:	330c      	adds	r3, #12
 8008908:	4a47      	ldr	r2, [pc, #284]	@ (8008a28 <dir_register+0x1ec>)
 800890a:	fba2 2303 	umull	r2, r3, r2, r3
 800890e:	089b      	lsrs	r3, r3, #2
 8008910:	3301      	adds	r3, #1
 8008912:	e000      	b.n	8008916 <dir_register+0xda>
 8008914:	2301      	movs	r3, #1
 8008916:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008918:	6a39      	ldr	r1, [r7, #32]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff fcc0 	bl	80082a0 <dir_alloc>
 8008920:	4603      	mov	r3, r0
 8008922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008926:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800892a:	2b00      	cmp	r3, #0
 800892c:	d148      	bne.n	80089c0 <dir_register+0x184>
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	3b01      	subs	r3, #1
 8008932:	623b      	str	r3, [r7, #32]
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d042      	beq.n	80089c0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695a      	ldr	r2, [r3, #20]
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	015b      	lsls	r3, r3, #5
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7ff fb4b 	bl	8007fe2 <dir_sdi>
 800894c:	4603      	mov	r3, r0
 800894e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008956:	2b00      	cmp	r3, #0
 8008958:	d132      	bne.n	80089c0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3324      	adds	r3, #36	@ 0x24
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff fe8a 	bl	8008678 <sum_sfn>
 8008964:	4603      	mov	r3, r0
 8008966:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	4619      	mov	r1, r3
 800896e:	69f8      	ldr	r0, [r7, #28]
 8008970:	f7fe ff58 	bl	8007824 <move_window>
 8008974:	4603      	mov	r3, r0
 8008976:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800897a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800897e:	2b00      	cmp	r3, #0
 8008980:	d11d      	bne.n	80089be <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	6918      	ldr	r0, [r3, #16]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a19      	ldr	r1, [r3, #32]
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	b2da      	uxtb	r2, r3
 800898e:	7efb      	ldrb	r3, [r7, #27]
 8008990:	f7ff fd7c 	bl	800848c <put_lfn>
				fs->wflag = 1;
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	2201      	movs	r2, #1
 8008998:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800899a:	2100      	movs	r1, #0
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff fba9 	bl	80080f4 <dir_next>
 80089a2:	4603      	mov	r3, r0
 80089a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80089a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d107      	bne.n	80089c0 <dir_register+0x184>
 80089b0:	6a3b      	ldr	r3, [r7, #32]
 80089b2:	3b01      	subs	r3, #1
 80089b4:	623b      	str	r3, [r7, #32]
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1d5      	bne.n	8008968 <dir_register+0x12c>
 80089bc:	e000      	b.n	80089c0 <dir_register+0x184>
				if (res != FR_OK) break;
 80089be:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80089c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d128      	bne.n	8008a1a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	4619      	mov	r1, r3
 80089ce:	69f8      	ldr	r0, [r7, #28]
 80089d0:	f7fe ff28 	bl	8007824 <move_window>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80089da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d11b      	bne.n	8008a1a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	2220      	movs	r2, #32
 80089e8:	2100      	movs	r1, #0
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fd0d 	bl	800740a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a18      	ldr	r0, [r3, #32]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	3324      	adds	r3, #36	@ 0x24
 80089f8:	220b      	movs	r2, #11
 80089fa:	4619      	mov	r1, r3
 80089fc:	f7fe fce4 	bl	80073c8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	330c      	adds	r3, #12
 8008a0c:	f002 0218 	and.w	r2, r2, #24
 8008a10:	b2d2      	uxtb	r2, r2
 8008a12:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	2201      	movs	r2, #1
 8008a18:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3730      	adds	r7, #48	@ 0x30
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	4ec4ec4f 	.word	0x4ec4ec4f

08008a2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08a      	sub	sp, #40	@ 0x28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	613b      	str	r3, [r7, #16]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	2300      	movs	r3, #0
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	1c5a      	adds	r2, r3, #1
 8008a50:	61ba      	str	r2, [r7, #24]
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	4413      	add	r3, r2
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008a5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a5c:	2b1f      	cmp	r3, #31
 8008a5e:	d940      	bls.n	8008ae2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008a60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a62:	2b2f      	cmp	r3, #47	@ 0x2f
 8008a64:	d006      	beq.n	8008a74 <create_name+0x48>
 8008a66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a68:	2b5c      	cmp	r3, #92	@ 0x5c
 8008a6a:	d110      	bne.n	8008a8e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008a6c:	e002      	b.n	8008a74 <create_name+0x48>
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	3301      	adds	r3, #1
 8008a72:	61bb      	str	r3, [r7, #24]
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	4413      	add	r3, r2
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b2f      	cmp	r3, #47	@ 0x2f
 8008a7e:	d0f6      	beq.n	8008a6e <create_name+0x42>
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	4413      	add	r3, r2
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	2b5c      	cmp	r3, #92	@ 0x5c
 8008a8a:	d0f0      	beq.n	8008a6e <create_name+0x42>
			break;
 8008a8c:	e02a      	b.n	8008ae4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2bfe      	cmp	r3, #254	@ 0xfe
 8008a92:	d901      	bls.n	8008a98 <create_name+0x6c>
 8008a94:	2306      	movs	r3, #6
 8008a96:	e17d      	b.n	8008d94 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008a98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008a9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f001 fcac 	bl	800a400 <ff_convert>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008aac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <create_name+0x8a>
 8008ab2:	2306      	movs	r3, #6
 8008ab4:	e16e      	b.n	8008d94 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008ab6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ab8:	2b7f      	cmp	r3, #127	@ 0x7f
 8008aba:	d809      	bhi.n	8008ad0 <create_name+0xa4>
 8008abc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008abe:	4619      	mov	r1, r3
 8008ac0:	488d      	ldr	r0, [pc, #564]	@ (8008cf8 <create_name+0x2cc>)
 8008ac2:	f7fe fce4 	bl	800748e <chk_chr>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <create_name+0xa4>
 8008acc:	2306      	movs	r3, #6
 8008ace:	e161      	b.n	8008d94 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	617a      	str	r2, [r7, #20]
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	4413      	add	r3, r2
 8008adc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008ade:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008ae0:	e7b4      	b.n	8008a4c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008ae2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	441a      	add	r2, r3
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008aee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008af0:	2b1f      	cmp	r3, #31
 8008af2:	d801      	bhi.n	8008af8 <create_name+0xcc>
 8008af4:	2304      	movs	r3, #4
 8008af6:	e000      	b.n	8008afa <create_name+0xce>
 8008af8:	2300      	movs	r3, #0
 8008afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008afe:	e011      	b.n	8008b24 <create_name+0xf8>
		w = lfn[di - 1];
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008b06:	3b01      	subs	r3, #1
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008b12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b14:	2b20      	cmp	r3, #32
 8008b16:	d002      	beq.n	8008b1e <create_name+0xf2>
 8008b18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b1c:	d106      	bne.n	8008b2c <create_name+0x100>
		di--;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	3b01      	subs	r3, #1
 8008b22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1ea      	bne.n	8008b00 <create_name+0xd4>
 8008b2a:	e000      	b.n	8008b2e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008b2c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	005b      	lsls	r3, r3, #1
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	2200      	movs	r2, #0
 8008b38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <create_name+0x118>
 8008b40:	2306      	movs	r3, #6
 8008b42:	e127      	b.n	8008d94 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3324      	adds	r3, #36	@ 0x24
 8008b48:	220b      	movs	r2, #11
 8008b4a:	2120      	movs	r1, #32
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fe fc5c 	bl	800740a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008b52:	2300      	movs	r3, #0
 8008b54:	61bb      	str	r3, [r7, #24]
 8008b56:	e002      	b.n	8008b5e <create_name+0x132>
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	61bb      	str	r3, [r7, #24]
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	005b      	lsls	r3, r3, #1
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	4413      	add	r3, r2
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	d0f5      	beq.n	8008b58 <create_name+0x12c>
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	005b      	lsls	r3, r3, #1
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	4413      	add	r3, r2
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b78:	d0ee      	beq.n	8008b58 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d009      	beq.n	8008b94 <create_name+0x168>
 8008b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b84:	f043 0303 	orr.w	r3, r3, #3
 8008b88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008b8c:	e002      	b.n	8008b94 <create_name+0x168>
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d009      	beq.n	8008bae <create_name+0x182>
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bac:	d1ef      	bne.n	8008b8e <create_name+0x162>

	i = b = 0; ni = 8;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	623b      	str	r3, [r7, #32]
 8008bb8:	2308      	movs	r3, #8
 8008bba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	61ba      	str	r2, [r7, #24]
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008bcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 8090 	beq.w	8008cf4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008bd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	d006      	beq.n	8008be8 <create_name+0x1bc>
 8008bda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bde:	d10a      	bne.n	8008bf6 <create_name+0x1ca>
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d006      	beq.n	8008bf6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008be8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bec:	f043 0303 	orr.w	r3, r3, #3
 8008bf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008bf4:	e07d      	b.n	8008cf2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008bf6:	6a3a      	ldr	r2, [r7, #32]
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d203      	bcs.n	8008c06 <create_name+0x1da>
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d123      	bne.n	8008c4e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	2b0b      	cmp	r3, #11
 8008c0a:	d106      	bne.n	8008c1a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c10:	f043 0303 	orr.w	r3, r3, #3
 8008c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c18:	e075      	b.n	8008d06 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d005      	beq.n	8008c2e <create_name+0x202>
 8008c22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c26:	f043 0303 	orr.w	r3, r3, #3
 8008c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d866      	bhi.n	8008d04 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	61bb      	str	r3, [r7, #24]
 8008c3a:	2308      	movs	r3, #8
 8008c3c:	623b      	str	r3, [r7, #32]
 8008c3e:	230b      	movs	r3, #11
 8008c40:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008c42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c4c:	e051      	b.n	8008cf2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008c4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c50:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c52:	d914      	bls.n	8008c7e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008c54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c56:	2100      	movs	r1, #0
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f001 fbd1 	bl	800a400 <ff_convert>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008c62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d004      	beq.n	8008c72 <create_name+0x246>
 8008c68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c6a:	3b80      	subs	r3, #128	@ 0x80
 8008c6c:	4a23      	ldr	r2, [pc, #140]	@ (8008cfc <create_name+0x2d0>)
 8008c6e:	5cd3      	ldrb	r3, [r2, r3]
 8008c70:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008c72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c76:	f043 0302 	orr.w	r3, r3, #2
 8008c7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008c7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d007      	beq.n	8008c94 <create_name+0x268>
 8008c84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c86:	4619      	mov	r1, r3
 8008c88:	481d      	ldr	r0, [pc, #116]	@ (8008d00 <create_name+0x2d4>)
 8008c8a:	f7fe fc00 	bl	800748e <chk_chr>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d008      	beq.n	8008ca6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008c94:	235f      	movs	r3, #95	@ 0x5f
 8008c96:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008c98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c9c:	f043 0303 	orr.w	r3, r3, #3
 8008ca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008ca4:	e01b      	b.n	8008cde <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ca8:	2b40      	cmp	r3, #64	@ 0x40
 8008caa:	d909      	bls.n	8008cc0 <create_name+0x294>
 8008cac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cae:	2b5a      	cmp	r3, #90	@ 0x5a
 8008cb0:	d806      	bhi.n	8008cc0 <create_name+0x294>
					b |= 2;
 8008cb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cb6:	f043 0302 	orr.w	r3, r3, #2
 8008cba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008cbe:	e00e      	b.n	8008cde <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008cc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cc2:	2b60      	cmp	r3, #96	@ 0x60
 8008cc4:	d90b      	bls.n	8008cde <create_name+0x2b2>
 8008cc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cc8:	2b7a      	cmp	r3, #122	@ 0x7a
 8008cca:	d808      	bhi.n	8008cde <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cd0:	f043 0301 	orr.w	r3, r3, #1
 8008cd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008cd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cda:	3b20      	subs	r3, #32
 8008cdc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008cde:	6a3b      	ldr	r3, [r7, #32]
 8008ce0:	1c5a      	adds	r2, r3, #1
 8008ce2:	623a      	str	r2, [r7, #32]
 8008ce4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008ce6:	b2d1      	uxtb	r1, r2
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	4413      	add	r3, r2
 8008cec:	460a      	mov	r2, r1
 8008cee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008cf2:	e763      	b.n	8008bbc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008cf4:	bf00      	nop
 8008cf6:	e006      	b.n	8008d06 <create_name+0x2da>
 8008cf8:	08014694 	.word	0x08014694
 8008cfc:	080148a0 	.word	0x080148a0
 8008d00:	080146a0 	.word	0x080146a0
			if (si > di) break;			/* No extension */
 8008d04:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008d0c:	2be5      	cmp	r3, #229	@ 0xe5
 8008d0e:	d103      	bne.n	8008d18 <create_name+0x2ec>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2205      	movs	r2, #5
 8008d14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	2b08      	cmp	r3, #8
 8008d1c:	d104      	bne.n	8008d28 <create_name+0x2fc>
 8008d1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008d28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d2c:	f003 030c 	and.w	r3, r3, #12
 8008d30:	2b0c      	cmp	r3, #12
 8008d32:	d005      	beq.n	8008d40 <create_name+0x314>
 8008d34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d38:	f003 0303 	and.w	r3, r3, #3
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d105      	bne.n	8008d4c <create_name+0x320>
 8008d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d44:	f043 0302 	orr.w	r3, r3, #2
 8008d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d50:	f003 0302 	and.w	r3, r3, #2
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d117      	bne.n	8008d88 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008d58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d105      	bne.n	8008d70 <create_name+0x344>
 8008d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d68:	f043 0310 	orr.w	r3, r3, #16
 8008d6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008d70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d74:	f003 030c 	and.w	r3, r3, #12
 8008d78:	2b04      	cmp	r3, #4
 8008d7a:	d105      	bne.n	8008d88 <create_name+0x35c>
 8008d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d80:	f043 0308 	orr.w	r3, r3, #8
 8008d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008d8e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008d92:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3728      	adds	r7, #40	@ 0x28
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008db0:	e002      	b.n	8008db8 <follow_path+0x1c>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	3301      	adds	r3, #1
 8008db6:	603b      	str	r3, [r7, #0]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	2b2f      	cmp	r3, #47	@ 0x2f
 8008dbe:	d0f8      	beq.n	8008db2 <follow_path+0x16>
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b5c      	cmp	r3, #92	@ 0x5c
 8008dc6:	d0f4      	beq.n	8008db2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	2b1f      	cmp	r3, #31
 8008dd4:	d80a      	bhi.n	8008dec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2280      	movs	r2, #128	@ 0x80
 8008dda:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008dde:	2100      	movs	r1, #0
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7ff f8fe 	bl	8007fe2 <dir_sdi>
 8008de6:	4603      	mov	r3, r0
 8008de8:	75fb      	strb	r3, [r7, #23]
 8008dea:	e048      	b.n	8008e7e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008dec:	463b      	mov	r3, r7
 8008dee:	4619      	mov	r1, r3
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7ff fe1b 	bl	8008a2c <create_name>
 8008df6:	4603      	mov	r3, r0
 8008df8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d139      	bne.n	8008e74 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7ff fc5a 	bl	80086ba <dir_find>
 8008e06:	4603      	mov	r3, r0
 8008e08:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008e10:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008e12:	7dfb      	ldrb	r3, [r7, #23]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00a      	beq.n	8008e2e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	2b04      	cmp	r3, #4
 8008e1c:	d12c      	bne.n	8008e78 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008e1e:	7afb      	ldrb	r3, [r7, #11]
 8008e20:	f003 0304 	and.w	r3, r3, #4
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d127      	bne.n	8008e78 <follow_path+0xdc>
 8008e28:	2305      	movs	r3, #5
 8008e2a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008e2c:	e024      	b.n	8008e78 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e2e:	7afb      	ldrb	r3, [r7, #11]
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d121      	bne.n	8008e7c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	799b      	ldrb	r3, [r3, #6]
 8008e3c:	f003 0310 	and.w	r3, r3, #16
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d102      	bne.n	8008e4a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008e44:	2305      	movs	r3, #5
 8008e46:	75fb      	strb	r3, [r7, #23]
 8008e48:	e019      	b.n	8008e7e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	8992      	ldrh	r2, [r2, #12]
 8008e58:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e5c:	fb00 f202 	mul.w	r2, r0, r2
 8008e60:	1a9b      	subs	r3, r3, r2
 8008e62:	440b      	add	r3, r1
 8008e64:	4619      	mov	r1, r3
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f7ff fa61 	bl	800832e <ld_clust>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e72:	e7bb      	b.n	8008dec <follow_path+0x50>
			if (res != FR_OK) break;
 8008e74:	bf00      	nop
 8008e76:	e002      	b.n	8008e7e <follow_path+0xe2>
				break;
 8008e78:	bf00      	nop
 8008e7a:	e000      	b.n	8008e7e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e7c:	bf00      	nop
			}
		}
	}

	return res;
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b087      	sub	sp, #28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008e90:	f04f 33ff 	mov.w	r3, #4294967295
 8008e94:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d031      	beq.n	8008f02 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	617b      	str	r3, [r7, #20]
 8008ea4:	e002      	b.n	8008eac <get_ldnumber+0x24>
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	617b      	str	r3, [r7, #20]
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b1f      	cmp	r3, #31
 8008eb2:	d903      	bls.n	8008ebc <get_ldnumber+0x34>
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b3a      	cmp	r3, #58	@ 0x3a
 8008eba:	d1f4      	bne.n	8008ea6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	2b3a      	cmp	r3, #58	@ 0x3a
 8008ec2:	d11c      	bne.n	8008efe <get_ldnumber+0x76>
			tp = *path;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	60fa      	str	r2, [r7, #12]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	3b30      	subs	r3, #48	@ 0x30
 8008ed4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b09      	cmp	r3, #9
 8008eda:	d80e      	bhi.n	8008efa <get_ldnumber+0x72>
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d10a      	bne.n	8008efa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d107      	bne.n	8008efa <get_ldnumber+0x72>
					vol = (int)i;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	617b      	str	r3, [r7, #20]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	e002      	b.n	8008f04 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008efe:	2300      	movs	r3, #0
 8008f00:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008f02:	693b      	ldr	r3, [r7, #16]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	371c      	adds	r7, #28
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	70da      	strb	r2, [r3, #3]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f04f 32ff 	mov.w	r2, #4294967295
 8008f26:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7fe fc7a 	bl	8007824 <move_window>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <check_fs+0x2a>
 8008f36:	2304      	movs	r3, #4
 8008f38:	e038      	b.n	8008fac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3338      	adds	r3, #56	@ 0x38
 8008f3e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe f9be 	bl	80072c4 <ld_word>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d001      	beq.n	8008f58 <check_fs+0x48>
 8008f54:	2303      	movs	r3, #3
 8008f56:	e029      	b.n	8008fac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008f5e:	2be9      	cmp	r3, #233	@ 0xe9
 8008f60:	d009      	beq.n	8008f76 <check_fs+0x66>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008f68:	2beb      	cmp	r3, #235	@ 0xeb
 8008f6a:	d11e      	bne.n	8008faa <check_fs+0x9a>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008f72:	2b90      	cmp	r3, #144	@ 0x90
 8008f74:	d119      	bne.n	8008faa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3338      	adds	r3, #56	@ 0x38
 8008f7a:	3336      	adds	r3, #54	@ 0x36
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fe f9b9 	bl	80072f4 <ld_dword>
 8008f82:	4603      	mov	r3, r0
 8008f84:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008f88:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb4 <check_fs+0xa4>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d101      	bne.n	8008f92 <check_fs+0x82>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e00c      	b.n	8008fac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3338      	adds	r3, #56	@ 0x38
 8008f96:	3352      	adds	r3, #82	@ 0x52
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fe f9ab 	bl	80072f4 <ld_dword>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	4a05      	ldr	r2, [pc, #20]	@ (8008fb8 <check_fs+0xa8>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d101      	bne.n	8008faa <check_fs+0x9a>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	e000      	b.n	8008fac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008faa:	2302      	movs	r3, #2
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	00544146 	.word	0x00544146
 8008fb8:	33544146 	.word	0x33544146

08008fbc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b096      	sub	sp, #88	@ 0x58
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f7ff ff59 	bl	8008e88 <get_ldnumber>
 8008fd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	da01      	bge.n	8008fe2 <find_volume+0x26>
 8008fde:	230b      	movs	r3, #11
 8008fe0:	e265      	b.n	80094ae <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008fe2:	4a9f      	ldr	r2, [pc, #636]	@ (8009260 <find_volume+0x2a4>)
 8008fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fea:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <find_volume+0x3a>
 8008ff2:	230c      	movs	r3, #12
 8008ff4:	e25b      	b.n	80094ae <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ffa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	f023 0301 	bic.w	r3, r3, #1
 8009002:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01a      	beq.n	8009042 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800900c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900e:	785b      	ldrb	r3, [r3, #1]
 8009010:	4618      	mov	r0, r3
 8009012:	f7fe f8b7 	bl	8007184 <disk_status>
 8009016:	4603      	mov	r3, r0
 8009018:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800901c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10c      	bne.n	8009042 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009028:	79fb      	ldrb	r3, [r7, #7]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d007      	beq.n	800903e <find_volume+0x82>
 800902e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009032:	f003 0304 	and.w	r3, r3, #4
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800903a:	230a      	movs	r3, #10
 800903c:	e237      	b.n	80094ae <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800903e:	2300      	movs	r3, #0
 8009040:	e235      	b.n	80094ae <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009044:	2200      	movs	r2, #0
 8009046:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800904a:	b2da      	uxtb	r2, r3
 800904c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009052:	785b      	ldrb	r3, [r3, #1]
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe f8af 	bl	80071b8 <disk_initialize>
 800905a:	4603      	mov	r3, r0
 800905c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009060:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009064:	f003 0301 	and.w	r3, r3, #1
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800906c:	2303      	movs	r3, #3
 800906e:	e21e      	b.n	80094ae <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d007      	beq.n	8009086 <find_volume+0xca>
 8009076:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800907a:	f003 0304 	and.w	r3, r3, #4
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009082:	230a      	movs	r3, #10
 8009084:	e213      	b.n	80094ae <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009088:	7858      	ldrb	r0, [r3, #1]
 800908a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908c:	330c      	adds	r3, #12
 800908e:	461a      	mov	r2, r3
 8009090:	2102      	movs	r1, #2
 8009092:	f7fe f8f9 	bl	8007288 <disk_ioctl>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <find_volume+0xe4>
 800909c:	2301      	movs	r3, #1
 800909e:	e206      	b.n	80094ae <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80090a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a2:	899b      	ldrh	r3, [r3, #12]
 80090a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090a8:	d80d      	bhi.n	80090c6 <find_volume+0x10a>
 80090aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ac:	899b      	ldrh	r3, [r3, #12]
 80090ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090b2:	d308      	bcc.n	80090c6 <find_volume+0x10a>
 80090b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b6:	899b      	ldrh	r3, [r3, #12]
 80090b8:	461a      	mov	r2, r3
 80090ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090bc:	899b      	ldrh	r3, [r3, #12]
 80090be:	3b01      	subs	r3, #1
 80090c0:	4013      	ands	r3, r2
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <find_volume+0x10e>
 80090c6:	2301      	movs	r3, #1
 80090c8:	e1f1      	b.n	80094ae <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80090ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80090d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80090d2:	f7ff ff1d 	bl	8008f10 <check_fs>
 80090d6:	4603      	mov	r3, r0
 80090d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80090dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d149      	bne.n	8009178 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80090e4:	2300      	movs	r3, #0
 80090e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80090e8:	e01e      	b.n	8009128 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80090ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ec:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80090f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090f2:	011b      	lsls	r3, r3, #4
 80090f4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80090f8:	4413      	add	r3, r2
 80090fa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80090fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fe:	3304      	adds	r3, #4
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d006      	beq.n	8009114 <find_volume+0x158>
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	3308      	adds	r3, #8
 800910a:	4618      	mov	r0, r3
 800910c:	f7fe f8f2 	bl	80072f4 <ld_dword>
 8009110:	4602      	mov	r2, r0
 8009112:	e000      	b.n	8009116 <find_volume+0x15a>
 8009114:	2200      	movs	r2, #0
 8009116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	3358      	adds	r3, #88	@ 0x58
 800911c:	443b      	add	r3, r7
 800911e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009124:	3301      	adds	r3, #1
 8009126:	643b      	str	r3, [r7, #64]	@ 0x40
 8009128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800912a:	2b03      	cmp	r3, #3
 800912c:	d9dd      	bls.n	80090ea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800912e:	2300      	movs	r3, #0
 8009130:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <find_volume+0x182>
 8009138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800913a:	3b01      	subs	r3, #1
 800913c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800913e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	3358      	adds	r3, #88	@ 0x58
 8009144:	443b      	add	r3, r7
 8009146:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800914a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800914c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800914e:	2b00      	cmp	r3, #0
 8009150:	d005      	beq.n	800915e <find_volume+0x1a2>
 8009152:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009154:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009156:	f7ff fedb 	bl	8008f10 <check_fs>
 800915a:	4603      	mov	r3, r0
 800915c:	e000      	b.n	8009160 <find_volume+0x1a4>
 800915e:	2303      	movs	r3, #3
 8009160:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009164:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009168:	2b01      	cmp	r3, #1
 800916a:	d905      	bls.n	8009178 <find_volume+0x1bc>
 800916c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800916e:	3301      	adds	r3, #1
 8009170:	643b      	str	r3, [r7, #64]	@ 0x40
 8009172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009174:	2b03      	cmp	r3, #3
 8009176:	d9e2      	bls.n	800913e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009178:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800917c:	2b04      	cmp	r3, #4
 800917e:	d101      	bne.n	8009184 <find_volume+0x1c8>
 8009180:	2301      	movs	r3, #1
 8009182:	e194      	b.n	80094ae <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009184:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009188:	2b01      	cmp	r3, #1
 800918a:	d901      	bls.n	8009190 <find_volume+0x1d4>
 800918c:	230d      	movs	r3, #13
 800918e:	e18e      	b.n	80094ae <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009192:	3338      	adds	r3, #56	@ 0x38
 8009194:	330b      	adds	r3, #11
 8009196:	4618      	mov	r0, r3
 8009198:	f7fe f894 	bl	80072c4 <ld_word>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a2:	899b      	ldrh	r3, [r3, #12]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d001      	beq.n	80091ac <find_volume+0x1f0>
 80091a8:	230d      	movs	r3, #13
 80091aa:	e180      	b.n	80094ae <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80091ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ae:	3338      	adds	r3, #56	@ 0x38
 80091b0:	3316      	adds	r3, #22
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe f886 	bl	80072c4 <ld_word>
 80091b8:	4603      	mov	r3, r0
 80091ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80091bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d106      	bne.n	80091d0 <find_volume+0x214>
 80091c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c4:	3338      	adds	r3, #56	@ 0x38
 80091c6:	3324      	adds	r3, #36	@ 0x24
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fe f893 	bl	80072f4 <ld_dword>
 80091ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80091d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091d4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80091d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80091dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	789b      	ldrb	r3, [r3, #2]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d005      	beq.n	80091f4 <find_volume+0x238>
 80091e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ea:	789b      	ldrb	r3, [r3, #2]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d001      	beq.n	80091f4 <find_volume+0x238>
 80091f0:	230d      	movs	r3, #13
 80091f2:	e15c      	b.n	80094ae <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80091f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f6:	789b      	ldrb	r3, [r3, #2]
 80091f8:	461a      	mov	r2, r3
 80091fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091fc:	fb02 f303 	mul.w	r3, r2, r3
 8009200:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009204:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009208:	461a      	mov	r2, r3
 800920a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800920e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009210:	895b      	ldrh	r3, [r3, #10]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d008      	beq.n	8009228 <find_volume+0x26c>
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	895b      	ldrh	r3, [r3, #10]
 800921a:	461a      	mov	r2, r3
 800921c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921e:	895b      	ldrh	r3, [r3, #10]
 8009220:	3b01      	subs	r3, #1
 8009222:	4013      	ands	r3, r2
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <find_volume+0x270>
 8009228:	230d      	movs	r3, #13
 800922a:	e140      	b.n	80094ae <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800922c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922e:	3338      	adds	r3, #56	@ 0x38
 8009230:	3311      	adds	r3, #17
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe f846 	bl	80072c4 <ld_word>
 8009238:	4603      	mov	r3, r0
 800923a:	461a      	mov	r2, r3
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009242:	891b      	ldrh	r3, [r3, #8]
 8009244:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009246:	8992      	ldrh	r2, [r2, #12]
 8009248:	0952      	lsrs	r2, r2, #5
 800924a:	b292      	uxth	r2, r2
 800924c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009250:	fb01 f202 	mul.w	r2, r1, r2
 8009254:	1a9b      	subs	r3, r3, r2
 8009256:	b29b      	uxth	r3, r3
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <find_volume+0x2a8>
 800925c:	230d      	movs	r3, #13
 800925e:	e126      	b.n	80094ae <find_volume+0x4f2>
 8009260:	20002538 	.word	0x20002538

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009266:	3338      	adds	r3, #56	@ 0x38
 8009268:	3313      	adds	r3, #19
 800926a:	4618      	mov	r0, r3
 800926c:	f7fe f82a 	bl	80072c4 <ld_word>
 8009270:	4603      	mov	r3, r0
 8009272:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009276:	2b00      	cmp	r3, #0
 8009278:	d106      	bne.n	8009288 <find_volume+0x2cc>
 800927a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927c:	3338      	adds	r3, #56	@ 0x38
 800927e:	3320      	adds	r3, #32
 8009280:	4618      	mov	r0, r3
 8009282:	f7fe f837 	bl	80072f4 <ld_dword>
 8009286:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928a:	3338      	adds	r3, #56	@ 0x38
 800928c:	330e      	adds	r3, #14
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe f818 	bl	80072c4 <ld_word>
 8009294:	4603      	mov	r3, r0
 8009296:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009298:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800929a:	2b00      	cmp	r3, #0
 800929c:	d101      	bne.n	80092a2 <find_volume+0x2e6>
 800929e:	230d      	movs	r3, #13
 80092a0:	e105      	b.n	80094ae <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80092a2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80092a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092a6:	4413      	add	r3, r2
 80092a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092aa:	8911      	ldrh	r1, [r2, #8]
 80092ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092ae:	8992      	ldrh	r2, [r2, #12]
 80092b0:	0952      	lsrs	r2, r2, #5
 80092b2:	b292      	uxth	r2, r2
 80092b4:	fbb1 f2f2 	udiv	r2, r1, r2
 80092b8:	b292      	uxth	r2, r2
 80092ba:	4413      	add	r3, r2
 80092bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80092be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d201      	bcs.n	80092ca <find_volume+0x30e>
 80092c6:	230d      	movs	r3, #13
 80092c8:	e0f1      	b.n	80094ae <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80092ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092d2:	8952      	ldrh	r2, [r2, #10]
 80092d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80092d8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80092da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <find_volume+0x328>
 80092e0:	230d      	movs	r3, #13
 80092e2:	e0e4      	b.n	80094ae <find_volume+0x4f2>
		fmt = FS_FAT32;
 80092e4:	2303      	movs	r3, #3
 80092e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80092ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ec:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d802      	bhi.n	80092fa <find_volume+0x33e>
 80092f4:	2302      	movs	r3, #2
 80092f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80092fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009300:	4293      	cmp	r3, r2
 8009302:	d802      	bhi.n	800930a <find_volume+0x34e>
 8009304:	2301      	movs	r3, #1
 8009306:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800930a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930c:	1c9a      	adds	r2, r3, #2
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009310:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009314:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009316:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009318:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800931a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800931c:	441a      	add	r2, r3
 800931e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009320:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009322:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009326:	441a      	add	r2, r3
 8009328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800932c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009330:	2b03      	cmp	r3, #3
 8009332:	d11e      	bne.n	8009372 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009336:	3338      	adds	r3, #56	@ 0x38
 8009338:	332a      	adds	r3, #42	@ 0x2a
 800933a:	4618      	mov	r0, r3
 800933c:	f7fd ffc2 	bl	80072c4 <ld_word>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <find_volume+0x38e>
 8009346:	230d      	movs	r3, #13
 8009348:	e0b1      	b.n	80094ae <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800934a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934c:	891b      	ldrh	r3, [r3, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <find_volume+0x39a>
 8009352:	230d      	movs	r3, #13
 8009354:	e0ab      	b.n	80094ae <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009358:	3338      	adds	r3, #56	@ 0x38
 800935a:	332c      	adds	r3, #44	@ 0x2c
 800935c:	4618      	mov	r0, r3
 800935e:	f7fd ffc9 	bl	80072f4 <ld_dword>
 8009362:	4602      	mov	r2, r0
 8009364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009366:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009370:	e01f      	b.n	80093b2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009374:	891b      	ldrh	r3, [r3, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <find_volume+0x3c2>
 800937a:	230d      	movs	r3, #13
 800937c:	e097      	b.n	80094ae <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800937e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009380:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009384:	441a      	add	r2, r3
 8009386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009388:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800938a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800938e:	2b02      	cmp	r3, #2
 8009390:	d103      	bne.n	800939a <find_volume+0x3de>
 8009392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009394:	69db      	ldr	r3, [r3, #28]
 8009396:	005b      	lsls	r3, r3, #1
 8009398:	e00a      	b.n	80093b0 <find_volume+0x3f4>
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	69da      	ldr	r2, [r3, #28]
 800939e:	4613      	mov	r3, r2
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	4413      	add	r3, r2
 80093a4:	085a      	lsrs	r2, r3, #1
 80093a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80093b0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80093b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b4:	6a1a      	ldr	r2, [r3, #32]
 80093b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b8:	899b      	ldrh	r3, [r3, #12]
 80093ba:	4619      	mov	r1, r3
 80093bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093be:	440b      	add	r3, r1
 80093c0:	3b01      	subs	r3, #1
 80093c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80093c4:	8989      	ldrh	r1, [r1, #12]
 80093c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d201      	bcs.n	80093d2 <find_volume+0x416>
 80093ce:	230d      	movs	r3, #13
 80093d0:	e06d      	b.n	80094ae <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80093d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d4:	f04f 32ff 	mov.w	r2, #4294967295
 80093d8:	619a      	str	r2, [r3, #24]
 80093da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093dc:	699a      	ldr	r2, [r3, #24]
 80093de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80093e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e4:	2280      	movs	r2, #128	@ 0x80
 80093e6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80093e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d149      	bne.n	8009484 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80093f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f2:	3338      	adds	r3, #56	@ 0x38
 80093f4:	3330      	adds	r3, #48	@ 0x30
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fd ff64 	bl	80072c4 <ld_word>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d140      	bne.n	8009484 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009404:	3301      	adds	r3, #1
 8009406:	4619      	mov	r1, r3
 8009408:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800940a:	f7fe fa0b 	bl	8007824 <move_window>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d137      	bne.n	8009484 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009416:	2200      	movs	r2, #0
 8009418:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800941a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941c:	3338      	adds	r3, #56	@ 0x38
 800941e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009422:	4618      	mov	r0, r3
 8009424:	f7fd ff4e 	bl	80072c4 <ld_word>
 8009428:	4603      	mov	r3, r0
 800942a:	461a      	mov	r2, r3
 800942c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009430:	429a      	cmp	r2, r3
 8009432:	d127      	bne.n	8009484 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009436:	3338      	adds	r3, #56	@ 0x38
 8009438:	4618      	mov	r0, r3
 800943a:	f7fd ff5b 	bl	80072f4 <ld_dword>
 800943e:	4603      	mov	r3, r0
 8009440:	4a1d      	ldr	r2, [pc, #116]	@ (80094b8 <find_volume+0x4fc>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d11e      	bne.n	8009484 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009448:	3338      	adds	r3, #56	@ 0x38
 800944a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800944e:	4618      	mov	r0, r3
 8009450:	f7fd ff50 	bl	80072f4 <ld_dword>
 8009454:	4603      	mov	r3, r0
 8009456:	4a19      	ldr	r2, [pc, #100]	@ (80094bc <find_volume+0x500>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d113      	bne.n	8009484 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800945c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945e:	3338      	adds	r3, #56	@ 0x38
 8009460:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009464:	4618      	mov	r0, r3
 8009466:	f7fd ff45 	bl	80072f4 <ld_dword>
 800946a:	4602      	mov	r2, r0
 800946c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009472:	3338      	adds	r3, #56	@ 0x38
 8009474:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009478:	4618      	mov	r0, r3
 800947a:	f7fd ff3b 	bl	80072f4 <ld_dword>
 800947e:	4602      	mov	r2, r0
 8009480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009482:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009486:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800948a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800948c:	4b0c      	ldr	r3, [pc, #48]	@ (80094c0 <find_volume+0x504>)
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	3301      	adds	r3, #1
 8009492:	b29a      	uxth	r2, r3
 8009494:	4b0a      	ldr	r3, [pc, #40]	@ (80094c0 <find_volume+0x504>)
 8009496:	801a      	strh	r2, [r3, #0]
 8009498:	4b09      	ldr	r3, [pc, #36]	@ (80094c0 <find_volume+0x504>)
 800949a:	881a      	ldrh	r2, [r3, #0]
 800949c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80094a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a2:	4a08      	ldr	r2, [pc, #32]	@ (80094c4 <find_volume+0x508>)
 80094a4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80094a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80094a8:	f7fe f954 	bl	8007754 <clear_lock>
#endif
	return FR_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3758      	adds	r7, #88	@ 0x58
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	41615252 	.word	0x41615252
 80094bc:	61417272 	.word	0x61417272
 80094c0:	2000253c 	.word	0x2000253c
 80094c4:	20002560 	.word	0x20002560

080094c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80094d2:	2309      	movs	r3, #9
 80094d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d01c      	beq.n	8009516 <validate+0x4e>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d018      	beq.n	8009516 <validate+0x4e>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d013      	beq.n	8009516 <validate+0x4e>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	889a      	ldrh	r2, [r3, #4]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	88db      	ldrh	r3, [r3, #6]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d10c      	bne.n	8009516 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	785b      	ldrb	r3, [r3, #1]
 8009502:	4618      	mov	r0, r3
 8009504:	f7fd fe3e 	bl	8007184 <disk_status>
 8009508:	4603      	mov	r3, r0
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <validate+0x4e>
			res = FR_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009516:	7bfb      	ldrb	r3, [r7, #15]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d102      	bne.n	8009522 <validate+0x5a>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	e000      	b.n	8009524 <validate+0x5c>
 8009522:	2300      	movs	r3, #0
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	6013      	str	r3, [r2, #0]
	return res;
 8009528:	7bfb      	ldrb	r3, [r7, #15]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	4613      	mov	r3, r2
 8009540:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009546:	f107 0310 	add.w	r3, r7, #16
 800954a:	4618      	mov	r0, r3
 800954c:	f7ff fc9c 	bl	8008e88 <get_ldnumber>
 8009550:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	2b00      	cmp	r3, #0
 8009556:	da01      	bge.n	800955c <f_mount+0x28>
 8009558:	230b      	movs	r3, #11
 800955a:	e02b      	b.n	80095b4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800955c:	4a17      	ldr	r2, [pc, #92]	@ (80095bc <f_mount+0x88>)
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009564:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d005      	beq.n	8009578 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800956c:	69b8      	ldr	r0, [r7, #24]
 800956e:	f7fe f8f1 	bl	8007754 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	490d      	ldr	r1, [pc, #52]	@ (80095bc <f_mount+0x88>)
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <f_mount+0x66>
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d001      	beq.n	800959e <f_mount+0x6a>
 800959a:	2300      	movs	r3, #0
 800959c:	e00a      	b.n	80095b4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800959e:	f107 010c 	add.w	r1, r7, #12
 80095a2:	f107 0308 	add.w	r3, r7, #8
 80095a6:	2200      	movs	r2, #0
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff fd07 	bl	8008fbc <find_volume>
 80095ae:	4603      	mov	r3, r0
 80095b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3720      	adds	r7, #32
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	20002538 	.word	0x20002538

080095c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b09a      	sub	sp, #104	@ 0x68
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	4613      	mov	r3, r2
 80095cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <f_open+0x18>
 80095d4:	2309      	movs	r3, #9
 80095d6:	e1b7      	b.n	8009948 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80095e0:	79fa      	ldrb	r2, [r7, #7]
 80095e2:	f107 0114 	add.w	r1, r7, #20
 80095e6:	f107 0308 	add.w	r3, r7, #8
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7ff fce6 	bl	8008fbc <find_volume>
 80095f0:	4603      	mov	r3, r0
 80095f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80095f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f040 819b 	bne.w	8009936 <f_open+0x376>
		dj.obj.fs = fs;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	f107 0318 	add.w	r3, r7, #24
 800960a:	4611      	mov	r1, r2
 800960c:	4618      	mov	r0, r3
 800960e:	f7ff fbc5 	bl	8008d9c <follow_path>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009618:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800961c:	2b00      	cmp	r3, #0
 800961e:	d118      	bne.n	8009652 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009620:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009624:	b25b      	sxtb	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	da03      	bge.n	8009632 <f_open+0x72>
				res = FR_INVALID_NAME;
 800962a:	2306      	movs	r3, #6
 800962c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009630:	e00f      	b.n	8009652 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009632:	79fb      	ldrb	r3, [r7, #7]
 8009634:	2b01      	cmp	r3, #1
 8009636:	bf8c      	ite	hi
 8009638:	2301      	movhi	r3, #1
 800963a:	2300      	movls	r3, #0
 800963c:	b2db      	uxtb	r3, r3
 800963e:	461a      	mov	r2, r3
 8009640:	f107 0318 	add.w	r3, r7, #24
 8009644:	4611      	mov	r1, r2
 8009646:	4618      	mov	r0, r3
 8009648:	f7fd ff3c 	bl	80074c4 <chk_lock>
 800964c:	4603      	mov	r3, r0
 800964e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009652:	79fb      	ldrb	r3, [r7, #7]
 8009654:	f003 031c 	and.w	r3, r3, #28
 8009658:	2b00      	cmp	r3, #0
 800965a:	d07f      	beq.n	800975c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800965c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009660:	2b00      	cmp	r3, #0
 8009662:	d017      	beq.n	8009694 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009664:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009668:	2b04      	cmp	r3, #4
 800966a:	d10e      	bne.n	800968a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800966c:	f7fd ff86 	bl	800757c <enq_lock>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d006      	beq.n	8009684 <f_open+0xc4>
 8009676:	f107 0318 	add.w	r3, r7, #24
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff f8de 	bl	800883c <dir_register>
 8009680:	4603      	mov	r3, r0
 8009682:	e000      	b.n	8009686 <f_open+0xc6>
 8009684:	2312      	movs	r3, #18
 8009686:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800968a:	79fb      	ldrb	r3, [r7, #7]
 800968c:	f043 0308 	orr.w	r3, r3, #8
 8009690:	71fb      	strb	r3, [r7, #7]
 8009692:	e010      	b.n	80096b6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009694:	7fbb      	ldrb	r3, [r7, #30]
 8009696:	f003 0311 	and.w	r3, r3, #17
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <f_open+0xe6>
					res = FR_DENIED;
 800969e:	2307      	movs	r3, #7
 80096a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80096a4:	e007      	b.n	80096b6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80096a6:	79fb      	ldrb	r3, [r7, #7]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <f_open+0xf6>
 80096b0:	2308      	movs	r3, #8
 80096b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80096b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d168      	bne.n	8009790 <f_open+0x1d0>
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	f003 0308 	and.w	r3, r3, #8
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d063      	beq.n	8009790 <f_open+0x1d0>
				dw = GET_FATTIME();
 80096c8:	f7fd fcfe 	bl	80070c8 <get_fattime>
 80096cc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80096ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d0:	330e      	adds	r3, #14
 80096d2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fd fe4b 	bl	8007370 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80096da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096dc:	3316      	adds	r3, #22
 80096de:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fd fe45 	bl	8007370 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80096e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e8:	330b      	adds	r3, #11
 80096ea:	2220      	movs	r2, #32
 80096ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096f2:	4611      	mov	r1, r2
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe fe1a 	bl	800832e <ld_clust>
 80096fa:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009700:	2200      	movs	r2, #0
 8009702:	4618      	mov	r0, r3
 8009704:	f7fe fe32 	bl	800836c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970a:	331c      	adds	r3, #28
 800970c:	2100      	movs	r1, #0
 800970e:	4618      	mov	r0, r3
 8009710:	f7fd fe2e 	bl	8007370 <st_dword>
					fs->wflag = 1;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	2201      	movs	r2, #1
 8009718:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800971a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800971c:	2b00      	cmp	r3, #0
 800971e:	d037      	beq.n	8009790 <f_open+0x1d0>
						dw = fs->winsect;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009724:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009726:	f107 0318 	add.w	r3, r7, #24
 800972a:	2200      	movs	r2, #0
 800972c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800972e:	4618      	mov	r0, r3
 8009730:	f7fe fb22 	bl	8007d78 <remove_chain>
 8009734:	4603      	mov	r3, r0
 8009736:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800973a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800973e:	2b00      	cmp	r3, #0
 8009740:	d126      	bne.n	8009790 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009746:	4618      	mov	r0, r3
 8009748:	f7fe f86c 	bl	8007824 <move_window>
 800974c:	4603      	mov	r3, r0
 800974e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009756:	3a01      	subs	r2, #1
 8009758:	615a      	str	r2, [r3, #20]
 800975a:	e019      	b.n	8009790 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800975c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009760:	2b00      	cmp	r3, #0
 8009762:	d115      	bne.n	8009790 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009764:	7fbb      	ldrb	r3, [r7, #30]
 8009766:	f003 0310 	and.w	r3, r3, #16
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <f_open+0x1b6>
					res = FR_NO_FILE;
 800976e:	2304      	movs	r3, #4
 8009770:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009774:	e00c      	b.n	8009790 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009776:	79fb      	ldrb	r3, [r7, #7]
 8009778:	f003 0302 	and.w	r3, r3, #2
 800977c:	2b00      	cmp	r3, #0
 800977e:	d007      	beq.n	8009790 <f_open+0x1d0>
 8009780:	7fbb      	ldrb	r3, [r7, #30]
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <f_open+0x1d0>
						res = FR_DENIED;
 800978a:	2307      	movs	r3, #7
 800978c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009790:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009794:	2b00      	cmp	r3, #0
 8009796:	d126      	bne.n	80097e6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009798:	79fb      	ldrb	r3, [r7, #7]
 800979a:	f003 0308 	and.w	r3, r3, #8
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80097a2:	79fb      	ldrb	r3, [r7, #7]
 80097a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80097b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80097b8:	79fb      	ldrb	r3, [r7, #7]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	bf8c      	ite	hi
 80097be:	2301      	movhi	r3, #1
 80097c0:	2300      	movls	r3, #0
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	461a      	mov	r2, r3
 80097c6:	f107 0318 	add.w	r3, r7, #24
 80097ca:	4611      	mov	r1, r2
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fd fef7 	bl	80075c0 <inc_lock>
 80097d2:	4602      	mov	r2, r0
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d102      	bne.n	80097e6 <f_open+0x226>
 80097e0:	2302      	movs	r3, #2
 80097e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80097e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f040 80a3 	bne.w	8009936 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097f4:	4611      	mov	r1, r2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe fd99 	bl	800832e <ld_clust>
 80097fc:	4602      	mov	r2, r0
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009804:	331c      	adds	r3, #28
 8009806:	4618      	mov	r0, r3
 8009808:	f7fd fd74 	bl	80072f4 <ld_dword>
 800980c:	4602      	mov	r2, r0
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009818:	697a      	ldr	r2, [r7, #20]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	88da      	ldrh	r2, [r3, #6]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	79fa      	ldrb	r2, [r7, #7]
 800982a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3330      	adds	r3, #48	@ 0x30
 8009842:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009846:	2100      	movs	r1, #0
 8009848:	4618      	mov	r0, r3
 800984a:	f7fd fdde 	bl	800740a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	f003 0320 	and.w	r3, r3, #32
 8009854:	2b00      	cmp	r3, #0
 8009856:	d06e      	beq.n	8009936 <f_open+0x376>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d06a      	beq.n	8009936 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	895b      	ldrh	r3, [r3, #10]
 800986c:	461a      	mov	r2, r3
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	899b      	ldrh	r3, [r3, #12]
 8009872:	fb02 f303 	mul.w	r3, r2, r3
 8009876:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009884:	e016      	b.n	80098b4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe f887 	bl	800799e <get_fat>
 8009890:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009892:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009894:	2b01      	cmp	r3, #1
 8009896:	d802      	bhi.n	800989e <f_open+0x2de>
 8009898:	2302      	movs	r3, #2
 800989a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800989e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a4:	d102      	bne.n	80098ac <f_open+0x2ec>
 80098a6:	2301      	movs	r3, #1
 80098a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80098ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80098ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d103      	bne.n	80098c4 <f_open+0x304>
 80098bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80098be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d8e0      	bhi.n	8009886 <f_open+0x2c6>
				}
				fp->clust = clst;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80098c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80098ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d131      	bne.n	8009936 <f_open+0x376>
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	899b      	ldrh	r3, [r3, #12]
 80098d6:	461a      	mov	r2, r3
 80098d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098da:	fbb3 f1f2 	udiv	r1, r3, r2
 80098de:	fb01 f202 	mul.w	r2, r1, r2
 80098e2:	1a9b      	subs	r3, r3, r2
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d026      	beq.n	8009936 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fe f837 	bl	8007960 <clust2sect>
 80098f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80098f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d103      	bne.n	8009902 <f_open+0x342>
						res = FR_INT_ERR;
 80098fa:	2302      	movs	r3, #2
 80098fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009900:	e019      	b.n	8009936 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	899b      	ldrh	r3, [r3, #12]
 8009906:	461a      	mov	r2, r3
 8009908:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800990a:	fbb3 f2f2 	udiv	r2, r3, r2
 800990e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009910:	441a      	add	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	7858      	ldrb	r0, [r3, #1]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6a1a      	ldr	r2, [r3, #32]
 8009924:	2301      	movs	r3, #1
 8009926:	f7fd fc6f 	bl	8007208 <disk_read>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <f_open+0x376>
 8009930:	2301      	movs	r3, #1
 8009932:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009936:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <f_open+0x384>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009944:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009948:	4618      	mov	r0, r3
 800994a:	3768      	adds	r7, #104	@ 0x68
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08c      	sub	sp, #48	@ 0x30
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f107 0210 	add.w	r2, r7, #16
 800996e:	4611      	mov	r1, r2
 8009970:	4618      	mov	r0, r3
 8009972:	f7ff fda9 	bl	80094c8 <validate>
 8009976:	4603      	mov	r3, r0
 8009978:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800997c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009980:	2b00      	cmp	r3, #0
 8009982:	d107      	bne.n	8009994 <f_write+0x44>
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	7d5b      	ldrb	r3, [r3, #21]
 8009988:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800998c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <f_write+0x4a>
 8009994:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009998:	e16a      	b.n	8009c70 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	7d1b      	ldrb	r3, [r3, #20]
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d101      	bne.n	80099aa <f_write+0x5a>
 80099a6:	2307      	movs	r3, #7
 80099a8:	e162      	b.n	8009c70 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	699a      	ldr	r2, [r3, #24]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	441a      	add	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	f080 814c 	bcs.w	8009c54 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	43db      	mvns	r3, r3
 80099c2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80099c4:	e146      	b.n	8009c54 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	8992      	ldrh	r2, [r2, #12]
 80099ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80099d2:	fb01 f202 	mul.w	r2, r1, r2
 80099d6:	1a9b      	subs	r3, r3, r2
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f040 80f1 	bne.w	8009bc0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	8992      	ldrh	r2, [r2, #12]
 80099e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	8952      	ldrh	r2, [r2, #10]
 80099ee:	3a01      	subs	r2, #1
 80099f0:	4013      	ands	r3, r2
 80099f2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d143      	bne.n	8009a82 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10c      	bne.n	8009a1c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d11a      	bne.n	8009a44 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2100      	movs	r1, #0
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe fa15 	bl	8007e42 <create_chain>
 8009a18:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009a1a:	e013      	b.n	8009a44 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d007      	beq.n	8009a34 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	4619      	mov	r1, r3
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f7fe faa1 	bl	8007f72 <clmt_clust>
 8009a30:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009a32:	e007      	b.n	8009a44 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	69db      	ldr	r3, [r3, #28]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	f7fe fa00 	bl	8007e42 <create_chain>
 8009a42:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 8109 	beq.w	8009c5e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d104      	bne.n	8009a5c <f_write+0x10c>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2202      	movs	r2, #2
 8009a56:	755a      	strb	r2, [r3, #21]
 8009a58:	2302      	movs	r3, #2
 8009a5a:	e109      	b.n	8009c70 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a62:	d104      	bne.n	8009a6e <f_write+0x11e>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2201      	movs	r2, #1
 8009a68:	755a      	strb	r2, [r3, #21]
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e100      	b.n	8009c70 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a72:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <f_write+0x132>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a80:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	7d1b      	ldrb	r3, [r3, #20]
 8009a86:	b25b      	sxtb	r3, r3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	da18      	bge.n	8009abe <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	7858      	ldrb	r0, [r3, #1]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6a1a      	ldr	r2, [r3, #32]
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f7fd fbd4 	bl	8007248 <disk_write>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d004      	beq.n	8009ab0 <f_write+0x160>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	755a      	strb	r2, [r3, #21]
 8009aac:	2301      	movs	r3, #1
 8009aae:	e0df      	b.n	8009c70 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	7d1b      	ldrb	r3, [r3, #20]
 8009ab4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	69db      	ldr	r3, [r3, #28]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	f7fd ff4a 	bl	8007960 <clust2sect>
 8009acc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d104      	bne.n	8009ade <f_write+0x18e>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	755a      	strb	r2, [r3, #21]
 8009ada:	2302      	movs	r3, #2
 8009adc:	e0c8      	b.n	8009c70 <f_write+0x320>
			sect += csect;
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	899b      	ldrh	r3, [r3, #12]
 8009aea:	461a      	mov	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	fbb3 f3f2 	udiv	r3, r3, r2
 8009af2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d043      	beq.n	8009b82 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	4413      	add	r3, r2
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	8952      	ldrh	r2, [r2, #10]
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d905      	bls.n	8009b14 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	895b      	ldrh	r3, [r3, #10]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	7858      	ldrb	r0, [r3, #1]
 8009b18:	6a3b      	ldr	r3, [r7, #32]
 8009b1a:	697a      	ldr	r2, [r7, #20]
 8009b1c:	69f9      	ldr	r1, [r7, #28]
 8009b1e:	f7fd fb93 	bl	8007248 <disk_write>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d004      	beq.n	8009b32 <f_write+0x1e2>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	755a      	strb	r2, [r3, #21]
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e09e      	b.n	8009c70 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6a1a      	ldr	r2, [r3, #32]
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	6a3a      	ldr	r2, [r7, #32]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d918      	bls.n	8009b72 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6a1a      	ldr	r2, [r3, #32]
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	8992      	ldrh	r2, [r2, #12]
 8009b52:	fb02 f303 	mul.w	r3, r2, r3
 8009b56:	69fa      	ldr	r2, [r7, #28]
 8009b58:	18d1      	adds	r1, r2, r3
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	899b      	ldrh	r3, [r3, #12]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f7fd fc32 	bl	80073c8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	7d1b      	ldrb	r3, [r3, #20]
 8009b68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	899b      	ldrh	r3, [r3, #12]
 8009b76:	461a      	mov	r2, r3
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	fb02 f303 	mul.w	r3, r2, r3
 8009b7e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009b80:	e04b      	b.n	8009c1a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d016      	beq.n	8009bba <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	699a      	ldr	r2, [r3, #24]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d210      	bcs.n	8009bba <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	7858      	ldrb	r0, [r3, #1]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	f7fd fb2f 	bl	8007208 <disk_read>
 8009baa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d004      	beq.n	8009bba <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	755a      	strb	r2, [r3, #21]
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e05a      	b.n	8009c70 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	899b      	ldrh	r3, [r3, #12]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	8992      	ldrh	r2, [r2, #12]
 8009bce:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bd2:	fb01 f202 	mul.w	r2, r1, r2
 8009bd6:	1a9b      	subs	r3, r3, r2
 8009bd8:	1ac3      	subs	r3, r0, r3
 8009bda:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d901      	bls.n	8009be8 <f_write+0x298>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	693a      	ldr	r2, [r7, #16]
 8009bf4:	8992      	ldrh	r2, [r2, #12]
 8009bf6:	fbb3 f0f2 	udiv	r0, r3, r2
 8009bfa:	fb00 f202 	mul.w	r2, r0, r2
 8009bfe:	1a9b      	subs	r3, r3, r2
 8009c00:	440b      	add	r3, r1
 8009c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c04:	69f9      	ldr	r1, [r7, #28]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fd fbde 	bl	80073c8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	7d1b      	ldrb	r3, [r3, #20]
 8009c10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009c1a:	69fa      	ldr	r2, [r7, #28]
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1e:	4413      	add	r3, r2
 8009c20:	61fb      	str	r3, [r7, #28]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	699a      	ldr	r2, [r3, #24]
 8009c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c28:	441a      	add	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	619a      	str	r2, [r3, #24]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	68da      	ldr	r2, [r3, #12]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	bf38      	it	cc
 8009c3a:	461a      	movcc	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	60da      	str	r2, [r3, #12]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c46:	441a      	add	r2, r3
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	601a      	str	r2, [r3, #0]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f47f aeb5 	bne.w	80099c6 <f_write+0x76>
 8009c5c:	e000      	b.n	8009c60 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c5e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	7d1b      	ldrb	r3, [r3, #20]
 8009c64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3730      	adds	r7, #48	@ 0x30
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f107 0208 	add.w	r2, r7, #8
 8009c86:	4611      	mov	r1, r2
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7ff fc1d 	bl	80094c8 <validate>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d168      	bne.n	8009d6a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	7d1b      	ldrb	r3, [r3, #20]
 8009c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d062      	beq.n	8009d6a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	7d1b      	ldrb	r3, [r3, #20]
 8009ca8:	b25b      	sxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	da15      	bge.n	8009cda <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	7858      	ldrb	r0, [r3, #1]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a1a      	ldr	r2, [r3, #32]
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f7fd fac3 	bl	8007248 <disk_write>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <f_sync+0x54>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e04f      	b.n	8009d6c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	7d1b      	ldrb	r3, [r3, #20]
 8009cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009cda:	f7fd f9f5 	bl	80070c8 <get_fattime>
 8009cde:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	4610      	mov	r0, r2
 8009cea:	f7fd fd9b 	bl	8007824 <move_window>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009cf2:	7dfb      	ldrb	r3, [r7, #23]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d138      	bne.n	8009d6a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cfc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	330b      	adds	r3, #11
 8009d02:	781a      	ldrb	r2, [r3, #0]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	330b      	adds	r3, #11
 8009d08:	f042 0220 	orr.w	r2, r2, #32
 8009d0c:	b2d2      	uxtb	r2, r2
 8009d0e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6818      	ldr	r0, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	68f9      	ldr	r1, [r7, #12]
 8009d1c:	f7fe fb26 	bl	800836c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f103 021c 	add.w	r2, r3, #28
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	f7fd fb1f 	bl	8007370 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3316      	adds	r3, #22
 8009d36:	6939      	ldr	r1, [r7, #16]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fd fb19 	bl	8007370 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	3312      	adds	r3, #18
 8009d42:	2100      	movs	r1, #0
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fd faf8 	bl	800733a <st_word>
					fs->wflag = 1;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fd fd94 	bl	8007880 <sync_fs>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	7d1b      	ldrb	r3, [r3, #20]
 8009d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3718      	adds	r7, #24
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7ff ff7b 	bl	8009c78 <f_sync>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009d86:	7bfb      	ldrb	r3, [r7, #15]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d118      	bne.n	8009dbe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f107 0208 	add.w	r2, r7, #8
 8009d92:	4611      	mov	r1, r2
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7ff fb97 	bl	80094c8 <validate>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10c      	bne.n	8009dbe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fd fc97 	bl	80076dc <dec_lock>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d102      	bne.n	8009dbe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b090      	sub	sp, #64	@ 0x40
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f107 0208 	add.w	r2, r7, #8
 8009dd8:	4611      	mov	r1, r2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7ff fb74 	bl	80094c8 <validate>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009de6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d103      	bne.n	8009df6 <f_lseek+0x2e>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	7d5b      	ldrb	r3, [r3, #21]
 8009df2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009df6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <f_lseek+0x3c>
 8009dfe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009e02:	e201      	b.n	800a208 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 80d9 	beq.w	8009fc0 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e14:	d15a      	bne.n	8009ecc <f_lseek+0x104>
			tbl = fp->cltbl;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1e:	1d1a      	adds	r2, r3, #4
 8009e20:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	617b      	str	r3, [r7, #20]
 8009e26:	2302      	movs	r3, #2
 8009e28:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8009e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d03a      	beq.n	8009eac <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e38:	613b      	str	r3, [r7, #16]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e40:	3302      	adds	r3, #2
 8009e42:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8009e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e46:	60fb      	str	r3, [r7, #12]
 8009e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fd fda3 	bl	800799e <get_fat>
 8009e58:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d804      	bhi.n	8009e6a <f_lseek+0xa2>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2202      	movs	r2, #2
 8009e64:	755a      	strb	r2, [r3, #21]
 8009e66:	2302      	movs	r3, #2
 8009e68:	e1ce      	b.n	800a208 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e70:	d104      	bne.n	8009e7c <f_lseek+0xb4>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	755a      	strb	r2, [r3, #21]
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e1c5      	b.n	800a208 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d0de      	beq.n	8009e44 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d809      	bhi.n	8009ea2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e90:	1d1a      	adds	r2, r3, #4
 8009e92:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e96:	601a      	str	r2, [r3, #0]
 8009e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9a:	1d1a      	adds	r2, r3, #4
 8009e9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d3c4      	bcc.n	8009e36 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009eb2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009eb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d803      	bhi.n	8009ec4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	e19f      	b.n	800a204 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009ec4:	2311      	movs	r3, #17
 8009ec6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009eca:	e19b      	b.n	800a204 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d902      	bls.n	8009edc <f_lseek+0x114>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 818d 	beq.w	800a204 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	3b01      	subs	r3, #1
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7fe f83e 	bl	8007f72 <clmt_clust>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	69db      	ldr	r3, [r3, #28]
 8009f02:	4619      	mov	r1, r3
 8009f04:	4610      	mov	r0, r2
 8009f06:	f7fd fd2b 	bl	8007960 <clust2sect>
 8009f0a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d104      	bne.n	8009f1c <f_lseek+0x154>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2202      	movs	r2, #2
 8009f16:	755a      	strb	r2, [r3, #21]
 8009f18:	2302      	movs	r3, #2
 8009f1a:	e175      	b.n	800a208 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	8992      	ldrh	r2, [r2, #12]
 8009f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	8952      	ldrh	r2, [r2, #10]
 8009f2c:	3a01      	subs	r2, #1
 8009f2e:	4013      	ands	r3, r2
 8009f30:	69ba      	ldr	r2, [r7, #24]
 8009f32:	4413      	add	r3, r2
 8009f34:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	8992      	ldrh	r2, [r2, #12]
 8009f3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f42:	fb01 f202 	mul.w	r2, r1, r2
 8009f46:	1a9b      	subs	r3, r3, r2
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 815b 	beq.w	800a204 <f_lseek+0x43c>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	69ba      	ldr	r2, [r7, #24]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	f000 8155 	beq.w	800a204 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	7d1b      	ldrb	r3, [r3, #20]
 8009f5e:	b25b      	sxtb	r3, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	da18      	bge.n	8009f96 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	7858      	ldrb	r0, [r3, #1]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a1a      	ldr	r2, [r3, #32]
 8009f72:	2301      	movs	r3, #1
 8009f74:	f7fd f968 	bl	8007248 <disk_write>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d004      	beq.n	8009f88 <f_lseek+0x1c0>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	755a      	strb	r2, [r3, #21]
 8009f84:	2301      	movs	r3, #1
 8009f86:	e13f      	b.n	800a208 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	7d1b      	ldrb	r3, [r3, #20]
 8009f8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	7858      	ldrb	r0, [r3, #1]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	69ba      	ldr	r2, [r7, #24]
 8009fa4:	f7fd f930 	bl	8007208 <disk_read>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d004      	beq.n	8009fb8 <f_lseek+0x1f0>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	755a      	strb	r2, [r3, #21]
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e127      	b.n	800a208 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	621a      	str	r2, [r3, #32]
 8009fbe:	e121      	b.n	800a204 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d908      	bls.n	8009fdc <f_lseek+0x214>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	7d1b      	ldrb	r3, [r3, #20]
 8009fce:	f003 0302 	and.w	r3, r3, #2
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d102      	bne.n	8009fdc <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	699b      	ldr	r3, [r3, #24]
 8009fe0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fea:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f000 80b5 	beq.w	800a15e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	895b      	ldrh	r3, [r3, #10]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	899b      	ldrh	r3, [r3, #12]
 8009ffe:	fb02 f303 	mul.w	r3, r2, r3
 800a002:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a004:	6a3b      	ldr	r3, [r7, #32]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d01b      	beq.n	800a042 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	1e5a      	subs	r2, r3, #1
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	fbb2 f2f3 	udiv	r2, r2, r3
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	1e59      	subs	r1, r3, #1
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a01e:	429a      	cmp	r2, r3
 800a020:	d30f      	bcc.n	800a042 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	1e5a      	subs	r2, r3, #1
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	425b      	negs	r3, r3
 800a02a:	401a      	ands	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a040:	e022      	b.n	800a088 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d119      	bne.n	800a082 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2100      	movs	r1, #0
 800a052:	4618      	mov	r0, r3
 800a054:	f7fd fef5 	bl	8007e42 <create_chain>
 800a058:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d104      	bne.n	800a06a <f_lseek+0x2a2>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2202      	movs	r2, #2
 800a064:	755a      	strb	r2, [r3, #21]
 800a066:	2302      	movs	r3, #2
 800a068:	e0ce      	b.n	800a208 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a070:	d104      	bne.n	800a07c <f_lseek+0x2b4>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	755a      	strb	r2, [r3, #21]
 800a078:	2301      	movs	r3, #1
 800a07a:	e0c5      	b.n	800a208 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a080:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a086:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d067      	beq.n	800a15e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a08e:	e03a      	b.n	800a106 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	603b      	str	r3, [r7, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	699a      	ldr	r2, [r3, #24]
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	441a      	add	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	7d1b      	ldrb	r3, [r3, #20]
 800a0a8:	f003 0302 	and.w	r3, r3, #2
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00b      	beq.n	800a0c8 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fd fec4 	bl	8007e42 <create_chain>
 800a0ba:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d108      	bne.n	800a0d4 <f_lseek+0x30c>
							ofs = 0; break;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	603b      	str	r3, [r7, #0]
 800a0c6:	e022      	b.n	800a10e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fd fc66 	bl	800799e <get_fat>
 800a0d2:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0da:	d104      	bne.n	800a0e6 <f_lseek+0x31e>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	755a      	strb	r2, [r3, #21]
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e090      	b.n	800a208 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d904      	bls.n	800a0f6 <f_lseek+0x32e>
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	69db      	ldr	r3, [r3, #28]
 800a0f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d304      	bcc.n	800a100 <f_lseek+0x338>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	755a      	strb	r2, [r3, #21]
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	e083      	b.n	800a208 <f_lseek+0x440>
					fp->clust = clst;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a104:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d8c0      	bhi.n	800a090 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	699a      	ldr	r2, [r3, #24]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	441a      	add	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	899b      	ldrh	r3, [r3, #12]
 800a11e:	461a      	mov	r2, r3
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	fbb3 f1f2 	udiv	r1, r3, r2
 800a126:	fb01 f202 	mul.w	r2, r1, r2
 800a12a:	1a9b      	subs	r3, r3, r2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d016      	beq.n	800a15e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a134:	4618      	mov	r0, r3
 800a136:	f7fd fc13 	bl	8007960 <clust2sect>
 800a13a:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d104      	bne.n	800a14c <f_lseek+0x384>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2202      	movs	r2, #2
 800a146:	755a      	strb	r2, [r3, #21]
 800a148:	2302      	movs	r3, #2
 800a14a:	e05d      	b.n	800a208 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	899b      	ldrh	r3, [r3, #12]
 800a150:	461a      	mov	r2, r3
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	fbb3 f3f2 	udiv	r3, r3, r2
 800a158:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a15a:	4413      	add	r3, r2
 800a15c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	699a      	ldr	r2, [r3, #24]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	429a      	cmp	r2, r3
 800a168:	d90a      	bls.n	800a180 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	699a      	ldr	r2, [r3, #24]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	7d1b      	ldrb	r3, [r3, #20]
 800a176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	8992      	ldrh	r2, [r2, #12]
 800a188:	fbb3 f1f2 	udiv	r1, r3, r2
 800a18c:	fb01 f202 	mul.w	r2, r1, r2
 800a190:	1a9b      	subs	r3, r3, r2
 800a192:	2b00      	cmp	r3, #0
 800a194:	d036      	beq.n	800a204 <f_lseek+0x43c>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d031      	beq.n	800a204 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	7d1b      	ldrb	r3, [r3, #20]
 800a1a4:	b25b      	sxtb	r3, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	da18      	bge.n	800a1dc <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	7858      	ldrb	r0, [r3, #1]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a1a      	ldr	r2, [r3, #32]
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	f7fd f845 	bl	8007248 <disk_write>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d004      	beq.n	800a1ce <f_lseek+0x406>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	755a      	strb	r2, [r3, #21]
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e01c      	b.n	800a208 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	7d1b      	ldrb	r3, [r3, #20]
 800a1d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	7858      	ldrb	r0, [r3, #1]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1ea:	f7fd f80d 	bl	8007208 <disk_read>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d004      	beq.n	800a1fe <f_lseek+0x436>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	755a      	strb	r2, [r3, #21]
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e004      	b.n	800a208 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a202:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a204:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3740      	adds	r7, #64	@ 0x40
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	460b      	mov	r3, r1
 800a21a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a21c:	78fb      	ldrb	r3, [r7, #3]
 800a21e:	2b0a      	cmp	r3, #10
 800a220:	d103      	bne.n	800a22a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a222:	210d      	movs	r1, #13
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7ff fff3 	bl	800a210 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	db25      	blt.n	800a282 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	1c5a      	adds	r2, r3, #1
 800a23a:	60fa      	str	r2, [r7, #12]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	4413      	add	r3, r2
 800a240:	78fa      	ldrb	r2, [r7, #3]
 800a242:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b3c      	cmp	r3, #60	@ 0x3c
 800a248:	dd12      	ble.n	800a270 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f103 010c 	add.w	r1, r3, #12
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	f107 0308 	add.w	r3, r7, #8
 800a25a:	f7ff fb79 	bl	8009950 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	429a      	cmp	r2, r3
 800a264:	d101      	bne.n	800a26a <putc_bfd+0x5a>
 800a266:	2300      	movs	r3, #0
 800a268:	e001      	b.n	800a26e <putc_bfd+0x5e>
 800a26a:	f04f 33ff 	mov.w	r3, #4294967295
 800a26e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	1c5a      	adds	r2, r3, #1
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	609a      	str	r2, [r3, #8]
 800a280:	e000      	b.n	800a284 <putc_bfd+0x74>
	if (i < 0) return;
 800a282:	bf00      	nop
}
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b084      	sub	sp, #16
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	db16      	blt.n	800a2c8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6818      	ldr	r0, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f103 010c 	add.w	r1, r3, #12
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	f107 030c 	add.w	r3, r7, #12
 800a2ae:	f7ff fb4f 	bl	8009950 <f_write>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d107      	bne.n	800a2c8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d102      	bne.n	800a2c8 <putc_flush+0x3e>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	e001      	b.n	800a2cc <putc_flush+0x42>
	return EOF;
 800a2c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	605a      	str	r2, [r3, #4]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	609a      	str	r2, [r3, #8]
}
 800a2f2:	bf00      	nop
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b096      	sub	sp, #88	@ 0x58
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a308:	f107 030c 	add.w	r3, r7, #12
 800a30c:	6839      	ldr	r1, [r7, #0]
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff ffe0 	bl	800a2d4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a314:	e009      	b.n	800a32a <f_puts+0x2c>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	1c5a      	adds	r2, r3, #1
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	781a      	ldrb	r2, [r3, #0]
 800a31e:	f107 030c 	add.w	r3, r7, #12
 800a322:	4611      	mov	r1, r2
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff ff73 	bl	800a210 <putc_bfd>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1f1      	bne.n	800a316 <f_puts+0x18>
	return putc_flush(&pb);
 800a332:	f107 030c 	add.w	r3, r7, #12
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff ffa7 	bl	800a28a <putc_flush>
 800a33c:	4603      	mov	r3, r0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3758      	adds	r7, #88	@ 0x58
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	4613      	mov	r3, r2
 800a354:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a356:	2301      	movs	r3, #1
 800a358:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a35e:	4b1f      	ldr	r3, [pc, #124]	@ (800a3dc <FATFS_LinkDriverEx+0x94>)
 800a360:	7a5b      	ldrb	r3, [r3, #9]
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	d131      	bne.n	800a3cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a368:	4b1c      	ldr	r3, [pc, #112]	@ (800a3dc <FATFS_LinkDriverEx+0x94>)
 800a36a:	7a5b      	ldrb	r3, [r3, #9]
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	461a      	mov	r2, r3
 800a370:	4b1a      	ldr	r3, [pc, #104]	@ (800a3dc <FATFS_LinkDriverEx+0x94>)
 800a372:	2100      	movs	r1, #0
 800a374:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a376:	4b19      	ldr	r3, [pc, #100]	@ (800a3dc <FATFS_LinkDriverEx+0x94>)
 800a378:	7a5b      	ldrb	r3, [r3, #9]
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	4a17      	ldr	r2, [pc, #92]	@ (800a3dc <FATFS_LinkDriverEx+0x94>)
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4413      	add	r3, r2
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a386:	4b15      	ldr	r3, [pc, #84]	@ (800a3dc <FATFS_LinkDriverEx+0x94>)
 800a388:	7a5b      	ldrb	r3, [r3, #9]
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	461a      	mov	r2, r3
 800a38e:	4b13      	ldr	r3, [pc, #76]	@ (800a3dc <FATFS_LinkDriverEx+0x94>)
 800a390:	4413      	add	r3, r2
 800a392:	79fa      	ldrb	r2, [r7, #7]
 800a394:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a396:	4b11      	ldr	r3, [pc, #68]	@ (800a3dc <FATFS_LinkDriverEx+0x94>)
 800a398:	7a5b      	ldrb	r3, [r3, #9]
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	1c5a      	adds	r2, r3, #1
 800a39e:	b2d1      	uxtb	r1, r2
 800a3a0:	4a0e      	ldr	r2, [pc, #56]	@ (800a3dc <FATFS_LinkDriverEx+0x94>)
 800a3a2:	7251      	strb	r1, [r2, #9]
 800a3a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a3a6:	7dbb      	ldrb	r3, [r7, #22]
 800a3a8:	3330      	adds	r3, #48	@ 0x30
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	223a      	movs	r2, #58	@ 0x3a
 800a3b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	3302      	adds	r3, #2
 800a3bc:	222f      	movs	r2, #47	@ 0x2f
 800a3be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	3303      	adds	r3, #3
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a3cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	371c      	adds	r7, #28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	20002760 	.word	0x20002760

0800a3e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	6839      	ldr	r1, [r7, #0]
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7ff ffaa 	bl	800a348 <FATFS_LinkDriverEx>
 800a3f4:	4603      	mov	r3, r0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	4603      	mov	r3, r0
 800a408:	6039      	str	r1, [r7, #0]
 800a40a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a40c:	88fb      	ldrh	r3, [r7, #6]
 800a40e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a410:	d802      	bhi.n	800a418 <ff_convert+0x18>
		c = chr;
 800a412:	88fb      	ldrh	r3, [r7, #6]
 800a414:	81fb      	strh	r3, [r7, #14]
 800a416:	e025      	b.n	800a464 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00b      	beq.n	800a436 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a41e:	88fb      	ldrh	r3, [r7, #6]
 800a420:	2bff      	cmp	r3, #255	@ 0xff
 800a422:	d805      	bhi.n	800a430 <ff_convert+0x30>
 800a424:	88fb      	ldrh	r3, [r7, #6]
 800a426:	3b80      	subs	r3, #128	@ 0x80
 800a428:	4a12      	ldr	r2, [pc, #72]	@ (800a474 <ff_convert+0x74>)
 800a42a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a42e:	e000      	b.n	800a432 <ff_convert+0x32>
 800a430:	2300      	movs	r3, #0
 800a432:	81fb      	strh	r3, [r7, #14]
 800a434:	e016      	b.n	800a464 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a436:	2300      	movs	r3, #0
 800a438:	81fb      	strh	r3, [r7, #14]
 800a43a:	e009      	b.n	800a450 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a43c:	89fb      	ldrh	r3, [r7, #14]
 800a43e:	4a0d      	ldr	r2, [pc, #52]	@ (800a474 <ff_convert+0x74>)
 800a440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a444:	88fa      	ldrh	r2, [r7, #6]
 800a446:	429a      	cmp	r2, r3
 800a448:	d006      	beq.n	800a458 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a44a:	89fb      	ldrh	r3, [r7, #14]
 800a44c:	3301      	adds	r3, #1
 800a44e:	81fb      	strh	r3, [r7, #14]
 800a450:	89fb      	ldrh	r3, [r7, #14]
 800a452:	2b7f      	cmp	r3, #127	@ 0x7f
 800a454:	d9f2      	bls.n	800a43c <ff_convert+0x3c>
 800a456:	e000      	b.n	800a45a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a458:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a45a:	89fb      	ldrh	r3, [r7, #14]
 800a45c:	3380      	adds	r3, #128	@ 0x80
 800a45e:	b29b      	uxth	r3, r3
 800a460:	b2db      	uxtb	r3, r3
 800a462:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a464:	89fb      	ldrh	r3, [r7, #14]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3714      	adds	r7, #20
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	08014930 	.word	0x08014930

0800a478 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a478:	b480      	push	{r7}
 800a47a:	b087      	sub	sp, #28
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	4603      	mov	r3, r0
 800a480:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a482:	88fb      	ldrh	r3, [r7, #6]
 800a484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a488:	d201      	bcs.n	800a48e <ff_wtoupper+0x16>
 800a48a:	4b3e      	ldr	r3, [pc, #248]	@ (800a584 <ff_wtoupper+0x10c>)
 800a48c:	e000      	b.n	800a490 <ff_wtoupper+0x18>
 800a48e:	4b3e      	ldr	r3, [pc, #248]	@ (800a588 <ff_wtoupper+0x110>)
 800a490:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	1c9a      	adds	r2, r3, #2
 800a496:	617a      	str	r2, [r7, #20]
 800a498:	881b      	ldrh	r3, [r3, #0]
 800a49a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a49c:	8a7b      	ldrh	r3, [r7, #18]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d068      	beq.n	800a574 <ff_wtoupper+0xfc>
 800a4a2:	88fa      	ldrh	r2, [r7, #6]
 800a4a4:	8a7b      	ldrh	r3, [r7, #18]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d364      	bcc.n	800a574 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	1c9a      	adds	r2, r3, #2
 800a4ae:	617a      	str	r2, [r7, #20]
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	823b      	strh	r3, [r7, #16]
 800a4b4:	8a3b      	ldrh	r3, [r7, #16]
 800a4b6:	0a1b      	lsrs	r3, r3, #8
 800a4b8:	81fb      	strh	r3, [r7, #14]
 800a4ba:	8a3b      	ldrh	r3, [r7, #16]
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a4c0:	88fa      	ldrh	r2, [r7, #6]
 800a4c2:	8a79      	ldrh	r1, [r7, #18]
 800a4c4:	8a3b      	ldrh	r3, [r7, #16]
 800a4c6:	440b      	add	r3, r1
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	da49      	bge.n	800a560 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a4cc:	89fb      	ldrh	r3, [r7, #14]
 800a4ce:	2b08      	cmp	r3, #8
 800a4d0:	d84f      	bhi.n	800a572 <ff_wtoupper+0xfa>
 800a4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d8 <ff_wtoupper+0x60>)
 800a4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d8:	0800a4fd 	.word	0x0800a4fd
 800a4dc:	0800a50f 	.word	0x0800a50f
 800a4e0:	0800a525 	.word	0x0800a525
 800a4e4:	0800a52d 	.word	0x0800a52d
 800a4e8:	0800a535 	.word	0x0800a535
 800a4ec:	0800a53d 	.word	0x0800a53d
 800a4f0:	0800a545 	.word	0x0800a545
 800a4f4:	0800a54d 	.word	0x0800a54d
 800a4f8:	0800a555 	.word	0x0800a555
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a4fc:	88fa      	ldrh	r2, [r7, #6]
 800a4fe:	8a7b      	ldrh	r3, [r7, #18]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	4413      	add	r3, r2
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	80fb      	strh	r3, [r7, #6]
 800a50c:	e027      	b.n	800a55e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a50e:	88fa      	ldrh	r2, [r7, #6]
 800a510:	8a7b      	ldrh	r3, [r7, #18]
 800a512:	1ad3      	subs	r3, r2, r3
 800a514:	b29b      	uxth	r3, r3
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	88fa      	ldrh	r2, [r7, #6]
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	80fb      	strh	r3, [r7, #6]
 800a522:	e01c      	b.n	800a55e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a524:	88fb      	ldrh	r3, [r7, #6]
 800a526:	3b10      	subs	r3, #16
 800a528:	80fb      	strh	r3, [r7, #6]
 800a52a:	e018      	b.n	800a55e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a52c:	88fb      	ldrh	r3, [r7, #6]
 800a52e:	3b20      	subs	r3, #32
 800a530:	80fb      	strh	r3, [r7, #6]
 800a532:	e014      	b.n	800a55e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a534:	88fb      	ldrh	r3, [r7, #6]
 800a536:	3b30      	subs	r3, #48	@ 0x30
 800a538:	80fb      	strh	r3, [r7, #6]
 800a53a:	e010      	b.n	800a55e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a53c:	88fb      	ldrh	r3, [r7, #6]
 800a53e:	3b1a      	subs	r3, #26
 800a540:	80fb      	strh	r3, [r7, #6]
 800a542:	e00c      	b.n	800a55e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a544:	88fb      	ldrh	r3, [r7, #6]
 800a546:	3308      	adds	r3, #8
 800a548:	80fb      	strh	r3, [r7, #6]
 800a54a:	e008      	b.n	800a55e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a54c:	88fb      	ldrh	r3, [r7, #6]
 800a54e:	3b50      	subs	r3, #80	@ 0x50
 800a550:	80fb      	strh	r3, [r7, #6]
 800a552:	e004      	b.n	800a55e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a554:	88fb      	ldrh	r3, [r7, #6]
 800a556:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a55a:	80fb      	strh	r3, [r7, #6]
 800a55c:	bf00      	nop
			}
			break;
 800a55e:	e008      	b.n	800a572 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a560:	89fb      	ldrh	r3, [r7, #14]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d195      	bne.n	800a492 <ff_wtoupper+0x1a>
 800a566:	8a3b      	ldrh	r3, [r7, #16]
 800a568:	005b      	lsls	r3, r3, #1
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	4413      	add	r3, r2
 800a56e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a570:	e78f      	b.n	800a492 <ff_wtoupper+0x1a>
			break;
 800a572:	bf00      	nop
	}

	return chr;
 800a574:	88fb      	ldrh	r3, [r7, #6]
}
 800a576:	4618      	mov	r0, r3
 800a578:	371c      	adds	r7, #28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	08014a30 	.word	0x08014a30
 800a588:	08014c24 	.word	0x08014c24

0800a58c <CLCD_Delay>:
******************************************************************************************************************/
#include "LCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	4603      	mov	r3, r0
 800a594:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800a596:	88fb      	ldrh	r3, [r7, #6]
 800a598:	4618      	mov	r0, r3
 800a59a:	f7f8 fa2d 	bl	80029f8 <HAL_Delay>
}
 800a59e:	bf00      	nop
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b086      	sub	sp, #24
 800a5aa:	af02      	add	r7, sp, #8
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	70fb      	strb	r3, [r7, #3]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800a5b6:	78fb      	ldrb	r3, [r7, #3]
 800a5b8:	f023 030f 	bic.w	r3, r3, #15
 800a5bc:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 800a5be:	78fb      	ldrb	r3, [r7, #3]
 800a5c0:	011b      	lsls	r3, r3, #4
 800a5c2:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	7adb      	ldrb	r3, [r3, #11]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d007      	beq.n	800a5dc <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
 800a5ce:	f043 0308 	orr.w	r3, r3, #8
 800a5d2:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 800a5d4:	7bbb      	ldrb	r3, [r7, #14]
 800a5d6:	f043 0308 	orr.w	r3, r3, #8
 800a5da:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 800a5dc:	78bb      	ldrb	r3, [r7, #2]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d108      	bne.n	800a5f4 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 800a5e2:	7bfb      	ldrb	r3, [r7, #15]
 800a5e4:	f043 0301 	orr.w	r3, r3, #1
 800a5e8:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 800a5ea:	7bbb      	ldrb	r3, [r7, #14]
 800a5ec:	f043 0301 	orr.w	r3, r3, #1
 800a5f0:	73bb      	strb	r3, [r7, #14]
 800a5f2:	e00a      	b.n	800a60a <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 800a5f4:	78bb      	ldrb	r3, [r7, #2]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d107      	bne.n	800a60a <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
 800a5fc:	f023 0301 	bic.w	r3, r3, #1
 800a600:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 800a602:	7bbb      	ldrb	r3, [r7, #14]
 800a604:	f023 0301 	bic.w	r3, r3, #1
 800a608:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
 800a60c:	f043 0304 	orr.w	r3, r3, #4
 800a610:	b2db      	uxtb	r3, r3
 800a612:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 800a614:	2001      	movs	r0, #1
 800a616:	f7ff ffb9 	bl	800a58c <CLCD_Delay>
	Data_I2C[1] = Data_H;
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
 800a61c:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 800a61e:	7bbb      	ldrb	r3, [r7, #14]
 800a620:	f043 0304 	orr.w	r3, r3, #4
 800a624:	b2db      	uxtb	r3, r3
 800a626:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 800a628:	2001      	movs	r0, #1
 800a62a:	f7ff ffaf 	bl	800a58c <CLCD_Delay>
	Data_I2C[3] = Data_L;
 800a62e:	7bbb      	ldrb	r3, [r7, #14]
 800a630:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6818      	ldr	r0, [r3, #0]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	791b      	ldrb	r3, [r3, #4]
 800a63a:	4619      	mov	r1, r3
 800a63c:	f107 0208 	add.w	r2, r7, #8
 800a640:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	2304      	movs	r3, #4
 800a648:	f7f9 fca0 	bl	8003f8c <HAL_I2C_Master_Transmit>
}
 800a64c:	bf00      	nop
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	4611      	mov	r1, r2
 800a660:	461a      	mov	r2, r3
 800a662:	460b      	mov	r3, r1
 800a664:	71fb      	strb	r3, [r7, #7]
 800a666:	4613      	mov	r3, r2
 800a668:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	79fa      	ldrb	r2, [r7, #7]
 800a674:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	79ba      	ldrb	r2, [r7, #6]
 800a67a:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	7e3a      	ldrb	r2, [r7, #24]
 800a680:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2228      	movs	r2, #40	@ 0x28
 800a686:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2206      	movs	r2, #6
 800a68c:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	220c      	movs	r2, #12
 800a692:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2214      	movs	r2, #20
 800a698:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2208      	movs	r2, #8
 800a69e:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 800a6a0:	2032      	movs	r0, #50	@ 0x32
 800a6a2:	f7ff ff73 	bl	800a58c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2133      	movs	r1, #51	@ 0x33
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f7ff ff7b 	bl	800a5a6 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2133      	movs	r1, #51	@ 0x33
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f7ff ff76 	bl	800a5a6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800a6ba:	2005      	movs	r0, #5
 800a6bc:	f7ff ff66 	bl	800a58c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2132      	movs	r1, #50	@ 0x32
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	f7ff ff6e 	bl	800a5a6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800a6ca:	2005      	movs	r0, #5
 800a6cc:	f7ff ff5e 	bl	800a58c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2120      	movs	r1, #32
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7ff ff66 	bl	800a5a6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800a6da:	2005      	movs	r0, #5
 800a6dc:	f7ff ff56 	bl	800a58c <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	79db      	ldrb	r3, [r3, #7]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f7ff ff5c 	bl	800a5a6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	7a1b      	ldrb	r3, [r3, #8]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7ff ff55 	bl	800a5a6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	7a5b      	ldrb	r3, [r3, #9]
 800a700:	2200      	movs	r2, #0
 800a702:	4619      	mov	r1, r3
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f7ff ff4e 	bl	800a5a6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	7a9b      	ldrb	r3, [r3, #10]
 800a70e:	2200      	movs	r2, #0
 800a710:	4619      	mov	r1, r3
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f7ff ff47 	bl	800a5a6 <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 800a718:	2200      	movs	r2, #0
 800a71a:	2101      	movs	r1, #1
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7ff ff42 	bl	800a5a6 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 800a722:	2200      	movs	r2, #0
 800a724:	2102      	movs	r1, #2
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f7ff ff3d 	bl	800a5a6 <CLCD_WriteI2C>
}
 800a72c:	bf00      	nop
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	70fb      	strb	r3, [r7, #3]
 800a740:	4613      	mov	r3, r2
 800a742:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 800a744:	2300      	movs	r3, #0
 800a746:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	795b      	ldrb	r3, [r3, #5]
 800a74c:	78fa      	ldrb	r2, [r7, #3]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d303      	bcc.n	800a75a <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	795b      	ldrb	r3, [r3, #5]
 800a756:	3b01      	subs	r3, #1
 800a758:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	799b      	ldrb	r3, [r3, #6]
 800a75e:	78ba      	ldrb	r2, [r7, #2]
 800a760:	429a      	cmp	r2, r3
 800a762:	d303      	bcc.n	800a76c <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	799b      	ldrb	r3, [r3, #6]
 800a768:	3b01      	subs	r3, #1
 800a76a:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 800a76c:	78bb      	ldrb	r3, [r7, #2]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d102      	bne.n	800a778 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 800a772:	78fb      	ldrb	r3, [r7, #3]
 800a774:	73fb      	strb	r3, [r7, #15]
 800a776:	e013      	b.n	800a7a0 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800a778:	78bb      	ldrb	r3, [r7, #2]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d103      	bne.n	800a786 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800a77e:	78fb      	ldrb	r3, [r7, #3]
 800a780:	3340      	adds	r3, #64	@ 0x40
 800a782:	73fb      	strb	r3, [r7, #15]
 800a784:	e00c      	b.n	800a7a0 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800a786:	78bb      	ldrb	r3, [r7, #2]
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d103      	bne.n	800a794 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 800a78c:	78fb      	ldrb	r3, [r7, #3]
 800a78e:	3314      	adds	r3, #20
 800a790:	73fb      	strb	r3, [r7, #15]
 800a792:	e005      	b.n	800a7a0 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 800a794:	78bb      	ldrb	r3, [r7, #2]
 800a796:	2b03      	cmp	r3, #3
 800a798:	d102      	bne.n	800a7a0 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800a79a:	78fb      	ldrb	r3, [r7, #3]
 800a79c:	3354      	adds	r3, #84	@ 0x54
 800a79e:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
 800a7a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7ff fefa 	bl	800a5a6 <CLCD_WriteI2C>
}
 800a7b2:	bf00      	nop
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b082      	sub	sp, #8
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800a7c6:	78fb      	ldrb	r3, [r7, #3]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff feea 	bl	800a5a6 <CLCD_WriteI2C>
}
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b082      	sub	sp, #8
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 800a7e4:	e007      	b.n	800a7f6 <CLCD_I2C_WriteString+0x1c>
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	1c5a      	adds	r2, r3, #1
 800a7ea:	603a      	str	r2, [r7, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7ff ffe2 	bl	800a7ba <CLCD_I2C_WriteChar>
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1f3      	bne.n	800a7e6 <CLCD_I2C_WriteString+0xc>
}
 800a7fe:	bf00      	nop
 800a800:	bf00      	nop
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 800a810:	2200      	movs	r2, #0
 800a812:	2101      	movs	r1, #1
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff fec6 	bl	800a5a6 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800a81a:	2005      	movs	r0, #5
 800a81c:	f7ff feb6 	bl	800a58c <CLCD_Delay>
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <CLCD_I2C_BlinkOn>:
{
	LCD->DISPLAYCTRL &= ~LCD_CURSORON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_BlinkOn(CLCD_I2C_Name* LCD)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
	LCD->DISPLAYCTRL |= LCD_BLINKON;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	7a1b      	ldrb	r3, [r3, #8]
 800a834:	f043 0301 	orr.w	r3, r3, #1
 800a838:	b2da      	uxtb	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	721a      	strb	r2, [r3, #8]
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	7a1b      	ldrb	r3, [r3, #8]
 800a842:	2200      	movs	r2, #0
 800a844:	4619      	mov	r1, r3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7ff fead 	bl	800a5a6 <CLCD_WriteI2C>
}
 800a84c:	bf00      	nop
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <CLCD_I2C_BlinkOff>:
void CLCD_I2C_BlinkOff(CLCD_I2C_Name* LCD)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	7a1b      	ldrb	r3, [r3, #8]
 800a860:	f023 0301 	bic.w	r3, r3, #1
 800a864:	b2da      	uxtb	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	721a      	strb	r2, [r3, #8]
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	7a1b      	ldrb	r3, [r3, #8]
 800a86e:	2200      	movs	r2, #0
 800a870:	4619      	mov	r1, r3
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7ff fe97 	bl	800a5a6 <CLCD_WriteI2C>
}
 800a878:	bf00      	nop
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <flash_unlock>:
 */

#include "flash.h"

void flash_unlock()
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800a884:	f7f8 fdf4 	bl	8003470 <HAL_FLASH_Unlock>
}
 800a888:	bf00      	nop
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <flash_lock>:

void flash_lock()
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	af00      	add	r7, sp, #0
  HAL_FLASH_Lock();
 800a890:	f7f8 fe10 	bl	80034b4 <HAL_FLASH_Lock>
}
 800a894:	bf00      	nop
 800a896:	bd80      	pop	{r7, pc}

0800a898 <flash_erease>:
HAL_StatusTypeDef flash_erease(uint32_t sector)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b088      	sub	sp, #32
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.Sector = sector;  //This parameter must be a value of @ref FLASHEx_Sectors
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	617b      	str	r3, [r7, #20]
	eraseInit.NbSectors = 1;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	61bb      	str	r3, [r7, #24]
	eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	60fb      	str	r3, [r7, #12]
	eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	61fb      	str	r3, [r7, #28]
	eraseInit.Banks = 1;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	613b      	str	r3, [r7, #16]
	uint32_t PageError;
	return HAL_FLASHEx_Erase(&eraseInit,&PageError);
 800a8b4:	f107 0208 	add.w	r2, r7, #8
 800a8b8:	f107 030c 	add.w	r3, r7, #12
 800a8bc:	4611      	mov	r1, r2
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7f8 ff48 	bl	8003754 <HAL_FLASHEx_Erase>
 800a8c4:	4603      	mov	r3, r0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3720      	adds	r7, #32
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <flash_write_arr>:
void flash_write_arr(uint32_t addr,uint8_t *data,uint16_t len)
{
 800a8ce:	b5b0      	push	{r4, r5, r7, lr}
 800a8d0:	b086      	sub	sp, #24
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	60f8      	str	r0, [r7, #12]
 800a8d6:	60b9      	str	r1, [r7, #8]
 800a8d8:	4613      	mov	r3, r2
 800a8da:	80fb      	strh	r3, [r7, #6]
	 for(uint16_t i=0;i<len;i+=2)
 800a8dc:	2300      	movs	r3, #0
 800a8de:	82fb      	strh	r3, [r7, #22]
 800a8e0:	e019      	b.n	800a916 <flash_write_arr+0x48>
	{
		 HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr+i ,*(data + i) | (uint16_t)*(data+i+1)<<8);
 800a8e2:	8afa      	ldrh	r2, [r7, #22]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	18d1      	adds	r1, r2, r3
 800a8e8:	8afb      	ldrh	r3, [r7, #22]
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	8afb      	ldrh	r3, [r7, #22]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	021b      	lsls	r3, r3, #8
 800a8fe:	4303      	orrs	r3, r0
 800a900:	17da      	asrs	r2, r3, #31
 800a902:	461c      	mov	r4, r3
 800a904:	4615      	mov	r5, r2
 800a906:	4622      	mov	r2, r4
 800a908:	462b      	mov	r3, r5
 800a90a:	2001      	movs	r0, #1
 800a90c:	f7f8 fd5c 	bl	80033c8 <HAL_FLASH_Program>
	 for(uint16_t i=0;i<len;i+=2)
 800a910:	8afb      	ldrh	r3, [r7, #22]
 800a912:	3302      	adds	r3, #2
 800a914:	82fb      	strh	r3, [r7, #22]
 800a916:	8afa      	ldrh	r2, [r7, #22]
 800a918:	88fb      	ldrh	r3, [r7, #6]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d3e1      	bcc.n	800a8e2 <flash_write_arr+0x14>
	 }
}
 800a91e:	bf00      	nop
 800a920:	bf00      	nop
 800a922:	3718      	adds	r7, #24
 800a924:	46bd      	mov	sp, r7
 800a926:	bdb0      	pop	{r4, r5, r7, pc}

0800a928 <flash_read_arr>:
void flash_read_arr(uint32_t addr,uint8_t *data,uint16_t len)
{
 800a928:	b480      	push	{r7}
 800a92a:	b089      	sub	sp, #36	@ 0x24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	4613      	mov	r3, r2
 800a934:	80fb      	strh	r3, [r7, #6]
	 for(uint16_t i=0;i<len;i+=2){
 800a936:	2300      	movs	r3, #0
 800a938:	83fb      	strh	r3, [r7, #30]
 800a93a:	e018      	b.n	800a96e <flash_read_arr+0x46>
		 volatile uint32_t *p= (volatile uint32_t *)(addr+i);
 800a93c:	8bfa      	ldrh	r2, [r7, #30]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	4413      	add	r3, r2
 800a942:	61bb      	str	r3, [r7, #24]
		 uint16_t data_temp=*p;
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	82fb      	strh	r3, [r7, #22]
		 //cach 1
//		 data[i] = data_temp;
//		 data[i+1] = data_temp>>8;
		 //cach 2
		 *(data+i) = data_temp;
 800a94a:	8bfb      	ldrh	r3, [r7, #30]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	4413      	add	r3, r2
 800a950:	8afa      	ldrh	r2, [r7, #22]
 800a952:	b2d2      	uxtb	r2, r2
 800a954:	701a      	strb	r2, [r3, #0]
		 *(data+i+1) = data_temp>>8;
 800a956:	8afb      	ldrh	r3, [r7, #22]
 800a958:	0a1b      	lsrs	r3, r3, #8
 800a95a:	b299      	uxth	r1, r3
 800a95c:	8bfb      	ldrh	r3, [r7, #30]
 800a95e:	3301      	adds	r3, #1
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	4413      	add	r3, r2
 800a964:	b2ca      	uxtb	r2, r1
 800a966:	701a      	strb	r2, [r3, #0]
	 for(uint16_t i=0;i<len;i+=2){
 800a968:	8bfb      	ldrh	r3, [r7, #30]
 800a96a:	3302      	adds	r3, #2
 800a96c:	83fb      	strh	r3, [r7, #30]
 800a96e:	8bfa      	ldrh	r2, [r7, #30]
 800a970:	88fb      	ldrh	r3, [r7, #6]
 800a972:	429a      	cmp	r2, r3
 800a974:	d3e2      	bcc.n	800a93c <flash_read_arr+0x14>
	 }
}
 800a976:	bf00      	nop
 800a978:	bf00      	nop
 800a97a:	3724      	adds	r7, #36	@ 0x24
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <process_button_pad_value>:
 *
 */
#include "keypad.h"
//////////////////////button fuctions/////////////////////////////
uint16_t process_button_pad_value(uint16_t btn_pad_value)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4603      	mov	r3, r0
 800a98c:	80fb      	strh	r3, [r7, #6]
  static button_state_t btn_sm_state = NOT_PRESSED;
  static uint32_t curr_time = 0;

  switch(btn_sm_state){
 800a98e:	4b29      	ldr	r3, [pc, #164]	@ (800aa34 <process_button_pad_value+0xb0>)
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	2b02      	cmp	r3, #2
 800a994:	d026      	beq.n	800a9e4 <process_button_pad_value+0x60>
 800a996:	2b02      	cmp	r3, #2
 800a998:	dc47      	bgt.n	800aa2a <process_button_pad_value+0xa6>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <process_button_pad_value+0x20>
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d00c      	beq.n	800a9bc <process_button_pad_value+0x38>
 800a9a2:	e042      	b.n	800aa2a <process_button_pad_value+0xa6>
    case NOT_PRESSED:{
      if(btn_pad_value){
 800a9a4:	88fb      	ldrh	r3, [r7, #6]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d03a      	beq.n	800aa20 <process_button_pad_value+0x9c>
        btn_sm_state = BOUNCE;
 800a9aa:	4b22      	ldr	r3, [pc, #136]	@ (800aa34 <process_button_pad_value+0xb0>)
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	701a      	strb	r2, [r3, #0]
        curr_time = HAL_GetTick();
 800a9b0:	f7f8 f816 	bl	80029e0 <HAL_GetTick>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	4a20      	ldr	r2, [pc, #128]	@ (800aa38 <process_button_pad_value+0xb4>)
 800a9b8:	6013      	str	r3, [r2, #0]
      }
      break;
 800a9ba:	e031      	b.n	800aa20 <process_button_pad_value+0x9c>
    }
    case BOUNCE:{
      if(HAL_GetTick() - curr_time >= 50 ){
 800a9bc:	f7f8 f810 	bl	80029e0 <HAL_GetTick>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	4b1d      	ldr	r3, [pc, #116]	@ (800aa38 <process_button_pad_value+0xb4>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	2b31      	cmp	r3, #49	@ 0x31
 800a9ca:	d92b      	bls.n	800aa24 <process_button_pad_value+0xa0>
        //50ms has passed
        if(btn_pad_value){
 800a9cc:	88fb      	ldrh	r3, [r7, #6]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d004      	beq.n	800a9dc <process_button_pad_value+0x58>
          btn_sm_state = PRESSED;
 800a9d2:	4b18      	ldr	r3, [pc, #96]	@ (800aa34 <process_button_pad_value+0xb0>)
 800a9d4:	2202      	movs	r2, #2
 800a9d6:	701a      	strb	r2, [r3, #0]
          return btn_pad_value;
 800a9d8:	88fb      	ldrh	r3, [r7, #6]
 800a9da:	e027      	b.n	800aa2c <process_button_pad_value+0xa8>
        }
        else
          btn_sm_state = NOT_PRESSED;
 800a9dc:	4b15      	ldr	r3, [pc, #84]	@ (800aa34 <process_button_pad_value+0xb0>)
 800a9de:	2200      	movs	r2, #0
 800a9e0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a9e2:	e01f      	b.n	800aa24 <process_button_pad_value+0xa0>
    }
    case PRESSED:{
      if(!btn_pad_value){
 800a9e4:	88fb      	ldrh	r3, [r7, #6]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d108      	bne.n	800a9fc <process_button_pad_value+0x78>
        btn_sm_state = BOUNCE;
 800a9ea:	4b12      	ldr	r3, [pc, #72]	@ (800aa34 <process_button_pad_value+0xb0>)
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	701a      	strb	r2, [r3, #0]
        curr_time = HAL_GetTick();
 800a9f0:	f7f7 fff6 	bl	80029e0 <HAL_GetTick>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	4a10      	ldr	r2, [pc, #64]	@ (800aa38 <process_button_pad_value+0xb4>)
 800a9f8:	6013      	str	r3, [r2, #0]
				if(HAL_GetTick() - curr_time >= 300 ){
					btn_sm_state = BOUNCE;
					curr_time = HAL_GetTick();
				}
			}
      break;
 800a9fa:	e015      	b.n	800aa28 <process_button_pad_value+0xa4>
				if(HAL_GetTick() - curr_time >= 300 ){
 800a9fc:	f7f7 fff0 	bl	80029e0 <HAL_GetTick>
 800aa00:	4602      	mov	r2, r0
 800aa02:	4b0d      	ldr	r3, [pc, #52]	@ (800aa38 <process_button_pad_value+0xb4>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800aa0c:	d30c      	bcc.n	800aa28 <process_button_pad_value+0xa4>
					btn_sm_state = BOUNCE;
 800aa0e:	4b09      	ldr	r3, [pc, #36]	@ (800aa34 <process_button_pad_value+0xb0>)
 800aa10:	2201      	movs	r2, #1
 800aa12:	701a      	strb	r2, [r3, #0]
					curr_time = HAL_GetTick();
 800aa14:	f7f7 ffe4 	bl	80029e0 <HAL_GetTick>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	4a07      	ldr	r2, [pc, #28]	@ (800aa38 <process_button_pad_value+0xb4>)
 800aa1c:	6013      	str	r3, [r2, #0]
      break;
 800aa1e:	e003      	b.n	800aa28 <process_button_pad_value+0xa4>
      break;
 800aa20:	bf00      	nop
 800aa22:	e002      	b.n	800aa2a <process_button_pad_value+0xa6>
      break;
 800aa24:	bf00      	nop
 800aa26:	e000      	b.n	800aa2a <process_button_pad_value+0xa6>
      break;
 800aa28:	bf00      	nop
    }

  }

  return 0;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	2000276c 	.word	0x2000276c
 800aa38:	20002770 	.word	0x20002770

0800aa3c <read_keypad>:

///////////////////////////scan keypad////////////////////////////////////////////
uint16_t read_keypad (void)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
	uint16_t key_state = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	80fb      	strh	r3, [r7, #6]
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  //Pull the R1 low
 800aa46:	2200      	movs	r2, #0
 800aa48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aa4c:	488d      	ldr	r0, [pc, #564]	@ (800ac84 <read_keypad+0x248>)
 800aa4e:	f7f9 f93f 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 800aa52:	2201      	movs	r2, #1
 800aa54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800aa58:	488a      	ldr	r0, [pc, #552]	@ (800ac84 <read_keypad+0x248>)
 800aa5a:	f7f9 f939 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800aa64:	4887      	ldr	r0, [pc, #540]	@ (800ac84 <read_keypad+0x248>)
 800aa66:	f7f9 f933 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800aa70:	4884      	ldr	r0, [pc, #528]	@ (800ac84 <read_keypad+0x248>)
 800aa72:	f7f9 f92d 	bl	8003cd0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 800aa76:	2140      	movs	r1, #64	@ 0x40
 800aa78:	4883      	ldr	r0, [pc, #524]	@ (800ac88 <read_keypad+0x24c>)
 800aa7a:	f7f9 f911 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d103      	bne.n	800aa8c <read_keypad+0x50>
	{
		key_state |= (1 << 0); // button 1
 800aa84:	88fb      	ldrh	r3, [r7, #6]
 800aa86:	f043 0301 	orr.w	r3, r3, #1
 800aa8a:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 800aa8c:	2180      	movs	r1, #128	@ 0x80
 800aa8e:	487e      	ldr	r0, [pc, #504]	@ (800ac88 <read_keypad+0x24c>)
 800aa90:	f7f9 f906 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d103      	bne.n	800aaa2 <read_keypad+0x66>
	{
		key_state |= (1 << 1); // button 2
 800aa9a:	88fb      	ldrh	r3, [r7, #6]
 800aa9c:	f043 0302 	orr.w	r3, r3, #2
 800aaa0:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 800aaa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800aaa6:	4878      	ldr	r0, [pc, #480]	@ (800ac88 <read_keypad+0x24c>)
 800aaa8:	f7f9 f8fa 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d103      	bne.n	800aaba <read_keypad+0x7e>
	{
		key_state |= (1 << 2); // button 3
 800aab2:	88fb      	ldrh	r3, [r7, #6]
 800aab4:	f043 0304 	orr.w	r3, r3, #4
 800aab8:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 800aaba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aabe:	4872      	ldr	r0, [pc, #456]	@ (800ac88 <read_keypad+0x24c>)
 800aac0:	f7f9 f8ee 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d103      	bne.n	800aad2 <read_keypad+0x96>
	{
		key_state |= (1 << 3); // button A
 800aaca:	88fb      	ldrh	r3, [r7, #6]
 800aacc:	f043 0308 	orr.w	r3, r3, #8
 800aad0:	80fb      	strh	r3, [r7, #6]
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 800aad2:	2201      	movs	r2, #1
 800aad4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aad8:	486a      	ldr	r0, [pc, #424]	@ (800ac84 <read_keypad+0x248>)
 800aada:	f7f9 f8f9 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Pull the R2 High
 800aade:	2200      	movs	r2, #0
 800aae0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800aae4:	4867      	ldr	r0, [pc, #412]	@ (800ac84 <read_keypad+0x248>)
 800aae6:	f7f9 f8f3 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 800aaea:	2201      	movs	r2, #1
 800aaec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800aaf0:	4864      	ldr	r0, [pc, #400]	@ (800ac84 <read_keypad+0x248>)
 800aaf2:	f7f9 f8ed 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800aafc:	4861      	ldr	r0, [pc, #388]	@ (800ac84 <read_keypad+0x248>)
 800aafe:	f7f9 f8e7 	bl	8003cd0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 800ab02:	2140      	movs	r1, #64	@ 0x40
 800ab04:	4860      	ldr	r0, [pc, #384]	@ (800ac88 <read_keypad+0x24c>)
 800ab06:	f7f9 f8cb 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d103      	bne.n	800ab18 <read_keypad+0xdc>
	{
		key_state |= (1 << 4); // button 4
 800ab10:	88fb      	ldrh	r3, [r7, #6]
 800ab12:	f043 0310 	orr.w	r3, r3, #16
 800ab16:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 800ab18:	2180      	movs	r1, #128	@ 0x80
 800ab1a:	485b      	ldr	r0, [pc, #364]	@ (800ac88 <read_keypad+0x24c>)
 800ab1c:	f7f9 f8c0 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d103      	bne.n	800ab2e <read_keypad+0xf2>
	{
		key_state |= (1 << 5); // button 5
 800ab26:	88fb      	ldrh	r3, [r7, #6]
 800ab28:	f043 0320 	orr.w	r3, r3, #32
 800ab2c:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 800ab2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ab32:	4855      	ldr	r0, [pc, #340]	@ (800ac88 <read_keypad+0x24c>)
 800ab34:	f7f9 f8b4 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d103      	bne.n	800ab46 <read_keypad+0x10a>
	{
		key_state |= (1 << 6); // button 6
 800ab3e:	88fb      	ldrh	r3, [r7, #6]
 800ab40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab44:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 800ab46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ab4a:	484f      	ldr	r0, [pc, #316]	@ (800ac88 <read_keypad+0x24c>)
 800ab4c:	f7f9 f8a8 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d103      	bne.n	800ab5e <read_keypad+0x122>
	{
		key_state |= (1 << 7); // button B
 800ab56:	88fb      	ldrh	r3, [r7, #6]
 800ab58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab5c:	80fb      	strh	r3, [r7, #6]
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ab64:	4847      	ldr	r0, [pc, #284]	@ (800ac84 <read_keypad+0x248>)
 800ab66:	f7f9 f8b3 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ab70:	4844      	ldr	r0, [pc, #272]	@ (800ac84 <read_keypad+0x248>)
 800ab72:	f7f9 f8ad 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Pull the R3 High
 800ab76:	2200      	movs	r2, #0
 800ab78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ab7c:	4841      	ldr	r0, [pc, #260]	@ (800ac84 <read_keypad+0x248>)
 800ab7e:	f7f9 f8a7 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 800ab82:	2201      	movs	r2, #1
 800ab84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ab88:	483e      	ldr	r0, [pc, #248]	@ (800ac84 <read_keypad+0x248>)
 800ab8a:	f7f9 f8a1 	bl	8003cd0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 800ab8e:	2140      	movs	r1, #64	@ 0x40
 800ab90:	483d      	ldr	r0, [pc, #244]	@ (800ac88 <read_keypad+0x24c>)
 800ab92:	f7f9 f885 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d103      	bne.n	800aba4 <read_keypad+0x168>
	{
		key_state |= (1 << 8); // button 7
 800ab9c:	88fb      	ldrh	r3, [r7, #6]
 800ab9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aba2:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 800aba4:	2180      	movs	r1, #128	@ 0x80
 800aba6:	4838      	ldr	r0, [pc, #224]	@ (800ac88 <read_keypad+0x24c>)
 800aba8:	f7f9 f87a 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d103      	bne.n	800abba <read_keypad+0x17e>
	{
		key_state |= (1 << 9); // button 8
 800abb2:	88fb      	ldrh	r3, [r7, #6]
 800abb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800abb8:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 800abba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800abbe:	4832      	ldr	r0, [pc, #200]	@ (800ac88 <read_keypad+0x24c>)
 800abc0:	f7f9 f86e 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d103      	bne.n	800abd2 <read_keypad+0x196>
	{
		key_state |= (1 << 10); // button 9
 800abca:	88fb      	ldrh	r3, [r7, #6]
 800abcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800abd0:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 800abd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800abd6:	482c      	ldr	r0, [pc, #176]	@ (800ac88 <read_keypad+0x24c>)
 800abd8:	f7f9 f862 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d103      	bne.n	800abea <read_keypad+0x1ae>
	{
		key_state |= (1 << 11); // button C
 800abe2:	88fb      	ldrh	r3, [r7, #6]
 800abe4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800abe8:	80fb      	strh	r3, [r7, #6]
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 800abea:	2201      	movs	r2, #1
 800abec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800abf0:	4824      	ldr	r0, [pc, #144]	@ (800ac84 <read_keypad+0x248>)
 800abf2:	f7f9 f86d 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 800abf6:	2201      	movs	r2, #1
 800abf8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800abfc:	4821      	ldr	r0, [pc, #132]	@ (800ac84 <read_keypad+0x248>)
 800abfe:	f7f9 f867 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 800ac02:	2201      	movs	r2, #1
 800ac04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ac08:	481e      	ldr	r0, [pc, #120]	@ (800ac84 <read_keypad+0x248>)
 800ac0a:	f7f9 f861 	bl	8003cd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Pull the R4 High
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ac14:	481b      	ldr	r0, [pc, #108]	@ (800ac84 <read_keypad+0x248>)
 800ac16:	f7f9 f85b 	bl	8003cd0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 800ac1a:	2140      	movs	r1, #64	@ 0x40
 800ac1c:	481a      	ldr	r0, [pc, #104]	@ (800ac88 <read_keypad+0x24c>)
 800ac1e:	f7f9 f83f 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d103      	bne.n	800ac30 <read_keypad+0x1f4>
	{
		key_state |= (1 << 12); // button *
 800ac28:	88fb      	ldrh	r3, [r7, #6]
 800ac2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ac2e:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 800ac30:	2180      	movs	r1, #128	@ 0x80
 800ac32:	4815      	ldr	r0, [pc, #84]	@ (800ac88 <read_keypad+0x24c>)
 800ac34:	f7f9 f834 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d103      	bne.n	800ac46 <read_keypad+0x20a>
	{
		key_state |= (1 << 13); // button 0
 800ac3e:	88fb      	ldrh	r3, [r7, #6]
 800ac40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ac44:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 800ac46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ac4a:	480f      	ldr	r0, [pc, #60]	@ (800ac88 <read_keypad+0x24c>)
 800ac4c:	f7f9 f828 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d103      	bne.n	800ac5e <read_keypad+0x222>
	{
		key_state |= (1 << 14); // button #
 800ac56:	88fb      	ldrh	r3, [r7, #6]
 800ac58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ac5c:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 800ac5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ac62:	4809      	ldr	r0, [pc, #36]	@ (800ac88 <read_keypad+0x24c>)
 800ac64:	f7f9 f81c 	bl	8003ca0 <HAL_GPIO_ReadPin>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d105      	bne.n	800ac7a <read_keypad+0x23e>
	{
		key_state |= (1 << 15); // button D
 800ac6e:	88fb      	ldrh	r3, [r7, #6]
 800ac70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac78:	80fb      	strh	r3, [r7, #6]
	}

	return key_state ;
 800ac7a:	88fb      	ldrh	r3, [r7, #6]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	40020400 	.word	0x40020400
 800ac88:	40020800 	.word	0x40020800

0800ac8c <print_cli>:
#include "stdarg.h"
#include "stdio.h"
extern UART_HandleTypeDef huart1;

void print_cli(const char* str, ...)
{
 800ac8c:	b40f      	push	{r0, r1, r2, r3}
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b0a2      	sub	sp, #136	@ 0x88
 800ac92:	af00      	add	r7, sp, #0
  char stringArray[128];
	
	va_list args;
	va_start(args,str);
 800ac94:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800ac98:	603b      	str	r3, [r7, #0]
	uint8_t len_str = vsprintf(stringArray,str,args);
 800ac9a:	1d3b      	adds	r3, r7, #4
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aca2:	4618      	mov	r0, r3
 800aca4:	f007 fa2a 	bl	80120fc <vsiprintf>
 800aca8:	4603      	mov	r3, r0
 800acaa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	va_end(args);
	
	HAL_UART_Transmit(&huart1,(uint8_t *)stringArray,len_str,200);
 800acae:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	1d39      	adds	r1, r7, #4
 800acb6:	23c8      	movs	r3, #200	@ 0xc8
 800acb8:	4804      	ldr	r0, [pc, #16]	@ (800accc <print_cli+0x40>)
 800acba:	f7fb fe37 	bl	800692c <HAL_UART_Transmit>
}
 800acbe:	bf00      	nop
 800acc0:	3788      	adds	r7, #136	@ 0x88
 800acc2:	46bd      	mov	sp, r7
 800acc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acc8:	b004      	add	sp, #16
 800acca:	4770      	bx	lr
 800accc:	20000358 	.word	0x20000358

0800acd0 <pwm_set_duty>:
//	}
//	if(Channel== TIM_CHANNEL_4){
//	 htim -> Instance -> CCR4 = (duty*temp)/100;
//	}
//}
void pwm_set_duty(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t duty){
 800acd0:	b480      	push	{r7}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	4613      	mov	r3, r2
 800acdc:	71fb      	strb	r3, [r7, #7]
    uint32_t temp = htim->Instance->ARR;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace4:	613b      	str	r3, [r7, #16]
    uint32_t ccr_value = (duty * temp) / 100;
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	fb02 f303 	mul.w	r3, r2, r3
 800acee:	4a16      	ldr	r2, [pc, #88]	@ (800ad48 <pwm_set_duty+0x78>)
 800acf0:	fba2 2303 	umull	r2, r3, r2, r3
 800acf4:	095b      	lsrs	r3, r3, #5
 800acf6:	617b      	str	r3, [r7, #20]

    if (ccr_value > temp) {
 800acf8:	697a      	ldr	r2, [r7, #20]
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d901      	bls.n	800ad04 <pwm_set_duty+0x34>
        ccr_value = temp;  // max of ccr
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	617b      	str	r3, [r7, #20]
    }

    if(Channel == TIM_CHANNEL_1) htim->Instance->CCR1 = ccr_value;
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d103      	bne.n	800ad12 <pwm_set_duty+0x42>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	697a      	ldr	r2, [r7, #20]
 800ad10:	635a      	str	r2, [r3, #52]	@ 0x34
    if(Channel == TIM_CHANNEL_2) htim->Instance->CCR2 = ccr_value;
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2b04      	cmp	r3, #4
 800ad16:	d103      	bne.n	800ad20 <pwm_set_duty+0x50>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(Channel == TIM_CHANNEL_3) htim->Instance->CCR3 = ccr_value;
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2b08      	cmp	r3, #8
 800ad24:	d103      	bne.n	800ad2e <pwm_set_duty+0x5e>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	697a      	ldr	r2, [r7, #20]
 800ad2c:	63da      	str	r2, [r3, #60]	@ 0x3c
    if(Channel == TIM_CHANNEL_4) htim->Instance->CCR4 = ccr_value;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2b0c      	cmp	r3, #12
 800ad32:	d103      	bne.n	800ad3c <pwm_set_duty+0x6c>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	697a      	ldr	r2, [r7, #20]
 800ad3a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ad3c:	bf00      	nop
 800ad3e:	371c      	adds	r7, #28
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr
 800ad48:	51eb851f 	.word	0x51eb851f

0800ad4c <delete_data>:
 */

#include "main.h"
#include <math.h>

void delete_data(parameter_t *data) {
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
    if (data->len > 0) {
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	899b      	ldrh	r3, [r3, #12]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00b      	beq.n	800ad74 <delete_data+0x28>
        data->len--;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	899b      	ldrh	r3, [r3, #12]
 800ad60:	3b01      	subs	r3, #1
 800ad62:	b29a      	uxth	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	819a      	strh	r2, [r3, #12]
        data->payload[data->len] = '\0';
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	899b      	ldrh	r3, [r3, #12]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2100      	movs	r1, #0
 800ad72:	5499      	strb	r1, [r3, r2]
    }
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <add_data>:

void add_data(parameter_t *data, char c) {
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	460b      	mov	r3, r1
 800ad8a:	70fb      	strb	r3, [r7, #3]
    if (data->len < 10) {
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	899b      	ldrh	r3, [r3, #12]
 800ad90:	2b09      	cmp	r3, #9
 800ad92:	d811      	bhi.n	800adb8 <add_data+0x38>
        data->payload[data->len] = c;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	899b      	ldrh	r3, [r3, #12]
 800ad98:	4619      	mov	r1, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	78fa      	ldrb	r2, [r7, #3]
 800ad9e:	545a      	strb	r2, [r3, r1]
        data->len++;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	899b      	ldrh	r3, [r3, #12]
 800ada4:	3301      	adds	r3, #1
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	819a      	strh	r2, [r3, #12]
        data->payload[data->len] = '\0';
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	899b      	ldrh	r3, [r3, #12]
 800adb0:	461a      	mov	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2100      	movs	r1, #0
 800adb6:	5499      	strb	r1, [r3, r2]
    }
}
 800adb8:	bf00      	nop
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <set_cow>:

void set_cow(uint8_t prev_state, uint8_t new_state) {
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	460a      	mov	r2, r1
 800adce:	71fb      	strb	r3, [r7, #7]
 800add0:	4613      	mov	r3, r2
 800add2:	71bb      	strb	r3, [r7, #6]
    CLCD_I2C_SetCursor(&LCD1, 19, prev_state); // delete the "<" character from old position
 800add4:	79fb      	ldrb	r3, [r7, #7]
 800add6:	461a      	mov	r2, r3
 800add8:	2113      	movs	r1, #19
 800adda:	480a      	ldr	r0, [pc, #40]	@ (800ae04 <set_cow+0x40>)
 800addc:	f7ff fcaa 	bl	800a734 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, " ");
 800ade0:	4909      	ldr	r1, [pc, #36]	@ (800ae08 <set_cow+0x44>)
 800ade2:	4808      	ldr	r0, [pc, #32]	@ (800ae04 <set_cow+0x40>)
 800ade4:	f7ff fcf9 	bl	800a7da <CLCD_I2C_WriteString>

    CLCD_I2C_SetCursor(&LCD1, 19, new_state); // store the "<" character from new position
 800ade8:	79bb      	ldrb	r3, [r7, #6]
 800adea:	461a      	mov	r2, r3
 800adec:	2113      	movs	r1, #19
 800adee:	4805      	ldr	r0, [pc, #20]	@ (800ae04 <set_cow+0x40>)
 800adf0:	f7ff fca0 	bl	800a734 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, "<");
 800adf4:	4905      	ldr	r1, [pc, #20]	@ (800ae0c <set_cow+0x48>)
 800adf6:	4803      	ldr	r0, [pc, #12]	@ (800ae04 <set_cow+0x40>)
 800adf8:	f7ff fcef 	bl	800a7da <CLCD_I2C_WriteString>
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	200003a0 	.word	0x200003a0
 800ae08:	080146dc 	.word	0x080146dc
 800ae0c:	080146e0 	.word	0x080146e0

0800ae10 <getnumber>:

uint8_t getnumber(uint8_t *p , uint16_t len)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	807b      	strh	r3, [r7, #2]
    uint16_t value = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	81fb      	strh	r3, [r7, #14]

    for (int i = 0; i < len; i++) {
 800ae20:	2300      	movs	r3, #0
 800ae22:	60bb      	str	r3, [r7, #8]
 800ae24:	e010      	b.n	800ae48 <getnumber+0x38>
        value = value * 10 + (p[i] - '0');  // convert from array to int
 800ae26:	89fb      	ldrh	r3, [r7, #14]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	0092      	lsls	r2, r2, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	005b      	lsls	r3, r3, #1
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	440a      	add	r2, r1
 800ae38:	7812      	ldrb	r2, [r2, #0]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	3b30      	subs	r3, #48	@ 0x30
 800ae40:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < len; i++) {
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	3301      	adds	r3, #1
 800ae46:	60bb      	str	r3, [r7, #8]
 800ae48:	887b      	ldrh	r3, [r7, #2]
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	dbea      	blt.n	800ae26 <getnumber+0x16>
    }

    return value;
 800ae50:	89fb      	ldrh	r3, [r7, #14]
 800ae52:	b2db      	uxtb	r3, r3
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <sensor_task>:
float temp = 0;
void sensor_task(void *param) {
 800ae60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae64:	b088      	sub	sp, #32
 800ae66:	af04      	add	r7, sp, #16
 800ae68:	6078      	str	r0, [r7, #4]
	static char show_data[40];
	static char *data = show_data;
	uint16_t adc=0;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	81fb      	strh	r3, [r7, #14]
	uint16_t Rth=0; // value of NTC resistor
 800ae6e:	2300      	movs	r3, #0
 800ae70:	81bb      	strh	r3, [r7, #12]
	static uint16_t R=10; // value of resitor
	static uint16_t B=3050; // B of NTC 16D7 in the Steinhart-Hart equation
//	UBaseType_t uxHighWaterMark;
    while (1) {
		HAL_ADC_Start(&hadc1);
 800ae72:	484e      	ldr	r0, [pc, #312]	@ (800afac <sensor_task+0x14c>)
 800ae74:	f7f7 fe28 	bl	8002ac8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,10);
 800ae78:	210a      	movs	r1, #10
 800ae7a:	484c      	ldr	r0, [pc, #304]	@ (800afac <sensor_task+0x14c>)
 800ae7c:	f7f7 ff0b 	bl	8002c96 <HAL_ADC_PollForConversion>
		adc=HAL_ADC_GetValue(&hadc1);
 800ae80:	484a      	ldr	r0, [pc, #296]	@ (800afac <sensor_task+0x14c>)
 800ae82:	f7f7 ff93 	bl	8002dac <HAL_ADC_GetValue>
 800ae86:	4603      	mov	r3, r0
 800ae88:	81fb      	strh	r3, [r7, #14]
		HAL_ADC_Stop(&hadc1);
 800ae8a:	4848      	ldr	r0, [pc, #288]	@ (800afac <sensor_task+0x14c>)
 800ae8c:	f7f7 fed0 	bl	8002c30 <HAL_ADC_Stop>

		Rth =((4095*R/adc)-R) + 273 ;
 800ae90:	4b47      	ldr	r3, [pc, #284]	@ (800afb0 <sensor_task+0x150>)
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	461a      	mov	r2, r3
 800ae96:	4613      	mov	r3, r2
 800ae98:	031b      	lsls	r3, r3, #12
 800ae9a:	1a9a      	subs	r2, r3, r2
 800ae9c:	89fb      	ldrh	r3, [r7, #14]
 800ae9e:	fb92 f3f3 	sdiv	r3, r2, r3
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	4b42      	ldr	r3, [pc, #264]	@ (800afb0 <sensor_task+0x150>)
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	f203 1311 	addw	r3, r3, #273	@ 0x111
 800aeb0:	81bb      	strh	r3, [r7, #12]
		temp = 1.0f / (1.0f / 298.0f + logf(Rth / 298.0f) / B) - 273.0f; // Calculate temperature through the Steinhart-Hart equation
 800aeb2:	89bb      	ldrh	r3, [r7, #12]
 800aeb4:	ee07 3a90 	vmov	s15, r3
 800aeb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aebc:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800afb4 <sensor_task+0x154>
 800aec0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800aec4:	eeb0 0a47 	vmov.f32	s0, s14
 800aec8:	f009 f9e8 	bl	801429c <logf>
 800aecc:	eef0 6a40 	vmov.f32	s13, s0
 800aed0:	4b39      	ldr	r3, [pc, #228]	@ (800afb8 <sensor_task+0x158>)
 800aed2:	881b      	ldrh	r3, [r3, #0]
 800aed4:	ee07 3a90 	vmov	s15, r3
 800aed8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aedc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aee0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800afbc <sensor_task+0x15c>
 800aee4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aee8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aef0:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800afc0 <sensor_task+0x160>
 800aef4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aef8:	4b32      	ldr	r3, [pc, #200]	@ (800afc4 <sensor_task+0x164>)
 800aefa:	edc3 7a00 	vstr	s15, [r3]

		sprintf((char*)show_data,"s1:%d t1:%d s2:%d t2:%d T:%.2f",parameter_read.s1,parameter_read.t1,parameter_read.s2,parameter_read.t2,temp);
 800aefe:	4b32      	ldr	r3, [pc, #200]	@ (800afc8 <sensor_task+0x168>)
 800af00:	7adb      	ldrb	r3, [r3, #11]
 800af02:	461e      	mov	r6, r3
 800af04:	4b30      	ldr	r3, [pc, #192]	@ (800afc8 <sensor_task+0x168>)
 800af06:	7b1b      	ldrb	r3, [r3, #12]
 800af08:	4698      	mov	r8, r3
 800af0a:	4b2f      	ldr	r3, [pc, #188]	@ (800afc8 <sensor_task+0x168>)
 800af0c:	7b5b      	ldrb	r3, [r3, #13]
 800af0e:	461c      	mov	r4, r3
 800af10:	4b2d      	ldr	r3, [pc, #180]	@ (800afc8 <sensor_task+0x168>)
 800af12:	7b9b      	ldrb	r3, [r3, #14]
 800af14:	461d      	mov	r5, r3
 800af16:	4b2b      	ldr	r3, [pc, #172]	@ (800afc4 <sensor_task+0x164>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7f5 fb74 	bl	8000608 <__aeabi_f2d>
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af28:	9501      	str	r5, [sp, #4]
 800af2a:	9400      	str	r4, [sp, #0]
 800af2c:	4643      	mov	r3, r8
 800af2e:	4632      	mov	r2, r6
 800af30:	4926      	ldr	r1, [pc, #152]	@ (800afcc <sensor_task+0x16c>)
 800af32:	4827      	ldr	r0, [pc, #156]	@ (800afd0 <sensor_task+0x170>)
 800af34:	f007 f868 	bl	8012008 <siprintf>
		CLCD_I2C_Clear(&LCD1);
 800af38:	4826      	ldr	r0, [pc, #152]	@ (800afd4 <sensor_task+0x174>)
 800af3a:	f7ff fc65 	bl	800a808 <CLCD_I2C_Clear>
		CLCD_I2C_WriteString(&LCD1, show_data);
 800af3e:	4924      	ldr	r1, [pc, #144]	@ (800afd0 <sensor_task+0x170>)
 800af40:	4824      	ldr	r0, [pc, #144]	@ (800afd4 <sensor_task+0x174>)
 800af42:	f7ff fc4a 	bl	800a7da <CLCD_I2C_WriteString>
		sprintf((char*)show_data,"s1:%d t1:%d s2:%d t2:%d T:%.2f\n",parameter_read.s1,parameter_read.t1,parameter_read.s2,parameter_read.t2,temp);
 800af46:	4b20      	ldr	r3, [pc, #128]	@ (800afc8 <sensor_task+0x168>)
 800af48:	7adb      	ldrb	r3, [r3, #11]
 800af4a:	461e      	mov	r6, r3
 800af4c:	4b1e      	ldr	r3, [pc, #120]	@ (800afc8 <sensor_task+0x168>)
 800af4e:	7b1b      	ldrb	r3, [r3, #12]
 800af50:	4698      	mov	r8, r3
 800af52:	4b1d      	ldr	r3, [pc, #116]	@ (800afc8 <sensor_task+0x168>)
 800af54:	7b5b      	ldrb	r3, [r3, #13]
 800af56:	461c      	mov	r4, r3
 800af58:	4b1b      	ldr	r3, [pc, #108]	@ (800afc8 <sensor_task+0x168>)
 800af5a:	7b9b      	ldrb	r3, [r3, #14]
 800af5c:	461d      	mov	r5, r3
 800af5e:	4b19      	ldr	r3, [pc, #100]	@ (800afc4 <sensor_task+0x164>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4618      	mov	r0, r3
 800af64:	f7f5 fb50 	bl	8000608 <__aeabi_f2d>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af70:	9501      	str	r5, [sp, #4]
 800af72:	9400      	str	r4, [sp, #0]
 800af74:	4643      	mov	r3, r8
 800af76:	4632      	mov	r2, r6
 800af78:	4917      	ldr	r1, [pc, #92]	@ (800afd8 <sensor_task+0x178>)
 800af7a:	4815      	ldr	r0, [pc, #84]	@ (800afd0 <sensor_task+0x170>)
 800af7c:	f007 f844 	bl	8012008 <siprintf>
		xQueueSend(q_print,&data,portMAX_DELAY);
 800af80:	4b16      	ldr	r3, [pc, #88]	@ (800afdc <sensor_task+0x17c>)
 800af82:	6818      	ldr	r0, [r3, #0]
 800af84:	2300      	movs	r3, #0
 800af86:	f04f 32ff 	mov.w	r2, #4294967295
 800af8a:	4915      	ldr	r1, [pc, #84]	@ (800afe0 <sensor_task+0x180>)
 800af8c:	f001 fc40 	bl	800c810 <xQueueGenericSend>
		xSemaphoreGive(xSemaphore);
 800af90:	4b14      	ldr	r3, [pc, #80]	@ (800afe4 <sensor_task+0x184>)
 800af92:	6818      	ldr	r0, [r3, #0]
 800af94:	2300      	movs	r3, #0
 800af96:	2200      	movs	r2, #0
 800af98:	2100      	movs	r1, #0
 800af9a:	f001 fc39 	bl	800c810 <xQueueGenericSend>
//		  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
//		  print_cli("sensor task: %lu bytes\n", uxHighWaterMark);
		vTaskDelay(pdMS_TO_TICKS(1000));
 800af9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800afa2:	f002 fa97 	bl	800d4d4 <vTaskDelay>
		HAL_ADC_Start(&hadc1);
 800afa6:	bf00      	nop
 800afa8:	e763      	b.n	800ae72 <sensor_task+0x12>
 800afaa:	bf00      	nop
 800afac:	2000021c 	.word	0x2000021c
 800afb0:	20000024 	.word	0x20000024
 800afb4:	43950000 	.word	0x43950000
 800afb8:	20000026 	.word	0x20000026
 800afbc:	3b5beb62 	.word	0x3b5beb62
 800afc0:	43888000 	.word	0x43888000
 800afc4:	20002774 	.word	0x20002774
 800afc8:	200003e4 	.word	0x200003e4
 800afcc:	080146e4 	.word	0x080146e4
 800afd0:	2000277c 	.word	0x2000277c
 800afd4:	200003a0 	.word	0x200003a0
 800afd8:	08014704 	.word	0x08014704
 800afdc:	200003c8 	.word	0x200003c8
 800afe0:	20000028 	.word	0x20000028
 800afe4:	200003cc 	.word	0x200003cc

0800afe8 <print_task>:
    }
}

void print_task(void *param){
 800afe8:	b590      	push	{r4, r7, lr}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 800aff0:	4b0b      	ldr	r3, [pc, #44]	@ (800b020 <print_task+0x38>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f107 010c 	add.w	r1, r7, #12
 800aff8:	f04f 32ff 	mov.w	r2, #4294967295
 800affc:	4618      	mov	r0, r3
 800affe:	f001 fd15 	bl	800ca2c <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 800b002:	68fc      	ldr	r4, [r7, #12]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	4618      	mov	r0, r3
 800b008:	f7f5 f992 	bl	8000330 <strlen>
 800b00c:	4603      	mov	r3, r0
 800b00e:	b29a      	uxth	r2, r3
 800b010:	f04f 33ff 	mov.w	r3, #4294967295
 800b014:	4621      	mov	r1, r4
 800b016:	4803      	ldr	r0, [pc, #12]	@ (800b024 <print_task+0x3c>)
 800b018:	f7fb fc88 	bl	800692c <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 800b01c:	bf00      	nop
 800b01e:	e7e7      	b.n	800aff0 <print_task+0x8>
 800b020:	200003c8 	.word	0x200003c8
 800b024:	20000358 	.word	0x20000358

0800b028 <motor_task>:

	}

}

void motor_task(void *param){
 800b028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b02c:	b08a      	sub	sp, #40	@ 0x28
 800b02e:	af00      	add	r7, sp, #0
 800b030:	61f8      	str	r0, [r7, #28]

//	  UBaseType_t uxHighWaterMark;
	  // start timer
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800b032:	2100      	movs	r1, #0
 800b034:	486d      	ldr	r0, [pc, #436]	@ (800b1ec <motor_task+0x1c4>)
 800b036:	f7fa fd2b 	bl	8005a90 <HAL_TIM_PWM_Start>
	  const char* msg_s1 = "run motor with s1\n";
 800b03a:	4b6d      	ldr	r3, [pc, #436]	@ (800b1f0 <motor_task+0x1c8>)
 800b03c:	627b      	str	r3, [r7, #36]	@ 0x24
	  const char* msg_s2 = "run motor with s2\n";
 800b03e:	4b6d      	ldr	r3, [pc, #436]	@ (800b1f4 <motor_task+0x1cc>)
 800b040:	623b      	str	r3, [r7, #32]
	while(1){

		      xQueueSend(q_print,&msg_s1,portMAX_DELAY);
 800b042:	4b6d      	ldr	r3, [pc, #436]	@ (800b1f8 <motor_task+0x1d0>)
 800b044:	6818      	ldr	r0, [r3, #0]
 800b046:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800b04a:	2300      	movs	r3, #0
 800b04c:	f04f 32ff 	mov.w	r2, #4294967295
 800b050:	f001 fbde 	bl	800c810 <xQueueGenericSend>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, 0);
 800b054:	2200      	movs	r2, #0
 800b056:	2102      	movs	r1, #2
 800b058:	4868      	ldr	r0, [pc, #416]	@ (800b1fc <motor_task+0x1d4>)
 800b05a:	f7f8 fe39 	bl	8003cd0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2, 1);
 800b05e:	2201      	movs	r2, #1
 800b060:	2104      	movs	r1, #4
 800b062:	4866      	ldr	r0, [pc, #408]	@ (800b1fc <motor_task+0x1d4>)
 800b064:	f7f8 fe34 	bl	8003cd0 <HAL_GPIO_WritePin>
			  pwm_set_duty(&htim1, TIM_CHANNEL_1, parameter_read.s1);
 800b068:	4b65      	ldr	r3, [pc, #404]	@ (800b200 <motor_task+0x1d8>)
 800b06a:	7adb      	ldrb	r3, [r3, #11]
 800b06c:	461a      	mov	r2, r3
 800b06e:	2100      	movs	r1, #0
 800b070:	485e      	ldr	r0, [pc, #376]	@ (800b1ec <motor_task+0x1c4>)
 800b072:	f7ff fe2d 	bl	800acd0 <pwm_set_duty>
			  vTaskDelay(pdMS_TO_TICKS(parameter_read.t1*1000));
 800b076:	4b62      	ldr	r3, [pc, #392]	@ (800b200 <motor_task+0x1d8>)
 800b078:	7b1b      	ldrb	r3, [r3, #12]
 800b07a:	461a      	mov	r2, r3
 800b07c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b080:	fb02 f303 	mul.w	r3, r2, r3
 800b084:	17da      	asrs	r2, r3, #31
 800b086:	469a      	mov	sl, r3
 800b088:	4693      	mov	fp, r2
 800b08a:	4652      	mov	r2, sl
 800b08c:	465b      	mov	r3, fp
 800b08e:	f04f 0000 	mov.w	r0, #0
 800b092:	f04f 0100 	mov.w	r1, #0
 800b096:	0159      	lsls	r1, r3, #5
 800b098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b09c:	0150      	lsls	r0, r2, #5
 800b09e:	4602      	mov	r2, r0
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	ebb2 040a 	subs.w	r4, r2, sl
 800b0a6:	eb63 050b 	sbc.w	r5, r3, fp
 800b0aa:	f04f 0200 	mov.w	r2, #0
 800b0ae:	f04f 0300 	mov.w	r3, #0
 800b0b2:	00ab      	lsls	r3, r5, #2
 800b0b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b0b8:	00a2      	lsls	r2, r4, #2
 800b0ba:	4614      	mov	r4, r2
 800b0bc:	461d      	mov	r5, r3
 800b0be:	eb14 030a 	adds.w	r3, r4, sl
 800b0c2:	60bb      	str	r3, [r7, #8]
 800b0c4:	eb45 030b 	adc.w	r3, r5, fp
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	f04f 0200 	mov.w	r2, #0
 800b0ce:	f04f 0300 	mov.w	r3, #0
 800b0d2:	68f9      	ldr	r1, [r7, #12]
 800b0d4:	00cb      	lsls	r3, r1, #3
 800b0d6:	68b9      	ldr	r1, [r7, #8]
 800b0d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0dc:	68b9      	ldr	r1, [r7, #8]
 800b0de:	00ca      	lsls	r2, r1, #3
 800b0e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b0ec:	f04f 0300 	mov.w	r3, #0
 800b0f0:	f7f5 fdba 	bl	8000c68 <__aeabi_uldivmod>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f002 f9ea 	bl	800d4d4 <vTaskDelay>

			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, 0);
 800b100:	2200      	movs	r2, #0
 800b102:	2102      	movs	r1, #2
 800b104:	483d      	ldr	r0, [pc, #244]	@ (800b1fc <motor_task+0x1d4>)
 800b106:	f7f8 fde3 	bl	8003cd0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2, 0);
 800b10a:	2200      	movs	r2, #0
 800b10c:	2104      	movs	r1, #4
 800b10e:	483b      	ldr	r0, [pc, #236]	@ (800b1fc <motor_task+0x1d4>)
 800b110:	f7f8 fdde 	bl	8003cd0 <HAL_GPIO_WritePin>
			  vTaskDelay(pdMS_TO_TICKS(100));
 800b114:	2064      	movs	r0, #100	@ 0x64
 800b116:	f002 f9dd 	bl	800d4d4 <vTaskDelay>

			  xQueueSend(q_print,&msg_s2,portMAX_DELAY);
 800b11a:	4b37      	ldr	r3, [pc, #220]	@ (800b1f8 <motor_task+0x1d0>)
 800b11c:	6818      	ldr	r0, [r3, #0]
 800b11e:	f107 0120 	add.w	r1, r7, #32
 800b122:	2300      	movs	r3, #0
 800b124:	f04f 32ff 	mov.w	r2, #4294967295
 800b128:	f001 fb72 	bl	800c810 <xQueueGenericSend>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, 1);
 800b12c:	2201      	movs	r2, #1
 800b12e:	2102      	movs	r1, #2
 800b130:	4832      	ldr	r0, [pc, #200]	@ (800b1fc <motor_task+0x1d4>)
 800b132:	f7f8 fdcd 	bl	8003cd0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2, 0);
 800b136:	2200      	movs	r2, #0
 800b138:	2104      	movs	r1, #4
 800b13a:	4830      	ldr	r0, [pc, #192]	@ (800b1fc <motor_task+0x1d4>)
 800b13c:	f7f8 fdc8 	bl	8003cd0 <HAL_GPIO_WritePin>
			  pwm_set_duty(&htim1, TIM_CHANNEL_1, parameter_read.s2);
 800b140:	4b2f      	ldr	r3, [pc, #188]	@ (800b200 <motor_task+0x1d8>)
 800b142:	7b5b      	ldrb	r3, [r3, #13]
 800b144:	461a      	mov	r2, r3
 800b146:	2100      	movs	r1, #0
 800b148:	4828      	ldr	r0, [pc, #160]	@ (800b1ec <motor_task+0x1c4>)
 800b14a:	f7ff fdc1 	bl	800acd0 <pwm_set_duty>
//			  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
//			  print_cli("motor task: %lu bytes\n", uxHighWaterMark);
			  vTaskDelay(pdMS_TO_TICKS(parameter_read.t2*1000));
 800b14e:	4b2c      	ldr	r3, [pc, #176]	@ (800b200 <motor_task+0x1d8>)
 800b150:	7b9b      	ldrb	r3, [r3, #14]
 800b152:	461a      	mov	r2, r3
 800b154:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b158:	fb02 f303 	mul.w	r3, r2, r3
 800b15c:	17da      	asrs	r2, r3, #31
 800b15e:	613b      	str	r3, [r7, #16]
 800b160:	617a      	str	r2, [r7, #20]
 800b162:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b166:	f04f 0000 	mov.w	r0, #0
 800b16a:	f04f 0100 	mov.w	r1, #0
 800b16e:	0159      	lsls	r1, r3, #5
 800b170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b174:	0150      	lsls	r0, r2, #5
 800b176:	4602      	mov	r2, r0
 800b178:	460b      	mov	r3, r1
 800b17a:	6939      	ldr	r1, [r7, #16]
 800b17c:	ebb2 0801 	subs.w	r8, r2, r1
 800b180:	6979      	ldr	r1, [r7, #20]
 800b182:	eb63 0901 	sbc.w	r9, r3, r1
 800b186:	f04f 0200 	mov.w	r2, #0
 800b18a:	f04f 0300 	mov.w	r3, #0
 800b18e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800b192:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800b196:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800b19a:	4690      	mov	r8, r2
 800b19c:	4699      	mov	r9, r3
 800b19e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	eb18 0303 	adds.w	r3, r8, r3
 800b1a8:	603b      	str	r3, [r7, #0]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	eb49 0303 	adc.w	r3, r9, r3
 800b1b0:	607b      	str	r3, [r7, #4]
 800b1b2:	f04f 0200 	mov.w	r2, #0
 800b1b6:	f04f 0300 	mov.w	r3, #0
 800b1ba:	6879      	ldr	r1, [r7, #4]
 800b1bc:	00cb      	lsls	r3, r1, #3
 800b1be:	6839      	ldr	r1, [r7, #0]
 800b1c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1c4:	6839      	ldr	r1, [r7, #0]
 800b1c6:	00ca      	lsls	r2, r1, #3
 800b1c8:	e9c7 2300 	strd	r2, r3, [r7]
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b1d4:	f04f 0300 	mov.w	r3, #0
 800b1d8:	f7f5 fd46 	bl	8000c68 <__aeabi_uldivmod>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f002 f976 	bl	800d4d4 <vTaskDelay>
		      xQueueSend(q_print,&msg_s1,portMAX_DELAY);
 800b1e8:	bf00      	nop
 800b1ea:	e72a      	b.n	800b042 <motor_task+0x1a>
 800b1ec:	20000310 	.word	0x20000310
 800b1f0:	08014724 	.word	0x08014724
 800b1f4:	08014738 	.word	0x08014738
 800b1f8:	200003c8 	.word	0x200003c8
 800b1fc:	40020400 	.word	0x40020400
 800b200:	200003e4 	.word	0x200003e4

0800b204 <scan_keypad_task>:
	}
}

uint16_t btn_value;
void scan_keypad_task(void *param){
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af02      	add	r7, sp, #8
 800b20a:	6078      	str	r0, [r7, #4]

//	UBaseType_t uxHighWaterMark;
	while(1){
		btn_value = process_button_pad_value(read_keypad());
 800b20c:	f7ff fc16 	bl	800aa3c <read_keypad>
 800b210:	4603      	mov	r3, r0
 800b212:	4618      	mov	r0, r3
 800b214:	f7ff fbb6 	bl	800a984 <process_button_pad_value>
 800b218:	4603      	mov	r3, r0
 800b21a:	461a      	mov	r2, r3
 800b21c:	4b2e      	ldr	r3, [pc, #184]	@ (800b2d8 <scan_keypad_task+0xd4>)
 800b21e:	801a      	strh	r2, [r3, #0]
		if(btn_value){
 800b220:	4b2d      	ldr	r3, [pc, #180]	@ (800b2d8 <scan_keypad_task+0xd4>)
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d053      	beq.n	800b2d0 <scan_keypad_task+0xcc>
			switch(curr_state)
 800b228:	4b2c      	ldr	r3, [pc, #176]	@ (800b2dc <scan_keypad_task+0xd8>)
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	2b04      	cmp	r3, #4
 800b22e:	dc4f      	bgt.n	800b2d0 <scan_keypad_task+0xcc>
 800b230:	2b02      	cmp	r3, #2
 800b232:	da40      	bge.n	800b2b6 <scan_keypad_task+0xb2>
 800b234:	2b00      	cmp	r3, #0
 800b236:	d002      	beq.n	800b23e <scan_keypad_task+0x3a>
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d030      	beq.n	800b29e <scan_keypad_task+0x9a>
 800b23c:	e048      	b.n	800b2d0 <scan_keypad_task+0xcc>
			{
			case sRunning:
				if(btn_value == BUTTON_A_3){
 800b23e:	4b26      	ldr	r3, [pc, #152]	@ (800b2d8 <scan_keypad_task+0xd4>)
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	2b0c      	cmp	r3, #12
 800b244:	d143      	bne.n	800b2ce <scan_keypad_task+0xca>
					curr_state = sPassword;
 800b246:	4b25      	ldr	r3, [pc, #148]	@ (800b2dc <scan_keypad_task+0xd8>)
 800b248:	2201      	movs	r2, #1
 800b24a:	701a      	strb	r2, [r3, #0]
					pwm_set_duty(&htim1,TIM_CHANNEL_1,0);
 800b24c:	2200      	movs	r2, #0
 800b24e:	2100      	movs	r1, #0
 800b250:	4823      	ldr	r0, [pc, #140]	@ (800b2e0 <scan_keypad_task+0xdc>)
 800b252:	f7ff fd3d 	bl	800acd0 <pwm_set_duty>

//					vTaskResume(handle_menuconfig_task);
//					vTaskResume(handle_password_task);
					vTaskSuspend(handle_sensor_task);
 800b256:	4b23      	ldr	r3, [pc, #140]	@ (800b2e4 <scan_keypad_task+0xe0>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f002 f972 	bl	800d544 <vTaskSuspend>
					vTaskSuspend(handle_motor_task);
 800b260:	4b21      	ldr	r3, [pc, #132]	@ (800b2e8 <scan_keypad_task+0xe4>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4618      	mov	r0, r3
 800b266:	f002 f96d 	bl	800d544 <vTaskSuspend>
					vTaskSuspend(handle_sd_card_task);
 800b26a:	4b20      	ldr	r3, [pc, #128]	@ (800b2ec <scan_keypad_task+0xe8>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4618      	mov	r0, r3
 800b270:	f002 f968 	bl	800d544 <vTaskSuspend>

					CLCD_I2C_Clear(&LCD1);
 800b274:	481e      	ldr	r0, [pc, #120]	@ (800b2f0 <scan_keypad_task+0xec>)
 800b276:	f7ff fac7 	bl	800a808 <CLCD_I2C_Clear>
					CLCD_I2C_SetCursor(&LCD1, 3, 0);
 800b27a:	2200      	movs	r2, #0
 800b27c:	2103      	movs	r1, #3
 800b27e:	481c      	ldr	r0, [pc, #112]	@ (800b2f0 <scan_keypad_task+0xec>)
 800b280:	f7ff fa58 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "ENTER PASSWORD");
 800b284:	491b      	ldr	r1, [pc, #108]	@ (800b2f4 <scan_keypad_task+0xf0>)
 800b286:	481a      	ldr	r0, [pc, #104]	@ (800b2f0 <scan_keypad_task+0xec>)
 800b288:	f7ff faa7 	bl	800a7da <CLCD_I2C_WriteString>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800b28c:	2201      	movs	r2, #1
 800b28e:	2104      	movs	r1, #4
 800b290:	4817      	ldr	r0, [pc, #92]	@ (800b2f0 <scan_keypad_task+0xec>)
 800b292:	f7ff fa4f 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_BlinkOn(&LCD1);
 800b296:	4816      	ldr	r0, [pc, #88]	@ (800b2f0 <scan_keypad_task+0xec>)
 800b298:	f7ff fac6 	bl	800a828 <CLCD_I2C_BlinkOn>

				}
				break;
 800b29c:	e017      	b.n	800b2ce <scan_keypad_task+0xca>
			case sPassword:
				xTaskNotify(handle_password_task,(uint32_t)btn_value , eSetValueWithOverwrite);
 800b29e:	4b16      	ldr	r3, [pc, #88]	@ (800b2f8 <scan_keypad_task+0xf4>)
 800b2a0:	6818      	ldr	r0, [r3, #0]
 800b2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b2d8 <scan_keypad_task+0xd4>)
 800b2a4:	881b      	ldrh	r3, [r3, #0]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	f003 fbb2 	bl	800ea18 <xTaskGenericNotify>
				break;
 800b2b4:	e00c      	b.n	800b2d0 <scan_keypad_task+0xcc>
			case sMenucofig_Setparameter:
			case sMenuconfig_Changepassword:
			case sMenuconfig_Saveparameter:
				xTaskNotify(handle_menuconfig_task,(uint32_t)btn_value , eSetValueWithOverwrite);
 800b2b6:	4b11      	ldr	r3, [pc, #68]	@ (800b2fc <scan_keypad_task+0xf8>)
 800b2b8:	6818      	ldr	r0, [r3, #0]
 800b2ba:	4b07      	ldr	r3, [pc, #28]	@ (800b2d8 <scan_keypad_task+0xd4>)
 800b2bc:	881b      	ldrh	r3, [r3, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	f003 fba6 	bl	800ea18 <xTaskGenericNotify>
				break;
 800b2cc:	e000      	b.n	800b2d0 <scan_keypad_task+0xcc>
				break;
 800b2ce:	bf00      	nop
			}// end of switch
		}
//		  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
//		  print_cli("scan key pad task: %lu bytes\n", uxHighWaterMark);
		vTaskDelay(pdMS_TO_TICKS(20));
 800b2d0:	2014      	movs	r0, #20
 800b2d2:	f002 f8ff 	bl	800d4d4 <vTaskDelay>
		btn_value = process_button_pad_value(read_keypad());
 800b2d6:	e799      	b.n	800b20c <scan_keypad_task+0x8>
 800b2d8:	20002778 	.word	0x20002778
 800b2dc:	200003d0 	.word	0x200003d0
 800b2e0:	20000310 	.word	0x20000310
 800b2e4:	200003ac 	.word	0x200003ac
 800b2e8:	200003c0 	.word	0x200003c0
 800b2ec:	200003c4 	.word	0x200003c4
 800b2f0:	200003a0 	.word	0x200003a0
 800b2f4:	0801474c 	.word	0x0801474c
 800b2f8:	200003bc 	.word	0x200003bc
 800b2fc:	200003b8 	.word	0x200003b8

0800b300 <menuconfig_task>:
	}
}

void menuconfig_task(void *param){
 800b300:	b580      	push	{r7, lr}
 800b302:	b08c      	sub	sp, #48	@ 0x30
 800b304:	af02      	add	r7, sp, #8
 800b306:	6078      	str	r0, [r7, #4]
	  uint32_t btn_value_addr;

//	  UBaseType_t uxHighWaterMark;

	while(1){
		xTaskNotifyWait(0,0,&btn_value_addr,portMAX_DELAY);
 800b308:	f107 0314 	add.w	r3, r7, #20
 800b30c:	f04f 32ff 	mov.w	r2, #4294967295
 800b310:	9200      	str	r2, [sp, #0]
 800b312:	2200      	movs	r2, #0
 800b314:	2100      	movs	r1, #0
 800b316:	2000      	movs	r0, #0
 800b318:	f003 fae6 	bl	800e8e8 <xTaskGenericNotifyWait>
		btn_value = (uint16_t) btn_value_addr;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	837b      	strh	r3, [r7, #26]
		//printf("%d\n",btn_value);


		switch(curr_state){
 800b320:	4bb4      	ldr	r3, [pc, #720]	@ (800b5f4 <menuconfig_task+0x2f4>)
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	2b04      	cmp	r3, #4
 800b326:	f000 8378 	beq.w	800ba1a <menuconfig_task+0x71a>
 800b32a:	2b04      	cmp	r3, #4
 800b32c:	f300 8699 	bgt.w	800c062 <menuconfig_task+0xd62>
 800b330:	2b02      	cmp	r3, #2
 800b332:	d004      	beq.n	800b33e <menuconfig_task+0x3e>
 800b334:	2b03      	cmp	r3, #3
 800b336:	f000 84b4 	beq.w	800bca2 <menuconfig_task+0x9a2>
							 break;
						 default:
							 break;
						 }// end switch
				    default:
					break;
 800b33a:	f000 be92 	b.w	800c062 <menuconfig_task+0xd62>
					switch (btn_value) {
 800b33e:	8b7b      	ldrh	r3, [r7, #26]
 800b340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b344:	f000 8348 	beq.w	800b9d8 <menuconfig_task+0x6d8>
 800b348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b34c:	f300 8361 	bgt.w	800ba12 <menuconfig_task+0x712>
 800b350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b354:	f000 828a 	beq.w	800b86c <menuconfig_task+0x56c>
 800b358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b35c:	f300 8359 	bgt.w	800ba12 <menuconfig_task+0x712>
 800b360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b364:	f000 8260 	beq.w	800b828 <menuconfig_task+0x528>
 800b368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b36c:	f300 8351 	bgt.w	800ba12 <menuconfig_task+0x712>
 800b370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b374:	f000 8220 	beq.w	800b7b8 <menuconfig_task+0x4b8>
 800b378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b37c:	f300 8349 	bgt.w	800ba12 <menuconfig_task+0x712>
 800b380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b384:	f000 81df 	beq.w	800b746 <menuconfig_task+0x446>
 800b388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b38c:	f300 8341 	bgt.w	800ba12 <menuconfig_task+0x712>
 800b390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b394:	f000 81b5 	beq.w	800b702 <menuconfig_task+0x402>
 800b398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b39c:	f300 8339 	bgt.w	800ba12 <menuconfig_task+0x712>
 800b3a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3a4:	f000 818b 	beq.w	800b6be <menuconfig_task+0x3be>
 800b3a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3ac:	f300 8331 	bgt.w	800ba12 <menuconfig_task+0x712>
 800b3b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3b4:	f000 8161 	beq.w	800b67a <menuconfig_task+0x37a>
 800b3b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3bc:	f300 8329 	bgt.w	800ba12 <menuconfig_task+0x712>
 800b3c0:	2b80      	cmp	r3, #128	@ 0x80
 800b3c2:	f000 8141 	beq.w	800b648 <menuconfig_task+0x348>
 800b3c6:	2b80      	cmp	r3, #128	@ 0x80
 800b3c8:	f300 8323 	bgt.w	800ba12 <menuconfig_task+0x712>
 800b3cc:	2b20      	cmp	r3, #32
 800b3ce:	dc49      	bgt.n	800b464 <menuconfig_task+0x164>
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f340 831e 	ble.w	800ba12 <menuconfig_task+0x712>
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	2b1f      	cmp	r3, #31
 800b3da:	f200 831a 	bhi.w	800ba12 <menuconfig_task+0x712>
 800b3de:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e4 <menuconfig_task+0xe4>)
 800b3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e4:	0800b46d 	.word	0x0800b46d
 800b3e8:	0800b4b1 	.word	0x0800b4b1
 800b3ec:	0800ba13 	.word	0x0800ba13
 800b3f0:	0800b4f5 	.word	0x0800b4f5
 800b3f4:	0800ba13 	.word	0x0800ba13
 800b3f8:	0800ba13 	.word	0x0800ba13
 800b3fc:	0800ba13 	.word	0x0800ba13
 800b400:	0800b539 	.word	0x0800b539
 800b404:	0800ba13 	.word	0x0800ba13
 800b408:	0800ba13 	.word	0x0800ba13
 800b40c:	0800ba13 	.word	0x0800ba13
 800b410:	0800ba13 	.word	0x0800ba13
 800b414:	0800ba13 	.word	0x0800ba13
 800b418:	0800ba13 	.word	0x0800ba13
 800b41c:	0800ba13 	.word	0x0800ba13
 800b420:	0800b56b 	.word	0x0800b56b
 800b424:	0800ba13 	.word	0x0800ba13
 800b428:	0800ba13 	.word	0x0800ba13
 800b42c:	0800ba13 	.word	0x0800ba13
 800b430:	0800ba13 	.word	0x0800ba13
 800b434:	0800ba13 	.word	0x0800ba13
 800b438:	0800ba13 	.word	0x0800ba13
 800b43c:	0800ba13 	.word	0x0800ba13
 800b440:	0800ba13 	.word	0x0800ba13
 800b444:	0800ba13 	.word	0x0800ba13
 800b448:	0800ba13 	.word	0x0800ba13
 800b44c:	0800ba13 	.word	0x0800ba13
 800b450:	0800ba13 	.word	0x0800ba13
 800b454:	0800ba13 	.word	0x0800ba13
 800b458:	0800ba13 	.word	0x0800ba13
 800b45c:	0800ba13 	.word	0x0800ba13
 800b460:	0800b5af 	.word	0x0800b5af
 800b464:	2b40      	cmp	r3, #64	@ 0x40
 800b466:	f000 80cd 	beq.w	800b604 <menuconfig_task+0x304>
							 break;
 800b46a:	e2d2      	b.n	800ba12 <menuconfig_task+0x712>
							add_data(&data[state], '1');
 800b46c:	4b62      	ldr	r3, [pc, #392]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	461a      	mov	r2, r3
 800b472:	4613      	mov	r3, r2
 800b474:	00db      	lsls	r3, r3, #3
 800b476:	1a9b      	subs	r3, r3, r2
 800b478:	005b      	lsls	r3, r3, #1
 800b47a:	4a60      	ldr	r2, [pc, #384]	@ (800b5fc <menuconfig_task+0x2fc>)
 800b47c:	4413      	add	r3, r2
 800b47e:	2131      	movs	r1, #49	@ 0x31
 800b480:	4618      	mov	r0, r3
 800b482:	f7ff fc7d 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800b486:	4b5c      	ldr	r3, [pc, #368]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	461a      	mov	r2, r3
 800b48c:	2103      	movs	r1, #3
 800b48e:	485c      	ldr	r0, [pc, #368]	@ (800b600 <menuconfig_task+0x300>)
 800b490:	f7ff f950 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800b494:	4b58      	ldr	r3, [pc, #352]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	461a      	mov	r2, r3
 800b49a:	4613      	mov	r3, r2
 800b49c:	00db      	lsls	r3, r3, #3
 800b49e:	1a9b      	subs	r3, r3, r2
 800b4a0:	005b      	lsls	r3, r3, #1
 800b4a2:	4a56      	ldr	r2, [pc, #344]	@ (800b5fc <menuconfig_task+0x2fc>)
 800b4a4:	4413      	add	r3, r2
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	4855      	ldr	r0, [pc, #340]	@ (800b600 <menuconfig_task+0x300>)
 800b4aa:	f7ff f996 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800b4ae:	e2b3      	b.n	800ba18 <menuconfig_task+0x718>
							add_data(&data[state], '2');
 800b4b0:	4b51      	ldr	r3, [pc, #324]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	00db      	lsls	r3, r3, #3
 800b4ba:	1a9b      	subs	r3, r3, r2
 800b4bc:	005b      	lsls	r3, r3, #1
 800b4be:	4a4f      	ldr	r2, [pc, #316]	@ (800b5fc <menuconfig_task+0x2fc>)
 800b4c0:	4413      	add	r3, r2
 800b4c2:	2132      	movs	r1, #50	@ 0x32
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7ff fc5b 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800b4ca:	4b4b      	ldr	r3, [pc, #300]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	2103      	movs	r1, #3
 800b4d2:	484b      	ldr	r0, [pc, #300]	@ (800b600 <menuconfig_task+0x300>)
 800b4d4:	f7ff f92e 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800b4d8:	4b47      	ldr	r3, [pc, #284]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	4613      	mov	r3, r2
 800b4e0:	00db      	lsls	r3, r3, #3
 800b4e2:	1a9b      	subs	r3, r3, r2
 800b4e4:	005b      	lsls	r3, r3, #1
 800b4e6:	4a45      	ldr	r2, [pc, #276]	@ (800b5fc <menuconfig_task+0x2fc>)
 800b4e8:	4413      	add	r3, r2
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	4844      	ldr	r0, [pc, #272]	@ (800b600 <menuconfig_task+0x300>)
 800b4ee:	f7ff f974 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800b4f2:	e291      	b.n	800ba18 <menuconfig_task+0x718>
							add_data(&data[state], '3');
 800b4f4:	4b40      	ldr	r3, [pc, #256]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	00db      	lsls	r3, r3, #3
 800b4fe:	1a9b      	subs	r3, r3, r2
 800b500:	005b      	lsls	r3, r3, #1
 800b502:	4a3e      	ldr	r2, [pc, #248]	@ (800b5fc <menuconfig_task+0x2fc>)
 800b504:	4413      	add	r3, r2
 800b506:	2133      	movs	r1, #51	@ 0x33
 800b508:	4618      	mov	r0, r3
 800b50a:	f7ff fc39 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800b50e:	4b3a      	ldr	r3, [pc, #232]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	461a      	mov	r2, r3
 800b514:	2103      	movs	r1, #3
 800b516:	483a      	ldr	r0, [pc, #232]	@ (800b600 <menuconfig_task+0x300>)
 800b518:	f7ff f90c 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800b51c:	4b36      	ldr	r3, [pc, #216]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	461a      	mov	r2, r3
 800b522:	4613      	mov	r3, r2
 800b524:	00db      	lsls	r3, r3, #3
 800b526:	1a9b      	subs	r3, r3, r2
 800b528:	005b      	lsls	r3, r3, #1
 800b52a:	4a34      	ldr	r2, [pc, #208]	@ (800b5fc <menuconfig_task+0x2fc>)
 800b52c:	4413      	add	r3, r2
 800b52e:	4619      	mov	r1, r3
 800b530:	4833      	ldr	r0, [pc, #204]	@ (800b600 <menuconfig_task+0x300>)
 800b532:	f7ff f952 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800b536:	e26f      	b.n	800ba18 <menuconfig_task+0x718>
							prev_state = state; // save old position
 800b538:	4b2f      	ldr	r3, [pc, #188]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	767b      	strb	r3, [r7, #25]
							if (state == s1_s) state = t2_s;
 800b53e:	4b2e      	ldr	r3, [pc, #184]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d103      	bne.n	800b54e <menuconfig_task+0x24e>
 800b546:	4b2c      	ldr	r3, [pc, #176]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b548:	2203      	movs	r2, #3
 800b54a:	701a      	strb	r2, [r3, #0]
 800b54c:	e005      	b.n	800b55a <menuconfig_task+0x25a>
							else state--; // new postion
 800b54e:	4b2a      	ldr	r3, [pc, #168]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	3b01      	subs	r3, #1
 800b554:	b2da      	uxtb	r2, r3
 800b556:	4b28      	ldr	r3, [pc, #160]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b558:	701a      	strb	r2, [r3, #0]
							set_cow(prev_state, state);
 800b55a:	4b27      	ldr	r3, [pc, #156]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b55c:	781a      	ldrb	r2, [r3, #0]
 800b55e:	7e7b      	ldrb	r3, [r7, #25]
 800b560:	4611      	mov	r1, r2
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff fc2e 	bl	800adc4 <set_cow>
							break;
 800b568:	e256      	b.n	800ba18 <menuconfig_task+0x718>
							add_data(&data[state], '4');
 800b56a:	4b23      	ldr	r3, [pc, #140]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	461a      	mov	r2, r3
 800b570:	4613      	mov	r3, r2
 800b572:	00db      	lsls	r3, r3, #3
 800b574:	1a9b      	subs	r3, r3, r2
 800b576:	005b      	lsls	r3, r3, #1
 800b578:	4a20      	ldr	r2, [pc, #128]	@ (800b5fc <menuconfig_task+0x2fc>)
 800b57a:	4413      	add	r3, r2
 800b57c:	2134      	movs	r1, #52	@ 0x34
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff fbfe 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800b584:	4b1c      	ldr	r3, [pc, #112]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	461a      	mov	r2, r3
 800b58a:	2103      	movs	r1, #3
 800b58c:	481c      	ldr	r0, [pc, #112]	@ (800b600 <menuconfig_task+0x300>)
 800b58e:	f7ff f8d1 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800b592:	4b19      	ldr	r3, [pc, #100]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	4613      	mov	r3, r2
 800b59a:	00db      	lsls	r3, r3, #3
 800b59c:	1a9b      	subs	r3, r3, r2
 800b59e:	005b      	lsls	r3, r3, #1
 800b5a0:	4a16      	ldr	r2, [pc, #88]	@ (800b5fc <menuconfig_task+0x2fc>)
 800b5a2:	4413      	add	r3, r2
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	4816      	ldr	r0, [pc, #88]	@ (800b600 <menuconfig_task+0x300>)
 800b5a8:	f7ff f917 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800b5ac:	e234      	b.n	800ba18 <menuconfig_task+0x718>
							add_data(&data[state], '5');
 800b5ae:	4b12      	ldr	r3, [pc, #72]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	00db      	lsls	r3, r3, #3
 800b5b8:	1a9b      	subs	r3, r3, r2
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	4a0f      	ldr	r2, [pc, #60]	@ (800b5fc <menuconfig_task+0x2fc>)
 800b5be:	4413      	add	r3, r2
 800b5c0:	2135      	movs	r1, #53	@ 0x35
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7ff fbdc 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800b5c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	2103      	movs	r1, #3
 800b5d0:	480b      	ldr	r0, [pc, #44]	@ (800b600 <menuconfig_task+0x300>)
 800b5d2:	f7ff f8af 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800b5d6:	4b08      	ldr	r3, [pc, #32]	@ (800b5f8 <menuconfig_task+0x2f8>)
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	4613      	mov	r3, r2
 800b5de:	00db      	lsls	r3, r3, #3
 800b5e0:	1a9b      	subs	r3, r3, r2
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	4a05      	ldr	r2, [pc, #20]	@ (800b5fc <menuconfig_task+0x2fc>)
 800b5e6:	4413      	add	r3, r2
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	4805      	ldr	r0, [pc, #20]	@ (800b600 <menuconfig_task+0x300>)
 800b5ec:	f7ff f8f5 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800b5f0:	e212      	b.n	800ba18 <menuconfig_task+0x718>
 800b5f2:	bf00      	nop
 800b5f4:	200003d0 	.word	0x200003d0
 800b5f8:	200027a4 	.word	0x200027a4
 800b5fc:	200027a8 	.word	0x200027a8
 800b600:	200003a0 	.word	0x200003a0
							add_data(&data[state], '6');
 800b604:	4b9c      	ldr	r3, [pc, #624]	@ (800b878 <menuconfig_task+0x578>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	461a      	mov	r2, r3
 800b60a:	4613      	mov	r3, r2
 800b60c:	00db      	lsls	r3, r3, #3
 800b60e:	1a9b      	subs	r3, r3, r2
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	4a9a      	ldr	r2, [pc, #616]	@ (800b87c <menuconfig_task+0x57c>)
 800b614:	4413      	add	r3, r2
 800b616:	2136      	movs	r1, #54	@ 0x36
 800b618:	4618      	mov	r0, r3
 800b61a:	f7ff fbb1 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800b61e:	4b96      	ldr	r3, [pc, #600]	@ (800b878 <menuconfig_task+0x578>)
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	2103      	movs	r1, #3
 800b626:	4896      	ldr	r0, [pc, #600]	@ (800b880 <menuconfig_task+0x580>)
 800b628:	f7ff f884 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800b62c:	4b92      	ldr	r3, [pc, #584]	@ (800b878 <menuconfig_task+0x578>)
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	461a      	mov	r2, r3
 800b632:	4613      	mov	r3, r2
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	1a9b      	subs	r3, r3, r2
 800b638:	005b      	lsls	r3, r3, #1
 800b63a:	4a90      	ldr	r2, [pc, #576]	@ (800b87c <menuconfig_task+0x57c>)
 800b63c:	4413      	add	r3, r2
 800b63e:	4619      	mov	r1, r3
 800b640:	488f      	ldr	r0, [pc, #572]	@ (800b880 <menuconfig_task+0x580>)
 800b642:	f7ff f8ca 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800b646:	e1e7      	b.n	800ba18 <menuconfig_task+0x718>
							prev_state = state; // save old position
 800b648:	4b8b      	ldr	r3, [pc, #556]	@ (800b878 <menuconfig_task+0x578>)
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	767b      	strb	r3, [r7, #25]
							if (state == t2_s) state = s1_s;
 800b64e:	4b8a      	ldr	r3, [pc, #552]	@ (800b878 <menuconfig_task+0x578>)
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	2b03      	cmp	r3, #3
 800b654:	d103      	bne.n	800b65e <menuconfig_task+0x35e>
 800b656:	4b88      	ldr	r3, [pc, #544]	@ (800b878 <menuconfig_task+0x578>)
 800b658:	2200      	movs	r2, #0
 800b65a:	701a      	strb	r2, [r3, #0]
 800b65c:	e005      	b.n	800b66a <menuconfig_task+0x36a>
							else state++; // new position
 800b65e:	4b86      	ldr	r3, [pc, #536]	@ (800b878 <menuconfig_task+0x578>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	3301      	adds	r3, #1
 800b664:	b2da      	uxtb	r2, r3
 800b666:	4b84      	ldr	r3, [pc, #528]	@ (800b878 <menuconfig_task+0x578>)
 800b668:	701a      	strb	r2, [r3, #0]
							set_cow(prev_state, state);
 800b66a:	4b83      	ldr	r3, [pc, #524]	@ (800b878 <menuconfig_task+0x578>)
 800b66c:	781a      	ldrb	r2, [r3, #0]
 800b66e:	7e7b      	ldrb	r3, [r7, #25]
 800b670:	4611      	mov	r1, r2
 800b672:	4618      	mov	r0, r3
 800b674:	f7ff fba6 	bl	800adc4 <set_cow>
							break;
 800b678:	e1ce      	b.n	800ba18 <menuconfig_task+0x718>
							add_data(&data[state], '7');
 800b67a:	4b7f      	ldr	r3, [pc, #508]	@ (800b878 <menuconfig_task+0x578>)
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	461a      	mov	r2, r3
 800b680:	4613      	mov	r3, r2
 800b682:	00db      	lsls	r3, r3, #3
 800b684:	1a9b      	subs	r3, r3, r2
 800b686:	005b      	lsls	r3, r3, #1
 800b688:	4a7c      	ldr	r2, [pc, #496]	@ (800b87c <menuconfig_task+0x57c>)
 800b68a:	4413      	add	r3, r2
 800b68c:	2137      	movs	r1, #55	@ 0x37
 800b68e:	4618      	mov	r0, r3
 800b690:	f7ff fb76 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800b694:	4b78      	ldr	r3, [pc, #480]	@ (800b878 <menuconfig_task+0x578>)
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	461a      	mov	r2, r3
 800b69a:	2103      	movs	r1, #3
 800b69c:	4878      	ldr	r0, [pc, #480]	@ (800b880 <menuconfig_task+0x580>)
 800b69e:	f7ff f849 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800b6a2:	4b75      	ldr	r3, [pc, #468]	@ (800b878 <menuconfig_task+0x578>)
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	1a9b      	subs	r3, r3, r2
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	4a72      	ldr	r2, [pc, #456]	@ (800b87c <menuconfig_task+0x57c>)
 800b6b2:	4413      	add	r3, r2
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	4872      	ldr	r0, [pc, #456]	@ (800b880 <menuconfig_task+0x580>)
 800b6b8:	f7ff f88f 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800b6bc:	e1ac      	b.n	800ba18 <menuconfig_task+0x718>
							add_data(&data[state], '8');
 800b6be:	4b6e      	ldr	r3, [pc, #440]	@ (800b878 <menuconfig_task+0x578>)
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	00db      	lsls	r3, r3, #3
 800b6c8:	1a9b      	subs	r3, r3, r2
 800b6ca:	005b      	lsls	r3, r3, #1
 800b6cc:	4a6b      	ldr	r2, [pc, #428]	@ (800b87c <menuconfig_task+0x57c>)
 800b6ce:	4413      	add	r3, r2
 800b6d0:	2138      	movs	r1, #56	@ 0x38
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff fb54 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800b6d8:	4b67      	ldr	r3, [pc, #412]	@ (800b878 <menuconfig_task+0x578>)
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	2103      	movs	r1, #3
 800b6e0:	4867      	ldr	r0, [pc, #412]	@ (800b880 <menuconfig_task+0x580>)
 800b6e2:	f7ff f827 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800b6e6:	4b64      	ldr	r3, [pc, #400]	@ (800b878 <menuconfig_task+0x578>)
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	00db      	lsls	r3, r3, #3
 800b6f0:	1a9b      	subs	r3, r3, r2
 800b6f2:	005b      	lsls	r3, r3, #1
 800b6f4:	4a61      	ldr	r2, [pc, #388]	@ (800b87c <menuconfig_task+0x57c>)
 800b6f6:	4413      	add	r3, r2
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	4861      	ldr	r0, [pc, #388]	@ (800b880 <menuconfig_task+0x580>)
 800b6fc:	f7ff f86d 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800b700:	e18a      	b.n	800ba18 <menuconfig_task+0x718>
							add_data(&data[state], '9');
 800b702:	4b5d      	ldr	r3, [pc, #372]	@ (800b878 <menuconfig_task+0x578>)
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	461a      	mov	r2, r3
 800b708:	4613      	mov	r3, r2
 800b70a:	00db      	lsls	r3, r3, #3
 800b70c:	1a9b      	subs	r3, r3, r2
 800b70e:	005b      	lsls	r3, r3, #1
 800b710:	4a5a      	ldr	r2, [pc, #360]	@ (800b87c <menuconfig_task+0x57c>)
 800b712:	4413      	add	r3, r2
 800b714:	2139      	movs	r1, #57	@ 0x39
 800b716:	4618      	mov	r0, r3
 800b718:	f7ff fb32 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800b71c:	4b56      	ldr	r3, [pc, #344]	@ (800b878 <menuconfig_task+0x578>)
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	461a      	mov	r2, r3
 800b722:	2103      	movs	r1, #3
 800b724:	4856      	ldr	r0, [pc, #344]	@ (800b880 <menuconfig_task+0x580>)
 800b726:	f7ff f805 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800b72a:	4b53      	ldr	r3, [pc, #332]	@ (800b878 <menuconfig_task+0x578>)
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	461a      	mov	r2, r3
 800b730:	4613      	mov	r3, r2
 800b732:	00db      	lsls	r3, r3, #3
 800b734:	1a9b      	subs	r3, r3, r2
 800b736:	005b      	lsls	r3, r3, #1
 800b738:	4a50      	ldr	r2, [pc, #320]	@ (800b87c <menuconfig_task+0x57c>)
 800b73a:	4413      	add	r3, r2
 800b73c:	4619      	mov	r1, r3
 800b73e:	4850      	ldr	r0, [pc, #320]	@ (800b880 <menuconfig_task+0x580>)
 800b740:	f7ff f84b 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800b744:	e168      	b.n	800ba18 <menuconfig_task+0x718>
							delete_data(&data[state]);
 800b746:	4b4c      	ldr	r3, [pc, #304]	@ (800b878 <menuconfig_task+0x578>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	461a      	mov	r2, r3
 800b74c:	4613      	mov	r3, r2
 800b74e:	00db      	lsls	r3, r3, #3
 800b750:	1a9b      	subs	r3, r3, r2
 800b752:	005b      	lsls	r3, r3, #1
 800b754:	4a49      	ldr	r2, [pc, #292]	@ (800b87c <menuconfig_task+0x57c>)
 800b756:	4413      	add	r3, r2
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff faf7 	bl	800ad4c <delete_data>
							CLCD_I2C_SetCursor(&LCD1, 3+data[state].len, state);
 800b75e:	4b46      	ldr	r3, [pc, #280]	@ (800b878 <menuconfig_task+0x578>)
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	4619      	mov	r1, r3
 800b764:	4a45      	ldr	r2, [pc, #276]	@ (800b87c <menuconfig_task+0x57c>)
 800b766:	460b      	mov	r3, r1
 800b768:	00db      	lsls	r3, r3, #3
 800b76a:	1a5b      	subs	r3, r3, r1
 800b76c:	005b      	lsls	r3, r3, #1
 800b76e:	4413      	add	r3, r2
 800b770:	330c      	adds	r3, #12
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	b2db      	uxtb	r3, r3
 800b776:	3303      	adds	r3, #3
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	4a3f      	ldr	r2, [pc, #252]	@ (800b878 <menuconfig_task+0x578>)
 800b77c:	7812      	ldrb	r2, [r2, #0]
 800b77e:	4619      	mov	r1, r3
 800b780:	483f      	ldr	r0, [pc, #252]	@ (800b880 <menuconfig_task+0x580>)
 800b782:	f7fe ffd7 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, " ");
 800b786:	493f      	ldr	r1, [pc, #252]	@ (800b884 <menuconfig_task+0x584>)
 800b788:	483d      	ldr	r0, [pc, #244]	@ (800b880 <menuconfig_task+0x580>)
 800b78a:	f7ff f826 	bl	800a7da <CLCD_I2C_WriteString>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800b78e:	4b3a      	ldr	r3, [pc, #232]	@ (800b878 <menuconfig_task+0x578>)
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	461a      	mov	r2, r3
 800b794:	2103      	movs	r1, #3
 800b796:	483a      	ldr	r0, [pc, #232]	@ (800b880 <menuconfig_task+0x580>)
 800b798:	f7fe ffcc 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800b79c:	4b36      	ldr	r3, [pc, #216]	@ (800b878 <menuconfig_task+0x578>)
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	00db      	lsls	r3, r3, #3
 800b7a6:	1a9b      	subs	r3, r3, r2
 800b7a8:	005b      	lsls	r3, r3, #1
 800b7aa:	4a34      	ldr	r2, [pc, #208]	@ (800b87c <menuconfig_task+0x57c>)
 800b7ac:	4413      	add	r3, r2
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	4833      	ldr	r0, [pc, #204]	@ (800b880 <menuconfig_task+0x580>)
 800b7b2:	f7ff f812 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800b7b6:	e12f      	b.n	800ba18 <menuconfig_task+0x718>
							state = 0;
 800b7b8:	4b2f      	ldr	r3, [pc, #188]	@ (800b878 <menuconfig_task+0x578>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	701a      	strb	r2, [r3, #0]
							curr_state = sRunning;
 800b7be:	4b32      	ldr	r3, [pc, #200]	@ (800b888 <menuconfig_task+0x588>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	701a      	strb	r2, [r3, #0]
							CLCD_I2C_Clear(&LCD1);
 800b7c4:	482e      	ldr	r0, [pc, #184]	@ (800b880 <menuconfig_task+0x580>)
 800b7c6:	f7ff f81f 	bl	800a808 <CLCD_I2C_Clear>
							for (int i = 0; i < 4; i++) {
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7ce:	e018      	b.n	800b802 <menuconfig_task+0x502>
								memset(data[i].payload, 0, sizeof(data[i].payload));  // reset data
 800b7d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	00db      	lsls	r3, r3, #3
 800b7d6:	1a9b      	subs	r3, r3, r2
 800b7d8:	005b      	lsls	r3, r3, #1
 800b7da:	4a28      	ldr	r2, [pc, #160]	@ (800b87c <menuconfig_task+0x57c>)
 800b7dc:	4413      	add	r3, r2
 800b7de:	220b      	movs	r2, #11
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f006 fca4 	bl	8012130 <memset>
								data[i].len = 0;  // reset length
 800b7e8:	4924      	ldr	r1, [pc, #144]	@ (800b87c <menuconfig_task+0x57c>)
 800b7ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	1a9b      	subs	r3, r3, r2
 800b7f2:	005b      	lsls	r3, r3, #1
 800b7f4:	440b      	add	r3, r1
 800b7f6:	330c      	adds	r3, #12
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	801a      	strh	r2, [r3, #0]
							for (int i = 0; i < 4; i++) {
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fe:	3301      	adds	r3, #1
 800b800:	627b      	str	r3, [r7, #36]	@ 0x24
 800b802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b804:	2b03      	cmp	r3, #3
 800b806:	dde3      	ble.n	800b7d0 <menuconfig_task+0x4d0>
							vTaskResume(handle_sensor_task);
 800b808:	4b20      	ldr	r3, [pc, #128]	@ (800b88c <menuconfig_task+0x58c>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f001 ff85 	bl	800d71c <vTaskResume>
							vTaskResume(handle_motor_task);
 800b812:	4b1f      	ldr	r3, [pc, #124]	@ (800b890 <menuconfig_task+0x590>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4618      	mov	r0, r3
 800b818:	f001 ff80 	bl	800d71c <vTaskResume>
							vTaskResume(handle_sd_card_task);
 800b81c:	4b1d      	ldr	r3, [pc, #116]	@ (800b894 <menuconfig_task+0x594>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4618      	mov	r0, r3
 800b822:	f001 ff7b 	bl	800d71c <vTaskResume>
							break;
 800b826:	e0f7      	b.n	800ba18 <menuconfig_task+0x718>
							add_data(&data[state], '0');
 800b828:	4b13      	ldr	r3, [pc, #76]	@ (800b878 <menuconfig_task+0x578>)
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	461a      	mov	r2, r3
 800b82e:	4613      	mov	r3, r2
 800b830:	00db      	lsls	r3, r3, #3
 800b832:	1a9b      	subs	r3, r3, r2
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	4a11      	ldr	r2, [pc, #68]	@ (800b87c <menuconfig_task+0x57c>)
 800b838:	4413      	add	r3, r2
 800b83a:	2130      	movs	r1, #48	@ 0x30
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7ff fa9f 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800b842:	4b0d      	ldr	r3, [pc, #52]	@ (800b878 <menuconfig_task+0x578>)
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	2103      	movs	r1, #3
 800b84a:	480d      	ldr	r0, [pc, #52]	@ (800b880 <menuconfig_task+0x580>)
 800b84c:	f7fe ff72 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800b850:	4b09      	ldr	r3, [pc, #36]	@ (800b878 <menuconfig_task+0x578>)
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	461a      	mov	r2, r3
 800b856:	4613      	mov	r3, r2
 800b858:	00db      	lsls	r3, r3, #3
 800b85a:	1a9b      	subs	r3, r3, r2
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	4a07      	ldr	r2, [pc, #28]	@ (800b87c <menuconfig_task+0x57c>)
 800b860:	4413      	add	r3, r2
 800b862:	4619      	mov	r1, r3
 800b864:	4806      	ldr	r0, [pc, #24]	@ (800b880 <menuconfig_task+0x580>)
 800b866:	f7fe ffb8 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800b86a:	e0d5      	b.n	800ba18 <menuconfig_task+0x718>
							state = 0;
 800b86c:	4b02      	ldr	r3, [pc, #8]	@ (800b878 <menuconfig_task+0x578>)
 800b86e:	2200      	movs	r2, #0
 800b870:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < 4; i++) {
 800b872:	2300      	movs	r3, #0
 800b874:	623b      	str	r3, [r7, #32]
 800b876:	e043      	b.n	800b900 <menuconfig_task+0x600>
 800b878:	200027a4 	.word	0x200027a4
 800b87c:	200027a8 	.word	0x200027a8
 800b880:	200003a0 	.word	0x200003a0
 800b884:	080146dc 	.word	0x080146dc
 800b888:	200003d0 	.word	0x200003d0
 800b88c:	200003ac 	.word	0x200003ac
 800b890:	200003c0 	.word	0x200003c0
 800b894:	200003c4 	.word	0x200003c4
							    val[i] = getnumber(data[i].payload, data[i].len); // convert from array to uint16
 800b898:	6a3a      	ldr	r2, [r7, #32]
 800b89a:	4613      	mov	r3, r2
 800b89c:	00db      	lsls	r3, r3, #3
 800b89e:	1a9b      	subs	r3, r3, r2
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	4aa1      	ldr	r2, [pc, #644]	@ (800bb28 <menuconfig_task+0x828>)
 800b8a4:	1898      	adds	r0, r3, r2
 800b8a6:	49a0      	ldr	r1, [pc, #640]	@ (800bb28 <menuconfig_task+0x828>)
 800b8a8:	6a3a      	ldr	r2, [r7, #32]
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	00db      	lsls	r3, r3, #3
 800b8ae:	1a9b      	subs	r3, r3, r2
 800b8b0:	005b      	lsls	r3, r3, #1
 800b8b2:	440b      	add	r3, r1
 800b8b4:	330c      	adds	r3, #12
 800b8b6:	881b      	ldrh	r3, [r3, #0]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	f7ff faa9 	bl	800ae10 <getnumber>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	005b      	lsls	r3, r3, #1
 800b8c6:	3328      	adds	r3, #40	@ 0x28
 800b8c8:	443b      	add	r3, r7
 800b8ca:	f823 2c1c 	strh.w	r2, [r3, #-28]
								memset(data[i].payload, 0, sizeof(data[i].payload));  // reset data
 800b8ce:	6a3a      	ldr	r2, [r7, #32]
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	00db      	lsls	r3, r3, #3
 800b8d4:	1a9b      	subs	r3, r3, r2
 800b8d6:	005b      	lsls	r3, r3, #1
 800b8d8:	4a93      	ldr	r2, [pc, #588]	@ (800bb28 <menuconfig_task+0x828>)
 800b8da:	4413      	add	r3, r2
 800b8dc:	220b      	movs	r2, #11
 800b8de:	2100      	movs	r1, #0
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f006 fc25 	bl	8012130 <memset>
								data[i].len = 0;  // reset length
 800b8e6:	4990      	ldr	r1, [pc, #576]	@ (800bb28 <menuconfig_task+0x828>)
 800b8e8:	6a3a      	ldr	r2, [r7, #32]
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	00db      	lsls	r3, r3, #3
 800b8ee:	1a9b      	subs	r3, r3, r2
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	440b      	add	r3, r1
 800b8f4:	330c      	adds	r3, #12
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	801a      	strh	r2, [r3, #0]
							for (int i = 0; i < 4; i++) {
 800b8fa:	6a3b      	ldr	r3, [r7, #32]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	623b      	str	r3, [r7, #32]
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	2b03      	cmp	r3, #3
 800b904:	ddc8      	ble.n	800b898 <menuconfig_task+0x598>
							if (val[0] != 0) parameter_read.s1 = val[0];
 800b906:	89bb      	ldrh	r3, [r7, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d003      	beq.n	800b914 <menuconfig_task+0x614>
 800b90c:	89bb      	ldrh	r3, [r7, #12]
 800b90e:	b2da      	uxtb	r2, r3
 800b910:	4b86      	ldr	r3, [pc, #536]	@ (800bb2c <menuconfig_task+0x82c>)
 800b912:	72da      	strb	r2, [r3, #11]
							if (val[1] != 0) parameter_read.t1 = val[1];
 800b914:	89fb      	ldrh	r3, [r7, #14]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d003      	beq.n	800b922 <menuconfig_task+0x622>
 800b91a:	89fb      	ldrh	r3, [r7, #14]
 800b91c:	b2da      	uxtb	r2, r3
 800b91e:	4b83      	ldr	r3, [pc, #524]	@ (800bb2c <menuconfig_task+0x82c>)
 800b920:	731a      	strb	r2, [r3, #12]
							if (val[2] != 0) parameter_read.s2 = val[2];
 800b922:	8a3b      	ldrh	r3, [r7, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d003      	beq.n	800b930 <menuconfig_task+0x630>
 800b928:	8a3b      	ldrh	r3, [r7, #16]
 800b92a:	b2da      	uxtb	r2, r3
 800b92c:	4b7f      	ldr	r3, [pc, #508]	@ (800bb2c <menuconfig_task+0x82c>)
 800b92e:	735a      	strb	r2, [r3, #13]
							if (val[3] != 0) parameter_read.t2 = val[3];
 800b930:	8a7b      	ldrh	r3, [r7, #18]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <menuconfig_task+0x63e>
 800b936:	8a7b      	ldrh	r3, [r7, #18]
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	4b7c      	ldr	r3, [pc, #496]	@ (800bb2c <menuconfig_task+0x82c>)
 800b93c:	739a      	strb	r2, [r3, #14]
							if (val[0] || val[1] || val[2] || val[3]) {
 800b93e:	89bb      	ldrh	r3, [r7, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d108      	bne.n	800b956 <menuconfig_task+0x656>
 800b944:	89fb      	ldrh	r3, [r7, #14]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d105      	bne.n	800b956 <menuconfig_task+0x656>
 800b94a:	8a3b      	ldrh	r3, [r7, #16]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d102      	bne.n	800b956 <menuconfig_task+0x656>
 800b950:	8a7b      	ldrh	r3, [r7, #18]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d05f      	beq.n	800ba16 <menuconfig_task+0x716>
								CLCD_I2C_Clear(&LCD1);
 800b956:	4876      	ldr	r0, [pc, #472]	@ (800bb30 <menuconfig_task+0x830>)
 800b958:	f7fe ff56 	bl	800a808 <CLCD_I2C_Clear>
								CLCD_I2C_SetCursor(&LCD1, 1, 0);
 800b95c:	2200      	movs	r2, #0
 800b95e:	2101      	movs	r1, #1
 800b960:	4873      	ldr	r0, [pc, #460]	@ (800bb30 <menuconfig_task+0x830>)
 800b962:	f7fe fee7 	bl	800a734 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1, "change sucessfully");
 800b966:	4973      	ldr	r1, [pc, #460]	@ (800bb34 <menuconfig_task+0x834>)
 800b968:	4871      	ldr	r0, [pc, #452]	@ (800bb30 <menuconfig_task+0x830>)
 800b96a:	f7fe ff36 	bl	800a7da <CLCD_I2C_WriteString>
								vTaskDelay(pdMS_TO_TICKS(1000));
 800b96e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b972:	f001 fdaf 	bl	800d4d4 <vTaskDelay>
								CLCD_I2C_Clear(&LCD1);
 800b976:	486e      	ldr	r0, [pc, #440]	@ (800bb30 <menuconfig_task+0x830>)
 800b978:	f7fe ff46 	bl	800a808 <CLCD_I2C_Clear>
								CLCD_I2C_SetCursor(&LCD1, 0, 0);
 800b97c:	2200      	movs	r2, #0
 800b97e:	2100      	movs	r1, #0
 800b980:	486b      	ldr	r0, [pc, #428]	@ (800bb30 <menuconfig_task+0x830>)
 800b982:	f7fe fed7 	bl	800a734 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1,"s1:");
 800b986:	496c      	ldr	r1, [pc, #432]	@ (800bb38 <menuconfig_task+0x838>)
 800b988:	4869      	ldr	r0, [pc, #420]	@ (800bb30 <menuconfig_task+0x830>)
 800b98a:	f7fe ff26 	bl	800a7da <CLCD_I2C_WriteString>
								CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800b98e:	2201      	movs	r2, #1
 800b990:	2100      	movs	r1, #0
 800b992:	4867      	ldr	r0, [pc, #412]	@ (800bb30 <menuconfig_task+0x830>)
 800b994:	f7fe fece 	bl	800a734 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1,"t1:");
 800b998:	4968      	ldr	r1, [pc, #416]	@ (800bb3c <menuconfig_task+0x83c>)
 800b99a:	4865      	ldr	r0, [pc, #404]	@ (800bb30 <menuconfig_task+0x830>)
 800b99c:	f7fe ff1d 	bl	800a7da <CLCD_I2C_WriteString>
								CLCD_I2C_SetCursor(&LCD1, 0, 2);
 800b9a0:	2202      	movs	r2, #2
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	4862      	ldr	r0, [pc, #392]	@ (800bb30 <menuconfig_task+0x830>)
 800b9a6:	f7fe fec5 	bl	800a734 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1,"s2:");
 800b9aa:	4965      	ldr	r1, [pc, #404]	@ (800bb40 <menuconfig_task+0x840>)
 800b9ac:	4860      	ldr	r0, [pc, #384]	@ (800bb30 <menuconfig_task+0x830>)
 800b9ae:	f7fe ff14 	bl	800a7da <CLCD_I2C_WriteString>
								CLCD_I2C_SetCursor(&LCD1, 0, 3);
 800b9b2:	2203      	movs	r2, #3
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	485e      	ldr	r0, [pc, #376]	@ (800bb30 <menuconfig_task+0x830>)
 800b9b8:	f7fe febc 	bl	800a734 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1,"t2:");
 800b9bc:	4961      	ldr	r1, [pc, #388]	@ (800bb44 <menuconfig_task+0x844>)
 800b9be:	485c      	ldr	r0, [pc, #368]	@ (800bb30 <menuconfig_task+0x830>)
 800b9c0:	f7fe ff0b 	bl	800a7da <CLCD_I2C_WriteString>
								CLCD_I2C_SetCursor(&LCD1, 19, 0);
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	2113      	movs	r1, #19
 800b9c8:	4859      	ldr	r0, [pc, #356]	@ (800bb30 <menuconfig_task+0x830>)
 800b9ca:	f7fe feb3 	bl	800a734 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1, "<");
 800b9ce:	495e      	ldr	r1, [pc, #376]	@ (800bb48 <menuconfig_task+0x848>)
 800b9d0:	4857      	ldr	r0, [pc, #348]	@ (800bb30 <menuconfig_task+0x830>)
 800b9d2:	f7fe ff02 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800b9d6:	e01e      	b.n	800ba16 <menuconfig_task+0x716>
							 curr_state = sMenuconfig_Changepassword;
 800b9d8:	4b5c      	ldr	r3, [pc, #368]	@ (800bb4c <menuconfig_task+0x84c>)
 800b9da:	2203      	movs	r2, #3
 800b9dc:	701a      	strb	r2, [r3, #0]
							 CLCD_I2C_Clear(&LCD1);
 800b9de:	4854      	ldr	r0, [pc, #336]	@ (800bb30 <menuconfig_task+0x830>)
 800b9e0:	f7fe ff12 	bl	800a808 <CLCD_I2C_Clear>
							 CLCD_I2C_SetCursor(&LCD1, 2, 0);
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	2102      	movs	r1, #2
 800b9e8:	4851      	ldr	r0, [pc, #324]	@ (800bb30 <menuconfig_task+0x830>)
 800b9ea:	f7fe fea3 	bl	800a734 <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "change password");
 800b9ee:	4958      	ldr	r1, [pc, #352]	@ (800bb50 <menuconfig_task+0x850>)
 800b9f0:	484f      	ldr	r0, [pc, #316]	@ (800bb30 <menuconfig_task+0x830>)
 800b9f2:	f7fe fef2 	bl	800a7da <CLCD_I2C_WriteString>
							 CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	484d      	ldr	r0, [pc, #308]	@ (800bb30 <menuconfig_task+0x830>)
 800b9fc:	f7fe fe9a 	bl	800a734 <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "Enter:");
 800ba00:	4954      	ldr	r1, [pc, #336]	@ (800bb54 <menuconfig_task+0x854>)
 800ba02:	484b      	ldr	r0, [pc, #300]	@ (800bb30 <menuconfig_task+0x830>)
 800ba04:	f7fe fee9 	bl	800a7da <CLCD_I2C_WriteString>
							 CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800ba08:	4953      	ldr	r1, [pc, #332]	@ (800bb58 <menuconfig_task+0x858>)
 800ba0a:	4849      	ldr	r0, [pc, #292]	@ (800bb30 <menuconfig_task+0x830>)
 800ba0c:	f7fe fee5 	bl	800a7da <CLCD_I2C_WriteString>
							 break;
 800ba10:	e002      	b.n	800ba18 <menuconfig_task+0x718>
							 break;
 800ba12:	bf00      	nop
 800ba14:	e326      	b.n	800c064 <menuconfig_task+0xd64>
							break;
 800ba16:	bf00      	nop
					break;
 800ba18:	e324      	b.n	800c064 <menuconfig_task+0xd64>
					switch (btn_value) {
 800ba1a:	8b7b      	ldrh	r3, [r7, #26]
 800ba1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba20:	f000 80e3 	beq.w	800bbea <menuconfig_task+0x8ea>
 800ba24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba28:	f300 8139 	bgt.w	800bc9e <menuconfig_task+0x99e>
 800ba2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba30:	d070      	beq.n	800bb14 <menuconfig_task+0x814>
 800ba32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba36:	f300 8132 	bgt.w	800bc9e <menuconfig_task+0x99e>
 800ba3a:	2b08      	cmp	r3, #8
 800ba3c:	d001      	beq.n	800ba42 <menuconfig_task+0x742>
 800ba3e:	2b80      	cmp	r3, #128	@ 0x80
								break;
 800ba40:	e12e      	b.n	800bca0 <menuconfig_task+0x9a0>
								print_cli("write-s1:%d s2:%d s3:%d s4:%d\n",parameter_read.s1,parameter_read.t1,parameter_read.s2,parameter_read.t2);
 800ba42:	4b3a      	ldr	r3, [pc, #232]	@ (800bb2c <menuconfig_task+0x82c>)
 800ba44:	7adb      	ldrb	r3, [r3, #11]
 800ba46:	4619      	mov	r1, r3
 800ba48:	4b38      	ldr	r3, [pc, #224]	@ (800bb2c <menuconfig_task+0x82c>)
 800ba4a:	7b1b      	ldrb	r3, [r3, #12]
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	4b37      	ldr	r3, [pc, #220]	@ (800bb2c <menuconfig_task+0x82c>)
 800ba50:	7b5b      	ldrb	r3, [r3, #13]
 800ba52:	4618      	mov	r0, r3
 800ba54:	4b35      	ldr	r3, [pc, #212]	@ (800bb2c <menuconfig_task+0x82c>)
 800ba56:	7b9b      	ldrb	r3, [r3, #14]
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	483f      	ldr	r0, [pc, #252]	@ (800bb5c <menuconfig_task+0x85c>)
 800ba5e:	f7ff f915 	bl	800ac8c <print_cli>
								flash_unlock();
 800ba62:	f7fe ff0d 	bl	800a880 <flash_unlock>
								if(flash_erease(FLASH_SECTOR_7) != HAL_OK){
 800ba66:	2007      	movs	r0, #7
 800ba68:	f7fe ff16 	bl	800a898 <flash_erease>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d002      	beq.n	800ba78 <menuconfig_task+0x778>
									flash_erease(FLASH_SECTOR_7);
 800ba72:	2007      	movs	r0, #7
 800ba74:	f7fe ff10 	bl	800a898 <flash_erease>
								flash_write_arr(0x08060000, (uint8_t *)&parameter_read, sizeof(parameter_read));
 800ba78:	2211      	movs	r2, #17
 800ba7a:	492c      	ldr	r1, [pc, #176]	@ (800bb2c <menuconfig_task+0x82c>)
 800ba7c:	4838      	ldr	r0, [pc, #224]	@ (800bb60 <menuconfig_task+0x860>)
 800ba7e:	f7fe ff26 	bl	800a8ce <flash_write_arr>
								flash_lock();
 800ba82:	f7fe ff03 	bl	800a88c <flash_lock>
								flash_read_arr(0x08060000, (uint8_t*)&parameter_read, sizeof(parameter_read));
 800ba86:	2211      	movs	r2, #17
 800ba88:	4928      	ldr	r1, [pc, #160]	@ (800bb2c <menuconfig_task+0x82c>)
 800ba8a:	4835      	ldr	r0, [pc, #212]	@ (800bb60 <menuconfig_task+0x860>)
 800ba8c:	f7fe ff4c 	bl	800a928 <flash_read_arr>
								print_cli("read-s1:%d s2:%d s3:%d s4:%d\n",parameter_read.s1,parameter_read.t1,parameter_read.s2,parameter_read.t2);
 800ba90:	4b26      	ldr	r3, [pc, #152]	@ (800bb2c <menuconfig_task+0x82c>)
 800ba92:	7adb      	ldrb	r3, [r3, #11]
 800ba94:	4619      	mov	r1, r3
 800ba96:	4b25      	ldr	r3, [pc, #148]	@ (800bb2c <menuconfig_task+0x82c>)
 800ba98:	7b1b      	ldrb	r3, [r3, #12]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	4b23      	ldr	r3, [pc, #140]	@ (800bb2c <menuconfig_task+0x82c>)
 800ba9e:	7b5b      	ldrb	r3, [r3, #13]
 800baa0:	4618      	mov	r0, r3
 800baa2:	4b22      	ldr	r3, [pc, #136]	@ (800bb2c <menuconfig_task+0x82c>)
 800baa4:	7b9b      	ldrb	r3, [r3, #14]
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	4603      	mov	r3, r0
 800baaa:	482e      	ldr	r0, [pc, #184]	@ (800bb64 <menuconfig_task+0x864>)
 800baac:	f7ff f8ee 	bl	800ac8c <print_cli>
								CLCD_I2C_Clear(&LCD1);
 800bab0:	481f      	ldr	r0, [pc, #124]	@ (800bb30 <menuconfig_task+0x830>)
 800bab2:	f7fe fea9 	bl	800a808 <CLCD_I2C_Clear>
								CLCD_I2C_SetCursor(&LCD1, 3, 0);
 800bab6:	2200      	movs	r2, #0
 800bab8:	2103      	movs	r1, #3
 800baba:	481d      	ldr	r0, [pc, #116]	@ (800bb30 <menuconfig_task+0x830>)
 800babc:	f7fe fe3a 	bl	800a734 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1, "save sucessfully");
 800bac0:	4929      	ldr	r1, [pc, #164]	@ (800bb68 <menuconfig_task+0x868>)
 800bac2:	481b      	ldr	r0, [pc, #108]	@ (800bb30 <menuconfig_task+0x830>)
 800bac4:	f7fe fe89 	bl	800a7da <CLCD_I2C_WriteString>
								vTaskDelay(pdMS_TO_TICKS(1000));
 800bac8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bacc:	f001 fd02 	bl	800d4d4 <vTaskDelay>
								curr_state = sMenuconfig_Saveparameter;
 800bad0:	4b1e      	ldr	r3, [pc, #120]	@ (800bb4c <menuconfig_task+0x84c>)
 800bad2:	2204      	movs	r2, #4
 800bad4:	701a      	strb	r2, [r3, #0]
								CLCD_I2C_Clear(&LCD1);
 800bad6:	4816      	ldr	r0, [pc, #88]	@ (800bb30 <menuconfig_task+0x830>)
 800bad8:	f7fe fe96 	bl	800a808 <CLCD_I2C_Clear>
								CLCD_I2C_SetCursor(&LCD1, 2, 0);
 800badc:	2200      	movs	r2, #0
 800bade:	2102      	movs	r1, #2
 800bae0:	4813      	ldr	r0, [pc, #76]	@ (800bb30 <menuconfig_task+0x830>)
 800bae2:	f7fe fe27 	bl	800a734 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1, "save to flash?");
 800bae6:	4921      	ldr	r1, [pc, #132]	@ (800bb6c <menuconfig_task+0x86c>)
 800bae8:	4811      	ldr	r0, [pc, #68]	@ (800bb30 <menuconfig_task+0x830>)
 800baea:	f7fe fe76 	bl	800a7da <CLCD_I2C_WriteString>
								CLCD_I2C_SetCursor(&LCD1, 2, 1);
 800baee:	2201      	movs	r2, #1
 800baf0:	2102      	movs	r1, #2
 800baf2:	480f      	ldr	r0, [pc, #60]	@ (800bb30 <menuconfig_task+0x830>)
 800baf4:	f7fe fe1e 	bl	800a734 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1, "YES(A)");
 800baf8:	491d      	ldr	r1, [pc, #116]	@ (800bb70 <menuconfig_task+0x870>)
 800bafa:	480d      	ldr	r0, [pc, #52]	@ (800bb30 <menuconfig_task+0x830>)
 800bafc:	f7fe fe6d 	bl	800a7da <CLCD_I2C_WriteString>
								CLCD_I2C_SetCursor(&LCD1, 12, 1);
 800bb00:	2201      	movs	r2, #1
 800bb02:	210c      	movs	r1, #12
 800bb04:	480a      	ldr	r0, [pc, #40]	@ (800bb30 <menuconfig_task+0x830>)
 800bb06:	f7fe fe15 	bl	800a734 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1, "NO(B)");
 800bb0a:	491a      	ldr	r1, [pc, #104]	@ (800bb74 <menuconfig_task+0x874>)
 800bb0c:	4808      	ldr	r0, [pc, #32]	@ (800bb30 <menuconfig_task+0x830>)
 800bb0e:	f7fe fe64 	bl	800a7da <CLCD_I2C_WriteString>
								break;
 800bb12:	e0c5      	b.n	800bca0 <menuconfig_task+0x9a0>
								curr_state = sRunning;
 800bb14:	4b0d      	ldr	r3, [pc, #52]	@ (800bb4c <menuconfig_task+0x84c>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	701a      	strb	r2, [r3, #0]
								state = 0;
 800bb1a:	4b17      	ldr	r3, [pc, #92]	@ (800bb78 <menuconfig_task+0x878>)
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	701a      	strb	r2, [r3, #0]
								for (int i = 0; i < 4; i++) {
 800bb20:	2300      	movs	r3, #0
 800bb22:	61fb      	str	r3, [r7, #28]
 800bb24:	e043      	b.n	800bbae <menuconfig_task+0x8ae>
 800bb26:	bf00      	nop
 800bb28:	200027a8 	.word	0x200027a8
 800bb2c:	200003e4 	.word	0x200003e4
 800bb30:	200003a0 	.word	0x200003a0
 800bb34:	0801475c 	.word	0x0801475c
 800bb38:	08014770 	.word	0x08014770
 800bb3c:	08014774 	.word	0x08014774
 800bb40:	08014778 	.word	0x08014778
 800bb44:	0801477c 	.word	0x0801477c
 800bb48:	080146e0 	.word	0x080146e0
 800bb4c:	200003d0 	.word	0x200003d0
 800bb50:	08014780 	.word	0x08014780
 800bb54:	08014790 	.word	0x08014790
 800bb58:	200027e0 	.word	0x200027e0
 800bb5c:	08014798 	.word	0x08014798
 800bb60:	08060000 	.word	0x08060000
 800bb64:	080147b8 	.word	0x080147b8
 800bb68:	080147d8 	.word	0x080147d8
 800bb6c:	080147ec 	.word	0x080147ec
 800bb70:	080147fc 	.word	0x080147fc
 800bb74:	08014804 	.word	0x08014804
 800bb78:	200027a4 	.word	0x200027a4
									memset(data[i].payload, 0, sizeof(data[i].payload));  // reset data
 800bb7c:	69fa      	ldr	r2, [r7, #28]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	00db      	lsls	r3, r3, #3
 800bb82:	1a9b      	subs	r3, r3, r2
 800bb84:	005b      	lsls	r3, r3, #1
 800bb86:	4ac0      	ldr	r2, [pc, #768]	@ (800be88 <menuconfig_task+0xb88>)
 800bb88:	4413      	add	r3, r2
 800bb8a:	220b      	movs	r2, #11
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f006 face 	bl	8012130 <memset>
									data[i].len = 0;  // reset length
 800bb94:	49bc      	ldr	r1, [pc, #752]	@ (800be88 <menuconfig_task+0xb88>)
 800bb96:	69fa      	ldr	r2, [r7, #28]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	00db      	lsls	r3, r3, #3
 800bb9c:	1a9b      	subs	r3, r3, r2
 800bb9e:	005b      	lsls	r3, r3, #1
 800bba0:	440b      	add	r3, r1
 800bba2:	330c      	adds	r3, #12
 800bba4:	2200      	movs	r2, #0
 800bba6:	801a      	strh	r2, [r3, #0]
								for (int i = 0; i < 4; i++) {
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	61fb      	str	r3, [r7, #28]
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	dde3      	ble.n	800bb7c <menuconfig_task+0x87c>
								memset(password.payload, 0, sizeof(password.payload));  // reset data
 800bbb4:	220b      	movs	r2, #11
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	48b4      	ldr	r0, [pc, #720]	@ (800be8c <menuconfig_task+0xb8c>)
 800bbba:	f006 fab9 	bl	8012130 <memset>
								password.len = 0;  // reset length
 800bbbe:	4bb3      	ldr	r3, [pc, #716]	@ (800be8c <menuconfig_task+0xb8c>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	819a      	strh	r2, [r3, #12]
								CLCD_I2C_Clear(&LCD1);
 800bbc4:	48b2      	ldr	r0, [pc, #712]	@ (800be90 <menuconfig_task+0xb90>)
 800bbc6:	f7fe fe1f 	bl	800a808 <CLCD_I2C_Clear>
								vTaskResume(handle_sensor_task);
 800bbca:	4bb2      	ldr	r3, [pc, #712]	@ (800be94 <menuconfig_task+0xb94>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f001 fda4 	bl	800d71c <vTaskResume>
								vTaskResume(handle_motor_task);
 800bbd4:	4bb0      	ldr	r3, [pc, #704]	@ (800be98 <menuconfig_task+0xb98>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f001 fd9f 	bl	800d71c <vTaskResume>
								vTaskResume(handle_sd_card_task);
 800bbde:	4baf      	ldr	r3, [pc, #700]	@ (800be9c <menuconfig_task+0xb9c>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f001 fd9a 	bl	800d71c <vTaskResume>
								break;
 800bbe8:	e05a      	b.n	800bca0 <menuconfig_task+0x9a0>
								 curr_state = sMenucofig_Setparameter;
 800bbea:	4bad      	ldr	r3, [pc, #692]	@ (800bea0 <menuconfig_task+0xba0>)
 800bbec:	2202      	movs	r2, #2
 800bbee:	701a      	strb	r2, [r3, #0]
								 CLCD_I2C_Clear(&LCD1);
 800bbf0:	48a7      	ldr	r0, [pc, #668]	@ (800be90 <menuconfig_task+0xb90>)
 800bbf2:	f7fe fe09 	bl	800a808 <CLCD_I2C_Clear>
								 CLCD_I2C_SetCursor(&LCD1, 0, 0);
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	48a5      	ldr	r0, [pc, #660]	@ (800be90 <menuconfig_task+0xb90>)
 800bbfc:	f7fe fd9a 	bl	800a734 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "s1:");
 800bc00:	49a8      	ldr	r1, [pc, #672]	@ (800bea4 <menuconfig_task+0xba4>)
 800bc02:	48a3      	ldr	r0, [pc, #652]	@ (800be90 <menuconfig_task+0xb90>)
 800bc04:	f7fe fde9 	bl	800a7da <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 19, state);
 800bc08:	4ba7      	ldr	r3, [pc, #668]	@ (800bea8 <menuconfig_task+0xba8>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	2113      	movs	r1, #19
 800bc10:	489f      	ldr	r0, [pc, #636]	@ (800be90 <menuconfig_task+0xb90>)
 800bc12:	f7fe fd8f 	bl	800a734 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "<");
 800bc16:	49a5      	ldr	r1, [pc, #660]	@ (800beac <menuconfig_task+0xbac>)
 800bc18:	489d      	ldr	r0, [pc, #628]	@ (800be90 <menuconfig_task+0xb90>)
 800bc1a:	f7fe fdde 	bl	800a7da <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 3, 0);
 800bc1e:	2200      	movs	r2, #0
 800bc20:	2103      	movs	r1, #3
 800bc22:	489b      	ldr	r0, [pc, #620]	@ (800be90 <menuconfig_task+0xb90>)
 800bc24:	f7fe fd86 	bl	800a734 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, (char*)data[0].payload);
 800bc28:	4997      	ldr	r1, [pc, #604]	@ (800be88 <menuconfig_task+0xb88>)
 800bc2a:	4899      	ldr	r0, [pc, #612]	@ (800be90 <menuconfig_task+0xb90>)
 800bc2c:	f7fe fdd5 	bl	800a7da <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800bc30:	2201      	movs	r2, #1
 800bc32:	2100      	movs	r1, #0
 800bc34:	4896      	ldr	r0, [pc, #600]	@ (800be90 <menuconfig_task+0xb90>)
 800bc36:	f7fe fd7d 	bl	800a734 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "t1:");
 800bc3a:	499d      	ldr	r1, [pc, #628]	@ (800beb0 <menuconfig_task+0xbb0>)
 800bc3c:	4894      	ldr	r0, [pc, #592]	@ (800be90 <menuconfig_task+0xb90>)
 800bc3e:	f7fe fdcc 	bl	800a7da <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 3, 1);
 800bc42:	2201      	movs	r2, #1
 800bc44:	2103      	movs	r1, #3
 800bc46:	4892      	ldr	r0, [pc, #584]	@ (800be90 <menuconfig_task+0xb90>)
 800bc48:	f7fe fd74 	bl	800a734 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, (char*)data[1].payload);
 800bc4c:	4999      	ldr	r1, [pc, #612]	@ (800beb4 <menuconfig_task+0xbb4>)
 800bc4e:	4890      	ldr	r0, [pc, #576]	@ (800be90 <menuconfig_task+0xb90>)
 800bc50:	f7fe fdc3 	bl	800a7da <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 0, 2);
 800bc54:	2202      	movs	r2, #2
 800bc56:	2100      	movs	r1, #0
 800bc58:	488d      	ldr	r0, [pc, #564]	@ (800be90 <menuconfig_task+0xb90>)
 800bc5a:	f7fe fd6b 	bl	800a734 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "s2:");
 800bc5e:	4996      	ldr	r1, [pc, #600]	@ (800beb8 <menuconfig_task+0xbb8>)
 800bc60:	488b      	ldr	r0, [pc, #556]	@ (800be90 <menuconfig_task+0xb90>)
 800bc62:	f7fe fdba 	bl	800a7da <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 3, 2);
 800bc66:	2202      	movs	r2, #2
 800bc68:	2103      	movs	r1, #3
 800bc6a:	4889      	ldr	r0, [pc, #548]	@ (800be90 <menuconfig_task+0xb90>)
 800bc6c:	f7fe fd62 	bl	800a734 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, (char*)data[2].payload);
 800bc70:	4992      	ldr	r1, [pc, #584]	@ (800bebc <menuconfig_task+0xbbc>)
 800bc72:	4887      	ldr	r0, [pc, #540]	@ (800be90 <menuconfig_task+0xb90>)
 800bc74:	f7fe fdb1 	bl	800a7da <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 0, 3);
 800bc78:	2203      	movs	r2, #3
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	4884      	ldr	r0, [pc, #528]	@ (800be90 <menuconfig_task+0xb90>)
 800bc7e:	f7fe fd59 	bl	800a734 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "t2:");
 800bc82:	498f      	ldr	r1, [pc, #572]	@ (800bec0 <menuconfig_task+0xbc0>)
 800bc84:	4882      	ldr	r0, [pc, #520]	@ (800be90 <menuconfig_task+0xb90>)
 800bc86:	f7fe fda8 	bl	800a7da <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 3, 3);
 800bc8a:	2203      	movs	r2, #3
 800bc8c:	2103      	movs	r1, #3
 800bc8e:	4880      	ldr	r0, [pc, #512]	@ (800be90 <menuconfig_task+0xb90>)
 800bc90:	f7fe fd50 	bl	800a734 <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, (char*)data[3].payload);
 800bc94:	498b      	ldr	r1, [pc, #556]	@ (800bec4 <menuconfig_task+0xbc4>)
 800bc96:	487e      	ldr	r0, [pc, #504]	@ (800be90 <menuconfig_task+0xb90>)
 800bc98:	f7fe fd9f 	bl	800a7da <CLCD_I2C_WriteString>
								 break;
 800bc9c:	e000      	b.n	800bca0 <menuconfig_task+0x9a0>
								 break;
 800bc9e:	bf00      	nop
					break;
 800bca0:	e1e0      	b.n	800c064 <menuconfig_task+0xd64>
					switch (btn_value) {
 800bca2:	8b7b      	ldrh	r3, [r7, #26]
 800bca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bca8:	f000 81b6 	beq.w	800c018 <menuconfig_task+0xd18>
 800bcac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bcb0:	f300 81d4 	bgt.w	800c05c <menuconfig_task+0xd5c>
 800bcb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bcb8:	f000 816c 	beq.w	800bf94 <menuconfig_task+0xc94>
 800bcbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bcc0:	f300 81cc 	bgt.w	800c05c <menuconfig_task+0xd5c>
 800bcc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcc8:	f000 8156 	beq.w	800bf78 <menuconfig_task+0xc78>
 800bccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcd0:	f300 81c4 	bgt.w	800c05c <menuconfig_task+0xd5c>
 800bcd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcd8:	f000 812d 	beq.w	800bf36 <menuconfig_task+0xc36>
 800bcdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bce0:	f300 81bc 	bgt.w	800c05c <menuconfig_task+0xd5c>
 800bce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bce8:	f000 810a 	beq.w	800bf00 <menuconfig_task+0xc00>
 800bcec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bcf0:	f300 81b4 	bgt.w	800c05c <menuconfig_task+0xd5c>
 800bcf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcf8:	f000 80f4 	beq.w	800bee4 <menuconfig_task+0xbe4>
 800bcfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd00:	f300 81ac 	bgt.w	800c05c <menuconfig_task+0xd5c>
 800bd04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd08:	f000 80de 	beq.w	800bec8 <menuconfig_task+0xbc8>
 800bd0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd10:	f300 81a4 	bgt.w	800c05c <menuconfig_task+0xd5c>
 800bd14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd18:	f000 80a7 	beq.w	800be6a <menuconfig_task+0xb6a>
 800bd1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd20:	f300 819c 	bgt.w	800c05c <menuconfig_task+0xd5c>
 800bd24:	2b20      	cmp	r3, #32
 800bd26:	dc49      	bgt.n	800bdbc <menuconfig_task+0xabc>
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	f340 8197 	ble.w	800c05c <menuconfig_task+0xd5c>
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	2b1f      	cmp	r3, #31
 800bd32:	f200 8193 	bhi.w	800c05c <menuconfig_task+0xd5c>
 800bd36:	a201      	add	r2, pc, #4	@ (adr r2, 800bd3c <menuconfig_task+0xa3c>)
 800bd38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd3c:	0800bdc3 	.word	0x0800bdc3
 800bd40:	0800bddf 	.word	0x0800bddf
 800bd44:	0800c05d 	.word	0x0800c05d
 800bd48:	0800bdfb 	.word	0x0800bdfb
 800bd4c:	0800c05d 	.word	0x0800c05d
 800bd50:	0800c05d 	.word	0x0800c05d
 800bd54:	0800c05d 	.word	0x0800c05d
 800bd58:	0800c05d 	.word	0x0800c05d
 800bd5c:	0800c05d 	.word	0x0800c05d
 800bd60:	0800c05d 	.word	0x0800c05d
 800bd64:	0800c05d 	.word	0x0800c05d
 800bd68:	0800c05d 	.word	0x0800c05d
 800bd6c:	0800c05d 	.word	0x0800c05d
 800bd70:	0800c05d 	.word	0x0800c05d
 800bd74:	0800c05d 	.word	0x0800c05d
 800bd78:	0800be17 	.word	0x0800be17
 800bd7c:	0800c05d 	.word	0x0800c05d
 800bd80:	0800c05d 	.word	0x0800c05d
 800bd84:	0800c05d 	.word	0x0800c05d
 800bd88:	0800c05d 	.word	0x0800c05d
 800bd8c:	0800c05d 	.word	0x0800c05d
 800bd90:	0800c05d 	.word	0x0800c05d
 800bd94:	0800c05d 	.word	0x0800c05d
 800bd98:	0800c05d 	.word	0x0800c05d
 800bd9c:	0800c05d 	.word	0x0800c05d
 800bda0:	0800c05d 	.word	0x0800c05d
 800bda4:	0800c05d 	.word	0x0800c05d
 800bda8:	0800c05d 	.word	0x0800c05d
 800bdac:	0800c05d 	.word	0x0800c05d
 800bdb0:	0800c05d 	.word	0x0800c05d
 800bdb4:	0800c05d 	.word	0x0800c05d
 800bdb8:	0800be33 	.word	0x0800be33
 800bdbc:	2b40      	cmp	r3, #64	@ 0x40
 800bdbe:	d046      	beq.n	800be4e <menuconfig_task+0xb4e>
							 break;
 800bdc0:	e14c      	b.n	800c05c <menuconfig_task+0xd5c>
							add_data(&password, '1');
 800bdc2:	2131      	movs	r1, #49	@ 0x31
 800bdc4:	4831      	ldr	r0, [pc, #196]	@ (800be8c <menuconfig_task+0xb8c>)
 800bdc6:	f7fe ffdb 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800bdca:	2201      	movs	r2, #1
 800bdcc:	2106      	movs	r1, #6
 800bdce:	4830      	ldr	r0, [pc, #192]	@ (800be90 <menuconfig_task+0xb90>)
 800bdd0:	f7fe fcb0 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800bdd4:	492d      	ldr	r1, [pc, #180]	@ (800be8c <menuconfig_task+0xb8c>)
 800bdd6:	482e      	ldr	r0, [pc, #184]	@ (800be90 <menuconfig_task+0xb90>)
 800bdd8:	f7fe fcff 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800bddc:	e141      	b.n	800c062 <menuconfig_task+0xd62>
							add_data(&password, '2');
 800bdde:	2132      	movs	r1, #50	@ 0x32
 800bde0:	482a      	ldr	r0, [pc, #168]	@ (800be8c <menuconfig_task+0xb8c>)
 800bde2:	f7fe ffcd 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800bde6:	2201      	movs	r2, #1
 800bde8:	2106      	movs	r1, #6
 800bdea:	4829      	ldr	r0, [pc, #164]	@ (800be90 <menuconfig_task+0xb90>)
 800bdec:	f7fe fca2 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800bdf0:	4926      	ldr	r1, [pc, #152]	@ (800be8c <menuconfig_task+0xb8c>)
 800bdf2:	4827      	ldr	r0, [pc, #156]	@ (800be90 <menuconfig_task+0xb90>)
 800bdf4:	f7fe fcf1 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800bdf8:	e133      	b.n	800c062 <menuconfig_task+0xd62>
							add_data(&password, '3');
 800bdfa:	2133      	movs	r1, #51	@ 0x33
 800bdfc:	4823      	ldr	r0, [pc, #140]	@ (800be8c <menuconfig_task+0xb8c>)
 800bdfe:	f7fe ffbf 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800be02:	2201      	movs	r2, #1
 800be04:	2106      	movs	r1, #6
 800be06:	4822      	ldr	r0, [pc, #136]	@ (800be90 <menuconfig_task+0xb90>)
 800be08:	f7fe fc94 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800be0c:	491f      	ldr	r1, [pc, #124]	@ (800be8c <menuconfig_task+0xb8c>)
 800be0e:	4820      	ldr	r0, [pc, #128]	@ (800be90 <menuconfig_task+0xb90>)
 800be10:	f7fe fce3 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800be14:	e125      	b.n	800c062 <menuconfig_task+0xd62>
							add_data(&password, '4');
 800be16:	2134      	movs	r1, #52	@ 0x34
 800be18:	481c      	ldr	r0, [pc, #112]	@ (800be8c <menuconfig_task+0xb8c>)
 800be1a:	f7fe ffb1 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800be1e:	2201      	movs	r2, #1
 800be20:	2106      	movs	r1, #6
 800be22:	481b      	ldr	r0, [pc, #108]	@ (800be90 <menuconfig_task+0xb90>)
 800be24:	f7fe fc86 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800be28:	4918      	ldr	r1, [pc, #96]	@ (800be8c <menuconfig_task+0xb8c>)
 800be2a:	4819      	ldr	r0, [pc, #100]	@ (800be90 <menuconfig_task+0xb90>)
 800be2c:	f7fe fcd5 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800be30:	e117      	b.n	800c062 <menuconfig_task+0xd62>
							add_data(&password, '5');
 800be32:	2135      	movs	r1, #53	@ 0x35
 800be34:	4815      	ldr	r0, [pc, #84]	@ (800be8c <menuconfig_task+0xb8c>)
 800be36:	f7fe ffa3 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800be3a:	2201      	movs	r2, #1
 800be3c:	2106      	movs	r1, #6
 800be3e:	4814      	ldr	r0, [pc, #80]	@ (800be90 <menuconfig_task+0xb90>)
 800be40:	f7fe fc78 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800be44:	4911      	ldr	r1, [pc, #68]	@ (800be8c <menuconfig_task+0xb8c>)
 800be46:	4812      	ldr	r0, [pc, #72]	@ (800be90 <menuconfig_task+0xb90>)
 800be48:	f7fe fcc7 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800be4c:	e109      	b.n	800c062 <menuconfig_task+0xd62>
							add_data(&password, '6');
 800be4e:	2136      	movs	r1, #54	@ 0x36
 800be50:	480e      	ldr	r0, [pc, #56]	@ (800be8c <menuconfig_task+0xb8c>)
 800be52:	f7fe ff95 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800be56:	2201      	movs	r2, #1
 800be58:	2106      	movs	r1, #6
 800be5a:	480d      	ldr	r0, [pc, #52]	@ (800be90 <menuconfig_task+0xb90>)
 800be5c:	f7fe fc6a 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800be60:	490a      	ldr	r1, [pc, #40]	@ (800be8c <menuconfig_task+0xb8c>)
 800be62:	480b      	ldr	r0, [pc, #44]	@ (800be90 <menuconfig_task+0xb90>)
 800be64:	f7fe fcb9 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800be68:	e0fb      	b.n	800c062 <menuconfig_task+0xd62>
							add_data(&password, '7');
 800be6a:	2137      	movs	r1, #55	@ 0x37
 800be6c:	4807      	ldr	r0, [pc, #28]	@ (800be8c <menuconfig_task+0xb8c>)
 800be6e:	f7fe ff87 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800be72:	2201      	movs	r2, #1
 800be74:	2106      	movs	r1, #6
 800be76:	4806      	ldr	r0, [pc, #24]	@ (800be90 <menuconfig_task+0xb90>)
 800be78:	f7fe fc5c 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800be7c:	4903      	ldr	r1, [pc, #12]	@ (800be8c <menuconfig_task+0xb8c>)
 800be7e:	4804      	ldr	r0, [pc, #16]	@ (800be90 <menuconfig_task+0xb90>)
 800be80:	f7fe fcab 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800be84:	e0ed      	b.n	800c062 <menuconfig_task+0xd62>
 800be86:	bf00      	nop
 800be88:	200027a8 	.word	0x200027a8
 800be8c:	200027e0 	.word	0x200027e0
 800be90:	200003a0 	.word	0x200003a0
 800be94:	200003ac 	.word	0x200003ac
 800be98:	200003c0 	.word	0x200003c0
 800be9c:	200003c4 	.word	0x200003c4
 800bea0:	200003d0 	.word	0x200003d0
 800bea4:	08014770 	.word	0x08014770
 800bea8:	200027a4 	.word	0x200027a4
 800beac:	080146e0 	.word	0x080146e0
 800beb0:	08014774 	.word	0x08014774
 800beb4:	200027b6 	.word	0x200027b6
 800beb8:	08014778 	.word	0x08014778
 800bebc:	200027c4 	.word	0x200027c4
 800bec0:	0801477c 	.word	0x0801477c
 800bec4:	200027d2 	.word	0x200027d2
							add_data(&password, '8');
 800bec8:	2138      	movs	r1, #56	@ 0x38
 800beca:	4867      	ldr	r0, [pc, #412]	@ (800c068 <menuconfig_task+0xd68>)
 800becc:	f7fe ff58 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800bed0:	2201      	movs	r2, #1
 800bed2:	2106      	movs	r1, #6
 800bed4:	4865      	ldr	r0, [pc, #404]	@ (800c06c <menuconfig_task+0xd6c>)
 800bed6:	f7fe fc2d 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800beda:	4963      	ldr	r1, [pc, #396]	@ (800c068 <menuconfig_task+0xd68>)
 800bedc:	4863      	ldr	r0, [pc, #396]	@ (800c06c <menuconfig_task+0xd6c>)
 800bede:	f7fe fc7c 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800bee2:	e0be      	b.n	800c062 <menuconfig_task+0xd62>
							add_data(&password, '9');
 800bee4:	2139      	movs	r1, #57	@ 0x39
 800bee6:	4860      	ldr	r0, [pc, #384]	@ (800c068 <menuconfig_task+0xd68>)
 800bee8:	f7fe ff4a 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800beec:	2201      	movs	r2, #1
 800beee:	2106      	movs	r1, #6
 800bef0:	485e      	ldr	r0, [pc, #376]	@ (800c06c <menuconfig_task+0xd6c>)
 800bef2:	f7fe fc1f 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800bef6:	495c      	ldr	r1, [pc, #368]	@ (800c068 <menuconfig_task+0xd68>)
 800bef8:	485c      	ldr	r0, [pc, #368]	@ (800c06c <menuconfig_task+0xd6c>)
 800befa:	f7fe fc6e 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800befe:	e0b0      	b.n	800c062 <menuconfig_task+0xd62>
							delete_data(&password);
 800bf00:	4859      	ldr	r0, [pc, #356]	@ (800c068 <menuconfig_task+0xd68>)
 800bf02:	f7fe ff23 	bl	800ad4c <delete_data>
							CLCD_I2C_SetCursor(&LCD1, 6+password.len, 1);
 800bf06:	4b58      	ldr	r3, [pc, #352]	@ (800c068 <menuconfig_task+0xd68>)
 800bf08:	899b      	ldrh	r3, [r3, #12]
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	3306      	adds	r3, #6
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	2201      	movs	r2, #1
 800bf12:	4619      	mov	r1, r3
 800bf14:	4855      	ldr	r0, [pc, #340]	@ (800c06c <menuconfig_task+0xd6c>)
 800bf16:	f7fe fc0d 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, " ");
 800bf1a:	4955      	ldr	r1, [pc, #340]	@ (800c070 <menuconfig_task+0xd70>)
 800bf1c:	4853      	ldr	r0, [pc, #332]	@ (800c06c <menuconfig_task+0xd6c>)
 800bf1e:	f7fe fc5c 	bl	800a7da <CLCD_I2C_WriteString>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800bf22:	2201      	movs	r2, #1
 800bf24:	2106      	movs	r1, #6
 800bf26:	4851      	ldr	r0, [pc, #324]	@ (800c06c <menuconfig_task+0xd6c>)
 800bf28:	f7fe fc04 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800bf2c:	494e      	ldr	r1, [pc, #312]	@ (800c068 <menuconfig_task+0xd68>)
 800bf2e:	484f      	ldr	r0, [pc, #316]	@ (800c06c <menuconfig_task+0xd6c>)
 800bf30:	f7fe fc53 	bl	800a7da <CLCD_I2C_WriteString>
							break;
 800bf34:	e095      	b.n	800c062 <menuconfig_task+0xd62>
							 curr_state = sRunning;
 800bf36:	4b4f      	ldr	r3, [pc, #316]	@ (800c074 <menuconfig_task+0xd74>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	701a      	strb	r2, [r3, #0]
							 state = 0;
 800bf3c:	4b4e      	ldr	r3, [pc, #312]	@ (800c078 <menuconfig_task+0xd78>)
 800bf3e:	2200      	movs	r2, #0
 800bf40:	701a      	strb	r2, [r3, #0]
							 CLCD_I2C_Clear(&LCD1);
 800bf42:	484a      	ldr	r0, [pc, #296]	@ (800c06c <menuconfig_task+0xd6c>)
 800bf44:	f7fe fc60 	bl	800a808 <CLCD_I2C_Clear>
							 memset(password.payload, 0, sizeof(password.payload));  // reset data
 800bf48:	220b      	movs	r2, #11
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	4846      	ldr	r0, [pc, #280]	@ (800c068 <menuconfig_task+0xd68>)
 800bf4e:	f006 f8ef 	bl	8012130 <memset>
							 password.len = 0;  // reset length
 800bf52:	4b45      	ldr	r3, [pc, #276]	@ (800c068 <menuconfig_task+0xd68>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	819a      	strh	r2, [r3, #12]
							 vTaskResume(handle_sensor_task);
 800bf58:	4b48      	ldr	r3, [pc, #288]	@ (800c07c <menuconfig_task+0xd7c>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f001 fbdd 	bl	800d71c <vTaskResume>
							 vTaskResume(handle_motor_task);
 800bf62:	4b47      	ldr	r3, [pc, #284]	@ (800c080 <menuconfig_task+0xd80>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f001 fbd8 	bl	800d71c <vTaskResume>
							 vTaskResume(handle_sd_card_task);
 800bf6c:	4b45      	ldr	r3, [pc, #276]	@ (800c084 <menuconfig_task+0xd84>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f001 fbd3 	bl	800d71c <vTaskResume>
							 break;
 800bf76:	e074      	b.n	800c062 <menuconfig_task+0xd62>
							add_data(&password, '0');
 800bf78:	2130      	movs	r1, #48	@ 0x30
 800bf7a:	483b      	ldr	r0, [pc, #236]	@ (800c068 <menuconfig_task+0xd68>)
 800bf7c:	f7fe ff00 	bl	800ad80 <add_data>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 800bf80:	2201      	movs	r2, #1
 800bf82:	2106      	movs	r1, #6
 800bf84:	4839      	ldr	r0, [pc, #228]	@ (800c06c <menuconfig_task+0xd6c>)
 800bf86:	f7fe fbd5 	bl	800a734 <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800bf8a:	4937      	ldr	r1, [pc, #220]	@ (800c068 <menuconfig_task+0xd68>)
 800bf8c:	4837      	ldr	r0, [pc, #220]	@ (800c06c <menuconfig_task+0xd6c>)
 800bf8e:	f7fe fc24 	bl	800a7da <CLCD_I2C_WriteString>
							 break;
 800bf92:	e066      	b.n	800c062 <menuconfig_task+0xd62>
							 if(password.len != 0){
 800bf94:	4b34      	ldr	r3, [pc, #208]	@ (800c068 <menuconfig_task+0xd68>)
 800bf96:	899b      	ldrh	r3, [r3, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d061      	beq.n	800c060 <menuconfig_task+0xd60>
								state = 0;
 800bf9c:	4b36      	ldr	r3, [pc, #216]	@ (800c078 <menuconfig_task+0xd78>)
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	701a      	strb	r2, [r3, #0]
								memcpy(parameter_read.password, password.payload, sizeof(password.payload)); // change pass word
 800bfa2:	4a39      	ldr	r2, [pc, #228]	@ (800c088 <menuconfig_task+0xd88>)
 800bfa4:	4b30      	ldr	r3, [pc, #192]	@ (800c068 <menuconfig_task+0xd68>)
 800bfa6:	cb03      	ldmia	r3!, {r0, r1}
 800bfa8:	6010      	str	r0, [r2, #0]
 800bfaa:	6051      	str	r1, [r2, #4]
 800bfac:	8819      	ldrh	r1, [r3, #0]
 800bfae:	789b      	ldrb	r3, [r3, #2]
 800bfb0:	8111      	strh	r1, [r2, #8]
 800bfb2:	7293      	strb	r3, [r2, #10]
								memset(password.payload, 0, sizeof(password.payload));  // reset data
 800bfb4:	220b      	movs	r2, #11
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	482b      	ldr	r0, [pc, #172]	@ (800c068 <menuconfig_task+0xd68>)
 800bfba:	f006 f8b9 	bl	8012130 <memset>
								password.len = 0;  // reset length
 800bfbe:	4b2a      	ldr	r3, [pc, #168]	@ (800c068 <menuconfig_task+0xd68>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	819a      	strh	r2, [r3, #12]
								CLCD_I2C_Clear(&LCD1);
 800bfc4:	4829      	ldr	r0, [pc, #164]	@ (800c06c <menuconfig_task+0xd6c>)
 800bfc6:	f7fe fc1f 	bl	800a808 <CLCD_I2C_Clear>
								CLCD_I2C_SetCursor(&LCD1, 1, 0);
 800bfca:	2200      	movs	r2, #0
 800bfcc:	2101      	movs	r1, #1
 800bfce:	4827      	ldr	r0, [pc, #156]	@ (800c06c <menuconfig_task+0xd6c>)
 800bfd0:	f7fe fbb0 	bl	800a734 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1, "change sucessfully");
 800bfd4:	492d      	ldr	r1, [pc, #180]	@ (800c08c <menuconfig_task+0xd8c>)
 800bfd6:	4825      	ldr	r0, [pc, #148]	@ (800c06c <menuconfig_task+0xd6c>)
 800bfd8:	f7fe fbff 	bl	800a7da <CLCD_I2C_WriteString>
								vTaskDelay(pdMS_TO_TICKS(1000));
 800bfdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bfe0:	f001 fa78 	bl	800d4d4 <vTaskDelay>
								CLCD_I2C_Clear(&LCD1);
 800bfe4:	4821      	ldr	r0, [pc, #132]	@ (800c06c <menuconfig_task+0xd6c>)
 800bfe6:	f7fe fc0f 	bl	800a808 <CLCD_I2C_Clear>
								CLCD_I2C_SetCursor(&LCD1, 2, 0);
 800bfea:	2200      	movs	r2, #0
 800bfec:	2102      	movs	r1, #2
 800bfee:	481f      	ldr	r0, [pc, #124]	@ (800c06c <menuconfig_task+0xd6c>)
 800bff0:	f7fe fba0 	bl	800a734 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1, "change password");
 800bff4:	4926      	ldr	r1, [pc, #152]	@ (800c090 <menuconfig_task+0xd90>)
 800bff6:	481d      	ldr	r0, [pc, #116]	@ (800c06c <menuconfig_task+0xd6c>)
 800bff8:	f7fe fbef 	bl	800a7da <CLCD_I2C_WriteString>
								CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800bffc:	2201      	movs	r2, #1
 800bffe:	2100      	movs	r1, #0
 800c000:	481a      	ldr	r0, [pc, #104]	@ (800c06c <menuconfig_task+0xd6c>)
 800c002:	f7fe fb97 	bl	800a734 <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1, "Enter:");
 800c006:	4923      	ldr	r1, [pc, #140]	@ (800c094 <menuconfig_task+0xd94>)
 800c008:	4818      	ldr	r0, [pc, #96]	@ (800c06c <menuconfig_task+0xd6c>)
 800c00a:	f7fe fbe6 	bl	800a7da <CLCD_I2C_WriteString>
								CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800c00e:	4916      	ldr	r1, [pc, #88]	@ (800c068 <menuconfig_task+0xd68>)
 800c010:	4816      	ldr	r0, [pc, #88]	@ (800c06c <menuconfig_task+0xd6c>)
 800c012:	f7fe fbe2 	bl	800a7da <CLCD_I2C_WriteString>
							 break;
 800c016:	e023      	b.n	800c060 <menuconfig_task+0xd60>
							 curr_state = sMenuconfig_Saveparameter;
 800c018:	4b16      	ldr	r3, [pc, #88]	@ (800c074 <menuconfig_task+0xd74>)
 800c01a:	2204      	movs	r2, #4
 800c01c:	701a      	strb	r2, [r3, #0]
							 CLCD_I2C_Clear(&LCD1);
 800c01e:	4813      	ldr	r0, [pc, #76]	@ (800c06c <menuconfig_task+0xd6c>)
 800c020:	f7fe fbf2 	bl	800a808 <CLCD_I2C_Clear>
							 CLCD_I2C_SetCursor(&LCD1, 2, 0);
 800c024:	2200      	movs	r2, #0
 800c026:	2102      	movs	r1, #2
 800c028:	4810      	ldr	r0, [pc, #64]	@ (800c06c <menuconfig_task+0xd6c>)
 800c02a:	f7fe fb83 	bl	800a734 <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "save to flash?");
 800c02e:	491a      	ldr	r1, [pc, #104]	@ (800c098 <menuconfig_task+0xd98>)
 800c030:	480e      	ldr	r0, [pc, #56]	@ (800c06c <menuconfig_task+0xd6c>)
 800c032:	f7fe fbd2 	bl	800a7da <CLCD_I2C_WriteString>
							 CLCD_I2C_SetCursor(&LCD1, 2, 1);
 800c036:	2201      	movs	r2, #1
 800c038:	2102      	movs	r1, #2
 800c03a:	480c      	ldr	r0, [pc, #48]	@ (800c06c <menuconfig_task+0xd6c>)
 800c03c:	f7fe fb7a 	bl	800a734 <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "YES(A)");
 800c040:	4916      	ldr	r1, [pc, #88]	@ (800c09c <menuconfig_task+0xd9c>)
 800c042:	480a      	ldr	r0, [pc, #40]	@ (800c06c <menuconfig_task+0xd6c>)
 800c044:	f7fe fbc9 	bl	800a7da <CLCD_I2C_WriteString>
							 CLCD_I2C_SetCursor(&LCD1, 12, 1);
 800c048:	2201      	movs	r2, #1
 800c04a:	210c      	movs	r1, #12
 800c04c:	4807      	ldr	r0, [pc, #28]	@ (800c06c <menuconfig_task+0xd6c>)
 800c04e:	f7fe fb71 	bl	800a734 <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "NO(B)");
 800c052:	4913      	ldr	r1, [pc, #76]	@ (800c0a0 <menuconfig_task+0xda0>)
 800c054:	4805      	ldr	r0, [pc, #20]	@ (800c06c <menuconfig_task+0xd6c>)
 800c056:	f7fe fbc0 	bl	800a7da <CLCD_I2C_WriteString>
							 break;
 800c05a:	e002      	b.n	800c062 <menuconfig_task+0xd62>
							 break;
 800c05c:	bf00      	nop
 800c05e:	e000      	b.n	800c062 <menuconfig_task+0xd62>
							 break;
 800c060:	bf00      	nop
					break;
 800c062:	bf00      	nop
		xTaskNotifyWait(0,0,&btn_value_addr,portMAX_DELAY);
 800c064:	f7ff b950 	b.w	800b308 <menuconfig_task+0x8>
 800c068:	200027e0 	.word	0x200027e0
 800c06c:	200003a0 	.word	0x200003a0
 800c070:	080146dc 	.word	0x080146dc
 800c074:	200003d0 	.word	0x200003d0
 800c078:	200027a4 	.word	0x200027a4
 800c07c:	200003ac 	.word	0x200003ac
 800c080:	200003c0 	.word	0x200003c0
 800c084:	200003c4 	.word	0x200003c4
 800c088:	200003e4 	.word	0x200003e4
 800c08c:	0801475c 	.word	0x0801475c
 800c090:	08014780 	.word	0x08014780
 800c094:	08014790 	.word	0x08014790
 800c098:	080147ec 	.word	0x080147ec
 800c09c:	080147fc 	.word	0x080147fc
 800c0a0:	08014804 	.word	0x08014804

0800c0a4 <password_task>:
	}

}


void password_task(void *param){
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af02      	add	r7, sp, #8
 800c0aa:	6078      	str	r0, [r7, #4]
	uint32_t btn_value_addr;

//	UBaseType_t uxHighWaterMark;

	while(1){
		xTaskNotifyWait(0,0,&btn_value_addr,portMAX_DELAY);
 800c0ac:	f107 0308 	add.w	r3, r7, #8
 800c0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b4:	9200      	str	r2, [sp, #0]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	f002 fc14 	bl	800e8e8 <xTaskGenericNotifyWait>
		btn_value = (uint16_t) btn_value_addr;
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	81fb      	strh	r3, [r7, #14]
		//printf("%d\n",btn_value);

		if (btn_value) {
 800c0c4:	89fb      	ldrh	r3, [r7, #14]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d0f0      	beq.n	800c0ac <password_task+0x8>
			switch (btn_value) {
 800c0ca:	89fb      	ldrh	r3, [r7, #14]
 800c0cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c0d0:	f000 814b 	beq.w	800c36a <password_task+0x2c6>
 800c0d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c0d8:	f300 81a7 	bgt.w	800c42a <password_task+0x386>
 800c0dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0e0:	f000 8135 	beq.w	800c34e <password_task+0x2aa>
 800c0e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0e8:	f300 819f 	bgt.w	800c42a <password_task+0x386>
 800c0ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0f0:	f000 810c 	beq.w	800c30c <password_task+0x268>
 800c0f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0f8:	f300 8197 	bgt.w	800c42a <password_task+0x386>
 800c0fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c100:	f000 80e9 	beq.w	800c2d6 <password_task+0x232>
 800c104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c108:	f300 818f 	bgt.w	800c42a <password_task+0x386>
 800c10c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c110:	f000 80d3 	beq.w	800c2ba <password_task+0x216>
 800c114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c118:	f300 8187 	bgt.w	800c42a <password_task+0x386>
 800c11c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c120:	f000 80bd 	beq.w	800c29e <password_task+0x1fa>
 800c124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c128:	f300 817f 	bgt.w	800c42a <password_task+0x386>
 800c12c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c130:	f000 80a7 	beq.w	800c282 <password_task+0x1de>
 800c134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c138:	f300 8177 	bgt.w	800c42a <password_task+0x386>
 800c13c:	2b20      	cmp	r3, #32
 800c13e:	dc49      	bgt.n	800c1d4 <password_task+0x130>
 800c140:	2b00      	cmp	r3, #0
 800c142:	f340 8172 	ble.w	800c42a <password_task+0x386>
 800c146:	3b01      	subs	r3, #1
 800c148:	2b1f      	cmp	r3, #31
 800c14a:	f200 816e 	bhi.w	800c42a <password_task+0x386>
 800c14e:	a201      	add	r2, pc, #4	@ (adr r2, 800c154 <password_task+0xb0>)
 800c150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c154:	0800c1db 	.word	0x0800c1db
 800c158:	0800c1f7 	.word	0x0800c1f7
 800c15c:	0800c42b 	.word	0x0800c42b
 800c160:	0800c213 	.word	0x0800c213
 800c164:	0800c42b 	.word	0x0800c42b
 800c168:	0800c42b 	.word	0x0800c42b
 800c16c:	0800c42b 	.word	0x0800c42b
 800c170:	0800c42b 	.word	0x0800c42b
 800c174:	0800c42b 	.word	0x0800c42b
 800c178:	0800c42b 	.word	0x0800c42b
 800c17c:	0800c42b 	.word	0x0800c42b
 800c180:	0800c42b 	.word	0x0800c42b
 800c184:	0800c42b 	.word	0x0800c42b
 800c188:	0800c42b 	.word	0x0800c42b
 800c18c:	0800c42b 	.word	0x0800c42b
 800c190:	0800c22f 	.word	0x0800c22f
 800c194:	0800c42b 	.word	0x0800c42b
 800c198:	0800c42b 	.word	0x0800c42b
 800c19c:	0800c42b 	.word	0x0800c42b
 800c1a0:	0800c42b 	.word	0x0800c42b
 800c1a4:	0800c42b 	.word	0x0800c42b
 800c1a8:	0800c42b 	.word	0x0800c42b
 800c1ac:	0800c42b 	.word	0x0800c42b
 800c1b0:	0800c42b 	.word	0x0800c42b
 800c1b4:	0800c42b 	.word	0x0800c42b
 800c1b8:	0800c42b 	.word	0x0800c42b
 800c1bc:	0800c42b 	.word	0x0800c42b
 800c1c0:	0800c42b 	.word	0x0800c42b
 800c1c4:	0800c42b 	.word	0x0800c42b
 800c1c8:	0800c42b 	.word	0x0800c42b
 800c1cc:	0800c42b 	.word	0x0800c42b
 800c1d0:	0800c24b 	.word	0x0800c24b
 800c1d4:	2b40      	cmp	r3, #64	@ 0x40
 800c1d6:	d046      	beq.n	800c266 <password_task+0x1c2>
						CLCD_I2C_SetCursor(&LCD1, 4, 1);
					}
					 break;

				 default:
					 break;
 800c1d8:	e127      	b.n	800c42a <password_task+0x386>
					add_data(&password, '1');
 800c1da:	2131      	movs	r1, #49	@ 0x31
 800c1dc:	4894      	ldr	r0, [pc, #592]	@ (800c430 <password_task+0x38c>)
 800c1de:	f7fe fdcf 	bl	800ad80 <add_data>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	2104      	movs	r1, #4
 800c1e6:	4893      	ldr	r0, [pc, #588]	@ (800c434 <password_task+0x390>)
 800c1e8:	f7fe faa4 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800c1ec:	4990      	ldr	r1, [pc, #576]	@ (800c430 <password_task+0x38c>)
 800c1ee:	4891      	ldr	r0, [pc, #580]	@ (800c434 <password_task+0x390>)
 800c1f0:	f7fe faf3 	bl	800a7da <CLCD_I2C_WriteString>
					break;
 800c1f4:	e11a      	b.n	800c42c <password_task+0x388>
					add_data(&password, '2');
 800c1f6:	2132      	movs	r1, #50	@ 0x32
 800c1f8:	488d      	ldr	r0, [pc, #564]	@ (800c430 <password_task+0x38c>)
 800c1fa:	f7fe fdc1 	bl	800ad80 <add_data>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800c1fe:	2201      	movs	r2, #1
 800c200:	2104      	movs	r1, #4
 800c202:	488c      	ldr	r0, [pc, #560]	@ (800c434 <password_task+0x390>)
 800c204:	f7fe fa96 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800c208:	4989      	ldr	r1, [pc, #548]	@ (800c430 <password_task+0x38c>)
 800c20a:	488a      	ldr	r0, [pc, #552]	@ (800c434 <password_task+0x390>)
 800c20c:	f7fe fae5 	bl	800a7da <CLCD_I2C_WriteString>
					break;
 800c210:	e10c      	b.n	800c42c <password_task+0x388>
					add_data(&password, '3');
 800c212:	2133      	movs	r1, #51	@ 0x33
 800c214:	4886      	ldr	r0, [pc, #536]	@ (800c430 <password_task+0x38c>)
 800c216:	f7fe fdb3 	bl	800ad80 <add_data>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800c21a:	2201      	movs	r2, #1
 800c21c:	2104      	movs	r1, #4
 800c21e:	4885      	ldr	r0, [pc, #532]	@ (800c434 <password_task+0x390>)
 800c220:	f7fe fa88 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800c224:	4982      	ldr	r1, [pc, #520]	@ (800c430 <password_task+0x38c>)
 800c226:	4883      	ldr	r0, [pc, #524]	@ (800c434 <password_task+0x390>)
 800c228:	f7fe fad7 	bl	800a7da <CLCD_I2C_WriteString>
					break;
 800c22c:	e0fe      	b.n	800c42c <password_task+0x388>
					add_data(&password, '4');
 800c22e:	2134      	movs	r1, #52	@ 0x34
 800c230:	487f      	ldr	r0, [pc, #508]	@ (800c430 <password_task+0x38c>)
 800c232:	f7fe fda5 	bl	800ad80 <add_data>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800c236:	2201      	movs	r2, #1
 800c238:	2104      	movs	r1, #4
 800c23a:	487e      	ldr	r0, [pc, #504]	@ (800c434 <password_task+0x390>)
 800c23c:	f7fe fa7a 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800c240:	497b      	ldr	r1, [pc, #492]	@ (800c430 <password_task+0x38c>)
 800c242:	487c      	ldr	r0, [pc, #496]	@ (800c434 <password_task+0x390>)
 800c244:	f7fe fac9 	bl	800a7da <CLCD_I2C_WriteString>
					break;
 800c248:	e0f0      	b.n	800c42c <password_task+0x388>
					add_data(&password, '5');
 800c24a:	2135      	movs	r1, #53	@ 0x35
 800c24c:	4878      	ldr	r0, [pc, #480]	@ (800c430 <password_task+0x38c>)
 800c24e:	f7fe fd97 	bl	800ad80 <add_data>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800c252:	2201      	movs	r2, #1
 800c254:	2104      	movs	r1, #4
 800c256:	4877      	ldr	r0, [pc, #476]	@ (800c434 <password_task+0x390>)
 800c258:	f7fe fa6c 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800c25c:	4974      	ldr	r1, [pc, #464]	@ (800c430 <password_task+0x38c>)
 800c25e:	4875      	ldr	r0, [pc, #468]	@ (800c434 <password_task+0x390>)
 800c260:	f7fe fabb 	bl	800a7da <CLCD_I2C_WriteString>
					break;
 800c264:	e0e2      	b.n	800c42c <password_task+0x388>
					add_data(&password, '6');
 800c266:	2136      	movs	r1, #54	@ 0x36
 800c268:	4871      	ldr	r0, [pc, #452]	@ (800c430 <password_task+0x38c>)
 800c26a:	f7fe fd89 	bl	800ad80 <add_data>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800c26e:	2201      	movs	r2, #1
 800c270:	2104      	movs	r1, #4
 800c272:	4870      	ldr	r0, [pc, #448]	@ (800c434 <password_task+0x390>)
 800c274:	f7fe fa5e 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800c278:	496d      	ldr	r1, [pc, #436]	@ (800c430 <password_task+0x38c>)
 800c27a:	486e      	ldr	r0, [pc, #440]	@ (800c434 <password_task+0x390>)
 800c27c:	f7fe faad 	bl	800a7da <CLCD_I2C_WriteString>
					break;
 800c280:	e0d4      	b.n	800c42c <password_task+0x388>
					add_data(&password, '7');
 800c282:	2137      	movs	r1, #55	@ 0x37
 800c284:	486a      	ldr	r0, [pc, #424]	@ (800c430 <password_task+0x38c>)
 800c286:	f7fe fd7b 	bl	800ad80 <add_data>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800c28a:	2201      	movs	r2, #1
 800c28c:	2104      	movs	r1, #4
 800c28e:	4869      	ldr	r0, [pc, #420]	@ (800c434 <password_task+0x390>)
 800c290:	f7fe fa50 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800c294:	4966      	ldr	r1, [pc, #408]	@ (800c430 <password_task+0x38c>)
 800c296:	4867      	ldr	r0, [pc, #412]	@ (800c434 <password_task+0x390>)
 800c298:	f7fe fa9f 	bl	800a7da <CLCD_I2C_WriteString>
					break;
 800c29c:	e0c6      	b.n	800c42c <password_task+0x388>
					add_data(&password, '8');
 800c29e:	2138      	movs	r1, #56	@ 0x38
 800c2a0:	4863      	ldr	r0, [pc, #396]	@ (800c430 <password_task+0x38c>)
 800c2a2:	f7fe fd6d 	bl	800ad80 <add_data>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	2104      	movs	r1, #4
 800c2aa:	4862      	ldr	r0, [pc, #392]	@ (800c434 <password_task+0x390>)
 800c2ac:	f7fe fa42 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800c2b0:	495f      	ldr	r1, [pc, #380]	@ (800c430 <password_task+0x38c>)
 800c2b2:	4860      	ldr	r0, [pc, #384]	@ (800c434 <password_task+0x390>)
 800c2b4:	f7fe fa91 	bl	800a7da <CLCD_I2C_WriteString>
					break;
 800c2b8:	e0b8      	b.n	800c42c <password_task+0x388>
					add_data(&password, '9');
 800c2ba:	2139      	movs	r1, #57	@ 0x39
 800c2bc:	485c      	ldr	r0, [pc, #368]	@ (800c430 <password_task+0x38c>)
 800c2be:	f7fe fd5f 	bl	800ad80 <add_data>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	2104      	movs	r1, #4
 800c2c6:	485b      	ldr	r0, [pc, #364]	@ (800c434 <password_task+0x390>)
 800c2c8:	f7fe fa34 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800c2cc:	4958      	ldr	r1, [pc, #352]	@ (800c430 <password_task+0x38c>)
 800c2ce:	4859      	ldr	r0, [pc, #356]	@ (800c434 <password_task+0x390>)
 800c2d0:	f7fe fa83 	bl	800a7da <CLCD_I2C_WriteString>
					break;
 800c2d4:	e0aa      	b.n	800c42c <password_task+0x388>
					delete_data(&password);
 800c2d6:	4856      	ldr	r0, [pc, #344]	@ (800c430 <password_task+0x38c>)
 800c2d8:	f7fe fd38 	bl	800ad4c <delete_data>
					CLCD_I2C_SetCursor(&LCD1, 4+password.len, 1);
 800c2dc:	4b54      	ldr	r3, [pc, #336]	@ (800c430 <password_task+0x38c>)
 800c2de:	899b      	ldrh	r3, [r3, #12]
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	4852      	ldr	r0, [pc, #328]	@ (800c434 <password_task+0x390>)
 800c2ec:	f7fe fa22 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, " ");
 800c2f0:	4951      	ldr	r1, [pc, #324]	@ (800c438 <password_task+0x394>)
 800c2f2:	4850      	ldr	r0, [pc, #320]	@ (800c434 <password_task+0x390>)
 800c2f4:	f7fe fa71 	bl	800a7da <CLCD_I2C_WriteString>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	2104      	movs	r1, #4
 800c2fc:	484d      	ldr	r0, [pc, #308]	@ (800c434 <password_task+0x390>)
 800c2fe:	f7fe fa19 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800c302:	494b      	ldr	r1, [pc, #300]	@ (800c430 <password_task+0x38c>)
 800c304:	484b      	ldr	r0, [pc, #300]	@ (800c434 <password_task+0x390>)
 800c306:	f7fe fa68 	bl	800a7da <CLCD_I2C_WriteString>
					break;
 800c30a:	e08f      	b.n	800c42c <password_task+0x388>
					curr_state = sRunning;
 800c30c:	4b4b      	ldr	r3, [pc, #300]	@ (800c43c <password_task+0x398>)
 800c30e:	2200      	movs	r2, #0
 800c310:	701a      	strb	r2, [r3, #0]
					CLCD_I2C_Clear(&LCD1);
 800c312:	4848      	ldr	r0, [pc, #288]	@ (800c434 <password_task+0x390>)
 800c314:	f7fe fa78 	bl	800a808 <CLCD_I2C_Clear>
					CLCD_I2C_BlinkOff(&LCD1);
 800c318:	4846      	ldr	r0, [pc, #280]	@ (800c434 <password_task+0x390>)
 800c31a:	f7fe fa9b 	bl	800a854 <CLCD_I2C_BlinkOff>
					memset(password.payload, 0, sizeof(password.payload));  // reset data
 800c31e:	220b      	movs	r2, #11
 800c320:	2100      	movs	r1, #0
 800c322:	4843      	ldr	r0, [pc, #268]	@ (800c430 <password_task+0x38c>)
 800c324:	f005 ff04 	bl	8012130 <memset>
					password.len = 0;  // reset length
 800c328:	4b41      	ldr	r3, [pc, #260]	@ (800c430 <password_task+0x38c>)
 800c32a:	2200      	movs	r2, #0
 800c32c:	819a      	strh	r2, [r3, #12]
					vTaskResume(handle_motor_task);
 800c32e:	4b44      	ldr	r3, [pc, #272]	@ (800c440 <password_task+0x39c>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4618      	mov	r0, r3
 800c334:	f001 f9f2 	bl	800d71c <vTaskResume>
					vTaskResume(handle_sensor_task);
 800c338:	4b42      	ldr	r3, [pc, #264]	@ (800c444 <password_task+0x3a0>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f001 f9ed 	bl	800d71c <vTaskResume>
					vTaskResume(handle_sd_card_task);
 800c342:	4b41      	ldr	r3, [pc, #260]	@ (800c448 <password_task+0x3a4>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4618      	mov	r0, r3
 800c348:	f001 f9e8 	bl	800d71c <vTaskResume>
					break;
 800c34c:	e06e      	b.n	800c42c <password_task+0x388>
					add_data(&password, '0');
 800c34e:	2130      	movs	r1, #48	@ 0x30
 800c350:	4837      	ldr	r0, [pc, #220]	@ (800c430 <password_task+0x38c>)
 800c352:	f7fe fd15 	bl	800ad80 <add_data>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800c356:	2201      	movs	r2, #1
 800c358:	2104      	movs	r1, #4
 800c35a:	4836      	ldr	r0, [pc, #216]	@ (800c434 <password_task+0x390>)
 800c35c:	f7fe f9ea 	bl	800a734 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800c360:	4933      	ldr	r1, [pc, #204]	@ (800c430 <password_task+0x38c>)
 800c362:	4834      	ldr	r0, [pc, #208]	@ (800c434 <password_task+0x390>)
 800c364:	f7fe fa39 	bl	800a7da <CLCD_I2C_WriteString>
					 break;
 800c368:	e060      	b.n	800c42c <password_task+0x388>
					 if (strcmp((char*)password.payload, (char*)parameter_read.password) == 0)
 800c36a:	4938      	ldr	r1, [pc, #224]	@ (800c44c <password_task+0x3a8>)
 800c36c:	4830      	ldr	r0, [pc, #192]	@ (800c430 <password_task+0x38c>)
 800c36e:	f7f3 ff81 	bl	8000274 <strcmp>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d13e      	bne.n	800c3f6 <password_task+0x352>
						  curr_state = sMenucofig_Setparameter;
 800c378:	4b30      	ldr	r3, [pc, #192]	@ (800c43c <password_task+0x398>)
 800c37a:	2202      	movs	r2, #2
 800c37c:	701a      	strb	r2, [r3, #0]
						  memset(password.payload, 0, sizeof(password.payload));  // reset data
 800c37e:	220b      	movs	r2, #11
 800c380:	2100      	movs	r1, #0
 800c382:	482b      	ldr	r0, [pc, #172]	@ (800c430 <password_task+0x38c>)
 800c384:	f005 fed4 	bl	8012130 <memset>
						  password.len = 0;  // reset length
 800c388:	4b29      	ldr	r3, [pc, #164]	@ (800c430 <password_task+0x38c>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	819a      	strh	r2, [r3, #12]
						  CLCD_I2C_Clear(&LCD1);
 800c38e:	4829      	ldr	r0, [pc, #164]	@ (800c434 <password_task+0x390>)
 800c390:	f7fe fa3a 	bl	800a808 <CLCD_I2C_Clear>
						  CLCD_I2C_BlinkOff(&LCD1);
 800c394:	4827      	ldr	r0, [pc, #156]	@ (800c434 <password_task+0x390>)
 800c396:	f7fe fa5d 	bl	800a854 <CLCD_I2C_BlinkOff>
						  CLCD_I2C_SetCursor(&LCD1, 0, 0);
 800c39a:	2200      	movs	r2, #0
 800c39c:	2100      	movs	r1, #0
 800c39e:	4825      	ldr	r0, [pc, #148]	@ (800c434 <password_task+0x390>)
 800c3a0:	f7fe f9c8 	bl	800a734 <CLCD_I2C_SetCursor>
						  CLCD_I2C_WriteString(&LCD1,"s1:");
 800c3a4:	492a      	ldr	r1, [pc, #168]	@ (800c450 <password_task+0x3ac>)
 800c3a6:	4823      	ldr	r0, [pc, #140]	@ (800c434 <password_task+0x390>)
 800c3a8:	f7fe fa17 	bl	800a7da <CLCD_I2C_WriteString>
						  CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	4820      	ldr	r0, [pc, #128]	@ (800c434 <password_task+0x390>)
 800c3b2:	f7fe f9bf 	bl	800a734 <CLCD_I2C_SetCursor>
						  CLCD_I2C_WriteString(&LCD1,"t1:");
 800c3b6:	4927      	ldr	r1, [pc, #156]	@ (800c454 <password_task+0x3b0>)
 800c3b8:	481e      	ldr	r0, [pc, #120]	@ (800c434 <password_task+0x390>)
 800c3ba:	f7fe fa0e 	bl	800a7da <CLCD_I2C_WriteString>
						  CLCD_I2C_SetCursor(&LCD1, 0, 2);
 800c3be:	2202      	movs	r2, #2
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	481c      	ldr	r0, [pc, #112]	@ (800c434 <password_task+0x390>)
 800c3c4:	f7fe f9b6 	bl	800a734 <CLCD_I2C_SetCursor>
						  CLCD_I2C_WriteString(&LCD1,"s2:");
 800c3c8:	4923      	ldr	r1, [pc, #140]	@ (800c458 <password_task+0x3b4>)
 800c3ca:	481a      	ldr	r0, [pc, #104]	@ (800c434 <password_task+0x390>)
 800c3cc:	f7fe fa05 	bl	800a7da <CLCD_I2C_WriteString>
						  CLCD_I2C_SetCursor(&LCD1, 0, 3);
 800c3d0:	2203      	movs	r2, #3
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	4817      	ldr	r0, [pc, #92]	@ (800c434 <password_task+0x390>)
 800c3d6:	f7fe f9ad 	bl	800a734 <CLCD_I2C_SetCursor>
						  CLCD_I2C_WriteString(&LCD1,"t2:");
 800c3da:	4920      	ldr	r1, [pc, #128]	@ (800c45c <password_task+0x3b8>)
 800c3dc:	4815      	ldr	r0, [pc, #84]	@ (800c434 <password_task+0x390>)
 800c3de:	f7fe f9fc 	bl	800a7da <CLCD_I2C_WriteString>
						  CLCD_I2C_SetCursor(&LCD1, 19, 0);
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	2113      	movs	r1, #19
 800c3e6:	4813      	ldr	r0, [pc, #76]	@ (800c434 <password_task+0x390>)
 800c3e8:	f7fe f9a4 	bl	800a734 <CLCD_I2C_SetCursor>
						  CLCD_I2C_WriteString(&LCD1, "<");
 800c3ec:	491c      	ldr	r1, [pc, #112]	@ (800c460 <password_task+0x3bc>)
 800c3ee:	4811      	ldr	r0, [pc, #68]	@ (800c434 <password_task+0x390>)
 800c3f0:	f7fe f9f3 	bl	800a7da <CLCD_I2C_WriteString>
					 break;
 800c3f4:	e01a      	b.n	800c42c <password_task+0x388>
						memset(password.payload, 0, sizeof(password.payload));  // reset data
 800c3f6:	220b      	movs	r2, #11
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	480d      	ldr	r0, [pc, #52]	@ (800c430 <password_task+0x38c>)
 800c3fc:	f005 fe98 	bl	8012130 <memset>
						password.len = 0;  // reset length
 800c400:	4b0b      	ldr	r3, [pc, #44]	@ (800c430 <password_task+0x38c>)
 800c402:	2200      	movs	r2, #0
 800c404:	819a      	strh	r2, [r3, #12]
						CLCD_I2C_Clear(&LCD1);
 800c406:	480b      	ldr	r0, [pc, #44]	@ (800c434 <password_task+0x390>)
 800c408:	f7fe f9fe 	bl	800a808 <CLCD_I2C_Clear>
						CLCD_I2C_SetCursor(&LCD1, 3, 0);
 800c40c:	2200      	movs	r2, #0
 800c40e:	2103      	movs	r1, #3
 800c410:	4808      	ldr	r0, [pc, #32]	@ (800c434 <password_task+0x390>)
 800c412:	f7fe f98f 	bl	800a734 <CLCD_I2C_SetCursor>
						CLCD_I2C_WriteString(&LCD1, "ENTER PASSWORD");
 800c416:	4913      	ldr	r1, [pc, #76]	@ (800c464 <password_task+0x3c0>)
 800c418:	4806      	ldr	r0, [pc, #24]	@ (800c434 <password_task+0x390>)
 800c41a:	f7fe f9de 	bl	800a7da <CLCD_I2C_WriteString>
						CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800c41e:	2201      	movs	r2, #1
 800c420:	2104      	movs	r1, #4
 800c422:	4804      	ldr	r0, [pc, #16]	@ (800c434 <password_task+0x390>)
 800c424:	f7fe f986 	bl	800a734 <CLCD_I2C_SetCursor>
					 break;
 800c428:	e000      	b.n	800c42c <password_task+0x388>
					 break;
 800c42a:	bf00      	nop
		xTaskNotifyWait(0,0,&btn_value_addr,portMAX_DELAY);
 800c42c:	e63e      	b.n	800c0ac <password_task+0x8>
 800c42e:	bf00      	nop
 800c430:	200027f0 	.word	0x200027f0
 800c434:	200003a0 	.word	0x200003a0
 800c438:	080146dc 	.word	0x080146dc
 800c43c:	200003d0 	.word	0x200003d0
 800c440:	200003c0 	.word	0x200003c0
 800c444:	200003ac 	.word	0x200003ac
 800c448:	200003c4 	.word	0x200003c4
 800c44c:	200003e4 	.word	0x200003e4
 800c450:	08014770 	.word	0x08014770
 800c454:	08014774 	.word	0x08014774
 800c458:	08014778 	.word	0x08014778
 800c45c:	0801477c 	.word	0x0801477c
 800c460:	080146e0 	.word	0x080146e0
 800c464:	0801474c 	.word	0x0801474c

0800c468 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f103 0208 	add.w	r2, r3, #8
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f04f 32ff 	mov.w	r2, #4294967295
 800c480:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f103 0208 	add.w	r2, r3, #8
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f103 0208 	add.w	r2, r3, #8
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 800c49c:	f240 1019 	movw	r0, #281	@ 0x119
 800c4a0:	f004 fd60 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
}
 800c4a4:	bf00      	nop
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800c4ba:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 800c4be:	f004 fd51 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
}
 800c4c2:	bf00      	nop
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b084      	sub	sp, #16
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
 800c4d2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	689a      	ldr	r2, [r3, #8]
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	683a      	ldr	r2, [r7, #0]
 800c4ee:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	683a      	ldr	r2, [r7, #0]
 800c4f4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	1c5a      	adds	r2, r3, #1
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 800c506:	f240 101b 	movw	r0, #283	@ 0x11b
 800c50a:	f004 fd2b 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
}
 800c50e:	bf00      	nop
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b084      	sub	sp, #16
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
 800c51e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c52c:	d103      	bne.n	800c536 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	691b      	ldr	r3, [r3, #16]
 800c532:	60fb      	str	r3, [r7, #12]
 800c534:	e00c      	b.n	800c550 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	3308      	adds	r3, #8
 800c53a:	60fb      	str	r3, [r7, #12]
 800c53c:	e002      	b.n	800c544 <vListInsert+0x2e>
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	60fb      	str	r3, [r7, #12]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d2f6      	bcs.n	800c53e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	685a      	ldr	r2, [r3, #4]
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	683a      	ldr	r2, [r7, #0]
 800c55e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	1c5a      	adds	r2, r3, #1
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 800c57c:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 800c580:	f004 fcf0 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
}
 800c584:	bf00      	nop
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	691b      	ldr	r3, [r3, #16]
 800c598:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	6892      	ldr	r2, [r2, #8]
 800c5a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	6852      	ldr	r2, [r2, #4]
 800c5ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d103      	bne.n	800c5c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	689a      	ldr	r2, [r3, #8]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	1e5a      	subs	r2, r3, #1
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	f240 101d 	movw	r0, #285	@ 0x11d
 800c5da:	f004 fcff 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
	...

0800c5ec <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10b      	bne.n	800c61c <xQueueGenericReset+0x30>
    __asm volatile
 800c604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c608:	f383 8811 	msr	BASEPRI, r3
 800c60c:	f3bf 8f6f 	isb	sy
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	60fb      	str	r3, [r7, #12]
}
 800c616:	bf00      	nop
 800c618:	bf00      	nop
 800c61a:	e7fd      	b.n	800c618 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d05d      	beq.n	800c6de <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800c626:	2b00      	cmp	r3, #0
 800c628:	d059      	beq.n	800c6de <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c632:	2100      	movs	r1, #0
 800c634:	fba3 2302 	umull	r2, r3, r3, r2
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d000      	beq.n	800c63e <xQueueGenericReset+0x52>
 800c63c:	2101      	movs	r1, #1
 800c63e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800c640:	2b00      	cmp	r3, #0
 800c642:	d14c      	bne.n	800c6de <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 800c644:	f002 ffbe 	bl	800f5c4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c650:	6939      	ldr	r1, [r7, #16]
 800c652:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c654:	fb01 f303 	mul.w	r3, r1, r3
 800c658:	441a      	add	r2, r3
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	2200      	movs	r2, #0
 800c662:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c674:	3b01      	subs	r3, #1
 800c676:	6939      	ldr	r1, [r7, #16]
 800c678:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c67a:	fb01 f303 	mul.w	r3, r1, r3
 800c67e:	441a      	add	r2, r3
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	22ff      	movs	r2, #255	@ 0xff
 800c688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	22ff      	movs	r2, #255	@ 0xff
 800c690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d114      	bne.n	800c6c4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	691b      	ldr	r3, [r3, #16]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d01a      	beq.n	800c6d8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	3310      	adds	r3, #16
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f001 fc9e 	bl	800dfe8 <xTaskRemoveFromEventList>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d012      	beq.n	800c6d8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c6b2:	4b18      	ldr	r3, [pc, #96]	@ (800c714 <xQueueGenericReset+0x128>)
 800c6b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6b8:	601a      	str	r2, [r3, #0]
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	e009      	b.n	800c6d8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	3310      	adds	r3, #16
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7ff fecd 	bl	800c468 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	3324      	adds	r3, #36	@ 0x24
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7ff fec8 	bl	800c468 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800c6d8:	f002 ffa6 	bl	800f628 <vPortExitCritical>
 800c6dc:	e001      	b.n	800c6e2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10b      	bne.n	800c700 <xQueueGenericReset+0x114>
    __asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	60bb      	str	r3, [r7, #8]
}
 800c6fa:	bf00      	nop
 800c6fc:	bf00      	nop
 800c6fe:	e7fd      	b.n	800c6fc <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	4619      	mov	r1, r3
 800c704:	2096      	movs	r0, #150	@ 0x96
 800c706:	f004 fc69 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800c70a:	697b      	ldr	r3, [r7, #20]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3718      	adds	r7, #24
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	e000ed04 	.word	0xe000ed04

0800c718 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800c718:	b580      	push	{r7, lr}
 800c71a:	b08a      	sub	sp, #40	@ 0x28
 800c71c:	af02      	add	r7, sp, #8
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	4613      	mov	r3, r2
 800c724:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800c726:	2300      	movs	r3, #0
 800c728:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d02e      	beq.n	800c78e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c730:	2100      	movs	r1, #0
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	fba3 2302 	umull	r2, r3, r3, r2
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d000      	beq.n	800c740 <xQueueGenericCreate+0x28>
 800c73e:	2101      	movs	r1, #1
 800c740:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c742:	2b00      	cmp	r3, #0
 800c744:	d123      	bne.n	800c78e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	68ba      	ldr	r2, [r7, #8]
 800c74a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c74e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800c752:	d81c      	bhi.n	800c78e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	fb02 f303 	mul.w	r3, r2, r3
 800c75c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	3350      	adds	r3, #80	@ 0x50
 800c762:	4618      	mov	r0, r3
 800c764:	f003 f81a 	bl	800f79c <pvPortMalloc>
 800c768:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d01d      	beq.n	800c7ac <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	3350      	adds	r3, #80	@ 0x50
 800c778:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c77a:	79fa      	ldrb	r2, [r7, #7]
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	9300      	str	r3, [sp, #0]
 800c780:	4613      	mov	r3, r2
 800c782:	697a      	ldr	r2, [r7, #20]
 800c784:	68b9      	ldr	r1, [r7, #8]
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f000 f81e 	bl	800c7c8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800c78c:	e00e      	b.n	800c7ac <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10b      	bne.n	800c7ac <xQueueGenericCreate+0x94>
    __asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	613b      	str	r3, [r7, #16]
}
 800c7a6:	bf00      	nop
 800c7a8:	bf00      	nop
 800c7aa:	e7fd      	b.n	800c7a8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f004 fdae 	bl	8011310 <SEGGER_SYSVIEW_ShrinkId>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	2098      	movs	r0, #152	@ 0x98
 800c7ba:	f004 fc0f 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 800c7be:	69fb      	ldr	r3, [r7, #28]
    }
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3720      	adds	r7, #32
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
 800c7d4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d103      	bne.n	800c7e4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	69ba      	ldr	r2, [r7, #24]
 800c7e0:	601a      	str	r2, [r3, #0]
 800c7e2:	e002      	b.n	800c7ea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c7e4:	69bb      	ldr	r3, [r7, #24]
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c7f6:	2101      	movs	r1, #1
 800c7f8:	69b8      	ldr	r0, [r7, #24]
 800c7fa:	f7ff fef7 	bl	800c5ec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	78fa      	ldrb	r2, [r7, #3]
 800c802:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800c806:	bf00      	nop
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
	...

0800c810 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b08e      	sub	sp, #56	@ 0x38
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
 800c81c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c81e:	2300      	movs	r3, #0
 800c820:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800c826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10b      	bne.n	800c844 <xQueueGenericSend+0x34>
    __asm volatile
 800c82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c830:	f383 8811 	msr	BASEPRI, r3
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c83e:	bf00      	nop
 800c840:	bf00      	nop
 800c842:	e7fd      	b.n	800c840 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d103      	bne.n	800c852 <xQueueGenericSend+0x42>
 800c84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c84c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d101      	bne.n	800c856 <xQueueGenericSend+0x46>
 800c852:	2301      	movs	r3, #1
 800c854:	e000      	b.n	800c858 <xQueueGenericSend+0x48>
 800c856:	2300      	movs	r3, #0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d10b      	bne.n	800c874 <xQueueGenericSend+0x64>
    __asm volatile
 800c85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c860:	f383 8811 	msr	BASEPRI, r3
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	f3bf 8f4f 	dsb	sy
 800c86c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c86e:	bf00      	nop
 800c870:	bf00      	nop
 800c872:	e7fd      	b.n	800c870 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	2b02      	cmp	r3, #2
 800c878:	d103      	bne.n	800c882 <xQueueGenericSend+0x72>
 800c87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c87c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d101      	bne.n	800c886 <xQueueGenericSend+0x76>
 800c882:	2301      	movs	r3, #1
 800c884:	e000      	b.n	800c888 <xQueueGenericSend+0x78>
 800c886:	2300      	movs	r3, #0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10b      	bne.n	800c8a4 <xQueueGenericSend+0x94>
    __asm volatile
 800c88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c890:	f383 8811 	msr	BASEPRI, r3
 800c894:	f3bf 8f6f 	isb	sy
 800c898:	f3bf 8f4f 	dsb	sy
 800c89c:	623b      	str	r3, [r7, #32]
}
 800c89e:	bf00      	nop
 800c8a0:	bf00      	nop
 800c8a2:	e7fd      	b.n	800c8a0 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8a4:	f001 fdc2 	bl	800e42c <xTaskGetSchedulerState>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d102      	bne.n	800c8b4 <xQueueGenericSend+0xa4>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <xQueueGenericSend+0xa8>
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e000      	b.n	800c8ba <xQueueGenericSend+0xaa>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10b      	bne.n	800c8d6 <xQueueGenericSend+0xc6>
    __asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	61fb      	str	r3, [r7, #28]
}
 800c8d0:	bf00      	nop
 800c8d2:	bf00      	nop
 800c8d4:	e7fd      	b.n	800c8d2 <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c8d6:	f002 fe75 	bl	800f5c4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d302      	bcc.n	800c8ec <xQueueGenericSend+0xdc>
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	d12d      	bne.n	800c948 <xQueueGenericSend+0x138>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	68b9      	ldr	r1, [r7, #8]
 800c8f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8f2:	f000 faad 	bl	800ce50 <prvCopyDataToQueue>
 800c8f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d010      	beq.n	800c922 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c902:	3324      	adds	r3, #36	@ 0x24
 800c904:	4618      	mov	r0, r3
 800c906:	f001 fb6f 	bl	800dfe8 <xTaskRemoveFromEventList>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d013      	beq.n	800c938 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800c910:	4b45      	ldr	r3, [pc, #276]	@ (800ca28 <xQueueGenericSend+0x218>)
 800c912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c916:	601a      	str	r2, [r3, #0]
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	e00a      	b.n	800c938 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800c922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c924:	2b00      	cmp	r3, #0
 800c926:	d007      	beq.n	800c938 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800c928:	4b3f      	ldr	r3, [pc, #252]	@ (800ca28 <xQueueGenericSend+0x218>)
 800c92a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c92e:	601a      	str	r2, [r3, #0]
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800c938:	f002 fe76 	bl	800f628 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );
 800c93c:	2101      	movs	r1, #1
 800c93e:	20a1      	movs	r0, #161	@ 0xa1
 800c940:	f004 fb4c 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 800c944:	2301      	movs	r3, #1
 800c946:	e06b      	b.n	800ca20 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d107      	bne.n	800c95e <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c94e:	f002 fe6b 	bl	800f628 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 800c952:	2100      	movs	r1, #0
 800c954:	20a1      	movs	r0, #161	@ 0xa1
 800c956:	f004 fb41 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_FULL;
 800c95a:	2300      	movs	r3, #0
 800c95c:	e060      	b.n	800ca20 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c95e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c960:	2b00      	cmp	r3, #0
 800c962:	d106      	bne.n	800c972 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c964:	f107 0314 	add.w	r3, r7, #20
 800c968:	4618      	mov	r0, r3
 800c96a:	f001 fc1d 	bl	800e1a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c96e:	2301      	movs	r3, #1
 800c970:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c972:	f002 fe59 	bl	800f628 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c976:	f001 f805 	bl	800d984 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c97a:	f002 fe23 	bl	800f5c4 <vPortEnterCritical>
 800c97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c984:	b25b      	sxtb	r3, r3
 800c986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98a:	d103      	bne.n	800c994 <xQueueGenericSend+0x184>
 800c98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c996:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c99a:	b25b      	sxtb	r3, r3
 800c99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a0:	d103      	bne.n	800c9aa <xQueueGenericSend+0x19a>
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c9aa:	f002 fe3d 	bl	800f628 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9ae:	1d3a      	adds	r2, r7, #4
 800c9b0:	f107 0314 	add.w	r3, r7, #20
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f001 fc0e 	bl	800e1d8 <xTaskCheckForTimeOut>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d124      	bne.n	800ca0c <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c9c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c9c4:	f000 fb3c 	bl	800d040 <prvIsQueueFull>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d018      	beq.n	800ca00 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d0:	3310      	adds	r3, #16
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f001 fa94 	bl	800df04 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800c9dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c9de:	f000 fac7 	bl	800cf70 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800c9e2:	f000 ffdd 	bl	800d9a0 <xTaskResumeAll>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f47f af74 	bne.w	800c8d6 <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 800c9ee:	4b0e      	ldr	r3, [pc, #56]	@ (800ca28 <xQueueGenericSend+0x218>)
 800c9f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	f3bf 8f6f 	isb	sy
 800c9fe:	e76a      	b.n	800c8d6 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800ca00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ca02:	f000 fab5 	bl	800cf70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800ca06:	f000 ffcb 	bl	800d9a0 <xTaskResumeAll>
 800ca0a:	e764      	b.n	800c8d6 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800ca0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ca0e:	f000 faaf 	bl	800cf70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800ca12:	f000 ffc5 	bl	800d9a0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 800ca16:	2100      	movs	r1, #0
 800ca18:	20a1      	movs	r0, #161	@ 0xa1
 800ca1a:	f004 fadf 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

            return errQUEUE_FULL;
 800ca1e:	2300      	movs	r3, #0
        }
    }
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3738      	adds	r7, #56	@ 0x38
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	e000ed04 	.word	0xe000ed04

0800ca2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b08c      	sub	sp, #48	@ 0x30
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800ca40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10b      	bne.n	800ca5e <xQueueReceive+0x32>
    __asm volatile
 800ca46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca4a:	f383 8811 	msr	BASEPRI, r3
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	623b      	str	r3, [r7, #32]
}
 800ca58:	bf00      	nop
 800ca5a:	bf00      	nop
 800ca5c:	e7fd      	b.n	800ca5a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d103      	bne.n	800ca6c <xQueueReceive+0x40>
 800ca64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d101      	bne.n	800ca70 <xQueueReceive+0x44>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e000      	b.n	800ca72 <xQueueReceive+0x46>
 800ca70:	2300      	movs	r3, #0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d10b      	bne.n	800ca8e <xQueueReceive+0x62>
    __asm volatile
 800ca76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca7a:	f383 8811 	msr	BASEPRI, r3
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f3bf 8f4f 	dsb	sy
 800ca86:	61fb      	str	r3, [r7, #28]
}
 800ca88:	bf00      	nop
 800ca8a:	bf00      	nop
 800ca8c:	e7fd      	b.n	800ca8a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca8e:	f001 fccd 	bl	800e42c <xTaskGetSchedulerState>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d102      	bne.n	800ca9e <xQueueReceive+0x72>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d101      	bne.n	800caa2 <xQueueReceive+0x76>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e000      	b.n	800caa4 <xQueueReceive+0x78>
 800caa2:	2300      	movs	r3, #0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d10b      	bne.n	800cac0 <xQueueReceive+0x94>
    __asm volatile
 800caa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caac:	f383 8811 	msr	BASEPRI, r3
 800cab0:	f3bf 8f6f 	isb	sy
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	61bb      	str	r3, [r7, #24]
}
 800caba:	bf00      	nop
 800cabc:	bf00      	nop
 800cabe:	e7fd      	b.n	800cabc <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800cac0:	f002 fd80 	bl	800f5c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cac8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800caca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d023      	beq.n	800cb18 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cad0:	68b9      	ldr	r1, [r7, #8]
 800cad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cad4:	f000 fa26 	bl	800cf24 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800cad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cada:	1e5a      	subs	r2, r3, #1
 800cadc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cade:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cae2:	691b      	ldr	r3, [r3, #16]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00f      	beq.n	800cb08 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caea:	3310      	adds	r3, #16
 800caec:	4618      	mov	r0, r3
 800caee:	f001 fa7b 	bl	800dfe8 <xTaskRemoveFromEventList>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d007      	beq.n	800cb08 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800caf8:	4b42      	ldr	r3, [pc, #264]	@ (800cc04 <xQueueReceive+0x1d8>)
 800cafa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800cb08:	f002 fd8e 	bl	800f628 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 800cb0c:	2101      	movs	r1, #1
 800cb0e:	20a4      	movs	r0, #164	@ 0xa4
 800cb10:	f004 fa64 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 800cb14:	2301      	movs	r3, #1
 800cb16:	e071      	b.n	800cbfc <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d107      	bne.n	800cb2e <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800cb1e:	f002 fd83 	bl	800f628 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800cb22:	2100      	movs	r1, #0
 800cb24:	20a4      	movs	r0, #164	@ 0xa4
 800cb26:	f004 fa59 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	e066      	b.n	800cbfc <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800cb2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d106      	bne.n	800cb42 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800cb34:	f107 0310 	add.w	r3, r7, #16
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f001 fb35 	bl	800e1a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800cb42:	f002 fd71 	bl	800f628 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800cb46:	f000 ff1d 	bl	800d984 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800cb4a:	f002 fd3b 	bl	800f5c4 <vPortEnterCritical>
 800cb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb54:	b25b      	sxtb	r3, r3
 800cb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb5a:	d103      	bne.n	800cb64 <xQueueReceive+0x138>
 800cb5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb6a:	b25b      	sxtb	r3, r3
 800cb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb70:	d103      	bne.n	800cb7a <xQueueReceive+0x14e>
 800cb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb74:	2200      	movs	r2, #0
 800cb76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cb7a:	f002 fd55 	bl	800f628 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb7e:	1d3a      	adds	r2, r7, #4
 800cb80:	f107 0310 	add.w	r3, r7, #16
 800cb84:	4611      	mov	r1, r2
 800cb86:	4618      	mov	r0, r3
 800cb88:	f001 fb26 	bl	800e1d8 <xTaskCheckForTimeOut>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d123      	bne.n	800cbda <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb94:	f000 fa3e 	bl	800d014 <prvIsQueueEmpty>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d017      	beq.n	800cbce <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba0:	3324      	adds	r3, #36	@ 0x24
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	4611      	mov	r1, r2
 800cba6:	4618      	mov	r0, r3
 800cba8:	f001 f9ac 	bl	800df04 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800cbac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbae:	f000 f9df 	bl	800cf70 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800cbb2:	f000 fef5 	bl	800d9a0 <xTaskResumeAll>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d181      	bne.n	800cac0 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 800cbbc:	4b11      	ldr	r3, [pc, #68]	@ (800cc04 <xQueueReceive+0x1d8>)
 800cbbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbc2:	601a      	str	r2, [r3, #0]
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	e778      	b.n	800cac0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800cbce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbd0:	f000 f9ce 	bl	800cf70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800cbd4:	f000 fee4 	bl	800d9a0 <xTaskResumeAll>
 800cbd8:	e772      	b.n	800cac0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800cbda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbdc:	f000 f9c8 	bl	800cf70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cbe0:	f000 fede 	bl	800d9a0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbe4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbe6:	f000 fa15 	bl	800d014 <prvIsQueueEmpty>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f43f af67 	beq.w	800cac0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	20a4      	movs	r0, #164	@ 0xa4
 800cbf6:	f004 f9f1 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 800cbfa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3730      	adds	r7, #48	@ 0x30
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	e000ed04 	.word	0xe000ed04

0800cc08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b08c      	sub	sp, #48	@ 0x30
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800cc12:	2300      	movs	r3, #0
 800cc14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800cc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10b      	bne.n	800cc3c <xQueueSemaphoreTake+0x34>
    __asm volatile
 800cc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc28:	f383 8811 	msr	BASEPRI, r3
 800cc2c:	f3bf 8f6f 	isb	sy
 800cc30:	f3bf 8f4f 	dsb	sy
 800cc34:	61bb      	str	r3, [r7, #24]
}
 800cc36:	bf00      	nop
 800cc38:	bf00      	nop
 800cc3a:	e7fd      	b.n	800cc38 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00b      	beq.n	800cc5c <xQueueSemaphoreTake+0x54>
    __asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	617b      	str	r3, [r7, #20]
}
 800cc56:	bf00      	nop
 800cc58:	bf00      	nop
 800cc5a:	e7fd      	b.n	800cc58 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc5c:	f001 fbe6 	bl	800e42c <xTaskGetSchedulerState>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d102      	bne.n	800cc6c <xQueueSemaphoreTake+0x64>
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d101      	bne.n	800cc70 <xQueueSemaphoreTake+0x68>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e000      	b.n	800cc72 <xQueueSemaphoreTake+0x6a>
 800cc70:	2300      	movs	r3, #0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10b      	bne.n	800cc8e <xQueueSemaphoreTake+0x86>
    __asm volatile
 800cc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7a:	f383 8811 	msr	BASEPRI, r3
 800cc7e:	f3bf 8f6f 	isb	sy
 800cc82:	f3bf 8f4f 	dsb	sy
 800cc86:	613b      	str	r3, [r7, #16]
}
 800cc88:	bf00      	nop
 800cc8a:	bf00      	nop
 800cc8c:	e7fd      	b.n	800cc8a <xQueueSemaphoreTake+0x82>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800cc8e:	f002 fc99 	bl	800f5c4 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc96:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cc98:	6a3b      	ldr	r3, [r7, #32]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d028      	beq.n	800ccf0 <xQueueSemaphoreTake+0xe8>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 800cc9e:	6a3b      	ldr	r3, [r7, #32]
 800cca0:	1e5a      	subs	r2, r3, #1
 800cca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca4:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d104      	bne.n	800ccb8 <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ccae:	f001 fdfd 	bl	800e8ac <pvTaskIncrementMutexHeldCount>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb6:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00f      	beq.n	800cce0 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc2:	3310      	adds	r3, #16
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f001 f98f 	bl	800dfe8 <xTaskRemoveFromEventList>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d007      	beq.n	800cce0 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800ccd0:	4b52      	ldr	r3, [pc, #328]	@ (800ce1c <xQueueSemaphoreTake+0x214>)
 800ccd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccd6:	601a      	str	r2, [r3, #0]
 800ccd8:	f3bf 8f4f 	dsb	sy
 800ccdc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800cce0:	f002 fca2 	bl	800f628 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );
 800cce4:	2101      	movs	r1, #1
 800cce6:	20a5      	movs	r0, #165	@ 0xa5
 800cce8:	f004 f978 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 800ccec:	2301      	movs	r3, #1
 800ccee:	e091      	b.n	800ce14 <xQueueSemaphoreTake+0x20c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d107      	bne.n	800cd06 <xQueueSemaphoreTake+0xfe>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800ccf6:	f002 fc97 	bl	800f628 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	20a5      	movs	r0, #165	@ 0xa5
 800ccfe:	f004 f96d 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800cd02:	2300      	movs	r3, #0
 800cd04:	e086      	b.n	800ce14 <xQueueSemaphoreTake+0x20c>
                }
                else if( xEntryTimeSet == pdFALSE )
 800cd06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d106      	bne.n	800cd1a <xQueueSemaphoreTake+0x112>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800cd0c:	f107 0308 	add.w	r3, r7, #8
 800cd10:	4618      	mov	r0, r3
 800cd12:	f001 fa49 	bl	800e1a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800cd16:	2301      	movs	r3, #1
 800cd18:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800cd1a:	f002 fc85 	bl	800f628 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800cd1e:	f000 fe31 	bl	800d984 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800cd22:	f002 fc4f 	bl	800f5c4 <vPortEnterCritical>
 800cd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd2c:	b25b      	sxtb	r3, r3
 800cd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd32:	d103      	bne.n	800cd3c <xQueueSemaphoreTake+0x134>
 800cd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd42:	b25b      	sxtb	r3, r3
 800cd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd48:	d103      	bne.n	800cd52 <xQueueSemaphoreTake+0x14a>
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd52:	f002 fc69 	bl	800f628 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd56:	463a      	mov	r2, r7
 800cd58:	f107 0308 	add.w	r3, r7, #8
 800cd5c:	4611      	mov	r1, r2
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f001 fa3a 	bl	800e1d8 <xTaskCheckForTimeOut>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d132      	bne.n	800cdd0 <xQueueSemaphoreTake+0x1c8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd6c:	f000 f952 	bl	800d014 <prvIsQueueEmpty>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d026      	beq.n	800cdc4 <xQueueSemaphoreTake+0x1bc>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d109      	bne.n	800cd92 <xQueueSemaphoreTake+0x18a>
                    {
                        taskENTER_CRITICAL();
 800cd7e:	f002 fc21 	bl	800f5c4 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f001 fb72 	bl	800e470 <xTaskPriorityInherit>
 800cd8c:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 800cd8e:	f002 fc4b 	bl	800f628 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd94:	3324      	adds	r3, #36	@ 0x24
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	4611      	mov	r1, r2
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f001 f8b2 	bl	800df04 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800cda0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cda2:	f000 f8e5 	bl	800cf70 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800cda6:	f000 fdfb 	bl	800d9a0 <xTaskResumeAll>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f47f af6e 	bne.w	800cc8e <xQueueSemaphoreTake+0x86>
                {
                    taskYIELD_WITHIN_API();
 800cdb2:	4b1a      	ldr	r3, [pc, #104]	@ (800ce1c <xQueueSemaphoreTake+0x214>)
 800cdb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	f3bf 8f6f 	isb	sy
 800cdc2:	e764      	b.n	800cc8e <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800cdc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdc6:	f000 f8d3 	bl	800cf70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800cdca:	f000 fde9 	bl	800d9a0 <xTaskResumeAll>
 800cdce:	e75e      	b.n	800cc8e <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800cdd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdd2:	f000 f8cd 	bl	800cf70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cdd6:	f000 fde3 	bl	800d9a0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cddc:	f000 f91a 	bl	800d014 <prvIsQueueEmpty>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f43f af53 	beq.w	800cc8e <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800cde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00d      	beq.n	800ce0a <xQueueSemaphoreTake+0x202>
                    {
                        taskENTER_CRITICAL();
 800cdee:	f002 fbe9 	bl	800f5c4 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cdf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdf4:	f000 f814 	bl	800ce20 <prvGetDisinheritPriorityAfterTimeout>
 800cdf8:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	69f9      	ldr	r1, [r7, #28]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f001 fc8f 	bl	800e724 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800ce06:	f002 fc0f 	bl	800f628 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	20a5      	movs	r0, #165	@ 0xa5
 800ce0e:	f004 f8e5 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 800ce12:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3730      	adds	r7, #48	@ 0x30
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	e000ed04 	.word	0xe000ed04

0800ce20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d006      	beq.n	800ce3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f1c3 0305 	rsb	r3, r3, #5
 800ce3a:	60fb      	str	r3, [r7, #12]
 800ce3c:	e001      	b.n	800ce42 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800ce42:	68fb      	ldr	r3, [r7, #12]
    }
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce64:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d10d      	bne.n	800ce8a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d14d      	bne.n	800cf12 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f001 fba2 	bl	800e5c4 <xTaskPriorityDisinherit>
 800ce80:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2200      	movs	r2, #0
 800ce86:	609a      	str	r2, [r3, #8]
 800ce88:	e043      	b.n	800cf12 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d119      	bne.n	800cec4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6858      	ldr	r0, [r3, #4]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce98:	461a      	mov	r2, r3
 800ce9a:	68b9      	ldr	r1, [r7, #8]
 800ce9c:	f005 f9b5 	bl	801220a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	685a      	ldr	r2, [r3, #4]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cea8:	441a      	add	r2, r3
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d32b      	bcc.n	800cf12 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	605a      	str	r2, [r3, #4]
 800cec2:	e026      	b.n	800cf12 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	68d8      	ldr	r0, [r3, #12]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cecc:	461a      	mov	r2, r3
 800cece:	68b9      	ldr	r1, [r7, #8]
 800ced0:	f005 f99b 	bl	801220a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	68da      	ldr	r2, [r3, #12]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cedc:	425b      	negs	r3, r3
 800cede:	441a      	add	r2, r3
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	68da      	ldr	r2, [r3, #12]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d207      	bcs.n	800cf00 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	689a      	ldr	r2, [r3, #8]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cef8:	425b      	negs	r3, r3
 800cefa:	441a      	add	r2, r3
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d105      	bne.n	800cf12 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d002      	beq.n	800cf12 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	1c5a      	adds	r2, r3, #1
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800cf1a:	697b      	ldr	r3, [r7, #20]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3718      	adds	r7, #24
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d018      	beq.n	800cf68 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	68da      	ldr	r2, [r3, #12]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf3e:	441a      	add	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	68da      	ldr	r2, [r3, #12]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d303      	bcc.n	800cf58 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	68d9      	ldr	r1, [r3, #12]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf60:	461a      	mov	r2, r3
 800cf62:	6838      	ldr	r0, [r7, #0]
 800cf64:	f005 f951 	bl	801220a <memcpy>
    }
}
 800cf68:	bf00      	nop
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800cf78:	f002 fb24 	bl	800f5c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf82:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf84:	e011      	b.n	800cfaa <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d012      	beq.n	800cfb4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	3324      	adds	r3, #36	@ 0x24
 800cf92:	4618      	mov	r0, r3
 800cf94:	f001 f828 	bl	800dfe8 <xTaskRemoveFromEventList>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d001      	beq.n	800cfa2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800cf9e:	f001 f987 	bl	800e2b0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	dce9      	bgt.n	800cf86 <prvUnlockQueue+0x16>
 800cfb2:	e000      	b.n	800cfb6 <prvUnlockQueue+0x46>
                    break;
 800cfb4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	22ff      	movs	r2, #255	@ 0xff
 800cfba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800cfbe:	f002 fb33 	bl	800f628 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800cfc2:	f002 faff 	bl	800f5c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cfcc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cfce:	e011      	b.n	800cff4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d012      	beq.n	800cffe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	3310      	adds	r3, #16
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f001 f803 	bl	800dfe8 <xTaskRemoveFromEventList>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d001      	beq.n	800cfec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800cfe8:	f001 f962 	bl	800e2b0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800cfec:	7bbb      	ldrb	r3, [r7, #14]
 800cfee:	3b01      	subs	r3, #1
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	dce9      	bgt.n	800cfd0 <prvUnlockQueue+0x60>
 800cffc:	e000      	b.n	800d000 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800cffe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	22ff      	movs	r2, #255	@ 0xff
 800d004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800d008:	f002 fb0e 	bl	800f628 <vPortExitCritical>
}
 800d00c:	bf00      	nop
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800d01c:	f002 fad2 	bl	800f5c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d024:	2b00      	cmp	r3, #0
 800d026:	d102      	bne.n	800d02e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800d028:	2301      	movs	r3, #1
 800d02a:	60fb      	str	r3, [r7, #12]
 800d02c:	e001      	b.n	800d032 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800d02e:	2300      	movs	r3, #0
 800d030:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800d032:	f002 faf9 	bl	800f628 <vPortExitCritical>

    return xReturn;
 800d036:	68fb      	ldr	r3, [r7, #12]
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800d048:	f002 fabc 	bl	800f5c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d054:	429a      	cmp	r2, r3
 800d056:	d102      	bne.n	800d05e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800d058:	2301      	movs	r3, #1
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	e001      	b.n	800d062 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800d05e:	2300      	movs	r3, #0
 800d060:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800d062:	f002 fae1 	bl	800f628 <vPortExitCritical>

    return xReturn;
 800d066:	68fb      	ldr	r3, [r7, #12]
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800d07a:	2300      	movs	r3, #0
 800d07c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10b      	bne.n	800d09c <vQueueAddToRegistry+0x2c>
    __asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	60fb      	str	r3, [r7, #12]
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	e7fd      	b.n	800d098 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d024      	beq.n	800d0ec <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	617b      	str	r3, [r7, #20]
 800d0a6:	e01e      	b.n	800d0e6 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800d0a8:	4a18      	ldr	r2, [pc, #96]	@ (800d10c <vQueueAddToRegistry+0x9c>)
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	00db      	lsls	r3, r3, #3
 800d0ae:	4413      	add	r3, r2
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d105      	bne.n	800d0c4 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	00db      	lsls	r3, r3, #3
 800d0bc:	4a13      	ldr	r2, [pc, #76]	@ (800d10c <vQueueAddToRegistry+0x9c>)
 800d0be:	4413      	add	r3, r2
 800d0c0:	613b      	str	r3, [r7, #16]
                    break;
 800d0c2:	e013      	b.n	800d0ec <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d10a      	bne.n	800d0e0 <vQueueAddToRegistry+0x70>
 800d0ca:	4a10      	ldr	r2, [pc, #64]	@ (800d10c <vQueueAddToRegistry+0x9c>)
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d104      	bne.n	800d0e0 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	4a0c      	ldr	r2, [pc, #48]	@ (800d10c <vQueueAddToRegistry+0x9c>)
 800d0dc:	4413      	add	r3, r2
 800d0de:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	617b      	str	r3, [r7, #20]
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	2b07      	cmp	r3, #7
 800d0ea:	d9dd      	bls.n	800d0a8 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d005      	beq.n	800d0fe <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	683a      	ldr	r2, [r7, #0]
 800d0f6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 800d0fe:	20b6      	movs	r0, #182	@ 0xb6
 800d100:	f003 ff30 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800d104:	bf00      	nop
 800d106:	3718      	adds	r7, #24
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	20002800 	.word	0x20002800

0800d110 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800d120:	f002 fa50 	bl	800f5c4 <vPortEnterCritical>
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d12a:	b25b      	sxtb	r3, r3
 800d12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d130:	d103      	bne.n	800d13a <vQueueWaitForMessageRestricted+0x2a>
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	2200      	movs	r2, #0
 800d136:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d140:	b25b      	sxtb	r3, r3
 800d142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d146:	d103      	bne.n	800d150 <vQueueWaitForMessageRestricted+0x40>
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d150:	f002 fa6a 	bl	800f628 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d106      	bne.n	800d16a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	3324      	adds	r3, #36	@ 0x24
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	68b9      	ldr	r1, [r7, #8]
 800d164:	4618      	mov	r0, r3
 800d166:	f000 fef5 	bl	800df54 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800d16a:	6978      	ldr	r0, [r7, #20]
 800d16c:	f7ff ff00 	bl	800cf70 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 800d170:	20b9      	movs	r0, #185	@ 0xb9
 800d172:	f003 fef7 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800d176:	bf00      	nop
 800d178:	3718      	adds	r7, #24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800d17e:	b580      	push	{r7, lr}
 800d180:	b08a      	sub	sp, #40	@ 0x28
 800d182:	af04      	add	r7, sp, #16
 800d184:	60f8      	str	r0, [r7, #12]
 800d186:	60b9      	str	r1, [r7, #8]
 800d188:	607a      	str	r2, [r7, #4]
 800d18a:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	4618      	mov	r0, r3
 800d192:	f002 fb03 	bl	800f79c <pvPortMalloc>
 800d196:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d013      	beq.n	800d1c6 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800d19e:	2058      	movs	r0, #88	@ 0x58
 800d1a0:	f002 fafc 	bl	800f79c <pvPortMalloc>
 800d1a4:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d008      	beq.n	800d1be <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d1ac:	2258      	movs	r2, #88	@ 0x58
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	6978      	ldr	r0, [r7, #20]
 800d1b2:	f004 ffbd 	bl	8012130 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	693a      	ldr	r2, [r7, #16]
 800d1ba:	631a      	str	r2, [r3, #48]	@ 0x30
 800d1bc:	e005      	b.n	800d1ca <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800d1be:	6938      	ldr	r0, [r7, #16]
 800d1c0:	f002 fc1e 	bl	800fa00 <vPortFree>
 800d1c4:	e001      	b.n	800d1ca <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00d      	beq.n	800d1ec <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	9303      	str	r3, [sp, #12]
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	9302      	str	r3, [sp, #8]
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1da:	9301      	str	r3, [sp, #4]
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	68b9      	ldr	r1, [r7, #8]
 800d1e6:	68f8      	ldr	r0, [r7, #12]
 800d1e8:	f000 f82d 	bl	800d246 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800d1ec:	697b      	ldr	r3, [r7, #20]
    }
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3718      	adds	r7, #24
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b088      	sub	sp, #32
 800d1fa:	af02      	add	r7, sp, #8
 800d1fc:	60f8      	str	r0, [r7, #12]
 800d1fe:	60b9      	str	r1, [r7, #8]
 800d200:	607a      	str	r2, [r7, #4]
 800d202:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800d204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d206:	9301      	str	r3, [sp, #4]
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	9300      	str	r3, [sp, #0]
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	68b9      	ldr	r1, [r7, #8]
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f7ff ffb3 	bl	800d17e <prvCreateTask>
 800d218:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d005      	beq.n	800d22c <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800d220:	6938      	ldr	r0, [r7, #16]
 800d222:	f000 f8a1 	bl	800d368 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800d226:	2301      	movs	r3, #1
 800d228:	617b      	str	r3, [r7, #20]
 800d22a:	e002      	b.n	800d232 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d22c:	f04f 33ff 	mov.w	r3, #4294967295
 800d230:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	4619      	mov	r1, r3
 800d236:	20c2      	movs	r0, #194	@ 0xc2
 800d238:	f003 fed0 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800d23c:	697b      	ldr	r3, [r7, #20]
    }
 800d23e:	4618      	mov	r0, r3
 800d240:	3718      	adds	r7, #24
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800d246:	b580      	push	{r7, lr}
 800d248:	b088      	sub	sp, #32
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	60f8      	str	r0, [r7, #12]
 800d24e:	60b9      	str	r1, [r7, #8]
 800d250:	607a      	str	r2, [r7, #4]
 800d252:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800d254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d256:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	461a      	mov	r2, r3
 800d25e:	21a5      	movs	r1, #165	@ 0xa5
 800d260:	f004 ff66 	bl	8012130 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800d264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d26e:	3b01      	subs	r3, #1
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	4413      	add	r3, r2
 800d274:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	f023 0307 	bic.w	r3, r3, #7
 800d27c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	f003 0307 	and.w	r3, r3, #7
 800d284:	2b00      	cmp	r3, #0
 800d286:	d00b      	beq.n	800d2a0 <prvInitialiseNewTask+0x5a>
    __asm volatile
 800d288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d28c:	f383 8811 	msr	BASEPRI, r3
 800d290:	f3bf 8f6f 	isb	sy
 800d294:	f3bf 8f4f 	dsb	sy
 800d298:	617b      	str	r3, [r7, #20]
}
 800d29a:	bf00      	nop
 800d29c:	bf00      	nop
 800d29e:	e7fd      	b.n	800d29c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d01e      	beq.n	800d2e4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	61fb      	str	r3, [r7, #28]
 800d2aa:	e012      	b.n	800d2d2 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	7819      	ldrb	r1, [r3, #0]
 800d2b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	3334      	adds	r3, #52	@ 0x34
 800d2bc:	460a      	mov	r2, r1
 800d2be:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800d2c0:	68ba      	ldr	r2, [r7, #8]
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d006      	beq.n	800d2da <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	61fb      	str	r3, [r7, #28]
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	2b09      	cmp	r3, #9
 800d2d6:	d9e9      	bls.n	800d2ac <prvInitialiseNewTask+0x66>
 800d2d8:	e000      	b.n	800d2dc <prvInitialiseNewTask+0x96>
            {
                break;
 800d2da:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800d2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e6:	2b04      	cmp	r3, #4
 800d2e8:	d90b      	bls.n	800d302 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800d2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ee:	f383 8811 	msr	BASEPRI, r3
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	613b      	str	r3, [r7, #16]
}
 800d2fc:	bf00      	nop
 800d2fe:	bf00      	nop
 800d300:	e7fd      	b.n	800d2fe <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d304:	2b04      	cmp	r3, #4
 800d306:	d901      	bls.n	800d30c <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d308:	2304      	movs	r3, #4
 800d30a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800d30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d310:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800d312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d314:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d316:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d31a:	3304      	adds	r3, #4
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7ff f8c5 	bl	800c4ac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d324:	3318      	adds	r3, #24
 800d326:	4618      	mov	r0, r3
 800d328:	f7ff f8c0 	bl	800c4ac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d330:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800d332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d334:	f1c3 0205 	rsb	r2, r3, #5
 800d338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d33a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d33e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d340:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d342:	683a      	ldr	r2, [r7, #0]
 800d344:	68f9      	ldr	r1, [r7, #12]
 800d346:	69b8      	ldr	r0, [r7, #24]
 800d348:	f001 ffc0 	bl	800f2cc <pxPortInitialiseStack>
 800d34c:	4602      	mov	r2, r0
 800d34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d350:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800d352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d354:	2b00      	cmp	r3, #0
 800d356:	d002      	beq.n	800d35e <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d35a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d35c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d35e:	bf00      	nop
 800d360:	3720      	adds	r7, #32
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
	...

0800d368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800d368:	b5b0      	push	{r4, r5, r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af02      	add	r7, sp, #8
 800d36e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800d370:	f002 f928 	bl	800f5c4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800d374:	4b50      	ldr	r3, [pc, #320]	@ (800d4b8 <prvAddNewTaskToReadyList+0x150>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	3301      	adds	r3, #1
 800d37a:	4a4f      	ldr	r2, [pc, #316]	@ (800d4b8 <prvAddNewTaskToReadyList+0x150>)
 800d37c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800d37e:	4b4f      	ldr	r3, [pc, #316]	@ (800d4bc <prvAddNewTaskToReadyList+0x154>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d109      	bne.n	800d39a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800d386:	4a4d      	ldr	r2, [pc, #308]	@ (800d4bc <prvAddNewTaskToReadyList+0x154>)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d38c:	4b4a      	ldr	r3, [pc, #296]	@ (800d4b8 <prvAddNewTaskToReadyList+0x150>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2b01      	cmp	r3, #1
 800d392:	d110      	bne.n	800d3b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800d394:	f000 ffb0 	bl	800e2f8 <prvInitialiseTaskLists>
 800d398:	e00d      	b.n	800d3b6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800d39a:	4b49      	ldr	r3, [pc, #292]	@ (800d4c0 <prvAddNewTaskToReadyList+0x158>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d109      	bne.n	800d3b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d3a2:	4b46      	ldr	r3, [pc, #280]	@ (800d4bc <prvAddNewTaskToReadyList+0x154>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d802      	bhi.n	800d3b6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800d3b0:	4a42      	ldr	r2, [pc, #264]	@ (800d4bc <prvAddNewTaskToReadyList+0x154>)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800d3b6:	4b43      	ldr	r3, [pc, #268]	@ (800d4c4 <prvAddNewTaskToReadyList+0x15c>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	4a41      	ldr	r2, [pc, #260]	@ (800d4c4 <prvAddNewTaskToReadyList+0x15c>)
 800d3be:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d3c0:	4b40      	ldr	r3, [pc, #256]	@ (800d4c4 <prvAddNewTaskToReadyList+0x15c>)
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d016      	beq.n	800d3fc <prvAddNewTaskToReadyList+0x94>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f003 fe77 	bl	80110c4 <SEGGER_SYSVIEW_OnTaskCreate>
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3e6:	461d      	mov	r5, r3
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	461c      	mov	r4, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3f2:	1ae3      	subs	r3, r4, r3
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	462b      	mov	r3, r5
 800d3f8:	f002 fc50 	bl	800fc9c <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f003 fee4 	bl	80111cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d408:	2201      	movs	r2, #1
 800d40a:	409a      	lsls	r2, r3
 800d40c:	4b2e      	ldr	r3, [pc, #184]	@ (800d4c8 <prvAddNewTaskToReadyList+0x160>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4313      	orrs	r3, r2
 800d412:	4a2d      	ldr	r2, [pc, #180]	@ (800d4c8 <prvAddNewTaskToReadyList+0x160>)
 800d414:	6013      	str	r3, [r2, #0]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d41a:	492c      	ldr	r1, [pc, #176]	@ (800d4cc <prvAddNewTaskToReadyList+0x164>)
 800d41c:	4613      	mov	r3, r2
 800d41e:	009b      	lsls	r3, r3, #2
 800d420:	4413      	add	r3, r2
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	440b      	add	r3, r1
 800d426:	3304      	adds	r3, #4
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	60fb      	str	r3, [r7, #12]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	609a      	str	r2, [r3, #8]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	689a      	ldr	r2, [r3, #8]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	60da      	str	r2, [r3, #12]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	689b      	ldr	r3, [r3, #8]
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	3204      	adds	r2, #4
 800d442:	605a      	str	r2, [r3, #4]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	1d1a      	adds	r2, r3, #4
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	609a      	str	r2, [r3, #8]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d450:	4613      	mov	r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	4413      	add	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4a1c      	ldr	r2, [pc, #112]	@ (800d4cc <prvAddNewTaskToReadyList+0x164>)
 800d45a:	441a      	add	r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	615a      	str	r2, [r3, #20]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d464:	4919      	ldr	r1, [pc, #100]	@ (800d4cc <prvAddNewTaskToReadyList+0x164>)
 800d466:	4613      	mov	r3, r2
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	4413      	add	r3, r2
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	440b      	add	r3, r1
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d476:	1c59      	adds	r1, r3, #1
 800d478:	4814      	ldr	r0, [pc, #80]	@ (800d4cc <prvAddNewTaskToReadyList+0x164>)
 800d47a:	4613      	mov	r3, r2
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	4413      	add	r3, r2
 800d480:	009b      	lsls	r3, r3, #2
 800d482:	4403      	add	r3, r0
 800d484:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800d486:	f002 f8cf 	bl	800f628 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800d48a:	4b0d      	ldr	r3, [pc, #52]	@ (800d4c0 <prvAddNewTaskToReadyList+0x158>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00e      	beq.n	800d4b0 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800d492:	4b0a      	ldr	r3, [pc, #40]	@ (800d4bc <prvAddNewTaskToReadyList+0x154>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d207      	bcs.n	800d4b0 <prvAddNewTaskToReadyList+0x148>
 800d4a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d4d0 <prvAddNewTaskToReadyList+0x168>)
 800d4a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4a6:	601a      	str	r2, [r3, #0]
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d4b0:	bf00      	nop
 800d4b2:	3710      	adds	r7, #16
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bdb0      	pop	{r4, r5, r7, pc}
 800d4b8:	20002918 	.word	0x20002918
 800d4bc:	20002840 	.word	0x20002840
 800d4c0:	20002924 	.word	0x20002924
 800d4c4:	20002934 	.word	0x20002934
 800d4c8:	20002920 	.word	0x20002920
 800d4cc:	20002844 	.word	0x20002844
 800d4d0:	e000ed04 	.word	0xe000ed04

0800d4d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d018      	beq.n	800d518 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 800d4e6:	f000 fa4d 	bl	800d984 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800d4ea:	4b14      	ldr	r3, [pc, #80]	@ (800d53c <vTaskDelay+0x68>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d00b      	beq.n	800d50a <vTaskDelay+0x36>
    __asm volatile
 800d4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	60bb      	str	r3, [r7, #8]
}
 800d504:	bf00      	nop
 800d506:	bf00      	nop
 800d508:	e7fd      	b.n	800d506 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d50a:	2100      	movs	r1, #0
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f001 fbb7 	bl	800ec80 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800d512:	f000 fa45 	bl	800d9a0 <xTaskResumeAll>
 800d516:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d107      	bne.n	800d52e <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 800d51e:	4b08      	ldr	r3, [pc, #32]	@ (800d540 <vTaskDelay+0x6c>)
 800d520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d524:	601a      	str	r2, [r3, #0]
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 800d52e:	20c5      	movs	r0, #197	@ 0xc5
 800d530:	f003 fd18 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800d534:	bf00      	nop
 800d536:	3710      	adds	r7, #16
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	20002940 	.word	0x20002940
 800d540:	e000ed04 	.word	0xe000ed04

0800d544 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        traceENTER_vTaskSuspend( xTaskToSuspend );

        taskENTER_CRITICAL();
 800d54c:	f002 f83a 	bl	800f5c4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d102      	bne.n	800d55c <vTaskSuspend+0x18>
 800d556:	4b46      	ldr	r3, [pc, #280]	@ (800d670 <vTaskSuspend+0x12c>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	e000      	b.n	800d55e <vTaskSuspend+0x1a>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	3304      	adds	r3, #4
 800d564:	4618      	mov	r0, r3
 800d566:	f7ff f811 	bl	800c58c <uxListRemove>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d115      	bne.n	800d59c <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d574:	493f      	ldr	r1, [pc, #252]	@ (800d674 <vTaskSuspend+0x130>)
 800d576:	4613      	mov	r3, r2
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4413      	add	r3, r2
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	440b      	add	r3, r1
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d10a      	bne.n	800d59c <vTaskSuspend+0x58>
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d58a:	2201      	movs	r2, #1
 800d58c:	fa02 f303 	lsl.w	r3, r2, r3
 800d590:	43da      	mvns	r2, r3
 800d592:	4b39      	ldr	r3, [pc, #228]	@ (800d678 <vTaskSuspend+0x134>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4013      	ands	r3, r2
 800d598:	4a37      	ldr	r2, [pc, #220]	@ (800d678 <vTaskSuspend+0x134>)
 800d59a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d004      	beq.n	800d5ae <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	3318      	adds	r3, #24
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7fe ffef 	bl	800c58c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	4831      	ldr	r0, [pc, #196]	@ (800d67c <vTaskSuspend+0x138>)
 800d5b6:	f7fe ff88 	bl	800c4ca <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	617b      	str	r3, [r7, #20]
 800d5be:	e010      	b.n	800d5e2 <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800d5c0:	693a      	ldr	r2, [r7, #16]
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	3354      	adds	r3, #84	@ 0x54
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d105      	bne.n	800d5dc <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	3354      	adds	r3, #84	@ 0x54
 800d5d8:	2200      	movs	r2, #0
 800d5da:	701a      	strb	r2, [r3, #0]
                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	3301      	adds	r3, #1
 800d5e0:	617b      	str	r3, [r7, #20]
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	ddeb      	ble.n	800d5c0 <vTaskSuspend+0x7c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
        }
        taskEXIT_CRITICAL();
 800d5e8:	f002 f81e 	bl	800f628 <vPortExitCritical>

        #if ( configNUMBER_OF_CORES == 1 )
        {
            UBaseType_t uxCurrentListLength;

            if( xSchedulerRunning != pdFALSE )
 800d5ec:	4b24      	ldr	r3, [pc, #144]	@ (800d680 <vTaskSuspend+0x13c>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d005      	beq.n	800d600 <vTaskSuspend+0xbc>
            {
                /* Reset the next expected unblock time in case it referred to the
                 * task that is now in the Suspended state. */
                taskENTER_CRITICAL();
 800d5f4:	f001 ffe6 	bl	800f5c4 <vPortEnterCritical>
                {
                    prvResetNextTaskUnblockTime();
 800d5f8:	f000 fefc 	bl	800e3f4 <prvResetNextTaskUnblockTime>
                }
                taskEXIT_CRITICAL();
 800d5fc:	f002 f814 	bl	800f628 <vPortExitCritical>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( pxTCB == pxCurrentTCB )
 800d600:	4b1b      	ldr	r3, [pc, #108]	@ (800d670 <vTaskSuspend+0x12c>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	693a      	ldr	r2, [r7, #16]
 800d606:	429a      	cmp	r2, r3
 800d608:	d12a      	bne.n	800d660 <vTaskSuspend+0x11c>
            {
                if( xSchedulerRunning != pdFALSE )
 800d60a:	4b1d      	ldr	r3, [pc, #116]	@ (800d680 <vTaskSuspend+0x13c>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d018      	beq.n	800d644 <vTaskSuspend+0x100>
                {
                    /* The current task has just been suspended. */
                    configASSERT( uxSchedulerSuspended == 0 );
 800d612:	4b1c      	ldr	r3, [pc, #112]	@ (800d684 <vTaskSuspend+0x140>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00b      	beq.n	800d632 <vTaskSuspend+0xee>
    __asm volatile
 800d61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d61e:	f383 8811 	msr	BASEPRI, r3
 800d622:	f3bf 8f6f 	isb	sy
 800d626:	f3bf 8f4f 	dsb	sy
 800d62a:	60bb      	str	r3, [r7, #8]
}
 800d62c:	bf00      	nop
 800d62e:	bf00      	nop
 800d630:	e7fd      	b.n	800d62e <vTaskSuspend+0xea>
                    portYIELD_WITHIN_API();
 800d632:	4b15      	ldr	r3, [pc, #84]	@ (800d688 <vTaskSuspend+0x144>)
 800d634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d638:	601a      	str	r2, [r3, #0]
 800d63a:	f3bf 8f4f 	dsb	sy
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	e00d      	b.n	800d660 <vTaskSuspend+0x11c>
                     * must be adjusted to point to a different task. */

                    /* Use a temp variable as a distinct sequence point for reading
                     * volatile variables prior to a comparison to ensure compliance
                     * with MISRA C 2012 Rule 13.2. */
                    uxCurrentListLength = listCURRENT_LIST_LENGTH( &xSuspendedTaskList );
 800d644:	4b0d      	ldr	r3, [pc, #52]	@ (800d67c <vTaskSuspend+0x138>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	60fb      	str	r3, [r7, #12]

                    if( uxCurrentListLength == uxCurrentNumberOfTasks )
 800d64a:	4b10      	ldr	r3, [pc, #64]	@ (800d68c <vTaskSuspend+0x148>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	429a      	cmp	r2, r3
 800d652:	d103      	bne.n	800d65c <vTaskSuspend+0x118>
                    {
                        /* No other tasks are ready, so set pxCurrentTCB back to
                         * NULL so when the next task is created pxCurrentTCB will
                         * be set to point to it no matter what its relative priority
                         * is. */
                        pxCurrentTCB = NULL;
 800d654:	4b06      	ldr	r3, [pc, #24]	@ (800d670 <vTaskSuspend+0x12c>)
 800d656:	2200      	movs	r2, #0
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	e001      	b.n	800d660 <vTaskSuspend+0x11c>
                    }
                    else
                    {
                        vTaskSwitchContext();
 800d65c:	f000 fbe6 	bl	800de2c <vTaskSwitchContext>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskSuspend();
 800d660:	20ca      	movs	r0, #202	@ 0xca
 800d662:	f003 fc7f 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800d666:	bf00      	nop
 800d668:	3718      	adds	r7, #24
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	20002840 	.word	0x20002840
 800d674:	20002844 	.word	0x20002844
 800d678:	20002920 	.word	0x20002920
 800d67c:	20002904 	.word	0x20002904
 800d680:	20002924 	.word	0x20002924
 800d684:	20002940 	.word	0x20002940
 800d688:	e000ed04 	.word	0xe000ed04
 800d68c:	20002918 	.word	0x20002918

0800d690 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 800d690:	b480      	push	{r7}
 800d692:	b087      	sub	sp, #28
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800d698:	2300      	movs	r3, #0
 800d69a:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	60fb      	str	r3, [r7, #12]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d10b      	bne.n	800d6be <prvTaskIsTaskSuspended+0x2e>
    __asm volatile
 800d6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6aa:	f383 8811 	msr	BASEPRI, r3
 800d6ae:	f3bf 8f6f 	isb	sy
 800d6b2:	f3bf 8f4f 	dsb	sy
 800d6b6:	60bb      	str	r3, [r7, #8]
}
 800d6b8:	bf00      	nop
 800d6ba:	bf00      	nop
 800d6bc:	e7fd      	b.n	800d6ba <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	695b      	ldr	r3, [r3, #20]
 800d6c2:	4a14      	ldr	r2, [pc, #80]	@ (800d714 <prvTaskIsTaskSuspended+0x84>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d11e      	bne.n	800d706 <prvTaskIsTaskSuspended+0x76>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6cc:	4a12      	ldr	r2, [pc, #72]	@ (800d718 <prvTaskIsTaskSuspended+0x88>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d019      	beq.n	800d706 <prvTaskIsTaskSuspended+0x76>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because it is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d115      	bne.n	800d706 <prvTaskIsTaskSuspended+0x76>
                        /* The task does not appear on the event list item of
                         * and of the RTOS objects, but could still be in the
                         * blocked state if it is waiting on its notification
                         * rather than waiting on an object.  If not, is
                         * suspended. */
                        xReturn = pdTRUE;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	617b      	str	r3, [r7, #20]

                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800d6de:	2300      	movs	r3, #0
 800d6e0:	613b      	str	r3, [r7, #16]
 800d6e2:	e00d      	b.n	800d700 <prvTaskIsTaskSuspended+0x70>
                        {
                            if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800d6e4:	68fa      	ldr	r2, [r7, #12]
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	3354      	adds	r3, #84	@ 0x54
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d102      	bne.n	800d6fa <prvTaskIsTaskSuspended+0x6a>
                            {
                                xReturn = pdFALSE;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	617b      	str	r3, [r7, #20]
                                break;
 800d6f8:	e005      	b.n	800d706 <prvTaskIsTaskSuspended+0x76>
                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	613b      	str	r3, [r7, #16]
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	2b00      	cmp	r3, #0
 800d704:	ddee      	ble.n	800d6e4 <prvTaskIsTaskSuspended+0x54>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800d706:	697b      	ldr	r3, [r7, #20]
    }
 800d708:	4618      	mov	r0, r3
 800d70a:	371c      	adds	r7, #28
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr
 800d714:	20002904 	.word	0x20002904
 800d718:	200028d8 	.word	0x200028d8

0800d71c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskResume( xTaskToResume );

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d10b      	bne.n	800d746 <vTaskResume+0x2a>
    __asm volatile
 800d72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	60fb      	str	r3, [r7, #12]
}
 800d740:	bf00      	nop
 800d742:	bf00      	nop
 800d744:	e7fd      	b.n	800d742 <vTaskResume+0x26>

        #if ( configNUMBER_OF_CORES == 1 )

            /* The parameter cannot be NULL as it is impossible to resume the
             * currently executing task. */
            if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800d746:	4b39      	ldr	r3, [pc, #228]	@ (800d82c <vTaskResume+0x110>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	697a      	ldr	r2, [r7, #20]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d065      	beq.n	800d81c <vTaskResume+0x100>
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d062      	beq.n	800d81c <vTaskResume+0x100>
             * to check their run state here. Therefore, we get into a critical
             * section and check if the task is actually suspended or not. */
            if( pxTCB != NULL )
        #endif
        {
            taskENTER_CRITICAL();
 800d756:	f001 ff35 	bl	800f5c4 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d75a:	6978      	ldr	r0, [r7, #20]
 800d75c:	f7ff ff98 	bl	800d690 <prvTaskIsTaskSuspended>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d058      	beq.n	800d818 <vTaskResume+0xfc>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	3304      	adds	r3, #4
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fe ff0e 	bl	800c58c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	4618      	mov	r0, r3
 800d774:	f003 fd2a 	bl	80111cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d77c:	2201      	movs	r2, #1
 800d77e:	409a      	lsls	r2, r3
 800d780:	4b2b      	ldr	r3, [pc, #172]	@ (800d830 <vTaskResume+0x114>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4313      	orrs	r3, r2
 800d786:	4a2a      	ldr	r2, [pc, #168]	@ (800d830 <vTaskResume+0x114>)
 800d788:	6013      	str	r3, [r2, #0]
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d78e:	4929      	ldr	r1, [pc, #164]	@ (800d834 <vTaskResume+0x118>)
 800d790:	4613      	mov	r3, r2
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	4413      	add	r3, r2
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	440b      	add	r3, r1
 800d79a:	3304      	adds	r3, #4
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	613b      	str	r3, [r7, #16]
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	693a      	ldr	r2, [r7, #16]
 800d7a4:	609a      	str	r2, [r3, #8]
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	689a      	ldr	r2, [r3, #8]
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	60da      	str	r2, [r3, #12]
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	697a      	ldr	r2, [r7, #20]
 800d7b4:	3204      	adds	r2, #4
 800d7b6:	605a      	str	r2, [r3, #4]
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	1d1a      	adds	r2, r3, #4
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	609a      	str	r2, [r3, #8]
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	4413      	add	r3, r2
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	4a19      	ldr	r2, [pc, #100]	@ (800d834 <vTaskResume+0x118>)
 800d7ce:	441a      	add	r2, r3
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	615a      	str	r2, [r3, #20]
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7d8:	4916      	ldr	r1, [pc, #88]	@ (800d834 <vTaskResume+0x118>)
 800d7da:	4613      	mov	r3, r2
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	4413      	add	r3, r2
 800d7e0:	009b      	lsls	r3, r3, #2
 800d7e2:	440b      	add	r3, r1
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	697a      	ldr	r2, [r7, #20]
 800d7e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d7ea:	1c59      	adds	r1, r3, #1
 800d7ec:	4811      	ldr	r0, [pc, #68]	@ (800d834 <vTaskResume+0x118>)
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4413      	add	r3, r2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	4403      	add	r3, r0
 800d7f8:	6019      	str	r1, [r3, #0]

                    /* This yield may not cause the task just resumed to run,
                     * but will leave the lists in the correct state for the
                     * next yield. */
                    taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 800d7fa:	4b0c      	ldr	r3, [pc, #48]	@ (800d82c <vTaskResume+0x110>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d804:	429a      	cmp	r2, r3
 800d806:	d207      	bcs.n	800d818 <vTaskResume+0xfc>
 800d808:	4b0b      	ldr	r3, [pc, #44]	@ (800d838 <vTaskResume+0x11c>)
 800d80a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d80e:	601a      	str	r2, [r3, #0]
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800d818:	f001 ff06 	bl	800f628 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskResume();
 800d81c:	20cb      	movs	r0, #203	@ 0xcb
 800d81e:	f003 fba1 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800d822:	bf00      	nop
 800d824:	3718      	adds	r7, #24
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	20002840 	.word	0x20002840
 800d830:	20002920 	.word	0x20002920
 800d834:	20002844 	.word	0x20002844
 800d838:	e000ed04 	.word	0xe000ed04

0800d83c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b08a      	sub	sp, #40	@ 0x28
 800d840:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800d842:	2301      	movs	r3, #1
 800d844:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800d846:	2300      	movs	r3, #0
 800d848:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800d84a:	2300      	movs	r3, #0
 800d84c:	617b      	str	r3, [r7, #20]
 800d84e:	e011      	b.n	800d874 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800d850:	4a1c      	ldr	r2, [pc, #112]	@ (800d8c4 <prvCreateIdleTasks+0x88>)
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	4413      	add	r3, r2
 800d856:	7819      	ldrb	r1, [r3, #0]
 800d858:	1d3a      	adds	r2, r7, #4
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	4413      	add	r3, r2
 800d85e:	460a      	mov	r2, r1
 800d860:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800d862:	1d3a      	adds	r2, r7, #4
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	4413      	add	r3, r2
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d006      	beq.n	800d87c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	3301      	adds	r3, #1
 800d872:	617b      	str	r3, [r7, #20]
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	2b09      	cmp	r3, #9
 800d878:	ddea      	ble.n	800d850 <prvCreateIdleTasks+0x14>
 800d87a:	e000      	b.n	800d87e <prvCreateIdleTasks+0x42>
        {
            break;
 800d87c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800d87e:	2300      	movs	r3, #0
 800d880:	61bb      	str	r3, [r7, #24]
 800d882:	e015      	b.n	800d8b0 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800d884:	4b10      	ldr	r3, [pc, #64]	@ (800d8c8 <prvCreateIdleTasks+0x8c>)
 800d886:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4a0f      	ldr	r2, [pc, #60]	@ (800d8cc <prvCreateIdleTasks+0x90>)
 800d88e:	4413      	add	r3, r2
 800d890:	1d39      	adds	r1, r7, #4
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	2300      	movs	r3, #0
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	2300      	movs	r3, #0
 800d89a:	2282      	movs	r2, #130	@ 0x82
 800d89c:	6938      	ldr	r0, [r7, #16]
 800d89e:	f7ff fcaa 	bl	800d1f6 <xTaskCreate>
 800d8a2:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d006      	beq.n	800d8b8 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	61bb      	str	r3, [r7, #24]
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	dde6      	ble.n	800d884 <prvCreateIdleTasks+0x48>
 800d8b6:	e000      	b.n	800d8ba <prvCreateIdleTasks+0x7e>
        {
            break;
 800d8b8:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800d8ba:	69fb      	ldr	r3, [r7, #28]
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3720      	adds	r7, #32
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	0801480c 	.word	0x0801480c
 800d8c8:	0800e2c9 	.word	0x0800e2c9
 800d8cc:	2000293c 	.word	0x2000293c

0800d8d0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800d8d6:	f7ff ffb1 	bl	800d83c <prvCreateIdleTasks>
 800d8da:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d102      	bne.n	800d8e8 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800d8e2:	f001 fa5b 	bl	800ed9c <xTimerCreateTimerTask>
 800d8e6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d124      	bne.n	800d938 <vTaskStartScheduler+0x68>
    __asm volatile
 800d8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f2:	f383 8811 	msr	BASEPRI, r3
 800d8f6:	f3bf 8f6f 	isb	sy
 800d8fa:	f3bf 8f4f 	dsb	sy
 800d8fe:	60bb      	str	r3, [r7, #8]
}
 800d900:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800d902:	4b1a      	ldr	r3, [pc, #104]	@ (800d96c <vTaskStartScheduler+0x9c>)
 800d904:	f04f 32ff 	mov.w	r2, #4294967295
 800d908:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d90a:	4b19      	ldr	r3, [pc, #100]	@ (800d970 <vTaskStartScheduler+0xa0>)
 800d90c:	2201      	movs	r2, #1
 800d90e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d910:	4b18      	ldr	r3, [pc, #96]	@ (800d974 <vTaskStartScheduler+0xa4>)
 800d912:	2200      	movs	r2, #0
 800d914:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800d916:	4b18      	ldr	r3, [pc, #96]	@ (800d978 <vTaskStartScheduler+0xa8>)
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	4b18      	ldr	r3, [pc, #96]	@ (800d97c <vTaskStartScheduler+0xac>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d102      	bne.n	800d928 <vTaskStartScheduler+0x58>
 800d922:	f003 fbb3 	bl	801108c <SEGGER_SYSVIEW_OnIdle>
 800d926:	e004      	b.n	800d932 <vTaskStartScheduler+0x62>
 800d928:	4b14      	ldr	r3, [pc, #80]	@ (800d97c <vTaskStartScheduler+0xac>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f003 fc0b 	bl	8011148 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800d932:	f001 fd57 	bl	800f3e4 <xPortStartScheduler>
 800d936:	e00f      	b.n	800d958 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d93e:	d10b      	bne.n	800d958 <vTaskStartScheduler+0x88>
    __asm volatile
 800d940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d944:	f383 8811 	msr	BASEPRI, r3
 800d948:	f3bf 8f6f 	isb	sy
 800d94c:	f3bf 8f4f 	dsb	sy
 800d950:	607b      	str	r3, [r7, #4]
}
 800d952:	bf00      	nop
 800d954:	bf00      	nop
 800d956:	e7fd      	b.n	800d954 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800d958:	4b09      	ldr	r3, [pc, #36]	@ (800d980 <vTaskStartScheduler+0xb0>)
 800d95a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 800d95c:	20cd      	movs	r0, #205	@ 0xcd
 800d95e:	f003 fb01 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
}
 800d962:	bf00      	nop
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	20002938 	.word	0x20002938
 800d970:	20002924 	.word	0x20002924
 800d974:	2000291c 	.word	0x2000291c
 800d978:	2000293c 	.word	0x2000293c
 800d97c:	20002840 	.word	0x20002840
 800d980:	2000002c 	.word	0x2000002c

0800d984 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800d988:	4b04      	ldr	r3, [pc, #16]	@ (800d99c <vTaskSuspendAll+0x18>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	3301      	adds	r3, #1
 800d98e:	4a03      	ldr	r2, [pc, #12]	@ (800d99c <vTaskSuspendAll+0x18>)
 800d990:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800d992:	20cf      	movs	r0, #207	@ 0xcf
 800d994:	f003 fae6 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
}
 800d998:	bf00      	nop
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	20002940 	.word	0x20002940

0800d9a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b088      	sub	sp, #32
 800d9a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800d9ae:	f001 fe09 	bl	800f5c4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800d9b6:	4b7a      	ldr	r3, [pc, #488]	@ (800dba0 <xTaskResumeAll+0x200>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d10b      	bne.n	800d9d6 <xTaskResumeAll+0x36>
    __asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	603b      	str	r3, [r7, #0]
}
 800d9d0:	bf00      	nop
 800d9d2:	bf00      	nop
 800d9d4:	e7fd      	b.n	800d9d2 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800d9d6:	4b72      	ldr	r3, [pc, #456]	@ (800dba0 <xTaskResumeAll+0x200>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	4a70      	ldr	r2, [pc, #448]	@ (800dba0 <xTaskResumeAll+0x200>)
 800d9de:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d9e0:	4b6f      	ldr	r3, [pc, #444]	@ (800dba0 <xTaskResumeAll+0x200>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f040 80ce 	bne.w	800db86 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d9ea:	4b6e      	ldr	r3, [pc, #440]	@ (800dba4 <xTaskResumeAll+0x204>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f000 80c9 	beq.w	800db86 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9f4:	e092      	b.n	800db1c <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d9f6:	4b6c      	ldr	r3, [pc, #432]	@ (800dba8 <xTaskResumeAll+0x208>)
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da02:	60fb      	str	r3, [r7, #12]
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	69db      	ldr	r3, [r3, #28]
 800da08:	69fa      	ldr	r2, [r7, #28]
 800da0a:	6a12      	ldr	r2, [r2, #32]
 800da0c:	609a      	str	r2, [r3, #8]
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	69fa      	ldr	r2, [r7, #28]
 800da14:	69d2      	ldr	r2, [r2, #28]
 800da16:	605a      	str	r2, [r3, #4]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	685a      	ldr	r2, [r3, #4]
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	3318      	adds	r3, #24
 800da20:	429a      	cmp	r2, r3
 800da22:	d103      	bne.n	800da2c <xTaskResumeAll+0x8c>
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	6a1a      	ldr	r2, [r3, #32]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	605a      	str	r2, [r3, #4]
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	2200      	movs	r2, #0
 800da30:	629a      	str	r2, [r3, #40]	@ 0x28
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	1e5a      	subs	r2, r3, #1
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	695b      	ldr	r3, [r3, #20]
 800da40:	60bb      	str	r3, [r7, #8]
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	69fa      	ldr	r2, [r7, #28]
 800da48:	68d2      	ldr	r2, [r2, #12]
 800da4a:	609a      	str	r2, [r3, #8]
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	69fa      	ldr	r2, [r7, #28]
 800da52:	6892      	ldr	r2, [r2, #8]
 800da54:	605a      	str	r2, [r3, #4]
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	685a      	ldr	r2, [r3, #4]
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	3304      	adds	r3, #4
 800da5e:	429a      	cmp	r2, r3
 800da60:	d103      	bne.n	800da6a <xTaskResumeAll+0xca>
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	68da      	ldr	r2, [r3, #12]
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	605a      	str	r2, [r3, #4]
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	2200      	movs	r2, #0
 800da6e:	615a      	str	r2, [r3, #20]
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	1e5a      	subs	r2, r3, #1
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f003 fba5 	bl	80111cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da86:	2201      	movs	r2, #1
 800da88:	409a      	lsls	r2, r3
 800da8a:	4b48      	ldr	r3, [pc, #288]	@ (800dbac <xTaskResumeAll+0x20c>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4313      	orrs	r3, r2
 800da90:	4a46      	ldr	r2, [pc, #280]	@ (800dbac <xTaskResumeAll+0x20c>)
 800da92:	6013      	str	r3, [r2, #0]
 800da94:	69fb      	ldr	r3, [r7, #28]
 800da96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da98:	4945      	ldr	r1, [pc, #276]	@ (800dbb0 <xTaskResumeAll+0x210>)
 800da9a:	4613      	mov	r3, r2
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	4413      	add	r3, r2
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	440b      	add	r3, r1
 800daa4:	3304      	adds	r3, #4
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	607b      	str	r3, [r7, #4]
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	609a      	str	r2, [r3, #8]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	689a      	ldr	r2, [r3, #8]
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	60da      	str	r2, [r3, #12]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	69fa      	ldr	r2, [r7, #28]
 800dabe:	3204      	adds	r2, #4
 800dac0:	605a      	str	r2, [r3, #4]
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	1d1a      	adds	r2, r3, #4
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	609a      	str	r2, [r3, #8]
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dace:	4613      	mov	r3, r2
 800dad0:	009b      	lsls	r3, r3, #2
 800dad2:	4413      	add	r3, r2
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	4a36      	ldr	r2, [pc, #216]	@ (800dbb0 <xTaskResumeAll+0x210>)
 800dad8:	441a      	add	r2, r3
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	615a      	str	r2, [r3, #20]
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dae2:	4933      	ldr	r1, [pc, #204]	@ (800dbb0 <xTaskResumeAll+0x210>)
 800dae4:	4613      	mov	r3, r2
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	4413      	add	r3, r2
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	440b      	add	r3, r1
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	69fa      	ldr	r2, [r7, #28]
 800daf2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800daf4:	1c59      	adds	r1, r3, #1
 800daf6:	482e      	ldr	r0, [pc, #184]	@ (800dbb0 <xTaskResumeAll+0x210>)
 800daf8:	4613      	mov	r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	4413      	add	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4403      	add	r3, r0
 800db02:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db08:	4b2a      	ldr	r3, [pc, #168]	@ (800dbb4 <xTaskResumeAll+0x214>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db0e:	429a      	cmp	r2, r3
 800db10:	d904      	bls.n	800db1c <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800db12:	4a29      	ldr	r2, [pc, #164]	@ (800dbb8 <xTaskResumeAll+0x218>)
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	2101      	movs	r1, #1
 800db18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db1c:	4b22      	ldr	r3, [pc, #136]	@ (800dba8 <xTaskResumeAll+0x208>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	f47f af68 	bne.w	800d9f6 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800db26:	69fb      	ldr	r3, [r7, #28]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d001      	beq.n	800db30 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800db2c:	f000 fc62 	bl	800e3f4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db30:	4b22      	ldr	r3, [pc, #136]	@ (800dbbc <xTaskResumeAll+0x21c>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d012      	beq.n	800db62 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800db3c:	f000 f854 	bl	800dbe8 <xTaskIncrementTick>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d004      	beq.n	800db50 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800db46:	4a1c      	ldr	r2, [pc, #112]	@ (800dbb8 <xTaskResumeAll+0x218>)
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	2101      	movs	r1, #1
 800db4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	3b01      	subs	r3, #1
 800db54:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d1ef      	bne.n	800db3c <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 800db5c:	4b17      	ldr	r3, [pc, #92]	@ (800dbbc <xTaskResumeAll+0x21c>)
 800db5e:	2200      	movs	r2, #0
 800db60:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800db62:	4a15      	ldr	r2, [pc, #84]	@ (800dbb8 <xTaskResumeAll+0x218>)
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00b      	beq.n	800db86 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800db6e:	2301      	movs	r3, #1
 800db70:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800db72:	4b10      	ldr	r3, [pc, #64]	@ (800dbb4 <xTaskResumeAll+0x214>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4b12      	ldr	r3, [pc, #72]	@ (800dbc0 <xTaskResumeAll+0x220>)
 800db78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db7c:	601a      	str	r2, [r3, #0]
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800db86:	f001 fd4f 	bl	800f628 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	4619      	mov	r1, r3
 800db8e:	20d0      	movs	r0, #208	@ 0xd0
 800db90:	f003 fa24 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 800db94:	69bb      	ldr	r3, [r7, #24]
}
 800db96:	4618      	mov	r0, r3
 800db98:	3720      	adds	r7, #32
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	20002940 	.word	0x20002940
 800dba4:	20002918 	.word	0x20002918
 800dba8:	200028d8 	.word	0x200028d8
 800dbac:	20002920 	.word	0x20002920
 800dbb0:	20002844 	.word	0x20002844
 800dbb4:	20002840 	.word	0x20002840
 800dbb8:	2000292c 	.word	0x2000292c
 800dbbc:	20002928 	.word	0x20002928
 800dbc0:	e000ed04 	.word	0xe000ed04

0800dbc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800dbca:	4b06      	ldr	r3, [pc, #24]	@ (800dbe4 <xTaskGetTickCount+0x20>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 800dbd0:	6879      	ldr	r1, [r7, #4]
 800dbd2:	20d1      	movs	r0, #209	@ 0xd1
 800dbd4:	f003 fa02 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 800dbd8:	687b      	ldr	r3, [r7, #4]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	2000291c 	.word	0x2000291c

0800dbe8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b08a      	sub	sp, #40	@ 0x28
 800dbec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800dbf2:	4b83      	ldr	r3, [pc, #524]	@ (800de00 <xTaskIncrementTick+0x218>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f040 80f3 	bne.w	800dde2 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dbfc:	4b81      	ldr	r3, [pc, #516]	@ (800de04 <xTaskIncrementTick+0x21c>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	3301      	adds	r3, #1
 800dc02:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800dc04:	4a7f      	ldr	r2, [pc, #508]	@ (800de04 <xTaskIncrementTick+0x21c>)
 800dc06:	6a3b      	ldr	r3, [r7, #32]
 800dc08:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800dc0a:	6a3b      	ldr	r3, [r7, #32]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d121      	bne.n	800dc54 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800dc10:	4b7d      	ldr	r3, [pc, #500]	@ (800de08 <xTaskIncrementTick+0x220>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00b      	beq.n	800dc32 <xTaskIncrementTick+0x4a>
    __asm volatile
 800dc1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc1e:	f383 8811 	msr	BASEPRI, r3
 800dc22:	f3bf 8f6f 	isb	sy
 800dc26:	f3bf 8f4f 	dsb	sy
 800dc2a:	607b      	str	r3, [r7, #4]
}
 800dc2c:	bf00      	nop
 800dc2e:	bf00      	nop
 800dc30:	e7fd      	b.n	800dc2e <xTaskIncrementTick+0x46>
 800dc32:	4b75      	ldr	r3, [pc, #468]	@ (800de08 <xTaskIncrementTick+0x220>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	61fb      	str	r3, [r7, #28]
 800dc38:	4b74      	ldr	r3, [pc, #464]	@ (800de0c <xTaskIncrementTick+0x224>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a72      	ldr	r2, [pc, #456]	@ (800de08 <xTaskIncrementTick+0x220>)
 800dc3e:	6013      	str	r3, [r2, #0]
 800dc40:	4a72      	ldr	r2, [pc, #456]	@ (800de0c <xTaskIncrementTick+0x224>)
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	6013      	str	r3, [r2, #0]
 800dc46:	4b72      	ldr	r3, [pc, #456]	@ (800de10 <xTaskIncrementTick+0x228>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	4a70      	ldr	r2, [pc, #448]	@ (800de10 <xTaskIncrementTick+0x228>)
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	f000 fbd0 	bl	800e3f4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800dc54:	4b6f      	ldr	r3, [pc, #444]	@ (800de14 <xTaskIncrementTick+0x22c>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	6a3a      	ldr	r2, [r7, #32]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	f0c0 80ac 	bcc.w	800ddb8 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc60:	4b69      	ldr	r3, [pc, #420]	@ (800de08 <xTaskIncrementTick+0x220>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d104      	bne.n	800dc74 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800dc6a:	4b6a      	ldr	r3, [pc, #424]	@ (800de14 <xTaskIncrementTick+0x22c>)
 800dc6c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc70:	601a      	str	r2, [r3, #0]
                    break;
 800dc72:	e0a1      	b.n	800ddb8 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dc74:	4b64      	ldr	r3, [pc, #400]	@ (800de08 <xTaskIncrementTick+0x220>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800dc84:	6a3a      	ldr	r2, [r7, #32]
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d203      	bcs.n	800dc94 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800dc8c:	4a61      	ldr	r2, [pc, #388]	@ (800de14 <xTaskIncrementTick+0x22c>)
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	6013      	str	r3, [r2, #0]
                        break;
 800dc92:	e091      	b.n	800ddb8 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	695b      	ldr	r3, [r3, #20]
 800dc98:	613b      	str	r3, [r7, #16]
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	69ba      	ldr	r2, [r7, #24]
 800dca0:	68d2      	ldr	r2, [r2, #12]
 800dca2:	609a      	str	r2, [r3, #8]
 800dca4:	69bb      	ldr	r3, [r7, #24]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	69ba      	ldr	r2, [r7, #24]
 800dcaa:	6892      	ldr	r2, [r2, #8]
 800dcac:	605a      	str	r2, [r3, #4]
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	685a      	ldr	r2, [r3, #4]
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	3304      	adds	r3, #4
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d103      	bne.n	800dcc2 <xTaskIncrementTick+0xda>
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	68da      	ldr	r2, [r3, #12]
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	605a      	str	r2, [r3, #4]
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	615a      	str	r2, [r3, #20]
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	1e5a      	subs	r2, r3, #1
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d01e      	beq.n	800dd18 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800dcda:	69bb      	ldr	r3, [r7, #24]
 800dcdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcde:	60fb      	str	r3, [r7, #12]
 800dce0:	69bb      	ldr	r3, [r7, #24]
 800dce2:	69db      	ldr	r3, [r3, #28]
 800dce4:	69ba      	ldr	r2, [r7, #24]
 800dce6:	6a12      	ldr	r2, [r2, #32]
 800dce8:	609a      	str	r2, [r3, #8]
 800dcea:	69bb      	ldr	r3, [r7, #24]
 800dcec:	6a1b      	ldr	r3, [r3, #32]
 800dcee:	69ba      	ldr	r2, [r7, #24]
 800dcf0:	69d2      	ldr	r2, [r2, #28]
 800dcf2:	605a      	str	r2, [r3, #4]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	685a      	ldr	r2, [r3, #4]
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	3318      	adds	r3, #24
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d103      	bne.n	800dd08 <xTaskIncrementTick+0x120>
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	6a1a      	ldr	r2, [r3, #32]
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	605a      	str	r2, [r3, #4]
 800dd08:	69bb      	ldr	r3, [r7, #24]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	629a      	str	r2, [r3, #40]	@ 0x28
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	1e5a      	subs	r2, r3, #1
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f003 fa56 	bl	80111cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd24:	2201      	movs	r2, #1
 800dd26:	409a      	lsls	r2, r3
 800dd28:	4b3b      	ldr	r3, [pc, #236]	@ (800de18 <xTaskIncrementTick+0x230>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	4a3a      	ldr	r2, [pc, #232]	@ (800de18 <xTaskIncrementTick+0x230>)
 800dd30:	6013      	str	r3, [r2, #0]
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd36:	4939      	ldr	r1, [pc, #228]	@ (800de1c <xTaskIncrementTick+0x234>)
 800dd38:	4613      	mov	r3, r2
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	4413      	add	r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	440b      	add	r3, r1
 800dd42:	3304      	adds	r3, #4
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	60bb      	str	r3, [r7, #8]
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	68ba      	ldr	r2, [r7, #8]
 800dd4c:	609a      	str	r2, [r3, #8]
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	689a      	ldr	r2, [r3, #8]
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	60da      	str	r2, [r3, #12]
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	69ba      	ldr	r2, [r7, #24]
 800dd5c:	3204      	adds	r2, #4
 800dd5e:	605a      	str	r2, [r3, #4]
 800dd60:	69bb      	ldr	r3, [r7, #24]
 800dd62:	1d1a      	adds	r2, r3, #4
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	609a      	str	r2, [r3, #8]
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	4413      	add	r3, r2
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4a29      	ldr	r2, [pc, #164]	@ (800de1c <xTaskIncrementTick+0x234>)
 800dd76:	441a      	add	r2, r3
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	615a      	str	r2, [r3, #20]
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd80:	4926      	ldr	r1, [pc, #152]	@ (800de1c <xTaskIncrementTick+0x234>)
 800dd82:	4613      	mov	r3, r2
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	4413      	add	r3, r2
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	440b      	add	r3, r1
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	69ba      	ldr	r2, [r7, #24]
 800dd90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dd92:	1c59      	adds	r1, r3, #1
 800dd94:	4821      	ldr	r0, [pc, #132]	@ (800de1c <xTaskIncrementTick+0x234>)
 800dd96:	4613      	mov	r3, r2
 800dd98:	009b      	lsls	r3, r3, #2
 800dd9a:	4413      	add	r3, r2
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	4403      	add	r3, r0
 800dda0:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dda2:	69bb      	ldr	r3, [r7, #24]
 800dda4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dda6:	4b1e      	ldr	r3, [pc, #120]	@ (800de20 <xTaskIncrementTick+0x238>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddac:	429a      	cmp	r2, r3
 800ddae:	f67f af57 	bls.w	800dc60 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddb6:	e753      	b.n	800dc60 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800ddb8:	4b19      	ldr	r3, [pc, #100]	@ (800de20 <xTaskIncrementTick+0x238>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddbe:	4917      	ldr	r1, [pc, #92]	@ (800de1c <xTaskIncrementTick+0x234>)
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	4413      	add	r3, r2
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	440b      	add	r3, r1
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	d901      	bls.n	800ddd4 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800ddd4:	4b13      	ldr	r3, [pc, #76]	@ (800de24 <xTaskIncrementTick+0x23c>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d007      	beq.n	800ddec <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 800dddc:	2301      	movs	r3, #1
 800ddde:	627b      	str	r3, [r7, #36]	@ 0x24
 800dde0:	e004      	b.n	800ddec <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800dde2:	4b11      	ldr	r3, [pc, #68]	@ (800de28 <xTaskIncrementTick+0x240>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3301      	adds	r3, #1
 800dde8:	4a0f      	ldr	r2, [pc, #60]	@ (800de28 <xTaskIncrementTick+0x240>)
 800ddea:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 800ddec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddee:	4619      	mov	r1, r3
 800ddf0:	20db      	movs	r0, #219	@ 0xdb
 800ddf2:	f003 f8f3 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3728      	adds	r7, #40	@ 0x28
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	20002940 	.word	0x20002940
 800de04:	2000291c 	.word	0x2000291c
 800de08:	200028d0 	.word	0x200028d0
 800de0c:	200028d4 	.word	0x200028d4
 800de10:	20002930 	.word	0x20002930
 800de14:	20002938 	.word	0x20002938
 800de18:	20002920 	.word	0x20002920
 800de1c:	20002844 	.word	0x20002844
 800de20:	20002840 	.word	0x20002840
 800de24:	2000292c 	.word	0x2000292c
 800de28:	20002928 	.word	0x20002928

0800de2c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b086      	sub	sp, #24
 800de30:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800de32:	4b2e      	ldr	r3, [pc, #184]	@ (800deec <vTaskSwitchContext+0xc0>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d003      	beq.n	800de42 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800de3a:	4b2d      	ldr	r3, [pc, #180]	@ (800def0 <vTaskSwitchContext+0xc4>)
 800de3c:	2201      	movs	r2, #1
 800de3e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800de40:	e04f      	b.n	800dee2 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 800de42:	4b2b      	ldr	r3, [pc, #172]	@ (800def0 <vTaskSwitchContext+0xc4>)
 800de44:	2200      	movs	r2, #0
 800de46:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800de48:	4b2a      	ldr	r3, [pc, #168]	@ (800def4 <vTaskSwitchContext+0xc8>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	fab3 f383 	clz	r3, r3
 800de54:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800de56:	7afb      	ldrb	r3, [r7, #11]
 800de58:	f1c3 031f 	rsb	r3, r3, #31
 800de5c:	617b      	str	r3, [r7, #20]
 800de5e:	4926      	ldr	r1, [pc, #152]	@ (800def8 <vTaskSwitchContext+0xcc>)
 800de60:	697a      	ldr	r2, [r7, #20]
 800de62:	4613      	mov	r3, r2
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	4413      	add	r3, r2
 800de68:	009b      	lsls	r3, r3, #2
 800de6a:	440b      	add	r3, r1
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d10b      	bne.n	800de8a <vTaskSwitchContext+0x5e>
    __asm volatile
 800de72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de76:	f383 8811 	msr	BASEPRI, r3
 800de7a:	f3bf 8f6f 	isb	sy
 800de7e:	f3bf 8f4f 	dsb	sy
 800de82:	607b      	str	r3, [r7, #4]
}
 800de84:	bf00      	nop
 800de86:	bf00      	nop
 800de88:	e7fd      	b.n	800de86 <vTaskSwitchContext+0x5a>
 800de8a:	697a      	ldr	r2, [r7, #20]
 800de8c:	4613      	mov	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4413      	add	r3, r2
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	4a18      	ldr	r2, [pc, #96]	@ (800def8 <vTaskSwitchContext+0xcc>)
 800de96:	4413      	add	r3, r2
 800de98:	613b      	str	r3, [r7, #16]
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	685a      	ldr	r2, [r3, #4]
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	605a      	str	r2, [r3, #4]
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	685a      	ldr	r2, [r3, #4]
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	3308      	adds	r3, #8
 800deac:	429a      	cmp	r2, r3
 800deae:	d103      	bne.n	800deb8 <vTaskSwitchContext+0x8c>
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	68da      	ldr	r2, [r3, #12]
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	605a      	str	r2, [r3, #4]
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	4a0f      	ldr	r2, [pc, #60]	@ (800defc <vTaskSwitchContext+0xd0>)
 800dec0:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800dec2:	4b0f      	ldr	r3, [pc, #60]	@ (800df00 <vTaskSwitchContext+0xd4>)
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	4b0d      	ldr	r3, [pc, #52]	@ (800defc <vTaskSwitchContext+0xd0>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	429a      	cmp	r2, r3
 800decc:	d102      	bne.n	800ded4 <vTaskSwitchContext+0xa8>
 800dece:	f003 f8dd 	bl	801108c <SEGGER_SYSVIEW_OnIdle>
 800ded2:	e004      	b.n	800dede <vTaskSwitchContext+0xb2>
 800ded4:	4b09      	ldr	r3, [pc, #36]	@ (800defc <vTaskSwitchContext+0xd0>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4618      	mov	r0, r3
 800deda:	f003 f935 	bl	8011148 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800dede:	4b07      	ldr	r3, [pc, #28]	@ (800defc <vTaskSwitchContext+0xd0>)
 800dee0:	681b      	ldr	r3, [r3, #0]
    }
 800dee2:	bf00      	nop
 800dee4:	3718      	adds	r7, #24
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	20002940 	.word	0x20002940
 800def0:	2000292c 	.word	0x2000292c
 800def4:	20002920 	.word	0x20002920
 800def8:	20002844 	.word	0x20002844
 800defc:	20002840 	.word	0x20002840
 800df00:	2000293c 	.word	0x2000293c

0800df04 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d10b      	bne.n	800df2c <vTaskPlaceOnEventList+0x28>
    __asm volatile
 800df14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df18:	f383 8811 	msr	BASEPRI, r3
 800df1c:	f3bf 8f6f 	isb	sy
 800df20:	f3bf 8f4f 	dsb	sy
 800df24:	60fb      	str	r3, [r7, #12]
}
 800df26:	bf00      	nop
 800df28:	bf00      	nop
 800df2a:	e7fd      	b.n	800df28 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df2c:	4b08      	ldr	r3, [pc, #32]	@ (800df50 <vTaskPlaceOnEventList+0x4c>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	3318      	adds	r3, #24
 800df32:	4619      	mov	r1, r3
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7fe faee 	bl	800c516 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df3a:	2101      	movs	r1, #1
 800df3c:	6838      	ldr	r0, [r7, #0]
 800df3e:	f000 fe9f 	bl	800ec80 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 800df42:	20e1      	movs	r0, #225	@ 0xe1
 800df44:	f003 f80e 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
}
 800df48:	bf00      	nop
 800df4a:	3710      	adds	r7, #16
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	20002840 	.word	0x20002840

0800df54 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800df54:	b580      	push	{r7, lr}
 800df56:	b086      	sub	sp, #24
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d10b      	bne.n	800df7e <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800df66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df6a:	f383 8811 	msr	BASEPRI, r3
 800df6e:	f3bf 8f6f 	isb	sy
 800df72:	f3bf 8f4f 	dsb	sy
 800df76:	613b      	str	r3, [r7, #16]
}
 800df78:	bf00      	nop
 800df7a:	bf00      	nop
 800df7c:	e7fd      	b.n	800df7a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	617b      	str	r3, [r7, #20]
 800df84:	4b17      	ldr	r3, [pc, #92]	@ (800dfe4 <vTaskPlaceOnEventListRestricted+0x90>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	697a      	ldr	r2, [r7, #20]
 800df8a:	61da      	str	r2, [r3, #28]
 800df8c:	4b15      	ldr	r3, [pc, #84]	@ (800dfe4 <vTaskPlaceOnEventListRestricted+0x90>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	697a      	ldr	r2, [r7, #20]
 800df92:	6892      	ldr	r2, [r2, #8]
 800df94:	621a      	str	r2, [r3, #32]
 800df96:	4b13      	ldr	r3, [pc, #76]	@ (800dfe4 <vTaskPlaceOnEventListRestricted+0x90>)
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	3218      	adds	r2, #24
 800dfa0:	605a      	str	r2, [r3, #4]
 800dfa2:	4b10      	ldr	r3, [pc, #64]	@ (800dfe4 <vTaskPlaceOnEventListRestricted+0x90>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f103 0218 	add.w	r2, r3, #24
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	609a      	str	r2, [r3, #8]
 800dfae:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe4 <vTaskPlaceOnEventListRestricted+0x90>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	68fa      	ldr	r2, [r7, #12]
 800dfb4:	629a      	str	r2, [r3, #40]	@ 0x28
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	1c5a      	adds	r2, r3, #1
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d002      	beq.n	800dfcc <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800dfc6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfca:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dfcc:	6879      	ldr	r1, [r7, #4]
 800dfce:	68b8      	ldr	r0, [r7, #8]
 800dfd0:	f000 fe56 	bl	800ec80 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 800dfd4:	20e3      	movs	r0, #227	@ 0xe3
 800dfd6:	f002 ffc5 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800dfda:	bf00      	nop
 800dfdc:	3718      	adds	r7, #24
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	20002840 	.word	0x20002840

0800dfe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b08a      	sub	sp, #40	@ 0x28
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800dff8:	6a3b      	ldr	r3, [r7, #32]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d10b      	bne.n	800e016 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800dffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e002:	f383 8811 	msr	BASEPRI, r3
 800e006:	f3bf 8f6f 	isb	sy
 800e00a:	f3bf 8f4f 	dsb	sy
 800e00e:	60fb      	str	r3, [r7, #12]
}
 800e010:	bf00      	nop
 800e012:	bf00      	nop
 800e014:	e7fd      	b.n	800e012 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800e016:	6a3b      	ldr	r3, [r7, #32]
 800e018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e01a:	61fb      	str	r3, [r7, #28]
 800e01c:	6a3b      	ldr	r3, [r7, #32]
 800e01e:	69db      	ldr	r3, [r3, #28]
 800e020:	6a3a      	ldr	r2, [r7, #32]
 800e022:	6a12      	ldr	r2, [r2, #32]
 800e024:	609a      	str	r2, [r3, #8]
 800e026:	6a3b      	ldr	r3, [r7, #32]
 800e028:	6a1b      	ldr	r3, [r3, #32]
 800e02a:	6a3a      	ldr	r2, [r7, #32]
 800e02c:	69d2      	ldr	r2, [r2, #28]
 800e02e:	605a      	str	r2, [r3, #4]
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	685a      	ldr	r2, [r3, #4]
 800e034:	6a3b      	ldr	r3, [r7, #32]
 800e036:	3318      	adds	r3, #24
 800e038:	429a      	cmp	r2, r3
 800e03a:	d103      	bne.n	800e044 <xTaskRemoveFromEventList+0x5c>
 800e03c:	6a3b      	ldr	r3, [r7, #32]
 800e03e:	6a1a      	ldr	r2, [r3, #32]
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	605a      	str	r2, [r3, #4]
 800e044:	6a3b      	ldr	r3, [r7, #32]
 800e046:	2200      	movs	r2, #0
 800e048:	629a      	str	r2, [r3, #40]	@ 0x28
 800e04a:	69fb      	ldr	r3, [r7, #28]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	1e5a      	subs	r2, r3, #1
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800e054:	4b4e      	ldr	r3, [pc, #312]	@ (800e190 <xTaskRemoveFromEventList+0x1a8>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d164      	bne.n	800e126 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800e05c:	6a3b      	ldr	r3, [r7, #32]
 800e05e:	695b      	ldr	r3, [r3, #20]
 800e060:	617b      	str	r3, [r7, #20]
 800e062:	6a3b      	ldr	r3, [r7, #32]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	6a3a      	ldr	r2, [r7, #32]
 800e068:	68d2      	ldr	r2, [r2, #12]
 800e06a:	609a      	str	r2, [r3, #8]
 800e06c:	6a3b      	ldr	r3, [r7, #32]
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	6a3a      	ldr	r2, [r7, #32]
 800e072:	6892      	ldr	r2, [r2, #8]
 800e074:	605a      	str	r2, [r3, #4]
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	685a      	ldr	r2, [r3, #4]
 800e07a:	6a3b      	ldr	r3, [r7, #32]
 800e07c:	3304      	adds	r3, #4
 800e07e:	429a      	cmp	r2, r3
 800e080:	d103      	bne.n	800e08a <xTaskRemoveFromEventList+0xa2>
 800e082:	6a3b      	ldr	r3, [r7, #32]
 800e084:	68da      	ldr	r2, [r3, #12]
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	605a      	str	r2, [r3, #4]
 800e08a:	6a3b      	ldr	r3, [r7, #32]
 800e08c:	2200      	movs	r2, #0
 800e08e:	615a      	str	r2, [r3, #20]
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	1e5a      	subs	r2, r3, #1
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800e09a:	6a3b      	ldr	r3, [r7, #32]
 800e09c:	4618      	mov	r0, r3
 800e09e:	f003 f895 	bl	80111cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800e0a2:	6a3b      	ldr	r3, [r7, #32]
 800e0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	409a      	lsls	r2, r3
 800e0aa:	4b3a      	ldr	r3, [pc, #232]	@ (800e194 <xTaskRemoveFromEventList+0x1ac>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	4a38      	ldr	r2, [pc, #224]	@ (800e194 <xTaskRemoveFromEventList+0x1ac>)
 800e0b2:	6013      	str	r3, [r2, #0]
 800e0b4:	6a3b      	ldr	r3, [r7, #32]
 800e0b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0b8:	4937      	ldr	r1, [pc, #220]	@ (800e198 <xTaskRemoveFromEventList+0x1b0>)
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4413      	add	r3, r2
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	440b      	add	r3, r1
 800e0c4:	3304      	adds	r3, #4
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	613b      	str	r3, [r7, #16]
 800e0ca:	6a3b      	ldr	r3, [r7, #32]
 800e0cc:	693a      	ldr	r2, [r7, #16]
 800e0ce:	609a      	str	r2, [r3, #8]
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	689a      	ldr	r2, [r3, #8]
 800e0d4:	6a3b      	ldr	r3, [r7, #32]
 800e0d6:	60da      	str	r2, [r3, #12]
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	689b      	ldr	r3, [r3, #8]
 800e0dc:	6a3a      	ldr	r2, [r7, #32]
 800e0de:	3204      	adds	r2, #4
 800e0e0:	605a      	str	r2, [r3, #4]
 800e0e2:	6a3b      	ldr	r3, [r7, #32]
 800e0e4:	1d1a      	adds	r2, r3, #4
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	609a      	str	r2, [r3, #8]
 800e0ea:	6a3b      	ldr	r3, [r7, #32]
 800e0ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	4413      	add	r3, r2
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	4a28      	ldr	r2, [pc, #160]	@ (800e198 <xTaskRemoveFromEventList+0x1b0>)
 800e0f8:	441a      	add	r2, r3
 800e0fa:	6a3b      	ldr	r3, [r7, #32]
 800e0fc:	615a      	str	r2, [r3, #20]
 800e0fe:	6a3b      	ldr	r3, [r7, #32]
 800e100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e102:	4925      	ldr	r1, [pc, #148]	@ (800e198 <xTaskRemoveFromEventList+0x1b0>)
 800e104:	4613      	mov	r3, r2
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	440b      	add	r3, r1
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	6a3a      	ldr	r2, [r7, #32]
 800e112:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e114:	1c59      	adds	r1, r3, #1
 800e116:	4820      	ldr	r0, [pc, #128]	@ (800e198 <xTaskRemoveFromEventList+0x1b0>)
 800e118:	4613      	mov	r3, r2
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	4403      	add	r3, r0
 800e122:	6019      	str	r1, [r3, #0]
 800e124:	e01b      	b.n	800e15e <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e126:	4b1d      	ldr	r3, [pc, #116]	@ (800e19c <xTaskRemoveFromEventList+0x1b4>)
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	61bb      	str	r3, [r7, #24]
 800e12c:	6a3b      	ldr	r3, [r7, #32]
 800e12e:	69ba      	ldr	r2, [r7, #24]
 800e130:	61da      	str	r2, [r3, #28]
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	689a      	ldr	r2, [r3, #8]
 800e136:	6a3b      	ldr	r3, [r7, #32]
 800e138:	621a      	str	r2, [r3, #32]
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	689b      	ldr	r3, [r3, #8]
 800e13e:	6a3a      	ldr	r2, [r7, #32]
 800e140:	3218      	adds	r2, #24
 800e142:	605a      	str	r2, [r3, #4]
 800e144:	6a3b      	ldr	r3, [r7, #32]
 800e146:	f103 0218 	add.w	r2, r3, #24
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	609a      	str	r2, [r3, #8]
 800e14e:	6a3b      	ldr	r3, [r7, #32]
 800e150:	4a12      	ldr	r2, [pc, #72]	@ (800e19c <xTaskRemoveFromEventList+0x1b4>)
 800e152:	629a      	str	r2, [r3, #40]	@ 0x28
 800e154:	4b11      	ldr	r3, [pc, #68]	@ (800e19c <xTaskRemoveFromEventList+0x1b4>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	3301      	adds	r3, #1
 800e15a:	4a10      	ldr	r2, [pc, #64]	@ (800e19c <xTaskRemoveFromEventList+0x1b4>)
 800e15c:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e15e:	6a3b      	ldr	r3, [r7, #32]
 800e160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e162:	4b0f      	ldr	r3, [pc, #60]	@ (800e1a0 <xTaskRemoveFromEventList+0x1b8>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e168:	429a      	cmp	r2, r3
 800e16a:	d905      	bls.n	800e178 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800e16c:	2301      	movs	r3, #1
 800e16e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800e170:	4b0c      	ldr	r3, [pc, #48]	@ (800e1a4 <xTaskRemoveFromEventList+0x1bc>)
 800e172:	2201      	movs	r2, #1
 800e174:	601a      	str	r2, [r3, #0]
 800e176:	e001      	b.n	800e17c <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 800e178:	2300      	movs	r3, #0
 800e17a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 800e17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e17e:	4619      	mov	r1, r3
 800e180:	20e4      	movs	r0, #228	@ 0xe4
 800e182:	f002 ff2b 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 800e186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3728      	adds	r7, #40	@ 0x28
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	20002940 	.word	0x20002940
 800e194:	20002920 	.word	0x20002920
 800e198:	20002844 	.word	0x20002844
 800e19c:	200028d8 	.word	0x200028d8
 800e1a0:	20002840 	.word	0x20002840
 800e1a4:	2000292c 	.word	0x2000292c

0800e1a8 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e1b0:	4b07      	ldr	r3, [pc, #28]	@ (800e1d0 <vTaskInternalSetTimeOutState+0x28>)
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800e1b8:	4b06      	ldr	r3, [pc, #24]	@ (800e1d4 <vTaskInternalSetTimeOutState+0x2c>)
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 800e1c0:	20e7      	movs	r0, #231	@ 0xe7
 800e1c2:	f002 fecf 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
}
 800e1c6:	bf00      	nop
 800e1c8:	3708      	adds	r7, #8
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	20002930 	.word	0x20002930
 800e1d4:	2000291c 	.word	0x2000291c

0800e1d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b088      	sub	sp, #32
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10b      	bne.n	800e200 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 800e1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ec:	f383 8811 	msr	BASEPRI, r3
 800e1f0:	f3bf 8f6f 	isb	sy
 800e1f4:	f3bf 8f4f 	dsb	sy
 800e1f8:	613b      	str	r3, [r7, #16]
}
 800e1fa:	bf00      	nop
 800e1fc:	bf00      	nop
 800e1fe:	e7fd      	b.n	800e1fc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d10b      	bne.n	800e21e <xTaskCheckForTimeOut+0x46>
    __asm volatile
 800e206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e20a:	f383 8811 	msr	BASEPRI, r3
 800e20e:	f3bf 8f6f 	isb	sy
 800e212:	f3bf 8f4f 	dsb	sy
 800e216:	60fb      	str	r3, [r7, #12]
}
 800e218:	bf00      	nop
 800e21a:	bf00      	nop
 800e21c:	e7fd      	b.n	800e21a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800e21e:	f001 f9d1 	bl	800f5c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800e222:	4b21      	ldr	r3, [pc, #132]	@ (800e2a8 <xTaskCheckForTimeOut+0xd0>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	685b      	ldr	r3, [r3, #4]
 800e22c:	69ba      	ldr	r2, [r7, #24]
 800e22e:	1ad3      	subs	r3, r2, r3
 800e230:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e23a:	d102      	bne.n	800e242 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800e23c:	2300      	movs	r3, #0
 800e23e:	61fb      	str	r3, [r7, #28]
 800e240:	e026      	b.n	800e290 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	4b19      	ldr	r3, [pc, #100]	@ (800e2ac <xTaskCheckForTimeOut+0xd4>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d00a      	beq.n	800e264 <xTaskCheckForTimeOut+0x8c>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	69ba      	ldr	r2, [r7, #24]
 800e254:	429a      	cmp	r2, r3
 800e256:	d305      	bcc.n	800e264 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800e258:	2301      	movs	r3, #1
 800e25a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	2200      	movs	r2, #0
 800e260:	601a      	str	r2, [r3, #0]
 800e262:	e015      	b.n	800e290 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	697a      	ldr	r2, [r7, #20]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d20b      	bcs.n	800e286 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	1ad2      	subs	r2, r2, r3
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7ff ff94 	bl	800e1a8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800e280:	2300      	movs	r3, #0
 800e282:	61fb      	str	r3, [r7, #28]
 800e284:	e004      	b.n	800e290 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	2200      	movs	r2, #0
 800e28a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800e28c:	2301      	movs	r3, #1
 800e28e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800e290:	f001 f9ca 	bl	800f628 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	4619      	mov	r1, r3
 800e298:	20e8      	movs	r0, #232	@ 0xe8
 800e29a:	f002 fe9f 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800e29e:	69fb      	ldr	r3, [r7, #28]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3720      	adds	r7, #32
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	2000291c 	.word	0x2000291c
 800e2ac:	20002930 	.word	0x20002930

0800e2b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800e2b4:	4b03      	ldr	r3, [pc, #12]	@ (800e2c4 <vTaskMissedYield+0x14>)
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800e2ba:	20e9      	movs	r0, #233	@ 0xe9
 800e2bc:	f002 fe52 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
}
 800e2c0:	bf00      	nop
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	2000292c 	.word	0x2000292c

0800e2c8 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800e2d0:	f000 f852 	bl	800e378 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800e2d4:	4b06      	ldr	r3, [pc, #24]	@ (800e2f0 <prvIdleTask+0x28>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d9f9      	bls.n	800e2d0 <prvIdleTask+0x8>
            {
                taskYIELD();
 800e2dc:	4b05      	ldr	r3, [pc, #20]	@ (800e2f4 <prvIdleTask+0x2c>)
 800e2de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2e2:	601a      	str	r2, [r3, #0]
 800e2e4:	f3bf 8f4f 	dsb	sy
 800e2e8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800e2ec:	e7f0      	b.n	800e2d0 <prvIdleTask+0x8>
 800e2ee:	bf00      	nop
 800e2f0:	20002844 	.word	0x20002844
 800e2f4:	e000ed04 	.word	0xe000ed04

0800e2f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2fe:	2300      	movs	r3, #0
 800e300:	607b      	str	r3, [r7, #4]
 800e302:	e00c      	b.n	800e31e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	4613      	mov	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	4413      	add	r3, r2
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	4a12      	ldr	r2, [pc, #72]	@ (800e358 <prvInitialiseTaskLists+0x60>)
 800e310:	4413      	add	r3, r2
 800e312:	4618      	mov	r0, r3
 800e314:	f7fe f8a8 	bl	800c468 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	3301      	adds	r3, #1
 800e31c:	607b      	str	r3, [r7, #4]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2b04      	cmp	r3, #4
 800e322:	d9ef      	bls.n	800e304 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800e324:	480d      	ldr	r0, [pc, #52]	@ (800e35c <prvInitialiseTaskLists+0x64>)
 800e326:	f7fe f89f 	bl	800c468 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800e32a:	480d      	ldr	r0, [pc, #52]	@ (800e360 <prvInitialiseTaskLists+0x68>)
 800e32c:	f7fe f89c 	bl	800c468 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800e330:	480c      	ldr	r0, [pc, #48]	@ (800e364 <prvInitialiseTaskLists+0x6c>)
 800e332:	f7fe f899 	bl	800c468 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800e336:	480c      	ldr	r0, [pc, #48]	@ (800e368 <prvInitialiseTaskLists+0x70>)
 800e338:	f7fe f896 	bl	800c468 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800e33c:	480b      	ldr	r0, [pc, #44]	@ (800e36c <prvInitialiseTaskLists+0x74>)
 800e33e:	f7fe f893 	bl	800c468 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800e342:	4b0b      	ldr	r3, [pc, #44]	@ (800e370 <prvInitialiseTaskLists+0x78>)
 800e344:	4a05      	ldr	r2, [pc, #20]	@ (800e35c <prvInitialiseTaskLists+0x64>)
 800e346:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e348:	4b0a      	ldr	r3, [pc, #40]	@ (800e374 <prvInitialiseTaskLists+0x7c>)
 800e34a:	4a05      	ldr	r2, [pc, #20]	@ (800e360 <prvInitialiseTaskLists+0x68>)
 800e34c:	601a      	str	r2, [r3, #0]
}
 800e34e:	bf00      	nop
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	20002844 	.word	0x20002844
 800e35c:	200028a8 	.word	0x200028a8
 800e360:	200028bc 	.word	0x200028bc
 800e364:	200028d8 	.word	0x200028d8
 800e368:	200028ec 	.word	0x200028ec
 800e36c:	20002904 	.word	0x20002904
 800e370:	200028d0 	.word	0x200028d0
 800e374:	200028d4 	.word	0x200028d4

0800e378 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e37e:	e019      	b.n	800e3b4 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800e380:	f001 f920 	bl	800f5c4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e384:	4b10      	ldr	r3, [pc, #64]	@ (800e3c8 <prvCheckTasksWaitingTermination+0x50>)
 800e386:	68db      	ldr	r3, [r3, #12]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	3304      	adds	r3, #4
 800e390:	4618      	mov	r0, r3
 800e392:	f7fe f8fb 	bl	800c58c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800e396:	4b0d      	ldr	r3, [pc, #52]	@ (800e3cc <prvCheckTasksWaitingTermination+0x54>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	3b01      	subs	r3, #1
 800e39c:	4a0b      	ldr	r2, [pc, #44]	@ (800e3cc <prvCheckTasksWaitingTermination+0x54>)
 800e39e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800e3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e3d0 <prvCheckTasksWaitingTermination+0x58>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	3b01      	subs	r3, #1
 800e3a6:	4a0a      	ldr	r2, [pc, #40]	@ (800e3d0 <prvCheckTasksWaitingTermination+0x58>)
 800e3a8:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800e3aa:	f001 f93d 	bl	800f628 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f000 f810 	bl	800e3d4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3b4:	4b06      	ldr	r3, [pc, #24]	@ (800e3d0 <prvCheckTasksWaitingTermination+0x58>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d1e1      	bne.n	800e380 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800e3bc:	bf00      	nop
 800e3be:	bf00      	nop
 800e3c0:	3708      	adds	r7, #8
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	200028ec 	.word	0x200028ec
 800e3cc:	20002918 	.word	0x20002918
 800e3d0:	20002900 	.word	0x20002900

0800e3d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f001 fb0d 	bl	800fa00 <vPortFree>
            vPortFree( pxTCB );
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f001 fb0a 	bl	800fa00 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800e3ec:	bf00      	nop
 800e3ee:	3708      	adds	r7, #8
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3f8:	4b0a      	ldr	r3, [pc, #40]	@ (800e424 <prvResetNextTaskUnblockTime+0x30>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d104      	bne.n	800e40c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800e402:	4b09      	ldr	r3, [pc, #36]	@ (800e428 <prvResetNextTaskUnblockTime+0x34>)
 800e404:	f04f 32ff 	mov.w	r2, #4294967295
 800e408:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800e40a:	e005      	b.n	800e418 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e40c:	4b05      	ldr	r3, [pc, #20]	@ (800e424 <prvResetNextTaskUnblockTime+0x30>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	68db      	ldr	r3, [r3, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a04      	ldr	r2, [pc, #16]	@ (800e428 <prvResetNextTaskUnblockTime+0x34>)
 800e416:	6013      	str	r3, [r2, #0]
}
 800e418:	bf00      	nop
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	200028d0 	.word	0x200028d0
 800e428:	20002938 	.word	0x20002938

0800e42c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800e432:	4b0d      	ldr	r3, [pc, #52]	@ (800e468 <xTaskGetSchedulerState+0x3c>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d102      	bne.n	800e440 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800e43a:	2301      	movs	r3, #1
 800e43c:	607b      	str	r3, [r7, #4]
 800e43e:	e008      	b.n	800e452 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800e440:	4b0a      	ldr	r3, [pc, #40]	@ (800e46c <xTaskGetSchedulerState+0x40>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d102      	bne.n	800e44e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 800e448:	2302      	movs	r3, #2
 800e44a:	607b      	str	r3, [r7, #4]
 800e44c:	e001      	b.n	800e452 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800e44e:	2300      	movs	r3, #0
 800e450:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	4619      	mov	r1, r3
 800e456:	20f5      	movs	r0, #245	@ 0xf5
 800e458:	f002 fdc0 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800e45c:	687b      	ldr	r3, [r7, #4]
    }
 800e45e:	4618      	mov	r0, r3
 800e460:	3708      	adds	r7, #8
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	20002924 	.word	0x20002924
 800e46c:	20002940 	.word	0x20002940

0800e470 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800e470:	b580      	push	{r7, lr}
 800e472:	b086      	sub	sp, #24
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800e47c:	2300      	movs	r3, #0
 800e47e:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	f000 808d 	beq.w	800e5a2 <xTaskPriorityInherit+0x132>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e48c:	4b4a      	ldr	r3, [pc, #296]	@ (800e5b8 <xTaskPriorityInherit+0x148>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e492:	429a      	cmp	r2, r3
 800e494:	d27c      	bcs.n	800e590 <xTaskPriorityInherit+0x120>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	699b      	ldr	r3, [r3, #24]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	db06      	blt.n	800e4ac <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800e49e:	4b46      	ldr	r3, [pc, #280]	@ (800e5b8 <xTaskPriorityInherit+0x148>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4a4:	f1c3 0205 	rsb	r2, r3, #5
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	6959      	ldr	r1, [r3, #20]
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	4413      	add	r3, r2
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	4a3f      	ldr	r2, [pc, #252]	@ (800e5bc <xTaskPriorityInherit+0x14c>)
 800e4be:	4413      	add	r3, r2
 800e4c0:	4299      	cmp	r1, r3
 800e4c2:	d15d      	bne.n	800e580 <xTaskPriorityInherit+0x110>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	3304      	adds	r3, #4
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7fe f85f 	bl	800c58c <uxListRemove>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d10a      	bne.n	800e4ea <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d8:	2201      	movs	r2, #1
 800e4da:	fa02 f303 	lsl.w	r3, r2, r3
 800e4de:	43da      	mvns	r2, r3
 800e4e0:	4b37      	ldr	r3, [pc, #220]	@ (800e5c0 <xTaskPriorityInherit+0x150>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4013      	ands	r3, r2
 800e4e6:	4a36      	ldr	r2, [pc, #216]	@ (800e5c0 <xTaskPriorityInherit+0x150>)
 800e4e8:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4ea:	4b33      	ldr	r3, [pc, #204]	@ (800e5b8 <xTaskPriorityInherit+0x148>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f002 fe68 	bl	80111cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e500:	2201      	movs	r2, #1
 800e502:	409a      	lsls	r2, r3
 800e504:	4b2e      	ldr	r3, [pc, #184]	@ (800e5c0 <xTaskPriorityInherit+0x150>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4313      	orrs	r3, r2
 800e50a:	4a2d      	ldr	r2, [pc, #180]	@ (800e5c0 <xTaskPriorityInherit+0x150>)
 800e50c:	6013      	str	r3, [r2, #0]
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e512:	492a      	ldr	r1, [pc, #168]	@ (800e5bc <xTaskPriorityInherit+0x14c>)
 800e514:	4613      	mov	r3, r2
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	4413      	add	r3, r2
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	440b      	add	r3, r1
 800e51e:	3304      	adds	r3, #4
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	60fb      	str	r3, [r7, #12]
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	68fa      	ldr	r2, [r7, #12]
 800e528:	609a      	str	r2, [r3, #8]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	689a      	ldr	r2, [r3, #8]
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	60da      	str	r2, [r3, #12]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	693a      	ldr	r2, [r7, #16]
 800e538:	3204      	adds	r2, #4
 800e53a:	605a      	str	r2, [r3, #4]
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	1d1a      	adds	r2, r3, #4
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	609a      	str	r2, [r3, #8]
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e548:	4613      	mov	r3, r2
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	4413      	add	r3, r2
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	4a1a      	ldr	r2, [pc, #104]	@ (800e5bc <xTaskPriorityInherit+0x14c>)
 800e552:	441a      	add	r2, r3
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	615a      	str	r2, [r3, #20]
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e55c:	4917      	ldr	r1, [pc, #92]	@ (800e5bc <xTaskPriorityInherit+0x14c>)
 800e55e:	4613      	mov	r3, r2
 800e560:	009b      	lsls	r3, r3, #2
 800e562:	4413      	add	r3, r2
 800e564:	009b      	lsls	r3, r3, #2
 800e566:	440b      	add	r3, r1
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	693a      	ldr	r2, [r7, #16]
 800e56c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e56e:	1c59      	adds	r1, r3, #1
 800e570:	4812      	ldr	r0, [pc, #72]	@ (800e5bc <xTaskPriorityInherit+0x14c>)
 800e572:	4613      	mov	r3, r2
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	4413      	add	r3, r2
 800e578:	009b      	lsls	r3, r3, #2
 800e57a:	4403      	add	r3, r0
 800e57c:	6019      	str	r1, [r3, #0]
 800e57e:	e004      	b.n	800e58a <xTaskPriorityInherit+0x11a>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e580:	4b0d      	ldr	r3, [pc, #52]	@ (800e5b8 <xTaskPriorityInherit+0x148>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800e58a:	2301      	movs	r3, #1
 800e58c:	617b      	str	r3, [r7, #20]
 800e58e:	e008      	b.n	800e5a2 <xTaskPriorityInherit+0x132>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e594:	4b08      	ldr	r3, [pc, #32]	@ (800e5b8 <xTaskPriorityInherit+0x148>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d201      	bcs.n	800e5a2 <xTaskPriorityInherit+0x132>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	20f6      	movs	r0, #246	@ 0xf6
 800e5a8:	f002 fd18 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800e5ac:	697b      	ldr	r3, [r7, #20]
    }
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3718      	adds	r7, #24
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	20002840 	.word	0x20002840
 800e5bc:	20002844 	.word	0x20002844
 800e5c0:	20002920 	.word	0x20002920

0800e5c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b088      	sub	sp, #32
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	f000 8094 	beq.w	800e704 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800e5dc:	4b4e      	ldr	r3, [pc, #312]	@ (800e718 <xTaskPriorityDisinherit+0x154>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	69ba      	ldr	r2, [r7, #24]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d00b      	beq.n	800e5fe <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 800e5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ea:	f383 8811 	msr	BASEPRI, r3
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f3bf 8f4f 	dsb	sy
 800e5f6:	613b      	str	r3, [r7, #16]
}
 800e5f8:	bf00      	nop
 800e5fa:	bf00      	nop
 800e5fc:	e7fd      	b.n	800e5fa <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e602:	2b00      	cmp	r3, #0
 800e604:	d10b      	bne.n	800e61e <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 800e606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e60a:	f383 8811 	msr	BASEPRI, r3
 800e60e:	f3bf 8f6f 	isb	sy
 800e612:	f3bf 8f4f 	dsb	sy
 800e616:	60fb      	str	r3, [r7, #12]
}
 800e618:	bf00      	nop
 800e61a:	bf00      	nop
 800e61c:	e7fd      	b.n	800e61a <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800e61e:	69bb      	ldr	r3, [r7, #24]
 800e620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e622:	1e5a      	subs	r2, r3, #1
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e630:	429a      	cmp	r2, r3
 800e632:	d067      	beq.n	800e704 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d163      	bne.n	800e704 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	3304      	adds	r3, #4
 800e640:	4618      	mov	r0, r3
 800e642:	f7fd ffa3 	bl	800c58c <uxListRemove>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d10a      	bne.n	800e662 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e64c:	69bb      	ldr	r3, [r7, #24]
 800e64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e650:	2201      	movs	r2, #1
 800e652:	fa02 f303 	lsl.w	r3, r2, r3
 800e656:	43da      	mvns	r2, r3
 800e658:	4b30      	ldr	r3, [pc, #192]	@ (800e71c <xTaskPriorityDisinherit+0x158>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4013      	ands	r3, r2
 800e65e:	4a2f      	ldr	r2, [pc, #188]	@ (800e71c <xTaskPriorityDisinherit+0x158>)
 800e660:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800e66a:	69bb      	ldr	r3, [r7, #24]
 800e66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e66e:	f1c3 0205 	rsb	r2, r3, #5
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	4618      	mov	r0, r3
 800e67a:	f002 fda7 	bl	80111cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800e67e:	69bb      	ldr	r3, [r7, #24]
 800e680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e682:	2201      	movs	r2, #1
 800e684:	409a      	lsls	r2, r3
 800e686:	4b25      	ldr	r3, [pc, #148]	@ (800e71c <xTaskPriorityDisinherit+0x158>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4313      	orrs	r3, r2
 800e68c:	4a23      	ldr	r2, [pc, #140]	@ (800e71c <xTaskPriorityDisinherit+0x158>)
 800e68e:	6013      	str	r3, [r2, #0]
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e694:	4922      	ldr	r1, [pc, #136]	@ (800e720 <xTaskPriorityDisinherit+0x15c>)
 800e696:	4613      	mov	r3, r2
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	4413      	add	r3, r2
 800e69c:	009b      	lsls	r3, r3, #2
 800e69e:	440b      	add	r3, r1
 800e6a0:	3304      	adds	r3, #4
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	617b      	str	r3, [r7, #20]
 800e6a6:	69bb      	ldr	r3, [r7, #24]
 800e6a8:	697a      	ldr	r2, [r7, #20]
 800e6aa:	609a      	str	r2, [r3, #8]
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	689a      	ldr	r2, [r3, #8]
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	60da      	str	r2, [r3, #12]
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	689b      	ldr	r3, [r3, #8]
 800e6b8:	69ba      	ldr	r2, [r7, #24]
 800e6ba:	3204      	adds	r2, #4
 800e6bc:	605a      	str	r2, [r3, #4]
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	1d1a      	adds	r2, r3, #4
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	609a      	str	r2, [r3, #8]
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4413      	add	r3, r2
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	4a13      	ldr	r2, [pc, #76]	@ (800e720 <xTaskPriorityDisinherit+0x15c>)
 800e6d4:	441a      	add	r2, r3
 800e6d6:	69bb      	ldr	r3, [r7, #24]
 800e6d8:	615a      	str	r2, [r3, #20]
 800e6da:	69bb      	ldr	r3, [r7, #24]
 800e6dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6de:	4910      	ldr	r1, [pc, #64]	@ (800e720 <xTaskPriorityDisinherit+0x15c>)
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	009b      	lsls	r3, r3, #2
 800e6e8:	440b      	add	r3, r1
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	69ba      	ldr	r2, [r7, #24]
 800e6ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e6f0:	1c59      	adds	r1, r3, #1
 800e6f2:	480b      	ldr	r0, [pc, #44]	@ (800e720 <xTaskPriorityDisinherit+0x15c>)
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4413      	add	r3, r2
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	4403      	add	r3, r0
 800e6fe:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800e700:	2301      	movs	r3, #1
 800e702:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 800e704:	69fb      	ldr	r3, [r7, #28]
 800e706:	4619      	mov	r1, r3
 800e708:	20f7      	movs	r0, #247	@ 0xf7
 800e70a:	f002 fc67 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800e70e:	69fb      	ldr	r3, [r7, #28]
    }
 800e710:	4618      	mov	r0, r3
 800e712:	3720      	adds	r7, #32
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}
 800e718:	20002840 	.word	0x20002840
 800e71c:	20002920 	.word	0x20002920
 800e720:	20002844 	.word	0x20002844

0800e724 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800e724:	b580      	push	{r7, lr}
 800e726:	b08a      	sub	sp, #40	@ 0x28
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e732:	2301      	movs	r3, #1
 800e734:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f000 80aa 	beq.w	800e892 <vTaskPriorityDisinheritAfterTimeout+0x16e>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800e73e:	6a3b      	ldr	r3, [r7, #32]
 800e740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e742:	2b00      	cmp	r3, #0
 800e744:	d10b      	bne.n	800e75e <vTaskPriorityDisinheritAfterTimeout+0x3a>
    __asm volatile
 800e746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e74a:	f383 8811 	msr	BASEPRI, r3
 800e74e:	f3bf 8f6f 	isb	sy
 800e752:	f3bf 8f4f 	dsb	sy
 800e756:	613b      	str	r3, [r7, #16]
}
 800e758:	bf00      	nop
 800e75a:	bf00      	nop
 800e75c:	e7fd      	b.n	800e75a <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e75e:	6a3b      	ldr	r3, [r7, #32]
 800e760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e762:	683a      	ldr	r2, [r7, #0]
 800e764:	429a      	cmp	r2, r3
 800e766:	d902      	bls.n	800e76e <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e76c:	e002      	b.n	800e774 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800e76e:	6a3b      	ldr	r3, [r7, #32]
 800e770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e772:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800e774:	6a3b      	ldr	r3, [r7, #32]
 800e776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e77a:	429a      	cmp	r2, r3
 800e77c:	f000 8089 	beq.w	800e892 <vTaskPriorityDisinheritAfterTimeout+0x16e>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e780:	6a3b      	ldr	r3, [r7, #32]
 800e782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e784:	69fa      	ldr	r2, [r7, #28]
 800e786:	429a      	cmp	r2, r3
 800e788:	f040 8083 	bne.w	800e892 <vTaskPriorityDisinheritAfterTimeout+0x16e>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800e78c:	4b44      	ldr	r3, [pc, #272]	@ (800e8a0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	6a3a      	ldr	r2, [r7, #32]
 800e792:	429a      	cmp	r2, r3
 800e794:	d10b      	bne.n	800e7ae <vTaskPriorityDisinheritAfterTimeout+0x8a>
    __asm volatile
 800e796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e79a:	f383 8811 	msr	BASEPRI, r3
 800e79e:	f3bf 8f6f 	isb	sy
 800e7a2:	f3bf 8f4f 	dsb	sy
 800e7a6:	60fb      	str	r3, [r7, #12]
}
 800e7a8:	bf00      	nop
 800e7aa:	bf00      	nop
 800e7ac:	e7fd      	b.n	800e7aa <vTaskPriorityDisinheritAfterTimeout+0x86>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e7ae:	6a3b      	ldr	r3, [r7, #32]
 800e7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7b2:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800e7b4:	6a3b      	ldr	r3, [r7, #32]
 800e7b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7b8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800e7ba:	6a3b      	ldr	r3, [r7, #32]
 800e7bc:	699b      	ldr	r3, [r3, #24]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	db04      	blt.n	800e7cc <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800e7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c4:	f1c3 0205 	rsb	r2, r3, #5
 800e7c8:	6a3b      	ldr	r3, [r7, #32]
 800e7ca:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e7cc:	6a3b      	ldr	r3, [r7, #32]
 800e7ce:	6959      	ldr	r1, [r3, #20]
 800e7d0:	69ba      	ldr	r2, [r7, #24]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	4413      	add	r3, r2
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	4a32      	ldr	r2, [pc, #200]	@ (800e8a4 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800e7dc:	4413      	add	r3, r2
 800e7de:	4299      	cmp	r1, r3
 800e7e0:	d157      	bne.n	800e892 <vTaskPriorityDisinheritAfterTimeout+0x16e>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7e2:	6a3b      	ldr	r3, [r7, #32]
 800e7e4:	3304      	adds	r3, #4
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7fd fed0 	bl	800c58c <uxListRemove>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d10a      	bne.n	800e808 <vTaskPriorityDisinheritAfterTimeout+0xe4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e7f2:	6a3b      	ldr	r3, [r7, #32]
 800e7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e7fc:	43da      	mvns	r2, r3
 800e7fe:	4b2a      	ldr	r3, [pc, #168]	@ (800e8a8 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4013      	ands	r3, r2
 800e804:	4a28      	ldr	r2, [pc, #160]	@ (800e8a8 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800e806:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800e808:	6a3b      	ldr	r3, [r7, #32]
 800e80a:	4618      	mov	r0, r3
 800e80c:	f002 fcde 	bl	80111cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800e810:	6a3b      	ldr	r3, [r7, #32]
 800e812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e814:	2201      	movs	r2, #1
 800e816:	409a      	lsls	r2, r3
 800e818:	4b23      	ldr	r3, [pc, #140]	@ (800e8a8 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4313      	orrs	r3, r2
 800e81e:	4a22      	ldr	r2, [pc, #136]	@ (800e8a8 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800e820:	6013      	str	r3, [r2, #0]
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e826:	491f      	ldr	r1, [pc, #124]	@ (800e8a4 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800e828:	4613      	mov	r3, r2
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	4413      	add	r3, r2
 800e82e:	009b      	lsls	r3, r3, #2
 800e830:	440b      	add	r3, r1
 800e832:	3304      	adds	r3, #4
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	617b      	str	r3, [r7, #20]
 800e838:	6a3b      	ldr	r3, [r7, #32]
 800e83a:	697a      	ldr	r2, [r7, #20]
 800e83c:	609a      	str	r2, [r3, #8]
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	689a      	ldr	r2, [r3, #8]
 800e842:	6a3b      	ldr	r3, [r7, #32]
 800e844:	60da      	str	r2, [r3, #12]
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	689b      	ldr	r3, [r3, #8]
 800e84a:	6a3a      	ldr	r2, [r7, #32]
 800e84c:	3204      	adds	r2, #4
 800e84e:	605a      	str	r2, [r3, #4]
 800e850:	6a3b      	ldr	r3, [r7, #32]
 800e852:	1d1a      	adds	r2, r3, #4
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	609a      	str	r2, [r3, #8]
 800e858:	6a3b      	ldr	r3, [r7, #32]
 800e85a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e85c:	4613      	mov	r3, r2
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	4413      	add	r3, r2
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	4a0f      	ldr	r2, [pc, #60]	@ (800e8a4 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800e866:	441a      	add	r2, r3
 800e868:	6a3b      	ldr	r3, [r7, #32]
 800e86a:	615a      	str	r2, [r3, #20]
 800e86c:	6a3b      	ldr	r3, [r7, #32]
 800e86e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e870:	490c      	ldr	r1, [pc, #48]	@ (800e8a4 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800e872:	4613      	mov	r3, r2
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	4413      	add	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	440b      	add	r3, r1
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	6a3a      	ldr	r2, [r7, #32]
 800e880:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e882:	1c59      	adds	r1, r3, #1
 800e884:	4807      	ldr	r0, [pc, #28]	@ (800e8a4 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800e886:	4613      	mov	r3, r2
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	4413      	add	r3, r2
 800e88c:	009b      	lsls	r3, r3, #2
 800e88e:	4403      	add	r3, r0
 800e890:	6019      	str	r1, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
 800e892:	20f8      	movs	r0, #248	@ 0xf8
 800e894:	f002 fb66 	bl	8010f64 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800e898:	bf00      	nop
 800e89a:	3728      	adds	r7, #40	@ 0x28
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	20002840 	.word	0x20002840
 800e8a4:	20002844 	.word	0x20002844
 800e8a8:	20002920 	.word	0x20002920

0800e8ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 800e8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e8e4 <pvTaskIncrementMutexHeldCount+0x38>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d004      	beq.n	800e8c8 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8c2:	1c5a      	adds	r2, r3, #1
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f002 fd20 	bl	8011310 <SEGGER_SYSVIEW_ShrinkId>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	20fe      	movs	r0, #254	@ 0xfe
 800e8d6:	f002 fb81 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxTCB;
 800e8da:	687b      	ldr	r3, [r7, #4]
    }
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	20002840 	.word	0x20002840

0800e8e8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b088      	sub	sp, #32
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	607a      	str	r2, [r7, #4]
 800e8f4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00b      	beq.n	800e918 <xTaskGenericNotifyWait+0x30>
    __asm volatile
 800e900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	613b      	str	r3, [r7, #16]
}
 800e912:	bf00      	nop
 800e914:	bf00      	nop
 800e916:	e7fd      	b.n	800e914 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 800e918:	f7ff f834 	bl	800d984 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 800e91c:	f000 fe52 	bl	800f5c4 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800e920:	4b3b      	ldr	r3, [pc, #236]	@ (800ea10 <xTaskGenericNotifyWait+0x128>)
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	4413      	add	r3, r2
 800e928:	3354      	adds	r3, #84	@ 0x54
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	2b02      	cmp	r3, #2
 800e930:	d018      	beq.n	800e964 <xTaskGenericNotifyWait+0x7c>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 800e932:	4b37      	ldr	r3, [pc, #220]	@ (800ea10 <xTaskGenericNotifyWait+0x128>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	68fa      	ldr	r2, [r7, #12]
 800e938:	3214      	adds	r2, #20
 800e93a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e93e:	68ba      	ldr	r2, [r7, #8]
 800e940:	43d2      	mvns	r2, r2
 800e942:	4011      	ands	r1, r2
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	3214      	adds	r2, #20
 800e948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 800e94c:	4b30      	ldr	r3, [pc, #192]	@ (800ea10 <xTaskGenericNotifyWait+0x128>)
 800e94e:	681a      	ldr	r2, [r3, #0]
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	4413      	add	r3, r2
 800e954:	3354      	adds	r3, #84	@ 0x54
 800e956:	2201      	movs	r2, #1
 800e958:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 800e95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d001      	beq.n	800e964 <xTaskGenericNotifyWait+0x7c>
                    {
                        xShouldBlock = pdTRUE;
 800e960:	2301      	movs	r3, #1
 800e962:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800e964:	f000 fe60 	bl	800f628 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d103      	bne.n	800e976 <xTaskGenericNotifyWait+0x8e>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e96e:	2101      	movs	r1, #1
 800e970:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e972:	f000 f985 	bl	800ec80 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800e976:	f7ff f813 	bl	800d9a0 <xTaskResumeAll>
 800e97a:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 800e97c:	69bb      	ldr	r3, [r7, #24]
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d10a      	bne.n	800e998 <xTaskGenericNotifyWait+0xb0>
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d107      	bne.n	800e998 <xTaskGenericNotifyWait+0xb0>
        {
            taskYIELD_WITHIN_API();
 800e988:	4b22      	ldr	r3, [pc, #136]	@ (800ea14 <xTaskGenericNotifyWait+0x12c>)
 800e98a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e98e:	601a      	str	r2, [r3, #0]
 800e990:	f3bf 8f4f 	dsb	sy
 800e994:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800e998:	f000 fe14 	bl	800f5c4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d007      	beq.n	800e9b2 <xTaskGenericNotifyWait+0xca>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800e9a2:	4b1b      	ldr	r3, [pc, #108]	@ (800ea10 <xTaskGenericNotifyWait+0x128>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	3214      	adds	r2, #20
 800e9aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800e9b2:	4b17      	ldr	r3, [pc, #92]	@ (800ea10 <xTaskGenericNotifyWait+0x128>)
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	3354      	adds	r3, #84	@ 0x54
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	2b02      	cmp	r3, #2
 800e9c2:	d002      	beq.n	800e9ca <xTaskGenericNotifyWait+0xe2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	61fb      	str	r3, [r7, #28]
 800e9c8:	e00e      	b.n	800e9e8 <xTaskGenericNotifyWait+0x100>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 800e9ca:	4b11      	ldr	r3, [pc, #68]	@ (800ea10 <xTaskGenericNotifyWait+0x128>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	68fa      	ldr	r2, [r7, #12]
 800e9d0:	3214      	adds	r2, #20
 800e9d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	43d2      	mvns	r2, r2
 800e9da:	4011      	ands	r1, r2
 800e9dc:	68fa      	ldr	r2, [r7, #12]
 800e9de:	3214      	adds	r2, #20
 800e9e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 800e9e8:	4b09      	ldr	r3, [pc, #36]	@ (800ea10 <xTaskGenericNotifyWait+0x128>)
 800e9ea:	681a      	ldr	r2, [r3, #0]
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	4413      	add	r3, r2
 800e9f0:	3354      	adds	r3, #84	@ 0x54
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800e9f6:	f000 fe17 	bl	800f628 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ea02:	f002 faeb 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800ea06:	69fb      	ldr	r3, [r7, #28]
    }
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3720      	adds	r7, #32
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}
 800ea10:	20002840 	.word	0x20002840
 800ea14:	e000ed04 	.word	0xe000ed04

0800ea18 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b08e      	sub	sp, #56	@ 0x38
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	607a      	str	r2, [r7, #4]
 800ea24:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800ea26:	2301      	movs	r3, #1
 800ea28:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d00b      	beq.n	800ea48 <xTaskGenericNotify+0x30>
    __asm volatile
 800ea30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea34:	f383 8811 	msr	BASEPRI, r3
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	f3bf 8f4f 	dsb	sy
 800ea40:	623b      	str	r3, [r7, #32]
}
 800ea42:	bf00      	nop
 800ea44:	bf00      	nop
 800ea46:	e7fd      	b.n	800ea44 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d10b      	bne.n	800ea66 <xTaskGenericNotify+0x4e>
    __asm volatile
 800ea4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea52:	f383 8811 	msr	BASEPRI, r3
 800ea56:	f3bf 8f6f 	isb	sy
 800ea5a:	f3bf 8f4f 	dsb	sy
 800ea5e:	61fb      	str	r3, [r7, #28]
}
 800ea60:	bf00      	nop
 800ea62:	bf00      	nop
 800ea64:	e7fd      	b.n	800ea62 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 800ea6a:	f000 fdab 	bl	800f5c4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800ea6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d006      	beq.n	800ea82 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800ea74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea76:	68ba      	ldr	r2, [r7, #8]
 800ea78:	3214      	adds	r2, #20
 800ea7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ea7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ea80:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800ea82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	4413      	add	r3, r2
 800ea88:	3354      	adds	r3, #84	@ 0x54
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800ea90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	4413      	add	r3, r2
 800ea96:	3354      	adds	r3, #84	@ 0x54
 800ea98:	2202      	movs	r2, #2
 800ea9a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800ea9c:	78fb      	ldrb	r3, [r7, #3]
 800ea9e:	2b04      	cmp	r3, #4
 800eaa0:	d83b      	bhi.n	800eb1a <xTaskGenericNotify+0x102>
 800eaa2:	a201      	add	r2, pc, #4	@ (adr r2, 800eaa8 <xTaskGenericNotify+0x90>)
 800eaa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa8:	0800eb3b 	.word	0x0800eb3b
 800eaac:	0800eabd 	.word	0x0800eabd
 800eab0:	0800ead9 	.word	0x0800ead9
 800eab4:	0800eaf1 	.word	0x0800eaf1
 800eab8:	0800eaff 	.word	0x0800eaff
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800eabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eabe:	68ba      	ldr	r2, [r7, #8]
 800eac0:	3214      	adds	r2, #20
 800eac2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	ea42 0103 	orr.w	r1, r2, r3
 800eacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eace:	68ba      	ldr	r2, [r7, #8]
 800ead0:	3214      	adds	r2, #20
 800ead2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ead6:	e033      	b.n	800eb40 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800ead8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	3214      	adds	r2, #20
 800eade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eae2:	1c59      	adds	r1, r3, #1
 800eae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae6:	68ba      	ldr	r2, [r7, #8]
 800eae8:	3214      	adds	r2, #20
 800eaea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800eaee:	e027      	b.n	800eb40 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800eaf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaf2:	68ba      	ldr	r2, [r7, #8]
 800eaf4:	3214      	adds	r2, #20
 800eaf6:	6879      	ldr	r1, [r7, #4]
 800eaf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800eafc:	e020      	b.n	800eb40 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800eafe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb02:	2b02      	cmp	r3, #2
 800eb04:	d006      	beq.n	800eb14 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800eb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	3214      	adds	r2, #20
 800eb0c:	6879      	ldr	r1, [r7, #4]
 800eb0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800eb12:	e015      	b.n	800eb40 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 800eb14:	2300      	movs	r3, #0
 800eb16:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800eb18:	e012      	b.n	800eb40 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800eb1a:	4b54      	ldr	r3, [pc, #336]	@ (800ec6c <xTaskGenericNotify+0x254>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00d      	beq.n	800eb3e <xTaskGenericNotify+0x126>
    __asm volatile
 800eb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb26:	f383 8811 	msr	BASEPRI, r3
 800eb2a:	f3bf 8f6f 	isb	sy
 800eb2e:	f3bf 8f4f 	dsb	sy
 800eb32:	61bb      	str	r3, [r7, #24]
}
 800eb34:	bf00      	nop
 800eb36:	bf00      	nop
 800eb38:	e7fd      	b.n	800eb36 <xTaskGenericNotify+0x11e>
                    break;
 800eb3a:	bf00      	nop
 800eb3c:	e000      	b.n	800eb40 <xTaskGenericNotify+0x128>

                    break;
 800eb3e:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800eb40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	f040 8083 	bne.w	800ec50 <xTaskGenericNotify+0x238>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb4c:	695b      	ldr	r3, [r3, #20]
 800eb4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb56:	68d2      	ldr	r2, [r2, #12]
 800eb58:	609a      	str	r2, [r3, #8]
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb60:	6892      	ldr	r2, [r2, #8]
 800eb62:	605a      	str	r2, [r3, #4]
 800eb64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb66:	685a      	ldr	r2, [r3, #4]
 800eb68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb6a:	3304      	adds	r3, #4
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d103      	bne.n	800eb78 <xTaskGenericNotify+0x160>
 800eb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb72:	68da      	ldr	r2, [r3, #12]
 800eb74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb76:	605a      	str	r2, [r3, #4]
 800eb78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	615a      	str	r2, [r3, #20]
 800eb7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	1e5a      	subs	r2, r3, #1
 800eb84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb86:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800eb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f002 fb1e 	bl	80111cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800eb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb94:	2201      	movs	r2, #1
 800eb96:	409a      	lsls	r2, r3
 800eb98:	4b35      	ldr	r3, [pc, #212]	@ (800ec70 <xTaskGenericNotify+0x258>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	4a34      	ldr	r2, [pc, #208]	@ (800ec70 <xTaskGenericNotify+0x258>)
 800eba0:	6013      	str	r3, [r2, #0]
 800eba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eba6:	4933      	ldr	r1, [pc, #204]	@ (800ec74 <xTaskGenericNotify+0x25c>)
 800eba8:	4613      	mov	r3, r2
 800ebaa:	009b      	lsls	r3, r3, #2
 800ebac:	4413      	add	r3, r2
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	440b      	add	r3, r1
 800ebb2:	3304      	adds	r3, #4
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebbc:	609a      	str	r2, [r3, #8]
 800ebbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc0:	689a      	ldr	r2, [r3, #8]
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebc4:	60da      	str	r2, [r3, #12]
 800ebc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc8:	689b      	ldr	r3, [r3, #8]
 800ebca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebcc:	3204      	adds	r2, #4
 800ebce:	605a      	str	r2, [r3, #4]
 800ebd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebd2:	1d1a      	adds	r2, r3, #4
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd6:	609a      	str	r2, [r3, #8]
 800ebd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebdc:	4613      	mov	r3, r2
 800ebde:	009b      	lsls	r3, r3, #2
 800ebe0:	4413      	add	r3, r2
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	4a23      	ldr	r2, [pc, #140]	@ (800ec74 <xTaskGenericNotify+0x25c>)
 800ebe6:	441a      	add	r2, r3
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebea:	615a      	str	r2, [r3, #20]
 800ebec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebf0:	4920      	ldr	r1, [pc, #128]	@ (800ec74 <xTaskGenericNotify+0x25c>)
 800ebf2:	4613      	mov	r3, r2
 800ebf4:	009b      	lsls	r3, r3, #2
 800ebf6:	4413      	add	r3, r2
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	440b      	add	r3, r1
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ec02:	1c59      	adds	r1, r3, #1
 800ec04:	481b      	ldr	r0, [pc, #108]	@ (800ec74 <xTaskGenericNotify+0x25c>)
 800ec06:	4613      	mov	r3, r2
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	4413      	add	r3, r2
 800ec0c:	009b      	lsls	r3, r3, #2
 800ec0e:	4403      	add	r3, r0
 800ec10:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ec12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d00b      	beq.n	800ec32 <xTaskGenericNotify+0x21a>
    __asm volatile
 800ec1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec1e:	f383 8811 	msr	BASEPRI, r3
 800ec22:	f3bf 8f6f 	isb	sy
 800ec26:	f3bf 8f4f 	dsb	sy
 800ec2a:	617b      	str	r3, [r7, #20]
}
 800ec2c:	bf00      	nop
 800ec2e:	bf00      	nop
 800ec30:	e7fd      	b.n	800ec2e <xTaskGenericNotify+0x216>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 800ec32:	4b11      	ldr	r3, [pc, #68]	@ (800ec78 <xTaskGenericNotify+0x260>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d207      	bcs.n	800ec50 <xTaskGenericNotify+0x238>
 800ec40:	4b0e      	ldr	r3, [pc, #56]	@ (800ec7c <xTaskGenericNotify+0x264>)
 800ec42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec46:	601a      	str	r2, [r3, #0]
 800ec48:	f3bf 8f4f 	dsb	sy
 800ec4c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800ec50:	f000 fcea 	bl	800f628 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );
 800ec54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec56:	4619      	mov	r1, r3
 800ec58:	f240 1001 	movw	r0, #257	@ 0x101
 800ec5c:	f002 f9be 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800ec60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800ec62:	4618      	mov	r0, r3
 800ec64:	3738      	adds	r7, #56	@ 0x38
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	2000291c 	.word	0x2000291c
 800ec70:	20002920 	.word	0x20002920
 800ec74:	20002844 	.word	0x20002844
 800ec78:	20002840 	.word	0x20002840
 800ec7c:	e000ed04 	.word	0xe000ed04

0800ec80 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b088      	sub	sp, #32
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800ec8a:	4b3d      	ldr	r3, [pc, #244]	@ (800ed80 <prvAddCurrentTaskToDelayedList+0x100>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800ec90:	4b3c      	ldr	r3, [pc, #240]	@ (800ed84 <prvAddCurrentTaskToDelayedList+0x104>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800ec96:	4b3c      	ldr	r3, [pc, #240]	@ (800ed88 <prvAddCurrentTaskToDelayedList+0x108>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec9c:	4b3b      	ldr	r3, [pc, #236]	@ (800ed8c <prvAddCurrentTaskToDelayedList+0x10c>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	3304      	adds	r3, #4
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fd fc72 	bl	800c58c <uxListRemove>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d10b      	bne.n	800ecc6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800ecae:	4b37      	ldr	r3, [pc, #220]	@ (800ed8c <prvAddCurrentTaskToDelayedList+0x10c>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	fa02 f303 	lsl.w	r3, r2, r3
 800ecba:	43da      	mvns	r2, r3
 800ecbc:	4b34      	ldr	r3, [pc, #208]	@ (800ed90 <prvAddCurrentTaskToDelayedList+0x110>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4013      	ands	r3, r2
 800ecc2:	4a33      	ldr	r2, [pc, #204]	@ (800ed90 <prvAddCurrentTaskToDelayedList+0x110>)
 800ecc4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eccc:	d124      	bne.n	800ed18 <prvAddCurrentTaskToDelayedList+0x98>
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d021      	beq.n	800ed18 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ecd4:	4b2f      	ldr	r3, [pc, #188]	@ (800ed94 <prvAddCurrentTaskToDelayedList+0x114>)
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	613b      	str	r3, [r7, #16]
 800ecda:	4b2c      	ldr	r3, [pc, #176]	@ (800ed8c <prvAddCurrentTaskToDelayedList+0x10c>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	693a      	ldr	r2, [r7, #16]
 800ece0:	609a      	str	r2, [r3, #8]
 800ece2:	4b2a      	ldr	r3, [pc, #168]	@ (800ed8c <prvAddCurrentTaskToDelayedList+0x10c>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	693a      	ldr	r2, [r7, #16]
 800ece8:	6892      	ldr	r2, [r2, #8]
 800ecea:	60da      	str	r2, [r3, #12]
 800ecec:	4b27      	ldr	r3, [pc, #156]	@ (800ed8c <prvAddCurrentTaskToDelayedList+0x10c>)
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	3204      	adds	r2, #4
 800ecf6:	605a      	str	r2, [r3, #4]
 800ecf8:	4b24      	ldr	r3, [pc, #144]	@ (800ed8c <prvAddCurrentTaskToDelayedList+0x10c>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	1d1a      	adds	r2, r3, #4
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	609a      	str	r2, [r3, #8]
 800ed02:	4b22      	ldr	r3, [pc, #136]	@ (800ed8c <prvAddCurrentTaskToDelayedList+0x10c>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4a23      	ldr	r2, [pc, #140]	@ (800ed94 <prvAddCurrentTaskToDelayedList+0x114>)
 800ed08:	615a      	str	r2, [r3, #20]
 800ed0a:	4b22      	ldr	r3, [pc, #136]	@ (800ed94 <prvAddCurrentTaskToDelayedList+0x114>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	3301      	adds	r3, #1
 800ed10:	4a20      	ldr	r2, [pc, #128]	@ (800ed94 <prvAddCurrentTaskToDelayedList+0x114>)
 800ed12:	6013      	str	r3, [r2, #0]
 800ed14:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800ed16:	e02e      	b.n	800ed76 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800ed18:	69fa      	ldr	r2, [r7, #28]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ed20:	4b1a      	ldr	r3, [pc, #104]	@ (800ed8c <prvAddCurrentTaskToDelayedList+0x10c>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	68fa      	ldr	r2, [r7, #12]
 800ed26:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	69fb      	ldr	r3, [r7, #28]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d20d      	bcs.n	800ed4c <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800ed30:	4b16      	ldr	r3, [pc, #88]	@ (800ed8c <prvAddCurrentTaskToDelayedList+0x10c>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	2104      	movs	r1, #4
 800ed36:	4618      	mov	r0, r3
 800ed38:	f002 fa8a 	bl	8011250 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800ed3c:	4b13      	ldr	r3, [pc, #76]	@ (800ed8c <prvAddCurrentTaskToDelayedList+0x10c>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	3304      	adds	r3, #4
 800ed42:	4619      	mov	r1, r3
 800ed44:	6978      	ldr	r0, [r7, #20]
 800ed46:	f7fd fbe6 	bl	800c516 <vListInsert>
}
 800ed4a:	e014      	b.n	800ed76 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 800ed4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ed8c <prvAddCurrentTaskToDelayedList+0x10c>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2104      	movs	r1, #4
 800ed52:	4618      	mov	r0, r3
 800ed54:	f002 fa7c 	bl	8011250 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800ed58:	4b0c      	ldr	r3, [pc, #48]	@ (800ed8c <prvAddCurrentTaskToDelayedList+0x10c>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	3304      	adds	r3, #4
 800ed5e:	4619      	mov	r1, r3
 800ed60:	69b8      	ldr	r0, [r7, #24]
 800ed62:	f7fd fbd8 	bl	800c516 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800ed66:	4b0c      	ldr	r3, [pc, #48]	@ (800ed98 <prvAddCurrentTaskToDelayedList+0x118>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	68fa      	ldr	r2, [r7, #12]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d202      	bcs.n	800ed76 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 800ed70:	4a09      	ldr	r2, [pc, #36]	@ (800ed98 <prvAddCurrentTaskToDelayedList+0x118>)
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	6013      	str	r3, [r2, #0]
}
 800ed76:	bf00      	nop
 800ed78:	3720      	adds	r7, #32
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	2000291c 	.word	0x2000291c
 800ed84:	200028d0 	.word	0x200028d0
 800ed88:	200028d4 	.word	0x200028d4
 800ed8c:	20002840 	.word	0x20002840
 800ed90:	20002920 	.word	0x20002920
 800ed94:	20002904 	.word	0x20002904
 800ed98:	20002938 	.word	0x20002938

0800ed9c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800eda2:	2300      	movs	r3, #0
 800eda4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800eda6:	f000 fa5b 	bl	800f260 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800edaa:	4b15      	ldr	r3, [pc, #84]	@ (800ee00 <xTimerCreateTimerTask+0x64>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00b      	beq.n	800edca <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800edb2:	4b14      	ldr	r3, [pc, #80]	@ (800ee04 <xTimerCreateTimerTask+0x68>)
 800edb4:	9301      	str	r3, [sp, #4]
 800edb6:	2302      	movs	r3, #2
 800edb8:	9300      	str	r3, [sp, #0]
 800edba:	2300      	movs	r3, #0
 800edbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800edc0:	4911      	ldr	r1, [pc, #68]	@ (800ee08 <xTimerCreateTimerTask+0x6c>)
 800edc2:	4812      	ldr	r0, [pc, #72]	@ (800ee0c <xTimerCreateTimerTask+0x70>)
 800edc4:	f7fe fa17 	bl	800d1f6 <xTaskCreate>
 800edc8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d10b      	bne.n	800ede8 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 800edd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edd4:	f383 8811 	msr	BASEPRI, r3
 800edd8:	f3bf 8f6f 	isb	sy
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	603b      	str	r3, [r7, #0]
}
 800ede2:	bf00      	nop
 800ede4:	bf00      	nop
 800ede6:	e7fd      	b.n	800ede4 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4619      	mov	r1, r3
 800edec:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800edf0:	f002 f8f4 	bl	8010fdc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800edf4:	687b      	ldr	r3, [r7, #4]
    }
 800edf6:	4618      	mov	r0, r3
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	20002974 	.word	0x20002974
 800ee04:	20002978 	.word	0x20002978
 800ee08:	08014814 	.word	0x08014814
 800ee0c:	0800eeb5 	.word	0x0800eeb5

0800ee10 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	60f8      	str	r0, [r7, #12]
 800ee18:	60b9      	str	r1, [r7, #8]
 800ee1a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800ee1c:	e008      	b.n	800ee30 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	699b      	ldr	r3, [r3, #24]
 800ee22:	68ba      	ldr	r2, [r7, #8]
 800ee24:	4413      	add	r3, r2
 800ee26:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6a1b      	ldr	r3, [r3, #32]
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	699a      	ldr	r2, [r3, #24]
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	18d1      	adds	r1, r2, r3
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	68f8      	ldr	r0, [r7, #12]
 800ee3e:	f000 f8df 	bl	800f000 <prvInsertTimerInActiveList>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d1ea      	bne.n	800ee1e <prvReloadTimer+0xe>
        }
    }
 800ee48:	bf00      	nop
 800ee4a:	bf00      	nop
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
	...

0800ee54 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee5e:	4b14      	ldr	r3, [pc, #80]	@ (800eeb0 <prvProcessExpiredTimer+0x5c>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	68db      	ldr	r3, [r3, #12]
 800ee66:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	3304      	adds	r3, #4
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fd fb8d 	bl	800c58c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee78:	f003 0304 	and.w	r3, r3, #4
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d005      	beq.n	800ee8c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800ee80:	683a      	ldr	r2, [r7, #0]
 800ee82:	6879      	ldr	r1, [r7, #4]
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f7ff ffc3 	bl	800ee10 <prvReloadTimer>
 800ee8a:	e008      	b.n	800ee9e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee92:	f023 0301 	bic.w	r3, r3, #1
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	4798      	blx	r3
    }
 800eea6:	bf00      	nop
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	2000296c 	.word	0x2000296c

0800eeb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eebc:	f107 0308 	add.w	r3, r7, #8
 800eec0:	4618      	mov	r0, r3
 800eec2:	f000 f859 	bl	800ef78 <prvGetNextExpireTime>
 800eec6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	4619      	mov	r1, r3
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	f000 f805 	bl	800eedc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800eed2:	f000 f8d7 	bl	800f084 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eed6:	bf00      	nop
 800eed8:	e7f0      	b.n	800eebc <prvTimerTask+0x8>
	...

0800eedc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800eedc:	b580      	push	{r7, lr}
 800eede:	b084      	sub	sp, #16
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800eee6:	f7fe fd4d 	bl	800d984 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eeea:	f107 0308 	add.w	r3, r7, #8
 800eeee:	4618      	mov	r0, r3
 800eef0:	f000 f866 	bl	800efc0 <prvSampleTimeNow>
 800eef4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d130      	bne.n	800ef5e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d10a      	bne.n	800ef18 <prvProcessTimerOrBlockTask+0x3c>
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d806      	bhi.n	800ef18 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800ef0a:	f7fe fd49 	bl	800d9a0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ef0e:	68f9      	ldr	r1, [r7, #12]
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f7ff ff9f 	bl	800ee54 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800ef16:	e024      	b.n	800ef62 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d008      	beq.n	800ef30 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ef1e:	4b13      	ldr	r3, [pc, #76]	@ (800ef6c <prvProcessTimerOrBlockTask+0x90>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d101      	bne.n	800ef2c <prvProcessTimerOrBlockTask+0x50>
 800ef28:	2301      	movs	r3, #1
 800ef2a:	e000      	b.n	800ef2e <prvProcessTimerOrBlockTask+0x52>
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ef30:	4b0f      	ldr	r3, [pc, #60]	@ (800ef70 <prvProcessTimerOrBlockTask+0x94>)
 800ef32:	6818      	ldr	r0, [r3, #0]
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	1ad3      	subs	r3, r2, r3
 800ef3a:	683a      	ldr	r2, [r7, #0]
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	f7fe f8e7 	bl	800d110 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800ef42:	f7fe fd2d 	bl	800d9a0 <xTaskResumeAll>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d10a      	bne.n	800ef62 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800ef4c:	4b09      	ldr	r3, [pc, #36]	@ (800ef74 <prvProcessTimerOrBlockTask+0x98>)
 800ef4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef52:	601a      	str	r2, [r3, #0]
 800ef54:	f3bf 8f4f 	dsb	sy
 800ef58:	f3bf 8f6f 	isb	sy
    }
 800ef5c:	e001      	b.n	800ef62 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800ef5e:	f7fe fd1f 	bl	800d9a0 <xTaskResumeAll>
    }
 800ef62:	bf00      	nop
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	20002970 	.word	0x20002970
 800ef70:	20002974 	.word	0x20002974
 800ef74:	e000ed04 	.word	0xe000ed04

0800ef78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800ef78:	b480      	push	{r7}
 800ef7a:	b085      	sub	sp, #20
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef80:	4b0e      	ldr	r3, [pc, #56]	@ (800efbc <prvGetNextExpireTime+0x44>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d101      	bne.n	800ef8e <prvGetNextExpireTime+0x16>
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	e000      	b.n	800ef90 <prvGetNextExpireTime+0x18>
 800ef8e:	2200      	movs	r2, #0
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d105      	bne.n	800efa8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef9c:	4b07      	ldr	r3, [pc, #28]	@ (800efbc <prvGetNextExpireTime+0x44>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	60fb      	str	r3, [r7, #12]
 800efa6:	e001      	b.n	800efac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800efa8:	2300      	movs	r3, #0
 800efaa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800efac:	68fb      	ldr	r3, [r7, #12]
    }
 800efae:	4618      	mov	r0, r3
 800efb0:	3714      	adds	r7, #20
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr
 800efba:	bf00      	nop
 800efbc:	2000296c 	.word	0x2000296c

0800efc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800efc8:	f7fe fdfc 	bl	800dbc4 <xTaskGetTickCount>
 800efcc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800efce:	4b0b      	ldr	r3, [pc, #44]	@ (800effc <prvSampleTimeNow+0x3c>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	68fa      	ldr	r2, [r7, #12]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d205      	bcs.n	800efe4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800efd8:	f000 f91c 	bl	800f214 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2201      	movs	r2, #1
 800efe0:	601a      	str	r2, [r3, #0]
 800efe2:	e002      	b.n	800efea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2200      	movs	r2, #0
 800efe8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800efea:	4a04      	ldr	r2, [pc, #16]	@ (800effc <prvSampleTimeNow+0x3c>)
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800eff0:	68fb      	ldr	r3, [r7, #12]
    }
 800eff2:	4618      	mov	r0, r3
 800eff4:	3710      	adds	r7, #16
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	2000297c 	.word	0x2000297c

0800f000 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800f000:	b580      	push	{r7, lr}
 800f002:	b086      	sub	sp, #24
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	607a      	str	r2, [r7, #4]
 800f00c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800f00e:	2300      	movs	r3, #0
 800f010:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	68ba      	ldr	r2, [r7, #8]
 800f016:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	68fa      	ldr	r2, [r7, #12]
 800f01c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800f01e:	68ba      	ldr	r2, [r7, #8]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	429a      	cmp	r2, r3
 800f024:	d812      	bhi.n	800f04c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	1ad2      	subs	r2, r2, r3
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	699b      	ldr	r3, [r3, #24]
 800f030:	429a      	cmp	r2, r3
 800f032:	d302      	bcc.n	800f03a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800f034:	2301      	movs	r3, #1
 800f036:	617b      	str	r3, [r7, #20]
 800f038:	e01b      	b.n	800f072 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f03a:	4b10      	ldr	r3, [pc, #64]	@ (800f07c <prvInsertTimerInActiveList+0x7c>)
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	3304      	adds	r3, #4
 800f042:	4619      	mov	r1, r3
 800f044:	4610      	mov	r0, r2
 800f046:	f7fd fa66 	bl	800c516 <vListInsert>
 800f04a:	e012      	b.n	800f072 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	429a      	cmp	r2, r3
 800f052:	d206      	bcs.n	800f062 <prvInsertTimerInActiveList+0x62>
 800f054:	68ba      	ldr	r2, [r7, #8]
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d302      	bcc.n	800f062 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800f05c:	2301      	movs	r3, #1
 800f05e:	617b      	str	r3, [r7, #20]
 800f060:	e007      	b.n	800f072 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f062:	4b07      	ldr	r3, [pc, #28]	@ (800f080 <prvInsertTimerInActiveList+0x80>)
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	3304      	adds	r3, #4
 800f06a:	4619      	mov	r1, r3
 800f06c:	4610      	mov	r0, r2
 800f06e:	f7fd fa52 	bl	800c516 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800f072:	697b      	ldr	r3, [r7, #20]
    }
 800f074:	4618      	mov	r0, r3
 800f076:	3718      	adds	r7, #24
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	20002970 	.word	0x20002970
 800f080:	2000296c 	.word	0x2000296c

0800f084 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800f084:	b580      	push	{r7, lr}
 800f086:	b088      	sub	sp, #32
 800f088:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800f08a:	f107 0308 	add.w	r3, r7, #8
 800f08e:	2200      	movs	r2, #0
 800f090:	601a      	str	r2, [r3, #0]
 800f092:	605a      	str	r2, [r3, #4]
 800f094:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800f096:	e0a9      	b.n	800f1ec <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	f2c0 80a6 	blt.w	800f1ec <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	695b      	ldr	r3, [r3, #20]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d004      	beq.n	800f0b6 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	3304      	adds	r3, #4
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fd fa6b 	bl	800c58c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0b6:	1d3b      	adds	r3, r7, #4
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7ff ff81 	bl	800efc0 <prvSampleTimeNow>
 800f0be:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	3b01      	subs	r3, #1
 800f0c4:	2b08      	cmp	r3, #8
 800f0c6:	f200 808e 	bhi.w	800f1e6 <prvProcessReceivedCommands+0x162>
 800f0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800f0d0 <prvProcessReceivedCommands+0x4c>)
 800f0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d0:	0800f0f5 	.word	0x0800f0f5
 800f0d4:	0800f0f5 	.word	0x0800f0f5
 800f0d8:	0800f15d 	.word	0x0800f15d
 800f0dc:	0800f171 	.word	0x0800f171
 800f0e0:	0800f1bd 	.word	0x0800f1bd
 800f0e4:	0800f0f5 	.word	0x0800f0f5
 800f0e8:	0800f0f5 	.word	0x0800f0f5
 800f0ec:	0800f15d 	.word	0x0800f15d
 800f0f0:	0800f171 	.word	0x0800f171
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0fa:	f043 0301 	orr.w	r3, r3, #1
 800f0fe:	b2da      	uxtb	r2, r3
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f106:	68fa      	ldr	r2, [r7, #12]
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	699b      	ldr	r3, [r3, #24]
 800f10c:	18d1      	adds	r1, r2, r3
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	69ba      	ldr	r2, [r7, #24]
 800f112:	69f8      	ldr	r0, [r7, #28]
 800f114:	f7ff ff74 	bl	800f000 <prvInsertTimerInActiveList>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d065      	beq.n	800f1ea <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f124:	f003 0304 	and.w	r3, r3, #4
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d009      	beq.n	800f140 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800f12c:	68fa      	ldr	r2, [r7, #12]
 800f12e:	69fb      	ldr	r3, [r7, #28]
 800f130:	699b      	ldr	r3, [r3, #24]
 800f132:	4413      	add	r3, r2
 800f134:	69ba      	ldr	r2, [r7, #24]
 800f136:	4619      	mov	r1, r3
 800f138:	69f8      	ldr	r0, [r7, #28]
 800f13a:	f7ff fe69 	bl	800ee10 <prvReloadTimer>
 800f13e:	e008      	b.n	800f152 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f146:	f023 0301 	bic.w	r3, r3, #1
 800f14a:	b2da      	uxtb	r2, r3
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f152:	69fb      	ldr	r3, [r7, #28]
 800f154:	6a1b      	ldr	r3, [r3, #32]
 800f156:	69f8      	ldr	r0, [r7, #28]
 800f158:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800f15a:	e046      	b.n	800f1ea <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f162:	f023 0301 	bic.w	r3, r3, #1
 800f166:	b2da      	uxtb	r2, r3
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800f16e:	e03d      	b.n	800f1ec <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800f170:	69fb      	ldr	r3, [r7, #28]
 800f172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f176:	f043 0301 	orr.w	r3, r3, #1
 800f17a:	b2da      	uxtb	r2, r3
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f182:	68fa      	ldr	r2, [r7, #12]
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	699b      	ldr	r3, [r3, #24]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d10b      	bne.n	800f1a8 <prvProcessReceivedCommands+0x124>
    __asm volatile
 800f190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f194:	f383 8811 	msr	BASEPRI, r3
 800f198:	f3bf 8f6f 	isb	sy
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	617b      	str	r3, [r7, #20]
}
 800f1a2:	bf00      	nop
 800f1a4:	bf00      	nop
 800f1a6:	e7fd      	b.n	800f1a4 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f1a8:	69fb      	ldr	r3, [r7, #28]
 800f1aa:	699a      	ldr	r2, [r3, #24]
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	18d1      	adds	r1, r2, r3
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	69ba      	ldr	r2, [r7, #24]
 800f1b4:	69f8      	ldr	r0, [r7, #28]
 800f1b6:	f7ff ff23 	bl	800f000 <prvInsertTimerInActiveList>
                        break;
 800f1ba:	e017      	b.n	800f1ec <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1c2:	f003 0302 	and.w	r3, r3, #2
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d103      	bne.n	800f1d2 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 800f1ca:	69f8      	ldr	r0, [r7, #28]
 800f1cc:	f000 fc18 	bl	800fa00 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800f1d0:	e00c      	b.n	800f1ec <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800f1d2:	69fb      	ldr	r3, [r7, #28]
 800f1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1d8:	f023 0301 	bic.w	r3, r3, #1
 800f1dc:	b2da      	uxtb	r2, r3
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800f1e4:	e002      	b.n	800f1ec <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 800f1e6:	bf00      	nop
 800f1e8:	e000      	b.n	800f1ec <prvProcessReceivedCommands+0x168>
                        break;
 800f1ea:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800f1ec:	4b08      	ldr	r3, [pc, #32]	@ (800f210 <prvProcessReceivedCommands+0x18c>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f107 0108 	add.w	r1, r7, #8
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7fd fc18 	bl	800ca2c <xQueueReceive>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f47f af4a 	bne.w	800f098 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800f204:	bf00      	nop
 800f206:	bf00      	nop
 800f208:	3720      	adds	r7, #32
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
 800f20e:	bf00      	nop
 800f210:	20002974 	.word	0x20002974

0800f214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f21a:	e009      	b.n	800f230 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f21c:	4b0e      	ldr	r3, [pc, #56]	@ (800f258 <prvSwitchTimerLists+0x44>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800f226:	f04f 31ff 	mov.w	r1, #4294967295
 800f22a:	6838      	ldr	r0, [r7, #0]
 800f22c:	f7ff fe12 	bl	800ee54 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f230:	4b09      	ldr	r3, [pc, #36]	@ (800f258 <prvSwitchTimerLists+0x44>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d1f0      	bne.n	800f21c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800f23a:	4b07      	ldr	r3, [pc, #28]	@ (800f258 <prvSwitchTimerLists+0x44>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800f240:	4b06      	ldr	r3, [pc, #24]	@ (800f25c <prvSwitchTimerLists+0x48>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4a04      	ldr	r2, [pc, #16]	@ (800f258 <prvSwitchTimerLists+0x44>)
 800f246:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800f248:	4a04      	ldr	r2, [pc, #16]	@ (800f25c <prvSwitchTimerLists+0x48>)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6013      	str	r3, [r2, #0]
    }
 800f24e:	bf00      	nop
 800f250:	3708      	adds	r7, #8
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	2000296c 	.word	0x2000296c
 800f25c:	20002970 	.word	0x20002970

0800f260 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800f260:	b580      	push	{r7, lr}
 800f262:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800f264:	f000 f9ae 	bl	800f5c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800f268:	4b12      	ldr	r3, [pc, #72]	@ (800f2b4 <prvCheckForValidListAndQueue+0x54>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d11d      	bne.n	800f2ac <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800f270:	4811      	ldr	r0, [pc, #68]	@ (800f2b8 <prvCheckForValidListAndQueue+0x58>)
 800f272:	f7fd f8f9 	bl	800c468 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800f276:	4811      	ldr	r0, [pc, #68]	@ (800f2bc <prvCheckForValidListAndQueue+0x5c>)
 800f278:	f7fd f8f6 	bl	800c468 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800f27c:	4b10      	ldr	r3, [pc, #64]	@ (800f2c0 <prvCheckForValidListAndQueue+0x60>)
 800f27e:	4a0e      	ldr	r2, [pc, #56]	@ (800f2b8 <prvCheckForValidListAndQueue+0x58>)
 800f280:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800f282:	4b10      	ldr	r3, [pc, #64]	@ (800f2c4 <prvCheckForValidListAndQueue+0x64>)
 800f284:	4a0d      	ldr	r2, [pc, #52]	@ (800f2bc <prvCheckForValidListAndQueue+0x5c>)
 800f286:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 800f288:	2200      	movs	r2, #0
 800f28a:	210c      	movs	r1, #12
 800f28c:	200a      	movs	r0, #10
 800f28e:	f7fd fa43 	bl	800c718 <xQueueGenericCreate>
 800f292:	4603      	mov	r3, r0
 800f294:	4a07      	ldr	r2, [pc, #28]	@ (800f2b4 <prvCheckForValidListAndQueue+0x54>)
 800f296:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800f298:	4b06      	ldr	r3, [pc, #24]	@ (800f2b4 <prvCheckForValidListAndQueue+0x54>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d005      	beq.n	800f2ac <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f2a0:	4b04      	ldr	r3, [pc, #16]	@ (800f2b4 <prvCheckForValidListAndQueue+0x54>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4908      	ldr	r1, [pc, #32]	@ (800f2c8 <prvCheckForValidListAndQueue+0x68>)
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fd fee2 	bl	800d070 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800f2ac:	f000 f9bc 	bl	800f628 <vPortExitCritical>
    }
 800f2b0:	bf00      	nop
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	20002974 	.word	0x20002974
 800f2b8:	20002944 	.word	0x20002944
 800f2bc:	20002958 	.word	0x20002958
 800f2c0:	2000296c 	.word	0x2000296c
 800f2c4:	20002970 	.word	0x20002970
 800f2c8:	0801481c 	.word	0x0801481c

0800f2cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	3b04      	subs	r3, #4
 800f2dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f2e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	3b04      	subs	r3, #4
 800f2ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	f023 0201 	bic.w	r2, r3, #1
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	3b04      	subs	r3, #4
 800f2fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800f2fc:	4a0c      	ldr	r2, [pc, #48]	@ (800f330 <pxPortInitialiseStack+0x64>)
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	3b14      	subs	r3, #20
 800f306:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	3b04      	subs	r3, #4
 800f312:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f06f 0202 	mvn.w	r2, #2
 800f31a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	3b20      	subs	r3, #32
 800f320:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800f322:	68fb      	ldr	r3, [r7, #12]
}
 800f324:	4618      	mov	r0, r3
 800f326:	3714      	adds	r7, #20
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr
 800f330:	0800f335 	.word	0x0800f335

0800f334 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f334:	b480      	push	{r7}
 800f336:	b085      	sub	sp, #20
 800f338:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800f33a:	2300      	movs	r3, #0
 800f33c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800f33e:	4b13      	ldr	r3, [pc, #76]	@ (800f38c <prvTaskExitError+0x58>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f346:	d00b      	beq.n	800f360 <prvTaskExitError+0x2c>
    __asm volatile
 800f348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f34c:	f383 8811 	msr	BASEPRI, r3
 800f350:	f3bf 8f6f 	isb	sy
 800f354:	f3bf 8f4f 	dsb	sy
 800f358:	60fb      	str	r3, [r7, #12]
}
 800f35a:	bf00      	nop
 800f35c:	bf00      	nop
 800f35e:	e7fd      	b.n	800f35c <prvTaskExitError+0x28>
    __asm volatile
 800f360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f364:	f383 8811 	msr	BASEPRI, r3
 800f368:	f3bf 8f6f 	isb	sy
 800f36c:	f3bf 8f4f 	dsb	sy
 800f370:	60bb      	str	r3, [r7, #8]
}
 800f372:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800f374:	bf00      	nop
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d0fc      	beq.n	800f376 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800f37c:	bf00      	nop
 800f37e:	bf00      	nop
 800f380:	3714      	adds	r7, #20
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr
 800f38a:	bf00      	nop
 800f38c:	20000030 	.word	0x20000030

0800f390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800f390:	4b07      	ldr	r3, [pc, #28]	@ (800f3b0 <pxCurrentTCBConst2>)
 800f392:	6819      	ldr	r1, [r3, #0]
 800f394:	6808      	ldr	r0, [r1, #0]
 800f396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39a:	f380 8809 	msr	PSP, r0
 800f39e:	f3bf 8f6f 	isb	sy
 800f3a2:	f04f 0000 	mov.w	r0, #0
 800f3a6:	f380 8811 	msr	BASEPRI, r0
 800f3aa:	4770      	bx	lr
 800f3ac:	f3af 8000 	nop.w

0800f3b0 <pxCurrentTCBConst2>:
 800f3b0:	20002840 	.word	0x20002840
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 800f3b4:	bf00      	nop
 800f3b6:	bf00      	nop

0800f3b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800f3b8:	4808      	ldr	r0, [pc, #32]	@ (800f3dc <prvPortStartFirstTask+0x24>)
 800f3ba:	6800      	ldr	r0, [r0, #0]
 800f3bc:	6800      	ldr	r0, [r0, #0]
 800f3be:	f380 8808 	msr	MSP, r0
 800f3c2:	f04f 0000 	mov.w	r0, #0
 800f3c6:	f380 8814 	msr	CONTROL, r0
 800f3ca:	b662      	cpsie	i
 800f3cc:	b661      	cpsie	f
 800f3ce:	f3bf 8f4f 	dsb	sy
 800f3d2:	f3bf 8f6f 	isb	sy
 800f3d6:	df00      	svc	0
 800f3d8:	bf00      	nop
 800f3da:	0000      	.short	0x0000
 800f3dc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 800f3e0:	bf00      	nop
 800f3e2:	bf00      	nop

0800f3e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b08c      	sub	sp, #48	@ 0x30
 800f3e8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f3ea:	4b69      	ldr	r3, [pc, #420]	@ (800f590 <xPortStartScheduler+0x1ac>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	4a69      	ldr	r2, [pc, #420]	@ (800f594 <xPortStartScheduler+0x1b0>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d10b      	bne.n	800f40c <xPortStartScheduler+0x28>
    __asm volatile
 800f3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3f8:	f383 8811 	msr	BASEPRI, r3
 800f3fc:	f3bf 8f6f 	isb	sy
 800f400:	f3bf 8f4f 	dsb	sy
 800f404:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f406:	bf00      	nop
 800f408:	bf00      	nop
 800f40a:	e7fd      	b.n	800f408 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f40c:	4b60      	ldr	r3, [pc, #384]	@ (800f590 <xPortStartScheduler+0x1ac>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a61      	ldr	r2, [pc, #388]	@ (800f598 <xPortStartScheduler+0x1b4>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d10b      	bne.n	800f42e <xPortStartScheduler+0x4a>
    __asm volatile
 800f416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f41a:	f383 8811 	msr	BASEPRI, r3
 800f41e:	f3bf 8f6f 	isb	sy
 800f422:	f3bf 8f4f 	dsb	sy
 800f426:	623b      	str	r3, [r7, #32]
}
 800f428:	bf00      	nop
 800f42a:	bf00      	nop
 800f42c:	e7fd      	b.n	800f42a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800f42e:	4b5b      	ldr	r3, [pc, #364]	@ (800f59c <xPortStartScheduler+0x1b8>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 800f434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f436:	332c      	adds	r3, #44	@ 0x2c
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	4a59      	ldr	r2, [pc, #356]	@ (800f5a0 <xPortStartScheduler+0x1bc>)
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d00b      	beq.n	800f458 <xPortStartScheduler+0x74>
    __asm volatile
 800f440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f444:	f383 8811 	msr	BASEPRI, r3
 800f448:	f3bf 8f6f 	isb	sy
 800f44c:	f3bf 8f4f 	dsb	sy
 800f450:	61fb      	str	r3, [r7, #28]
}
 800f452:	bf00      	nop
 800f454:	bf00      	nop
 800f456:	e7fd      	b.n	800f454 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800f458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f45a:	3338      	adds	r3, #56	@ 0x38
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	4a51      	ldr	r2, [pc, #324]	@ (800f5a4 <xPortStartScheduler+0x1c0>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d00b      	beq.n	800f47c <xPortStartScheduler+0x98>
    __asm volatile
 800f464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f468:	f383 8811 	msr	BASEPRI, r3
 800f46c:	f3bf 8f6f 	isb	sy
 800f470:	f3bf 8f4f 	dsb	sy
 800f474:	61bb      	str	r3, [r7, #24]
}
 800f476:	bf00      	nop
 800f478:	bf00      	nop
 800f47a:	e7fd      	b.n	800f478 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800f47c:	2300      	movs	r3, #0
 800f47e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f480:	4b49      	ldr	r3, [pc, #292]	@ (800f5a8 <xPortStartScheduler+0x1c4>)
 800f482:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 800f484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	b2db      	uxtb	r3, r3
 800f48a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f48e:	22ff      	movs	r2, #255	@ 0xff
 800f490:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	b2db      	uxtb	r3, r3
 800f498:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f49a:	79fb      	ldrb	r3, [r7, #7]
 800f49c:	b2db      	uxtb	r3, r3
 800f49e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f4a2:	b2da      	uxtb	r2, r3
 800f4a4:	4b41      	ldr	r3, [pc, #260]	@ (800f5ac <xPortStartScheduler+0x1c8>)
 800f4a6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800f4a8:	4b40      	ldr	r3, [pc, #256]	@ (800f5ac <xPortStartScheduler+0x1c8>)
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d10b      	bne.n	800f4c8 <xPortStartScheduler+0xe4>
    __asm volatile
 800f4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4b4:	f383 8811 	msr	BASEPRI, r3
 800f4b8:	f3bf 8f6f 	isb	sy
 800f4bc:	f3bf 8f4f 	dsb	sy
 800f4c0:	617b      	str	r3, [r7, #20]
}
 800f4c2:	bf00      	nop
 800f4c4:	bf00      	nop
 800f4c6:	e7fd      	b.n	800f4c4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800f4c8:	79fb      	ldrb	r3, [r7, #7]
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	43db      	mvns	r3, r3
 800f4ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d013      	beq.n	800f4fe <xPortStartScheduler+0x11a>
    __asm volatile
 800f4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4da:	f383 8811 	msr	BASEPRI, r3
 800f4de:	f3bf 8f6f 	isb	sy
 800f4e2:	f3bf 8f4f 	dsb	sy
 800f4e6:	613b      	str	r3, [r7, #16]
}
 800f4e8:	bf00      	nop
 800f4ea:	bf00      	nop
 800f4ec:	e7fd      	b.n	800f4ea <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f4f4:	79fb      	ldrb	r3, [r7, #7]
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	005b      	lsls	r3, r3, #1
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f4fe:	79fb      	ldrb	r3, [r7, #7]
 800f500:	b2db      	uxtb	r3, r3
 800f502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f506:	2b80      	cmp	r3, #128	@ 0x80
 800f508:	d0f1      	beq.n	800f4ee <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	2b08      	cmp	r3, #8
 800f50e:	d103      	bne.n	800f518 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800f510:	4b27      	ldr	r3, [pc, #156]	@ (800f5b0 <xPortStartScheduler+0x1cc>)
 800f512:	2200      	movs	r2, #0
 800f514:	601a      	str	r2, [r3, #0]
 800f516:	e004      	b.n	800f522 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	f1c3 0307 	rsb	r3, r3, #7
 800f51e:	4a24      	ldr	r2, [pc, #144]	@ (800f5b0 <xPortStartScheduler+0x1cc>)
 800f520:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f522:	4b23      	ldr	r3, [pc, #140]	@ (800f5b0 <xPortStartScheduler+0x1cc>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	021b      	lsls	r3, r3, #8
 800f528:	4a21      	ldr	r2, [pc, #132]	@ (800f5b0 <xPortStartScheduler+0x1cc>)
 800f52a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f52c:	4b20      	ldr	r3, [pc, #128]	@ (800f5b0 <xPortStartScheduler+0x1cc>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f534:	4a1e      	ldr	r2, [pc, #120]	@ (800f5b0 <xPortStartScheduler+0x1cc>)
 800f536:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800f538:	7bfb      	ldrb	r3, [r7, #15]
 800f53a:	b2da      	uxtb	r2, r3
 800f53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f53e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800f540:	4b1c      	ldr	r3, [pc, #112]	@ (800f5b4 <xPortStartScheduler+0x1d0>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a1b      	ldr	r2, [pc, #108]	@ (800f5b4 <xPortStartScheduler+0x1d0>)
 800f546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f54a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800f54c:	4b19      	ldr	r3, [pc, #100]	@ (800f5b4 <xPortStartScheduler+0x1d0>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a18      	ldr	r2, [pc, #96]	@ (800f5b4 <xPortStartScheduler+0x1d0>)
 800f552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f556:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800f558:	4b17      	ldr	r3, [pc, #92]	@ (800f5b8 <xPortStartScheduler+0x1d4>)
 800f55a:	2200      	movs	r2, #0
 800f55c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800f55e:	f000 f8ed 	bl	800f73c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800f562:	4b16      	ldr	r3, [pc, #88]	@ (800f5bc <xPortStartScheduler+0x1d8>)
 800f564:	2200      	movs	r2, #0
 800f566:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800f568:	f000 f90c 	bl	800f784 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f56c:	4b14      	ldr	r3, [pc, #80]	@ (800f5c0 <xPortStartScheduler+0x1dc>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	4a13      	ldr	r2, [pc, #76]	@ (800f5c0 <xPortStartScheduler+0x1dc>)
 800f572:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f576:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800f578:	f7ff ff1e 	bl	800f3b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800f57c:	f7fe fc56 	bl	800de2c <vTaskSwitchContext>
    prvTaskExitError();
 800f580:	f7ff fed8 	bl	800f334 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800f584:	2300      	movs	r3, #0
}
 800f586:	4618      	mov	r0, r3
 800f588:	3730      	adds	r7, #48	@ 0x30
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	e000ed00 	.word	0xe000ed00
 800f594:	410fc271 	.word	0x410fc271
 800f598:	410fc270 	.word	0x410fc270
 800f59c:	e000ed08 	.word	0xe000ed08
 800f5a0:	0800f391 	.word	0x0800f391
 800f5a4:	0800f681 	.word	0x0800f681
 800f5a8:	e000e400 	.word	0xe000e400
 800f5ac:	20002980 	.word	0x20002980
 800f5b0:	20002984 	.word	0x20002984
 800f5b4:	e000ed20 	.word	0xe000ed20
 800f5b8:	e000ed1c 	.word	0xe000ed1c
 800f5bc:	20000030 	.word	0x20000030
 800f5c0:	e000ef34 	.word	0xe000ef34

0800f5c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b083      	sub	sp, #12
 800f5c8:	af00      	add	r7, sp, #0
    __asm volatile
 800f5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ce:	f383 8811 	msr	BASEPRI, r3
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	f3bf 8f4f 	dsb	sy
 800f5da:	607b      	str	r3, [r7, #4]
}
 800f5dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800f5de:	4b10      	ldr	r3, [pc, #64]	@ (800f620 <vPortEnterCritical+0x5c>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	4a0e      	ldr	r2, [pc, #56]	@ (800f620 <vPortEnterCritical+0x5c>)
 800f5e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800f5e8:	4b0d      	ldr	r3, [pc, #52]	@ (800f620 <vPortEnterCritical+0x5c>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d110      	bne.n	800f612 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800f624 <vPortEnterCritical+0x60>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	b2db      	uxtb	r3, r3
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00b      	beq.n	800f612 <vPortEnterCritical+0x4e>
    __asm volatile
 800f5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5fe:	f383 8811 	msr	BASEPRI, r3
 800f602:	f3bf 8f6f 	isb	sy
 800f606:	f3bf 8f4f 	dsb	sy
 800f60a:	603b      	str	r3, [r7, #0]
}
 800f60c:	bf00      	nop
 800f60e:	bf00      	nop
 800f610:	e7fd      	b.n	800f60e <vPortEnterCritical+0x4a>
    }
}
 800f612:	bf00      	nop
 800f614:	370c      	adds	r7, #12
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	20000030 	.word	0x20000030
 800f624:	e000ed04 	.word	0xe000ed04

0800f628 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800f62e:	4b12      	ldr	r3, [pc, #72]	@ (800f678 <vPortExitCritical+0x50>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d10b      	bne.n	800f64e <vPortExitCritical+0x26>
    __asm volatile
 800f636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f63a:	f383 8811 	msr	BASEPRI, r3
 800f63e:	f3bf 8f6f 	isb	sy
 800f642:	f3bf 8f4f 	dsb	sy
 800f646:	607b      	str	r3, [r7, #4]
}
 800f648:	bf00      	nop
 800f64a:	bf00      	nop
 800f64c:	e7fd      	b.n	800f64a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800f64e:	4b0a      	ldr	r3, [pc, #40]	@ (800f678 <vPortExitCritical+0x50>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	3b01      	subs	r3, #1
 800f654:	4a08      	ldr	r2, [pc, #32]	@ (800f678 <vPortExitCritical+0x50>)
 800f656:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800f658:	4b07      	ldr	r3, [pc, #28]	@ (800f678 <vPortExitCritical+0x50>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d105      	bne.n	800f66c <vPortExitCritical+0x44>
 800f660:	2300      	movs	r3, #0
 800f662:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800f66a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800f66c:	bf00      	nop
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr
 800f678:	20000030 	.word	0x20000030
 800f67c:	00000000 	.word	0x00000000

0800f680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800f680:	f3ef 8009 	mrs	r0, PSP
 800f684:	f3bf 8f6f 	isb	sy
 800f688:	4b15      	ldr	r3, [pc, #84]	@ (800f6e0 <pxCurrentTCBConst>)
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	f01e 0f10 	tst.w	lr, #16
 800f690:	bf08      	it	eq
 800f692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f69a:	6010      	str	r0, [r2, #0]
 800f69c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f6a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f6a4:	f380 8811 	msr	BASEPRI, r0
 800f6a8:	f3bf 8f4f 	dsb	sy
 800f6ac:	f3bf 8f6f 	isb	sy
 800f6b0:	f7fe fbbc 	bl	800de2c <vTaskSwitchContext>
 800f6b4:	f04f 0000 	mov.w	r0, #0
 800f6b8:	f380 8811 	msr	BASEPRI, r0
 800f6bc:	bc09      	pop	{r0, r3}
 800f6be:	6819      	ldr	r1, [r3, #0]
 800f6c0:	6808      	ldr	r0, [r1, #0]
 800f6c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c6:	f01e 0f10 	tst.w	lr, #16
 800f6ca:	bf08      	it	eq
 800f6cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f6d0:	f380 8809 	msr	PSP, r0
 800f6d4:	f3bf 8f6f 	isb	sy
 800f6d8:	4770      	bx	lr
 800f6da:	bf00      	nop
 800f6dc:	f3af 8000 	nop.w

0800f6e0 <pxCurrentTCBConst>:
 800f6e0:	20002840 	.word	0x20002840
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800f6e4:	bf00      	nop
 800f6e6:	bf00      	nop

0800f6e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
    __asm volatile
 800f6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f2:	f383 8811 	msr	BASEPRI, r3
 800f6f6:	f3bf 8f6f 	isb	sy
 800f6fa:	f3bf 8f4f 	dsb	sy
 800f6fe:	607b      	str	r3, [r7, #4]
}
 800f700:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 800f702:	f001 fbb5 	bl	8010e70 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800f706:	f7fe fa6f 	bl	800dbe8 <xTaskIncrementTick>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d006      	beq.n	800f71e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 800f710:	f001 fc0c 	bl	8010f2c <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f714:	4b08      	ldr	r3, [pc, #32]	@ (800f738 <SysTick_Handler+0x50>)
 800f716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f71a:	601a      	str	r2, [r3, #0]
 800f71c:	e001      	b.n	800f722 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800f71e:	f001 fbe9 	bl	8010ef4 <SEGGER_SYSVIEW_RecordExitISR>
 800f722:	2300      	movs	r3, #0
 800f724:	603b      	str	r3, [r7, #0]
    __asm volatile
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	f383 8811 	msr	BASEPRI, r3
}
 800f72c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800f72e:	bf00      	nop
 800f730:	3708      	adds	r7, #8
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	e000ed04 	.word	0xe000ed04

0800f73c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800f73c:	b480      	push	{r7}
 800f73e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f740:	4b0b      	ldr	r3, [pc, #44]	@ (800f770 <vPortSetupTimerInterrupt+0x34>)
 800f742:	2200      	movs	r2, #0
 800f744:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f746:	4b0b      	ldr	r3, [pc, #44]	@ (800f774 <vPortSetupTimerInterrupt+0x38>)
 800f748:	2200      	movs	r2, #0
 800f74a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f74c:	4b0a      	ldr	r3, [pc, #40]	@ (800f778 <vPortSetupTimerInterrupt+0x3c>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a0a      	ldr	r2, [pc, #40]	@ (800f77c <vPortSetupTimerInterrupt+0x40>)
 800f752:	fba2 2303 	umull	r2, r3, r2, r3
 800f756:	099b      	lsrs	r3, r3, #6
 800f758:	4a09      	ldr	r2, [pc, #36]	@ (800f780 <vPortSetupTimerInterrupt+0x44>)
 800f75a:	3b01      	subs	r3, #1
 800f75c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f75e:	4b04      	ldr	r3, [pc, #16]	@ (800f770 <vPortSetupTimerInterrupt+0x34>)
 800f760:	2207      	movs	r2, #7
 800f762:	601a      	str	r2, [r3, #0]
}
 800f764:	bf00      	nop
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr
 800f76e:	bf00      	nop
 800f770:	e000e010 	.word	0xe000e010
 800f774:	e000e018 	.word	0xe000e018
 800f778:	20000004 	.word	0x20000004
 800f77c:	10624dd3 	.word	0x10624dd3
 800f780:	e000e014 	.word	0xe000e014

0800f784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800f784:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f794 <vPortEnableVFP+0x10>
 800f788:	6801      	ldr	r1, [r0, #0]
 800f78a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f78e:	6001      	str	r1, [r0, #0]
 800f790:	4770      	bx	lr
 800f792:	0000      	.short	0x0000
 800f794:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800f798:	bf00      	nop
 800f79a:	bf00      	nop

0800f79c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b08e      	sub	sp, #56	@ 0x38
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d022      	beq.n	800f7f4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800f7ae:	2308      	movs	r3, #8
 800f7b0:	43db      	mvns	r3, r3
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d81b      	bhi.n	800f7f0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800f7b8:	2208      	movs	r2, #8
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4413      	add	r3, r2
 800f7be:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f003 0307 	and.w	r3, r3, #7
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d014      	beq.n	800f7f4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f003 0307 	and.w	r3, r3, #7
 800f7d0:	f1c3 0308 	rsb	r3, r3, #8
 800f7d4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800f7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d8:	43db      	mvns	r3, r3
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d804      	bhi.n	800f7ea <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 800f7e0:	687a      	ldr	r2, [r7, #4]
 800f7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7e4:	4413      	add	r3, r2
 800f7e6:	607b      	str	r3, [r7, #4]
 800f7e8:	e004      	b.n	800f7f4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	607b      	str	r3, [r7, #4]
 800f7ee:	e001      	b.n	800f7f4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 800f7f4:	f7fe f8c6 	bl	800d984 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800f7f8:	4b7a      	ldr	r3, [pc, #488]	@ (800f9e4 <pvPortMalloc+0x248>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d101      	bne.n	800f804 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 800f800:	f000 f978 	bl	800faf4 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2b00      	cmp	r3, #0
 800f808:	f2c0 80d3 	blt.w	800f9b2 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	f000 80cf 	beq.w	800f9b2 <pvPortMalloc+0x216>
 800f814:	4b74      	ldr	r3, [pc, #464]	@ (800f9e8 <pvPortMalloc+0x24c>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	f200 80c9 	bhi.w	800f9b2 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800f820:	4b72      	ldr	r3, [pc, #456]	@ (800f9ec <pvPortMalloc+0x250>)
 800f822:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 800f824:	4b71      	ldr	r3, [pc, #452]	@ (800f9ec <pvPortMalloc+0x250>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800f82a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f82c:	4a70      	ldr	r2, [pc, #448]	@ (800f9f0 <pvPortMalloc+0x254>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d305      	bcc.n	800f83e <pvPortMalloc+0xa2>
 800f832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f834:	4a6f      	ldr	r2, [pc, #444]	@ (800f9f4 <pvPortMalloc+0x258>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d801      	bhi.n	800f83e <pvPortMalloc+0xa2>
 800f83a:	2301      	movs	r3, #1
 800f83c:	e000      	b.n	800f840 <pvPortMalloc+0xa4>
 800f83e:	2300      	movs	r3, #0
 800f840:	2b00      	cmp	r3, #0
 800f842:	d129      	bne.n	800f898 <pvPortMalloc+0xfc>
    __asm volatile
 800f844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f848:	f383 8811 	msr	BASEPRI, r3
 800f84c:	f3bf 8f6f 	isb	sy
 800f850:	f3bf 8f4f 	dsb	sy
 800f854:	623b      	str	r3, [r7, #32]
}
 800f856:	bf00      	nop
 800f858:	bf00      	nop
 800f85a:	e7fd      	b.n	800f858 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 800f85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f85e:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 800f860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800f866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f868:	4a61      	ldr	r2, [pc, #388]	@ (800f9f0 <pvPortMalloc+0x254>)
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d305      	bcc.n	800f87a <pvPortMalloc+0xde>
 800f86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f870:	4a60      	ldr	r2, [pc, #384]	@ (800f9f4 <pvPortMalloc+0x258>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d801      	bhi.n	800f87a <pvPortMalloc+0xde>
 800f876:	2301      	movs	r3, #1
 800f878:	e000      	b.n	800f87c <pvPortMalloc+0xe0>
 800f87a:	2300      	movs	r3, #0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d10b      	bne.n	800f898 <pvPortMalloc+0xfc>
    __asm volatile
 800f880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f884:	f383 8811 	msr	BASEPRI, r3
 800f888:	f3bf 8f6f 	isb	sy
 800f88c:	f3bf 8f4f 	dsb	sy
 800f890:	61fb      	str	r3, [r7, #28]
}
 800f892:	bf00      	nop
 800f894:	bf00      	nop
 800f896:	e7fd      	b.n	800f894 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800f898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d903      	bls.n	800f8aa <pvPortMalloc+0x10e>
 800f8a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d1d8      	bne.n	800f85c <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800f8aa:	4b4e      	ldr	r3, [pc, #312]	@ (800f9e4 <pvPortMalloc+0x248>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d07e      	beq.n	800f9b2 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 800f8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2208      	movs	r2, #8
 800f8ba:	4413      	add	r3, r2
 800f8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 800f8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c0:	4a4b      	ldr	r2, [pc, #300]	@ (800f9f0 <pvPortMalloc+0x254>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d305      	bcc.n	800f8d2 <pvPortMalloc+0x136>
 800f8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c8:	4a4a      	ldr	r2, [pc, #296]	@ (800f9f4 <pvPortMalloc+0x258>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d801      	bhi.n	800f8d2 <pvPortMalloc+0x136>
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	e000      	b.n	800f8d4 <pvPortMalloc+0x138>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d10b      	bne.n	800f8f0 <pvPortMalloc+0x154>
    __asm volatile
 800f8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8dc:	f383 8811 	msr	BASEPRI, r3
 800f8e0:	f3bf 8f6f 	isb	sy
 800f8e4:	f3bf 8f4f 	dsb	sy
 800f8e8:	61bb      	str	r3, [r7, #24]
}
 800f8ea:	bf00      	nop
 800f8ec:	bf00      	nop
 800f8ee:	e7fd      	b.n	800f8ec <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f8f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8f6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800f8f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d90b      	bls.n	800f91a <pvPortMalloc+0x17e>
    __asm volatile
 800f902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f906:	f383 8811 	msr	BASEPRI, r3
 800f90a:	f3bf 8f6f 	isb	sy
 800f90e:	f3bf 8f4f 	dsb	sy
 800f912:	617b      	str	r3, [r7, #20]
}
 800f914:	bf00      	nop
 800f916:	bf00      	nop
 800f918:	e7fd      	b.n	800f916 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f91a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f91c:	685a      	ldr	r2, [r3, #4]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	1ad2      	subs	r2, r2, r3
 800f922:	2308      	movs	r3, #8
 800f924:	005b      	lsls	r3, r3, #1
 800f926:	429a      	cmp	r2, r3
 800f928:	d924      	bls.n	800f974 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f92a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4413      	add	r3, r2
 800f930:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f934:	f003 0307 	and.w	r3, r3, #7
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d00b      	beq.n	800f954 <pvPortMalloc+0x1b8>
    __asm volatile
 800f93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f940:	f383 8811 	msr	BASEPRI, r3
 800f944:	f3bf 8f6f 	isb	sy
 800f948:	f3bf 8f4f 	dsb	sy
 800f94c:	613b      	str	r3, [r7, #16]
}
 800f94e:	bf00      	nop
 800f950:	bf00      	nop
 800f952:	e7fd      	b.n	800f950 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f956:	685a      	ldr	r2, [r3, #4]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	1ad2      	subs	r2, r2, r3
 800f95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f95e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800f960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f962:	687a      	ldr	r2, [r7, #4]
 800f964:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800f966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f96c:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 800f96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f972:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f974:	4b1c      	ldr	r3, [pc, #112]	@ (800f9e8 <pvPortMalloc+0x24c>)
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	1ad3      	subs	r3, r2, r3
 800f97e:	4a1a      	ldr	r2, [pc, #104]	@ (800f9e8 <pvPortMalloc+0x24c>)
 800f980:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f982:	4b19      	ldr	r3, [pc, #100]	@ (800f9e8 <pvPortMalloc+0x24c>)
 800f984:	681a      	ldr	r2, [r3, #0]
 800f986:	4b1c      	ldr	r3, [pc, #112]	@ (800f9f8 <pvPortMalloc+0x25c>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d203      	bcs.n	800f996 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f98e:	4b16      	ldr	r3, [pc, #88]	@ (800f9e8 <pvPortMalloc+0x24c>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	4a19      	ldr	r2, [pc, #100]	@ (800f9f8 <pvPortMalloc+0x25c>)
 800f994:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800f996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f99e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9a0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800f9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800f9a8:	4b14      	ldr	r3, [pc, #80]	@ (800f9fc <pvPortMalloc+0x260>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	4a13      	ldr	r2, [pc, #76]	@ (800f9fc <pvPortMalloc+0x260>)
 800f9b0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800f9b2:	f7fd fff5 	bl	800d9a0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9b8:	f003 0307 	and.w	r3, r3, #7
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d00b      	beq.n	800f9d8 <pvPortMalloc+0x23c>
    __asm volatile
 800f9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9c4:	f383 8811 	msr	BASEPRI, r3
 800f9c8:	f3bf 8f6f 	isb	sy
 800f9cc:	f3bf 8f4f 	dsb	sy
 800f9d0:	60fb      	str	r3, [r7, #12]
}
 800f9d2:	bf00      	nop
 800f9d4:	bf00      	nop
 800f9d6:	e7fd      	b.n	800f9d4 <pvPortMalloc+0x238>
    return pvReturn;
 800f9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3738      	adds	r7, #56	@ 0x38
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	20016990 	.word	0x20016990
 800f9e8:	20016994 	.word	0x20016994
 800f9ec:	20016988 	.word	0x20016988
 800f9f0:	20002988 	.word	0x20002988
 800f9f4:	20016987 	.word	0x20016987
 800f9f8:	20016998 	.word	0x20016998
 800f9fc:	2001699c 	.word	0x2001699c

0800fa00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b088      	sub	sp, #32
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d064      	beq.n	800fadc <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800fa12:	2308      	movs	r3, #8
 800fa14:	425b      	negs	r3, r3
 800fa16:	69fa      	ldr	r2, [r7, #28]
 800fa18:	4413      	add	r3, r2
 800fa1a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	4a30      	ldr	r2, [pc, #192]	@ (800fae4 <vPortFree+0xe4>)
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d305      	bcc.n	800fa34 <vPortFree+0x34>
 800fa28:	69bb      	ldr	r3, [r7, #24]
 800fa2a:	4a2f      	ldr	r2, [pc, #188]	@ (800fae8 <vPortFree+0xe8>)
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d801      	bhi.n	800fa34 <vPortFree+0x34>
 800fa30:	2301      	movs	r3, #1
 800fa32:	e000      	b.n	800fa36 <vPortFree+0x36>
 800fa34:	2300      	movs	r3, #0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d10b      	bne.n	800fa52 <vPortFree+0x52>
    __asm volatile
 800fa3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa3e:	f383 8811 	msr	BASEPRI, r3
 800fa42:	f3bf 8f6f 	isb	sy
 800fa46:	f3bf 8f4f 	dsb	sy
 800fa4a:	617b      	str	r3, [r7, #20]
}
 800fa4c:	bf00      	nop
 800fa4e:	bf00      	nop
 800fa50:	e7fd      	b.n	800fa4e <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	db0b      	blt.n	800fa72 <vPortFree+0x72>
    __asm volatile
 800fa5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa5e:	f383 8811 	msr	BASEPRI, r3
 800fa62:	f3bf 8f6f 	isb	sy
 800fa66:	f3bf 8f4f 	dsb	sy
 800fa6a:	613b      	str	r3, [r7, #16]
}
 800fa6c:	bf00      	nop
 800fa6e:	bf00      	nop
 800fa70:	e7fd      	b.n	800fa6e <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fa72:	69bb      	ldr	r3, [r7, #24]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00b      	beq.n	800fa92 <vPortFree+0x92>
    __asm volatile
 800fa7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa7e:	f383 8811 	msr	BASEPRI, r3
 800fa82:	f3bf 8f6f 	isb	sy
 800fa86:	f3bf 8f4f 	dsb	sy
 800fa8a:	60fb      	str	r3, [r7, #12]
}
 800fa8c:	bf00      	nop
 800fa8e:	bf00      	nop
 800fa90:	e7fd      	b.n	800fa8e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800fa92:	69bb      	ldr	r3, [r7, #24]
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	0fdb      	lsrs	r3, r3, #31
 800fa98:	f003 0301 	and.w	r3, r3, #1
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d01c      	beq.n	800fadc <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800faa2:	69bb      	ldr	r3, [r7, #24]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d118      	bne.n	800fadc <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fab2:	69bb      	ldr	r3, [r7, #24]
 800fab4:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800fab6:	f7fd ff65 	bl	800d984 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	685a      	ldr	r2, [r3, #4]
 800fabe:	4b0b      	ldr	r3, [pc, #44]	@ (800faec <vPortFree+0xec>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	4413      	add	r3, r2
 800fac4:	4a09      	ldr	r2, [pc, #36]	@ (800faec <vPortFree+0xec>)
 800fac6:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fac8:	69b8      	ldr	r0, [r7, #24]
 800faca:	f000 f86d 	bl	800fba8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800face:	4b08      	ldr	r3, [pc, #32]	@ (800faf0 <vPortFree+0xf0>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	3301      	adds	r3, #1
 800fad4:	4a06      	ldr	r2, [pc, #24]	@ (800faf0 <vPortFree+0xf0>)
 800fad6:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800fad8:	f7fd ff62 	bl	800d9a0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800fadc:	bf00      	nop
 800fade:	3720      	adds	r7, #32
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	20002988 	.word	0x20002988
 800fae8:	20016987 	.word	0x20016987
 800faec:	20016994 	.word	0x20016994
 800faf0:	200169a0 	.word	0x200169a0

0800faf4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800faf4:	b480      	push	{r7}
 800faf6:	b085      	sub	sp, #20
 800faf8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fafa:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
 800fafe:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800fb00:	4b24      	ldr	r3, [pc, #144]	@ (800fb94 <prvHeapInit+0xa0>)
 800fb02:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f003 0307 	and.w	r3, r3, #7
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d00c      	beq.n	800fb28 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	3307      	adds	r3, #7
 800fb12:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f023 0307 	bic.w	r3, r3, #7
 800fb1a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800fb1c:	68ba      	ldr	r2, [r7, #8]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	4a1c      	ldr	r2, [pc, #112]	@ (800fb94 <prvHeapInit+0xa0>)
 800fb24:	4413      	add	r3, r2
 800fb26:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	4a1b      	ldr	r2, [pc, #108]	@ (800fb98 <prvHeapInit+0xa4>)
 800fb2c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800fb2e:	4b1a      	ldr	r3, [pc, #104]	@ (800fb98 <prvHeapInit+0xa4>)
 800fb30:	2200      	movs	r2, #0
 800fb32:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 800fb34:	68fa      	ldr	r2, [r7, #12]
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	4413      	add	r3, r2
 800fb3a:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 800fb3c:	2208      	movs	r2, #8
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	1a9b      	subs	r3, r3, r2
 800fb42:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f023 0307 	bic.w	r3, r3, #7
 800fb4a:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4a13      	ldr	r2, [pc, #76]	@ (800fb9c <prvHeapInit+0xa8>)
 800fb50:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800fb52:	4b12      	ldr	r3, [pc, #72]	@ (800fb9c <prvHeapInit+0xa8>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2200      	movs	r2, #0
 800fb58:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800fb5a:	4b10      	ldr	r3, [pc, #64]	@ (800fb9c <prvHeapInit+0xa8>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	1ad2      	subs	r2, r2, r3
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800fb70:	4b0a      	ldr	r3, [pc, #40]	@ (800fb9c <prvHeapInit+0xa8>)
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	4a08      	ldr	r2, [pc, #32]	@ (800fba0 <prvHeapInit+0xac>)
 800fb7e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	4a07      	ldr	r2, [pc, #28]	@ (800fba4 <prvHeapInit+0xb0>)
 800fb86:	6013      	str	r3, [r2, #0]
}
 800fb88:	bf00      	nop
 800fb8a:	3714      	adds	r7, #20
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr
 800fb94:	20002988 	.word	0x20002988
 800fb98:	20016988 	.word	0x20016988
 800fb9c:	20016990 	.word	0x20016990
 800fba0:	20016998 	.word	0x20016998
 800fba4:	20016994 	.word	0x20016994

0800fba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b087      	sub	sp, #28
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800fbb0:	4b36      	ldr	r3, [pc, #216]	@ (800fc8c <prvInsertBlockIntoFreeList+0xe4>)
 800fbb2:	617b      	str	r3, [r7, #20]
 800fbb4:	e002      	b.n	800fbbc <prvInsertBlockIntoFreeList+0x14>
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	617b      	str	r3, [r7, #20]
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d8f7      	bhi.n	800fbb6 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	4a30      	ldr	r2, [pc, #192]	@ (800fc8c <prvInsertBlockIntoFreeList+0xe4>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d018      	beq.n	800fc00 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	4a2f      	ldr	r2, [pc, #188]	@ (800fc90 <prvInsertBlockIntoFreeList+0xe8>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d305      	bcc.n	800fbe2 <prvInsertBlockIntoFreeList+0x3a>
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	4a2e      	ldr	r2, [pc, #184]	@ (800fc94 <prvInsertBlockIntoFreeList+0xec>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d801      	bhi.n	800fbe2 <prvInsertBlockIntoFreeList+0x3a>
 800fbde:	2301      	movs	r3, #1
 800fbe0:	e000      	b.n	800fbe4 <prvInsertBlockIntoFreeList+0x3c>
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d10b      	bne.n	800fc00 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800fbe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbec:	f383 8811 	msr	BASEPRI, r3
 800fbf0:	f3bf 8f6f 	isb	sy
 800fbf4:	f3bf 8f4f 	dsb	sy
 800fbf8:	60fb      	str	r3, [r7, #12]
}
 800fbfa:	bf00      	nop
 800fbfc:	bf00      	nop
 800fbfe:	e7fd      	b.n	800fbfc <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	693a      	ldr	r2, [r7, #16]
 800fc0a:	4413      	add	r3, r2
 800fc0c:	687a      	ldr	r2, [r7, #4]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d108      	bne.n	800fc24 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	685a      	ldr	r2, [r3, #4]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	441a      	add	r2, r3
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	693a      	ldr	r2, [r7, #16]
 800fc2e:	441a      	add	r2, r3
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d118      	bne.n	800fc6a <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	4b16      	ldr	r3, [pc, #88]	@ (800fc98 <prvInsertBlockIntoFreeList+0xf0>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	429a      	cmp	r2, r3
 800fc42:	d00d      	beq.n	800fc60 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	685a      	ldr	r2, [r3, #4]
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	441a      	add	r2, r3
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	601a      	str	r2, [r3, #0]
 800fc5e:	e008      	b.n	800fc72 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800fc60:	4b0d      	ldr	r3, [pc, #52]	@ (800fc98 <prvInsertBlockIntoFreeList+0xf0>)
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	601a      	str	r2, [r3, #0]
 800fc68:	e003      	b.n	800fc72 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800fc72:	697a      	ldr	r2, [r7, #20]
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d002      	beq.n	800fc80 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800fc80:	bf00      	nop
 800fc82:	371c      	adds	r7, #28
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr
 800fc8c:	20016988 	.word	0x20016988
 800fc90:	20002988 	.word	0x20002988
 800fc94:	20016987 	.word	0x20016987
 800fc98:	20016990 	.word	0x20016990

0800fc9c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b086      	sub	sp, #24
 800fca0:	af02      	add	r7, sp, #8
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]
 800fca8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800fcaa:	2205      	movs	r2, #5
 800fcac:	492b      	ldr	r1, [pc, #172]	@ (800fd5c <SYSVIEW_AddTask+0xc0>)
 800fcae:	68b8      	ldr	r0, [r7, #8]
 800fcb0:	f002 fa2e 	bl	8012110 <memcmp>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d04b      	beq.n	800fd52 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800fcba:	4b29      	ldr	r3, [pc, #164]	@ (800fd60 <SYSVIEW_AddTask+0xc4>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2b07      	cmp	r3, #7
 800fcc0:	d903      	bls.n	800fcca <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800fcc2:	4828      	ldr	r0, [pc, #160]	@ (800fd64 <SYSVIEW_AddTask+0xc8>)
 800fcc4:	f001 fc1a 	bl	80114fc <SEGGER_SYSVIEW_Warn>
    return;
 800fcc8:	e044      	b.n	800fd54 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800fcca:	4b25      	ldr	r3, [pc, #148]	@ (800fd60 <SYSVIEW_AddTask+0xc4>)
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	4926      	ldr	r1, [pc, #152]	@ (800fd68 <SYSVIEW_AddTask+0xcc>)
 800fcd0:	4613      	mov	r3, r2
 800fcd2:	009b      	lsls	r3, r3, #2
 800fcd4:	4413      	add	r3, r2
 800fcd6:	009b      	lsls	r3, r3, #2
 800fcd8:	440b      	add	r3, r1
 800fcda:	68fa      	ldr	r2, [r7, #12]
 800fcdc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800fcde:	4b20      	ldr	r3, [pc, #128]	@ (800fd60 <SYSVIEW_AddTask+0xc4>)
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	4921      	ldr	r1, [pc, #132]	@ (800fd68 <SYSVIEW_AddTask+0xcc>)
 800fce4:	4613      	mov	r3, r2
 800fce6:	009b      	lsls	r3, r3, #2
 800fce8:	4413      	add	r3, r2
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	440b      	add	r3, r1
 800fcee:	3304      	adds	r3, #4
 800fcf0:	68ba      	ldr	r2, [r7, #8]
 800fcf2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800fcf4:	4b1a      	ldr	r3, [pc, #104]	@ (800fd60 <SYSVIEW_AddTask+0xc4>)
 800fcf6:	681a      	ldr	r2, [r3, #0]
 800fcf8:	491b      	ldr	r1, [pc, #108]	@ (800fd68 <SYSVIEW_AddTask+0xcc>)
 800fcfa:	4613      	mov	r3, r2
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	4413      	add	r3, r2
 800fd00:	009b      	lsls	r3, r3, #2
 800fd02:	440b      	add	r3, r1
 800fd04:	3308      	adds	r3, #8
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800fd0a:	4b15      	ldr	r3, [pc, #84]	@ (800fd60 <SYSVIEW_AddTask+0xc4>)
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	4916      	ldr	r1, [pc, #88]	@ (800fd68 <SYSVIEW_AddTask+0xcc>)
 800fd10:	4613      	mov	r3, r2
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	4413      	add	r3, r2
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	440b      	add	r3, r1
 800fd1a:	330c      	adds	r3, #12
 800fd1c:	683a      	ldr	r2, [r7, #0]
 800fd1e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800fd20:	4b0f      	ldr	r3, [pc, #60]	@ (800fd60 <SYSVIEW_AddTask+0xc4>)
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	4910      	ldr	r1, [pc, #64]	@ (800fd68 <SYSVIEW_AddTask+0xcc>)
 800fd26:	4613      	mov	r3, r2
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	4413      	add	r3, r2
 800fd2c:	009b      	lsls	r3, r3, #2
 800fd2e:	440b      	add	r3, r1
 800fd30:	3310      	adds	r3, #16
 800fd32:	69ba      	ldr	r2, [r7, #24]
 800fd34:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800fd36:	4b0a      	ldr	r3, [pc, #40]	@ (800fd60 <SYSVIEW_AddTask+0xc4>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	4a08      	ldr	r2, [pc, #32]	@ (800fd60 <SYSVIEW_AddTask+0xc4>)
 800fd3e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800fd40:	69bb      	ldr	r3, [r7, #24]
 800fd42:	9300      	str	r3, [sp, #0]
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	68b9      	ldr	r1, [r7, #8]
 800fd4a:	68f8      	ldr	r0, [r7, #12]
 800fd4c:	f000 f80e 	bl	800fd6c <SYSVIEW_SendTaskInfo>
 800fd50:	e000      	b.n	800fd54 <SYSVIEW_AddTask+0xb8>
    return;
 800fd52:	bf00      	nop

}
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	08014824 	.word	0x08014824
 800fd60:	20016a44 	.word	0x20016a44
 800fd64:	0801482c 	.word	0x0801482c
 800fd68:	200169a4 	.word	0x200169a4

0800fd6c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b08a      	sub	sp, #40	@ 0x28
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	607a      	str	r2, [r7, #4]
 800fd78:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800fd7a:	f107 0310 	add.w	r3, r7, #16
 800fd7e:	2218      	movs	r2, #24
 800fd80:	2100      	movs	r1, #0
 800fd82:	4618      	mov	r0, r3
 800fd84:	f002 f9d4 	bl	8012130 <memset>
  TaskInfo.TaskID     = TaskID;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 800fd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd9a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800fd9c:	f107 0310 	add.w	r3, r7, #16
 800fda0:	4618      	mov	r0, r3
 800fda2:	f000 ff3b 	bl	8010c1c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800fda6:	bf00      	nop
 800fda8:	3728      	adds	r7, #40	@ 0x28
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
	...

0800fdb0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800fdb6:	4b1e      	ldr	r3, [pc, #120]	@ (800fe30 <USART2_IRQHandler+0x80>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f003 0320 	and.w	r3, r3, #32
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d011      	beq.n	800fdea <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800fdc6:	4b1b      	ldr	r3, [pc, #108]	@ (800fe34 <USART2_IRQHandler+0x84>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f003 030b 	and.w	r3, r3, #11
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d108      	bne.n	800fdea <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800fdd8:	4b17      	ldr	r3, [pc, #92]	@ (800fe38 <USART2_IRQHandler+0x88>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d004      	beq.n	800fdea <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800fde0:	4b15      	ldr	r3, [pc, #84]	@ (800fe38 <USART2_IRQHandler+0x88>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	79fa      	ldrb	r2, [r7, #7]
 800fde6:	4610      	mov	r0, r2
 800fde8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d01a      	beq.n	800fe2a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800fdf4:	4b11      	ldr	r3, [pc, #68]	@ (800fe3c <USART2_IRQHandler+0x8c>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d015      	beq.n	800fe28 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800fdfc:	4b0f      	ldr	r3, [pc, #60]	@ (800fe3c <USART2_IRQHandler+0x8c>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	1dfa      	adds	r2, r7, #7
 800fe02:	4610      	mov	r0, r2
 800fe04:	4798      	blx	r3
 800fe06:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d106      	bne.n	800fe1c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800fe0e:	4b0c      	ldr	r3, [pc, #48]	@ (800fe40 <USART2_IRQHandler+0x90>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	4a0b      	ldr	r2, [pc, #44]	@ (800fe40 <USART2_IRQHandler+0x90>)
 800fe14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe18:	6013      	str	r3, [r2, #0]
 800fe1a:	e006      	b.n	800fe2a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800fe1c:	4b04      	ldr	r3, [pc, #16]	@ (800fe30 <USART2_IRQHandler+0x80>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800fe20:	79fa      	ldrb	r2, [r7, #7]
 800fe22:	4b04      	ldr	r3, [pc, #16]	@ (800fe34 <USART2_IRQHandler+0x84>)
 800fe24:	601a      	str	r2, [r3, #0]
 800fe26:	e000      	b.n	800fe2a <USART2_IRQHandler+0x7a>
      return;
 800fe28:	bf00      	nop
    }
  }
}
 800fe2a:	3710      	adds	r7, #16
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	40004400 	.word	0x40004400
 800fe34:	40004404 	.word	0x40004404
 800fe38:	20016a48 	.word	0x20016a48
 800fe3c:	20016a4c 	.word	0x20016a4c
 800fe40:	4000440c 	.word	0x4000440c

0800fe44 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800fe44:	b480      	push	{r7}
 800fe46:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800fe48:	4b05      	ldr	r3, [pc, #20]	@ (800fe60 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4a04      	ldr	r2, [pc, #16]	@ (800fe60 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800fe4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe52:	6013      	str	r3, [r2, #0]
}
 800fe54:	bf00      	nop
 800fe56:	46bd      	mov	sp, r7
 800fe58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5c:	4770      	bx	lr
 800fe5e:	bf00      	nop
 800fe60:	4000440c 	.word	0x4000440c

0800fe64 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800fe6a:	4b26      	ldr	r3, [pc, #152]	@ (800ff04 <_DoInit+0xa0>)
 800fe6c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800fe6e:	22a8      	movs	r2, #168	@ 0xa8
 800fe70:	2100      	movs	r1, #0
 800fe72:	6838      	ldr	r0, [r7, #0]
 800fe74:	f002 f95c 	bl	8012130 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	2203      	movs	r2, #3
 800fe7c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	2203      	movs	r2, #3
 800fe82:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	4a20      	ldr	r2, [pc, #128]	@ (800ff08 <_DoInit+0xa4>)
 800fe88:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	4a1f      	ldr	r2, [pc, #124]	@ (800ff0c <_DoInit+0xa8>)
 800fe8e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fe96:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	2200      	movs	r2, #0
 800fea2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	2200      	movs	r2, #0
 800fea8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	4a16      	ldr	r2, [pc, #88]	@ (800ff08 <_DoInit+0xa4>)
 800feae:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	4a17      	ldr	r2, [pc, #92]	@ (800ff10 <_DoInit+0xac>)
 800feb4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	2210      	movs	r2, #16
 800feba:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	2200      	movs	r2, #0
 800fec0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	2200      	movs	r2, #0
 800fec6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	2200      	movs	r2, #0
 800fecc:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800fece:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800fed2:	2300      	movs	r3, #0
 800fed4:	607b      	str	r3, [r7, #4]
 800fed6:	e00c      	b.n	800fef2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f1c3 030f 	rsb	r3, r3, #15
 800fede:	4a0d      	ldr	r2, [pc, #52]	@ (800ff14 <_DoInit+0xb0>)
 800fee0:	5cd1      	ldrb	r1, [r2, r3]
 800fee2:	683a      	ldr	r2, [r7, #0]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	4413      	add	r3, r2
 800fee8:	460a      	mov	r2, r1
 800feea:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	3301      	adds	r3, #1
 800fef0:	607b      	str	r3, [r7, #4]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2b0f      	cmp	r3, #15
 800fef6:	d9ef      	bls.n	800fed8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800fef8:	f3bf 8f5f 	dmb	sy
}
 800fefc:	bf00      	nop
 800fefe:	3708      	adds	r7, #8
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}
 800ff04:	20016a50 	.word	0x20016a50
 800ff08:	0801487c 	.word	0x0801487c
 800ff0c:	20016af8 	.word	0x20016af8
 800ff10:	20016ef8 	.word	0x20016ef8
 800ff14:	08014ce0 	.word	0x08014ce0

0800ff18 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b08a      	sub	sp, #40	@ 0x28
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	60f8      	str	r0, [r7, #12]
 800ff20:	60b9      	str	r1, [r7, #8]
 800ff22:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800ff24:	2300      	movs	r3, #0
 800ff26:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	691b      	ldr	r3, [r3, #16]
 800ff32:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800ff34:	69ba      	ldr	r2, [r7, #24]
 800ff36:	69fb      	ldr	r3, [r7, #28]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d905      	bls.n	800ff48 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800ff3c:	69ba      	ldr	r2, [r7, #24]
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	1ad3      	subs	r3, r2, r3
 800ff42:	3b01      	subs	r3, #1
 800ff44:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff46:	e007      	b.n	800ff58 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	689a      	ldr	r2, [r3, #8]
 800ff4c:	69b9      	ldr	r1, [r7, #24]
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	1acb      	subs	r3, r1, r3
 800ff52:	4413      	add	r3, r2
 800ff54:	3b01      	subs	r3, #1
 800ff56:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	689a      	ldr	r2, [r3, #8]
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	1ad3      	subs	r3, r2, r3
 800ff60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff62:	4293      	cmp	r3, r2
 800ff64:	bf28      	it	cs
 800ff66:	4613      	movcs	r3, r2
 800ff68:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800ff6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	bf28      	it	cs
 800ff72:	4613      	movcs	r3, r2
 800ff74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	685a      	ldr	r2, [r3, #4]
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800ff80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff82:	68b9      	ldr	r1, [r7, #8]
 800ff84:	6978      	ldr	r0, [r7, #20]
 800ff86:	f002 f940 	bl	801220a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800ff8a:	6a3a      	ldr	r2, [r7, #32]
 800ff8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff8e:	4413      	add	r3, r2
 800ff90:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800ff92:	68ba      	ldr	r2, [r7, #8]
 800ff94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff96:	4413      	add	r3, r2
 800ff98:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff9e:	1ad3      	subs	r3, r2, r3
 800ffa0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800ffa2:	69fa      	ldr	r2, [r7, #28]
 800ffa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffa6:	4413      	add	r3, r2
 800ffa8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	689b      	ldr	r3, [r3, #8]
 800ffae:	69fa      	ldr	r2, [r7, #28]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d101      	bne.n	800ffb8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800ffb8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	69fa      	ldr	r2, [r7, #28]
 800ffc0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d1b2      	bne.n	800ff2e <_WriteBlocking+0x16>
  return NumBytesWritten;
 800ffc8:	6a3b      	ldr	r3, [r7, #32]
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3728      	adds	r7, #40	@ 0x28
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}

0800ffd2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800ffd2:	b580      	push	{r7, lr}
 800ffd4:	b088      	sub	sp, #32
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	60f8      	str	r0, [r7, #12]
 800ffda:	60b9      	str	r1, [r7, #8]
 800ffdc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	68db      	ldr	r3, [r3, #12]
 800ffe2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	689a      	ldr	r2, [r3, #8]
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800ffee:	69ba      	ldr	r2, [r7, #24]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d911      	bls.n	801001a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	685a      	ldr	r2, [r3, #4]
 800fffa:	69fb      	ldr	r3, [r7, #28]
 800fffc:	4413      	add	r3, r2
 800fffe:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	68b9      	ldr	r1, [r7, #8]
 8010004:	6938      	ldr	r0, [r7, #16]
 8010006:	f002 f900 	bl	801220a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 801000a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 801000e:	69fa      	ldr	r2, [r7, #28]
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	441a      	add	r2, r3
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8010018:	e01f      	b.n	801005a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	685a      	ldr	r2, [r3, #4]
 8010022:	69fb      	ldr	r3, [r7, #28]
 8010024:	4413      	add	r3, r2
 8010026:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8010028:	697a      	ldr	r2, [r7, #20]
 801002a:	68b9      	ldr	r1, [r7, #8]
 801002c:	6938      	ldr	r0, [r7, #16]
 801002e:	f002 f8ec 	bl	801220a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	1ad3      	subs	r3, r2, r3
 8010038:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8010040:	68ba      	ldr	r2, [r7, #8]
 8010042:	69bb      	ldr	r3, [r7, #24]
 8010044:	4413      	add	r3, r2
 8010046:	697a      	ldr	r2, [r7, #20]
 8010048:	4619      	mov	r1, r3
 801004a:	6938      	ldr	r0, [r7, #16]
 801004c:	f002 f8dd 	bl	801220a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8010050:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	697a      	ldr	r2, [r7, #20]
 8010058:	60da      	str	r2, [r3, #12]
}
 801005a:	bf00      	nop
 801005c:	3720      	adds	r7, #32
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8010062:	b480      	push	{r7}
 8010064:	b087      	sub	sp, #28
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	691b      	ldr	r3, [r3, #16]
 801006e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	68db      	ldr	r3, [r3, #12]
 8010074:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8010076:	693a      	ldr	r2, [r7, #16]
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	429a      	cmp	r2, r3
 801007c:	d808      	bhi.n	8010090 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	689a      	ldr	r2, [r3, #8]
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	1ad2      	subs	r2, r2, r3
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	4413      	add	r3, r2
 801008a:	3b01      	subs	r3, #1
 801008c:	617b      	str	r3, [r7, #20]
 801008e:	e004      	b.n	801009a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8010090:	693a      	ldr	r2, [r7, #16]
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	1ad3      	subs	r3, r2, r3
 8010096:	3b01      	subs	r3, #1
 8010098:	617b      	str	r3, [r7, #20]
  }
  return r;
 801009a:	697b      	ldr	r3, [r7, #20]
}
 801009c:	4618      	mov	r0, r3
 801009e:	371c      	adds	r7, #28
 80100a0:	46bd      	mov	sp, r7
 80100a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a6:	4770      	bx	lr

080100a8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b08c      	sub	sp, #48	@ 0x30
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	60b9      	str	r1, [r7, #8]
 80100b2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80100b4:	4b3e      	ldr	r3, [pc, #248]	@ (80101b0 <SEGGER_RTT_ReadNoLock+0x108>)
 80100b6:	623b      	str	r3, [r7, #32]
 80100b8:	6a3b      	ldr	r3, [r7, #32]
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	2b53      	cmp	r3, #83	@ 0x53
 80100c0:	d001      	beq.n	80100c6 <SEGGER_RTT_ReadNoLock+0x1e>
 80100c2:	f7ff fecf 	bl	800fe64 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80100c6:	68fa      	ldr	r2, [r7, #12]
 80100c8:	4613      	mov	r3, r2
 80100ca:	005b      	lsls	r3, r3, #1
 80100cc:	4413      	add	r3, r2
 80100ce:	00db      	lsls	r3, r3, #3
 80100d0:	3360      	adds	r3, #96	@ 0x60
 80100d2:	4a37      	ldr	r2, [pc, #220]	@ (80101b0 <SEGGER_RTT_ReadNoLock+0x108>)
 80100d4:	4413      	add	r3, r2
 80100d6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	691b      	ldr	r3, [r3, #16]
 80100e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80100e8:	2300      	movs	r3, #0
 80100ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80100ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d92b      	bls.n	801014c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80100f4:	69fb      	ldr	r3, [r7, #28]
 80100f6:	689a      	ldr	r2, [r3, #8]
 80100f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100fa:	1ad3      	subs	r3, r2, r3
 80100fc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80100fe:	697a      	ldr	r2, [r7, #20]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	4293      	cmp	r3, r2
 8010104:	bf28      	it	cs
 8010106:	4613      	movcs	r3, r2
 8010108:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	685a      	ldr	r2, [r3, #4]
 801010e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010110:	4413      	add	r3, r2
 8010112:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8010114:	697a      	ldr	r2, [r7, #20]
 8010116:	6939      	ldr	r1, [r7, #16]
 8010118:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801011a:	f002 f876 	bl	801220a <memcpy>
    NumBytesRead += NumBytesRem;
 801011e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	4413      	add	r3, r2
 8010124:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8010126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	4413      	add	r3, r2
 801012c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	1ad3      	subs	r3, r2, r3
 8010134:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8010136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	4413      	add	r3, r2
 801013c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 801013e:	69fb      	ldr	r3, [r7, #28]
 8010140:	689b      	ldr	r3, [r3, #8]
 8010142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010144:	429a      	cmp	r2, r3
 8010146:	d101      	bne.n	801014c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8010148:	2300      	movs	r3, #0
 801014a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 801014c:	69ba      	ldr	r2, [r7, #24]
 801014e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010150:	1ad3      	subs	r3, r2, r3
 8010152:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8010154:	697a      	ldr	r2, [r7, #20]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	4293      	cmp	r3, r2
 801015a:	bf28      	it	cs
 801015c:	4613      	movcs	r3, r2
 801015e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d019      	beq.n	801019a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	685a      	ldr	r2, [r3, #4]
 801016a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801016c:	4413      	add	r3, r2
 801016e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8010170:	697a      	ldr	r2, [r7, #20]
 8010172:	6939      	ldr	r1, [r7, #16]
 8010174:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010176:	f002 f848 	bl	801220a <memcpy>
    NumBytesRead += NumBytesRem;
 801017a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	4413      	add	r3, r2
 8010180:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8010182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	4413      	add	r3, r2
 8010188:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 801018a:	687a      	ldr	r2, [r7, #4]
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	1ad3      	subs	r3, r2, r3
 8010190:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8010192:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	4413      	add	r3, r2
 8010198:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 801019a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801019c:	2b00      	cmp	r3, #0
 801019e:	d002      	beq.n	80101a6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80101a0:	69fb      	ldr	r3, [r7, #28]
 80101a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80101a4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80101a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3730      	adds	r7, #48	@ 0x30
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}
 80101b0:	20016a50 	.word	0x20016a50

080101b4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b088      	sub	sp, #32
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	60b9      	str	r1, [r7, #8]
 80101be:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	1c5a      	adds	r2, r3, #1
 80101c8:	4613      	mov	r3, r2
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	4413      	add	r3, r2
 80101ce:	00db      	lsls	r3, r3, #3
 80101d0:	4a1f      	ldr	r2, [pc, #124]	@ (8010250 <SEGGER_RTT_WriteNoLock+0x9c>)
 80101d2:	4413      	add	r3, r2
 80101d4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	695b      	ldr	r3, [r3, #20]
 80101da:	2b02      	cmp	r3, #2
 80101dc:	d029      	beq.n	8010232 <SEGGER_RTT_WriteNoLock+0x7e>
 80101de:	2b02      	cmp	r3, #2
 80101e0:	d82e      	bhi.n	8010240 <SEGGER_RTT_WriteNoLock+0x8c>
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d002      	beq.n	80101ec <SEGGER_RTT_WriteNoLock+0x38>
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d013      	beq.n	8010212 <SEGGER_RTT_WriteNoLock+0x5e>
 80101ea:	e029      	b.n	8010240 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80101ec:	6978      	ldr	r0, [r7, #20]
 80101ee:	f7ff ff38 	bl	8010062 <_GetAvailWriteSpace>
 80101f2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80101f4:	693a      	ldr	r2, [r7, #16]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d202      	bcs.n	8010202 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80101fc:	2300      	movs	r3, #0
 80101fe:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8010200:	e021      	b.n	8010246 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8010206:	687a      	ldr	r2, [r7, #4]
 8010208:	69b9      	ldr	r1, [r7, #24]
 801020a:	6978      	ldr	r0, [r7, #20]
 801020c:	f7ff fee1 	bl	800ffd2 <_WriteNoCheck>
    break;
 8010210:	e019      	b.n	8010246 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8010212:	6978      	ldr	r0, [r7, #20]
 8010214:	f7ff ff25 	bl	8010062 <_GetAvailWriteSpace>
 8010218:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 801021a:	687a      	ldr	r2, [r7, #4]
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	4293      	cmp	r3, r2
 8010220:	bf28      	it	cs
 8010222:	4613      	movcs	r3, r2
 8010224:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8010226:	69fa      	ldr	r2, [r7, #28]
 8010228:	69b9      	ldr	r1, [r7, #24]
 801022a:	6978      	ldr	r0, [r7, #20]
 801022c:	f7ff fed1 	bl	800ffd2 <_WriteNoCheck>
    break;
 8010230:	e009      	b.n	8010246 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8010232:	687a      	ldr	r2, [r7, #4]
 8010234:	69b9      	ldr	r1, [r7, #24]
 8010236:	6978      	ldr	r0, [r7, #20]
 8010238:	f7ff fe6e 	bl	800ff18 <_WriteBlocking>
 801023c:	61f8      	str	r0, [r7, #28]
    break;
 801023e:	e002      	b.n	8010246 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8010240:	2300      	movs	r3, #0
 8010242:	61fb      	str	r3, [r7, #28]
    break;
 8010244:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8010246:	69fb      	ldr	r3, [r7, #28]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3720      	adds	r7, #32
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	20016a50 	.word	0x20016a50

08010254 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8010254:	b580      	push	{r7, lr}
 8010256:	b088      	sub	sp, #32
 8010258:	af00      	add	r7, sp, #0
 801025a:	60f8      	str	r0, [r7, #12]
 801025c:	60b9      	str	r1, [r7, #8]
 801025e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8010260:	4b0e      	ldr	r3, [pc, #56]	@ (801029c <SEGGER_RTT_Write+0x48>)
 8010262:	61fb      	str	r3, [r7, #28]
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	b2db      	uxtb	r3, r3
 801026a:	2b53      	cmp	r3, #83	@ 0x53
 801026c:	d001      	beq.n	8010272 <SEGGER_RTT_Write+0x1e>
 801026e:	f7ff fdf9 	bl	800fe64 <_DoInit>
  SEGGER_RTT_LOCK();
 8010272:	f3ef 8311 	mrs	r3, BASEPRI
 8010276:	f04f 0120 	mov.w	r1, #32
 801027a:	f381 8811 	msr	BASEPRI, r1
 801027e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8010280:	687a      	ldr	r2, [r7, #4]
 8010282:	68b9      	ldr	r1, [r7, #8]
 8010284:	68f8      	ldr	r0, [r7, #12]
 8010286:	f7ff ff95 	bl	80101b4 <SEGGER_RTT_WriteNoLock>
 801028a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 801028c:	69bb      	ldr	r3, [r7, #24]
 801028e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8010292:	697b      	ldr	r3, [r7, #20]
}
 8010294:	4618      	mov	r0, r3
 8010296:	3720      	adds	r7, #32
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	20016a50 	.word	0x20016a50

080102a0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80102a0:	b480      	push	{r7}
 80102a2:	b087      	sub	sp, #28
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	60b9      	str	r1, [r7, #8]
 80102aa:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	1c5a      	adds	r2, r3, #1
 80102b4:	60fa      	str	r2, [r7, #12]
 80102b6:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2b80      	cmp	r3, #128	@ 0x80
 80102bc:	d90a      	bls.n	80102d4 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80102be:	2380      	movs	r3, #128	@ 0x80
 80102c0:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80102c2:	e007      	b.n	80102d4 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80102c4:	68ba      	ldr	r2, [r7, #8]
 80102c6:	1c53      	adds	r3, r2, #1
 80102c8:	60bb      	str	r3, [r7, #8]
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	1c59      	adds	r1, r3, #1
 80102ce:	60f9      	str	r1, [r7, #12]
 80102d0:	7812      	ldrb	r2, [r2, #0]
 80102d2:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	1e5a      	subs	r2, r3, #1
 80102d8:	607a      	str	r2, [r7, #4]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d003      	beq.n	80102e6 <_EncodeStr+0x46>
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1ee      	bne.n	80102c4 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	1ad3      	subs	r3, r2, r3
 80102ec:	b2da      	uxtb	r2, r3
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80102f2:	68fb      	ldr	r3, [r7, #12]
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	371c      	adds	r7, #28
 80102f8:	46bd      	mov	sp, r7
 80102fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fe:	4770      	bx	lr

08010300 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8010300:	b480      	push	{r7}
 8010302:	b083      	sub	sp, #12
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	3307      	adds	r3, #7
}
 801030c:	4618      	mov	r0, r3
 801030e:	370c      	adds	r7, #12
 8010310:	46bd      	mov	sp, r7
 8010312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010316:	4770      	bx	lr

08010318 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8010318:	b580      	push	{r7, lr}
 801031a:	b082      	sub	sp, #8
 801031c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 801031e:	4b34      	ldr	r3, [pc, #208]	@ (80103f0 <_HandleIncomingPacket+0xd8>)
 8010320:	7e1b      	ldrb	r3, [r3, #24]
 8010322:	4618      	mov	r0, r3
 8010324:	1cfb      	adds	r3, r7, #3
 8010326:	2201      	movs	r2, #1
 8010328:	4619      	mov	r1, r3
 801032a:	f7ff febd 	bl	80100a8 <SEGGER_RTT_ReadNoLock>
 801032e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d057      	beq.n	80103e6 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8010336:	78fb      	ldrb	r3, [r7, #3]
 8010338:	2b80      	cmp	r3, #128	@ 0x80
 801033a:	d031      	beq.n	80103a0 <_HandleIncomingPacket+0x88>
 801033c:	2b80      	cmp	r3, #128	@ 0x80
 801033e:	dc40      	bgt.n	80103c2 <_HandleIncomingPacket+0xaa>
 8010340:	2b07      	cmp	r3, #7
 8010342:	dc15      	bgt.n	8010370 <_HandleIncomingPacket+0x58>
 8010344:	2b00      	cmp	r3, #0
 8010346:	dd3c      	ble.n	80103c2 <_HandleIncomingPacket+0xaa>
 8010348:	3b01      	subs	r3, #1
 801034a:	2b06      	cmp	r3, #6
 801034c:	d839      	bhi.n	80103c2 <_HandleIncomingPacket+0xaa>
 801034e:	a201      	add	r2, pc, #4	@ (adr r2, 8010354 <_HandleIncomingPacket+0x3c>)
 8010350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010354:	08010377 	.word	0x08010377
 8010358:	0801037d 	.word	0x0801037d
 801035c:	08010383 	.word	0x08010383
 8010360:	08010389 	.word	0x08010389
 8010364:	0801038f 	.word	0x0801038f
 8010368:	08010395 	.word	0x08010395
 801036c:	0801039b 	.word	0x0801039b
 8010370:	2b7f      	cmp	r3, #127	@ 0x7f
 8010372:	d033      	beq.n	80103dc <_HandleIncomingPacket+0xc4>
 8010374:	e025      	b.n	80103c2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8010376:	f000 fad5 	bl	8010924 <SEGGER_SYSVIEW_Start>
      break;
 801037a:	e034      	b.n	80103e6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 801037c:	f000 fb8e 	bl	8010a9c <SEGGER_SYSVIEW_Stop>
      break;
 8010380:	e031      	b.n	80103e6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8010382:	f000 fd43 	bl	8010e0c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8010386:	e02e      	b.n	80103e6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8010388:	f000 fd2c 	bl	8010de4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 801038c:	e02b      	b.n	80103e6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 801038e:	f000 fbab 	bl	8010ae8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8010392:	e028      	b.n	80103e6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8010394:	f001 f874 	bl	8011480 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8010398:	e025      	b.n	80103e6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 801039a:	f001 f853 	bl	8011444 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 801039e:	e022      	b.n	80103e6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80103a0:	4b13      	ldr	r3, [pc, #76]	@ (80103f0 <_HandleIncomingPacket+0xd8>)
 80103a2:	7e1b      	ldrb	r3, [r3, #24]
 80103a4:	4618      	mov	r0, r3
 80103a6:	1cfb      	adds	r3, r7, #3
 80103a8:	2201      	movs	r2, #1
 80103aa:	4619      	mov	r1, r3
 80103ac:	f7ff fe7c 	bl	80100a8 <SEGGER_RTT_ReadNoLock>
 80103b0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d013      	beq.n	80103e0 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80103b8:	78fb      	ldrb	r3, [r7, #3]
 80103ba:	4618      	mov	r0, r3
 80103bc:	f000 ffb8 	bl	8011330 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80103c0:	e00e      	b.n	80103e0 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80103c2:	78fb      	ldrb	r3, [r7, #3]
 80103c4:	b25b      	sxtb	r3, r3
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	da0c      	bge.n	80103e4 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80103ca:	4b09      	ldr	r3, [pc, #36]	@ (80103f0 <_HandleIncomingPacket+0xd8>)
 80103cc:	7e1b      	ldrb	r3, [r3, #24]
 80103ce:	4618      	mov	r0, r3
 80103d0:	1cfb      	adds	r3, r7, #3
 80103d2:	2201      	movs	r2, #1
 80103d4:	4619      	mov	r1, r3
 80103d6:	f7ff fe67 	bl	80100a8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80103da:	e003      	b.n	80103e4 <_HandleIncomingPacket+0xcc>
      break;
 80103dc:	bf00      	nop
 80103de:	e002      	b.n	80103e6 <_HandleIncomingPacket+0xce>
      break;
 80103e0:	bf00      	nop
 80103e2:	e000      	b.n	80103e6 <_HandleIncomingPacket+0xce>
      break;
 80103e4:	bf00      	nop
    }
  }
}
 80103e6:	bf00      	nop
 80103e8:	3708      	adds	r7, #8
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	20016f08 	.word	0x20016f08

080103f4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b08c      	sub	sp, #48	@ 0x30
 80103f8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80103fa:	2301      	movs	r3, #1
 80103fc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80103fe:	1d3b      	adds	r3, r7, #4
 8010400:	3301      	adds	r3, #1
 8010402:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8010404:	69fb      	ldr	r3, [r7, #28]
 8010406:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010408:	4b32      	ldr	r3, [pc, #200]	@ (80104d4 <_TrySendOverflowPacket+0xe0>)
 801040a:	695b      	ldr	r3, [r3, #20]
 801040c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801040e:	e00b      	b.n	8010428 <_TrySendOverflowPacket+0x34>
 8010410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010412:	b2da      	uxtb	r2, r3
 8010414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010416:	1c59      	adds	r1, r3, #1
 8010418:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801041a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801041e:	b2d2      	uxtb	r2, r2
 8010420:	701a      	strb	r2, [r3, #0]
 8010422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010424:	09db      	lsrs	r3, r3, #7
 8010426:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801042a:	2b7f      	cmp	r3, #127	@ 0x7f
 801042c:	d8f0      	bhi.n	8010410 <_TrySendOverflowPacket+0x1c>
 801042e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010430:	1c5a      	adds	r2, r3, #1
 8010432:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010436:	b2d2      	uxtb	r2, r2
 8010438:	701a      	strb	r2, [r3, #0]
 801043a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801043c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 801043e:	4b26      	ldr	r3, [pc, #152]	@ (80104d8 <_TrySendOverflowPacket+0xe4>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8010444:	4b23      	ldr	r3, [pc, #140]	@ (80104d4 <_TrySendOverflowPacket+0xe0>)
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	69ba      	ldr	r2, [r7, #24]
 801044a:	1ad3      	subs	r3, r2, r3
 801044c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 801044e:	69fb      	ldr	r3, [r7, #28]
 8010450:	627b      	str	r3, [r7, #36]	@ 0x24
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	623b      	str	r3, [r7, #32]
 8010456:	e00b      	b.n	8010470 <_TrySendOverflowPacket+0x7c>
 8010458:	6a3b      	ldr	r3, [r7, #32]
 801045a:	b2da      	uxtb	r2, r3
 801045c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801045e:	1c59      	adds	r1, r3, #1
 8010460:	6279      	str	r1, [r7, #36]	@ 0x24
 8010462:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010466:	b2d2      	uxtb	r2, r2
 8010468:	701a      	strb	r2, [r3, #0]
 801046a:	6a3b      	ldr	r3, [r7, #32]
 801046c:	09db      	lsrs	r3, r3, #7
 801046e:	623b      	str	r3, [r7, #32]
 8010470:	6a3b      	ldr	r3, [r7, #32]
 8010472:	2b7f      	cmp	r3, #127	@ 0x7f
 8010474:	d8f0      	bhi.n	8010458 <_TrySendOverflowPacket+0x64>
 8010476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010478:	1c5a      	adds	r2, r3, #1
 801047a:	627a      	str	r2, [r7, #36]	@ 0x24
 801047c:	6a3a      	ldr	r2, [r7, #32]
 801047e:	b2d2      	uxtb	r2, r2
 8010480:	701a      	strb	r2, [r3, #0]
 8010482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010484:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8010486:	4b13      	ldr	r3, [pc, #76]	@ (80104d4 <_TrySendOverflowPacket+0xe0>)
 8010488:	785b      	ldrb	r3, [r3, #1]
 801048a:	4618      	mov	r0, r3
 801048c:	1d3b      	adds	r3, r7, #4
 801048e:	69fa      	ldr	r2, [r7, #28]
 8010490:	1ad3      	subs	r3, r2, r3
 8010492:	461a      	mov	r2, r3
 8010494:	1d3b      	adds	r3, r7, #4
 8010496:	4619      	mov	r1, r3
 8010498:	f7ef fea2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 801049c:	4603      	mov	r3, r0
 801049e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80104a0:	f7ff fcd0 	bl	800fe44 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d009      	beq.n	80104be <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80104aa:	4a0a      	ldr	r2, [pc, #40]	@ (80104d4 <_TrySendOverflowPacket+0xe0>)
 80104ac:	69bb      	ldr	r3, [r7, #24]
 80104ae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80104b0:	4b08      	ldr	r3, [pc, #32]	@ (80104d4 <_TrySendOverflowPacket+0xe0>)
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	3b01      	subs	r3, #1
 80104b6:	b2da      	uxtb	r2, r3
 80104b8:	4b06      	ldr	r3, [pc, #24]	@ (80104d4 <_TrySendOverflowPacket+0xe0>)
 80104ba:	701a      	strb	r2, [r3, #0]
 80104bc:	e004      	b.n	80104c8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80104be:	4b05      	ldr	r3, [pc, #20]	@ (80104d4 <_TrySendOverflowPacket+0xe0>)
 80104c0:	695b      	ldr	r3, [r3, #20]
 80104c2:	3301      	adds	r3, #1
 80104c4:	4a03      	ldr	r2, [pc, #12]	@ (80104d4 <_TrySendOverflowPacket+0xe0>)
 80104c6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80104c8:	693b      	ldr	r3, [r7, #16]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3730      	adds	r7, #48	@ 0x30
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	20016f08 	.word	0x20016f08
 80104d8:	e0001004 	.word	0xe0001004

080104dc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80104dc:	b580      	push	{r7, lr}
 80104de:	b08a      	sub	sp, #40	@ 0x28
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80104e8:	4b96      	ldr	r3, [pc, #600]	@ (8010744 <_SendPacket+0x268>)
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	d010      	beq.n	8010512 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80104f0:	4b94      	ldr	r3, [pc, #592]	@ (8010744 <_SendPacket+0x268>)
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f000 8130 	beq.w	801075a <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80104fa:	4b92      	ldr	r3, [pc, #584]	@ (8010744 <_SendPacket+0x268>)
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	2b02      	cmp	r3, #2
 8010500:	d109      	bne.n	8010516 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8010502:	f7ff ff77 	bl	80103f4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8010506:	4b8f      	ldr	r3, [pc, #572]	@ (8010744 <_SendPacket+0x268>)
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	2b01      	cmp	r3, #1
 801050c:	f040 8127 	bne.w	801075e <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8010510:	e001      	b.n	8010516 <_SendPacket+0x3a>
    goto Send;
 8010512:	bf00      	nop
 8010514:	e000      	b.n	8010518 <_SendPacket+0x3c>
Send:
 8010516:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2b1f      	cmp	r3, #31
 801051c:	d809      	bhi.n	8010532 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 801051e:	4b89      	ldr	r3, [pc, #548]	@ (8010744 <_SendPacket+0x268>)
 8010520:	69da      	ldr	r2, [r3, #28]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	fa22 f303 	lsr.w	r3, r2, r3
 8010528:	f003 0301 	and.w	r3, r3, #1
 801052c:	2b00      	cmp	r3, #0
 801052e:	f040 8118 	bne.w	8010762 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2b17      	cmp	r3, #23
 8010536:	d807      	bhi.n	8010548 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	3b01      	subs	r3, #1
 801053c:	60fb      	str	r3, [r7, #12]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	b2da      	uxtb	r2, r3
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	701a      	strb	r2, [r3, #0]
 8010546:	e0c4      	b.n	80106d2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8010548:	68ba      	ldr	r2, [r7, #8]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	1ad3      	subs	r3, r2, r3
 801054e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	2b7f      	cmp	r3, #127	@ 0x7f
 8010554:	d912      	bls.n	801057c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	09da      	lsrs	r2, r3, #7
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	3b01      	subs	r3, #1
 801055e:	60fb      	str	r3, [r7, #12]
 8010560:	b2d2      	uxtb	r2, r2
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8010566:	69fb      	ldr	r3, [r7, #28]
 8010568:	b2db      	uxtb	r3, r3
 801056a:	68fa      	ldr	r2, [r7, #12]
 801056c:	3a01      	subs	r2, #1
 801056e:	60fa      	str	r2, [r7, #12]
 8010570:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010574:	b2da      	uxtb	r2, r3
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	701a      	strb	r2, [r3, #0]
 801057a:	e006      	b.n	801058a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	3b01      	subs	r3, #1
 8010580:	60fb      	str	r3, [r7, #12]
 8010582:	69fb      	ldr	r3, [r7, #28]
 8010584:	b2da      	uxtb	r2, r3
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2b7e      	cmp	r3, #126	@ 0x7e
 801058e:	d807      	bhi.n	80105a0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	3b01      	subs	r3, #1
 8010594:	60fb      	str	r3, [r7, #12]
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	b2da      	uxtb	r2, r3
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	701a      	strb	r2, [r3, #0]
 801059e:	e098      	b.n	80106d2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80105a6:	d212      	bcs.n	80105ce <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	09da      	lsrs	r2, r3, #7
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	3b01      	subs	r3, #1
 80105b0:	60fb      	str	r3, [r7, #12]
 80105b2:	b2d2      	uxtb	r2, r2
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	68fa      	ldr	r2, [r7, #12]
 80105be:	3a01      	subs	r2, #1
 80105c0:	60fa      	str	r2, [r7, #12]
 80105c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80105c6:	b2da      	uxtb	r2, r3
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	701a      	strb	r2, [r3, #0]
 80105cc:	e081      	b.n	80106d2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80105d4:	d21d      	bcs.n	8010612 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	0b9a      	lsrs	r2, r3, #14
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	3b01      	subs	r3, #1
 80105de:	60fb      	str	r3, [r7, #12]
 80105e0:	b2d2      	uxtb	r2, r2
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	09db      	lsrs	r3, r3, #7
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	68fa      	ldr	r2, [r7, #12]
 80105ee:	3a01      	subs	r2, #1
 80105f0:	60fa      	str	r2, [r7, #12]
 80105f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80105f6:	b2da      	uxtb	r2, r3
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	b2db      	uxtb	r3, r3
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	3a01      	subs	r2, #1
 8010604:	60fa      	str	r2, [r7, #12]
 8010606:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801060a:	b2da      	uxtb	r2, r3
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	701a      	strb	r2, [r3, #0]
 8010610:	e05f      	b.n	80106d2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010618:	d228      	bcs.n	801066c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	0d5a      	lsrs	r2, r3, #21
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	3b01      	subs	r3, #1
 8010622:	60fb      	str	r3, [r7, #12]
 8010624:	b2d2      	uxtb	r2, r2
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	0b9b      	lsrs	r3, r3, #14
 801062e:	b2db      	uxtb	r3, r3
 8010630:	68fa      	ldr	r2, [r7, #12]
 8010632:	3a01      	subs	r2, #1
 8010634:	60fa      	str	r2, [r7, #12]
 8010636:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801063a:	b2da      	uxtb	r2, r3
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	09db      	lsrs	r3, r3, #7
 8010644:	b2db      	uxtb	r3, r3
 8010646:	68fa      	ldr	r2, [r7, #12]
 8010648:	3a01      	subs	r2, #1
 801064a:	60fa      	str	r2, [r7, #12]
 801064c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010650:	b2da      	uxtb	r2, r3
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	b2db      	uxtb	r3, r3
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	3a01      	subs	r2, #1
 801065e:	60fa      	str	r2, [r7, #12]
 8010660:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010664:	b2da      	uxtb	r2, r3
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	701a      	strb	r2, [r3, #0]
 801066a:	e032      	b.n	80106d2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	0f1a      	lsrs	r2, r3, #28
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	3b01      	subs	r3, #1
 8010674:	60fb      	str	r3, [r7, #12]
 8010676:	b2d2      	uxtb	r2, r2
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	0d5b      	lsrs	r3, r3, #21
 8010680:	b2db      	uxtb	r3, r3
 8010682:	68fa      	ldr	r2, [r7, #12]
 8010684:	3a01      	subs	r2, #1
 8010686:	60fa      	str	r2, [r7, #12]
 8010688:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801068c:	b2da      	uxtb	r2, r3
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	0b9b      	lsrs	r3, r3, #14
 8010696:	b2db      	uxtb	r3, r3
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	3a01      	subs	r2, #1
 801069c:	60fa      	str	r2, [r7, #12]
 801069e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80106a2:	b2da      	uxtb	r2, r3
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	09db      	lsrs	r3, r3, #7
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	68fa      	ldr	r2, [r7, #12]
 80106b0:	3a01      	subs	r2, #1
 80106b2:	60fa      	str	r2, [r7, #12]
 80106b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80106b8:	b2da      	uxtb	r2, r3
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	68fa      	ldr	r2, [r7, #12]
 80106c4:	3a01      	subs	r2, #1
 80106c6:	60fa      	str	r2, [r7, #12]
 80106c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80106cc:	b2da      	uxtb	r2, r3
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80106d2:	4b1d      	ldr	r3, [pc, #116]	@ (8010748 <_SendPacket+0x26c>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80106d8:	4b1a      	ldr	r3, [pc, #104]	@ (8010744 <_SendPacket+0x268>)
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	69ba      	ldr	r2, [r7, #24]
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	623b      	str	r3, [r7, #32]
 80106ea:	e00b      	b.n	8010704 <_SendPacket+0x228>
 80106ec:	6a3b      	ldr	r3, [r7, #32]
 80106ee:	b2da      	uxtb	r2, r3
 80106f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106f2:	1c59      	adds	r1, r3, #1
 80106f4:	6279      	str	r1, [r7, #36]	@ 0x24
 80106f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80106fa:	b2d2      	uxtb	r2, r2
 80106fc:	701a      	strb	r2, [r3, #0]
 80106fe:	6a3b      	ldr	r3, [r7, #32]
 8010700:	09db      	lsrs	r3, r3, #7
 8010702:	623b      	str	r3, [r7, #32]
 8010704:	6a3b      	ldr	r3, [r7, #32]
 8010706:	2b7f      	cmp	r3, #127	@ 0x7f
 8010708:	d8f0      	bhi.n	80106ec <_SendPacket+0x210>
 801070a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801070c:	1c5a      	adds	r2, r3, #1
 801070e:	627a      	str	r2, [r7, #36]	@ 0x24
 8010710:	6a3a      	ldr	r2, [r7, #32]
 8010712:	b2d2      	uxtb	r2, r2
 8010714:	701a      	strb	r2, [r3, #0]
 8010716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010718:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 801071a:	4b0a      	ldr	r3, [pc, #40]	@ (8010744 <_SendPacket+0x268>)
 801071c:	785b      	ldrb	r3, [r3, #1]
 801071e:	4618      	mov	r0, r3
 8010720:	68ba      	ldr	r2, [r7, #8]
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	1ad3      	subs	r3, r2, r3
 8010726:	461a      	mov	r2, r3
 8010728:	68f9      	ldr	r1, [r7, #12]
 801072a:	f7ef fd59 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 801072e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8010730:	f7ff fb88 	bl	800fe44 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d008      	beq.n	801074c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 801073a:	4a02      	ldr	r2, [pc, #8]	@ (8010744 <_SendPacket+0x268>)
 801073c:	69bb      	ldr	r3, [r7, #24]
 801073e:	60d3      	str	r3, [r2, #12]
 8010740:	e010      	b.n	8010764 <_SendPacket+0x288>
 8010742:	bf00      	nop
 8010744:	20016f08 	.word	0x20016f08
 8010748:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 801074c:	4b19      	ldr	r3, [pc, #100]	@ (80107b4 <_SendPacket+0x2d8>)
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	3301      	adds	r3, #1
 8010752:	b2da      	uxtb	r2, r3
 8010754:	4b17      	ldr	r3, [pc, #92]	@ (80107b4 <_SendPacket+0x2d8>)
 8010756:	701a      	strb	r2, [r3, #0]
 8010758:	e004      	b.n	8010764 <_SendPacket+0x288>
    goto SendDone;
 801075a:	bf00      	nop
 801075c:	e002      	b.n	8010764 <_SendPacket+0x288>
      goto SendDone;
 801075e:	bf00      	nop
 8010760:	e000      	b.n	8010764 <_SendPacket+0x288>
      goto SendDone;
 8010762:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8010764:	4b13      	ldr	r3, [pc, #76]	@ (80107b4 <_SendPacket+0x2d8>)
 8010766:	7e1b      	ldrb	r3, [r3, #24]
 8010768:	4619      	mov	r1, r3
 801076a:	4a13      	ldr	r2, [pc, #76]	@ (80107b8 <_SendPacket+0x2dc>)
 801076c:	460b      	mov	r3, r1
 801076e:	005b      	lsls	r3, r3, #1
 8010770:	440b      	add	r3, r1
 8010772:	00db      	lsls	r3, r3, #3
 8010774:	4413      	add	r3, r2
 8010776:	336c      	adds	r3, #108	@ 0x6c
 8010778:	681a      	ldr	r2, [r3, #0]
 801077a:	4b0e      	ldr	r3, [pc, #56]	@ (80107b4 <_SendPacket+0x2d8>)
 801077c:	7e1b      	ldrb	r3, [r3, #24]
 801077e:	4618      	mov	r0, r3
 8010780:	490d      	ldr	r1, [pc, #52]	@ (80107b8 <_SendPacket+0x2dc>)
 8010782:	4603      	mov	r3, r0
 8010784:	005b      	lsls	r3, r3, #1
 8010786:	4403      	add	r3, r0
 8010788:	00db      	lsls	r3, r3, #3
 801078a:	440b      	add	r3, r1
 801078c:	3370      	adds	r3, #112	@ 0x70
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	429a      	cmp	r2, r3
 8010792:	d00b      	beq.n	80107ac <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8010794:	4b07      	ldr	r3, [pc, #28]	@ (80107b4 <_SendPacket+0x2d8>)
 8010796:	789b      	ldrb	r3, [r3, #2]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d107      	bne.n	80107ac <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 801079c:	4b05      	ldr	r3, [pc, #20]	@ (80107b4 <_SendPacket+0x2d8>)
 801079e:	2201      	movs	r2, #1
 80107a0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80107a2:	f7ff fdb9 	bl	8010318 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80107a6:	4b03      	ldr	r3, [pc, #12]	@ (80107b4 <_SendPacket+0x2d8>)
 80107a8:	2200      	movs	r2, #0
 80107aa:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80107ac:	bf00      	nop
 80107ae:	3728      	adds	r7, #40	@ 0x28
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}
 80107b4:	20016f08 	.word	0x20016f08
 80107b8:	20016a50 	.word	0x20016a50

080107bc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80107c4:	f3ef 8311 	mrs	r3, BASEPRI
 80107c8:	f04f 0120 	mov.w	r1, #32
 80107cc:	f381 8811 	msr	BASEPRI, r1
 80107d0:	60fb      	str	r3, [r7, #12]
 80107d2:	4808      	ldr	r0, [pc, #32]	@ (80107f4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80107d4:	f7ff fd94 	bl	8010300 <_PreparePacket>
 80107d8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80107da:	687a      	ldr	r2, [r7, #4]
 80107dc:	68b9      	ldr	r1, [r7, #8]
 80107de:	68b8      	ldr	r0, [r7, #8]
 80107e0:	f7ff fe7c 	bl	80104dc <_SendPacket>
  RECORD_END();
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	f383 8811 	msr	BASEPRI, r3
}
 80107ea:	bf00      	nop
 80107ec:	3710      	adds	r7, #16
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	20016f38 	.word	0x20016f38

080107f8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b088      	sub	sp, #32
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8010802:	f3ef 8311 	mrs	r3, BASEPRI
 8010806:	f04f 0120 	mov.w	r1, #32
 801080a:	f381 8811 	msr	BASEPRI, r1
 801080e:	617b      	str	r3, [r7, #20]
 8010810:	4816      	ldr	r0, [pc, #88]	@ (801086c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8010812:	f7ff fd75 	bl	8010300 <_PreparePacket>
 8010816:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	61fb      	str	r3, [r7, #28]
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	61bb      	str	r3, [r7, #24]
 8010824:	e00b      	b.n	801083e <SEGGER_SYSVIEW_RecordU32+0x46>
 8010826:	69bb      	ldr	r3, [r7, #24]
 8010828:	b2da      	uxtb	r2, r3
 801082a:	69fb      	ldr	r3, [r7, #28]
 801082c:	1c59      	adds	r1, r3, #1
 801082e:	61f9      	str	r1, [r7, #28]
 8010830:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010834:	b2d2      	uxtb	r2, r2
 8010836:	701a      	strb	r2, [r3, #0]
 8010838:	69bb      	ldr	r3, [r7, #24]
 801083a:	09db      	lsrs	r3, r3, #7
 801083c:	61bb      	str	r3, [r7, #24]
 801083e:	69bb      	ldr	r3, [r7, #24]
 8010840:	2b7f      	cmp	r3, #127	@ 0x7f
 8010842:	d8f0      	bhi.n	8010826 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	1c5a      	adds	r2, r3, #1
 8010848:	61fa      	str	r2, [r7, #28]
 801084a:	69ba      	ldr	r2, [r7, #24]
 801084c:	b2d2      	uxtb	r2, r2
 801084e:	701a      	strb	r2, [r3, #0]
 8010850:	69fb      	ldr	r3, [r7, #28]
 8010852:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	68f9      	ldr	r1, [r7, #12]
 8010858:	6938      	ldr	r0, [r7, #16]
 801085a:	f7ff fe3f 	bl	80104dc <_SendPacket>
  RECORD_END();
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	f383 8811 	msr	BASEPRI, r3
}
 8010864:	bf00      	nop
 8010866:	3720      	adds	r7, #32
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}
 801086c:	20016f38 	.word	0x20016f38

08010870 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8010870:	b580      	push	{r7, lr}
 8010872:	b08c      	sub	sp, #48	@ 0x30
 8010874:	af00      	add	r7, sp, #0
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	60b9      	str	r1, [r7, #8]
 801087a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 801087c:	f3ef 8311 	mrs	r3, BASEPRI
 8010880:	f04f 0120 	mov.w	r1, #32
 8010884:	f381 8811 	msr	BASEPRI, r1
 8010888:	61fb      	str	r3, [r7, #28]
 801088a:	4825      	ldr	r0, [pc, #148]	@ (8010920 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 801088c:	f7ff fd38 	bl	8010300 <_PreparePacket>
 8010890:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8010892:	69bb      	ldr	r3, [r7, #24]
 8010894:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801089e:	e00b      	b.n	80108b8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80108a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a2:	b2da      	uxtb	r2, r3
 80108a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a6:	1c59      	adds	r1, r3, #1
 80108a8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80108aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80108ae:	b2d2      	uxtb	r2, r2
 80108b0:	701a      	strb	r2, [r3, #0]
 80108b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b4:	09db      	lsrs	r3, r3, #7
 80108b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80108bc:	d8f0      	bhi.n	80108a0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80108be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c0:	1c5a      	adds	r2, r3, #1
 80108c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80108c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80108c6:	b2d2      	uxtb	r2, r2
 80108c8:	701a      	strb	r2, [r3, #0]
 80108ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	623b      	str	r3, [r7, #32]
 80108d6:	e00b      	b.n	80108f0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80108d8:	6a3b      	ldr	r3, [r7, #32]
 80108da:	b2da      	uxtb	r2, r3
 80108dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108de:	1c59      	adds	r1, r3, #1
 80108e0:	6279      	str	r1, [r7, #36]	@ 0x24
 80108e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80108e6:	b2d2      	uxtb	r2, r2
 80108e8:	701a      	strb	r2, [r3, #0]
 80108ea:	6a3b      	ldr	r3, [r7, #32]
 80108ec:	09db      	lsrs	r3, r3, #7
 80108ee:	623b      	str	r3, [r7, #32]
 80108f0:	6a3b      	ldr	r3, [r7, #32]
 80108f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80108f4:	d8f0      	bhi.n	80108d8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80108f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108f8:	1c5a      	adds	r2, r3, #1
 80108fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80108fc:	6a3a      	ldr	r2, [r7, #32]
 80108fe:	b2d2      	uxtb	r2, r2
 8010900:	701a      	strb	r2, [r3, #0]
 8010902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010904:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010906:	68fa      	ldr	r2, [r7, #12]
 8010908:	6979      	ldr	r1, [r7, #20]
 801090a:	69b8      	ldr	r0, [r7, #24]
 801090c:	f7ff fde6 	bl	80104dc <_SendPacket>
  RECORD_END();
 8010910:	69fb      	ldr	r3, [r7, #28]
 8010912:	f383 8811 	msr	BASEPRI, r3
}
 8010916:	bf00      	nop
 8010918:	3730      	adds	r7, #48	@ 0x30
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
 801091e:	bf00      	nop
 8010920:	20016f38 	.word	0x20016f38

08010924 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8010924:	b580      	push	{r7, lr}
 8010926:	b08c      	sub	sp, #48	@ 0x30
 8010928:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 801092a:	4b59      	ldr	r3, [pc, #356]	@ (8010a90 <SEGGER_SYSVIEW_Start+0x16c>)
 801092c:	2201      	movs	r2, #1
 801092e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8010930:	f3ef 8311 	mrs	r3, BASEPRI
 8010934:	f04f 0120 	mov.w	r1, #32
 8010938:	f381 8811 	msr	BASEPRI, r1
 801093c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 801093e:	4b54      	ldr	r3, [pc, #336]	@ (8010a90 <SEGGER_SYSVIEW_Start+0x16c>)
 8010940:	785b      	ldrb	r3, [r3, #1]
 8010942:	220a      	movs	r2, #10
 8010944:	4953      	ldr	r1, [pc, #332]	@ (8010a94 <SEGGER_SYSVIEW_Start+0x170>)
 8010946:	4618      	mov	r0, r3
 8010948:	f7ef fc4a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8010952:	f7ff fa77 	bl	800fe44 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8010956:	200a      	movs	r0, #10
 8010958:	f7ff ff30 	bl	80107bc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801095c:	f3ef 8311 	mrs	r3, BASEPRI
 8010960:	f04f 0120 	mov.w	r1, #32
 8010964:	f381 8811 	msr	BASEPRI, r1
 8010968:	60bb      	str	r3, [r7, #8]
 801096a:	484b      	ldr	r0, [pc, #300]	@ (8010a98 <SEGGER_SYSVIEW_Start+0x174>)
 801096c:	f7ff fcc8 	bl	8010300 <_PreparePacket>
 8010970:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801097a:	4b45      	ldr	r3, [pc, #276]	@ (8010a90 <SEGGER_SYSVIEW_Start+0x16c>)
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010980:	e00b      	b.n	801099a <SEGGER_SYSVIEW_Start+0x76>
 8010982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010984:	b2da      	uxtb	r2, r3
 8010986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010988:	1c59      	adds	r1, r3, #1
 801098a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801098c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010990:	b2d2      	uxtb	r2, r2
 8010992:	701a      	strb	r2, [r3, #0]
 8010994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010996:	09db      	lsrs	r3, r3, #7
 8010998:	62bb      	str	r3, [r7, #40]	@ 0x28
 801099a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801099c:	2b7f      	cmp	r3, #127	@ 0x7f
 801099e:	d8f0      	bhi.n	8010982 <SEGGER_SYSVIEW_Start+0x5e>
 80109a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109a2:	1c5a      	adds	r2, r3, #1
 80109a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80109a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80109a8:	b2d2      	uxtb	r2, r2
 80109aa:	701a      	strb	r2, [r3, #0]
 80109ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80109b4:	4b36      	ldr	r3, [pc, #216]	@ (8010a90 <SEGGER_SYSVIEW_Start+0x16c>)
 80109b6:	689b      	ldr	r3, [r3, #8]
 80109b8:	623b      	str	r3, [r7, #32]
 80109ba:	e00b      	b.n	80109d4 <SEGGER_SYSVIEW_Start+0xb0>
 80109bc:	6a3b      	ldr	r3, [r7, #32]
 80109be:	b2da      	uxtb	r2, r3
 80109c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c2:	1c59      	adds	r1, r3, #1
 80109c4:	6279      	str	r1, [r7, #36]	@ 0x24
 80109c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80109ca:	b2d2      	uxtb	r2, r2
 80109cc:	701a      	strb	r2, [r3, #0]
 80109ce:	6a3b      	ldr	r3, [r7, #32]
 80109d0:	09db      	lsrs	r3, r3, #7
 80109d2:	623b      	str	r3, [r7, #32]
 80109d4:	6a3b      	ldr	r3, [r7, #32]
 80109d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80109d8:	d8f0      	bhi.n	80109bc <SEGGER_SYSVIEW_Start+0x98>
 80109da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109dc:	1c5a      	adds	r2, r3, #1
 80109de:	627a      	str	r2, [r7, #36]	@ 0x24
 80109e0:	6a3a      	ldr	r2, [r7, #32]
 80109e2:	b2d2      	uxtb	r2, r2
 80109e4:	701a      	strb	r2, [r3, #0]
 80109e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	61fb      	str	r3, [r7, #28]
 80109ee:	4b28      	ldr	r3, [pc, #160]	@ (8010a90 <SEGGER_SYSVIEW_Start+0x16c>)
 80109f0:	691b      	ldr	r3, [r3, #16]
 80109f2:	61bb      	str	r3, [r7, #24]
 80109f4:	e00b      	b.n	8010a0e <SEGGER_SYSVIEW_Start+0xea>
 80109f6:	69bb      	ldr	r3, [r7, #24]
 80109f8:	b2da      	uxtb	r2, r3
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	1c59      	adds	r1, r3, #1
 80109fe:	61f9      	str	r1, [r7, #28]
 8010a00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010a04:	b2d2      	uxtb	r2, r2
 8010a06:	701a      	strb	r2, [r3, #0]
 8010a08:	69bb      	ldr	r3, [r7, #24]
 8010a0a:	09db      	lsrs	r3, r3, #7
 8010a0c:	61bb      	str	r3, [r7, #24]
 8010a0e:	69bb      	ldr	r3, [r7, #24]
 8010a10:	2b7f      	cmp	r3, #127	@ 0x7f
 8010a12:	d8f0      	bhi.n	80109f6 <SEGGER_SYSVIEW_Start+0xd2>
 8010a14:	69fb      	ldr	r3, [r7, #28]
 8010a16:	1c5a      	adds	r2, r3, #1
 8010a18:	61fa      	str	r2, [r7, #28]
 8010a1a:	69ba      	ldr	r2, [r7, #24]
 8010a1c:	b2d2      	uxtb	r2, r2
 8010a1e:	701a      	strb	r2, [r3, #0]
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	617b      	str	r3, [r7, #20]
 8010a28:	2300      	movs	r3, #0
 8010a2a:	613b      	str	r3, [r7, #16]
 8010a2c:	e00b      	b.n	8010a46 <SEGGER_SYSVIEW_Start+0x122>
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	b2da      	uxtb	r2, r3
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	1c59      	adds	r1, r3, #1
 8010a36:	6179      	str	r1, [r7, #20]
 8010a38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010a3c:	b2d2      	uxtb	r2, r2
 8010a3e:	701a      	strb	r2, [r3, #0]
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	09db      	lsrs	r3, r3, #7
 8010a44:	613b      	str	r3, [r7, #16]
 8010a46:	693b      	ldr	r3, [r7, #16]
 8010a48:	2b7f      	cmp	r3, #127	@ 0x7f
 8010a4a:	d8f0      	bhi.n	8010a2e <SEGGER_SYSVIEW_Start+0x10a>
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	1c5a      	adds	r2, r3, #1
 8010a50:	617a      	str	r2, [r7, #20]
 8010a52:	693a      	ldr	r2, [r7, #16]
 8010a54:	b2d2      	uxtb	r2, r2
 8010a56:	701a      	strb	r2, [r3, #0]
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8010a5c:	2218      	movs	r2, #24
 8010a5e:	6839      	ldr	r1, [r7, #0]
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f7ff fd3b 	bl	80104dc <_SendPacket>
      RECORD_END();
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8010a6c:	4b08      	ldr	r3, [pc, #32]	@ (8010a90 <SEGGER_SYSVIEW_Start+0x16c>)
 8010a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d002      	beq.n	8010a7a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8010a74:	4b06      	ldr	r3, [pc, #24]	@ (8010a90 <SEGGER_SYSVIEW_Start+0x16c>)
 8010a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a78:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8010a7a:	f000 f9c7 	bl	8010e0c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8010a7e:	f000 f9b1 	bl	8010de4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8010a82:	f000 fcfd 	bl	8011480 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8010a86:	bf00      	nop
 8010a88:	3730      	adds	r7, #48	@ 0x30
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}
 8010a8e:	bf00      	nop
 8010a90:	20016f08 	.word	0x20016f08
 8010a94:	08014cf4 	.word	0x08014cf4
 8010a98:	20016f38 	.word	0x20016f38

08010a9c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8010aa2:	f3ef 8311 	mrs	r3, BASEPRI
 8010aa6:	f04f 0120 	mov.w	r1, #32
 8010aaa:	f381 8811 	msr	BASEPRI, r1
 8010aae:	607b      	str	r3, [r7, #4]
 8010ab0:	480b      	ldr	r0, [pc, #44]	@ (8010ae0 <SEGGER_SYSVIEW_Stop+0x44>)
 8010ab2:	f7ff fc25 	bl	8010300 <_PreparePacket>
 8010ab6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8010ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8010ae4 <SEGGER_SYSVIEW_Stop+0x48>)
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d007      	beq.n	8010ad0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8010ac0:	220b      	movs	r2, #11
 8010ac2:	6839      	ldr	r1, [r7, #0]
 8010ac4:	6838      	ldr	r0, [r7, #0]
 8010ac6:	f7ff fd09 	bl	80104dc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8010aca:	4b06      	ldr	r3, [pc, #24]	@ (8010ae4 <SEGGER_SYSVIEW_Stop+0x48>)
 8010acc:	2200      	movs	r2, #0
 8010ace:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f383 8811 	msr	BASEPRI, r3
}
 8010ad6:	bf00      	nop
 8010ad8:	3708      	adds	r7, #8
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}
 8010ade:	bf00      	nop
 8010ae0:	20016f38 	.word	0x20016f38
 8010ae4:	20016f08 	.word	0x20016f08

08010ae8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b08c      	sub	sp, #48	@ 0x30
 8010aec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8010aee:	f3ef 8311 	mrs	r3, BASEPRI
 8010af2:	f04f 0120 	mov.w	r1, #32
 8010af6:	f381 8811 	msr	BASEPRI, r1
 8010afa:	60fb      	str	r3, [r7, #12]
 8010afc:	4845      	ldr	r0, [pc, #276]	@ (8010c14 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8010afe:	f7ff fbff 	bl	8010300 <_PreparePacket>
 8010b02:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b0c:	4b42      	ldr	r3, [pc, #264]	@ (8010c18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010b0e:	685b      	ldr	r3, [r3, #4]
 8010b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b12:	e00b      	b.n	8010b2c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8010b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b16:	b2da      	uxtb	r2, r3
 8010b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b1a:	1c59      	adds	r1, r3, #1
 8010b1c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8010b1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010b22:	b2d2      	uxtb	r2, r2
 8010b24:	701a      	strb	r2, [r3, #0]
 8010b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b28:	09db      	lsrs	r3, r3, #7
 8010b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8010b30:	d8f0      	bhi.n	8010b14 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8010b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b34:	1c5a      	adds	r2, r3, #1
 8010b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010b38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b3a:	b2d2      	uxtb	r2, r2
 8010b3c:	701a      	strb	r2, [r3, #0]
 8010b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b46:	4b34      	ldr	r3, [pc, #208]	@ (8010c18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010b48:	689b      	ldr	r3, [r3, #8]
 8010b4a:	623b      	str	r3, [r7, #32]
 8010b4c:	e00b      	b.n	8010b66 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8010b4e:	6a3b      	ldr	r3, [r7, #32]
 8010b50:	b2da      	uxtb	r2, r3
 8010b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b54:	1c59      	adds	r1, r3, #1
 8010b56:	6279      	str	r1, [r7, #36]	@ 0x24
 8010b58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010b5c:	b2d2      	uxtb	r2, r2
 8010b5e:	701a      	strb	r2, [r3, #0]
 8010b60:	6a3b      	ldr	r3, [r7, #32]
 8010b62:	09db      	lsrs	r3, r3, #7
 8010b64:	623b      	str	r3, [r7, #32]
 8010b66:	6a3b      	ldr	r3, [r7, #32]
 8010b68:	2b7f      	cmp	r3, #127	@ 0x7f
 8010b6a:	d8f0      	bhi.n	8010b4e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8010b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b6e:	1c5a      	adds	r2, r3, #1
 8010b70:	627a      	str	r2, [r7, #36]	@ 0x24
 8010b72:	6a3a      	ldr	r2, [r7, #32]
 8010b74:	b2d2      	uxtb	r2, r2
 8010b76:	701a      	strb	r2, [r3, #0]
 8010b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	61fb      	str	r3, [r7, #28]
 8010b80:	4b25      	ldr	r3, [pc, #148]	@ (8010c18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010b82:	691b      	ldr	r3, [r3, #16]
 8010b84:	61bb      	str	r3, [r7, #24]
 8010b86:	e00b      	b.n	8010ba0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8010b88:	69bb      	ldr	r3, [r7, #24]
 8010b8a:	b2da      	uxtb	r2, r3
 8010b8c:	69fb      	ldr	r3, [r7, #28]
 8010b8e:	1c59      	adds	r1, r3, #1
 8010b90:	61f9      	str	r1, [r7, #28]
 8010b92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010b96:	b2d2      	uxtb	r2, r2
 8010b98:	701a      	strb	r2, [r3, #0]
 8010b9a:	69bb      	ldr	r3, [r7, #24]
 8010b9c:	09db      	lsrs	r3, r3, #7
 8010b9e:	61bb      	str	r3, [r7, #24]
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	2b7f      	cmp	r3, #127	@ 0x7f
 8010ba4:	d8f0      	bhi.n	8010b88 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8010ba6:	69fb      	ldr	r3, [r7, #28]
 8010ba8:	1c5a      	adds	r2, r3, #1
 8010baa:	61fa      	str	r2, [r7, #28]
 8010bac:	69ba      	ldr	r2, [r7, #24]
 8010bae:	b2d2      	uxtb	r2, r2
 8010bb0:	701a      	strb	r2, [r3, #0]
 8010bb2:	69fb      	ldr	r3, [r7, #28]
 8010bb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	617b      	str	r3, [r7, #20]
 8010bba:	2300      	movs	r3, #0
 8010bbc:	613b      	str	r3, [r7, #16]
 8010bbe:	e00b      	b.n	8010bd8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	b2da      	uxtb	r2, r3
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	1c59      	adds	r1, r3, #1
 8010bc8:	6179      	str	r1, [r7, #20]
 8010bca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010bce:	b2d2      	uxtb	r2, r2
 8010bd0:	701a      	strb	r2, [r3, #0]
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	09db      	lsrs	r3, r3, #7
 8010bd6:	613b      	str	r3, [r7, #16]
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	2b7f      	cmp	r3, #127	@ 0x7f
 8010bdc:	d8f0      	bhi.n	8010bc0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	1c5a      	adds	r2, r3, #1
 8010be2:	617a      	str	r2, [r7, #20]
 8010be4:	693a      	ldr	r2, [r7, #16]
 8010be6:	b2d2      	uxtb	r2, r2
 8010be8:	701a      	strb	r2, [r3, #0]
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8010bee:	2218      	movs	r2, #24
 8010bf0:	6879      	ldr	r1, [r7, #4]
 8010bf2:	68b8      	ldr	r0, [r7, #8]
 8010bf4:	f7ff fc72 	bl	80104dc <_SendPacket>
  RECORD_END();
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8010bfe:	4b06      	ldr	r3, [pc, #24]	@ (8010c18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d002      	beq.n	8010c0c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8010c06:	4b04      	ldr	r3, [pc, #16]	@ (8010c18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c0a:	4798      	blx	r3
  }
}
 8010c0c:	bf00      	nop
 8010c0e:	3730      	adds	r7, #48	@ 0x30
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}
 8010c14:	20016f38 	.word	0x20016f38
 8010c18:	20016f08 	.word	0x20016f08

08010c1c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b092      	sub	sp, #72	@ 0x48
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8010c24:	f3ef 8311 	mrs	r3, BASEPRI
 8010c28:	f04f 0120 	mov.w	r1, #32
 8010c2c:	f381 8811 	msr	BASEPRI, r1
 8010c30:	617b      	str	r3, [r7, #20]
 8010c32:	486a      	ldr	r0, [pc, #424]	@ (8010ddc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8010c34:	f7ff fb64 	bl	8010300 <_PreparePacket>
 8010c38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681a      	ldr	r2, [r3, #0]
 8010c46:	4b66      	ldr	r3, [pc, #408]	@ (8010de0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8010c48:	691b      	ldr	r3, [r3, #16]
 8010c4a:	1ad3      	subs	r3, r2, r3
 8010c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8010c4e:	e00b      	b.n	8010c68 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8010c50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c52:	b2da      	uxtb	r2, r3
 8010c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c56:	1c59      	adds	r1, r3, #1
 8010c58:	6479      	str	r1, [r7, #68]	@ 0x44
 8010c5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010c5e:	b2d2      	uxtb	r2, r2
 8010c60:	701a      	strb	r2, [r3, #0]
 8010c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c64:	09db      	lsrs	r3, r3, #7
 8010c66:	643b      	str	r3, [r7, #64]	@ 0x40
 8010c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8010c6c:	d8f0      	bhi.n	8010c50 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8010c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c70:	1c5a      	adds	r2, r3, #1
 8010c72:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010c76:	b2d2      	uxtb	r2, r2
 8010c78:	701a      	strb	r2, [r3, #0]
 8010c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	689b      	ldr	r3, [r3, #8]
 8010c86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010c88:	e00b      	b.n	8010ca2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8010c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c8c:	b2da      	uxtb	r2, r3
 8010c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c90:	1c59      	adds	r1, r3, #1
 8010c92:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8010c94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010c98:	b2d2      	uxtb	r2, r2
 8010c9a:	701a      	strb	r2, [r3, #0]
 8010c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c9e:	09db      	lsrs	r3, r3, #7
 8010ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca4:	2b7f      	cmp	r3, #127	@ 0x7f
 8010ca6:	d8f0      	bhi.n	8010c8a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8010ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010caa:	1c5a      	adds	r2, r3, #1
 8010cac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8010cae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010cb0:	b2d2      	uxtb	r2, r2
 8010cb2:	701a      	strb	r2, [r3, #0]
 8010cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cb6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	2220      	movs	r2, #32
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	68f8      	ldr	r0, [r7, #12]
 8010cc2:	f7ff faed 	bl	80102a0 <_EncodeStr>
 8010cc6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8010cc8:	2209      	movs	r2, #9
 8010cca:	68f9      	ldr	r1, [r7, #12]
 8010ccc:	6938      	ldr	r0, [r7, #16]
 8010cce:	f7ff fc05 	bl	80104dc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681a      	ldr	r2, [r3, #0]
 8010cde:	4b40      	ldr	r3, [pc, #256]	@ (8010de0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8010ce0:	691b      	ldr	r3, [r3, #16]
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ce6:	e00b      	b.n	8010d00 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8010ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cea:	b2da      	uxtb	r2, r3
 8010cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cee:	1c59      	adds	r1, r3, #1
 8010cf0:	6379      	str	r1, [r7, #52]	@ 0x34
 8010cf2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010cf6:	b2d2      	uxtb	r2, r2
 8010cf8:	701a      	strb	r2, [r3, #0]
 8010cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cfc:	09db      	lsrs	r3, r3, #7
 8010cfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d02:	2b7f      	cmp	r3, #127	@ 0x7f
 8010d04:	d8f0      	bhi.n	8010ce8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8010d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d08:	1c5a      	adds	r2, r3, #1
 8010d0a:	637a      	str	r2, [r7, #52]	@ 0x34
 8010d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d0e:	b2d2      	uxtb	r2, r2
 8010d10:	701a      	strb	r2, [r3, #0]
 8010d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	68db      	ldr	r3, [r3, #12]
 8010d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010d20:	e00b      	b.n	8010d3a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8010d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d24:	b2da      	uxtb	r2, r3
 8010d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d28:	1c59      	adds	r1, r3, #1
 8010d2a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8010d2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010d30:	b2d2      	uxtb	r2, r2
 8010d32:	701a      	strb	r2, [r3, #0]
 8010d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d36:	09db      	lsrs	r3, r3, #7
 8010d38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8010d3e:	d8f0      	bhi.n	8010d22 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8010d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d42:	1c5a      	adds	r2, r3, #1
 8010d44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010d46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d48:	b2d2      	uxtb	r2, r2
 8010d4a:	701a      	strb	r2, [r3, #0]
 8010d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d4e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	691b      	ldr	r3, [r3, #16]
 8010d58:	623b      	str	r3, [r7, #32]
 8010d5a:	e00b      	b.n	8010d74 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8010d5c:	6a3b      	ldr	r3, [r7, #32]
 8010d5e:	b2da      	uxtb	r2, r3
 8010d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d62:	1c59      	adds	r1, r3, #1
 8010d64:	6279      	str	r1, [r7, #36]	@ 0x24
 8010d66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010d6a:	b2d2      	uxtb	r2, r2
 8010d6c:	701a      	strb	r2, [r3, #0]
 8010d6e:	6a3b      	ldr	r3, [r7, #32]
 8010d70:	09db      	lsrs	r3, r3, #7
 8010d72:	623b      	str	r3, [r7, #32]
 8010d74:	6a3b      	ldr	r3, [r7, #32]
 8010d76:	2b7f      	cmp	r3, #127	@ 0x7f
 8010d78:	d8f0      	bhi.n	8010d5c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8010d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d7c:	1c5a      	adds	r2, r3, #1
 8010d7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8010d80:	6a3a      	ldr	r2, [r7, #32]
 8010d82:	b2d2      	uxtb	r2, r2
 8010d84:	701a      	strb	r2, [r3, #0]
 8010d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	61fb      	str	r3, [r7, #28]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	695b      	ldr	r3, [r3, #20]
 8010d92:	61bb      	str	r3, [r7, #24]
 8010d94:	e00b      	b.n	8010dae <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	b2da      	uxtb	r2, r3
 8010d9a:	69fb      	ldr	r3, [r7, #28]
 8010d9c:	1c59      	adds	r1, r3, #1
 8010d9e:	61f9      	str	r1, [r7, #28]
 8010da0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010da4:	b2d2      	uxtb	r2, r2
 8010da6:	701a      	strb	r2, [r3, #0]
 8010da8:	69bb      	ldr	r3, [r7, #24]
 8010daa:	09db      	lsrs	r3, r3, #7
 8010dac:	61bb      	str	r3, [r7, #24]
 8010dae:	69bb      	ldr	r3, [r7, #24]
 8010db0:	2b7f      	cmp	r3, #127	@ 0x7f
 8010db2:	d8f0      	bhi.n	8010d96 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	1c5a      	adds	r2, r3, #1
 8010db8:	61fa      	str	r2, [r7, #28]
 8010dba:	69ba      	ldr	r2, [r7, #24]
 8010dbc:	b2d2      	uxtb	r2, r2
 8010dbe:	701a      	strb	r2, [r3, #0]
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8010dc4:	2215      	movs	r2, #21
 8010dc6:	68f9      	ldr	r1, [r7, #12]
 8010dc8:	6938      	ldr	r0, [r7, #16]
 8010dca:	f7ff fb87 	bl	80104dc <_SendPacket>
  RECORD_END();
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	f383 8811 	msr	BASEPRI, r3
}
 8010dd4:	bf00      	nop
 8010dd6:	3748      	adds	r7, #72	@ 0x48
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}
 8010ddc:	20016f38 	.word	0x20016f38
 8010de0:	20016f08 	.word	0x20016f08

08010de4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8010de4:	b580      	push	{r7, lr}
 8010de6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8010de8:	4b07      	ldr	r3, [pc, #28]	@ (8010e08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8010dea:	6a1b      	ldr	r3, [r3, #32]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d008      	beq.n	8010e02 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8010df0:	4b05      	ldr	r3, [pc, #20]	@ (8010e08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8010df2:	6a1b      	ldr	r3, [r3, #32]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d003      	beq.n	8010e02 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8010dfa:	4b03      	ldr	r3, [pc, #12]	@ (8010e08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8010dfc:	6a1b      	ldr	r3, [r3, #32]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	4798      	blx	r3
  }
}
 8010e02:	bf00      	nop
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	20016f08 	.word	0x20016f08

08010e0c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8010e0c:	b590      	push	{r4, r7, lr}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8010e12:	4b15      	ldr	r3, [pc, #84]	@ (8010e68 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8010e14:	6a1b      	ldr	r3, [r3, #32]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d01a      	beq.n	8010e50 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8010e1a:	4b13      	ldr	r3, [pc, #76]	@ (8010e68 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8010e1c:	6a1b      	ldr	r3, [r3, #32]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d015      	beq.n	8010e50 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8010e24:	4b10      	ldr	r3, [pc, #64]	@ (8010e68 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8010e26:	6a1b      	ldr	r3, [r3, #32]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	4798      	blx	r3
 8010e2c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8010e30:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8010e32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010e36:	f04f 0200 	mov.w	r2, #0
 8010e3a:	f04f 0300 	mov.w	r3, #0
 8010e3e:	000a      	movs	r2, r1
 8010e40:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8010e42:	4613      	mov	r3, r2
 8010e44:	461a      	mov	r2, r3
 8010e46:	4621      	mov	r1, r4
 8010e48:	200d      	movs	r0, #13
 8010e4a:	f7ff fd11 	bl	8010870 <SEGGER_SYSVIEW_RecordU32x2>
 8010e4e:	e006      	b.n	8010e5e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8010e50:	4b06      	ldr	r3, [pc, #24]	@ (8010e6c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	4619      	mov	r1, r3
 8010e56:	200c      	movs	r0, #12
 8010e58:	f7ff fcce 	bl	80107f8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8010e5c:	bf00      	nop
 8010e5e:	bf00      	nop
 8010e60:	370c      	adds	r7, #12
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd90      	pop	{r4, r7, pc}
 8010e66:	bf00      	nop
 8010e68:	20016f08 	.word	0x20016f08
 8010e6c:	e0001004 	.word	0xe0001004

08010e70 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b086      	sub	sp, #24
 8010e74:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8010e76:	f3ef 8311 	mrs	r3, BASEPRI
 8010e7a:	f04f 0120 	mov.w	r1, #32
 8010e7e:	f381 8811 	msr	BASEPRI, r1
 8010e82:	60fb      	str	r3, [r7, #12]
 8010e84:	4819      	ldr	r0, [pc, #100]	@ (8010eec <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8010e86:	f7ff fa3b 	bl	8010300 <_PreparePacket>
 8010e8a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8010e90:	4b17      	ldr	r3, [pc, #92]	@ (8010ef0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e98:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	617b      	str	r3, [r7, #20]
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	613b      	str	r3, [r7, #16]
 8010ea2:	e00b      	b.n	8010ebc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8010ea4:	693b      	ldr	r3, [r7, #16]
 8010ea6:	b2da      	uxtb	r2, r3
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	1c59      	adds	r1, r3, #1
 8010eac:	6179      	str	r1, [r7, #20]
 8010eae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010eb2:	b2d2      	uxtb	r2, r2
 8010eb4:	701a      	strb	r2, [r3, #0]
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	09db      	lsrs	r3, r3, #7
 8010eba:	613b      	str	r3, [r7, #16]
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	2b7f      	cmp	r3, #127	@ 0x7f
 8010ec0:	d8f0      	bhi.n	8010ea4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	1c5a      	adds	r2, r3, #1
 8010ec6:	617a      	str	r2, [r7, #20]
 8010ec8:	693a      	ldr	r2, [r7, #16]
 8010eca:	b2d2      	uxtb	r2, r2
 8010ecc:	701a      	strb	r2, [r3, #0]
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8010ed2:	2202      	movs	r2, #2
 8010ed4:	6879      	ldr	r1, [r7, #4]
 8010ed6:	68b8      	ldr	r0, [r7, #8]
 8010ed8:	f7ff fb00 	bl	80104dc <_SendPacket>
  RECORD_END();
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f383 8811 	msr	BASEPRI, r3
}
 8010ee2:	bf00      	nop
 8010ee4:	3718      	adds	r7, #24
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	bf00      	nop
 8010eec:	20016f38 	.word	0x20016f38
 8010ef0:	e000ed04 	.word	0xe000ed04

08010ef4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b082      	sub	sp, #8
 8010ef8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8010efa:	f3ef 8311 	mrs	r3, BASEPRI
 8010efe:	f04f 0120 	mov.w	r1, #32
 8010f02:	f381 8811 	msr	BASEPRI, r1
 8010f06:	607b      	str	r3, [r7, #4]
 8010f08:	4807      	ldr	r0, [pc, #28]	@ (8010f28 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8010f0a:	f7ff f9f9 	bl	8010300 <_PreparePacket>
 8010f0e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8010f10:	2203      	movs	r2, #3
 8010f12:	6839      	ldr	r1, [r7, #0]
 8010f14:	6838      	ldr	r0, [r7, #0]
 8010f16:	f7ff fae1 	bl	80104dc <_SendPacket>
  RECORD_END();
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f383 8811 	msr	BASEPRI, r3
}
 8010f20:	bf00      	nop
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	20016f38 	.word	0x20016f38

08010f2c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8010f32:	f3ef 8311 	mrs	r3, BASEPRI
 8010f36:	f04f 0120 	mov.w	r1, #32
 8010f3a:	f381 8811 	msr	BASEPRI, r1
 8010f3e:	607b      	str	r3, [r7, #4]
 8010f40:	4807      	ldr	r0, [pc, #28]	@ (8010f60 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8010f42:	f7ff f9dd 	bl	8010300 <_PreparePacket>
 8010f46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8010f48:	2212      	movs	r2, #18
 8010f4a:	6839      	ldr	r1, [r7, #0]
 8010f4c:	6838      	ldr	r0, [r7, #0]
 8010f4e:	f7ff fac5 	bl	80104dc <_SendPacket>
  RECORD_END();
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f383 8811 	msr	BASEPRI, r3
}
 8010f58:	bf00      	nop
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	20016f38 	.word	0x20016f38

08010f64 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b088      	sub	sp, #32
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8010f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8010f70:	f04f 0120 	mov.w	r1, #32
 8010f74:	f381 8811 	msr	BASEPRI, r1
 8010f78:	617b      	str	r3, [r7, #20]
 8010f7a:	4817      	ldr	r0, [pc, #92]	@ (8010fd8 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8010f7c:	f7ff f9c0 	bl	8010300 <_PreparePacket>
 8010f80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	61fb      	str	r3, [r7, #28]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	61bb      	str	r3, [r7, #24]
 8010f8e:	e00b      	b.n	8010fa8 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8010f90:	69bb      	ldr	r3, [r7, #24]
 8010f92:	b2da      	uxtb	r2, r3
 8010f94:	69fb      	ldr	r3, [r7, #28]
 8010f96:	1c59      	adds	r1, r3, #1
 8010f98:	61f9      	str	r1, [r7, #28]
 8010f9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010f9e:	b2d2      	uxtb	r2, r2
 8010fa0:	701a      	strb	r2, [r3, #0]
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	09db      	lsrs	r3, r3, #7
 8010fa6:	61bb      	str	r3, [r7, #24]
 8010fa8:	69bb      	ldr	r3, [r7, #24]
 8010faa:	2b7f      	cmp	r3, #127	@ 0x7f
 8010fac:	d8f0      	bhi.n	8010f90 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8010fae:	69fb      	ldr	r3, [r7, #28]
 8010fb0:	1c5a      	adds	r2, r3, #1
 8010fb2:	61fa      	str	r2, [r7, #28]
 8010fb4:	69ba      	ldr	r2, [r7, #24]
 8010fb6:	b2d2      	uxtb	r2, r2
 8010fb8:	701a      	strb	r2, [r3, #0]
 8010fba:	69fb      	ldr	r3, [r7, #28]
 8010fbc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8010fbe:	221c      	movs	r2, #28
 8010fc0:	68f9      	ldr	r1, [r7, #12]
 8010fc2:	6938      	ldr	r0, [r7, #16]
 8010fc4:	f7ff fa8a 	bl	80104dc <_SendPacket>
  RECORD_END();
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	f383 8811 	msr	BASEPRI, r3
}
 8010fce:	bf00      	nop
 8010fd0:	3720      	adds	r7, #32
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	20016f38 	.word	0x20016f38

08010fdc <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b08a      	sub	sp, #40	@ 0x28
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8010fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8010fea:	f04f 0120 	mov.w	r1, #32
 8010fee:	f381 8811 	msr	BASEPRI, r1
 8010ff2:	617b      	str	r3, [r7, #20]
 8010ff4:	4824      	ldr	r0, [pc, #144]	@ (8011088 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8010ff6:	f7ff f983 	bl	8010300 <_PreparePacket>
 8010ffa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	627b      	str	r3, [r7, #36]	@ 0x24
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	623b      	str	r3, [r7, #32]
 8011008:	e00b      	b.n	8011022 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 801100a:	6a3b      	ldr	r3, [r7, #32]
 801100c:	b2da      	uxtb	r2, r3
 801100e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011010:	1c59      	adds	r1, r3, #1
 8011012:	6279      	str	r1, [r7, #36]	@ 0x24
 8011014:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8011018:	b2d2      	uxtb	r2, r2
 801101a:	701a      	strb	r2, [r3, #0]
 801101c:	6a3b      	ldr	r3, [r7, #32]
 801101e:	09db      	lsrs	r3, r3, #7
 8011020:	623b      	str	r3, [r7, #32]
 8011022:	6a3b      	ldr	r3, [r7, #32]
 8011024:	2b7f      	cmp	r3, #127	@ 0x7f
 8011026:	d8f0      	bhi.n	801100a <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8011028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801102a:	1c5a      	adds	r2, r3, #1
 801102c:	627a      	str	r2, [r7, #36]	@ 0x24
 801102e:	6a3a      	ldr	r2, [r7, #32]
 8011030:	b2d2      	uxtb	r2, r2
 8011032:	701a      	strb	r2, [r3, #0]
 8011034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011036:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	61fb      	str	r3, [r7, #28]
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	61bb      	str	r3, [r7, #24]
 8011040:	e00b      	b.n	801105a <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8011042:	69bb      	ldr	r3, [r7, #24]
 8011044:	b2da      	uxtb	r2, r3
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	1c59      	adds	r1, r3, #1
 801104a:	61f9      	str	r1, [r7, #28]
 801104c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8011050:	b2d2      	uxtb	r2, r2
 8011052:	701a      	strb	r2, [r3, #0]
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	09db      	lsrs	r3, r3, #7
 8011058:	61bb      	str	r3, [r7, #24]
 801105a:	69bb      	ldr	r3, [r7, #24]
 801105c:	2b7f      	cmp	r3, #127	@ 0x7f
 801105e:	d8f0      	bhi.n	8011042 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8011060:	69fb      	ldr	r3, [r7, #28]
 8011062:	1c5a      	adds	r2, r3, #1
 8011064:	61fa      	str	r2, [r7, #28]
 8011066:	69ba      	ldr	r2, [r7, #24]
 8011068:	b2d2      	uxtb	r2, r2
 801106a:	701a      	strb	r2, [r3, #0]
 801106c:	69fb      	ldr	r3, [r7, #28]
 801106e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8011070:	221c      	movs	r2, #28
 8011072:	68f9      	ldr	r1, [r7, #12]
 8011074:	6938      	ldr	r0, [r7, #16]
 8011076:	f7ff fa31 	bl	80104dc <_SendPacket>
  RECORD_END();
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	f383 8811 	msr	BASEPRI, r3
}
 8011080:	bf00      	nop
 8011082:	3728      	adds	r7, #40	@ 0x28
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	20016f38 	.word	0x20016f38

0801108c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 801108c:	b580      	push	{r7, lr}
 801108e:	b082      	sub	sp, #8
 8011090:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8011092:	f3ef 8311 	mrs	r3, BASEPRI
 8011096:	f04f 0120 	mov.w	r1, #32
 801109a:	f381 8811 	msr	BASEPRI, r1
 801109e:	607b      	str	r3, [r7, #4]
 80110a0:	4807      	ldr	r0, [pc, #28]	@ (80110c0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80110a2:	f7ff f92d 	bl	8010300 <_PreparePacket>
 80110a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80110a8:	2211      	movs	r2, #17
 80110aa:	6839      	ldr	r1, [r7, #0]
 80110ac:	6838      	ldr	r0, [r7, #0]
 80110ae:	f7ff fa15 	bl	80104dc <_SendPacket>
  RECORD_END();
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f383 8811 	msr	BASEPRI, r3
}
 80110b8:	bf00      	nop
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	20016f38 	.word	0x20016f38

080110c4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b088      	sub	sp, #32
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80110cc:	f3ef 8311 	mrs	r3, BASEPRI
 80110d0:	f04f 0120 	mov.w	r1, #32
 80110d4:	f381 8811 	msr	BASEPRI, r1
 80110d8:	617b      	str	r3, [r7, #20]
 80110da:	4819      	ldr	r0, [pc, #100]	@ (8011140 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80110dc:	f7ff f910 	bl	8010300 <_PreparePacket>
 80110e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80110e6:	4b17      	ldr	r3, [pc, #92]	@ (8011144 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80110e8:	691b      	ldr	r3, [r3, #16]
 80110ea:	687a      	ldr	r2, [r7, #4]
 80110ec:	1ad3      	subs	r3, r2, r3
 80110ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	61fb      	str	r3, [r7, #28]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	61bb      	str	r3, [r7, #24]
 80110f8:	e00b      	b.n	8011112 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80110fa:	69bb      	ldr	r3, [r7, #24]
 80110fc:	b2da      	uxtb	r2, r3
 80110fe:	69fb      	ldr	r3, [r7, #28]
 8011100:	1c59      	adds	r1, r3, #1
 8011102:	61f9      	str	r1, [r7, #28]
 8011104:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8011108:	b2d2      	uxtb	r2, r2
 801110a:	701a      	strb	r2, [r3, #0]
 801110c:	69bb      	ldr	r3, [r7, #24]
 801110e:	09db      	lsrs	r3, r3, #7
 8011110:	61bb      	str	r3, [r7, #24]
 8011112:	69bb      	ldr	r3, [r7, #24]
 8011114:	2b7f      	cmp	r3, #127	@ 0x7f
 8011116:	d8f0      	bhi.n	80110fa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8011118:	69fb      	ldr	r3, [r7, #28]
 801111a:	1c5a      	adds	r2, r3, #1
 801111c:	61fa      	str	r2, [r7, #28]
 801111e:	69ba      	ldr	r2, [r7, #24]
 8011120:	b2d2      	uxtb	r2, r2
 8011122:	701a      	strb	r2, [r3, #0]
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8011128:	2208      	movs	r2, #8
 801112a:	68f9      	ldr	r1, [r7, #12]
 801112c:	6938      	ldr	r0, [r7, #16]
 801112e:	f7ff f9d5 	bl	80104dc <_SendPacket>
  RECORD_END();
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	f383 8811 	msr	BASEPRI, r3
}
 8011138:	bf00      	nop
 801113a:	3720      	adds	r7, #32
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}
 8011140:	20016f38 	.word	0x20016f38
 8011144:	20016f08 	.word	0x20016f08

08011148 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8011148:	b580      	push	{r7, lr}
 801114a:	b088      	sub	sp, #32
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8011150:	f3ef 8311 	mrs	r3, BASEPRI
 8011154:	f04f 0120 	mov.w	r1, #32
 8011158:	f381 8811 	msr	BASEPRI, r1
 801115c:	617b      	str	r3, [r7, #20]
 801115e:	4819      	ldr	r0, [pc, #100]	@ (80111c4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8011160:	f7ff f8ce 	bl	8010300 <_PreparePacket>
 8011164:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8011166:	693b      	ldr	r3, [r7, #16]
 8011168:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801116a:	4b17      	ldr	r3, [pc, #92]	@ (80111c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 801116c:	691b      	ldr	r3, [r3, #16]
 801116e:	687a      	ldr	r2, [r7, #4]
 8011170:	1ad3      	subs	r3, r2, r3
 8011172:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	61fb      	str	r3, [r7, #28]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	61bb      	str	r3, [r7, #24]
 801117c:	e00b      	b.n	8011196 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 801117e:	69bb      	ldr	r3, [r7, #24]
 8011180:	b2da      	uxtb	r2, r3
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	1c59      	adds	r1, r3, #1
 8011186:	61f9      	str	r1, [r7, #28]
 8011188:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801118c:	b2d2      	uxtb	r2, r2
 801118e:	701a      	strb	r2, [r3, #0]
 8011190:	69bb      	ldr	r3, [r7, #24]
 8011192:	09db      	lsrs	r3, r3, #7
 8011194:	61bb      	str	r3, [r7, #24]
 8011196:	69bb      	ldr	r3, [r7, #24]
 8011198:	2b7f      	cmp	r3, #127	@ 0x7f
 801119a:	d8f0      	bhi.n	801117e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	1c5a      	adds	r2, r3, #1
 80111a0:	61fa      	str	r2, [r7, #28]
 80111a2:	69ba      	ldr	r2, [r7, #24]
 80111a4:	b2d2      	uxtb	r2, r2
 80111a6:	701a      	strb	r2, [r3, #0]
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80111ac:	2204      	movs	r2, #4
 80111ae:	68f9      	ldr	r1, [r7, #12]
 80111b0:	6938      	ldr	r0, [r7, #16]
 80111b2:	f7ff f993 	bl	80104dc <_SendPacket>
  RECORD_END();
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	f383 8811 	msr	BASEPRI, r3
}
 80111bc:	bf00      	nop
 80111be:	3720      	adds	r7, #32
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}
 80111c4:	20016f38 	.word	0x20016f38
 80111c8:	20016f08 	.word	0x20016f08

080111cc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b088      	sub	sp, #32
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80111d4:	f3ef 8311 	mrs	r3, BASEPRI
 80111d8:	f04f 0120 	mov.w	r1, #32
 80111dc:	f381 8811 	msr	BASEPRI, r1
 80111e0:	617b      	str	r3, [r7, #20]
 80111e2:	4819      	ldr	r0, [pc, #100]	@ (8011248 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80111e4:	f7ff f88c 	bl	8010300 <_PreparePacket>
 80111e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80111ee:	4b17      	ldr	r3, [pc, #92]	@ (801124c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80111f0:	691b      	ldr	r3, [r3, #16]
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	1ad3      	subs	r3, r2, r3
 80111f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	61fb      	str	r3, [r7, #28]
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	61bb      	str	r3, [r7, #24]
 8011200:	e00b      	b.n	801121a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8011202:	69bb      	ldr	r3, [r7, #24]
 8011204:	b2da      	uxtb	r2, r3
 8011206:	69fb      	ldr	r3, [r7, #28]
 8011208:	1c59      	adds	r1, r3, #1
 801120a:	61f9      	str	r1, [r7, #28]
 801120c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8011210:	b2d2      	uxtb	r2, r2
 8011212:	701a      	strb	r2, [r3, #0]
 8011214:	69bb      	ldr	r3, [r7, #24]
 8011216:	09db      	lsrs	r3, r3, #7
 8011218:	61bb      	str	r3, [r7, #24]
 801121a:	69bb      	ldr	r3, [r7, #24]
 801121c:	2b7f      	cmp	r3, #127	@ 0x7f
 801121e:	d8f0      	bhi.n	8011202 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	1c5a      	adds	r2, r3, #1
 8011224:	61fa      	str	r2, [r7, #28]
 8011226:	69ba      	ldr	r2, [r7, #24]
 8011228:	b2d2      	uxtb	r2, r2
 801122a:	701a      	strb	r2, [r3, #0]
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8011230:	2206      	movs	r2, #6
 8011232:	68f9      	ldr	r1, [r7, #12]
 8011234:	6938      	ldr	r0, [r7, #16]
 8011236:	f7ff f951 	bl	80104dc <_SendPacket>
  RECORD_END();
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	f383 8811 	msr	BASEPRI, r3
}
 8011240:	bf00      	nop
 8011242:	3720      	adds	r7, #32
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	20016f38 	.word	0x20016f38
 801124c:	20016f08 	.word	0x20016f08

08011250 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8011250:	b580      	push	{r7, lr}
 8011252:	b08a      	sub	sp, #40	@ 0x28
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 801125a:	f3ef 8311 	mrs	r3, BASEPRI
 801125e:	f04f 0120 	mov.w	r1, #32
 8011262:	f381 8811 	msr	BASEPRI, r1
 8011266:	617b      	str	r3, [r7, #20]
 8011268:	4827      	ldr	r0, [pc, #156]	@ (8011308 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 801126a:	f7ff f849 	bl	8010300 <_PreparePacket>
 801126e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8011274:	4b25      	ldr	r3, [pc, #148]	@ (801130c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8011276:	691b      	ldr	r3, [r3, #16]
 8011278:	687a      	ldr	r2, [r7, #4]
 801127a:	1ad3      	subs	r3, r2, r3
 801127c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	627b      	str	r3, [r7, #36]	@ 0x24
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	623b      	str	r3, [r7, #32]
 8011286:	e00b      	b.n	80112a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8011288:	6a3b      	ldr	r3, [r7, #32]
 801128a:	b2da      	uxtb	r2, r3
 801128c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801128e:	1c59      	adds	r1, r3, #1
 8011290:	6279      	str	r1, [r7, #36]	@ 0x24
 8011292:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8011296:	b2d2      	uxtb	r2, r2
 8011298:	701a      	strb	r2, [r3, #0]
 801129a:	6a3b      	ldr	r3, [r7, #32]
 801129c:	09db      	lsrs	r3, r3, #7
 801129e:	623b      	str	r3, [r7, #32]
 80112a0:	6a3b      	ldr	r3, [r7, #32]
 80112a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80112a4:	d8f0      	bhi.n	8011288 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80112a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112a8:	1c5a      	adds	r2, r3, #1
 80112aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80112ac:	6a3a      	ldr	r2, [r7, #32]
 80112ae:	b2d2      	uxtb	r2, r2
 80112b0:	701a      	strb	r2, [r3, #0]
 80112b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	61fb      	str	r3, [r7, #28]
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	61bb      	str	r3, [r7, #24]
 80112be:	e00b      	b.n	80112d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80112c0:	69bb      	ldr	r3, [r7, #24]
 80112c2:	b2da      	uxtb	r2, r3
 80112c4:	69fb      	ldr	r3, [r7, #28]
 80112c6:	1c59      	adds	r1, r3, #1
 80112c8:	61f9      	str	r1, [r7, #28]
 80112ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80112ce:	b2d2      	uxtb	r2, r2
 80112d0:	701a      	strb	r2, [r3, #0]
 80112d2:	69bb      	ldr	r3, [r7, #24]
 80112d4:	09db      	lsrs	r3, r3, #7
 80112d6:	61bb      	str	r3, [r7, #24]
 80112d8:	69bb      	ldr	r3, [r7, #24]
 80112da:	2b7f      	cmp	r3, #127	@ 0x7f
 80112dc:	d8f0      	bhi.n	80112c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80112de:	69fb      	ldr	r3, [r7, #28]
 80112e0:	1c5a      	adds	r2, r3, #1
 80112e2:	61fa      	str	r2, [r7, #28]
 80112e4:	69ba      	ldr	r2, [r7, #24]
 80112e6:	b2d2      	uxtb	r2, r2
 80112e8:	701a      	strb	r2, [r3, #0]
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80112ee:	2207      	movs	r2, #7
 80112f0:	68f9      	ldr	r1, [r7, #12]
 80112f2:	6938      	ldr	r0, [r7, #16]
 80112f4:	f7ff f8f2 	bl	80104dc <_SendPacket>
  RECORD_END();
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	f383 8811 	msr	BASEPRI, r3
}
 80112fe:	bf00      	nop
 8011300:	3728      	adds	r7, #40	@ 0x28
 8011302:	46bd      	mov	sp, r7
 8011304:	bd80      	pop	{r7, pc}
 8011306:	bf00      	nop
 8011308:	20016f38 	.word	0x20016f38
 801130c:	20016f08 	.word	0x20016f08

08011310 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8011310:	b480      	push	{r7}
 8011312:	b083      	sub	sp, #12
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8011318:	4b04      	ldr	r3, [pc, #16]	@ (801132c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 801131a:	691b      	ldr	r3, [r3, #16]
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	1ad3      	subs	r3, r2, r3
}
 8011320:	4618      	mov	r0, r3
 8011322:	370c      	adds	r7, #12
 8011324:	46bd      	mov	sp, r7
 8011326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132a:	4770      	bx	lr
 801132c:	20016f08 	.word	0x20016f08

08011330 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8011330:	b580      	push	{r7, lr}
 8011332:	b08c      	sub	sp, #48	@ 0x30
 8011334:	af00      	add	r7, sp, #0
 8011336:	4603      	mov	r3, r0
 8011338:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 801133a:	4b40      	ldr	r3, [pc, #256]	@ (801143c <SEGGER_SYSVIEW_SendModule+0x10c>)
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d077      	beq.n	8011432 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8011342:	4b3e      	ldr	r3, [pc, #248]	@ (801143c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8011348:	2300      	movs	r3, #0
 801134a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801134c:	e008      	b.n	8011360 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 801134e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011350:	691b      	ldr	r3, [r3, #16]
 8011352:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8011354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011356:	2b00      	cmp	r3, #0
 8011358:	d007      	beq.n	801136a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 801135a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801135c:	3301      	adds	r3, #1
 801135e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011360:	79fb      	ldrb	r3, [r7, #7]
 8011362:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011364:	429a      	cmp	r2, r3
 8011366:	d3f2      	bcc.n	801134e <SEGGER_SYSVIEW_SendModule+0x1e>
 8011368:	e000      	b.n	801136c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 801136a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 801136c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801136e:	2b00      	cmp	r3, #0
 8011370:	d055      	beq.n	801141e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8011372:	f3ef 8311 	mrs	r3, BASEPRI
 8011376:	f04f 0120 	mov.w	r1, #32
 801137a:	f381 8811 	msr	BASEPRI, r1
 801137e:	617b      	str	r3, [r7, #20]
 8011380:	482f      	ldr	r0, [pc, #188]	@ (8011440 <SEGGER_SYSVIEW_SendModule+0x110>)
 8011382:	f7fe ffbd 	bl	8010300 <_PreparePacket>
 8011386:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011390:	79fb      	ldrb	r3, [r7, #7]
 8011392:	623b      	str	r3, [r7, #32]
 8011394:	e00b      	b.n	80113ae <SEGGER_SYSVIEW_SendModule+0x7e>
 8011396:	6a3b      	ldr	r3, [r7, #32]
 8011398:	b2da      	uxtb	r2, r3
 801139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801139c:	1c59      	adds	r1, r3, #1
 801139e:	6279      	str	r1, [r7, #36]	@ 0x24
 80113a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80113a4:	b2d2      	uxtb	r2, r2
 80113a6:	701a      	strb	r2, [r3, #0]
 80113a8:	6a3b      	ldr	r3, [r7, #32]
 80113aa:	09db      	lsrs	r3, r3, #7
 80113ac:	623b      	str	r3, [r7, #32]
 80113ae:	6a3b      	ldr	r3, [r7, #32]
 80113b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80113b2:	d8f0      	bhi.n	8011396 <SEGGER_SYSVIEW_SendModule+0x66>
 80113b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113b6:	1c5a      	adds	r2, r3, #1
 80113b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80113ba:	6a3a      	ldr	r2, [r7, #32]
 80113bc:	b2d2      	uxtb	r2, r2
 80113be:	701a      	strb	r2, [r3, #0]
 80113c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113c2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	61fb      	str	r3, [r7, #28]
 80113c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ca:	689b      	ldr	r3, [r3, #8]
 80113cc:	61bb      	str	r3, [r7, #24]
 80113ce:	e00b      	b.n	80113e8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80113d0:	69bb      	ldr	r3, [r7, #24]
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	69fb      	ldr	r3, [r7, #28]
 80113d6:	1c59      	adds	r1, r3, #1
 80113d8:	61f9      	str	r1, [r7, #28]
 80113da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80113de:	b2d2      	uxtb	r2, r2
 80113e0:	701a      	strb	r2, [r3, #0]
 80113e2:	69bb      	ldr	r3, [r7, #24]
 80113e4:	09db      	lsrs	r3, r3, #7
 80113e6:	61bb      	str	r3, [r7, #24]
 80113e8:	69bb      	ldr	r3, [r7, #24]
 80113ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80113ec:	d8f0      	bhi.n	80113d0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80113ee:	69fb      	ldr	r3, [r7, #28]
 80113f0:	1c5a      	adds	r2, r3, #1
 80113f2:	61fa      	str	r2, [r7, #28]
 80113f4:	69ba      	ldr	r2, [r7, #24]
 80113f6:	b2d2      	uxtb	r2, r2
 80113f8:	701a      	strb	r2, [r3, #0]
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80113fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2280      	movs	r2, #128	@ 0x80
 8011404:	4619      	mov	r1, r3
 8011406:	68f8      	ldr	r0, [r7, #12]
 8011408:	f7fe ff4a 	bl	80102a0 <_EncodeStr>
 801140c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 801140e:	2216      	movs	r2, #22
 8011410:	68f9      	ldr	r1, [r7, #12]
 8011412:	6938      	ldr	r0, [r7, #16]
 8011414:	f7ff f862 	bl	80104dc <_SendPacket>
      RECORD_END();
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 801141e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011420:	2b00      	cmp	r3, #0
 8011422:	d006      	beq.n	8011432 <SEGGER_SYSVIEW_SendModule+0x102>
 8011424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011426:	68db      	ldr	r3, [r3, #12]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d002      	beq.n	8011432 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 801142c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801142e:	68db      	ldr	r3, [r3, #12]
 8011430:	4798      	blx	r3
    }
  }
}
 8011432:	bf00      	nop
 8011434:	3730      	adds	r7, #48	@ 0x30
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
 801143a:	bf00      	nop
 801143c:	20016f30 	.word	0x20016f30
 8011440:	20016f38 	.word	0x20016f38

08011444 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8011444:	b580      	push	{r7, lr}
 8011446:	b082      	sub	sp, #8
 8011448:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 801144a:	4b0c      	ldr	r3, [pc, #48]	@ (801147c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d00f      	beq.n	8011472 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8011452:	4b0a      	ldr	r3, [pc, #40]	@ (801147c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	68db      	ldr	r3, [r3, #12]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d002      	beq.n	8011466 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	691b      	ldr	r3, [r3, #16]
 801146a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d1f2      	bne.n	8011458 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8011472:	bf00      	nop
 8011474:	3708      	adds	r7, #8
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
 801147a:	bf00      	nop
 801147c:	20016f30 	.word	0x20016f30

08011480 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8011480:	b580      	push	{r7, lr}
 8011482:	b086      	sub	sp, #24
 8011484:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8011486:	f3ef 8311 	mrs	r3, BASEPRI
 801148a:	f04f 0120 	mov.w	r1, #32
 801148e:	f381 8811 	msr	BASEPRI, r1
 8011492:	60fb      	str	r3, [r7, #12]
 8011494:	4817      	ldr	r0, [pc, #92]	@ (80114f4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8011496:	f7fe ff33 	bl	8010300 <_PreparePacket>
 801149a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	617b      	str	r3, [r7, #20]
 80114a4:	4b14      	ldr	r3, [pc, #80]	@ (80114f8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	613b      	str	r3, [r7, #16]
 80114aa:	e00b      	b.n	80114c4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	b2da      	uxtb	r2, r3
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	1c59      	adds	r1, r3, #1
 80114b4:	6179      	str	r1, [r7, #20]
 80114b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80114ba:	b2d2      	uxtb	r2, r2
 80114bc:	701a      	strb	r2, [r3, #0]
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	09db      	lsrs	r3, r3, #7
 80114c2:	613b      	str	r3, [r7, #16]
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80114c8:	d8f0      	bhi.n	80114ac <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	1c5a      	adds	r2, r3, #1
 80114ce:	617a      	str	r2, [r7, #20]
 80114d0:	693a      	ldr	r2, [r7, #16]
 80114d2:	b2d2      	uxtb	r2, r2
 80114d4:	701a      	strb	r2, [r3, #0]
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80114da:	221b      	movs	r2, #27
 80114dc:	6879      	ldr	r1, [r7, #4]
 80114de:	68b8      	ldr	r0, [r7, #8]
 80114e0:	f7fe fffc 	bl	80104dc <_SendPacket>
  RECORD_END();
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f383 8811 	msr	BASEPRI, r3
}
 80114ea:	bf00      	nop
 80114ec:	3718      	adds	r7, #24
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	20016f38 	.word	0x20016f38
 80114f8:	20016f34 	.word	0x20016f34

080114fc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b08a      	sub	sp, #40	@ 0x28
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8011504:	f3ef 8311 	mrs	r3, BASEPRI
 8011508:	f04f 0120 	mov.w	r1, #32
 801150c:	f381 8811 	msr	BASEPRI, r1
 8011510:	617b      	str	r3, [r7, #20]
 8011512:	4827      	ldr	r0, [pc, #156]	@ (80115b0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8011514:	f7fe fef4 	bl	8010300 <_PreparePacket>
 8011518:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801151a:	2280      	movs	r2, #128	@ 0x80
 801151c:	6879      	ldr	r1, [r7, #4]
 801151e:	6938      	ldr	r0, [r7, #16]
 8011520:	f7fe febe 	bl	80102a0 <_EncodeStr>
 8011524:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	627b      	str	r3, [r7, #36]	@ 0x24
 801152a:	2301      	movs	r3, #1
 801152c:	623b      	str	r3, [r7, #32]
 801152e:	e00b      	b.n	8011548 <SEGGER_SYSVIEW_Warn+0x4c>
 8011530:	6a3b      	ldr	r3, [r7, #32]
 8011532:	b2da      	uxtb	r2, r3
 8011534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011536:	1c59      	adds	r1, r3, #1
 8011538:	6279      	str	r1, [r7, #36]	@ 0x24
 801153a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801153e:	b2d2      	uxtb	r2, r2
 8011540:	701a      	strb	r2, [r3, #0]
 8011542:	6a3b      	ldr	r3, [r7, #32]
 8011544:	09db      	lsrs	r3, r3, #7
 8011546:	623b      	str	r3, [r7, #32]
 8011548:	6a3b      	ldr	r3, [r7, #32]
 801154a:	2b7f      	cmp	r3, #127	@ 0x7f
 801154c:	d8f0      	bhi.n	8011530 <SEGGER_SYSVIEW_Warn+0x34>
 801154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011550:	1c5a      	adds	r2, r3, #1
 8011552:	627a      	str	r2, [r7, #36]	@ 0x24
 8011554:	6a3a      	ldr	r2, [r7, #32]
 8011556:	b2d2      	uxtb	r2, r2
 8011558:	701a      	strb	r2, [r3, #0]
 801155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801155c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	61fb      	str	r3, [r7, #28]
 8011562:	2300      	movs	r3, #0
 8011564:	61bb      	str	r3, [r7, #24]
 8011566:	e00b      	b.n	8011580 <SEGGER_SYSVIEW_Warn+0x84>
 8011568:	69bb      	ldr	r3, [r7, #24]
 801156a:	b2da      	uxtb	r2, r3
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	1c59      	adds	r1, r3, #1
 8011570:	61f9      	str	r1, [r7, #28]
 8011572:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8011576:	b2d2      	uxtb	r2, r2
 8011578:	701a      	strb	r2, [r3, #0]
 801157a:	69bb      	ldr	r3, [r7, #24]
 801157c:	09db      	lsrs	r3, r3, #7
 801157e:	61bb      	str	r3, [r7, #24]
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	2b7f      	cmp	r3, #127	@ 0x7f
 8011584:	d8f0      	bhi.n	8011568 <SEGGER_SYSVIEW_Warn+0x6c>
 8011586:	69fb      	ldr	r3, [r7, #28]
 8011588:	1c5a      	adds	r2, r3, #1
 801158a:	61fa      	str	r2, [r7, #28]
 801158c:	69ba      	ldr	r2, [r7, #24]
 801158e:	b2d2      	uxtb	r2, r2
 8011590:	701a      	strb	r2, [r3, #0]
 8011592:	69fb      	ldr	r3, [r7, #28]
 8011594:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8011596:	221a      	movs	r2, #26
 8011598:	68f9      	ldr	r1, [r7, #12]
 801159a:	6938      	ldr	r0, [r7, #16]
 801159c:	f7fe ff9e 	bl	80104dc <_SendPacket>
  RECORD_END();
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	f383 8811 	msr	BASEPRI, r3
}
 80115a6:	bf00      	nop
 80115a8:	3728      	adds	r7, #40	@ 0x28
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	20016f38 	.word	0x20016f38

080115b4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b084      	sub	sp, #16
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	607a      	str	r2, [r7, #4]
 80115c0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80115c2:	683a      	ldr	r2, [r7, #0]
 80115c4:	6879      	ldr	r1, [r7, #4]
 80115c6:	2000      	movs	r0, #0
 80115c8:	f7fe fe44 	bl	8010254 <SEGGER_RTT_Write>
  return len;
 80115cc:	683b      	ldr	r3, [r7, #0]
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3710      	adds	r7, #16
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}

080115d6 <__cvt>:
 80115d6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80115da:	ec57 6b10 	vmov	r6, r7, d0
 80115de:	2f00      	cmp	r7, #0
 80115e0:	460c      	mov	r4, r1
 80115e2:	4619      	mov	r1, r3
 80115e4:	463b      	mov	r3, r7
 80115e6:	bfbb      	ittet	lt
 80115e8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80115ec:	461f      	movlt	r7, r3
 80115ee:	2300      	movge	r3, #0
 80115f0:	232d      	movlt	r3, #45	@ 0x2d
 80115f2:	700b      	strb	r3, [r1, #0]
 80115f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80115f6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80115fa:	4691      	mov	r9, r2
 80115fc:	f023 0820 	bic.w	r8, r3, #32
 8011600:	bfbc      	itt	lt
 8011602:	4632      	movlt	r2, r6
 8011604:	4616      	movlt	r6, r2
 8011606:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801160a:	d005      	beq.n	8011618 <__cvt+0x42>
 801160c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011610:	d100      	bne.n	8011614 <__cvt+0x3e>
 8011612:	3401      	adds	r4, #1
 8011614:	2102      	movs	r1, #2
 8011616:	e000      	b.n	801161a <__cvt+0x44>
 8011618:	2103      	movs	r1, #3
 801161a:	ab03      	add	r3, sp, #12
 801161c:	9301      	str	r3, [sp, #4]
 801161e:	ab02      	add	r3, sp, #8
 8011620:	9300      	str	r3, [sp, #0]
 8011622:	ec47 6b10 	vmov	d0, r6, r7
 8011626:	4653      	mov	r3, sl
 8011628:	4622      	mov	r2, r4
 801162a:	f000 fe85 	bl	8012338 <_dtoa_r>
 801162e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011632:	4605      	mov	r5, r0
 8011634:	d119      	bne.n	801166a <__cvt+0x94>
 8011636:	f019 0f01 	tst.w	r9, #1
 801163a:	d00e      	beq.n	801165a <__cvt+0x84>
 801163c:	eb00 0904 	add.w	r9, r0, r4
 8011640:	2200      	movs	r2, #0
 8011642:	2300      	movs	r3, #0
 8011644:	4630      	mov	r0, r6
 8011646:	4639      	mov	r1, r7
 8011648:	f7ef fa9e 	bl	8000b88 <__aeabi_dcmpeq>
 801164c:	b108      	cbz	r0, 8011652 <__cvt+0x7c>
 801164e:	f8cd 900c 	str.w	r9, [sp, #12]
 8011652:	2230      	movs	r2, #48	@ 0x30
 8011654:	9b03      	ldr	r3, [sp, #12]
 8011656:	454b      	cmp	r3, r9
 8011658:	d31e      	bcc.n	8011698 <__cvt+0xc2>
 801165a:	9b03      	ldr	r3, [sp, #12]
 801165c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801165e:	1b5b      	subs	r3, r3, r5
 8011660:	4628      	mov	r0, r5
 8011662:	6013      	str	r3, [r2, #0]
 8011664:	b004      	add	sp, #16
 8011666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801166a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801166e:	eb00 0904 	add.w	r9, r0, r4
 8011672:	d1e5      	bne.n	8011640 <__cvt+0x6a>
 8011674:	7803      	ldrb	r3, [r0, #0]
 8011676:	2b30      	cmp	r3, #48	@ 0x30
 8011678:	d10a      	bne.n	8011690 <__cvt+0xba>
 801167a:	2200      	movs	r2, #0
 801167c:	2300      	movs	r3, #0
 801167e:	4630      	mov	r0, r6
 8011680:	4639      	mov	r1, r7
 8011682:	f7ef fa81 	bl	8000b88 <__aeabi_dcmpeq>
 8011686:	b918      	cbnz	r0, 8011690 <__cvt+0xba>
 8011688:	f1c4 0401 	rsb	r4, r4, #1
 801168c:	f8ca 4000 	str.w	r4, [sl]
 8011690:	f8da 3000 	ldr.w	r3, [sl]
 8011694:	4499      	add	r9, r3
 8011696:	e7d3      	b.n	8011640 <__cvt+0x6a>
 8011698:	1c59      	adds	r1, r3, #1
 801169a:	9103      	str	r1, [sp, #12]
 801169c:	701a      	strb	r2, [r3, #0]
 801169e:	e7d9      	b.n	8011654 <__cvt+0x7e>

080116a0 <__exponent>:
 80116a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116a2:	2900      	cmp	r1, #0
 80116a4:	bfba      	itte	lt
 80116a6:	4249      	neglt	r1, r1
 80116a8:	232d      	movlt	r3, #45	@ 0x2d
 80116aa:	232b      	movge	r3, #43	@ 0x2b
 80116ac:	2909      	cmp	r1, #9
 80116ae:	7002      	strb	r2, [r0, #0]
 80116b0:	7043      	strb	r3, [r0, #1]
 80116b2:	dd29      	ble.n	8011708 <__exponent+0x68>
 80116b4:	f10d 0307 	add.w	r3, sp, #7
 80116b8:	461d      	mov	r5, r3
 80116ba:	270a      	movs	r7, #10
 80116bc:	461a      	mov	r2, r3
 80116be:	fbb1 f6f7 	udiv	r6, r1, r7
 80116c2:	fb07 1416 	mls	r4, r7, r6, r1
 80116c6:	3430      	adds	r4, #48	@ 0x30
 80116c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80116cc:	460c      	mov	r4, r1
 80116ce:	2c63      	cmp	r4, #99	@ 0x63
 80116d0:	f103 33ff 	add.w	r3, r3, #4294967295
 80116d4:	4631      	mov	r1, r6
 80116d6:	dcf1      	bgt.n	80116bc <__exponent+0x1c>
 80116d8:	3130      	adds	r1, #48	@ 0x30
 80116da:	1e94      	subs	r4, r2, #2
 80116dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80116e0:	1c41      	adds	r1, r0, #1
 80116e2:	4623      	mov	r3, r4
 80116e4:	42ab      	cmp	r3, r5
 80116e6:	d30a      	bcc.n	80116fe <__exponent+0x5e>
 80116e8:	f10d 0309 	add.w	r3, sp, #9
 80116ec:	1a9b      	subs	r3, r3, r2
 80116ee:	42ac      	cmp	r4, r5
 80116f0:	bf88      	it	hi
 80116f2:	2300      	movhi	r3, #0
 80116f4:	3302      	adds	r3, #2
 80116f6:	4403      	add	r3, r0
 80116f8:	1a18      	subs	r0, r3, r0
 80116fa:	b003      	add	sp, #12
 80116fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011702:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011706:	e7ed      	b.n	80116e4 <__exponent+0x44>
 8011708:	2330      	movs	r3, #48	@ 0x30
 801170a:	3130      	adds	r1, #48	@ 0x30
 801170c:	7083      	strb	r3, [r0, #2]
 801170e:	70c1      	strb	r1, [r0, #3]
 8011710:	1d03      	adds	r3, r0, #4
 8011712:	e7f1      	b.n	80116f8 <__exponent+0x58>

08011714 <_printf_float>:
 8011714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011718:	b08d      	sub	sp, #52	@ 0x34
 801171a:	460c      	mov	r4, r1
 801171c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011720:	4616      	mov	r6, r2
 8011722:	461f      	mov	r7, r3
 8011724:	4605      	mov	r5, r0
 8011726:	f000 fd0b 	bl	8012140 <_localeconv_r>
 801172a:	6803      	ldr	r3, [r0, #0]
 801172c:	9304      	str	r3, [sp, #16]
 801172e:	4618      	mov	r0, r3
 8011730:	f7ee fdfe 	bl	8000330 <strlen>
 8011734:	2300      	movs	r3, #0
 8011736:	930a      	str	r3, [sp, #40]	@ 0x28
 8011738:	f8d8 3000 	ldr.w	r3, [r8]
 801173c:	9005      	str	r0, [sp, #20]
 801173e:	3307      	adds	r3, #7
 8011740:	f023 0307 	bic.w	r3, r3, #7
 8011744:	f103 0208 	add.w	r2, r3, #8
 8011748:	f894 a018 	ldrb.w	sl, [r4, #24]
 801174c:	f8d4 b000 	ldr.w	fp, [r4]
 8011750:	f8c8 2000 	str.w	r2, [r8]
 8011754:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011758:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801175c:	9307      	str	r3, [sp, #28]
 801175e:	f8cd 8018 	str.w	r8, [sp, #24]
 8011762:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801176a:	4b9c      	ldr	r3, [pc, #624]	@ (80119dc <_printf_float+0x2c8>)
 801176c:	f04f 32ff 	mov.w	r2, #4294967295
 8011770:	f7ef fa3c 	bl	8000bec <__aeabi_dcmpun>
 8011774:	bb70      	cbnz	r0, 80117d4 <_printf_float+0xc0>
 8011776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801177a:	4b98      	ldr	r3, [pc, #608]	@ (80119dc <_printf_float+0x2c8>)
 801177c:	f04f 32ff 	mov.w	r2, #4294967295
 8011780:	f7ef fa16 	bl	8000bb0 <__aeabi_dcmple>
 8011784:	bb30      	cbnz	r0, 80117d4 <_printf_float+0xc0>
 8011786:	2200      	movs	r2, #0
 8011788:	2300      	movs	r3, #0
 801178a:	4640      	mov	r0, r8
 801178c:	4649      	mov	r1, r9
 801178e:	f7ef fa05 	bl	8000b9c <__aeabi_dcmplt>
 8011792:	b110      	cbz	r0, 801179a <_printf_float+0x86>
 8011794:	232d      	movs	r3, #45	@ 0x2d
 8011796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801179a:	4a91      	ldr	r2, [pc, #580]	@ (80119e0 <_printf_float+0x2cc>)
 801179c:	4b91      	ldr	r3, [pc, #580]	@ (80119e4 <_printf_float+0x2d0>)
 801179e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80117a2:	bf94      	ite	ls
 80117a4:	4690      	movls	r8, r2
 80117a6:	4698      	movhi	r8, r3
 80117a8:	2303      	movs	r3, #3
 80117aa:	6123      	str	r3, [r4, #16]
 80117ac:	f02b 0304 	bic.w	r3, fp, #4
 80117b0:	6023      	str	r3, [r4, #0]
 80117b2:	f04f 0900 	mov.w	r9, #0
 80117b6:	9700      	str	r7, [sp, #0]
 80117b8:	4633      	mov	r3, r6
 80117ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80117bc:	4621      	mov	r1, r4
 80117be:	4628      	mov	r0, r5
 80117c0:	f000 f9d2 	bl	8011b68 <_printf_common>
 80117c4:	3001      	adds	r0, #1
 80117c6:	f040 808d 	bne.w	80118e4 <_printf_float+0x1d0>
 80117ca:	f04f 30ff 	mov.w	r0, #4294967295
 80117ce:	b00d      	add	sp, #52	@ 0x34
 80117d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117d4:	4642      	mov	r2, r8
 80117d6:	464b      	mov	r3, r9
 80117d8:	4640      	mov	r0, r8
 80117da:	4649      	mov	r1, r9
 80117dc:	f7ef fa06 	bl	8000bec <__aeabi_dcmpun>
 80117e0:	b140      	cbz	r0, 80117f4 <_printf_float+0xe0>
 80117e2:	464b      	mov	r3, r9
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	bfbc      	itt	lt
 80117e8:	232d      	movlt	r3, #45	@ 0x2d
 80117ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80117ee:	4a7e      	ldr	r2, [pc, #504]	@ (80119e8 <_printf_float+0x2d4>)
 80117f0:	4b7e      	ldr	r3, [pc, #504]	@ (80119ec <_printf_float+0x2d8>)
 80117f2:	e7d4      	b.n	801179e <_printf_float+0x8a>
 80117f4:	6863      	ldr	r3, [r4, #4]
 80117f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80117fa:	9206      	str	r2, [sp, #24]
 80117fc:	1c5a      	adds	r2, r3, #1
 80117fe:	d13b      	bne.n	8011878 <_printf_float+0x164>
 8011800:	2306      	movs	r3, #6
 8011802:	6063      	str	r3, [r4, #4]
 8011804:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011808:	2300      	movs	r3, #0
 801180a:	6022      	str	r2, [r4, #0]
 801180c:	9303      	str	r3, [sp, #12]
 801180e:	ab0a      	add	r3, sp, #40	@ 0x28
 8011810:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011814:	ab09      	add	r3, sp, #36	@ 0x24
 8011816:	9300      	str	r3, [sp, #0]
 8011818:	6861      	ldr	r1, [r4, #4]
 801181a:	ec49 8b10 	vmov	d0, r8, r9
 801181e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011822:	4628      	mov	r0, r5
 8011824:	f7ff fed7 	bl	80115d6 <__cvt>
 8011828:	9b06      	ldr	r3, [sp, #24]
 801182a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801182c:	2b47      	cmp	r3, #71	@ 0x47
 801182e:	4680      	mov	r8, r0
 8011830:	d129      	bne.n	8011886 <_printf_float+0x172>
 8011832:	1cc8      	adds	r0, r1, #3
 8011834:	db02      	blt.n	801183c <_printf_float+0x128>
 8011836:	6863      	ldr	r3, [r4, #4]
 8011838:	4299      	cmp	r1, r3
 801183a:	dd41      	ble.n	80118c0 <_printf_float+0x1ac>
 801183c:	f1aa 0a02 	sub.w	sl, sl, #2
 8011840:	fa5f fa8a 	uxtb.w	sl, sl
 8011844:	3901      	subs	r1, #1
 8011846:	4652      	mov	r2, sl
 8011848:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801184c:	9109      	str	r1, [sp, #36]	@ 0x24
 801184e:	f7ff ff27 	bl	80116a0 <__exponent>
 8011852:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011854:	1813      	adds	r3, r2, r0
 8011856:	2a01      	cmp	r2, #1
 8011858:	4681      	mov	r9, r0
 801185a:	6123      	str	r3, [r4, #16]
 801185c:	dc02      	bgt.n	8011864 <_printf_float+0x150>
 801185e:	6822      	ldr	r2, [r4, #0]
 8011860:	07d2      	lsls	r2, r2, #31
 8011862:	d501      	bpl.n	8011868 <_printf_float+0x154>
 8011864:	3301      	adds	r3, #1
 8011866:	6123      	str	r3, [r4, #16]
 8011868:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801186c:	2b00      	cmp	r3, #0
 801186e:	d0a2      	beq.n	80117b6 <_printf_float+0xa2>
 8011870:	232d      	movs	r3, #45	@ 0x2d
 8011872:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011876:	e79e      	b.n	80117b6 <_printf_float+0xa2>
 8011878:	9a06      	ldr	r2, [sp, #24]
 801187a:	2a47      	cmp	r2, #71	@ 0x47
 801187c:	d1c2      	bne.n	8011804 <_printf_float+0xf0>
 801187e:	2b00      	cmp	r3, #0
 8011880:	d1c0      	bne.n	8011804 <_printf_float+0xf0>
 8011882:	2301      	movs	r3, #1
 8011884:	e7bd      	b.n	8011802 <_printf_float+0xee>
 8011886:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801188a:	d9db      	bls.n	8011844 <_printf_float+0x130>
 801188c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011890:	d118      	bne.n	80118c4 <_printf_float+0x1b0>
 8011892:	2900      	cmp	r1, #0
 8011894:	6863      	ldr	r3, [r4, #4]
 8011896:	dd0b      	ble.n	80118b0 <_printf_float+0x19c>
 8011898:	6121      	str	r1, [r4, #16]
 801189a:	b913      	cbnz	r3, 80118a2 <_printf_float+0x18e>
 801189c:	6822      	ldr	r2, [r4, #0]
 801189e:	07d0      	lsls	r0, r2, #31
 80118a0:	d502      	bpl.n	80118a8 <_printf_float+0x194>
 80118a2:	3301      	adds	r3, #1
 80118a4:	440b      	add	r3, r1
 80118a6:	6123      	str	r3, [r4, #16]
 80118a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80118aa:	f04f 0900 	mov.w	r9, #0
 80118ae:	e7db      	b.n	8011868 <_printf_float+0x154>
 80118b0:	b913      	cbnz	r3, 80118b8 <_printf_float+0x1a4>
 80118b2:	6822      	ldr	r2, [r4, #0]
 80118b4:	07d2      	lsls	r2, r2, #31
 80118b6:	d501      	bpl.n	80118bc <_printf_float+0x1a8>
 80118b8:	3302      	adds	r3, #2
 80118ba:	e7f4      	b.n	80118a6 <_printf_float+0x192>
 80118bc:	2301      	movs	r3, #1
 80118be:	e7f2      	b.n	80118a6 <_printf_float+0x192>
 80118c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80118c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80118c6:	4299      	cmp	r1, r3
 80118c8:	db05      	blt.n	80118d6 <_printf_float+0x1c2>
 80118ca:	6823      	ldr	r3, [r4, #0]
 80118cc:	6121      	str	r1, [r4, #16]
 80118ce:	07d8      	lsls	r0, r3, #31
 80118d0:	d5ea      	bpl.n	80118a8 <_printf_float+0x194>
 80118d2:	1c4b      	adds	r3, r1, #1
 80118d4:	e7e7      	b.n	80118a6 <_printf_float+0x192>
 80118d6:	2900      	cmp	r1, #0
 80118d8:	bfd4      	ite	le
 80118da:	f1c1 0202 	rsble	r2, r1, #2
 80118de:	2201      	movgt	r2, #1
 80118e0:	4413      	add	r3, r2
 80118e2:	e7e0      	b.n	80118a6 <_printf_float+0x192>
 80118e4:	6823      	ldr	r3, [r4, #0]
 80118e6:	055a      	lsls	r2, r3, #21
 80118e8:	d407      	bmi.n	80118fa <_printf_float+0x1e6>
 80118ea:	6923      	ldr	r3, [r4, #16]
 80118ec:	4642      	mov	r2, r8
 80118ee:	4631      	mov	r1, r6
 80118f0:	4628      	mov	r0, r5
 80118f2:	47b8      	blx	r7
 80118f4:	3001      	adds	r0, #1
 80118f6:	d12b      	bne.n	8011950 <_printf_float+0x23c>
 80118f8:	e767      	b.n	80117ca <_printf_float+0xb6>
 80118fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80118fe:	f240 80dd 	bls.w	8011abc <_printf_float+0x3a8>
 8011902:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011906:	2200      	movs	r2, #0
 8011908:	2300      	movs	r3, #0
 801190a:	f7ef f93d 	bl	8000b88 <__aeabi_dcmpeq>
 801190e:	2800      	cmp	r0, #0
 8011910:	d033      	beq.n	801197a <_printf_float+0x266>
 8011912:	4a37      	ldr	r2, [pc, #220]	@ (80119f0 <_printf_float+0x2dc>)
 8011914:	2301      	movs	r3, #1
 8011916:	4631      	mov	r1, r6
 8011918:	4628      	mov	r0, r5
 801191a:	47b8      	blx	r7
 801191c:	3001      	adds	r0, #1
 801191e:	f43f af54 	beq.w	80117ca <_printf_float+0xb6>
 8011922:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011926:	4543      	cmp	r3, r8
 8011928:	db02      	blt.n	8011930 <_printf_float+0x21c>
 801192a:	6823      	ldr	r3, [r4, #0]
 801192c:	07d8      	lsls	r0, r3, #31
 801192e:	d50f      	bpl.n	8011950 <_printf_float+0x23c>
 8011930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011934:	4631      	mov	r1, r6
 8011936:	4628      	mov	r0, r5
 8011938:	47b8      	blx	r7
 801193a:	3001      	adds	r0, #1
 801193c:	f43f af45 	beq.w	80117ca <_printf_float+0xb6>
 8011940:	f04f 0900 	mov.w	r9, #0
 8011944:	f108 38ff 	add.w	r8, r8, #4294967295
 8011948:	f104 0a1a 	add.w	sl, r4, #26
 801194c:	45c8      	cmp	r8, r9
 801194e:	dc09      	bgt.n	8011964 <_printf_float+0x250>
 8011950:	6823      	ldr	r3, [r4, #0]
 8011952:	079b      	lsls	r3, r3, #30
 8011954:	f100 8103 	bmi.w	8011b5e <_printf_float+0x44a>
 8011958:	68e0      	ldr	r0, [r4, #12]
 801195a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801195c:	4298      	cmp	r0, r3
 801195e:	bfb8      	it	lt
 8011960:	4618      	movlt	r0, r3
 8011962:	e734      	b.n	80117ce <_printf_float+0xba>
 8011964:	2301      	movs	r3, #1
 8011966:	4652      	mov	r2, sl
 8011968:	4631      	mov	r1, r6
 801196a:	4628      	mov	r0, r5
 801196c:	47b8      	blx	r7
 801196e:	3001      	adds	r0, #1
 8011970:	f43f af2b 	beq.w	80117ca <_printf_float+0xb6>
 8011974:	f109 0901 	add.w	r9, r9, #1
 8011978:	e7e8      	b.n	801194c <_printf_float+0x238>
 801197a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801197c:	2b00      	cmp	r3, #0
 801197e:	dc39      	bgt.n	80119f4 <_printf_float+0x2e0>
 8011980:	4a1b      	ldr	r2, [pc, #108]	@ (80119f0 <_printf_float+0x2dc>)
 8011982:	2301      	movs	r3, #1
 8011984:	4631      	mov	r1, r6
 8011986:	4628      	mov	r0, r5
 8011988:	47b8      	blx	r7
 801198a:	3001      	adds	r0, #1
 801198c:	f43f af1d 	beq.w	80117ca <_printf_float+0xb6>
 8011990:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011994:	ea59 0303 	orrs.w	r3, r9, r3
 8011998:	d102      	bne.n	80119a0 <_printf_float+0x28c>
 801199a:	6823      	ldr	r3, [r4, #0]
 801199c:	07d9      	lsls	r1, r3, #31
 801199e:	d5d7      	bpl.n	8011950 <_printf_float+0x23c>
 80119a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80119a4:	4631      	mov	r1, r6
 80119a6:	4628      	mov	r0, r5
 80119a8:	47b8      	blx	r7
 80119aa:	3001      	adds	r0, #1
 80119ac:	f43f af0d 	beq.w	80117ca <_printf_float+0xb6>
 80119b0:	f04f 0a00 	mov.w	sl, #0
 80119b4:	f104 0b1a 	add.w	fp, r4, #26
 80119b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119ba:	425b      	negs	r3, r3
 80119bc:	4553      	cmp	r3, sl
 80119be:	dc01      	bgt.n	80119c4 <_printf_float+0x2b0>
 80119c0:	464b      	mov	r3, r9
 80119c2:	e793      	b.n	80118ec <_printf_float+0x1d8>
 80119c4:	2301      	movs	r3, #1
 80119c6:	465a      	mov	r2, fp
 80119c8:	4631      	mov	r1, r6
 80119ca:	4628      	mov	r0, r5
 80119cc:	47b8      	blx	r7
 80119ce:	3001      	adds	r0, #1
 80119d0:	f43f aefb 	beq.w	80117ca <_printf_float+0xb6>
 80119d4:	f10a 0a01 	add.w	sl, sl, #1
 80119d8:	e7ee      	b.n	80119b8 <_printf_float+0x2a4>
 80119da:	bf00      	nop
 80119dc:	7fefffff 	.word	0x7fefffff
 80119e0:	08014cfe 	.word	0x08014cfe
 80119e4:	08014d02 	.word	0x08014d02
 80119e8:	08014d06 	.word	0x08014d06
 80119ec:	08014d0a 	.word	0x08014d0a
 80119f0:	08014d0e 	.word	0x08014d0e
 80119f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80119f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80119fa:	4553      	cmp	r3, sl
 80119fc:	bfa8      	it	ge
 80119fe:	4653      	movge	r3, sl
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	4699      	mov	r9, r3
 8011a04:	dc36      	bgt.n	8011a74 <_printf_float+0x360>
 8011a06:	f04f 0b00 	mov.w	fp, #0
 8011a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a0e:	f104 021a 	add.w	r2, r4, #26
 8011a12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011a14:	9306      	str	r3, [sp, #24]
 8011a16:	eba3 0309 	sub.w	r3, r3, r9
 8011a1a:	455b      	cmp	r3, fp
 8011a1c:	dc31      	bgt.n	8011a82 <_printf_float+0x36e>
 8011a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a20:	459a      	cmp	sl, r3
 8011a22:	dc3a      	bgt.n	8011a9a <_printf_float+0x386>
 8011a24:	6823      	ldr	r3, [r4, #0]
 8011a26:	07da      	lsls	r2, r3, #31
 8011a28:	d437      	bmi.n	8011a9a <_printf_float+0x386>
 8011a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a2c:	ebaa 0903 	sub.w	r9, sl, r3
 8011a30:	9b06      	ldr	r3, [sp, #24]
 8011a32:	ebaa 0303 	sub.w	r3, sl, r3
 8011a36:	4599      	cmp	r9, r3
 8011a38:	bfa8      	it	ge
 8011a3a:	4699      	movge	r9, r3
 8011a3c:	f1b9 0f00 	cmp.w	r9, #0
 8011a40:	dc33      	bgt.n	8011aaa <_printf_float+0x396>
 8011a42:	f04f 0800 	mov.w	r8, #0
 8011a46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a4a:	f104 0b1a 	add.w	fp, r4, #26
 8011a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a50:	ebaa 0303 	sub.w	r3, sl, r3
 8011a54:	eba3 0309 	sub.w	r3, r3, r9
 8011a58:	4543      	cmp	r3, r8
 8011a5a:	f77f af79 	ble.w	8011950 <_printf_float+0x23c>
 8011a5e:	2301      	movs	r3, #1
 8011a60:	465a      	mov	r2, fp
 8011a62:	4631      	mov	r1, r6
 8011a64:	4628      	mov	r0, r5
 8011a66:	47b8      	blx	r7
 8011a68:	3001      	adds	r0, #1
 8011a6a:	f43f aeae 	beq.w	80117ca <_printf_float+0xb6>
 8011a6e:	f108 0801 	add.w	r8, r8, #1
 8011a72:	e7ec      	b.n	8011a4e <_printf_float+0x33a>
 8011a74:	4642      	mov	r2, r8
 8011a76:	4631      	mov	r1, r6
 8011a78:	4628      	mov	r0, r5
 8011a7a:	47b8      	blx	r7
 8011a7c:	3001      	adds	r0, #1
 8011a7e:	d1c2      	bne.n	8011a06 <_printf_float+0x2f2>
 8011a80:	e6a3      	b.n	80117ca <_printf_float+0xb6>
 8011a82:	2301      	movs	r3, #1
 8011a84:	4631      	mov	r1, r6
 8011a86:	4628      	mov	r0, r5
 8011a88:	9206      	str	r2, [sp, #24]
 8011a8a:	47b8      	blx	r7
 8011a8c:	3001      	adds	r0, #1
 8011a8e:	f43f ae9c 	beq.w	80117ca <_printf_float+0xb6>
 8011a92:	9a06      	ldr	r2, [sp, #24]
 8011a94:	f10b 0b01 	add.w	fp, fp, #1
 8011a98:	e7bb      	b.n	8011a12 <_printf_float+0x2fe>
 8011a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a9e:	4631      	mov	r1, r6
 8011aa0:	4628      	mov	r0, r5
 8011aa2:	47b8      	blx	r7
 8011aa4:	3001      	adds	r0, #1
 8011aa6:	d1c0      	bne.n	8011a2a <_printf_float+0x316>
 8011aa8:	e68f      	b.n	80117ca <_printf_float+0xb6>
 8011aaa:	9a06      	ldr	r2, [sp, #24]
 8011aac:	464b      	mov	r3, r9
 8011aae:	4442      	add	r2, r8
 8011ab0:	4631      	mov	r1, r6
 8011ab2:	4628      	mov	r0, r5
 8011ab4:	47b8      	blx	r7
 8011ab6:	3001      	adds	r0, #1
 8011ab8:	d1c3      	bne.n	8011a42 <_printf_float+0x32e>
 8011aba:	e686      	b.n	80117ca <_printf_float+0xb6>
 8011abc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011ac0:	f1ba 0f01 	cmp.w	sl, #1
 8011ac4:	dc01      	bgt.n	8011aca <_printf_float+0x3b6>
 8011ac6:	07db      	lsls	r3, r3, #31
 8011ac8:	d536      	bpl.n	8011b38 <_printf_float+0x424>
 8011aca:	2301      	movs	r3, #1
 8011acc:	4642      	mov	r2, r8
 8011ace:	4631      	mov	r1, r6
 8011ad0:	4628      	mov	r0, r5
 8011ad2:	47b8      	blx	r7
 8011ad4:	3001      	adds	r0, #1
 8011ad6:	f43f ae78 	beq.w	80117ca <_printf_float+0xb6>
 8011ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ade:	4631      	mov	r1, r6
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	47b8      	blx	r7
 8011ae4:	3001      	adds	r0, #1
 8011ae6:	f43f ae70 	beq.w	80117ca <_printf_float+0xb6>
 8011aea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011aee:	2200      	movs	r2, #0
 8011af0:	2300      	movs	r3, #0
 8011af2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011af6:	f7ef f847 	bl	8000b88 <__aeabi_dcmpeq>
 8011afa:	b9c0      	cbnz	r0, 8011b2e <_printf_float+0x41a>
 8011afc:	4653      	mov	r3, sl
 8011afe:	f108 0201 	add.w	r2, r8, #1
 8011b02:	4631      	mov	r1, r6
 8011b04:	4628      	mov	r0, r5
 8011b06:	47b8      	blx	r7
 8011b08:	3001      	adds	r0, #1
 8011b0a:	d10c      	bne.n	8011b26 <_printf_float+0x412>
 8011b0c:	e65d      	b.n	80117ca <_printf_float+0xb6>
 8011b0e:	2301      	movs	r3, #1
 8011b10:	465a      	mov	r2, fp
 8011b12:	4631      	mov	r1, r6
 8011b14:	4628      	mov	r0, r5
 8011b16:	47b8      	blx	r7
 8011b18:	3001      	adds	r0, #1
 8011b1a:	f43f ae56 	beq.w	80117ca <_printf_float+0xb6>
 8011b1e:	f108 0801 	add.w	r8, r8, #1
 8011b22:	45d0      	cmp	r8, sl
 8011b24:	dbf3      	blt.n	8011b0e <_printf_float+0x3fa>
 8011b26:	464b      	mov	r3, r9
 8011b28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011b2c:	e6df      	b.n	80118ee <_printf_float+0x1da>
 8011b2e:	f04f 0800 	mov.w	r8, #0
 8011b32:	f104 0b1a 	add.w	fp, r4, #26
 8011b36:	e7f4      	b.n	8011b22 <_printf_float+0x40e>
 8011b38:	2301      	movs	r3, #1
 8011b3a:	4642      	mov	r2, r8
 8011b3c:	e7e1      	b.n	8011b02 <_printf_float+0x3ee>
 8011b3e:	2301      	movs	r3, #1
 8011b40:	464a      	mov	r2, r9
 8011b42:	4631      	mov	r1, r6
 8011b44:	4628      	mov	r0, r5
 8011b46:	47b8      	blx	r7
 8011b48:	3001      	adds	r0, #1
 8011b4a:	f43f ae3e 	beq.w	80117ca <_printf_float+0xb6>
 8011b4e:	f108 0801 	add.w	r8, r8, #1
 8011b52:	68e3      	ldr	r3, [r4, #12]
 8011b54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011b56:	1a5b      	subs	r3, r3, r1
 8011b58:	4543      	cmp	r3, r8
 8011b5a:	dcf0      	bgt.n	8011b3e <_printf_float+0x42a>
 8011b5c:	e6fc      	b.n	8011958 <_printf_float+0x244>
 8011b5e:	f04f 0800 	mov.w	r8, #0
 8011b62:	f104 0919 	add.w	r9, r4, #25
 8011b66:	e7f4      	b.n	8011b52 <_printf_float+0x43e>

08011b68 <_printf_common>:
 8011b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b6c:	4616      	mov	r6, r2
 8011b6e:	4698      	mov	r8, r3
 8011b70:	688a      	ldr	r2, [r1, #8]
 8011b72:	690b      	ldr	r3, [r1, #16]
 8011b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011b78:	4293      	cmp	r3, r2
 8011b7a:	bfb8      	it	lt
 8011b7c:	4613      	movlt	r3, r2
 8011b7e:	6033      	str	r3, [r6, #0]
 8011b80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011b84:	4607      	mov	r7, r0
 8011b86:	460c      	mov	r4, r1
 8011b88:	b10a      	cbz	r2, 8011b8e <_printf_common+0x26>
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	6033      	str	r3, [r6, #0]
 8011b8e:	6823      	ldr	r3, [r4, #0]
 8011b90:	0699      	lsls	r1, r3, #26
 8011b92:	bf42      	ittt	mi
 8011b94:	6833      	ldrmi	r3, [r6, #0]
 8011b96:	3302      	addmi	r3, #2
 8011b98:	6033      	strmi	r3, [r6, #0]
 8011b9a:	6825      	ldr	r5, [r4, #0]
 8011b9c:	f015 0506 	ands.w	r5, r5, #6
 8011ba0:	d106      	bne.n	8011bb0 <_printf_common+0x48>
 8011ba2:	f104 0a19 	add.w	sl, r4, #25
 8011ba6:	68e3      	ldr	r3, [r4, #12]
 8011ba8:	6832      	ldr	r2, [r6, #0]
 8011baa:	1a9b      	subs	r3, r3, r2
 8011bac:	42ab      	cmp	r3, r5
 8011bae:	dc26      	bgt.n	8011bfe <_printf_common+0x96>
 8011bb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011bb4:	6822      	ldr	r2, [r4, #0]
 8011bb6:	3b00      	subs	r3, #0
 8011bb8:	bf18      	it	ne
 8011bba:	2301      	movne	r3, #1
 8011bbc:	0692      	lsls	r2, r2, #26
 8011bbe:	d42b      	bmi.n	8011c18 <_printf_common+0xb0>
 8011bc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011bc4:	4641      	mov	r1, r8
 8011bc6:	4638      	mov	r0, r7
 8011bc8:	47c8      	blx	r9
 8011bca:	3001      	adds	r0, #1
 8011bcc:	d01e      	beq.n	8011c0c <_printf_common+0xa4>
 8011bce:	6823      	ldr	r3, [r4, #0]
 8011bd0:	6922      	ldr	r2, [r4, #16]
 8011bd2:	f003 0306 	and.w	r3, r3, #6
 8011bd6:	2b04      	cmp	r3, #4
 8011bd8:	bf02      	ittt	eq
 8011bda:	68e5      	ldreq	r5, [r4, #12]
 8011bdc:	6833      	ldreq	r3, [r6, #0]
 8011bde:	1aed      	subeq	r5, r5, r3
 8011be0:	68a3      	ldr	r3, [r4, #8]
 8011be2:	bf0c      	ite	eq
 8011be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011be8:	2500      	movne	r5, #0
 8011bea:	4293      	cmp	r3, r2
 8011bec:	bfc4      	itt	gt
 8011bee:	1a9b      	subgt	r3, r3, r2
 8011bf0:	18ed      	addgt	r5, r5, r3
 8011bf2:	2600      	movs	r6, #0
 8011bf4:	341a      	adds	r4, #26
 8011bf6:	42b5      	cmp	r5, r6
 8011bf8:	d11a      	bne.n	8011c30 <_printf_common+0xc8>
 8011bfa:	2000      	movs	r0, #0
 8011bfc:	e008      	b.n	8011c10 <_printf_common+0xa8>
 8011bfe:	2301      	movs	r3, #1
 8011c00:	4652      	mov	r2, sl
 8011c02:	4641      	mov	r1, r8
 8011c04:	4638      	mov	r0, r7
 8011c06:	47c8      	blx	r9
 8011c08:	3001      	adds	r0, #1
 8011c0a:	d103      	bne.n	8011c14 <_printf_common+0xac>
 8011c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c14:	3501      	adds	r5, #1
 8011c16:	e7c6      	b.n	8011ba6 <_printf_common+0x3e>
 8011c18:	18e1      	adds	r1, r4, r3
 8011c1a:	1c5a      	adds	r2, r3, #1
 8011c1c:	2030      	movs	r0, #48	@ 0x30
 8011c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011c22:	4422      	add	r2, r4
 8011c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011c2c:	3302      	adds	r3, #2
 8011c2e:	e7c7      	b.n	8011bc0 <_printf_common+0x58>
 8011c30:	2301      	movs	r3, #1
 8011c32:	4622      	mov	r2, r4
 8011c34:	4641      	mov	r1, r8
 8011c36:	4638      	mov	r0, r7
 8011c38:	47c8      	blx	r9
 8011c3a:	3001      	adds	r0, #1
 8011c3c:	d0e6      	beq.n	8011c0c <_printf_common+0xa4>
 8011c3e:	3601      	adds	r6, #1
 8011c40:	e7d9      	b.n	8011bf6 <_printf_common+0x8e>
	...

08011c44 <_printf_i>:
 8011c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c48:	7e0f      	ldrb	r7, [r1, #24]
 8011c4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011c4c:	2f78      	cmp	r7, #120	@ 0x78
 8011c4e:	4691      	mov	r9, r2
 8011c50:	4680      	mov	r8, r0
 8011c52:	460c      	mov	r4, r1
 8011c54:	469a      	mov	sl, r3
 8011c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011c5a:	d807      	bhi.n	8011c6c <_printf_i+0x28>
 8011c5c:	2f62      	cmp	r7, #98	@ 0x62
 8011c5e:	d80a      	bhi.n	8011c76 <_printf_i+0x32>
 8011c60:	2f00      	cmp	r7, #0
 8011c62:	f000 80d2 	beq.w	8011e0a <_printf_i+0x1c6>
 8011c66:	2f58      	cmp	r7, #88	@ 0x58
 8011c68:	f000 80b9 	beq.w	8011dde <_printf_i+0x19a>
 8011c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011c74:	e03a      	b.n	8011cec <_printf_i+0xa8>
 8011c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011c7a:	2b15      	cmp	r3, #21
 8011c7c:	d8f6      	bhi.n	8011c6c <_printf_i+0x28>
 8011c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8011c84 <_printf_i+0x40>)
 8011c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c84:	08011cdd 	.word	0x08011cdd
 8011c88:	08011cf1 	.word	0x08011cf1
 8011c8c:	08011c6d 	.word	0x08011c6d
 8011c90:	08011c6d 	.word	0x08011c6d
 8011c94:	08011c6d 	.word	0x08011c6d
 8011c98:	08011c6d 	.word	0x08011c6d
 8011c9c:	08011cf1 	.word	0x08011cf1
 8011ca0:	08011c6d 	.word	0x08011c6d
 8011ca4:	08011c6d 	.word	0x08011c6d
 8011ca8:	08011c6d 	.word	0x08011c6d
 8011cac:	08011c6d 	.word	0x08011c6d
 8011cb0:	08011df1 	.word	0x08011df1
 8011cb4:	08011d1b 	.word	0x08011d1b
 8011cb8:	08011dab 	.word	0x08011dab
 8011cbc:	08011c6d 	.word	0x08011c6d
 8011cc0:	08011c6d 	.word	0x08011c6d
 8011cc4:	08011e13 	.word	0x08011e13
 8011cc8:	08011c6d 	.word	0x08011c6d
 8011ccc:	08011d1b 	.word	0x08011d1b
 8011cd0:	08011c6d 	.word	0x08011c6d
 8011cd4:	08011c6d 	.word	0x08011c6d
 8011cd8:	08011db3 	.word	0x08011db3
 8011cdc:	6833      	ldr	r3, [r6, #0]
 8011cde:	1d1a      	adds	r2, r3, #4
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	6032      	str	r2, [r6, #0]
 8011ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011cec:	2301      	movs	r3, #1
 8011cee:	e09d      	b.n	8011e2c <_printf_i+0x1e8>
 8011cf0:	6833      	ldr	r3, [r6, #0]
 8011cf2:	6820      	ldr	r0, [r4, #0]
 8011cf4:	1d19      	adds	r1, r3, #4
 8011cf6:	6031      	str	r1, [r6, #0]
 8011cf8:	0606      	lsls	r6, r0, #24
 8011cfa:	d501      	bpl.n	8011d00 <_printf_i+0xbc>
 8011cfc:	681d      	ldr	r5, [r3, #0]
 8011cfe:	e003      	b.n	8011d08 <_printf_i+0xc4>
 8011d00:	0645      	lsls	r5, r0, #25
 8011d02:	d5fb      	bpl.n	8011cfc <_printf_i+0xb8>
 8011d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011d08:	2d00      	cmp	r5, #0
 8011d0a:	da03      	bge.n	8011d14 <_printf_i+0xd0>
 8011d0c:	232d      	movs	r3, #45	@ 0x2d
 8011d0e:	426d      	negs	r5, r5
 8011d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d14:	4859      	ldr	r0, [pc, #356]	@ (8011e7c <_printf_i+0x238>)
 8011d16:	230a      	movs	r3, #10
 8011d18:	e011      	b.n	8011d3e <_printf_i+0xfa>
 8011d1a:	6821      	ldr	r1, [r4, #0]
 8011d1c:	6833      	ldr	r3, [r6, #0]
 8011d1e:	0608      	lsls	r0, r1, #24
 8011d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8011d24:	d402      	bmi.n	8011d2c <_printf_i+0xe8>
 8011d26:	0649      	lsls	r1, r1, #25
 8011d28:	bf48      	it	mi
 8011d2a:	b2ad      	uxthmi	r5, r5
 8011d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8011d2e:	4853      	ldr	r0, [pc, #332]	@ (8011e7c <_printf_i+0x238>)
 8011d30:	6033      	str	r3, [r6, #0]
 8011d32:	bf14      	ite	ne
 8011d34:	230a      	movne	r3, #10
 8011d36:	2308      	moveq	r3, #8
 8011d38:	2100      	movs	r1, #0
 8011d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011d3e:	6866      	ldr	r6, [r4, #4]
 8011d40:	60a6      	str	r6, [r4, #8]
 8011d42:	2e00      	cmp	r6, #0
 8011d44:	bfa2      	ittt	ge
 8011d46:	6821      	ldrge	r1, [r4, #0]
 8011d48:	f021 0104 	bicge.w	r1, r1, #4
 8011d4c:	6021      	strge	r1, [r4, #0]
 8011d4e:	b90d      	cbnz	r5, 8011d54 <_printf_i+0x110>
 8011d50:	2e00      	cmp	r6, #0
 8011d52:	d04b      	beq.n	8011dec <_printf_i+0x1a8>
 8011d54:	4616      	mov	r6, r2
 8011d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8011d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8011d5e:	5dc7      	ldrb	r7, [r0, r7]
 8011d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011d64:	462f      	mov	r7, r5
 8011d66:	42bb      	cmp	r3, r7
 8011d68:	460d      	mov	r5, r1
 8011d6a:	d9f4      	bls.n	8011d56 <_printf_i+0x112>
 8011d6c:	2b08      	cmp	r3, #8
 8011d6e:	d10b      	bne.n	8011d88 <_printf_i+0x144>
 8011d70:	6823      	ldr	r3, [r4, #0]
 8011d72:	07df      	lsls	r7, r3, #31
 8011d74:	d508      	bpl.n	8011d88 <_printf_i+0x144>
 8011d76:	6923      	ldr	r3, [r4, #16]
 8011d78:	6861      	ldr	r1, [r4, #4]
 8011d7a:	4299      	cmp	r1, r3
 8011d7c:	bfde      	ittt	le
 8011d7e:	2330      	movle	r3, #48	@ 0x30
 8011d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011d84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011d88:	1b92      	subs	r2, r2, r6
 8011d8a:	6122      	str	r2, [r4, #16]
 8011d8c:	f8cd a000 	str.w	sl, [sp]
 8011d90:	464b      	mov	r3, r9
 8011d92:	aa03      	add	r2, sp, #12
 8011d94:	4621      	mov	r1, r4
 8011d96:	4640      	mov	r0, r8
 8011d98:	f7ff fee6 	bl	8011b68 <_printf_common>
 8011d9c:	3001      	adds	r0, #1
 8011d9e:	d14a      	bne.n	8011e36 <_printf_i+0x1f2>
 8011da0:	f04f 30ff 	mov.w	r0, #4294967295
 8011da4:	b004      	add	sp, #16
 8011da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011daa:	6823      	ldr	r3, [r4, #0]
 8011dac:	f043 0320 	orr.w	r3, r3, #32
 8011db0:	6023      	str	r3, [r4, #0]
 8011db2:	4833      	ldr	r0, [pc, #204]	@ (8011e80 <_printf_i+0x23c>)
 8011db4:	2778      	movs	r7, #120	@ 0x78
 8011db6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011dba:	6823      	ldr	r3, [r4, #0]
 8011dbc:	6831      	ldr	r1, [r6, #0]
 8011dbe:	061f      	lsls	r7, r3, #24
 8011dc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8011dc4:	d402      	bmi.n	8011dcc <_printf_i+0x188>
 8011dc6:	065f      	lsls	r7, r3, #25
 8011dc8:	bf48      	it	mi
 8011dca:	b2ad      	uxthmi	r5, r5
 8011dcc:	6031      	str	r1, [r6, #0]
 8011dce:	07d9      	lsls	r1, r3, #31
 8011dd0:	bf44      	itt	mi
 8011dd2:	f043 0320 	orrmi.w	r3, r3, #32
 8011dd6:	6023      	strmi	r3, [r4, #0]
 8011dd8:	b11d      	cbz	r5, 8011de2 <_printf_i+0x19e>
 8011dda:	2310      	movs	r3, #16
 8011ddc:	e7ac      	b.n	8011d38 <_printf_i+0xf4>
 8011dde:	4827      	ldr	r0, [pc, #156]	@ (8011e7c <_printf_i+0x238>)
 8011de0:	e7e9      	b.n	8011db6 <_printf_i+0x172>
 8011de2:	6823      	ldr	r3, [r4, #0]
 8011de4:	f023 0320 	bic.w	r3, r3, #32
 8011de8:	6023      	str	r3, [r4, #0]
 8011dea:	e7f6      	b.n	8011dda <_printf_i+0x196>
 8011dec:	4616      	mov	r6, r2
 8011dee:	e7bd      	b.n	8011d6c <_printf_i+0x128>
 8011df0:	6833      	ldr	r3, [r6, #0]
 8011df2:	6825      	ldr	r5, [r4, #0]
 8011df4:	6961      	ldr	r1, [r4, #20]
 8011df6:	1d18      	adds	r0, r3, #4
 8011df8:	6030      	str	r0, [r6, #0]
 8011dfa:	062e      	lsls	r6, r5, #24
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	d501      	bpl.n	8011e04 <_printf_i+0x1c0>
 8011e00:	6019      	str	r1, [r3, #0]
 8011e02:	e002      	b.n	8011e0a <_printf_i+0x1c6>
 8011e04:	0668      	lsls	r0, r5, #25
 8011e06:	d5fb      	bpl.n	8011e00 <_printf_i+0x1bc>
 8011e08:	8019      	strh	r1, [r3, #0]
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	6123      	str	r3, [r4, #16]
 8011e0e:	4616      	mov	r6, r2
 8011e10:	e7bc      	b.n	8011d8c <_printf_i+0x148>
 8011e12:	6833      	ldr	r3, [r6, #0]
 8011e14:	1d1a      	adds	r2, r3, #4
 8011e16:	6032      	str	r2, [r6, #0]
 8011e18:	681e      	ldr	r6, [r3, #0]
 8011e1a:	6862      	ldr	r2, [r4, #4]
 8011e1c:	2100      	movs	r1, #0
 8011e1e:	4630      	mov	r0, r6
 8011e20:	f7ee fa36 	bl	8000290 <memchr>
 8011e24:	b108      	cbz	r0, 8011e2a <_printf_i+0x1e6>
 8011e26:	1b80      	subs	r0, r0, r6
 8011e28:	6060      	str	r0, [r4, #4]
 8011e2a:	6863      	ldr	r3, [r4, #4]
 8011e2c:	6123      	str	r3, [r4, #16]
 8011e2e:	2300      	movs	r3, #0
 8011e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e34:	e7aa      	b.n	8011d8c <_printf_i+0x148>
 8011e36:	6923      	ldr	r3, [r4, #16]
 8011e38:	4632      	mov	r2, r6
 8011e3a:	4649      	mov	r1, r9
 8011e3c:	4640      	mov	r0, r8
 8011e3e:	47d0      	blx	sl
 8011e40:	3001      	adds	r0, #1
 8011e42:	d0ad      	beq.n	8011da0 <_printf_i+0x15c>
 8011e44:	6823      	ldr	r3, [r4, #0]
 8011e46:	079b      	lsls	r3, r3, #30
 8011e48:	d413      	bmi.n	8011e72 <_printf_i+0x22e>
 8011e4a:	68e0      	ldr	r0, [r4, #12]
 8011e4c:	9b03      	ldr	r3, [sp, #12]
 8011e4e:	4298      	cmp	r0, r3
 8011e50:	bfb8      	it	lt
 8011e52:	4618      	movlt	r0, r3
 8011e54:	e7a6      	b.n	8011da4 <_printf_i+0x160>
 8011e56:	2301      	movs	r3, #1
 8011e58:	4632      	mov	r2, r6
 8011e5a:	4649      	mov	r1, r9
 8011e5c:	4640      	mov	r0, r8
 8011e5e:	47d0      	blx	sl
 8011e60:	3001      	adds	r0, #1
 8011e62:	d09d      	beq.n	8011da0 <_printf_i+0x15c>
 8011e64:	3501      	adds	r5, #1
 8011e66:	68e3      	ldr	r3, [r4, #12]
 8011e68:	9903      	ldr	r1, [sp, #12]
 8011e6a:	1a5b      	subs	r3, r3, r1
 8011e6c:	42ab      	cmp	r3, r5
 8011e6e:	dcf2      	bgt.n	8011e56 <_printf_i+0x212>
 8011e70:	e7eb      	b.n	8011e4a <_printf_i+0x206>
 8011e72:	2500      	movs	r5, #0
 8011e74:	f104 0619 	add.w	r6, r4, #25
 8011e78:	e7f5      	b.n	8011e66 <_printf_i+0x222>
 8011e7a:	bf00      	nop
 8011e7c:	08014d10 	.word	0x08014d10
 8011e80:	08014d21 	.word	0x08014d21

08011e84 <std>:
 8011e84:	2300      	movs	r3, #0
 8011e86:	b510      	push	{r4, lr}
 8011e88:	4604      	mov	r4, r0
 8011e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8011e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e92:	6083      	str	r3, [r0, #8]
 8011e94:	8181      	strh	r1, [r0, #12]
 8011e96:	6643      	str	r3, [r0, #100]	@ 0x64
 8011e98:	81c2      	strh	r2, [r0, #14]
 8011e9a:	6183      	str	r3, [r0, #24]
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	2208      	movs	r2, #8
 8011ea0:	305c      	adds	r0, #92	@ 0x5c
 8011ea2:	f000 f945 	bl	8012130 <memset>
 8011ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8011edc <std+0x58>)
 8011ea8:	6263      	str	r3, [r4, #36]	@ 0x24
 8011eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8011ee0 <std+0x5c>)
 8011eac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011eae:	4b0d      	ldr	r3, [pc, #52]	@ (8011ee4 <std+0x60>)
 8011eb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8011ee8 <std+0x64>)
 8011eb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8011eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8011eec <std+0x68>)
 8011eb8:	6224      	str	r4, [r4, #32]
 8011eba:	429c      	cmp	r4, r3
 8011ebc:	d006      	beq.n	8011ecc <std+0x48>
 8011ebe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011ec2:	4294      	cmp	r4, r2
 8011ec4:	d002      	beq.n	8011ecc <std+0x48>
 8011ec6:	33d0      	adds	r3, #208	@ 0xd0
 8011ec8:	429c      	cmp	r4, r3
 8011eca:	d105      	bne.n	8011ed8 <std+0x54>
 8011ecc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ed4:	f000 b996 	b.w	8012204 <__retarget_lock_init_recursive>
 8011ed8:	bd10      	pop	{r4, pc}
 8011eda:	bf00      	nop
 8011edc:	08012049 	.word	0x08012049
 8011ee0:	0801206b 	.word	0x0801206b
 8011ee4:	080120a3 	.word	0x080120a3
 8011ee8:	080120c7 	.word	0x080120c7
 8011eec:	2001701c 	.word	0x2001701c

08011ef0 <stdio_exit_handler>:
 8011ef0:	4a02      	ldr	r2, [pc, #8]	@ (8011efc <stdio_exit_handler+0xc>)
 8011ef2:	4903      	ldr	r1, [pc, #12]	@ (8011f00 <stdio_exit_handler+0x10>)
 8011ef4:	4803      	ldr	r0, [pc, #12]	@ (8011f04 <stdio_exit_handler+0x14>)
 8011ef6:	f000 b869 	b.w	8011fcc <_fwalk_sglue>
 8011efa:	bf00      	nop
 8011efc:	20000034 	.word	0x20000034
 8011f00:	08013b7d 	.word	0x08013b7d
 8011f04:	20000044 	.word	0x20000044

08011f08 <cleanup_stdio>:
 8011f08:	6841      	ldr	r1, [r0, #4]
 8011f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8011f3c <cleanup_stdio+0x34>)
 8011f0c:	4299      	cmp	r1, r3
 8011f0e:	b510      	push	{r4, lr}
 8011f10:	4604      	mov	r4, r0
 8011f12:	d001      	beq.n	8011f18 <cleanup_stdio+0x10>
 8011f14:	f001 fe32 	bl	8013b7c <_fflush_r>
 8011f18:	68a1      	ldr	r1, [r4, #8]
 8011f1a:	4b09      	ldr	r3, [pc, #36]	@ (8011f40 <cleanup_stdio+0x38>)
 8011f1c:	4299      	cmp	r1, r3
 8011f1e:	d002      	beq.n	8011f26 <cleanup_stdio+0x1e>
 8011f20:	4620      	mov	r0, r4
 8011f22:	f001 fe2b 	bl	8013b7c <_fflush_r>
 8011f26:	68e1      	ldr	r1, [r4, #12]
 8011f28:	4b06      	ldr	r3, [pc, #24]	@ (8011f44 <cleanup_stdio+0x3c>)
 8011f2a:	4299      	cmp	r1, r3
 8011f2c:	d004      	beq.n	8011f38 <cleanup_stdio+0x30>
 8011f2e:	4620      	mov	r0, r4
 8011f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f34:	f001 be22 	b.w	8013b7c <_fflush_r>
 8011f38:	bd10      	pop	{r4, pc}
 8011f3a:	bf00      	nop
 8011f3c:	2001701c 	.word	0x2001701c
 8011f40:	20017084 	.word	0x20017084
 8011f44:	200170ec 	.word	0x200170ec

08011f48 <global_stdio_init.part.0>:
 8011f48:	b510      	push	{r4, lr}
 8011f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8011f78 <global_stdio_init.part.0+0x30>)
 8011f4c:	4c0b      	ldr	r4, [pc, #44]	@ (8011f7c <global_stdio_init.part.0+0x34>)
 8011f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8011f80 <global_stdio_init.part.0+0x38>)
 8011f50:	601a      	str	r2, [r3, #0]
 8011f52:	4620      	mov	r0, r4
 8011f54:	2200      	movs	r2, #0
 8011f56:	2104      	movs	r1, #4
 8011f58:	f7ff ff94 	bl	8011e84 <std>
 8011f5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011f60:	2201      	movs	r2, #1
 8011f62:	2109      	movs	r1, #9
 8011f64:	f7ff ff8e 	bl	8011e84 <std>
 8011f68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011f6c:	2202      	movs	r2, #2
 8011f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f72:	2112      	movs	r1, #18
 8011f74:	f7ff bf86 	b.w	8011e84 <std>
 8011f78:	20017154 	.word	0x20017154
 8011f7c:	2001701c 	.word	0x2001701c
 8011f80:	08011ef1 	.word	0x08011ef1

08011f84 <__sfp_lock_acquire>:
 8011f84:	4801      	ldr	r0, [pc, #4]	@ (8011f8c <__sfp_lock_acquire+0x8>)
 8011f86:	f000 b93e 	b.w	8012206 <__retarget_lock_acquire_recursive>
 8011f8a:	bf00      	nop
 8011f8c:	2001715d 	.word	0x2001715d

08011f90 <__sfp_lock_release>:
 8011f90:	4801      	ldr	r0, [pc, #4]	@ (8011f98 <__sfp_lock_release+0x8>)
 8011f92:	f000 b939 	b.w	8012208 <__retarget_lock_release_recursive>
 8011f96:	bf00      	nop
 8011f98:	2001715d 	.word	0x2001715d

08011f9c <__sinit>:
 8011f9c:	b510      	push	{r4, lr}
 8011f9e:	4604      	mov	r4, r0
 8011fa0:	f7ff fff0 	bl	8011f84 <__sfp_lock_acquire>
 8011fa4:	6a23      	ldr	r3, [r4, #32]
 8011fa6:	b11b      	cbz	r3, 8011fb0 <__sinit+0x14>
 8011fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fac:	f7ff bff0 	b.w	8011f90 <__sfp_lock_release>
 8011fb0:	4b04      	ldr	r3, [pc, #16]	@ (8011fc4 <__sinit+0x28>)
 8011fb2:	6223      	str	r3, [r4, #32]
 8011fb4:	4b04      	ldr	r3, [pc, #16]	@ (8011fc8 <__sinit+0x2c>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d1f5      	bne.n	8011fa8 <__sinit+0xc>
 8011fbc:	f7ff ffc4 	bl	8011f48 <global_stdio_init.part.0>
 8011fc0:	e7f2      	b.n	8011fa8 <__sinit+0xc>
 8011fc2:	bf00      	nop
 8011fc4:	08011f09 	.word	0x08011f09
 8011fc8:	20017154 	.word	0x20017154

08011fcc <_fwalk_sglue>:
 8011fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fd0:	4607      	mov	r7, r0
 8011fd2:	4688      	mov	r8, r1
 8011fd4:	4614      	mov	r4, r2
 8011fd6:	2600      	movs	r6, #0
 8011fd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011fdc:	f1b9 0901 	subs.w	r9, r9, #1
 8011fe0:	d505      	bpl.n	8011fee <_fwalk_sglue+0x22>
 8011fe2:	6824      	ldr	r4, [r4, #0]
 8011fe4:	2c00      	cmp	r4, #0
 8011fe6:	d1f7      	bne.n	8011fd8 <_fwalk_sglue+0xc>
 8011fe8:	4630      	mov	r0, r6
 8011fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fee:	89ab      	ldrh	r3, [r5, #12]
 8011ff0:	2b01      	cmp	r3, #1
 8011ff2:	d907      	bls.n	8012004 <_fwalk_sglue+0x38>
 8011ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	d003      	beq.n	8012004 <_fwalk_sglue+0x38>
 8011ffc:	4629      	mov	r1, r5
 8011ffe:	4638      	mov	r0, r7
 8012000:	47c0      	blx	r8
 8012002:	4306      	orrs	r6, r0
 8012004:	3568      	adds	r5, #104	@ 0x68
 8012006:	e7e9      	b.n	8011fdc <_fwalk_sglue+0x10>

08012008 <siprintf>:
 8012008:	b40e      	push	{r1, r2, r3}
 801200a:	b500      	push	{lr}
 801200c:	b09c      	sub	sp, #112	@ 0x70
 801200e:	ab1d      	add	r3, sp, #116	@ 0x74
 8012010:	9002      	str	r0, [sp, #8]
 8012012:	9006      	str	r0, [sp, #24]
 8012014:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012018:	4809      	ldr	r0, [pc, #36]	@ (8012040 <siprintf+0x38>)
 801201a:	9107      	str	r1, [sp, #28]
 801201c:	9104      	str	r1, [sp, #16]
 801201e:	4909      	ldr	r1, [pc, #36]	@ (8012044 <siprintf+0x3c>)
 8012020:	f853 2b04 	ldr.w	r2, [r3], #4
 8012024:	9105      	str	r1, [sp, #20]
 8012026:	6800      	ldr	r0, [r0, #0]
 8012028:	9301      	str	r3, [sp, #4]
 801202a:	a902      	add	r1, sp, #8
 801202c:	f001 fc26 	bl	801387c <_svfiprintf_r>
 8012030:	9b02      	ldr	r3, [sp, #8]
 8012032:	2200      	movs	r2, #0
 8012034:	701a      	strb	r2, [r3, #0]
 8012036:	b01c      	add	sp, #112	@ 0x70
 8012038:	f85d eb04 	ldr.w	lr, [sp], #4
 801203c:	b003      	add	sp, #12
 801203e:	4770      	bx	lr
 8012040:	20000040 	.word	0x20000040
 8012044:	ffff0208 	.word	0xffff0208

08012048 <__sread>:
 8012048:	b510      	push	{r4, lr}
 801204a:	460c      	mov	r4, r1
 801204c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012050:	f000 f89c 	bl	801218c <_read_r>
 8012054:	2800      	cmp	r0, #0
 8012056:	bfab      	itete	ge
 8012058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801205a:	89a3      	ldrhlt	r3, [r4, #12]
 801205c:	181b      	addge	r3, r3, r0
 801205e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012062:	bfac      	ite	ge
 8012064:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012066:	81a3      	strhlt	r3, [r4, #12]
 8012068:	bd10      	pop	{r4, pc}

0801206a <__swrite>:
 801206a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801206e:	461f      	mov	r7, r3
 8012070:	898b      	ldrh	r3, [r1, #12]
 8012072:	05db      	lsls	r3, r3, #23
 8012074:	4605      	mov	r5, r0
 8012076:	460c      	mov	r4, r1
 8012078:	4616      	mov	r6, r2
 801207a:	d505      	bpl.n	8012088 <__swrite+0x1e>
 801207c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012080:	2302      	movs	r3, #2
 8012082:	2200      	movs	r2, #0
 8012084:	f000 f870 	bl	8012168 <_lseek_r>
 8012088:	89a3      	ldrh	r3, [r4, #12]
 801208a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801208e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012092:	81a3      	strh	r3, [r4, #12]
 8012094:	4632      	mov	r2, r6
 8012096:	463b      	mov	r3, r7
 8012098:	4628      	mov	r0, r5
 801209a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801209e:	f7ff ba89 	b.w	80115b4 <_write_r>

080120a2 <__sseek>:
 80120a2:	b510      	push	{r4, lr}
 80120a4:	460c      	mov	r4, r1
 80120a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120aa:	f000 f85d 	bl	8012168 <_lseek_r>
 80120ae:	1c43      	adds	r3, r0, #1
 80120b0:	89a3      	ldrh	r3, [r4, #12]
 80120b2:	bf15      	itete	ne
 80120b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80120b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80120ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80120be:	81a3      	strheq	r3, [r4, #12]
 80120c0:	bf18      	it	ne
 80120c2:	81a3      	strhne	r3, [r4, #12]
 80120c4:	bd10      	pop	{r4, pc}

080120c6 <__sclose>:
 80120c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120ca:	f000 b83d 	b.w	8012148 <_close_r>
	...

080120d0 <_vsiprintf_r>:
 80120d0:	b500      	push	{lr}
 80120d2:	b09b      	sub	sp, #108	@ 0x6c
 80120d4:	9100      	str	r1, [sp, #0]
 80120d6:	9104      	str	r1, [sp, #16]
 80120d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80120dc:	9105      	str	r1, [sp, #20]
 80120de:	9102      	str	r1, [sp, #8]
 80120e0:	4905      	ldr	r1, [pc, #20]	@ (80120f8 <_vsiprintf_r+0x28>)
 80120e2:	9103      	str	r1, [sp, #12]
 80120e4:	4669      	mov	r1, sp
 80120e6:	f001 fbc9 	bl	801387c <_svfiprintf_r>
 80120ea:	9b00      	ldr	r3, [sp, #0]
 80120ec:	2200      	movs	r2, #0
 80120ee:	701a      	strb	r2, [r3, #0]
 80120f0:	b01b      	add	sp, #108	@ 0x6c
 80120f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80120f6:	bf00      	nop
 80120f8:	ffff0208 	.word	0xffff0208

080120fc <vsiprintf>:
 80120fc:	4613      	mov	r3, r2
 80120fe:	460a      	mov	r2, r1
 8012100:	4601      	mov	r1, r0
 8012102:	4802      	ldr	r0, [pc, #8]	@ (801210c <vsiprintf+0x10>)
 8012104:	6800      	ldr	r0, [r0, #0]
 8012106:	f7ff bfe3 	b.w	80120d0 <_vsiprintf_r>
 801210a:	bf00      	nop
 801210c:	20000040 	.word	0x20000040

08012110 <memcmp>:
 8012110:	b510      	push	{r4, lr}
 8012112:	3901      	subs	r1, #1
 8012114:	4402      	add	r2, r0
 8012116:	4290      	cmp	r0, r2
 8012118:	d101      	bne.n	801211e <memcmp+0xe>
 801211a:	2000      	movs	r0, #0
 801211c:	e005      	b.n	801212a <memcmp+0x1a>
 801211e:	7803      	ldrb	r3, [r0, #0]
 8012120:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012124:	42a3      	cmp	r3, r4
 8012126:	d001      	beq.n	801212c <memcmp+0x1c>
 8012128:	1b18      	subs	r0, r3, r4
 801212a:	bd10      	pop	{r4, pc}
 801212c:	3001      	adds	r0, #1
 801212e:	e7f2      	b.n	8012116 <memcmp+0x6>

08012130 <memset>:
 8012130:	4402      	add	r2, r0
 8012132:	4603      	mov	r3, r0
 8012134:	4293      	cmp	r3, r2
 8012136:	d100      	bne.n	801213a <memset+0xa>
 8012138:	4770      	bx	lr
 801213a:	f803 1b01 	strb.w	r1, [r3], #1
 801213e:	e7f9      	b.n	8012134 <memset+0x4>

08012140 <_localeconv_r>:
 8012140:	4800      	ldr	r0, [pc, #0]	@ (8012144 <_localeconv_r+0x4>)
 8012142:	4770      	bx	lr
 8012144:	20000180 	.word	0x20000180

08012148 <_close_r>:
 8012148:	b538      	push	{r3, r4, r5, lr}
 801214a:	4d06      	ldr	r5, [pc, #24]	@ (8012164 <_close_r+0x1c>)
 801214c:	2300      	movs	r3, #0
 801214e:	4604      	mov	r4, r0
 8012150:	4608      	mov	r0, r1
 8012152:	602b      	str	r3, [r5, #0]
 8012154:	f7f0 fb9e 	bl	8002894 <_close>
 8012158:	1c43      	adds	r3, r0, #1
 801215a:	d102      	bne.n	8012162 <_close_r+0x1a>
 801215c:	682b      	ldr	r3, [r5, #0]
 801215e:	b103      	cbz	r3, 8012162 <_close_r+0x1a>
 8012160:	6023      	str	r3, [r4, #0]
 8012162:	bd38      	pop	{r3, r4, r5, pc}
 8012164:	20017158 	.word	0x20017158

08012168 <_lseek_r>:
 8012168:	b538      	push	{r3, r4, r5, lr}
 801216a:	4d07      	ldr	r5, [pc, #28]	@ (8012188 <_lseek_r+0x20>)
 801216c:	4604      	mov	r4, r0
 801216e:	4608      	mov	r0, r1
 8012170:	4611      	mov	r1, r2
 8012172:	2200      	movs	r2, #0
 8012174:	602a      	str	r2, [r5, #0]
 8012176:	461a      	mov	r2, r3
 8012178:	f7f0 fbb3 	bl	80028e2 <_lseek>
 801217c:	1c43      	adds	r3, r0, #1
 801217e:	d102      	bne.n	8012186 <_lseek_r+0x1e>
 8012180:	682b      	ldr	r3, [r5, #0]
 8012182:	b103      	cbz	r3, 8012186 <_lseek_r+0x1e>
 8012184:	6023      	str	r3, [r4, #0]
 8012186:	bd38      	pop	{r3, r4, r5, pc}
 8012188:	20017158 	.word	0x20017158

0801218c <_read_r>:
 801218c:	b538      	push	{r3, r4, r5, lr}
 801218e:	4d07      	ldr	r5, [pc, #28]	@ (80121ac <_read_r+0x20>)
 8012190:	4604      	mov	r4, r0
 8012192:	4608      	mov	r0, r1
 8012194:	4611      	mov	r1, r2
 8012196:	2200      	movs	r2, #0
 8012198:	602a      	str	r2, [r5, #0]
 801219a:	461a      	mov	r2, r3
 801219c:	f7f0 fb5d 	bl	800285a <_read>
 80121a0:	1c43      	adds	r3, r0, #1
 80121a2:	d102      	bne.n	80121aa <_read_r+0x1e>
 80121a4:	682b      	ldr	r3, [r5, #0]
 80121a6:	b103      	cbz	r3, 80121aa <_read_r+0x1e>
 80121a8:	6023      	str	r3, [r4, #0]
 80121aa:	bd38      	pop	{r3, r4, r5, pc}
 80121ac:	20017158 	.word	0x20017158

080121b0 <__errno>:
 80121b0:	4b01      	ldr	r3, [pc, #4]	@ (80121b8 <__errno+0x8>)
 80121b2:	6818      	ldr	r0, [r3, #0]
 80121b4:	4770      	bx	lr
 80121b6:	bf00      	nop
 80121b8:	20000040 	.word	0x20000040

080121bc <__libc_init_array>:
 80121bc:	b570      	push	{r4, r5, r6, lr}
 80121be:	4d0d      	ldr	r5, [pc, #52]	@ (80121f4 <__libc_init_array+0x38>)
 80121c0:	4c0d      	ldr	r4, [pc, #52]	@ (80121f8 <__libc_init_array+0x3c>)
 80121c2:	1b64      	subs	r4, r4, r5
 80121c4:	10a4      	asrs	r4, r4, #2
 80121c6:	2600      	movs	r6, #0
 80121c8:	42a6      	cmp	r6, r4
 80121ca:	d109      	bne.n	80121e0 <__libc_init_array+0x24>
 80121cc:	4d0b      	ldr	r5, [pc, #44]	@ (80121fc <__libc_init_array+0x40>)
 80121ce:	4c0c      	ldr	r4, [pc, #48]	@ (8012200 <__libc_init_array+0x44>)
 80121d0:	f002 f998 	bl	8014504 <_init>
 80121d4:	1b64      	subs	r4, r4, r5
 80121d6:	10a4      	asrs	r4, r4, #2
 80121d8:	2600      	movs	r6, #0
 80121da:	42a6      	cmp	r6, r4
 80121dc:	d105      	bne.n	80121ea <__libc_init_array+0x2e>
 80121de:	bd70      	pop	{r4, r5, r6, pc}
 80121e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80121e4:	4798      	blx	r3
 80121e6:	3601      	adds	r6, #1
 80121e8:	e7ee      	b.n	80121c8 <__libc_init_array+0xc>
 80121ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80121ee:	4798      	blx	r3
 80121f0:	3601      	adds	r6, #1
 80121f2:	e7f2      	b.n	80121da <__libc_init_array+0x1e>
 80121f4:	08015078 	.word	0x08015078
 80121f8:	08015078 	.word	0x08015078
 80121fc:	08015078 	.word	0x08015078
 8012200:	0801507c 	.word	0x0801507c

08012204 <__retarget_lock_init_recursive>:
 8012204:	4770      	bx	lr

08012206 <__retarget_lock_acquire_recursive>:
 8012206:	4770      	bx	lr

08012208 <__retarget_lock_release_recursive>:
 8012208:	4770      	bx	lr

0801220a <memcpy>:
 801220a:	440a      	add	r2, r1
 801220c:	4291      	cmp	r1, r2
 801220e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012212:	d100      	bne.n	8012216 <memcpy+0xc>
 8012214:	4770      	bx	lr
 8012216:	b510      	push	{r4, lr}
 8012218:	f811 4b01 	ldrb.w	r4, [r1], #1
 801221c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012220:	4291      	cmp	r1, r2
 8012222:	d1f9      	bne.n	8012218 <memcpy+0xe>
 8012224:	bd10      	pop	{r4, pc}

08012226 <quorem>:
 8012226:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222a:	6903      	ldr	r3, [r0, #16]
 801222c:	690c      	ldr	r4, [r1, #16]
 801222e:	42a3      	cmp	r3, r4
 8012230:	4607      	mov	r7, r0
 8012232:	db7e      	blt.n	8012332 <quorem+0x10c>
 8012234:	3c01      	subs	r4, #1
 8012236:	f101 0814 	add.w	r8, r1, #20
 801223a:	00a3      	lsls	r3, r4, #2
 801223c:	f100 0514 	add.w	r5, r0, #20
 8012240:	9300      	str	r3, [sp, #0]
 8012242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012246:	9301      	str	r3, [sp, #4]
 8012248:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801224c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012250:	3301      	adds	r3, #1
 8012252:	429a      	cmp	r2, r3
 8012254:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012258:	fbb2 f6f3 	udiv	r6, r2, r3
 801225c:	d32e      	bcc.n	80122bc <quorem+0x96>
 801225e:	f04f 0a00 	mov.w	sl, #0
 8012262:	46c4      	mov	ip, r8
 8012264:	46ae      	mov	lr, r5
 8012266:	46d3      	mov	fp, sl
 8012268:	f85c 3b04 	ldr.w	r3, [ip], #4
 801226c:	b298      	uxth	r0, r3
 801226e:	fb06 a000 	mla	r0, r6, r0, sl
 8012272:	0c02      	lsrs	r2, r0, #16
 8012274:	0c1b      	lsrs	r3, r3, #16
 8012276:	fb06 2303 	mla	r3, r6, r3, r2
 801227a:	f8de 2000 	ldr.w	r2, [lr]
 801227e:	b280      	uxth	r0, r0
 8012280:	b292      	uxth	r2, r2
 8012282:	1a12      	subs	r2, r2, r0
 8012284:	445a      	add	r2, fp
 8012286:	f8de 0000 	ldr.w	r0, [lr]
 801228a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801228e:	b29b      	uxth	r3, r3
 8012290:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012294:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012298:	b292      	uxth	r2, r2
 801229a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801229e:	45e1      	cmp	r9, ip
 80122a0:	f84e 2b04 	str.w	r2, [lr], #4
 80122a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80122a8:	d2de      	bcs.n	8012268 <quorem+0x42>
 80122aa:	9b00      	ldr	r3, [sp, #0]
 80122ac:	58eb      	ldr	r3, [r5, r3]
 80122ae:	b92b      	cbnz	r3, 80122bc <quorem+0x96>
 80122b0:	9b01      	ldr	r3, [sp, #4]
 80122b2:	3b04      	subs	r3, #4
 80122b4:	429d      	cmp	r5, r3
 80122b6:	461a      	mov	r2, r3
 80122b8:	d32f      	bcc.n	801231a <quorem+0xf4>
 80122ba:	613c      	str	r4, [r7, #16]
 80122bc:	4638      	mov	r0, r7
 80122be:	f001 f979 	bl	80135b4 <__mcmp>
 80122c2:	2800      	cmp	r0, #0
 80122c4:	db25      	blt.n	8012312 <quorem+0xec>
 80122c6:	4629      	mov	r1, r5
 80122c8:	2000      	movs	r0, #0
 80122ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80122ce:	f8d1 c000 	ldr.w	ip, [r1]
 80122d2:	fa1f fe82 	uxth.w	lr, r2
 80122d6:	fa1f f38c 	uxth.w	r3, ip
 80122da:	eba3 030e 	sub.w	r3, r3, lr
 80122de:	4403      	add	r3, r0
 80122e0:	0c12      	lsrs	r2, r2, #16
 80122e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80122e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122f0:	45c1      	cmp	r9, r8
 80122f2:	f841 3b04 	str.w	r3, [r1], #4
 80122f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80122fa:	d2e6      	bcs.n	80122ca <quorem+0xa4>
 80122fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012300:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012304:	b922      	cbnz	r2, 8012310 <quorem+0xea>
 8012306:	3b04      	subs	r3, #4
 8012308:	429d      	cmp	r5, r3
 801230a:	461a      	mov	r2, r3
 801230c:	d30b      	bcc.n	8012326 <quorem+0x100>
 801230e:	613c      	str	r4, [r7, #16]
 8012310:	3601      	adds	r6, #1
 8012312:	4630      	mov	r0, r6
 8012314:	b003      	add	sp, #12
 8012316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801231a:	6812      	ldr	r2, [r2, #0]
 801231c:	3b04      	subs	r3, #4
 801231e:	2a00      	cmp	r2, #0
 8012320:	d1cb      	bne.n	80122ba <quorem+0x94>
 8012322:	3c01      	subs	r4, #1
 8012324:	e7c6      	b.n	80122b4 <quorem+0x8e>
 8012326:	6812      	ldr	r2, [r2, #0]
 8012328:	3b04      	subs	r3, #4
 801232a:	2a00      	cmp	r2, #0
 801232c:	d1ef      	bne.n	801230e <quorem+0xe8>
 801232e:	3c01      	subs	r4, #1
 8012330:	e7ea      	b.n	8012308 <quorem+0xe2>
 8012332:	2000      	movs	r0, #0
 8012334:	e7ee      	b.n	8012314 <quorem+0xee>
	...

08012338 <_dtoa_r>:
 8012338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801233c:	69c7      	ldr	r7, [r0, #28]
 801233e:	b099      	sub	sp, #100	@ 0x64
 8012340:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012344:	ec55 4b10 	vmov	r4, r5, d0
 8012348:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801234a:	9109      	str	r1, [sp, #36]	@ 0x24
 801234c:	4683      	mov	fp, r0
 801234e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012350:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012352:	b97f      	cbnz	r7, 8012374 <_dtoa_r+0x3c>
 8012354:	2010      	movs	r0, #16
 8012356:	f000 fdfd 	bl	8012f54 <malloc>
 801235a:	4602      	mov	r2, r0
 801235c:	f8cb 001c 	str.w	r0, [fp, #28]
 8012360:	b920      	cbnz	r0, 801236c <_dtoa_r+0x34>
 8012362:	4ba7      	ldr	r3, [pc, #668]	@ (8012600 <_dtoa_r+0x2c8>)
 8012364:	21ef      	movs	r1, #239	@ 0xef
 8012366:	48a7      	ldr	r0, [pc, #668]	@ (8012604 <_dtoa_r+0x2cc>)
 8012368:	f001 fc5a 	bl	8013c20 <__assert_func>
 801236c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012370:	6007      	str	r7, [r0, #0]
 8012372:	60c7      	str	r7, [r0, #12]
 8012374:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012378:	6819      	ldr	r1, [r3, #0]
 801237a:	b159      	cbz	r1, 8012394 <_dtoa_r+0x5c>
 801237c:	685a      	ldr	r2, [r3, #4]
 801237e:	604a      	str	r2, [r1, #4]
 8012380:	2301      	movs	r3, #1
 8012382:	4093      	lsls	r3, r2
 8012384:	608b      	str	r3, [r1, #8]
 8012386:	4658      	mov	r0, fp
 8012388:	f000 feda 	bl	8013140 <_Bfree>
 801238c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012390:	2200      	movs	r2, #0
 8012392:	601a      	str	r2, [r3, #0]
 8012394:	1e2b      	subs	r3, r5, #0
 8012396:	bfb9      	ittee	lt
 8012398:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801239c:	9303      	strlt	r3, [sp, #12]
 801239e:	2300      	movge	r3, #0
 80123a0:	6033      	strge	r3, [r6, #0]
 80123a2:	9f03      	ldr	r7, [sp, #12]
 80123a4:	4b98      	ldr	r3, [pc, #608]	@ (8012608 <_dtoa_r+0x2d0>)
 80123a6:	bfbc      	itt	lt
 80123a8:	2201      	movlt	r2, #1
 80123aa:	6032      	strlt	r2, [r6, #0]
 80123ac:	43bb      	bics	r3, r7
 80123ae:	d112      	bne.n	80123d6 <_dtoa_r+0x9e>
 80123b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80123b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80123b6:	6013      	str	r3, [r2, #0]
 80123b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80123bc:	4323      	orrs	r3, r4
 80123be:	f000 854d 	beq.w	8012e5c <_dtoa_r+0xb24>
 80123c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80123c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801261c <_dtoa_r+0x2e4>
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	f000 854f 	beq.w	8012e6c <_dtoa_r+0xb34>
 80123ce:	f10a 0303 	add.w	r3, sl, #3
 80123d2:	f000 bd49 	b.w	8012e68 <_dtoa_r+0xb30>
 80123d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80123da:	2200      	movs	r2, #0
 80123dc:	ec51 0b17 	vmov	r0, r1, d7
 80123e0:	2300      	movs	r3, #0
 80123e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80123e6:	f7ee fbcf 	bl	8000b88 <__aeabi_dcmpeq>
 80123ea:	4680      	mov	r8, r0
 80123ec:	b158      	cbz	r0, 8012406 <_dtoa_r+0xce>
 80123ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80123f0:	2301      	movs	r3, #1
 80123f2:	6013      	str	r3, [r2, #0]
 80123f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80123f6:	b113      	cbz	r3, 80123fe <_dtoa_r+0xc6>
 80123f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80123fa:	4b84      	ldr	r3, [pc, #528]	@ (801260c <_dtoa_r+0x2d4>)
 80123fc:	6013      	str	r3, [r2, #0]
 80123fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012620 <_dtoa_r+0x2e8>
 8012402:	f000 bd33 	b.w	8012e6c <_dtoa_r+0xb34>
 8012406:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801240a:	aa16      	add	r2, sp, #88	@ 0x58
 801240c:	a917      	add	r1, sp, #92	@ 0x5c
 801240e:	4658      	mov	r0, fp
 8012410:	f001 f980 	bl	8013714 <__d2b>
 8012414:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012418:	4681      	mov	r9, r0
 801241a:	2e00      	cmp	r6, #0
 801241c:	d077      	beq.n	801250e <_dtoa_r+0x1d6>
 801241e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012420:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801242c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012430:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012434:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012438:	4619      	mov	r1, r3
 801243a:	2200      	movs	r2, #0
 801243c:	4b74      	ldr	r3, [pc, #464]	@ (8012610 <_dtoa_r+0x2d8>)
 801243e:	f7ed ff83 	bl	8000348 <__aeabi_dsub>
 8012442:	a369      	add	r3, pc, #420	@ (adr r3, 80125e8 <_dtoa_r+0x2b0>)
 8012444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012448:	f7ee f936 	bl	80006b8 <__aeabi_dmul>
 801244c:	a368      	add	r3, pc, #416	@ (adr r3, 80125f0 <_dtoa_r+0x2b8>)
 801244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012452:	f7ed ff7b 	bl	800034c <__adddf3>
 8012456:	4604      	mov	r4, r0
 8012458:	4630      	mov	r0, r6
 801245a:	460d      	mov	r5, r1
 801245c:	f7ee f8c2 	bl	80005e4 <__aeabi_i2d>
 8012460:	a365      	add	r3, pc, #404	@ (adr r3, 80125f8 <_dtoa_r+0x2c0>)
 8012462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012466:	f7ee f927 	bl	80006b8 <__aeabi_dmul>
 801246a:	4602      	mov	r2, r0
 801246c:	460b      	mov	r3, r1
 801246e:	4620      	mov	r0, r4
 8012470:	4629      	mov	r1, r5
 8012472:	f7ed ff6b 	bl	800034c <__adddf3>
 8012476:	4604      	mov	r4, r0
 8012478:	460d      	mov	r5, r1
 801247a:	f7ee fbcd 	bl	8000c18 <__aeabi_d2iz>
 801247e:	2200      	movs	r2, #0
 8012480:	4607      	mov	r7, r0
 8012482:	2300      	movs	r3, #0
 8012484:	4620      	mov	r0, r4
 8012486:	4629      	mov	r1, r5
 8012488:	f7ee fb88 	bl	8000b9c <__aeabi_dcmplt>
 801248c:	b140      	cbz	r0, 80124a0 <_dtoa_r+0x168>
 801248e:	4638      	mov	r0, r7
 8012490:	f7ee f8a8 	bl	80005e4 <__aeabi_i2d>
 8012494:	4622      	mov	r2, r4
 8012496:	462b      	mov	r3, r5
 8012498:	f7ee fb76 	bl	8000b88 <__aeabi_dcmpeq>
 801249c:	b900      	cbnz	r0, 80124a0 <_dtoa_r+0x168>
 801249e:	3f01      	subs	r7, #1
 80124a0:	2f16      	cmp	r7, #22
 80124a2:	d851      	bhi.n	8012548 <_dtoa_r+0x210>
 80124a4:	4b5b      	ldr	r3, [pc, #364]	@ (8012614 <_dtoa_r+0x2dc>)
 80124a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80124aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80124b2:	f7ee fb73 	bl	8000b9c <__aeabi_dcmplt>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	d048      	beq.n	801254c <_dtoa_r+0x214>
 80124ba:	3f01      	subs	r7, #1
 80124bc:	2300      	movs	r3, #0
 80124be:	9312      	str	r3, [sp, #72]	@ 0x48
 80124c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80124c2:	1b9b      	subs	r3, r3, r6
 80124c4:	1e5a      	subs	r2, r3, #1
 80124c6:	bf44      	itt	mi
 80124c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80124cc:	2300      	movmi	r3, #0
 80124ce:	9208      	str	r2, [sp, #32]
 80124d0:	bf54      	ite	pl
 80124d2:	f04f 0800 	movpl.w	r8, #0
 80124d6:	9308      	strmi	r3, [sp, #32]
 80124d8:	2f00      	cmp	r7, #0
 80124da:	db39      	blt.n	8012550 <_dtoa_r+0x218>
 80124dc:	9b08      	ldr	r3, [sp, #32]
 80124de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80124e0:	443b      	add	r3, r7
 80124e2:	9308      	str	r3, [sp, #32]
 80124e4:	2300      	movs	r3, #0
 80124e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80124e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124ea:	2b09      	cmp	r3, #9
 80124ec:	d864      	bhi.n	80125b8 <_dtoa_r+0x280>
 80124ee:	2b05      	cmp	r3, #5
 80124f0:	bfc4      	itt	gt
 80124f2:	3b04      	subgt	r3, #4
 80124f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80124f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124f8:	f1a3 0302 	sub.w	r3, r3, #2
 80124fc:	bfcc      	ite	gt
 80124fe:	2400      	movgt	r4, #0
 8012500:	2401      	movle	r4, #1
 8012502:	2b03      	cmp	r3, #3
 8012504:	d863      	bhi.n	80125ce <_dtoa_r+0x296>
 8012506:	e8df f003 	tbb	[pc, r3]
 801250a:	372a      	.short	0x372a
 801250c:	5535      	.short	0x5535
 801250e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012512:	441e      	add	r6, r3
 8012514:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012518:	2b20      	cmp	r3, #32
 801251a:	bfc1      	itttt	gt
 801251c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012520:	409f      	lslgt	r7, r3
 8012522:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012526:	fa24 f303 	lsrgt.w	r3, r4, r3
 801252a:	bfd6      	itet	le
 801252c:	f1c3 0320 	rsble	r3, r3, #32
 8012530:	ea47 0003 	orrgt.w	r0, r7, r3
 8012534:	fa04 f003 	lslle.w	r0, r4, r3
 8012538:	f7ee f844 	bl	80005c4 <__aeabi_ui2d>
 801253c:	2201      	movs	r2, #1
 801253e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012542:	3e01      	subs	r6, #1
 8012544:	9214      	str	r2, [sp, #80]	@ 0x50
 8012546:	e777      	b.n	8012438 <_dtoa_r+0x100>
 8012548:	2301      	movs	r3, #1
 801254a:	e7b8      	b.n	80124be <_dtoa_r+0x186>
 801254c:	9012      	str	r0, [sp, #72]	@ 0x48
 801254e:	e7b7      	b.n	80124c0 <_dtoa_r+0x188>
 8012550:	427b      	negs	r3, r7
 8012552:	930a      	str	r3, [sp, #40]	@ 0x28
 8012554:	2300      	movs	r3, #0
 8012556:	eba8 0807 	sub.w	r8, r8, r7
 801255a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801255c:	e7c4      	b.n	80124e8 <_dtoa_r+0x1b0>
 801255e:	2300      	movs	r3, #0
 8012560:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012564:	2b00      	cmp	r3, #0
 8012566:	dc35      	bgt.n	80125d4 <_dtoa_r+0x29c>
 8012568:	2301      	movs	r3, #1
 801256a:	9300      	str	r3, [sp, #0]
 801256c:	9307      	str	r3, [sp, #28]
 801256e:	461a      	mov	r2, r3
 8012570:	920e      	str	r2, [sp, #56]	@ 0x38
 8012572:	e00b      	b.n	801258c <_dtoa_r+0x254>
 8012574:	2301      	movs	r3, #1
 8012576:	e7f3      	b.n	8012560 <_dtoa_r+0x228>
 8012578:	2300      	movs	r3, #0
 801257a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801257c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801257e:	18fb      	adds	r3, r7, r3
 8012580:	9300      	str	r3, [sp, #0]
 8012582:	3301      	adds	r3, #1
 8012584:	2b01      	cmp	r3, #1
 8012586:	9307      	str	r3, [sp, #28]
 8012588:	bfb8      	it	lt
 801258a:	2301      	movlt	r3, #1
 801258c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012590:	2100      	movs	r1, #0
 8012592:	2204      	movs	r2, #4
 8012594:	f102 0514 	add.w	r5, r2, #20
 8012598:	429d      	cmp	r5, r3
 801259a:	d91f      	bls.n	80125dc <_dtoa_r+0x2a4>
 801259c:	6041      	str	r1, [r0, #4]
 801259e:	4658      	mov	r0, fp
 80125a0:	f000 fd8e 	bl	80130c0 <_Balloc>
 80125a4:	4682      	mov	sl, r0
 80125a6:	2800      	cmp	r0, #0
 80125a8:	d13c      	bne.n	8012624 <_dtoa_r+0x2ec>
 80125aa:	4b1b      	ldr	r3, [pc, #108]	@ (8012618 <_dtoa_r+0x2e0>)
 80125ac:	4602      	mov	r2, r0
 80125ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80125b2:	e6d8      	b.n	8012366 <_dtoa_r+0x2e>
 80125b4:	2301      	movs	r3, #1
 80125b6:	e7e0      	b.n	801257a <_dtoa_r+0x242>
 80125b8:	2401      	movs	r4, #1
 80125ba:	2300      	movs	r3, #0
 80125bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80125be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80125c0:	f04f 33ff 	mov.w	r3, #4294967295
 80125c4:	9300      	str	r3, [sp, #0]
 80125c6:	9307      	str	r3, [sp, #28]
 80125c8:	2200      	movs	r2, #0
 80125ca:	2312      	movs	r3, #18
 80125cc:	e7d0      	b.n	8012570 <_dtoa_r+0x238>
 80125ce:	2301      	movs	r3, #1
 80125d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80125d2:	e7f5      	b.n	80125c0 <_dtoa_r+0x288>
 80125d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125d6:	9300      	str	r3, [sp, #0]
 80125d8:	9307      	str	r3, [sp, #28]
 80125da:	e7d7      	b.n	801258c <_dtoa_r+0x254>
 80125dc:	3101      	adds	r1, #1
 80125de:	0052      	lsls	r2, r2, #1
 80125e0:	e7d8      	b.n	8012594 <_dtoa_r+0x25c>
 80125e2:	bf00      	nop
 80125e4:	f3af 8000 	nop.w
 80125e8:	636f4361 	.word	0x636f4361
 80125ec:	3fd287a7 	.word	0x3fd287a7
 80125f0:	8b60c8b3 	.word	0x8b60c8b3
 80125f4:	3fc68a28 	.word	0x3fc68a28
 80125f8:	509f79fb 	.word	0x509f79fb
 80125fc:	3fd34413 	.word	0x3fd34413
 8012600:	08014d3f 	.word	0x08014d3f
 8012604:	08014d56 	.word	0x08014d56
 8012608:	7ff00000 	.word	0x7ff00000
 801260c:	08014d0f 	.word	0x08014d0f
 8012610:	3ff80000 	.word	0x3ff80000
 8012614:	08014e50 	.word	0x08014e50
 8012618:	08014dae 	.word	0x08014dae
 801261c:	08014d3b 	.word	0x08014d3b
 8012620:	08014d0e 	.word	0x08014d0e
 8012624:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012628:	6018      	str	r0, [r3, #0]
 801262a:	9b07      	ldr	r3, [sp, #28]
 801262c:	2b0e      	cmp	r3, #14
 801262e:	f200 80a4 	bhi.w	801277a <_dtoa_r+0x442>
 8012632:	2c00      	cmp	r4, #0
 8012634:	f000 80a1 	beq.w	801277a <_dtoa_r+0x442>
 8012638:	2f00      	cmp	r7, #0
 801263a:	dd33      	ble.n	80126a4 <_dtoa_r+0x36c>
 801263c:	4bad      	ldr	r3, [pc, #692]	@ (80128f4 <_dtoa_r+0x5bc>)
 801263e:	f007 020f 	and.w	r2, r7, #15
 8012642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012646:	ed93 7b00 	vldr	d7, [r3]
 801264a:	05f8      	lsls	r0, r7, #23
 801264c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012650:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012654:	d516      	bpl.n	8012684 <_dtoa_r+0x34c>
 8012656:	4ba8      	ldr	r3, [pc, #672]	@ (80128f8 <_dtoa_r+0x5c0>)
 8012658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801265c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012660:	f7ee f954 	bl	800090c <__aeabi_ddiv>
 8012664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012668:	f004 040f 	and.w	r4, r4, #15
 801266c:	2603      	movs	r6, #3
 801266e:	4da2      	ldr	r5, [pc, #648]	@ (80128f8 <_dtoa_r+0x5c0>)
 8012670:	b954      	cbnz	r4, 8012688 <_dtoa_r+0x350>
 8012672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801267a:	f7ee f947 	bl	800090c <__aeabi_ddiv>
 801267e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012682:	e028      	b.n	80126d6 <_dtoa_r+0x39e>
 8012684:	2602      	movs	r6, #2
 8012686:	e7f2      	b.n	801266e <_dtoa_r+0x336>
 8012688:	07e1      	lsls	r1, r4, #31
 801268a:	d508      	bpl.n	801269e <_dtoa_r+0x366>
 801268c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012690:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012694:	f7ee f810 	bl	80006b8 <__aeabi_dmul>
 8012698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801269c:	3601      	adds	r6, #1
 801269e:	1064      	asrs	r4, r4, #1
 80126a0:	3508      	adds	r5, #8
 80126a2:	e7e5      	b.n	8012670 <_dtoa_r+0x338>
 80126a4:	f000 80d2 	beq.w	801284c <_dtoa_r+0x514>
 80126a8:	427c      	negs	r4, r7
 80126aa:	4b92      	ldr	r3, [pc, #584]	@ (80128f4 <_dtoa_r+0x5bc>)
 80126ac:	4d92      	ldr	r5, [pc, #584]	@ (80128f8 <_dtoa_r+0x5c0>)
 80126ae:	f004 020f 	and.w	r2, r4, #15
 80126b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80126be:	f7ed fffb 	bl	80006b8 <__aeabi_dmul>
 80126c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126c6:	1124      	asrs	r4, r4, #4
 80126c8:	2300      	movs	r3, #0
 80126ca:	2602      	movs	r6, #2
 80126cc:	2c00      	cmp	r4, #0
 80126ce:	f040 80b2 	bne.w	8012836 <_dtoa_r+0x4fe>
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d1d3      	bne.n	801267e <_dtoa_r+0x346>
 80126d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80126d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	f000 80b7 	beq.w	8012850 <_dtoa_r+0x518>
 80126e2:	4b86      	ldr	r3, [pc, #536]	@ (80128fc <_dtoa_r+0x5c4>)
 80126e4:	2200      	movs	r2, #0
 80126e6:	4620      	mov	r0, r4
 80126e8:	4629      	mov	r1, r5
 80126ea:	f7ee fa57 	bl	8000b9c <__aeabi_dcmplt>
 80126ee:	2800      	cmp	r0, #0
 80126f0:	f000 80ae 	beq.w	8012850 <_dtoa_r+0x518>
 80126f4:	9b07      	ldr	r3, [sp, #28]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	f000 80aa 	beq.w	8012850 <_dtoa_r+0x518>
 80126fc:	9b00      	ldr	r3, [sp, #0]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	dd37      	ble.n	8012772 <_dtoa_r+0x43a>
 8012702:	1e7b      	subs	r3, r7, #1
 8012704:	9304      	str	r3, [sp, #16]
 8012706:	4620      	mov	r0, r4
 8012708:	4b7d      	ldr	r3, [pc, #500]	@ (8012900 <_dtoa_r+0x5c8>)
 801270a:	2200      	movs	r2, #0
 801270c:	4629      	mov	r1, r5
 801270e:	f7ed ffd3 	bl	80006b8 <__aeabi_dmul>
 8012712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012716:	9c00      	ldr	r4, [sp, #0]
 8012718:	3601      	adds	r6, #1
 801271a:	4630      	mov	r0, r6
 801271c:	f7ed ff62 	bl	80005e4 <__aeabi_i2d>
 8012720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012724:	f7ed ffc8 	bl	80006b8 <__aeabi_dmul>
 8012728:	4b76      	ldr	r3, [pc, #472]	@ (8012904 <_dtoa_r+0x5cc>)
 801272a:	2200      	movs	r2, #0
 801272c:	f7ed fe0e 	bl	800034c <__adddf3>
 8012730:	4605      	mov	r5, r0
 8012732:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012736:	2c00      	cmp	r4, #0
 8012738:	f040 808d 	bne.w	8012856 <_dtoa_r+0x51e>
 801273c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012740:	4b71      	ldr	r3, [pc, #452]	@ (8012908 <_dtoa_r+0x5d0>)
 8012742:	2200      	movs	r2, #0
 8012744:	f7ed fe00 	bl	8000348 <__aeabi_dsub>
 8012748:	4602      	mov	r2, r0
 801274a:	460b      	mov	r3, r1
 801274c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012750:	462a      	mov	r2, r5
 8012752:	4633      	mov	r3, r6
 8012754:	f7ee fa40 	bl	8000bd8 <__aeabi_dcmpgt>
 8012758:	2800      	cmp	r0, #0
 801275a:	f040 828b 	bne.w	8012c74 <_dtoa_r+0x93c>
 801275e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012762:	462a      	mov	r2, r5
 8012764:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012768:	f7ee fa18 	bl	8000b9c <__aeabi_dcmplt>
 801276c:	2800      	cmp	r0, #0
 801276e:	f040 8128 	bne.w	80129c2 <_dtoa_r+0x68a>
 8012772:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012776:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801277a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801277c:	2b00      	cmp	r3, #0
 801277e:	f2c0 815a 	blt.w	8012a36 <_dtoa_r+0x6fe>
 8012782:	2f0e      	cmp	r7, #14
 8012784:	f300 8157 	bgt.w	8012a36 <_dtoa_r+0x6fe>
 8012788:	4b5a      	ldr	r3, [pc, #360]	@ (80128f4 <_dtoa_r+0x5bc>)
 801278a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801278e:	ed93 7b00 	vldr	d7, [r3]
 8012792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012794:	2b00      	cmp	r3, #0
 8012796:	ed8d 7b00 	vstr	d7, [sp]
 801279a:	da03      	bge.n	80127a4 <_dtoa_r+0x46c>
 801279c:	9b07      	ldr	r3, [sp, #28]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	f340 8101 	ble.w	80129a6 <_dtoa_r+0x66e>
 80127a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80127a8:	4656      	mov	r6, sl
 80127aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127ae:	4620      	mov	r0, r4
 80127b0:	4629      	mov	r1, r5
 80127b2:	f7ee f8ab 	bl	800090c <__aeabi_ddiv>
 80127b6:	f7ee fa2f 	bl	8000c18 <__aeabi_d2iz>
 80127ba:	4680      	mov	r8, r0
 80127bc:	f7ed ff12 	bl	80005e4 <__aeabi_i2d>
 80127c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127c4:	f7ed ff78 	bl	80006b8 <__aeabi_dmul>
 80127c8:	4602      	mov	r2, r0
 80127ca:	460b      	mov	r3, r1
 80127cc:	4620      	mov	r0, r4
 80127ce:	4629      	mov	r1, r5
 80127d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80127d4:	f7ed fdb8 	bl	8000348 <__aeabi_dsub>
 80127d8:	f806 4b01 	strb.w	r4, [r6], #1
 80127dc:	9d07      	ldr	r5, [sp, #28]
 80127de:	eba6 040a 	sub.w	r4, r6, sl
 80127e2:	42a5      	cmp	r5, r4
 80127e4:	4602      	mov	r2, r0
 80127e6:	460b      	mov	r3, r1
 80127e8:	f040 8117 	bne.w	8012a1a <_dtoa_r+0x6e2>
 80127ec:	f7ed fdae 	bl	800034c <__adddf3>
 80127f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127f4:	4604      	mov	r4, r0
 80127f6:	460d      	mov	r5, r1
 80127f8:	f7ee f9ee 	bl	8000bd8 <__aeabi_dcmpgt>
 80127fc:	2800      	cmp	r0, #0
 80127fe:	f040 80f9 	bne.w	80129f4 <_dtoa_r+0x6bc>
 8012802:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012806:	4620      	mov	r0, r4
 8012808:	4629      	mov	r1, r5
 801280a:	f7ee f9bd 	bl	8000b88 <__aeabi_dcmpeq>
 801280e:	b118      	cbz	r0, 8012818 <_dtoa_r+0x4e0>
 8012810:	f018 0f01 	tst.w	r8, #1
 8012814:	f040 80ee 	bne.w	80129f4 <_dtoa_r+0x6bc>
 8012818:	4649      	mov	r1, r9
 801281a:	4658      	mov	r0, fp
 801281c:	f000 fc90 	bl	8013140 <_Bfree>
 8012820:	2300      	movs	r3, #0
 8012822:	7033      	strb	r3, [r6, #0]
 8012824:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012826:	3701      	adds	r7, #1
 8012828:	601f      	str	r7, [r3, #0]
 801282a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801282c:	2b00      	cmp	r3, #0
 801282e:	f000 831d 	beq.w	8012e6c <_dtoa_r+0xb34>
 8012832:	601e      	str	r6, [r3, #0]
 8012834:	e31a      	b.n	8012e6c <_dtoa_r+0xb34>
 8012836:	07e2      	lsls	r2, r4, #31
 8012838:	d505      	bpl.n	8012846 <_dtoa_r+0x50e>
 801283a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801283e:	f7ed ff3b 	bl	80006b8 <__aeabi_dmul>
 8012842:	3601      	adds	r6, #1
 8012844:	2301      	movs	r3, #1
 8012846:	1064      	asrs	r4, r4, #1
 8012848:	3508      	adds	r5, #8
 801284a:	e73f      	b.n	80126cc <_dtoa_r+0x394>
 801284c:	2602      	movs	r6, #2
 801284e:	e742      	b.n	80126d6 <_dtoa_r+0x39e>
 8012850:	9c07      	ldr	r4, [sp, #28]
 8012852:	9704      	str	r7, [sp, #16]
 8012854:	e761      	b.n	801271a <_dtoa_r+0x3e2>
 8012856:	4b27      	ldr	r3, [pc, #156]	@ (80128f4 <_dtoa_r+0x5bc>)
 8012858:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801285a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801285e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012862:	4454      	add	r4, sl
 8012864:	2900      	cmp	r1, #0
 8012866:	d053      	beq.n	8012910 <_dtoa_r+0x5d8>
 8012868:	4928      	ldr	r1, [pc, #160]	@ (801290c <_dtoa_r+0x5d4>)
 801286a:	2000      	movs	r0, #0
 801286c:	f7ee f84e 	bl	800090c <__aeabi_ddiv>
 8012870:	4633      	mov	r3, r6
 8012872:	462a      	mov	r2, r5
 8012874:	f7ed fd68 	bl	8000348 <__aeabi_dsub>
 8012878:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801287c:	4656      	mov	r6, sl
 801287e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012882:	f7ee f9c9 	bl	8000c18 <__aeabi_d2iz>
 8012886:	4605      	mov	r5, r0
 8012888:	f7ed feac 	bl	80005e4 <__aeabi_i2d>
 801288c:	4602      	mov	r2, r0
 801288e:	460b      	mov	r3, r1
 8012890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012894:	f7ed fd58 	bl	8000348 <__aeabi_dsub>
 8012898:	3530      	adds	r5, #48	@ 0x30
 801289a:	4602      	mov	r2, r0
 801289c:	460b      	mov	r3, r1
 801289e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80128a2:	f806 5b01 	strb.w	r5, [r6], #1
 80128a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80128aa:	f7ee f977 	bl	8000b9c <__aeabi_dcmplt>
 80128ae:	2800      	cmp	r0, #0
 80128b0:	d171      	bne.n	8012996 <_dtoa_r+0x65e>
 80128b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80128b6:	4911      	ldr	r1, [pc, #68]	@ (80128fc <_dtoa_r+0x5c4>)
 80128b8:	2000      	movs	r0, #0
 80128ba:	f7ed fd45 	bl	8000348 <__aeabi_dsub>
 80128be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80128c2:	f7ee f96b 	bl	8000b9c <__aeabi_dcmplt>
 80128c6:	2800      	cmp	r0, #0
 80128c8:	f040 8095 	bne.w	80129f6 <_dtoa_r+0x6be>
 80128cc:	42a6      	cmp	r6, r4
 80128ce:	f43f af50 	beq.w	8012772 <_dtoa_r+0x43a>
 80128d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80128d6:	4b0a      	ldr	r3, [pc, #40]	@ (8012900 <_dtoa_r+0x5c8>)
 80128d8:	2200      	movs	r2, #0
 80128da:	f7ed feed 	bl	80006b8 <__aeabi_dmul>
 80128de:	4b08      	ldr	r3, [pc, #32]	@ (8012900 <_dtoa_r+0x5c8>)
 80128e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80128e4:	2200      	movs	r2, #0
 80128e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128ea:	f7ed fee5 	bl	80006b8 <__aeabi_dmul>
 80128ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128f2:	e7c4      	b.n	801287e <_dtoa_r+0x546>
 80128f4:	08014e50 	.word	0x08014e50
 80128f8:	08014e28 	.word	0x08014e28
 80128fc:	3ff00000 	.word	0x3ff00000
 8012900:	40240000 	.word	0x40240000
 8012904:	401c0000 	.word	0x401c0000
 8012908:	40140000 	.word	0x40140000
 801290c:	3fe00000 	.word	0x3fe00000
 8012910:	4631      	mov	r1, r6
 8012912:	4628      	mov	r0, r5
 8012914:	f7ed fed0 	bl	80006b8 <__aeabi_dmul>
 8012918:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801291c:	9415      	str	r4, [sp, #84]	@ 0x54
 801291e:	4656      	mov	r6, sl
 8012920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012924:	f7ee f978 	bl	8000c18 <__aeabi_d2iz>
 8012928:	4605      	mov	r5, r0
 801292a:	f7ed fe5b 	bl	80005e4 <__aeabi_i2d>
 801292e:	4602      	mov	r2, r0
 8012930:	460b      	mov	r3, r1
 8012932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012936:	f7ed fd07 	bl	8000348 <__aeabi_dsub>
 801293a:	3530      	adds	r5, #48	@ 0x30
 801293c:	f806 5b01 	strb.w	r5, [r6], #1
 8012940:	4602      	mov	r2, r0
 8012942:	460b      	mov	r3, r1
 8012944:	42a6      	cmp	r6, r4
 8012946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801294a:	f04f 0200 	mov.w	r2, #0
 801294e:	d124      	bne.n	801299a <_dtoa_r+0x662>
 8012950:	4bac      	ldr	r3, [pc, #688]	@ (8012c04 <_dtoa_r+0x8cc>)
 8012952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012956:	f7ed fcf9 	bl	800034c <__adddf3>
 801295a:	4602      	mov	r2, r0
 801295c:	460b      	mov	r3, r1
 801295e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012962:	f7ee f939 	bl	8000bd8 <__aeabi_dcmpgt>
 8012966:	2800      	cmp	r0, #0
 8012968:	d145      	bne.n	80129f6 <_dtoa_r+0x6be>
 801296a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801296e:	49a5      	ldr	r1, [pc, #660]	@ (8012c04 <_dtoa_r+0x8cc>)
 8012970:	2000      	movs	r0, #0
 8012972:	f7ed fce9 	bl	8000348 <__aeabi_dsub>
 8012976:	4602      	mov	r2, r0
 8012978:	460b      	mov	r3, r1
 801297a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801297e:	f7ee f90d 	bl	8000b9c <__aeabi_dcmplt>
 8012982:	2800      	cmp	r0, #0
 8012984:	f43f aef5 	beq.w	8012772 <_dtoa_r+0x43a>
 8012988:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801298a:	1e73      	subs	r3, r6, #1
 801298c:	9315      	str	r3, [sp, #84]	@ 0x54
 801298e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012992:	2b30      	cmp	r3, #48	@ 0x30
 8012994:	d0f8      	beq.n	8012988 <_dtoa_r+0x650>
 8012996:	9f04      	ldr	r7, [sp, #16]
 8012998:	e73e      	b.n	8012818 <_dtoa_r+0x4e0>
 801299a:	4b9b      	ldr	r3, [pc, #620]	@ (8012c08 <_dtoa_r+0x8d0>)
 801299c:	f7ed fe8c 	bl	80006b8 <__aeabi_dmul>
 80129a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129a4:	e7bc      	b.n	8012920 <_dtoa_r+0x5e8>
 80129a6:	d10c      	bne.n	80129c2 <_dtoa_r+0x68a>
 80129a8:	4b98      	ldr	r3, [pc, #608]	@ (8012c0c <_dtoa_r+0x8d4>)
 80129aa:	2200      	movs	r2, #0
 80129ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129b0:	f7ed fe82 	bl	80006b8 <__aeabi_dmul>
 80129b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129b8:	f7ee f904 	bl	8000bc4 <__aeabi_dcmpge>
 80129bc:	2800      	cmp	r0, #0
 80129be:	f000 8157 	beq.w	8012c70 <_dtoa_r+0x938>
 80129c2:	2400      	movs	r4, #0
 80129c4:	4625      	mov	r5, r4
 80129c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129c8:	43db      	mvns	r3, r3
 80129ca:	9304      	str	r3, [sp, #16]
 80129cc:	4656      	mov	r6, sl
 80129ce:	2700      	movs	r7, #0
 80129d0:	4621      	mov	r1, r4
 80129d2:	4658      	mov	r0, fp
 80129d4:	f000 fbb4 	bl	8013140 <_Bfree>
 80129d8:	2d00      	cmp	r5, #0
 80129da:	d0dc      	beq.n	8012996 <_dtoa_r+0x65e>
 80129dc:	b12f      	cbz	r7, 80129ea <_dtoa_r+0x6b2>
 80129de:	42af      	cmp	r7, r5
 80129e0:	d003      	beq.n	80129ea <_dtoa_r+0x6b2>
 80129e2:	4639      	mov	r1, r7
 80129e4:	4658      	mov	r0, fp
 80129e6:	f000 fbab 	bl	8013140 <_Bfree>
 80129ea:	4629      	mov	r1, r5
 80129ec:	4658      	mov	r0, fp
 80129ee:	f000 fba7 	bl	8013140 <_Bfree>
 80129f2:	e7d0      	b.n	8012996 <_dtoa_r+0x65e>
 80129f4:	9704      	str	r7, [sp, #16]
 80129f6:	4633      	mov	r3, r6
 80129f8:	461e      	mov	r6, r3
 80129fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80129fe:	2a39      	cmp	r2, #57	@ 0x39
 8012a00:	d107      	bne.n	8012a12 <_dtoa_r+0x6da>
 8012a02:	459a      	cmp	sl, r3
 8012a04:	d1f8      	bne.n	80129f8 <_dtoa_r+0x6c0>
 8012a06:	9a04      	ldr	r2, [sp, #16]
 8012a08:	3201      	adds	r2, #1
 8012a0a:	9204      	str	r2, [sp, #16]
 8012a0c:	2230      	movs	r2, #48	@ 0x30
 8012a0e:	f88a 2000 	strb.w	r2, [sl]
 8012a12:	781a      	ldrb	r2, [r3, #0]
 8012a14:	3201      	adds	r2, #1
 8012a16:	701a      	strb	r2, [r3, #0]
 8012a18:	e7bd      	b.n	8012996 <_dtoa_r+0x65e>
 8012a1a:	4b7b      	ldr	r3, [pc, #492]	@ (8012c08 <_dtoa_r+0x8d0>)
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	f7ed fe4b 	bl	80006b8 <__aeabi_dmul>
 8012a22:	2200      	movs	r2, #0
 8012a24:	2300      	movs	r3, #0
 8012a26:	4604      	mov	r4, r0
 8012a28:	460d      	mov	r5, r1
 8012a2a:	f7ee f8ad 	bl	8000b88 <__aeabi_dcmpeq>
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	f43f aebb 	beq.w	80127aa <_dtoa_r+0x472>
 8012a34:	e6f0      	b.n	8012818 <_dtoa_r+0x4e0>
 8012a36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012a38:	2a00      	cmp	r2, #0
 8012a3a:	f000 80db 	beq.w	8012bf4 <_dtoa_r+0x8bc>
 8012a3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a40:	2a01      	cmp	r2, #1
 8012a42:	f300 80bf 	bgt.w	8012bc4 <_dtoa_r+0x88c>
 8012a46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012a48:	2a00      	cmp	r2, #0
 8012a4a:	f000 80b7 	beq.w	8012bbc <_dtoa_r+0x884>
 8012a4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012a52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012a54:	4646      	mov	r6, r8
 8012a56:	9a08      	ldr	r2, [sp, #32]
 8012a58:	2101      	movs	r1, #1
 8012a5a:	441a      	add	r2, r3
 8012a5c:	4658      	mov	r0, fp
 8012a5e:	4498      	add	r8, r3
 8012a60:	9208      	str	r2, [sp, #32]
 8012a62:	f000 fc21 	bl	80132a8 <__i2b>
 8012a66:	4605      	mov	r5, r0
 8012a68:	b15e      	cbz	r6, 8012a82 <_dtoa_r+0x74a>
 8012a6a:	9b08      	ldr	r3, [sp, #32]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	dd08      	ble.n	8012a82 <_dtoa_r+0x74a>
 8012a70:	42b3      	cmp	r3, r6
 8012a72:	9a08      	ldr	r2, [sp, #32]
 8012a74:	bfa8      	it	ge
 8012a76:	4633      	movge	r3, r6
 8012a78:	eba8 0803 	sub.w	r8, r8, r3
 8012a7c:	1af6      	subs	r6, r6, r3
 8012a7e:	1ad3      	subs	r3, r2, r3
 8012a80:	9308      	str	r3, [sp, #32]
 8012a82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a84:	b1f3      	cbz	r3, 8012ac4 <_dtoa_r+0x78c>
 8012a86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	f000 80b7 	beq.w	8012bfc <_dtoa_r+0x8c4>
 8012a8e:	b18c      	cbz	r4, 8012ab4 <_dtoa_r+0x77c>
 8012a90:	4629      	mov	r1, r5
 8012a92:	4622      	mov	r2, r4
 8012a94:	4658      	mov	r0, fp
 8012a96:	f000 fcc7 	bl	8013428 <__pow5mult>
 8012a9a:	464a      	mov	r2, r9
 8012a9c:	4601      	mov	r1, r0
 8012a9e:	4605      	mov	r5, r0
 8012aa0:	4658      	mov	r0, fp
 8012aa2:	f000 fc17 	bl	80132d4 <__multiply>
 8012aa6:	4649      	mov	r1, r9
 8012aa8:	9004      	str	r0, [sp, #16]
 8012aaa:	4658      	mov	r0, fp
 8012aac:	f000 fb48 	bl	8013140 <_Bfree>
 8012ab0:	9b04      	ldr	r3, [sp, #16]
 8012ab2:	4699      	mov	r9, r3
 8012ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ab6:	1b1a      	subs	r2, r3, r4
 8012ab8:	d004      	beq.n	8012ac4 <_dtoa_r+0x78c>
 8012aba:	4649      	mov	r1, r9
 8012abc:	4658      	mov	r0, fp
 8012abe:	f000 fcb3 	bl	8013428 <__pow5mult>
 8012ac2:	4681      	mov	r9, r0
 8012ac4:	2101      	movs	r1, #1
 8012ac6:	4658      	mov	r0, fp
 8012ac8:	f000 fbee 	bl	80132a8 <__i2b>
 8012acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ace:	4604      	mov	r4, r0
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	f000 81cf 	beq.w	8012e74 <_dtoa_r+0xb3c>
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	4601      	mov	r1, r0
 8012ada:	4658      	mov	r0, fp
 8012adc:	f000 fca4 	bl	8013428 <__pow5mult>
 8012ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	f300 8095 	bgt.w	8012c14 <_dtoa_r+0x8dc>
 8012aea:	9b02      	ldr	r3, [sp, #8]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	f040 8087 	bne.w	8012c00 <_dtoa_r+0x8c8>
 8012af2:	9b03      	ldr	r3, [sp, #12]
 8012af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f040 8089 	bne.w	8012c10 <_dtoa_r+0x8d8>
 8012afe:	9b03      	ldr	r3, [sp, #12]
 8012b00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b04:	0d1b      	lsrs	r3, r3, #20
 8012b06:	051b      	lsls	r3, r3, #20
 8012b08:	b12b      	cbz	r3, 8012b16 <_dtoa_r+0x7de>
 8012b0a:	9b08      	ldr	r3, [sp, #32]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	9308      	str	r3, [sp, #32]
 8012b10:	f108 0801 	add.w	r8, r8, #1
 8012b14:	2301      	movs	r3, #1
 8012b16:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f000 81b0 	beq.w	8012e80 <_dtoa_r+0xb48>
 8012b20:	6923      	ldr	r3, [r4, #16]
 8012b22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012b26:	6918      	ldr	r0, [r3, #16]
 8012b28:	f000 fb72 	bl	8013210 <__hi0bits>
 8012b2c:	f1c0 0020 	rsb	r0, r0, #32
 8012b30:	9b08      	ldr	r3, [sp, #32]
 8012b32:	4418      	add	r0, r3
 8012b34:	f010 001f 	ands.w	r0, r0, #31
 8012b38:	d077      	beq.n	8012c2a <_dtoa_r+0x8f2>
 8012b3a:	f1c0 0320 	rsb	r3, r0, #32
 8012b3e:	2b04      	cmp	r3, #4
 8012b40:	dd6b      	ble.n	8012c1a <_dtoa_r+0x8e2>
 8012b42:	9b08      	ldr	r3, [sp, #32]
 8012b44:	f1c0 001c 	rsb	r0, r0, #28
 8012b48:	4403      	add	r3, r0
 8012b4a:	4480      	add	r8, r0
 8012b4c:	4406      	add	r6, r0
 8012b4e:	9308      	str	r3, [sp, #32]
 8012b50:	f1b8 0f00 	cmp.w	r8, #0
 8012b54:	dd05      	ble.n	8012b62 <_dtoa_r+0x82a>
 8012b56:	4649      	mov	r1, r9
 8012b58:	4642      	mov	r2, r8
 8012b5a:	4658      	mov	r0, fp
 8012b5c:	f000 fcbe 	bl	80134dc <__lshift>
 8012b60:	4681      	mov	r9, r0
 8012b62:	9b08      	ldr	r3, [sp, #32]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	dd05      	ble.n	8012b74 <_dtoa_r+0x83c>
 8012b68:	4621      	mov	r1, r4
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	4658      	mov	r0, fp
 8012b6e:	f000 fcb5 	bl	80134dc <__lshift>
 8012b72:	4604      	mov	r4, r0
 8012b74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d059      	beq.n	8012c2e <_dtoa_r+0x8f6>
 8012b7a:	4621      	mov	r1, r4
 8012b7c:	4648      	mov	r0, r9
 8012b7e:	f000 fd19 	bl	80135b4 <__mcmp>
 8012b82:	2800      	cmp	r0, #0
 8012b84:	da53      	bge.n	8012c2e <_dtoa_r+0x8f6>
 8012b86:	1e7b      	subs	r3, r7, #1
 8012b88:	9304      	str	r3, [sp, #16]
 8012b8a:	4649      	mov	r1, r9
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	220a      	movs	r2, #10
 8012b90:	4658      	mov	r0, fp
 8012b92:	f000 faf7 	bl	8013184 <__multadd>
 8012b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b98:	4681      	mov	r9, r0
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	f000 8172 	beq.w	8012e84 <_dtoa_r+0xb4c>
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	4629      	mov	r1, r5
 8012ba4:	220a      	movs	r2, #10
 8012ba6:	4658      	mov	r0, fp
 8012ba8:	f000 faec 	bl	8013184 <__multadd>
 8012bac:	9b00      	ldr	r3, [sp, #0]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	4605      	mov	r5, r0
 8012bb2:	dc67      	bgt.n	8012c84 <_dtoa_r+0x94c>
 8012bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bb6:	2b02      	cmp	r3, #2
 8012bb8:	dc41      	bgt.n	8012c3e <_dtoa_r+0x906>
 8012bba:	e063      	b.n	8012c84 <_dtoa_r+0x94c>
 8012bbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012bbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012bc2:	e746      	b.n	8012a52 <_dtoa_r+0x71a>
 8012bc4:	9b07      	ldr	r3, [sp, #28]
 8012bc6:	1e5c      	subs	r4, r3, #1
 8012bc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012bca:	42a3      	cmp	r3, r4
 8012bcc:	bfbf      	itttt	lt
 8012bce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012bd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012bd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012bd4:	1ae3      	sublt	r3, r4, r3
 8012bd6:	bfb4      	ite	lt
 8012bd8:	18d2      	addlt	r2, r2, r3
 8012bda:	1b1c      	subge	r4, r3, r4
 8012bdc:	9b07      	ldr	r3, [sp, #28]
 8012bde:	bfbc      	itt	lt
 8012be0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012be2:	2400      	movlt	r4, #0
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	bfb5      	itete	lt
 8012be8:	eba8 0603 	sublt.w	r6, r8, r3
 8012bec:	9b07      	ldrge	r3, [sp, #28]
 8012bee:	2300      	movlt	r3, #0
 8012bf0:	4646      	movge	r6, r8
 8012bf2:	e730      	b.n	8012a56 <_dtoa_r+0x71e>
 8012bf4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012bf6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012bf8:	4646      	mov	r6, r8
 8012bfa:	e735      	b.n	8012a68 <_dtoa_r+0x730>
 8012bfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012bfe:	e75c      	b.n	8012aba <_dtoa_r+0x782>
 8012c00:	2300      	movs	r3, #0
 8012c02:	e788      	b.n	8012b16 <_dtoa_r+0x7de>
 8012c04:	3fe00000 	.word	0x3fe00000
 8012c08:	40240000 	.word	0x40240000
 8012c0c:	40140000 	.word	0x40140000
 8012c10:	9b02      	ldr	r3, [sp, #8]
 8012c12:	e780      	b.n	8012b16 <_dtoa_r+0x7de>
 8012c14:	2300      	movs	r3, #0
 8012c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c18:	e782      	b.n	8012b20 <_dtoa_r+0x7e8>
 8012c1a:	d099      	beq.n	8012b50 <_dtoa_r+0x818>
 8012c1c:	9a08      	ldr	r2, [sp, #32]
 8012c1e:	331c      	adds	r3, #28
 8012c20:	441a      	add	r2, r3
 8012c22:	4498      	add	r8, r3
 8012c24:	441e      	add	r6, r3
 8012c26:	9208      	str	r2, [sp, #32]
 8012c28:	e792      	b.n	8012b50 <_dtoa_r+0x818>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	e7f6      	b.n	8012c1c <_dtoa_r+0x8e4>
 8012c2e:	9b07      	ldr	r3, [sp, #28]
 8012c30:	9704      	str	r7, [sp, #16]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	dc20      	bgt.n	8012c78 <_dtoa_r+0x940>
 8012c36:	9300      	str	r3, [sp, #0]
 8012c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c3a:	2b02      	cmp	r3, #2
 8012c3c:	dd1e      	ble.n	8012c7c <_dtoa_r+0x944>
 8012c3e:	9b00      	ldr	r3, [sp, #0]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	f47f aec0 	bne.w	80129c6 <_dtoa_r+0x68e>
 8012c46:	4621      	mov	r1, r4
 8012c48:	2205      	movs	r2, #5
 8012c4a:	4658      	mov	r0, fp
 8012c4c:	f000 fa9a 	bl	8013184 <__multadd>
 8012c50:	4601      	mov	r1, r0
 8012c52:	4604      	mov	r4, r0
 8012c54:	4648      	mov	r0, r9
 8012c56:	f000 fcad 	bl	80135b4 <__mcmp>
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	f77f aeb3 	ble.w	80129c6 <_dtoa_r+0x68e>
 8012c60:	4656      	mov	r6, sl
 8012c62:	2331      	movs	r3, #49	@ 0x31
 8012c64:	f806 3b01 	strb.w	r3, [r6], #1
 8012c68:	9b04      	ldr	r3, [sp, #16]
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	9304      	str	r3, [sp, #16]
 8012c6e:	e6ae      	b.n	80129ce <_dtoa_r+0x696>
 8012c70:	9c07      	ldr	r4, [sp, #28]
 8012c72:	9704      	str	r7, [sp, #16]
 8012c74:	4625      	mov	r5, r4
 8012c76:	e7f3      	b.n	8012c60 <_dtoa_r+0x928>
 8012c78:	9b07      	ldr	r3, [sp, #28]
 8012c7a:	9300      	str	r3, [sp, #0]
 8012c7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	f000 8104 	beq.w	8012e8c <_dtoa_r+0xb54>
 8012c84:	2e00      	cmp	r6, #0
 8012c86:	dd05      	ble.n	8012c94 <_dtoa_r+0x95c>
 8012c88:	4629      	mov	r1, r5
 8012c8a:	4632      	mov	r2, r6
 8012c8c:	4658      	mov	r0, fp
 8012c8e:	f000 fc25 	bl	80134dc <__lshift>
 8012c92:	4605      	mov	r5, r0
 8012c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d05a      	beq.n	8012d50 <_dtoa_r+0xa18>
 8012c9a:	6869      	ldr	r1, [r5, #4]
 8012c9c:	4658      	mov	r0, fp
 8012c9e:	f000 fa0f 	bl	80130c0 <_Balloc>
 8012ca2:	4606      	mov	r6, r0
 8012ca4:	b928      	cbnz	r0, 8012cb2 <_dtoa_r+0x97a>
 8012ca6:	4b84      	ldr	r3, [pc, #528]	@ (8012eb8 <_dtoa_r+0xb80>)
 8012ca8:	4602      	mov	r2, r0
 8012caa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012cae:	f7ff bb5a 	b.w	8012366 <_dtoa_r+0x2e>
 8012cb2:	692a      	ldr	r2, [r5, #16]
 8012cb4:	3202      	adds	r2, #2
 8012cb6:	0092      	lsls	r2, r2, #2
 8012cb8:	f105 010c 	add.w	r1, r5, #12
 8012cbc:	300c      	adds	r0, #12
 8012cbe:	f7ff faa4 	bl	801220a <memcpy>
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	4631      	mov	r1, r6
 8012cc6:	4658      	mov	r0, fp
 8012cc8:	f000 fc08 	bl	80134dc <__lshift>
 8012ccc:	f10a 0301 	add.w	r3, sl, #1
 8012cd0:	9307      	str	r3, [sp, #28]
 8012cd2:	9b00      	ldr	r3, [sp, #0]
 8012cd4:	4453      	add	r3, sl
 8012cd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012cd8:	9b02      	ldr	r3, [sp, #8]
 8012cda:	f003 0301 	and.w	r3, r3, #1
 8012cde:	462f      	mov	r7, r5
 8012ce0:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ce2:	4605      	mov	r5, r0
 8012ce4:	9b07      	ldr	r3, [sp, #28]
 8012ce6:	4621      	mov	r1, r4
 8012ce8:	3b01      	subs	r3, #1
 8012cea:	4648      	mov	r0, r9
 8012cec:	9300      	str	r3, [sp, #0]
 8012cee:	f7ff fa9a 	bl	8012226 <quorem>
 8012cf2:	4639      	mov	r1, r7
 8012cf4:	9002      	str	r0, [sp, #8]
 8012cf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012cfa:	4648      	mov	r0, r9
 8012cfc:	f000 fc5a 	bl	80135b4 <__mcmp>
 8012d00:	462a      	mov	r2, r5
 8012d02:	9008      	str	r0, [sp, #32]
 8012d04:	4621      	mov	r1, r4
 8012d06:	4658      	mov	r0, fp
 8012d08:	f000 fc70 	bl	80135ec <__mdiff>
 8012d0c:	68c2      	ldr	r2, [r0, #12]
 8012d0e:	4606      	mov	r6, r0
 8012d10:	bb02      	cbnz	r2, 8012d54 <_dtoa_r+0xa1c>
 8012d12:	4601      	mov	r1, r0
 8012d14:	4648      	mov	r0, r9
 8012d16:	f000 fc4d 	bl	80135b4 <__mcmp>
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	4631      	mov	r1, r6
 8012d1e:	4658      	mov	r0, fp
 8012d20:	920e      	str	r2, [sp, #56]	@ 0x38
 8012d22:	f000 fa0d 	bl	8013140 <_Bfree>
 8012d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012d2a:	9e07      	ldr	r6, [sp, #28]
 8012d2c:	ea43 0102 	orr.w	r1, r3, r2
 8012d30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d32:	4319      	orrs	r1, r3
 8012d34:	d110      	bne.n	8012d58 <_dtoa_r+0xa20>
 8012d36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012d3a:	d029      	beq.n	8012d90 <_dtoa_r+0xa58>
 8012d3c:	9b08      	ldr	r3, [sp, #32]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	dd02      	ble.n	8012d48 <_dtoa_r+0xa10>
 8012d42:	9b02      	ldr	r3, [sp, #8]
 8012d44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012d48:	9b00      	ldr	r3, [sp, #0]
 8012d4a:	f883 8000 	strb.w	r8, [r3]
 8012d4e:	e63f      	b.n	80129d0 <_dtoa_r+0x698>
 8012d50:	4628      	mov	r0, r5
 8012d52:	e7bb      	b.n	8012ccc <_dtoa_r+0x994>
 8012d54:	2201      	movs	r2, #1
 8012d56:	e7e1      	b.n	8012d1c <_dtoa_r+0x9e4>
 8012d58:	9b08      	ldr	r3, [sp, #32]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	db04      	blt.n	8012d68 <_dtoa_r+0xa30>
 8012d5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012d60:	430b      	orrs	r3, r1
 8012d62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012d64:	430b      	orrs	r3, r1
 8012d66:	d120      	bne.n	8012daa <_dtoa_r+0xa72>
 8012d68:	2a00      	cmp	r2, #0
 8012d6a:	dded      	ble.n	8012d48 <_dtoa_r+0xa10>
 8012d6c:	4649      	mov	r1, r9
 8012d6e:	2201      	movs	r2, #1
 8012d70:	4658      	mov	r0, fp
 8012d72:	f000 fbb3 	bl	80134dc <__lshift>
 8012d76:	4621      	mov	r1, r4
 8012d78:	4681      	mov	r9, r0
 8012d7a:	f000 fc1b 	bl	80135b4 <__mcmp>
 8012d7e:	2800      	cmp	r0, #0
 8012d80:	dc03      	bgt.n	8012d8a <_dtoa_r+0xa52>
 8012d82:	d1e1      	bne.n	8012d48 <_dtoa_r+0xa10>
 8012d84:	f018 0f01 	tst.w	r8, #1
 8012d88:	d0de      	beq.n	8012d48 <_dtoa_r+0xa10>
 8012d8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012d8e:	d1d8      	bne.n	8012d42 <_dtoa_r+0xa0a>
 8012d90:	9a00      	ldr	r2, [sp, #0]
 8012d92:	2339      	movs	r3, #57	@ 0x39
 8012d94:	7013      	strb	r3, [r2, #0]
 8012d96:	4633      	mov	r3, r6
 8012d98:	461e      	mov	r6, r3
 8012d9a:	3b01      	subs	r3, #1
 8012d9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012da0:	2a39      	cmp	r2, #57	@ 0x39
 8012da2:	d052      	beq.n	8012e4a <_dtoa_r+0xb12>
 8012da4:	3201      	adds	r2, #1
 8012da6:	701a      	strb	r2, [r3, #0]
 8012da8:	e612      	b.n	80129d0 <_dtoa_r+0x698>
 8012daa:	2a00      	cmp	r2, #0
 8012dac:	dd07      	ble.n	8012dbe <_dtoa_r+0xa86>
 8012dae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012db2:	d0ed      	beq.n	8012d90 <_dtoa_r+0xa58>
 8012db4:	9a00      	ldr	r2, [sp, #0]
 8012db6:	f108 0301 	add.w	r3, r8, #1
 8012dba:	7013      	strb	r3, [r2, #0]
 8012dbc:	e608      	b.n	80129d0 <_dtoa_r+0x698>
 8012dbe:	9b07      	ldr	r3, [sp, #28]
 8012dc0:	9a07      	ldr	r2, [sp, #28]
 8012dc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012dc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	d028      	beq.n	8012e1e <_dtoa_r+0xae6>
 8012dcc:	4649      	mov	r1, r9
 8012dce:	2300      	movs	r3, #0
 8012dd0:	220a      	movs	r2, #10
 8012dd2:	4658      	mov	r0, fp
 8012dd4:	f000 f9d6 	bl	8013184 <__multadd>
 8012dd8:	42af      	cmp	r7, r5
 8012dda:	4681      	mov	r9, r0
 8012ddc:	f04f 0300 	mov.w	r3, #0
 8012de0:	f04f 020a 	mov.w	r2, #10
 8012de4:	4639      	mov	r1, r7
 8012de6:	4658      	mov	r0, fp
 8012de8:	d107      	bne.n	8012dfa <_dtoa_r+0xac2>
 8012dea:	f000 f9cb 	bl	8013184 <__multadd>
 8012dee:	4607      	mov	r7, r0
 8012df0:	4605      	mov	r5, r0
 8012df2:	9b07      	ldr	r3, [sp, #28]
 8012df4:	3301      	adds	r3, #1
 8012df6:	9307      	str	r3, [sp, #28]
 8012df8:	e774      	b.n	8012ce4 <_dtoa_r+0x9ac>
 8012dfa:	f000 f9c3 	bl	8013184 <__multadd>
 8012dfe:	4629      	mov	r1, r5
 8012e00:	4607      	mov	r7, r0
 8012e02:	2300      	movs	r3, #0
 8012e04:	220a      	movs	r2, #10
 8012e06:	4658      	mov	r0, fp
 8012e08:	f000 f9bc 	bl	8013184 <__multadd>
 8012e0c:	4605      	mov	r5, r0
 8012e0e:	e7f0      	b.n	8012df2 <_dtoa_r+0xaba>
 8012e10:	9b00      	ldr	r3, [sp, #0]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	bfcc      	ite	gt
 8012e16:	461e      	movgt	r6, r3
 8012e18:	2601      	movle	r6, #1
 8012e1a:	4456      	add	r6, sl
 8012e1c:	2700      	movs	r7, #0
 8012e1e:	4649      	mov	r1, r9
 8012e20:	2201      	movs	r2, #1
 8012e22:	4658      	mov	r0, fp
 8012e24:	f000 fb5a 	bl	80134dc <__lshift>
 8012e28:	4621      	mov	r1, r4
 8012e2a:	4681      	mov	r9, r0
 8012e2c:	f000 fbc2 	bl	80135b4 <__mcmp>
 8012e30:	2800      	cmp	r0, #0
 8012e32:	dcb0      	bgt.n	8012d96 <_dtoa_r+0xa5e>
 8012e34:	d102      	bne.n	8012e3c <_dtoa_r+0xb04>
 8012e36:	f018 0f01 	tst.w	r8, #1
 8012e3a:	d1ac      	bne.n	8012d96 <_dtoa_r+0xa5e>
 8012e3c:	4633      	mov	r3, r6
 8012e3e:	461e      	mov	r6, r3
 8012e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e44:	2a30      	cmp	r2, #48	@ 0x30
 8012e46:	d0fa      	beq.n	8012e3e <_dtoa_r+0xb06>
 8012e48:	e5c2      	b.n	80129d0 <_dtoa_r+0x698>
 8012e4a:	459a      	cmp	sl, r3
 8012e4c:	d1a4      	bne.n	8012d98 <_dtoa_r+0xa60>
 8012e4e:	9b04      	ldr	r3, [sp, #16]
 8012e50:	3301      	adds	r3, #1
 8012e52:	9304      	str	r3, [sp, #16]
 8012e54:	2331      	movs	r3, #49	@ 0x31
 8012e56:	f88a 3000 	strb.w	r3, [sl]
 8012e5a:	e5b9      	b.n	80129d0 <_dtoa_r+0x698>
 8012e5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012e5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012ebc <_dtoa_r+0xb84>
 8012e62:	b11b      	cbz	r3, 8012e6c <_dtoa_r+0xb34>
 8012e64:	f10a 0308 	add.w	r3, sl, #8
 8012e68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012e6a:	6013      	str	r3, [r2, #0]
 8012e6c:	4650      	mov	r0, sl
 8012e6e:	b019      	add	sp, #100	@ 0x64
 8012e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e76:	2b01      	cmp	r3, #1
 8012e78:	f77f ae37 	ble.w	8012aea <_dtoa_r+0x7b2>
 8012e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e80:	2001      	movs	r0, #1
 8012e82:	e655      	b.n	8012b30 <_dtoa_r+0x7f8>
 8012e84:	9b00      	ldr	r3, [sp, #0]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	f77f aed6 	ble.w	8012c38 <_dtoa_r+0x900>
 8012e8c:	4656      	mov	r6, sl
 8012e8e:	4621      	mov	r1, r4
 8012e90:	4648      	mov	r0, r9
 8012e92:	f7ff f9c8 	bl	8012226 <quorem>
 8012e96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012e9a:	f806 8b01 	strb.w	r8, [r6], #1
 8012e9e:	9b00      	ldr	r3, [sp, #0]
 8012ea0:	eba6 020a 	sub.w	r2, r6, sl
 8012ea4:	4293      	cmp	r3, r2
 8012ea6:	ddb3      	ble.n	8012e10 <_dtoa_r+0xad8>
 8012ea8:	4649      	mov	r1, r9
 8012eaa:	2300      	movs	r3, #0
 8012eac:	220a      	movs	r2, #10
 8012eae:	4658      	mov	r0, fp
 8012eb0:	f000 f968 	bl	8013184 <__multadd>
 8012eb4:	4681      	mov	r9, r0
 8012eb6:	e7ea      	b.n	8012e8e <_dtoa_r+0xb56>
 8012eb8:	08014dae 	.word	0x08014dae
 8012ebc:	08014d32 	.word	0x08014d32

08012ec0 <_free_r>:
 8012ec0:	b538      	push	{r3, r4, r5, lr}
 8012ec2:	4605      	mov	r5, r0
 8012ec4:	2900      	cmp	r1, #0
 8012ec6:	d041      	beq.n	8012f4c <_free_r+0x8c>
 8012ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ecc:	1f0c      	subs	r4, r1, #4
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	bfb8      	it	lt
 8012ed2:	18e4      	addlt	r4, r4, r3
 8012ed4:	f000 f8e8 	bl	80130a8 <__malloc_lock>
 8012ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8012f50 <_free_r+0x90>)
 8012eda:	6813      	ldr	r3, [r2, #0]
 8012edc:	b933      	cbnz	r3, 8012eec <_free_r+0x2c>
 8012ede:	6063      	str	r3, [r4, #4]
 8012ee0:	6014      	str	r4, [r2, #0]
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ee8:	f000 b8e4 	b.w	80130b4 <__malloc_unlock>
 8012eec:	42a3      	cmp	r3, r4
 8012eee:	d908      	bls.n	8012f02 <_free_r+0x42>
 8012ef0:	6820      	ldr	r0, [r4, #0]
 8012ef2:	1821      	adds	r1, r4, r0
 8012ef4:	428b      	cmp	r3, r1
 8012ef6:	bf01      	itttt	eq
 8012ef8:	6819      	ldreq	r1, [r3, #0]
 8012efa:	685b      	ldreq	r3, [r3, #4]
 8012efc:	1809      	addeq	r1, r1, r0
 8012efe:	6021      	streq	r1, [r4, #0]
 8012f00:	e7ed      	b.n	8012ede <_free_r+0x1e>
 8012f02:	461a      	mov	r2, r3
 8012f04:	685b      	ldr	r3, [r3, #4]
 8012f06:	b10b      	cbz	r3, 8012f0c <_free_r+0x4c>
 8012f08:	42a3      	cmp	r3, r4
 8012f0a:	d9fa      	bls.n	8012f02 <_free_r+0x42>
 8012f0c:	6811      	ldr	r1, [r2, #0]
 8012f0e:	1850      	adds	r0, r2, r1
 8012f10:	42a0      	cmp	r0, r4
 8012f12:	d10b      	bne.n	8012f2c <_free_r+0x6c>
 8012f14:	6820      	ldr	r0, [r4, #0]
 8012f16:	4401      	add	r1, r0
 8012f18:	1850      	adds	r0, r2, r1
 8012f1a:	4283      	cmp	r3, r0
 8012f1c:	6011      	str	r1, [r2, #0]
 8012f1e:	d1e0      	bne.n	8012ee2 <_free_r+0x22>
 8012f20:	6818      	ldr	r0, [r3, #0]
 8012f22:	685b      	ldr	r3, [r3, #4]
 8012f24:	6053      	str	r3, [r2, #4]
 8012f26:	4408      	add	r0, r1
 8012f28:	6010      	str	r0, [r2, #0]
 8012f2a:	e7da      	b.n	8012ee2 <_free_r+0x22>
 8012f2c:	d902      	bls.n	8012f34 <_free_r+0x74>
 8012f2e:	230c      	movs	r3, #12
 8012f30:	602b      	str	r3, [r5, #0]
 8012f32:	e7d6      	b.n	8012ee2 <_free_r+0x22>
 8012f34:	6820      	ldr	r0, [r4, #0]
 8012f36:	1821      	adds	r1, r4, r0
 8012f38:	428b      	cmp	r3, r1
 8012f3a:	bf04      	itt	eq
 8012f3c:	6819      	ldreq	r1, [r3, #0]
 8012f3e:	685b      	ldreq	r3, [r3, #4]
 8012f40:	6063      	str	r3, [r4, #4]
 8012f42:	bf04      	itt	eq
 8012f44:	1809      	addeq	r1, r1, r0
 8012f46:	6021      	streq	r1, [r4, #0]
 8012f48:	6054      	str	r4, [r2, #4]
 8012f4a:	e7ca      	b.n	8012ee2 <_free_r+0x22>
 8012f4c:	bd38      	pop	{r3, r4, r5, pc}
 8012f4e:	bf00      	nop
 8012f50:	20017164 	.word	0x20017164

08012f54 <malloc>:
 8012f54:	4b02      	ldr	r3, [pc, #8]	@ (8012f60 <malloc+0xc>)
 8012f56:	4601      	mov	r1, r0
 8012f58:	6818      	ldr	r0, [r3, #0]
 8012f5a:	f000 b825 	b.w	8012fa8 <_malloc_r>
 8012f5e:	bf00      	nop
 8012f60:	20000040 	.word	0x20000040

08012f64 <sbrk_aligned>:
 8012f64:	b570      	push	{r4, r5, r6, lr}
 8012f66:	4e0f      	ldr	r6, [pc, #60]	@ (8012fa4 <sbrk_aligned+0x40>)
 8012f68:	460c      	mov	r4, r1
 8012f6a:	6831      	ldr	r1, [r6, #0]
 8012f6c:	4605      	mov	r5, r0
 8012f6e:	b911      	cbnz	r1, 8012f76 <sbrk_aligned+0x12>
 8012f70:	f000 fe46 	bl	8013c00 <_sbrk_r>
 8012f74:	6030      	str	r0, [r6, #0]
 8012f76:	4621      	mov	r1, r4
 8012f78:	4628      	mov	r0, r5
 8012f7a:	f000 fe41 	bl	8013c00 <_sbrk_r>
 8012f7e:	1c43      	adds	r3, r0, #1
 8012f80:	d103      	bne.n	8012f8a <sbrk_aligned+0x26>
 8012f82:	f04f 34ff 	mov.w	r4, #4294967295
 8012f86:	4620      	mov	r0, r4
 8012f88:	bd70      	pop	{r4, r5, r6, pc}
 8012f8a:	1cc4      	adds	r4, r0, #3
 8012f8c:	f024 0403 	bic.w	r4, r4, #3
 8012f90:	42a0      	cmp	r0, r4
 8012f92:	d0f8      	beq.n	8012f86 <sbrk_aligned+0x22>
 8012f94:	1a21      	subs	r1, r4, r0
 8012f96:	4628      	mov	r0, r5
 8012f98:	f000 fe32 	bl	8013c00 <_sbrk_r>
 8012f9c:	3001      	adds	r0, #1
 8012f9e:	d1f2      	bne.n	8012f86 <sbrk_aligned+0x22>
 8012fa0:	e7ef      	b.n	8012f82 <sbrk_aligned+0x1e>
 8012fa2:	bf00      	nop
 8012fa4:	20017160 	.word	0x20017160

08012fa8 <_malloc_r>:
 8012fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fac:	1ccd      	adds	r5, r1, #3
 8012fae:	f025 0503 	bic.w	r5, r5, #3
 8012fb2:	3508      	adds	r5, #8
 8012fb4:	2d0c      	cmp	r5, #12
 8012fb6:	bf38      	it	cc
 8012fb8:	250c      	movcc	r5, #12
 8012fba:	2d00      	cmp	r5, #0
 8012fbc:	4606      	mov	r6, r0
 8012fbe:	db01      	blt.n	8012fc4 <_malloc_r+0x1c>
 8012fc0:	42a9      	cmp	r1, r5
 8012fc2:	d904      	bls.n	8012fce <_malloc_r+0x26>
 8012fc4:	230c      	movs	r3, #12
 8012fc6:	6033      	str	r3, [r6, #0]
 8012fc8:	2000      	movs	r0, #0
 8012fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80130a4 <_malloc_r+0xfc>
 8012fd2:	f000 f869 	bl	80130a8 <__malloc_lock>
 8012fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8012fda:	461c      	mov	r4, r3
 8012fdc:	bb44      	cbnz	r4, 8013030 <_malloc_r+0x88>
 8012fde:	4629      	mov	r1, r5
 8012fe0:	4630      	mov	r0, r6
 8012fe2:	f7ff ffbf 	bl	8012f64 <sbrk_aligned>
 8012fe6:	1c43      	adds	r3, r0, #1
 8012fe8:	4604      	mov	r4, r0
 8012fea:	d158      	bne.n	801309e <_malloc_r+0xf6>
 8012fec:	f8d8 4000 	ldr.w	r4, [r8]
 8012ff0:	4627      	mov	r7, r4
 8012ff2:	2f00      	cmp	r7, #0
 8012ff4:	d143      	bne.n	801307e <_malloc_r+0xd6>
 8012ff6:	2c00      	cmp	r4, #0
 8012ff8:	d04b      	beq.n	8013092 <_malloc_r+0xea>
 8012ffa:	6823      	ldr	r3, [r4, #0]
 8012ffc:	4639      	mov	r1, r7
 8012ffe:	4630      	mov	r0, r6
 8013000:	eb04 0903 	add.w	r9, r4, r3
 8013004:	f000 fdfc 	bl	8013c00 <_sbrk_r>
 8013008:	4581      	cmp	r9, r0
 801300a:	d142      	bne.n	8013092 <_malloc_r+0xea>
 801300c:	6821      	ldr	r1, [r4, #0]
 801300e:	1a6d      	subs	r5, r5, r1
 8013010:	4629      	mov	r1, r5
 8013012:	4630      	mov	r0, r6
 8013014:	f7ff ffa6 	bl	8012f64 <sbrk_aligned>
 8013018:	3001      	adds	r0, #1
 801301a:	d03a      	beq.n	8013092 <_malloc_r+0xea>
 801301c:	6823      	ldr	r3, [r4, #0]
 801301e:	442b      	add	r3, r5
 8013020:	6023      	str	r3, [r4, #0]
 8013022:	f8d8 3000 	ldr.w	r3, [r8]
 8013026:	685a      	ldr	r2, [r3, #4]
 8013028:	bb62      	cbnz	r2, 8013084 <_malloc_r+0xdc>
 801302a:	f8c8 7000 	str.w	r7, [r8]
 801302e:	e00f      	b.n	8013050 <_malloc_r+0xa8>
 8013030:	6822      	ldr	r2, [r4, #0]
 8013032:	1b52      	subs	r2, r2, r5
 8013034:	d420      	bmi.n	8013078 <_malloc_r+0xd0>
 8013036:	2a0b      	cmp	r2, #11
 8013038:	d917      	bls.n	801306a <_malloc_r+0xc2>
 801303a:	1961      	adds	r1, r4, r5
 801303c:	42a3      	cmp	r3, r4
 801303e:	6025      	str	r5, [r4, #0]
 8013040:	bf18      	it	ne
 8013042:	6059      	strne	r1, [r3, #4]
 8013044:	6863      	ldr	r3, [r4, #4]
 8013046:	bf08      	it	eq
 8013048:	f8c8 1000 	streq.w	r1, [r8]
 801304c:	5162      	str	r2, [r4, r5]
 801304e:	604b      	str	r3, [r1, #4]
 8013050:	4630      	mov	r0, r6
 8013052:	f000 f82f 	bl	80130b4 <__malloc_unlock>
 8013056:	f104 000b 	add.w	r0, r4, #11
 801305a:	1d23      	adds	r3, r4, #4
 801305c:	f020 0007 	bic.w	r0, r0, #7
 8013060:	1ac2      	subs	r2, r0, r3
 8013062:	bf1c      	itt	ne
 8013064:	1a1b      	subne	r3, r3, r0
 8013066:	50a3      	strne	r3, [r4, r2]
 8013068:	e7af      	b.n	8012fca <_malloc_r+0x22>
 801306a:	6862      	ldr	r2, [r4, #4]
 801306c:	42a3      	cmp	r3, r4
 801306e:	bf0c      	ite	eq
 8013070:	f8c8 2000 	streq.w	r2, [r8]
 8013074:	605a      	strne	r2, [r3, #4]
 8013076:	e7eb      	b.n	8013050 <_malloc_r+0xa8>
 8013078:	4623      	mov	r3, r4
 801307a:	6864      	ldr	r4, [r4, #4]
 801307c:	e7ae      	b.n	8012fdc <_malloc_r+0x34>
 801307e:	463c      	mov	r4, r7
 8013080:	687f      	ldr	r7, [r7, #4]
 8013082:	e7b6      	b.n	8012ff2 <_malloc_r+0x4a>
 8013084:	461a      	mov	r2, r3
 8013086:	685b      	ldr	r3, [r3, #4]
 8013088:	42a3      	cmp	r3, r4
 801308a:	d1fb      	bne.n	8013084 <_malloc_r+0xdc>
 801308c:	2300      	movs	r3, #0
 801308e:	6053      	str	r3, [r2, #4]
 8013090:	e7de      	b.n	8013050 <_malloc_r+0xa8>
 8013092:	230c      	movs	r3, #12
 8013094:	6033      	str	r3, [r6, #0]
 8013096:	4630      	mov	r0, r6
 8013098:	f000 f80c 	bl	80130b4 <__malloc_unlock>
 801309c:	e794      	b.n	8012fc8 <_malloc_r+0x20>
 801309e:	6005      	str	r5, [r0, #0]
 80130a0:	e7d6      	b.n	8013050 <_malloc_r+0xa8>
 80130a2:	bf00      	nop
 80130a4:	20017164 	.word	0x20017164

080130a8 <__malloc_lock>:
 80130a8:	4801      	ldr	r0, [pc, #4]	@ (80130b0 <__malloc_lock+0x8>)
 80130aa:	f7ff b8ac 	b.w	8012206 <__retarget_lock_acquire_recursive>
 80130ae:	bf00      	nop
 80130b0:	2001715c 	.word	0x2001715c

080130b4 <__malloc_unlock>:
 80130b4:	4801      	ldr	r0, [pc, #4]	@ (80130bc <__malloc_unlock+0x8>)
 80130b6:	f7ff b8a7 	b.w	8012208 <__retarget_lock_release_recursive>
 80130ba:	bf00      	nop
 80130bc:	2001715c 	.word	0x2001715c

080130c0 <_Balloc>:
 80130c0:	b570      	push	{r4, r5, r6, lr}
 80130c2:	69c6      	ldr	r6, [r0, #28]
 80130c4:	4604      	mov	r4, r0
 80130c6:	460d      	mov	r5, r1
 80130c8:	b976      	cbnz	r6, 80130e8 <_Balloc+0x28>
 80130ca:	2010      	movs	r0, #16
 80130cc:	f7ff ff42 	bl	8012f54 <malloc>
 80130d0:	4602      	mov	r2, r0
 80130d2:	61e0      	str	r0, [r4, #28]
 80130d4:	b920      	cbnz	r0, 80130e0 <_Balloc+0x20>
 80130d6:	4b18      	ldr	r3, [pc, #96]	@ (8013138 <_Balloc+0x78>)
 80130d8:	4818      	ldr	r0, [pc, #96]	@ (801313c <_Balloc+0x7c>)
 80130da:	216b      	movs	r1, #107	@ 0x6b
 80130dc:	f000 fda0 	bl	8013c20 <__assert_func>
 80130e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80130e4:	6006      	str	r6, [r0, #0]
 80130e6:	60c6      	str	r6, [r0, #12]
 80130e8:	69e6      	ldr	r6, [r4, #28]
 80130ea:	68f3      	ldr	r3, [r6, #12]
 80130ec:	b183      	cbz	r3, 8013110 <_Balloc+0x50>
 80130ee:	69e3      	ldr	r3, [r4, #28]
 80130f0:	68db      	ldr	r3, [r3, #12]
 80130f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80130f6:	b9b8      	cbnz	r0, 8013128 <_Balloc+0x68>
 80130f8:	2101      	movs	r1, #1
 80130fa:	fa01 f605 	lsl.w	r6, r1, r5
 80130fe:	1d72      	adds	r2, r6, #5
 8013100:	0092      	lsls	r2, r2, #2
 8013102:	4620      	mov	r0, r4
 8013104:	f000 fdaa 	bl	8013c5c <_calloc_r>
 8013108:	b160      	cbz	r0, 8013124 <_Balloc+0x64>
 801310a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801310e:	e00e      	b.n	801312e <_Balloc+0x6e>
 8013110:	2221      	movs	r2, #33	@ 0x21
 8013112:	2104      	movs	r1, #4
 8013114:	4620      	mov	r0, r4
 8013116:	f000 fda1 	bl	8013c5c <_calloc_r>
 801311a:	69e3      	ldr	r3, [r4, #28]
 801311c:	60f0      	str	r0, [r6, #12]
 801311e:	68db      	ldr	r3, [r3, #12]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d1e4      	bne.n	80130ee <_Balloc+0x2e>
 8013124:	2000      	movs	r0, #0
 8013126:	bd70      	pop	{r4, r5, r6, pc}
 8013128:	6802      	ldr	r2, [r0, #0]
 801312a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801312e:	2300      	movs	r3, #0
 8013130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013134:	e7f7      	b.n	8013126 <_Balloc+0x66>
 8013136:	bf00      	nop
 8013138:	08014d3f 	.word	0x08014d3f
 801313c:	08014dbf 	.word	0x08014dbf

08013140 <_Bfree>:
 8013140:	b570      	push	{r4, r5, r6, lr}
 8013142:	69c6      	ldr	r6, [r0, #28]
 8013144:	4605      	mov	r5, r0
 8013146:	460c      	mov	r4, r1
 8013148:	b976      	cbnz	r6, 8013168 <_Bfree+0x28>
 801314a:	2010      	movs	r0, #16
 801314c:	f7ff ff02 	bl	8012f54 <malloc>
 8013150:	4602      	mov	r2, r0
 8013152:	61e8      	str	r0, [r5, #28]
 8013154:	b920      	cbnz	r0, 8013160 <_Bfree+0x20>
 8013156:	4b09      	ldr	r3, [pc, #36]	@ (801317c <_Bfree+0x3c>)
 8013158:	4809      	ldr	r0, [pc, #36]	@ (8013180 <_Bfree+0x40>)
 801315a:	218f      	movs	r1, #143	@ 0x8f
 801315c:	f000 fd60 	bl	8013c20 <__assert_func>
 8013160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013164:	6006      	str	r6, [r0, #0]
 8013166:	60c6      	str	r6, [r0, #12]
 8013168:	b13c      	cbz	r4, 801317a <_Bfree+0x3a>
 801316a:	69eb      	ldr	r3, [r5, #28]
 801316c:	6862      	ldr	r2, [r4, #4]
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013174:	6021      	str	r1, [r4, #0]
 8013176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801317a:	bd70      	pop	{r4, r5, r6, pc}
 801317c:	08014d3f 	.word	0x08014d3f
 8013180:	08014dbf 	.word	0x08014dbf

08013184 <__multadd>:
 8013184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013188:	690d      	ldr	r5, [r1, #16]
 801318a:	4607      	mov	r7, r0
 801318c:	460c      	mov	r4, r1
 801318e:	461e      	mov	r6, r3
 8013190:	f101 0c14 	add.w	ip, r1, #20
 8013194:	2000      	movs	r0, #0
 8013196:	f8dc 3000 	ldr.w	r3, [ip]
 801319a:	b299      	uxth	r1, r3
 801319c:	fb02 6101 	mla	r1, r2, r1, r6
 80131a0:	0c1e      	lsrs	r6, r3, #16
 80131a2:	0c0b      	lsrs	r3, r1, #16
 80131a4:	fb02 3306 	mla	r3, r2, r6, r3
 80131a8:	b289      	uxth	r1, r1
 80131aa:	3001      	adds	r0, #1
 80131ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80131b0:	4285      	cmp	r5, r0
 80131b2:	f84c 1b04 	str.w	r1, [ip], #4
 80131b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80131ba:	dcec      	bgt.n	8013196 <__multadd+0x12>
 80131bc:	b30e      	cbz	r6, 8013202 <__multadd+0x7e>
 80131be:	68a3      	ldr	r3, [r4, #8]
 80131c0:	42ab      	cmp	r3, r5
 80131c2:	dc19      	bgt.n	80131f8 <__multadd+0x74>
 80131c4:	6861      	ldr	r1, [r4, #4]
 80131c6:	4638      	mov	r0, r7
 80131c8:	3101      	adds	r1, #1
 80131ca:	f7ff ff79 	bl	80130c0 <_Balloc>
 80131ce:	4680      	mov	r8, r0
 80131d0:	b928      	cbnz	r0, 80131de <__multadd+0x5a>
 80131d2:	4602      	mov	r2, r0
 80131d4:	4b0c      	ldr	r3, [pc, #48]	@ (8013208 <__multadd+0x84>)
 80131d6:	480d      	ldr	r0, [pc, #52]	@ (801320c <__multadd+0x88>)
 80131d8:	21ba      	movs	r1, #186	@ 0xba
 80131da:	f000 fd21 	bl	8013c20 <__assert_func>
 80131de:	6922      	ldr	r2, [r4, #16]
 80131e0:	3202      	adds	r2, #2
 80131e2:	f104 010c 	add.w	r1, r4, #12
 80131e6:	0092      	lsls	r2, r2, #2
 80131e8:	300c      	adds	r0, #12
 80131ea:	f7ff f80e 	bl	801220a <memcpy>
 80131ee:	4621      	mov	r1, r4
 80131f0:	4638      	mov	r0, r7
 80131f2:	f7ff ffa5 	bl	8013140 <_Bfree>
 80131f6:	4644      	mov	r4, r8
 80131f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80131fc:	3501      	adds	r5, #1
 80131fe:	615e      	str	r6, [r3, #20]
 8013200:	6125      	str	r5, [r4, #16]
 8013202:	4620      	mov	r0, r4
 8013204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013208:	08014dae 	.word	0x08014dae
 801320c:	08014dbf 	.word	0x08014dbf

08013210 <__hi0bits>:
 8013210:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013214:	4603      	mov	r3, r0
 8013216:	bf36      	itet	cc
 8013218:	0403      	lslcc	r3, r0, #16
 801321a:	2000      	movcs	r0, #0
 801321c:	2010      	movcc	r0, #16
 801321e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013222:	bf3c      	itt	cc
 8013224:	021b      	lslcc	r3, r3, #8
 8013226:	3008      	addcc	r0, #8
 8013228:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801322c:	bf3c      	itt	cc
 801322e:	011b      	lslcc	r3, r3, #4
 8013230:	3004      	addcc	r0, #4
 8013232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013236:	bf3c      	itt	cc
 8013238:	009b      	lslcc	r3, r3, #2
 801323a:	3002      	addcc	r0, #2
 801323c:	2b00      	cmp	r3, #0
 801323e:	db05      	blt.n	801324c <__hi0bits+0x3c>
 8013240:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013244:	f100 0001 	add.w	r0, r0, #1
 8013248:	bf08      	it	eq
 801324a:	2020      	moveq	r0, #32
 801324c:	4770      	bx	lr

0801324e <__lo0bits>:
 801324e:	6803      	ldr	r3, [r0, #0]
 8013250:	4602      	mov	r2, r0
 8013252:	f013 0007 	ands.w	r0, r3, #7
 8013256:	d00b      	beq.n	8013270 <__lo0bits+0x22>
 8013258:	07d9      	lsls	r1, r3, #31
 801325a:	d421      	bmi.n	80132a0 <__lo0bits+0x52>
 801325c:	0798      	lsls	r0, r3, #30
 801325e:	bf49      	itett	mi
 8013260:	085b      	lsrmi	r3, r3, #1
 8013262:	089b      	lsrpl	r3, r3, #2
 8013264:	2001      	movmi	r0, #1
 8013266:	6013      	strmi	r3, [r2, #0]
 8013268:	bf5c      	itt	pl
 801326a:	6013      	strpl	r3, [r2, #0]
 801326c:	2002      	movpl	r0, #2
 801326e:	4770      	bx	lr
 8013270:	b299      	uxth	r1, r3
 8013272:	b909      	cbnz	r1, 8013278 <__lo0bits+0x2a>
 8013274:	0c1b      	lsrs	r3, r3, #16
 8013276:	2010      	movs	r0, #16
 8013278:	b2d9      	uxtb	r1, r3
 801327a:	b909      	cbnz	r1, 8013280 <__lo0bits+0x32>
 801327c:	3008      	adds	r0, #8
 801327e:	0a1b      	lsrs	r3, r3, #8
 8013280:	0719      	lsls	r1, r3, #28
 8013282:	bf04      	itt	eq
 8013284:	091b      	lsreq	r3, r3, #4
 8013286:	3004      	addeq	r0, #4
 8013288:	0799      	lsls	r1, r3, #30
 801328a:	bf04      	itt	eq
 801328c:	089b      	lsreq	r3, r3, #2
 801328e:	3002      	addeq	r0, #2
 8013290:	07d9      	lsls	r1, r3, #31
 8013292:	d403      	bmi.n	801329c <__lo0bits+0x4e>
 8013294:	085b      	lsrs	r3, r3, #1
 8013296:	f100 0001 	add.w	r0, r0, #1
 801329a:	d003      	beq.n	80132a4 <__lo0bits+0x56>
 801329c:	6013      	str	r3, [r2, #0]
 801329e:	4770      	bx	lr
 80132a0:	2000      	movs	r0, #0
 80132a2:	4770      	bx	lr
 80132a4:	2020      	movs	r0, #32
 80132a6:	4770      	bx	lr

080132a8 <__i2b>:
 80132a8:	b510      	push	{r4, lr}
 80132aa:	460c      	mov	r4, r1
 80132ac:	2101      	movs	r1, #1
 80132ae:	f7ff ff07 	bl	80130c0 <_Balloc>
 80132b2:	4602      	mov	r2, r0
 80132b4:	b928      	cbnz	r0, 80132c2 <__i2b+0x1a>
 80132b6:	4b05      	ldr	r3, [pc, #20]	@ (80132cc <__i2b+0x24>)
 80132b8:	4805      	ldr	r0, [pc, #20]	@ (80132d0 <__i2b+0x28>)
 80132ba:	f240 1145 	movw	r1, #325	@ 0x145
 80132be:	f000 fcaf 	bl	8013c20 <__assert_func>
 80132c2:	2301      	movs	r3, #1
 80132c4:	6144      	str	r4, [r0, #20]
 80132c6:	6103      	str	r3, [r0, #16]
 80132c8:	bd10      	pop	{r4, pc}
 80132ca:	bf00      	nop
 80132cc:	08014dae 	.word	0x08014dae
 80132d0:	08014dbf 	.word	0x08014dbf

080132d4 <__multiply>:
 80132d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d8:	4614      	mov	r4, r2
 80132da:	690a      	ldr	r2, [r1, #16]
 80132dc:	6923      	ldr	r3, [r4, #16]
 80132de:	429a      	cmp	r2, r3
 80132e0:	bfa8      	it	ge
 80132e2:	4623      	movge	r3, r4
 80132e4:	460f      	mov	r7, r1
 80132e6:	bfa4      	itt	ge
 80132e8:	460c      	movge	r4, r1
 80132ea:	461f      	movge	r7, r3
 80132ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80132f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80132f4:	68a3      	ldr	r3, [r4, #8]
 80132f6:	6861      	ldr	r1, [r4, #4]
 80132f8:	eb0a 0609 	add.w	r6, sl, r9
 80132fc:	42b3      	cmp	r3, r6
 80132fe:	b085      	sub	sp, #20
 8013300:	bfb8      	it	lt
 8013302:	3101      	addlt	r1, #1
 8013304:	f7ff fedc 	bl	80130c0 <_Balloc>
 8013308:	b930      	cbnz	r0, 8013318 <__multiply+0x44>
 801330a:	4602      	mov	r2, r0
 801330c:	4b44      	ldr	r3, [pc, #272]	@ (8013420 <__multiply+0x14c>)
 801330e:	4845      	ldr	r0, [pc, #276]	@ (8013424 <__multiply+0x150>)
 8013310:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013314:	f000 fc84 	bl	8013c20 <__assert_func>
 8013318:	f100 0514 	add.w	r5, r0, #20
 801331c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013320:	462b      	mov	r3, r5
 8013322:	2200      	movs	r2, #0
 8013324:	4543      	cmp	r3, r8
 8013326:	d321      	bcc.n	801336c <__multiply+0x98>
 8013328:	f107 0114 	add.w	r1, r7, #20
 801332c:	f104 0214 	add.w	r2, r4, #20
 8013330:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013334:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013338:	9302      	str	r3, [sp, #8]
 801333a:	1b13      	subs	r3, r2, r4
 801333c:	3b15      	subs	r3, #21
 801333e:	f023 0303 	bic.w	r3, r3, #3
 8013342:	3304      	adds	r3, #4
 8013344:	f104 0715 	add.w	r7, r4, #21
 8013348:	42ba      	cmp	r2, r7
 801334a:	bf38      	it	cc
 801334c:	2304      	movcc	r3, #4
 801334e:	9301      	str	r3, [sp, #4]
 8013350:	9b02      	ldr	r3, [sp, #8]
 8013352:	9103      	str	r1, [sp, #12]
 8013354:	428b      	cmp	r3, r1
 8013356:	d80c      	bhi.n	8013372 <__multiply+0x9e>
 8013358:	2e00      	cmp	r6, #0
 801335a:	dd03      	ble.n	8013364 <__multiply+0x90>
 801335c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013360:	2b00      	cmp	r3, #0
 8013362:	d05b      	beq.n	801341c <__multiply+0x148>
 8013364:	6106      	str	r6, [r0, #16]
 8013366:	b005      	add	sp, #20
 8013368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801336c:	f843 2b04 	str.w	r2, [r3], #4
 8013370:	e7d8      	b.n	8013324 <__multiply+0x50>
 8013372:	f8b1 a000 	ldrh.w	sl, [r1]
 8013376:	f1ba 0f00 	cmp.w	sl, #0
 801337a:	d024      	beq.n	80133c6 <__multiply+0xf2>
 801337c:	f104 0e14 	add.w	lr, r4, #20
 8013380:	46a9      	mov	r9, r5
 8013382:	f04f 0c00 	mov.w	ip, #0
 8013386:	f85e 7b04 	ldr.w	r7, [lr], #4
 801338a:	f8d9 3000 	ldr.w	r3, [r9]
 801338e:	fa1f fb87 	uxth.w	fp, r7
 8013392:	b29b      	uxth	r3, r3
 8013394:	fb0a 330b 	mla	r3, sl, fp, r3
 8013398:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801339c:	f8d9 7000 	ldr.w	r7, [r9]
 80133a0:	4463      	add	r3, ip
 80133a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80133a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80133aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80133b4:	4572      	cmp	r2, lr
 80133b6:	f849 3b04 	str.w	r3, [r9], #4
 80133ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80133be:	d8e2      	bhi.n	8013386 <__multiply+0xb2>
 80133c0:	9b01      	ldr	r3, [sp, #4]
 80133c2:	f845 c003 	str.w	ip, [r5, r3]
 80133c6:	9b03      	ldr	r3, [sp, #12]
 80133c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80133cc:	3104      	adds	r1, #4
 80133ce:	f1b9 0f00 	cmp.w	r9, #0
 80133d2:	d021      	beq.n	8013418 <__multiply+0x144>
 80133d4:	682b      	ldr	r3, [r5, #0]
 80133d6:	f104 0c14 	add.w	ip, r4, #20
 80133da:	46ae      	mov	lr, r5
 80133dc:	f04f 0a00 	mov.w	sl, #0
 80133e0:	f8bc b000 	ldrh.w	fp, [ip]
 80133e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80133e8:	fb09 770b 	mla	r7, r9, fp, r7
 80133ec:	4457      	add	r7, sl
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80133f4:	f84e 3b04 	str.w	r3, [lr], #4
 80133f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80133fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013400:	f8be 3000 	ldrh.w	r3, [lr]
 8013404:	fb09 330a 	mla	r3, r9, sl, r3
 8013408:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801340c:	4562      	cmp	r2, ip
 801340e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013412:	d8e5      	bhi.n	80133e0 <__multiply+0x10c>
 8013414:	9f01      	ldr	r7, [sp, #4]
 8013416:	51eb      	str	r3, [r5, r7]
 8013418:	3504      	adds	r5, #4
 801341a:	e799      	b.n	8013350 <__multiply+0x7c>
 801341c:	3e01      	subs	r6, #1
 801341e:	e79b      	b.n	8013358 <__multiply+0x84>
 8013420:	08014dae 	.word	0x08014dae
 8013424:	08014dbf 	.word	0x08014dbf

08013428 <__pow5mult>:
 8013428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801342c:	4615      	mov	r5, r2
 801342e:	f012 0203 	ands.w	r2, r2, #3
 8013432:	4607      	mov	r7, r0
 8013434:	460e      	mov	r6, r1
 8013436:	d007      	beq.n	8013448 <__pow5mult+0x20>
 8013438:	4c25      	ldr	r4, [pc, #148]	@ (80134d0 <__pow5mult+0xa8>)
 801343a:	3a01      	subs	r2, #1
 801343c:	2300      	movs	r3, #0
 801343e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013442:	f7ff fe9f 	bl	8013184 <__multadd>
 8013446:	4606      	mov	r6, r0
 8013448:	10ad      	asrs	r5, r5, #2
 801344a:	d03d      	beq.n	80134c8 <__pow5mult+0xa0>
 801344c:	69fc      	ldr	r4, [r7, #28]
 801344e:	b97c      	cbnz	r4, 8013470 <__pow5mult+0x48>
 8013450:	2010      	movs	r0, #16
 8013452:	f7ff fd7f 	bl	8012f54 <malloc>
 8013456:	4602      	mov	r2, r0
 8013458:	61f8      	str	r0, [r7, #28]
 801345a:	b928      	cbnz	r0, 8013468 <__pow5mult+0x40>
 801345c:	4b1d      	ldr	r3, [pc, #116]	@ (80134d4 <__pow5mult+0xac>)
 801345e:	481e      	ldr	r0, [pc, #120]	@ (80134d8 <__pow5mult+0xb0>)
 8013460:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013464:	f000 fbdc 	bl	8013c20 <__assert_func>
 8013468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801346c:	6004      	str	r4, [r0, #0]
 801346e:	60c4      	str	r4, [r0, #12]
 8013470:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013478:	b94c      	cbnz	r4, 801348e <__pow5mult+0x66>
 801347a:	f240 2171 	movw	r1, #625	@ 0x271
 801347e:	4638      	mov	r0, r7
 8013480:	f7ff ff12 	bl	80132a8 <__i2b>
 8013484:	2300      	movs	r3, #0
 8013486:	f8c8 0008 	str.w	r0, [r8, #8]
 801348a:	4604      	mov	r4, r0
 801348c:	6003      	str	r3, [r0, #0]
 801348e:	f04f 0900 	mov.w	r9, #0
 8013492:	07eb      	lsls	r3, r5, #31
 8013494:	d50a      	bpl.n	80134ac <__pow5mult+0x84>
 8013496:	4631      	mov	r1, r6
 8013498:	4622      	mov	r2, r4
 801349a:	4638      	mov	r0, r7
 801349c:	f7ff ff1a 	bl	80132d4 <__multiply>
 80134a0:	4631      	mov	r1, r6
 80134a2:	4680      	mov	r8, r0
 80134a4:	4638      	mov	r0, r7
 80134a6:	f7ff fe4b 	bl	8013140 <_Bfree>
 80134aa:	4646      	mov	r6, r8
 80134ac:	106d      	asrs	r5, r5, #1
 80134ae:	d00b      	beq.n	80134c8 <__pow5mult+0xa0>
 80134b0:	6820      	ldr	r0, [r4, #0]
 80134b2:	b938      	cbnz	r0, 80134c4 <__pow5mult+0x9c>
 80134b4:	4622      	mov	r2, r4
 80134b6:	4621      	mov	r1, r4
 80134b8:	4638      	mov	r0, r7
 80134ba:	f7ff ff0b 	bl	80132d4 <__multiply>
 80134be:	6020      	str	r0, [r4, #0]
 80134c0:	f8c0 9000 	str.w	r9, [r0]
 80134c4:	4604      	mov	r4, r0
 80134c6:	e7e4      	b.n	8013492 <__pow5mult+0x6a>
 80134c8:	4630      	mov	r0, r6
 80134ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ce:	bf00      	nop
 80134d0:	08014e18 	.word	0x08014e18
 80134d4:	08014d3f 	.word	0x08014d3f
 80134d8:	08014dbf 	.word	0x08014dbf

080134dc <__lshift>:
 80134dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134e0:	460c      	mov	r4, r1
 80134e2:	6849      	ldr	r1, [r1, #4]
 80134e4:	6923      	ldr	r3, [r4, #16]
 80134e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80134ea:	68a3      	ldr	r3, [r4, #8]
 80134ec:	4607      	mov	r7, r0
 80134ee:	4691      	mov	r9, r2
 80134f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80134f4:	f108 0601 	add.w	r6, r8, #1
 80134f8:	42b3      	cmp	r3, r6
 80134fa:	db0b      	blt.n	8013514 <__lshift+0x38>
 80134fc:	4638      	mov	r0, r7
 80134fe:	f7ff fddf 	bl	80130c0 <_Balloc>
 8013502:	4605      	mov	r5, r0
 8013504:	b948      	cbnz	r0, 801351a <__lshift+0x3e>
 8013506:	4602      	mov	r2, r0
 8013508:	4b28      	ldr	r3, [pc, #160]	@ (80135ac <__lshift+0xd0>)
 801350a:	4829      	ldr	r0, [pc, #164]	@ (80135b0 <__lshift+0xd4>)
 801350c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013510:	f000 fb86 	bl	8013c20 <__assert_func>
 8013514:	3101      	adds	r1, #1
 8013516:	005b      	lsls	r3, r3, #1
 8013518:	e7ee      	b.n	80134f8 <__lshift+0x1c>
 801351a:	2300      	movs	r3, #0
 801351c:	f100 0114 	add.w	r1, r0, #20
 8013520:	f100 0210 	add.w	r2, r0, #16
 8013524:	4618      	mov	r0, r3
 8013526:	4553      	cmp	r3, sl
 8013528:	db33      	blt.n	8013592 <__lshift+0xb6>
 801352a:	6920      	ldr	r0, [r4, #16]
 801352c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013530:	f104 0314 	add.w	r3, r4, #20
 8013534:	f019 091f 	ands.w	r9, r9, #31
 8013538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801353c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013540:	d02b      	beq.n	801359a <__lshift+0xbe>
 8013542:	f1c9 0e20 	rsb	lr, r9, #32
 8013546:	468a      	mov	sl, r1
 8013548:	2200      	movs	r2, #0
 801354a:	6818      	ldr	r0, [r3, #0]
 801354c:	fa00 f009 	lsl.w	r0, r0, r9
 8013550:	4310      	orrs	r0, r2
 8013552:	f84a 0b04 	str.w	r0, [sl], #4
 8013556:	f853 2b04 	ldr.w	r2, [r3], #4
 801355a:	459c      	cmp	ip, r3
 801355c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013560:	d8f3      	bhi.n	801354a <__lshift+0x6e>
 8013562:	ebac 0304 	sub.w	r3, ip, r4
 8013566:	3b15      	subs	r3, #21
 8013568:	f023 0303 	bic.w	r3, r3, #3
 801356c:	3304      	adds	r3, #4
 801356e:	f104 0015 	add.w	r0, r4, #21
 8013572:	4584      	cmp	ip, r0
 8013574:	bf38      	it	cc
 8013576:	2304      	movcc	r3, #4
 8013578:	50ca      	str	r2, [r1, r3]
 801357a:	b10a      	cbz	r2, 8013580 <__lshift+0xa4>
 801357c:	f108 0602 	add.w	r6, r8, #2
 8013580:	3e01      	subs	r6, #1
 8013582:	4638      	mov	r0, r7
 8013584:	612e      	str	r6, [r5, #16]
 8013586:	4621      	mov	r1, r4
 8013588:	f7ff fdda 	bl	8013140 <_Bfree>
 801358c:	4628      	mov	r0, r5
 801358e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013592:	f842 0f04 	str.w	r0, [r2, #4]!
 8013596:	3301      	adds	r3, #1
 8013598:	e7c5      	b.n	8013526 <__lshift+0x4a>
 801359a:	3904      	subs	r1, #4
 801359c:	f853 2b04 	ldr.w	r2, [r3], #4
 80135a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80135a4:	459c      	cmp	ip, r3
 80135a6:	d8f9      	bhi.n	801359c <__lshift+0xc0>
 80135a8:	e7ea      	b.n	8013580 <__lshift+0xa4>
 80135aa:	bf00      	nop
 80135ac:	08014dae 	.word	0x08014dae
 80135b0:	08014dbf 	.word	0x08014dbf

080135b4 <__mcmp>:
 80135b4:	690a      	ldr	r2, [r1, #16]
 80135b6:	4603      	mov	r3, r0
 80135b8:	6900      	ldr	r0, [r0, #16]
 80135ba:	1a80      	subs	r0, r0, r2
 80135bc:	b530      	push	{r4, r5, lr}
 80135be:	d10e      	bne.n	80135de <__mcmp+0x2a>
 80135c0:	3314      	adds	r3, #20
 80135c2:	3114      	adds	r1, #20
 80135c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80135c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80135cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80135d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80135d4:	4295      	cmp	r5, r2
 80135d6:	d003      	beq.n	80135e0 <__mcmp+0x2c>
 80135d8:	d205      	bcs.n	80135e6 <__mcmp+0x32>
 80135da:	f04f 30ff 	mov.w	r0, #4294967295
 80135de:	bd30      	pop	{r4, r5, pc}
 80135e0:	42a3      	cmp	r3, r4
 80135e2:	d3f3      	bcc.n	80135cc <__mcmp+0x18>
 80135e4:	e7fb      	b.n	80135de <__mcmp+0x2a>
 80135e6:	2001      	movs	r0, #1
 80135e8:	e7f9      	b.n	80135de <__mcmp+0x2a>
	...

080135ec <__mdiff>:
 80135ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f0:	4689      	mov	r9, r1
 80135f2:	4606      	mov	r6, r0
 80135f4:	4611      	mov	r1, r2
 80135f6:	4648      	mov	r0, r9
 80135f8:	4614      	mov	r4, r2
 80135fa:	f7ff ffdb 	bl	80135b4 <__mcmp>
 80135fe:	1e05      	subs	r5, r0, #0
 8013600:	d112      	bne.n	8013628 <__mdiff+0x3c>
 8013602:	4629      	mov	r1, r5
 8013604:	4630      	mov	r0, r6
 8013606:	f7ff fd5b 	bl	80130c0 <_Balloc>
 801360a:	4602      	mov	r2, r0
 801360c:	b928      	cbnz	r0, 801361a <__mdiff+0x2e>
 801360e:	4b3f      	ldr	r3, [pc, #252]	@ (801370c <__mdiff+0x120>)
 8013610:	f240 2137 	movw	r1, #567	@ 0x237
 8013614:	483e      	ldr	r0, [pc, #248]	@ (8013710 <__mdiff+0x124>)
 8013616:	f000 fb03 	bl	8013c20 <__assert_func>
 801361a:	2301      	movs	r3, #1
 801361c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013620:	4610      	mov	r0, r2
 8013622:	b003      	add	sp, #12
 8013624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013628:	bfbc      	itt	lt
 801362a:	464b      	movlt	r3, r9
 801362c:	46a1      	movlt	r9, r4
 801362e:	4630      	mov	r0, r6
 8013630:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013634:	bfba      	itte	lt
 8013636:	461c      	movlt	r4, r3
 8013638:	2501      	movlt	r5, #1
 801363a:	2500      	movge	r5, #0
 801363c:	f7ff fd40 	bl	80130c0 <_Balloc>
 8013640:	4602      	mov	r2, r0
 8013642:	b918      	cbnz	r0, 801364c <__mdiff+0x60>
 8013644:	4b31      	ldr	r3, [pc, #196]	@ (801370c <__mdiff+0x120>)
 8013646:	f240 2145 	movw	r1, #581	@ 0x245
 801364a:	e7e3      	b.n	8013614 <__mdiff+0x28>
 801364c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013650:	6926      	ldr	r6, [r4, #16]
 8013652:	60c5      	str	r5, [r0, #12]
 8013654:	f109 0310 	add.w	r3, r9, #16
 8013658:	f109 0514 	add.w	r5, r9, #20
 801365c:	f104 0e14 	add.w	lr, r4, #20
 8013660:	f100 0b14 	add.w	fp, r0, #20
 8013664:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013668:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801366c:	9301      	str	r3, [sp, #4]
 801366e:	46d9      	mov	r9, fp
 8013670:	f04f 0c00 	mov.w	ip, #0
 8013674:	9b01      	ldr	r3, [sp, #4]
 8013676:	f85e 0b04 	ldr.w	r0, [lr], #4
 801367a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801367e:	9301      	str	r3, [sp, #4]
 8013680:	fa1f f38a 	uxth.w	r3, sl
 8013684:	4619      	mov	r1, r3
 8013686:	b283      	uxth	r3, r0
 8013688:	1acb      	subs	r3, r1, r3
 801368a:	0c00      	lsrs	r0, r0, #16
 801368c:	4463      	add	r3, ip
 801368e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013692:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013696:	b29b      	uxth	r3, r3
 8013698:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801369c:	4576      	cmp	r6, lr
 801369e:	f849 3b04 	str.w	r3, [r9], #4
 80136a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80136a6:	d8e5      	bhi.n	8013674 <__mdiff+0x88>
 80136a8:	1b33      	subs	r3, r6, r4
 80136aa:	3b15      	subs	r3, #21
 80136ac:	f023 0303 	bic.w	r3, r3, #3
 80136b0:	3415      	adds	r4, #21
 80136b2:	3304      	adds	r3, #4
 80136b4:	42a6      	cmp	r6, r4
 80136b6:	bf38      	it	cc
 80136b8:	2304      	movcc	r3, #4
 80136ba:	441d      	add	r5, r3
 80136bc:	445b      	add	r3, fp
 80136be:	461e      	mov	r6, r3
 80136c0:	462c      	mov	r4, r5
 80136c2:	4544      	cmp	r4, r8
 80136c4:	d30e      	bcc.n	80136e4 <__mdiff+0xf8>
 80136c6:	f108 0103 	add.w	r1, r8, #3
 80136ca:	1b49      	subs	r1, r1, r5
 80136cc:	f021 0103 	bic.w	r1, r1, #3
 80136d0:	3d03      	subs	r5, #3
 80136d2:	45a8      	cmp	r8, r5
 80136d4:	bf38      	it	cc
 80136d6:	2100      	movcc	r1, #0
 80136d8:	440b      	add	r3, r1
 80136da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80136de:	b191      	cbz	r1, 8013706 <__mdiff+0x11a>
 80136e0:	6117      	str	r7, [r2, #16]
 80136e2:	e79d      	b.n	8013620 <__mdiff+0x34>
 80136e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80136e8:	46e6      	mov	lr, ip
 80136ea:	0c08      	lsrs	r0, r1, #16
 80136ec:	fa1c fc81 	uxtah	ip, ip, r1
 80136f0:	4471      	add	r1, lr
 80136f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80136f6:	b289      	uxth	r1, r1
 80136f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80136fc:	f846 1b04 	str.w	r1, [r6], #4
 8013700:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013704:	e7dd      	b.n	80136c2 <__mdiff+0xd6>
 8013706:	3f01      	subs	r7, #1
 8013708:	e7e7      	b.n	80136da <__mdiff+0xee>
 801370a:	bf00      	nop
 801370c:	08014dae 	.word	0x08014dae
 8013710:	08014dbf 	.word	0x08014dbf

08013714 <__d2b>:
 8013714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013718:	460f      	mov	r7, r1
 801371a:	2101      	movs	r1, #1
 801371c:	ec59 8b10 	vmov	r8, r9, d0
 8013720:	4616      	mov	r6, r2
 8013722:	f7ff fccd 	bl	80130c0 <_Balloc>
 8013726:	4604      	mov	r4, r0
 8013728:	b930      	cbnz	r0, 8013738 <__d2b+0x24>
 801372a:	4602      	mov	r2, r0
 801372c:	4b23      	ldr	r3, [pc, #140]	@ (80137bc <__d2b+0xa8>)
 801372e:	4824      	ldr	r0, [pc, #144]	@ (80137c0 <__d2b+0xac>)
 8013730:	f240 310f 	movw	r1, #783	@ 0x30f
 8013734:	f000 fa74 	bl	8013c20 <__assert_func>
 8013738:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801373c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013740:	b10d      	cbz	r5, 8013746 <__d2b+0x32>
 8013742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013746:	9301      	str	r3, [sp, #4]
 8013748:	f1b8 0300 	subs.w	r3, r8, #0
 801374c:	d023      	beq.n	8013796 <__d2b+0x82>
 801374e:	4668      	mov	r0, sp
 8013750:	9300      	str	r3, [sp, #0]
 8013752:	f7ff fd7c 	bl	801324e <__lo0bits>
 8013756:	e9dd 1200 	ldrd	r1, r2, [sp]
 801375a:	b1d0      	cbz	r0, 8013792 <__d2b+0x7e>
 801375c:	f1c0 0320 	rsb	r3, r0, #32
 8013760:	fa02 f303 	lsl.w	r3, r2, r3
 8013764:	430b      	orrs	r3, r1
 8013766:	40c2      	lsrs	r2, r0
 8013768:	6163      	str	r3, [r4, #20]
 801376a:	9201      	str	r2, [sp, #4]
 801376c:	9b01      	ldr	r3, [sp, #4]
 801376e:	61a3      	str	r3, [r4, #24]
 8013770:	2b00      	cmp	r3, #0
 8013772:	bf0c      	ite	eq
 8013774:	2201      	moveq	r2, #1
 8013776:	2202      	movne	r2, #2
 8013778:	6122      	str	r2, [r4, #16]
 801377a:	b1a5      	cbz	r5, 80137a6 <__d2b+0x92>
 801377c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013780:	4405      	add	r5, r0
 8013782:	603d      	str	r5, [r7, #0]
 8013784:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013788:	6030      	str	r0, [r6, #0]
 801378a:	4620      	mov	r0, r4
 801378c:	b003      	add	sp, #12
 801378e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013792:	6161      	str	r1, [r4, #20]
 8013794:	e7ea      	b.n	801376c <__d2b+0x58>
 8013796:	a801      	add	r0, sp, #4
 8013798:	f7ff fd59 	bl	801324e <__lo0bits>
 801379c:	9b01      	ldr	r3, [sp, #4]
 801379e:	6163      	str	r3, [r4, #20]
 80137a0:	3020      	adds	r0, #32
 80137a2:	2201      	movs	r2, #1
 80137a4:	e7e8      	b.n	8013778 <__d2b+0x64>
 80137a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80137aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80137ae:	6038      	str	r0, [r7, #0]
 80137b0:	6918      	ldr	r0, [r3, #16]
 80137b2:	f7ff fd2d 	bl	8013210 <__hi0bits>
 80137b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80137ba:	e7e5      	b.n	8013788 <__d2b+0x74>
 80137bc:	08014dae 	.word	0x08014dae
 80137c0:	08014dbf 	.word	0x08014dbf

080137c4 <__ssputs_r>:
 80137c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137c8:	688e      	ldr	r6, [r1, #8]
 80137ca:	461f      	mov	r7, r3
 80137cc:	42be      	cmp	r6, r7
 80137ce:	680b      	ldr	r3, [r1, #0]
 80137d0:	4682      	mov	sl, r0
 80137d2:	460c      	mov	r4, r1
 80137d4:	4690      	mov	r8, r2
 80137d6:	d82d      	bhi.n	8013834 <__ssputs_r+0x70>
 80137d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80137dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80137e0:	d026      	beq.n	8013830 <__ssputs_r+0x6c>
 80137e2:	6965      	ldr	r5, [r4, #20]
 80137e4:	6909      	ldr	r1, [r1, #16]
 80137e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80137ea:	eba3 0901 	sub.w	r9, r3, r1
 80137ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80137f2:	1c7b      	adds	r3, r7, #1
 80137f4:	444b      	add	r3, r9
 80137f6:	106d      	asrs	r5, r5, #1
 80137f8:	429d      	cmp	r5, r3
 80137fa:	bf38      	it	cc
 80137fc:	461d      	movcc	r5, r3
 80137fe:	0553      	lsls	r3, r2, #21
 8013800:	d527      	bpl.n	8013852 <__ssputs_r+0x8e>
 8013802:	4629      	mov	r1, r5
 8013804:	f7ff fbd0 	bl	8012fa8 <_malloc_r>
 8013808:	4606      	mov	r6, r0
 801380a:	b360      	cbz	r0, 8013866 <__ssputs_r+0xa2>
 801380c:	6921      	ldr	r1, [r4, #16]
 801380e:	464a      	mov	r2, r9
 8013810:	f7fe fcfb 	bl	801220a <memcpy>
 8013814:	89a3      	ldrh	r3, [r4, #12]
 8013816:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801381a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801381e:	81a3      	strh	r3, [r4, #12]
 8013820:	6126      	str	r6, [r4, #16]
 8013822:	6165      	str	r5, [r4, #20]
 8013824:	444e      	add	r6, r9
 8013826:	eba5 0509 	sub.w	r5, r5, r9
 801382a:	6026      	str	r6, [r4, #0]
 801382c:	60a5      	str	r5, [r4, #8]
 801382e:	463e      	mov	r6, r7
 8013830:	42be      	cmp	r6, r7
 8013832:	d900      	bls.n	8013836 <__ssputs_r+0x72>
 8013834:	463e      	mov	r6, r7
 8013836:	6820      	ldr	r0, [r4, #0]
 8013838:	4632      	mov	r2, r6
 801383a:	4641      	mov	r1, r8
 801383c:	f000 f9c6 	bl	8013bcc <memmove>
 8013840:	68a3      	ldr	r3, [r4, #8]
 8013842:	1b9b      	subs	r3, r3, r6
 8013844:	60a3      	str	r3, [r4, #8]
 8013846:	6823      	ldr	r3, [r4, #0]
 8013848:	4433      	add	r3, r6
 801384a:	6023      	str	r3, [r4, #0]
 801384c:	2000      	movs	r0, #0
 801384e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013852:	462a      	mov	r2, r5
 8013854:	f000 fa28 	bl	8013ca8 <_realloc_r>
 8013858:	4606      	mov	r6, r0
 801385a:	2800      	cmp	r0, #0
 801385c:	d1e0      	bne.n	8013820 <__ssputs_r+0x5c>
 801385e:	6921      	ldr	r1, [r4, #16]
 8013860:	4650      	mov	r0, sl
 8013862:	f7ff fb2d 	bl	8012ec0 <_free_r>
 8013866:	230c      	movs	r3, #12
 8013868:	f8ca 3000 	str.w	r3, [sl]
 801386c:	89a3      	ldrh	r3, [r4, #12]
 801386e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013872:	81a3      	strh	r3, [r4, #12]
 8013874:	f04f 30ff 	mov.w	r0, #4294967295
 8013878:	e7e9      	b.n	801384e <__ssputs_r+0x8a>
	...

0801387c <_svfiprintf_r>:
 801387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013880:	4698      	mov	r8, r3
 8013882:	898b      	ldrh	r3, [r1, #12]
 8013884:	061b      	lsls	r3, r3, #24
 8013886:	b09d      	sub	sp, #116	@ 0x74
 8013888:	4607      	mov	r7, r0
 801388a:	460d      	mov	r5, r1
 801388c:	4614      	mov	r4, r2
 801388e:	d510      	bpl.n	80138b2 <_svfiprintf_r+0x36>
 8013890:	690b      	ldr	r3, [r1, #16]
 8013892:	b973      	cbnz	r3, 80138b2 <_svfiprintf_r+0x36>
 8013894:	2140      	movs	r1, #64	@ 0x40
 8013896:	f7ff fb87 	bl	8012fa8 <_malloc_r>
 801389a:	6028      	str	r0, [r5, #0]
 801389c:	6128      	str	r0, [r5, #16]
 801389e:	b930      	cbnz	r0, 80138ae <_svfiprintf_r+0x32>
 80138a0:	230c      	movs	r3, #12
 80138a2:	603b      	str	r3, [r7, #0]
 80138a4:	f04f 30ff 	mov.w	r0, #4294967295
 80138a8:	b01d      	add	sp, #116	@ 0x74
 80138aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ae:	2340      	movs	r3, #64	@ 0x40
 80138b0:	616b      	str	r3, [r5, #20]
 80138b2:	2300      	movs	r3, #0
 80138b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80138b6:	2320      	movs	r3, #32
 80138b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80138bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80138c0:	2330      	movs	r3, #48	@ 0x30
 80138c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013a60 <_svfiprintf_r+0x1e4>
 80138c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80138ca:	f04f 0901 	mov.w	r9, #1
 80138ce:	4623      	mov	r3, r4
 80138d0:	469a      	mov	sl, r3
 80138d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138d6:	b10a      	cbz	r2, 80138dc <_svfiprintf_r+0x60>
 80138d8:	2a25      	cmp	r2, #37	@ 0x25
 80138da:	d1f9      	bne.n	80138d0 <_svfiprintf_r+0x54>
 80138dc:	ebba 0b04 	subs.w	fp, sl, r4
 80138e0:	d00b      	beq.n	80138fa <_svfiprintf_r+0x7e>
 80138e2:	465b      	mov	r3, fp
 80138e4:	4622      	mov	r2, r4
 80138e6:	4629      	mov	r1, r5
 80138e8:	4638      	mov	r0, r7
 80138ea:	f7ff ff6b 	bl	80137c4 <__ssputs_r>
 80138ee:	3001      	adds	r0, #1
 80138f0:	f000 80a7 	beq.w	8013a42 <_svfiprintf_r+0x1c6>
 80138f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80138f6:	445a      	add	r2, fp
 80138f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80138fa:	f89a 3000 	ldrb.w	r3, [sl]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	f000 809f 	beq.w	8013a42 <_svfiprintf_r+0x1c6>
 8013904:	2300      	movs	r3, #0
 8013906:	f04f 32ff 	mov.w	r2, #4294967295
 801390a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801390e:	f10a 0a01 	add.w	sl, sl, #1
 8013912:	9304      	str	r3, [sp, #16]
 8013914:	9307      	str	r3, [sp, #28]
 8013916:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801391a:	931a      	str	r3, [sp, #104]	@ 0x68
 801391c:	4654      	mov	r4, sl
 801391e:	2205      	movs	r2, #5
 8013920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013924:	484e      	ldr	r0, [pc, #312]	@ (8013a60 <_svfiprintf_r+0x1e4>)
 8013926:	f7ec fcb3 	bl	8000290 <memchr>
 801392a:	9a04      	ldr	r2, [sp, #16]
 801392c:	b9d8      	cbnz	r0, 8013966 <_svfiprintf_r+0xea>
 801392e:	06d0      	lsls	r0, r2, #27
 8013930:	bf44      	itt	mi
 8013932:	2320      	movmi	r3, #32
 8013934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013938:	0711      	lsls	r1, r2, #28
 801393a:	bf44      	itt	mi
 801393c:	232b      	movmi	r3, #43	@ 0x2b
 801393e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013942:	f89a 3000 	ldrb.w	r3, [sl]
 8013946:	2b2a      	cmp	r3, #42	@ 0x2a
 8013948:	d015      	beq.n	8013976 <_svfiprintf_r+0xfa>
 801394a:	9a07      	ldr	r2, [sp, #28]
 801394c:	4654      	mov	r4, sl
 801394e:	2000      	movs	r0, #0
 8013950:	f04f 0c0a 	mov.w	ip, #10
 8013954:	4621      	mov	r1, r4
 8013956:	f811 3b01 	ldrb.w	r3, [r1], #1
 801395a:	3b30      	subs	r3, #48	@ 0x30
 801395c:	2b09      	cmp	r3, #9
 801395e:	d94b      	bls.n	80139f8 <_svfiprintf_r+0x17c>
 8013960:	b1b0      	cbz	r0, 8013990 <_svfiprintf_r+0x114>
 8013962:	9207      	str	r2, [sp, #28]
 8013964:	e014      	b.n	8013990 <_svfiprintf_r+0x114>
 8013966:	eba0 0308 	sub.w	r3, r0, r8
 801396a:	fa09 f303 	lsl.w	r3, r9, r3
 801396e:	4313      	orrs	r3, r2
 8013970:	9304      	str	r3, [sp, #16]
 8013972:	46a2      	mov	sl, r4
 8013974:	e7d2      	b.n	801391c <_svfiprintf_r+0xa0>
 8013976:	9b03      	ldr	r3, [sp, #12]
 8013978:	1d19      	adds	r1, r3, #4
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	9103      	str	r1, [sp, #12]
 801397e:	2b00      	cmp	r3, #0
 8013980:	bfbb      	ittet	lt
 8013982:	425b      	neglt	r3, r3
 8013984:	f042 0202 	orrlt.w	r2, r2, #2
 8013988:	9307      	strge	r3, [sp, #28]
 801398a:	9307      	strlt	r3, [sp, #28]
 801398c:	bfb8      	it	lt
 801398e:	9204      	strlt	r2, [sp, #16]
 8013990:	7823      	ldrb	r3, [r4, #0]
 8013992:	2b2e      	cmp	r3, #46	@ 0x2e
 8013994:	d10a      	bne.n	80139ac <_svfiprintf_r+0x130>
 8013996:	7863      	ldrb	r3, [r4, #1]
 8013998:	2b2a      	cmp	r3, #42	@ 0x2a
 801399a:	d132      	bne.n	8013a02 <_svfiprintf_r+0x186>
 801399c:	9b03      	ldr	r3, [sp, #12]
 801399e:	1d1a      	adds	r2, r3, #4
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	9203      	str	r2, [sp, #12]
 80139a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80139a8:	3402      	adds	r4, #2
 80139aa:	9305      	str	r3, [sp, #20]
 80139ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013a70 <_svfiprintf_r+0x1f4>
 80139b0:	7821      	ldrb	r1, [r4, #0]
 80139b2:	2203      	movs	r2, #3
 80139b4:	4650      	mov	r0, sl
 80139b6:	f7ec fc6b 	bl	8000290 <memchr>
 80139ba:	b138      	cbz	r0, 80139cc <_svfiprintf_r+0x150>
 80139bc:	9b04      	ldr	r3, [sp, #16]
 80139be:	eba0 000a 	sub.w	r0, r0, sl
 80139c2:	2240      	movs	r2, #64	@ 0x40
 80139c4:	4082      	lsls	r2, r0
 80139c6:	4313      	orrs	r3, r2
 80139c8:	3401      	adds	r4, #1
 80139ca:	9304      	str	r3, [sp, #16]
 80139cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139d0:	4824      	ldr	r0, [pc, #144]	@ (8013a64 <_svfiprintf_r+0x1e8>)
 80139d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80139d6:	2206      	movs	r2, #6
 80139d8:	f7ec fc5a 	bl	8000290 <memchr>
 80139dc:	2800      	cmp	r0, #0
 80139de:	d036      	beq.n	8013a4e <_svfiprintf_r+0x1d2>
 80139e0:	4b21      	ldr	r3, [pc, #132]	@ (8013a68 <_svfiprintf_r+0x1ec>)
 80139e2:	bb1b      	cbnz	r3, 8013a2c <_svfiprintf_r+0x1b0>
 80139e4:	9b03      	ldr	r3, [sp, #12]
 80139e6:	3307      	adds	r3, #7
 80139e8:	f023 0307 	bic.w	r3, r3, #7
 80139ec:	3308      	adds	r3, #8
 80139ee:	9303      	str	r3, [sp, #12]
 80139f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139f2:	4433      	add	r3, r6
 80139f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80139f6:	e76a      	b.n	80138ce <_svfiprintf_r+0x52>
 80139f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80139fc:	460c      	mov	r4, r1
 80139fe:	2001      	movs	r0, #1
 8013a00:	e7a8      	b.n	8013954 <_svfiprintf_r+0xd8>
 8013a02:	2300      	movs	r3, #0
 8013a04:	3401      	adds	r4, #1
 8013a06:	9305      	str	r3, [sp, #20]
 8013a08:	4619      	mov	r1, r3
 8013a0a:	f04f 0c0a 	mov.w	ip, #10
 8013a0e:	4620      	mov	r0, r4
 8013a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a14:	3a30      	subs	r2, #48	@ 0x30
 8013a16:	2a09      	cmp	r2, #9
 8013a18:	d903      	bls.n	8013a22 <_svfiprintf_r+0x1a6>
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d0c6      	beq.n	80139ac <_svfiprintf_r+0x130>
 8013a1e:	9105      	str	r1, [sp, #20]
 8013a20:	e7c4      	b.n	80139ac <_svfiprintf_r+0x130>
 8013a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a26:	4604      	mov	r4, r0
 8013a28:	2301      	movs	r3, #1
 8013a2a:	e7f0      	b.n	8013a0e <_svfiprintf_r+0x192>
 8013a2c:	ab03      	add	r3, sp, #12
 8013a2e:	9300      	str	r3, [sp, #0]
 8013a30:	462a      	mov	r2, r5
 8013a32:	4b0e      	ldr	r3, [pc, #56]	@ (8013a6c <_svfiprintf_r+0x1f0>)
 8013a34:	a904      	add	r1, sp, #16
 8013a36:	4638      	mov	r0, r7
 8013a38:	f7fd fe6c 	bl	8011714 <_printf_float>
 8013a3c:	1c42      	adds	r2, r0, #1
 8013a3e:	4606      	mov	r6, r0
 8013a40:	d1d6      	bne.n	80139f0 <_svfiprintf_r+0x174>
 8013a42:	89ab      	ldrh	r3, [r5, #12]
 8013a44:	065b      	lsls	r3, r3, #25
 8013a46:	f53f af2d 	bmi.w	80138a4 <_svfiprintf_r+0x28>
 8013a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a4c:	e72c      	b.n	80138a8 <_svfiprintf_r+0x2c>
 8013a4e:	ab03      	add	r3, sp, #12
 8013a50:	9300      	str	r3, [sp, #0]
 8013a52:	462a      	mov	r2, r5
 8013a54:	4b05      	ldr	r3, [pc, #20]	@ (8013a6c <_svfiprintf_r+0x1f0>)
 8013a56:	a904      	add	r1, sp, #16
 8013a58:	4638      	mov	r0, r7
 8013a5a:	f7fe f8f3 	bl	8011c44 <_printf_i>
 8013a5e:	e7ed      	b.n	8013a3c <_svfiprintf_r+0x1c0>
 8013a60:	08014f18 	.word	0x08014f18
 8013a64:	08014f22 	.word	0x08014f22
 8013a68:	08011715 	.word	0x08011715
 8013a6c:	080137c5 	.word	0x080137c5
 8013a70:	08014f1e 	.word	0x08014f1e

08013a74 <__sflush_r>:
 8013a74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a7c:	0716      	lsls	r6, r2, #28
 8013a7e:	4605      	mov	r5, r0
 8013a80:	460c      	mov	r4, r1
 8013a82:	d454      	bmi.n	8013b2e <__sflush_r+0xba>
 8013a84:	684b      	ldr	r3, [r1, #4]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	dc02      	bgt.n	8013a90 <__sflush_r+0x1c>
 8013a8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	dd48      	ble.n	8013b22 <__sflush_r+0xae>
 8013a90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013a92:	2e00      	cmp	r6, #0
 8013a94:	d045      	beq.n	8013b22 <__sflush_r+0xae>
 8013a96:	2300      	movs	r3, #0
 8013a98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013a9c:	682f      	ldr	r7, [r5, #0]
 8013a9e:	6a21      	ldr	r1, [r4, #32]
 8013aa0:	602b      	str	r3, [r5, #0]
 8013aa2:	d030      	beq.n	8013b06 <__sflush_r+0x92>
 8013aa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013aa6:	89a3      	ldrh	r3, [r4, #12]
 8013aa8:	0759      	lsls	r1, r3, #29
 8013aaa:	d505      	bpl.n	8013ab8 <__sflush_r+0x44>
 8013aac:	6863      	ldr	r3, [r4, #4]
 8013aae:	1ad2      	subs	r2, r2, r3
 8013ab0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013ab2:	b10b      	cbz	r3, 8013ab8 <__sflush_r+0x44>
 8013ab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013ab6:	1ad2      	subs	r2, r2, r3
 8013ab8:	2300      	movs	r3, #0
 8013aba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013abc:	6a21      	ldr	r1, [r4, #32]
 8013abe:	4628      	mov	r0, r5
 8013ac0:	47b0      	blx	r6
 8013ac2:	1c43      	adds	r3, r0, #1
 8013ac4:	89a3      	ldrh	r3, [r4, #12]
 8013ac6:	d106      	bne.n	8013ad6 <__sflush_r+0x62>
 8013ac8:	6829      	ldr	r1, [r5, #0]
 8013aca:	291d      	cmp	r1, #29
 8013acc:	d82b      	bhi.n	8013b26 <__sflush_r+0xb2>
 8013ace:	4a2a      	ldr	r2, [pc, #168]	@ (8013b78 <__sflush_r+0x104>)
 8013ad0:	410a      	asrs	r2, r1
 8013ad2:	07d6      	lsls	r6, r2, #31
 8013ad4:	d427      	bmi.n	8013b26 <__sflush_r+0xb2>
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	6062      	str	r2, [r4, #4]
 8013ada:	04d9      	lsls	r1, r3, #19
 8013adc:	6922      	ldr	r2, [r4, #16]
 8013ade:	6022      	str	r2, [r4, #0]
 8013ae0:	d504      	bpl.n	8013aec <__sflush_r+0x78>
 8013ae2:	1c42      	adds	r2, r0, #1
 8013ae4:	d101      	bne.n	8013aea <__sflush_r+0x76>
 8013ae6:	682b      	ldr	r3, [r5, #0]
 8013ae8:	b903      	cbnz	r3, 8013aec <__sflush_r+0x78>
 8013aea:	6560      	str	r0, [r4, #84]	@ 0x54
 8013aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013aee:	602f      	str	r7, [r5, #0]
 8013af0:	b1b9      	cbz	r1, 8013b22 <__sflush_r+0xae>
 8013af2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013af6:	4299      	cmp	r1, r3
 8013af8:	d002      	beq.n	8013b00 <__sflush_r+0x8c>
 8013afa:	4628      	mov	r0, r5
 8013afc:	f7ff f9e0 	bl	8012ec0 <_free_r>
 8013b00:	2300      	movs	r3, #0
 8013b02:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b04:	e00d      	b.n	8013b22 <__sflush_r+0xae>
 8013b06:	2301      	movs	r3, #1
 8013b08:	4628      	mov	r0, r5
 8013b0a:	47b0      	blx	r6
 8013b0c:	4602      	mov	r2, r0
 8013b0e:	1c50      	adds	r0, r2, #1
 8013b10:	d1c9      	bne.n	8013aa6 <__sflush_r+0x32>
 8013b12:	682b      	ldr	r3, [r5, #0]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d0c6      	beq.n	8013aa6 <__sflush_r+0x32>
 8013b18:	2b1d      	cmp	r3, #29
 8013b1a:	d001      	beq.n	8013b20 <__sflush_r+0xac>
 8013b1c:	2b16      	cmp	r3, #22
 8013b1e:	d11e      	bne.n	8013b5e <__sflush_r+0xea>
 8013b20:	602f      	str	r7, [r5, #0]
 8013b22:	2000      	movs	r0, #0
 8013b24:	e022      	b.n	8013b6c <__sflush_r+0xf8>
 8013b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b2a:	b21b      	sxth	r3, r3
 8013b2c:	e01b      	b.n	8013b66 <__sflush_r+0xf2>
 8013b2e:	690f      	ldr	r7, [r1, #16]
 8013b30:	2f00      	cmp	r7, #0
 8013b32:	d0f6      	beq.n	8013b22 <__sflush_r+0xae>
 8013b34:	0793      	lsls	r3, r2, #30
 8013b36:	680e      	ldr	r6, [r1, #0]
 8013b38:	bf08      	it	eq
 8013b3a:	694b      	ldreq	r3, [r1, #20]
 8013b3c:	600f      	str	r7, [r1, #0]
 8013b3e:	bf18      	it	ne
 8013b40:	2300      	movne	r3, #0
 8013b42:	eba6 0807 	sub.w	r8, r6, r7
 8013b46:	608b      	str	r3, [r1, #8]
 8013b48:	f1b8 0f00 	cmp.w	r8, #0
 8013b4c:	dde9      	ble.n	8013b22 <__sflush_r+0xae>
 8013b4e:	6a21      	ldr	r1, [r4, #32]
 8013b50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013b52:	4643      	mov	r3, r8
 8013b54:	463a      	mov	r2, r7
 8013b56:	4628      	mov	r0, r5
 8013b58:	47b0      	blx	r6
 8013b5a:	2800      	cmp	r0, #0
 8013b5c:	dc08      	bgt.n	8013b70 <__sflush_r+0xfc>
 8013b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b66:	81a3      	strh	r3, [r4, #12]
 8013b68:	f04f 30ff 	mov.w	r0, #4294967295
 8013b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b70:	4407      	add	r7, r0
 8013b72:	eba8 0800 	sub.w	r8, r8, r0
 8013b76:	e7e7      	b.n	8013b48 <__sflush_r+0xd4>
 8013b78:	dfbffffe 	.word	0xdfbffffe

08013b7c <_fflush_r>:
 8013b7c:	b538      	push	{r3, r4, r5, lr}
 8013b7e:	690b      	ldr	r3, [r1, #16]
 8013b80:	4605      	mov	r5, r0
 8013b82:	460c      	mov	r4, r1
 8013b84:	b913      	cbnz	r3, 8013b8c <_fflush_r+0x10>
 8013b86:	2500      	movs	r5, #0
 8013b88:	4628      	mov	r0, r5
 8013b8a:	bd38      	pop	{r3, r4, r5, pc}
 8013b8c:	b118      	cbz	r0, 8013b96 <_fflush_r+0x1a>
 8013b8e:	6a03      	ldr	r3, [r0, #32]
 8013b90:	b90b      	cbnz	r3, 8013b96 <_fflush_r+0x1a>
 8013b92:	f7fe fa03 	bl	8011f9c <__sinit>
 8013b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d0f3      	beq.n	8013b86 <_fflush_r+0xa>
 8013b9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013ba0:	07d0      	lsls	r0, r2, #31
 8013ba2:	d404      	bmi.n	8013bae <_fflush_r+0x32>
 8013ba4:	0599      	lsls	r1, r3, #22
 8013ba6:	d402      	bmi.n	8013bae <_fflush_r+0x32>
 8013ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013baa:	f7fe fb2c 	bl	8012206 <__retarget_lock_acquire_recursive>
 8013bae:	4628      	mov	r0, r5
 8013bb0:	4621      	mov	r1, r4
 8013bb2:	f7ff ff5f 	bl	8013a74 <__sflush_r>
 8013bb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013bb8:	07da      	lsls	r2, r3, #31
 8013bba:	4605      	mov	r5, r0
 8013bbc:	d4e4      	bmi.n	8013b88 <_fflush_r+0xc>
 8013bbe:	89a3      	ldrh	r3, [r4, #12]
 8013bc0:	059b      	lsls	r3, r3, #22
 8013bc2:	d4e1      	bmi.n	8013b88 <_fflush_r+0xc>
 8013bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013bc6:	f7fe fb1f 	bl	8012208 <__retarget_lock_release_recursive>
 8013bca:	e7dd      	b.n	8013b88 <_fflush_r+0xc>

08013bcc <memmove>:
 8013bcc:	4288      	cmp	r0, r1
 8013bce:	b510      	push	{r4, lr}
 8013bd0:	eb01 0402 	add.w	r4, r1, r2
 8013bd4:	d902      	bls.n	8013bdc <memmove+0x10>
 8013bd6:	4284      	cmp	r4, r0
 8013bd8:	4623      	mov	r3, r4
 8013bda:	d807      	bhi.n	8013bec <memmove+0x20>
 8013bdc:	1e43      	subs	r3, r0, #1
 8013bde:	42a1      	cmp	r1, r4
 8013be0:	d008      	beq.n	8013bf4 <memmove+0x28>
 8013be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013bea:	e7f8      	b.n	8013bde <memmove+0x12>
 8013bec:	4402      	add	r2, r0
 8013bee:	4601      	mov	r1, r0
 8013bf0:	428a      	cmp	r2, r1
 8013bf2:	d100      	bne.n	8013bf6 <memmove+0x2a>
 8013bf4:	bd10      	pop	{r4, pc}
 8013bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013bfe:	e7f7      	b.n	8013bf0 <memmove+0x24>

08013c00 <_sbrk_r>:
 8013c00:	b538      	push	{r3, r4, r5, lr}
 8013c02:	4d06      	ldr	r5, [pc, #24]	@ (8013c1c <_sbrk_r+0x1c>)
 8013c04:	2300      	movs	r3, #0
 8013c06:	4604      	mov	r4, r0
 8013c08:	4608      	mov	r0, r1
 8013c0a:	602b      	str	r3, [r5, #0]
 8013c0c:	f000 fc6c 	bl	80144e8 <_sbrk>
 8013c10:	1c43      	adds	r3, r0, #1
 8013c12:	d102      	bne.n	8013c1a <_sbrk_r+0x1a>
 8013c14:	682b      	ldr	r3, [r5, #0]
 8013c16:	b103      	cbz	r3, 8013c1a <_sbrk_r+0x1a>
 8013c18:	6023      	str	r3, [r4, #0]
 8013c1a:	bd38      	pop	{r3, r4, r5, pc}
 8013c1c:	20017158 	.word	0x20017158

08013c20 <__assert_func>:
 8013c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c22:	4614      	mov	r4, r2
 8013c24:	461a      	mov	r2, r3
 8013c26:	4b09      	ldr	r3, [pc, #36]	@ (8013c4c <__assert_func+0x2c>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	4605      	mov	r5, r0
 8013c2c:	68d8      	ldr	r0, [r3, #12]
 8013c2e:	b954      	cbnz	r4, 8013c46 <__assert_func+0x26>
 8013c30:	4b07      	ldr	r3, [pc, #28]	@ (8013c50 <__assert_func+0x30>)
 8013c32:	461c      	mov	r4, r3
 8013c34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013c38:	9100      	str	r1, [sp, #0]
 8013c3a:	462b      	mov	r3, r5
 8013c3c:	4905      	ldr	r1, [pc, #20]	@ (8013c54 <__assert_func+0x34>)
 8013c3e:	f000 f86f 	bl	8013d20 <fiprintf>
 8013c42:	f000 f87f 	bl	8013d44 <abort>
 8013c46:	4b04      	ldr	r3, [pc, #16]	@ (8013c58 <__assert_func+0x38>)
 8013c48:	e7f4      	b.n	8013c34 <__assert_func+0x14>
 8013c4a:	bf00      	nop
 8013c4c:	20000040 	.word	0x20000040
 8013c50:	08014f6e 	.word	0x08014f6e
 8013c54:	08014f40 	.word	0x08014f40
 8013c58:	08014f33 	.word	0x08014f33

08013c5c <_calloc_r>:
 8013c5c:	b570      	push	{r4, r5, r6, lr}
 8013c5e:	fba1 5402 	umull	r5, r4, r1, r2
 8013c62:	b93c      	cbnz	r4, 8013c74 <_calloc_r+0x18>
 8013c64:	4629      	mov	r1, r5
 8013c66:	f7ff f99f 	bl	8012fa8 <_malloc_r>
 8013c6a:	4606      	mov	r6, r0
 8013c6c:	b928      	cbnz	r0, 8013c7a <_calloc_r+0x1e>
 8013c6e:	2600      	movs	r6, #0
 8013c70:	4630      	mov	r0, r6
 8013c72:	bd70      	pop	{r4, r5, r6, pc}
 8013c74:	220c      	movs	r2, #12
 8013c76:	6002      	str	r2, [r0, #0]
 8013c78:	e7f9      	b.n	8013c6e <_calloc_r+0x12>
 8013c7a:	462a      	mov	r2, r5
 8013c7c:	4621      	mov	r1, r4
 8013c7e:	f7fe fa57 	bl	8012130 <memset>
 8013c82:	e7f5      	b.n	8013c70 <_calloc_r+0x14>

08013c84 <__ascii_mbtowc>:
 8013c84:	b082      	sub	sp, #8
 8013c86:	b901      	cbnz	r1, 8013c8a <__ascii_mbtowc+0x6>
 8013c88:	a901      	add	r1, sp, #4
 8013c8a:	b142      	cbz	r2, 8013c9e <__ascii_mbtowc+0x1a>
 8013c8c:	b14b      	cbz	r3, 8013ca2 <__ascii_mbtowc+0x1e>
 8013c8e:	7813      	ldrb	r3, [r2, #0]
 8013c90:	600b      	str	r3, [r1, #0]
 8013c92:	7812      	ldrb	r2, [r2, #0]
 8013c94:	1e10      	subs	r0, r2, #0
 8013c96:	bf18      	it	ne
 8013c98:	2001      	movne	r0, #1
 8013c9a:	b002      	add	sp, #8
 8013c9c:	4770      	bx	lr
 8013c9e:	4610      	mov	r0, r2
 8013ca0:	e7fb      	b.n	8013c9a <__ascii_mbtowc+0x16>
 8013ca2:	f06f 0001 	mvn.w	r0, #1
 8013ca6:	e7f8      	b.n	8013c9a <__ascii_mbtowc+0x16>

08013ca8 <_realloc_r>:
 8013ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cac:	4680      	mov	r8, r0
 8013cae:	4615      	mov	r5, r2
 8013cb0:	460c      	mov	r4, r1
 8013cb2:	b921      	cbnz	r1, 8013cbe <_realloc_r+0x16>
 8013cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cb8:	4611      	mov	r1, r2
 8013cba:	f7ff b975 	b.w	8012fa8 <_malloc_r>
 8013cbe:	b92a      	cbnz	r2, 8013ccc <_realloc_r+0x24>
 8013cc0:	f7ff f8fe 	bl	8012ec0 <_free_r>
 8013cc4:	2400      	movs	r4, #0
 8013cc6:	4620      	mov	r0, r4
 8013cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ccc:	f000 f841 	bl	8013d52 <_malloc_usable_size_r>
 8013cd0:	4285      	cmp	r5, r0
 8013cd2:	4606      	mov	r6, r0
 8013cd4:	d802      	bhi.n	8013cdc <_realloc_r+0x34>
 8013cd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013cda:	d8f4      	bhi.n	8013cc6 <_realloc_r+0x1e>
 8013cdc:	4629      	mov	r1, r5
 8013cde:	4640      	mov	r0, r8
 8013ce0:	f7ff f962 	bl	8012fa8 <_malloc_r>
 8013ce4:	4607      	mov	r7, r0
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	d0ec      	beq.n	8013cc4 <_realloc_r+0x1c>
 8013cea:	42b5      	cmp	r5, r6
 8013cec:	462a      	mov	r2, r5
 8013cee:	4621      	mov	r1, r4
 8013cf0:	bf28      	it	cs
 8013cf2:	4632      	movcs	r2, r6
 8013cf4:	f7fe fa89 	bl	801220a <memcpy>
 8013cf8:	4621      	mov	r1, r4
 8013cfa:	4640      	mov	r0, r8
 8013cfc:	f7ff f8e0 	bl	8012ec0 <_free_r>
 8013d00:	463c      	mov	r4, r7
 8013d02:	e7e0      	b.n	8013cc6 <_realloc_r+0x1e>

08013d04 <__ascii_wctomb>:
 8013d04:	4603      	mov	r3, r0
 8013d06:	4608      	mov	r0, r1
 8013d08:	b141      	cbz	r1, 8013d1c <__ascii_wctomb+0x18>
 8013d0a:	2aff      	cmp	r2, #255	@ 0xff
 8013d0c:	d904      	bls.n	8013d18 <__ascii_wctomb+0x14>
 8013d0e:	228a      	movs	r2, #138	@ 0x8a
 8013d10:	601a      	str	r2, [r3, #0]
 8013d12:	f04f 30ff 	mov.w	r0, #4294967295
 8013d16:	4770      	bx	lr
 8013d18:	700a      	strb	r2, [r1, #0]
 8013d1a:	2001      	movs	r0, #1
 8013d1c:	4770      	bx	lr
	...

08013d20 <fiprintf>:
 8013d20:	b40e      	push	{r1, r2, r3}
 8013d22:	b503      	push	{r0, r1, lr}
 8013d24:	4601      	mov	r1, r0
 8013d26:	ab03      	add	r3, sp, #12
 8013d28:	4805      	ldr	r0, [pc, #20]	@ (8013d40 <fiprintf+0x20>)
 8013d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d2e:	6800      	ldr	r0, [r0, #0]
 8013d30:	9301      	str	r3, [sp, #4]
 8013d32:	f000 f83f 	bl	8013db4 <_vfiprintf_r>
 8013d36:	b002      	add	sp, #8
 8013d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d3c:	b003      	add	sp, #12
 8013d3e:	4770      	bx	lr
 8013d40:	20000040 	.word	0x20000040

08013d44 <abort>:
 8013d44:	b508      	push	{r3, lr}
 8013d46:	2006      	movs	r0, #6
 8013d48:	f000 fa08 	bl	801415c <raise>
 8013d4c:	2001      	movs	r0, #1
 8013d4e:	f7ee fd79 	bl	8002844 <_exit>

08013d52 <_malloc_usable_size_r>:
 8013d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d56:	1f18      	subs	r0, r3, #4
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	bfbc      	itt	lt
 8013d5c:	580b      	ldrlt	r3, [r1, r0]
 8013d5e:	18c0      	addlt	r0, r0, r3
 8013d60:	4770      	bx	lr

08013d62 <__sfputc_r>:
 8013d62:	6893      	ldr	r3, [r2, #8]
 8013d64:	3b01      	subs	r3, #1
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	b410      	push	{r4}
 8013d6a:	6093      	str	r3, [r2, #8]
 8013d6c:	da08      	bge.n	8013d80 <__sfputc_r+0x1e>
 8013d6e:	6994      	ldr	r4, [r2, #24]
 8013d70:	42a3      	cmp	r3, r4
 8013d72:	db01      	blt.n	8013d78 <__sfputc_r+0x16>
 8013d74:	290a      	cmp	r1, #10
 8013d76:	d103      	bne.n	8013d80 <__sfputc_r+0x1e>
 8013d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d7c:	f000 b932 	b.w	8013fe4 <__swbuf_r>
 8013d80:	6813      	ldr	r3, [r2, #0]
 8013d82:	1c58      	adds	r0, r3, #1
 8013d84:	6010      	str	r0, [r2, #0]
 8013d86:	7019      	strb	r1, [r3, #0]
 8013d88:	4608      	mov	r0, r1
 8013d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d8e:	4770      	bx	lr

08013d90 <__sfputs_r>:
 8013d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d92:	4606      	mov	r6, r0
 8013d94:	460f      	mov	r7, r1
 8013d96:	4614      	mov	r4, r2
 8013d98:	18d5      	adds	r5, r2, r3
 8013d9a:	42ac      	cmp	r4, r5
 8013d9c:	d101      	bne.n	8013da2 <__sfputs_r+0x12>
 8013d9e:	2000      	movs	r0, #0
 8013da0:	e007      	b.n	8013db2 <__sfputs_r+0x22>
 8013da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013da6:	463a      	mov	r2, r7
 8013da8:	4630      	mov	r0, r6
 8013daa:	f7ff ffda 	bl	8013d62 <__sfputc_r>
 8013dae:	1c43      	adds	r3, r0, #1
 8013db0:	d1f3      	bne.n	8013d9a <__sfputs_r+0xa>
 8013db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013db4 <_vfiprintf_r>:
 8013db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db8:	460d      	mov	r5, r1
 8013dba:	b09d      	sub	sp, #116	@ 0x74
 8013dbc:	4614      	mov	r4, r2
 8013dbe:	4698      	mov	r8, r3
 8013dc0:	4606      	mov	r6, r0
 8013dc2:	b118      	cbz	r0, 8013dcc <_vfiprintf_r+0x18>
 8013dc4:	6a03      	ldr	r3, [r0, #32]
 8013dc6:	b90b      	cbnz	r3, 8013dcc <_vfiprintf_r+0x18>
 8013dc8:	f7fe f8e8 	bl	8011f9c <__sinit>
 8013dcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013dce:	07d9      	lsls	r1, r3, #31
 8013dd0:	d405      	bmi.n	8013dde <_vfiprintf_r+0x2a>
 8013dd2:	89ab      	ldrh	r3, [r5, #12]
 8013dd4:	059a      	lsls	r2, r3, #22
 8013dd6:	d402      	bmi.n	8013dde <_vfiprintf_r+0x2a>
 8013dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013dda:	f7fe fa14 	bl	8012206 <__retarget_lock_acquire_recursive>
 8013dde:	89ab      	ldrh	r3, [r5, #12]
 8013de0:	071b      	lsls	r3, r3, #28
 8013de2:	d501      	bpl.n	8013de8 <_vfiprintf_r+0x34>
 8013de4:	692b      	ldr	r3, [r5, #16]
 8013de6:	b99b      	cbnz	r3, 8013e10 <_vfiprintf_r+0x5c>
 8013de8:	4629      	mov	r1, r5
 8013dea:	4630      	mov	r0, r6
 8013dec:	f000 f938 	bl	8014060 <__swsetup_r>
 8013df0:	b170      	cbz	r0, 8013e10 <_vfiprintf_r+0x5c>
 8013df2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013df4:	07dc      	lsls	r4, r3, #31
 8013df6:	d504      	bpl.n	8013e02 <_vfiprintf_r+0x4e>
 8013df8:	f04f 30ff 	mov.w	r0, #4294967295
 8013dfc:	b01d      	add	sp, #116	@ 0x74
 8013dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e02:	89ab      	ldrh	r3, [r5, #12]
 8013e04:	0598      	lsls	r0, r3, #22
 8013e06:	d4f7      	bmi.n	8013df8 <_vfiprintf_r+0x44>
 8013e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013e0a:	f7fe f9fd 	bl	8012208 <__retarget_lock_release_recursive>
 8013e0e:	e7f3      	b.n	8013df8 <_vfiprintf_r+0x44>
 8013e10:	2300      	movs	r3, #0
 8013e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e14:	2320      	movs	r3, #32
 8013e16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e1e:	2330      	movs	r3, #48	@ 0x30
 8013e20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013fd0 <_vfiprintf_r+0x21c>
 8013e24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013e28:	f04f 0901 	mov.w	r9, #1
 8013e2c:	4623      	mov	r3, r4
 8013e2e:	469a      	mov	sl, r3
 8013e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e34:	b10a      	cbz	r2, 8013e3a <_vfiprintf_r+0x86>
 8013e36:	2a25      	cmp	r2, #37	@ 0x25
 8013e38:	d1f9      	bne.n	8013e2e <_vfiprintf_r+0x7a>
 8013e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8013e3e:	d00b      	beq.n	8013e58 <_vfiprintf_r+0xa4>
 8013e40:	465b      	mov	r3, fp
 8013e42:	4622      	mov	r2, r4
 8013e44:	4629      	mov	r1, r5
 8013e46:	4630      	mov	r0, r6
 8013e48:	f7ff ffa2 	bl	8013d90 <__sfputs_r>
 8013e4c:	3001      	adds	r0, #1
 8013e4e:	f000 80a7 	beq.w	8013fa0 <_vfiprintf_r+0x1ec>
 8013e52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e54:	445a      	add	r2, fp
 8013e56:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e58:	f89a 3000 	ldrb.w	r3, [sl]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	f000 809f 	beq.w	8013fa0 <_vfiprintf_r+0x1ec>
 8013e62:	2300      	movs	r3, #0
 8013e64:	f04f 32ff 	mov.w	r2, #4294967295
 8013e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e6c:	f10a 0a01 	add.w	sl, sl, #1
 8013e70:	9304      	str	r3, [sp, #16]
 8013e72:	9307      	str	r3, [sp, #28]
 8013e74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013e78:	931a      	str	r3, [sp, #104]	@ 0x68
 8013e7a:	4654      	mov	r4, sl
 8013e7c:	2205      	movs	r2, #5
 8013e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e82:	4853      	ldr	r0, [pc, #332]	@ (8013fd0 <_vfiprintf_r+0x21c>)
 8013e84:	f7ec fa04 	bl	8000290 <memchr>
 8013e88:	9a04      	ldr	r2, [sp, #16]
 8013e8a:	b9d8      	cbnz	r0, 8013ec4 <_vfiprintf_r+0x110>
 8013e8c:	06d1      	lsls	r1, r2, #27
 8013e8e:	bf44      	itt	mi
 8013e90:	2320      	movmi	r3, #32
 8013e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e96:	0713      	lsls	r3, r2, #28
 8013e98:	bf44      	itt	mi
 8013e9a:	232b      	movmi	r3, #43	@ 0x2b
 8013e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8013ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ea6:	d015      	beq.n	8013ed4 <_vfiprintf_r+0x120>
 8013ea8:	9a07      	ldr	r2, [sp, #28]
 8013eaa:	4654      	mov	r4, sl
 8013eac:	2000      	movs	r0, #0
 8013eae:	f04f 0c0a 	mov.w	ip, #10
 8013eb2:	4621      	mov	r1, r4
 8013eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013eb8:	3b30      	subs	r3, #48	@ 0x30
 8013eba:	2b09      	cmp	r3, #9
 8013ebc:	d94b      	bls.n	8013f56 <_vfiprintf_r+0x1a2>
 8013ebe:	b1b0      	cbz	r0, 8013eee <_vfiprintf_r+0x13a>
 8013ec0:	9207      	str	r2, [sp, #28]
 8013ec2:	e014      	b.n	8013eee <_vfiprintf_r+0x13a>
 8013ec4:	eba0 0308 	sub.w	r3, r0, r8
 8013ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8013ecc:	4313      	orrs	r3, r2
 8013ece:	9304      	str	r3, [sp, #16]
 8013ed0:	46a2      	mov	sl, r4
 8013ed2:	e7d2      	b.n	8013e7a <_vfiprintf_r+0xc6>
 8013ed4:	9b03      	ldr	r3, [sp, #12]
 8013ed6:	1d19      	adds	r1, r3, #4
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	9103      	str	r1, [sp, #12]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	bfbb      	ittet	lt
 8013ee0:	425b      	neglt	r3, r3
 8013ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8013ee6:	9307      	strge	r3, [sp, #28]
 8013ee8:	9307      	strlt	r3, [sp, #28]
 8013eea:	bfb8      	it	lt
 8013eec:	9204      	strlt	r2, [sp, #16]
 8013eee:	7823      	ldrb	r3, [r4, #0]
 8013ef0:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ef2:	d10a      	bne.n	8013f0a <_vfiprintf_r+0x156>
 8013ef4:	7863      	ldrb	r3, [r4, #1]
 8013ef6:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ef8:	d132      	bne.n	8013f60 <_vfiprintf_r+0x1ac>
 8013efa:	9b03      	ldr	r3, [sp, #12]
 8013efc:	1d1a      	adds	r2, r3, #4
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	9203      	str	r2, [sp, #12]
 8013f02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013f06:	3402      	adds	r4, #2
 8013f08:	9305      	str	r3, [sp, #20]
 8013f0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013fe0 <_vfiprintf_r+0x22c>
 8013f0e:	7821      	ldrb	r1, [r4, #0]
 8013f10:	2203      	movs	r2, #3
 8013f12:	4650      	mov	r0, sl
 8013f14:	f7ec f9bc 	bl	8000290 <memchr>
 8013f18:	b138      	cbz	r0, 8013f2a <_vfiprintf_r+0x176>
 8013f1a:	9b04      	ldr	r3, [sp, #16]
 8013f1c:	eba0 000a 	sub.w	r0, r0, sl
 8013f20:	2240      	movs	r2, #64	@ 0x40
 8013f22:	4082      	lsls	r2, r0
 8013f24:	4313      	orrs	r3, r2
 8013f26:	3401      	adds	r4, #1
 8013f28:	9304      	str	r3, [sp, #16]
 8013f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f2e:	4829      	ldr	r0, [pc, #164]	@ (8013fd4 <_vfiprintf_r+0x220>)
 8013f30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013f34:	2206      	movs	r2, #6
 8013f36:	f7ec f9ab 	bl	8000290 <memchr>
 8013f3a:	2800      	cmp	r0, #0
 8013f3c:	d03f      	beq.n	8013fbe <_vfiprintf_r+0x20a>
 8013f3e:	4b26      	ldr	r3, [pc, #152]	@ (8013fd8 <_vfiprintf_r+0x224>)
 8013f40:	bb1b      	cbnz	r3, 8013f8a <_vfiprintf_r+0x1d6>
 8013f42:	9b03      	ldr	r3, [sp, #12]
 8013f44:	3307      	adds	r3, #7
 8013f46:	f023 0307 	bic.w	r3, r3, #7
 8013f4a:	3308      	adds	r3, #8
 8013f4c:	9303      	str	r3, [sp, #12]
 8013f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f50:	443b      	add	r3, r7
 8013f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f54:	e76a      	b.n	8013e2c <_vfiprintf_r+0x78>
 8013f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f5a:	460c      	mov	r4, r1
 8013f5c:	2001      	movs	r0, #1
 8013f5e:	e7a8      	b.n	8013eb2 <_vfiprintf_r+0xfe>
 8013f60:	2300      	movs	r3, #0
 8013f62:	3401      	adds	r4, #1
 8013f64:	9305      	str	r3, [sp, #20]
 8013f66:	4619      	mov	r1, r3
 8013f68:	f04f 0c0a 	mov.w	ip, #10
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f72:	3a30      	subs	r2, #48	@ 0x30
 8013f74:	2a09      	cmp	r2, #9
 8013f76:	d903      	bls.n	8013f80 <_vfiprintf_r+0x1cc>
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d0c6      	beq.n	8013f0a <_vfiprintf_r+0x156>
 8013f7c:	9105      	str	r1, [sp, #20]
 8013f7e:	e7c4      	b.n	8013f0a <_vfiprintf_r+0x156>
 8013f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f84:	4604      	mov	r4, r0
 8013f86:	2301      	movs	r3, #1
 8013f88:	e7f0      	b.n	8013f6c <_vfiprintf_r+0x1b8>
 8013f8a:	ab03      	add	r3, sp, #12
 8013f8c:	9300      	str	r3, [sp, #0]
 8013f8e:	462a      	mov	r2, r5
 8013f90:	4b12      	ldr	r3, [pc, #72]	@ (8013fdc <_vfiprintf_r+0x228>)
 8013f92:	a904      	add	r1, sp, #16
 8013f94:	4630      	mov	r0, r6
 8013f96:	f7fd fbbd 	bl	8011714 <_printf_float>
 8013f9a:	4607      	mov	r7, r0
 8013f9c:	1c78      	adds	r0, r7, #1
 8013f9e:	d1d6      	bne.n	8013f4e <_vfiprintf_r+0x19a>
 8013fa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013fa2:	07d9      	lsls	r1, r3, #31
 8013fa4:	d405      	bmi.n	8013fb2 <_vfiprintf_r+0x1fe>
 8013fa6:	89ab      	ldrh	r3, [r5, #12]
 8013fa8:	059a      	lsls	r2, r3, #22
 8013faa:	d402      	bmi.n	8013fb2 <_vfiprintf_r+0x1fe>
 8013fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013fae:	f7fe f92b 	bl	8012208 <__retarget_lock_release_recursive>
 8013fb2:	89ab      	ldrh	r3, [r5, #12]
 8013fb4:	065b      	lsls	r3, r3, #25
 8013fb6:	f53f af1f 	bmi.w	8013df8 <_vfiprintf_r+0x44>
 8013fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013fbc:	e71e      	b.n	8013dfc <_vfiprintf_r+0x48>
 8013fbe:	ab03      	add	r3, sp, #12
 8013fc0:	9300      	str	r3, [sp, #0]
 8013fc2:	462a      	mov	r2, r5
 8013fc4:	4b05      	ldr	r3, [pc, #20]	@ (8013fdc <_vfiprintf_r+0x228>)
 8013fc6:	a904      	add	r1, sp, #16
 8013fc8:	4630      	mov	r0, r6
 8013fca:	f7fd fe3b 	bl	8011c44 <_printf_i>
 8013fce:	e7e4      	b.n	8013f9a <_vfiprintf_r+0x1e6>
 8013fd0:	08014f18 	.word	0x08014f18
 8013fd4:	08014f22 	.word	0x08014f22
 8013fd8:	08011715 	.word	0x08011715
 8013fdc:	08013d91 	.word	0x08013d91
 8013fe0:	08014f1e 	.word	0x08014f1e

08013fe4 <__swbuf_r>:
 8013fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fe6:	460e      	mov	r6, r1
 8013fe8:	4614      	mov	r4, r2
 8013fea:	4605      	mov	r5, r0
 8013fec:	b118      	cbz	r0, 8013ff6 <__swbuf_r+0x12>
 8013fee:	6a03      	ldr	r3, [r0, #32]
 8013ff0:	b90b      	cbnz	r3, 8013ff6 <__swbuf_r+0x12>
 8013ff2:	f7fd ffd3 	bl	8011f9c <__sinit>
 8013ff6:	69a3      	ldr	r3, [r4, #24]
 8013ff8:	60a3      	str	r3, [r4, #8]
 8013ffa:	89a3      	ldrh	r3, [r4, #12]
 8013ffc:	071a      	lsls	r2, r3, #28
 8013ffe:	d501      	bpl.n	8014004 <__swbuf_r+0x20>
 8014000:	6923      	ldr	r3, [r4, #16]
 8014002:	b943      	cbnz	r3, 8014016 <__swbuf_r+0x32>
 8014004:	4621      	mov	r1, r4
 8014006:	4628      	mov	r0, r5
 8014008:	f000 f82a 	bl	8014060 <__swsetup_r>
 801400c:	b118      	cbz	r0, 8014016 <__swbuf_r+0x32>
 801400e:	f04f 37ff 	mov.w	r7, #4294967295
 8014012:	4638      	mov	r0, r7
 8014014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014016:	6823      	ldr	r3, [r4, #0]
 8014018:	6922      	ldr	r2, [r4, #16]
 801401a:	1a98      	subs	r0, r3, r2
 801401c:	6963      	ldr	r3, [r4, #20]
 801401e:	b2f6      	uxtb	r6, r6
 8014020:	4283      	cmp	r3, r0
 8014022:	4637      	mov	r7, r6
 8014024:	dc05      	bgt.n	8014032 <__swbuf_r+0x4e>
 8014026:	4621      	mov	r1, r4
 8014028:	4628      	mov	r0, r5
 801402a:	f7ff fda7 	bl	8013b7c <_fflush_r>
 801402e:	2800      	cmp	r0, #0
 8014030:	d1ed      	bne.n	801400e <__swbuf_r+0x2a>
 8014032:	68a3      	ldr	r3, [r4, #8]
 8014034:	3b01      	subs	r3, #1
 8014036:	60a3      	str	r3, [r4, #8]
 8014038:	6823      	ldr	r3, [r4, #0]
 801403a:	1c5a      	adds	r2, r3, #1
 801403c:	6022      	str	r2, [r4, #0]
 801403e:	701e      	strb	r6, [r3, #0]
 8014040:	6962      	ldr	r2, [r4, #20]
 8014042:	1c43      	adds	r3, r0, #1
 8014044:	429a      	cmp	r2, r3
 8014046:	d004      	beq.n	8014052 <__swbuf_r+0x6e>
 8014048:	89a3      	ldrh	r3, [r4, #12]
 801404a:	07db      	lsls	r3, r3, #31
 801404c:	d5e1      	bpl.n	8014012 <__swbuf_r+0x2e>
 801404e:	2e0a      	cmp	r6, #10
 8014050:	d1df      	bne.n	8014012 <__swbuf_r+0x2e>
 8014052:	4621      	mov	r1, r4
 8014054:	4628      	mov	r0, r5
 8014056:	f7ff fd91 	bl	8013b7c <_fflush_r>
 801405a:	2800      	cmp	r0, #0
 801405c:	d0d9      	beq.n	8014012 <__swbuf_r+0x2e>
 801405e:	e7d6      	b.n	801400e <__swbuf_r+0x2a>

08014060 <__swsetup_r>:
 8014060:	b538      	push	{r3, r4, r5, lr}
 8014062:	4b29      	ldr	r3, [pc, #164]	@ (8014108 <__swsetup_r+0xa8>)
 8014064:	4605      	mov	r5, r0
 8014066:	6818      	ldr	r0, [r3, #0]
 8014068:	460c      	mov	r4, r1
 801406a:	b118      	cbz	r0, 8014074 <__swsetup_r+0x14>
 801406c:	6a03      	ldr	r3, [r0, #32]
 801406e:	b90b      	cbnz	r3, 8014074 <__swsetup_r+0x14>
 8014070:	f7fd ff94 	bl	8011f9c <__sinit>
 8014074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014078:	0719      	lsls	r1, r3, #28
 801407a:	d422      	bmi.n	80140c2 <__swsetup_r+0x62>
 801407c:	06da      	lsls	r2, r3, #27
 801407e:	d407      	bmi.n	8014090 <__swsetup_r+0x30>
 8014080:	2209      	movs	r2, #9
 8014082:	602a      	str	r2, [r5, #0]
 8014084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014088:	81a3      	strh	r3, [r4, #12]
 801408a:	f04f 30ff 	mov.w	r0, #4294967295
 801408e:	e033      	b.n	80140f8 <__swsetup_r+0x98>
 8014090:	0758      	lsls	r0, r3, #29
 8014092:	d512      	bpl.n	80140ba <__swsetup_r+0x5a>
 8014094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014096:	b141      	cbz	r1, 80140aa <__swsetup_r+0x4a>
 8014098:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801409c:	4299      	cmp	r1, r3
 801409e:	d002      	beq.n	80140a6 <__swsetup_r+0x46>
 80140a0:	4628      	mov	r0, r5
 80140a2:	f7fe ff0d 	bl	8012ec0 <_free_r>
 80140a6:	2300      	movs	r3, #0
 80140a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80140aa:	89a3      	ldrh	r3, [r4, #12]
 80140ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80140b0:	81a3      	strh	r3, [r4, #12]
 80140b2:	2300      	movs	r3, #0
 80140b4:	6063      	str	r3, [r4, #4]
 80140b6:	6923      	ldr	r3, [r4, #16]
 80140b8:	6023      	str	r3, [r4, #0]
 80140ba:	89a3      	ldrh	r3, [r4, #12]
 80140bc:	f043 0308 	orr.w	r3, r3, #8
 80140c0:	81a3      	strh	r3, [r4, #12]
 80140c2:	6923      	ldr	r3, [r4, #16]
 80140c4:	b94b      	cbnz	r3, 80140da <__swsetup_r+0x7a>
 80140c6:	89a3      	ldrh	r3, [r4, #12]
 80140c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80140cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80140d0:	d003      	beq.n	80140da <__swsetup_r+0x7a>
 80140d2:	4621      	mov	r1, r4
 80140d4:	4628      	mov	r0, r5
 80140d6:	f000 f883 	bl	80141e0 <__smakebuf_r>
 80140da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140de:	f013 0201 	ands.w	r2, r3, #1
 80140e2:	d00a      	beq.n	80140fa <__swsetup_r+0x9a>
 80140e4:	2200      	movs	r2, #0
 80140e6:	60a2      	str	r2, [r4, #8]
 80140e8:	6962      	ldr	r2, [r4, #20]
 80140ea:	4252      	negs	r2, r2
 80140ec:	61a2      	str	r2, [r4, #24]
 80140ee:	6922      	ldr	r2, [r4, #16]
 80140f0:	b942      	cbnz	r2, 8014104 <__swsetup_r+0xa4>
 80140f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80140f6:	d1c5      	bne.n	8014084 <__swsetup_r+0x24>
 80140f8:	bd38      	pop	{r3, r4, r5, pc}
 80140fa:	0799      	lsls	r1, r3, #30
 80140fc:	bf58      	it	pl
 80140fe:	6962      	ldrpl	r2, [r4, #20]
 8014100:	60a2      	str	r2, [r4, #8]
 8014102:	e7f4      	b.n	80140ee <__swsetup_r+0x8e>
 8014104:	2000      	movs	r0, #0
 8014106:	e7f7      	b.n	80140f8 <__swsetup_r+0x98>
 8014108:	20000040 	.word	0x20000040

0801410c <_raise_r>:
 801410c:	291f      	cmp	r1, #31
 801410e:	b538      	push	{r3, r4, r5, lr}
 8014110:	4605      	mov	r5, r0
 8014112:	460c      	mov	r4, r1
 8014114:	d904      	bls.n	8014120 <_raise_r+0x14>
 8014116:	2316      	movs	r3, #22
 8014118:	6003      	str	r3, [r0, #0]
 801411a:	f04f 30ff 	mov.w	r0, #4294967295
 801411e:	bd38      	pop	{r3, r4, r5, pc}
 8014120:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014122:	b112      	cbz	r2, 801412a <_raise_r+0x1e>
 8014124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014128:	b94b      	cbnz	r3, 801413e <_raise_r+0x32>
 801412a:	4628      	mov	r0, r5
 801412c:	f000 f830 	bl	8014190 <_getpid_r>
 8014130:	4622      	mov	r2, r4
 8014132:	4601      	mov	r1, r0
 8014134:	4628      	mov	r0, r5
 8014136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801413a:	f000 b817 	b.w	801416c <_kill_r>
 801413e:	2b01      	cmp	r3, #1
 8014140:	d00a      	beq.n	8014158 <_raise_r+0x4c>
 8014142:	1c59      	adds	r1, r3, #1
 8014144:	d103      	bne.n	801414e <_raise_r+0x42>
 8014146:	2316      	movs	r3, #22
 8014148:	6003      	str	r3, [r0, #0]
 801414a:	2001      	movs	r0, #1
 801414c:	e7e7      	b.n	801411e <_raise_r+0x12>
 801414e:	2100      	movs	r1, #0
 8014150:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014154:	4620      	mov	r0, r4
 8014156:	4798      	blx	r3
 8014158:	2000      	movs	r0, #0
 801415a:	e7e0      	b.n	801411e <_raise_r+0x12>

0801415c <raise>:
 801415c:	4b02      	ldr	r3, [pc, #8]	@ (8014168 <raise+0xc>)
 801415e:	4601      	mov	r1, r0
 8014160:	6818      	ldr	r0, [r3, #0]
 8014162:	f7ff bfd3 	b.w	801410c <_raise_r>
 8014166:	bf00      	nop
 8014168:	20000040 	.word	0x20000040

0801416c <_kill_r>:
 801416c:	b538      	push	{r3, r4, r5, lr}
 801416e:	4d07      	ldr	r5, [pc, #28]	@ (801418c <_kill_r+0x20>)
 8014170:	2300      	movs	r3, #0
 8014172:	4604      	mov	r4, r0
 8014174:	4608      	mov	r0, r1
 8014176:	4611      	mov	r1, r2
 8014178:	602b      	str	r3, [r5, #0]
 801417a:	f7ee fb53 	bl	8002824 <_kill>
 801417e:	1c43      	adds	r3, r0, #1
 8014180:	d102      	bne.n	8014188 <_kill_r+0x1c>
 8014182:	682b      	ldr	r3, [r5, #0]
 8014184:	b103      	cbz	r3, 8014188 <_kill_r+0x1c>
 8014186:	6023      	str	r3, [r4, #0]
 8014188:	bd38      	pop	{r3, r4, r5, pc}
 801418a:	bf00      	nop
 801418c:	20017158 	.word	0x20017158

08014190 <_getpid_r>:
 8014190:	f7ee bb40 	b.w	8002814 <_getpid>

08014194 <__swhatbuf_r>:
 8014194:	b570      	push	{r4, r5, r6, lr}
 8014196:	460c      	mov	r4, r1
 8014198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801419c:	2900      	cmp	r1, #0
 801419e:	b096      	sub	sp, #88	@ 0x58
 80141a0:	4615      	mov	r5, r2
 80141a2:	461e      	mov	r6, r3
 80141a4:	da0d      	bge.n	80141c2 <__swhatbuf_r+0x2e>
 80141a6:	89a3      	ldrh	r3, [r4, #12]
 80141a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80141ac:	f04f 0100 	mov.w	r1, #0
 80141b0:	bf14      	ite	ne
 80141b2:	2340      	movne	r3, #64	@ 0x40
 80141b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80141b8:	2000      	movs	r0, #0
 80141ba:	6031      	str	r1, [r6, #0]
 80141bc:	602b      	str	r3, [r5, #0]
 80141be:	b016      	add	sp, #88	@ 0x58
 80141c0:	bd70      	pop	{r4, r5, r6, pc}
 80141c2:	466a      	mov	r2, sp
 80141c4:	f000 f848 	bl	8014258 <_fstat_r>
 80141c8:	2800      	cmp	r0, #0
 80141ca:	dbec      	blt.n	80141a6 <__swhatbuf_r+0x12>
 80141cc:	9901      	ldr	r1, [sp, #4]
 80141ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80141d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80141d6:	4259      	negs	r1, r3
 80141d8:	4159      	adcs	r1, r3
 80141da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80141de:	e7eb      	b.n	80141b8 <__swhatbuf_r+0x24>

080141e0 <__smakebuf_r>:
 80141e0:	898b      	ldrh	r3, [r1, #12]
 80141e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141e4:	079d      	lsls	r5, r3, #30
 80141e6:	4606      	mov	r6, r0
 80141e8:	460c      	mov	r4, r1
 80141ea:	d507      	bpl.n	80141fc <__smakebuf_r+0x1c>
 80141ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80141f0:	6023      	str	r3, [r4, #0]
 80141f2:	6123      	str	r3, [r4, #16]
 80141f4:	2301      	movs	r3, #1
 80141f6:	6163      	str	r3, [r4, #20]
 80141f8:	b003      	add	sp, #12
 80141fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141fc:	ab01      	add	r3, sp, #4
 80141fe:	466a      	mov	r2, sp
 8014200:	f7ff ffc8 	bl	8014194 <__swhatbuf_r>
 8014204:	9f00      	ldr	r7, [sp, #0]
 8014206:	4605      	mov	r5, r0
 8014208:	4639      	mov	r1, r7
 801420a:	4630      	mov	r0, r6
 801420c:	f7fe fecc 	bl	8012fa8 <_malloc_r>
 8014210:	b948      	cbnz	r0, 8014226 <__smakebuf_r+0x46>
 8014212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014216:	059a      	lsls	r2, r3, #22
 8014218:	d4ee      	bmi.n	80141f8 <__smakebuf_r+0x18>
 801421a:	f023 0303 	bic.w	r3, r3, #3
 801421e:	f043 0302 	orr.w	r3, r3, #2
 8014222:	81a3      	strh	r3, [r4, #12]
 8014224:	e7e2      	b.n	80141ec <__smakebuf_r+0xc>
 8014226:	89a3      	ldrh	r3, [r4, #12]
 8014228:	6020      	str	r0, [r4, #0]
 801422a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801422e:	81a3      	strh	r3, [r4, #12]
 8014230:	9b01      	ldr	r3, [sp, #4]
 8014232:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014236:	b15b      	cbz	r3, 8014250 <__smakebuf_r+0x70>
 8014238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801423c:	4630      	mov	r0, r6
 801423e:	f000 f81d 	bl	801427c <_isatty_r>
 8014242:	b128      	cbz	r0, 8014250 <__smakebuf_r+0x70>
 8014244:	89a3      	ldrh	r3, [r4, #12]
 8014246:	f023 0303 	bic.w	r3, r3, #3
 801424a:	f043 0301 	orr.w	r3, r3, #1
 801424e:	81a3      	strh	r3, [r4, #12]
 8014250:	89a3      	ldrh	r3, [r4, #12]
 8014252:	431d      	orrs	r5, r3
 8014254:	81a5      	strh	r5, [r4, #12]
 8014256:	e7cf      	b.n	80141f8 <__smakebuf_r+0x18>

08014258 <_fstat_r>:
 8014258:	b538      	push	{r3, r4, r5, lr}
 801425a:	4d07      	ldr	r5, [pc, #28]	@ (8014278 <_fstat_r+0x20>)
 801425c:	2300      	movs	r3, #0
 801425e:	4604      	mov	r4, r0
 8014260:	4608      	mov	r0, r1
 8014262:	4611      	mov	r1, r2
 8014264:	602b      	str	r3, [r5, #0]
 8014266:	f7ee fb21 	bl	80028ac <_fstat>
 801426a:	1c43      	adds	r3, r0, #1
 801426c:	d102      	bne.n	8014274 <_fstat_r+0x1c>
 801426e:	682b      	ldr	r3, [r5, #0]
 8014270:	b103      	cbz	r3, 8014274 <_fstat_r+0x1c>
 8014272:	6023      	str	r3, [r4, #0]
 8014274:	bd38      	pop	{r3, r4, r5, pc}
 8014276:	bf00      	nop
 8014278:	20017158 	.word	0x20017158

0801427c <_isatty_r>:
 801427c:	b538      	push	{r3, r4, r5, lr}
 801427e:	4d06      	ldr	r5, [pc, #24]	@ (8014298 <_isatty_r+0x1c>)
 8014280:	2300      	movs	r3, #0
 8014282:	4604      	mov	r4, r0
 8014284:	4608      	mov	r0, r1
 8014286:	602b      	str	r3, [r5, #0]
 8014288:	f7ee fb20 	bl	80028cc <_isatty>
 801428c:	1c43      	adds	r3, r0, #1
 801428e:	d102      	bne.n	8014296 <_isatty_r+0x1a>
 8014290:	682b      	ldr	r3, [r5, #0]
 8014292:	b103      	cbz	r3, 8014296 <_isatty_r+0x1a>
 8014294:	6023      	str	r3, [r4, #0]
 8014296:	bd38      	pop	{r3, r4, r5, pc}
 8014298:	20017158 	.word	0x20017158

0801429c <logf>:
 801429c:	b508      	push	{r3, lr}
 801429e:	ed2d 8b02 	vpush	{d8}
 80142a2:	eeb0 8a40 	vmov.f32	s16, s0
 80142a6:	f000 f82d 	bl	8014304 <__ieee754_logf>
 80142aa:	eeb4 8a48 	vcmp.f32	s16, s16
 80142ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142b2:	d60f      	bvs.n	80142d4 <logf+0x38>
 80142b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80142b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142bc:	dc0a      	bgt.n	80142d4 <logf+0x38>
 80142be:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80142c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142c6:	d108      	bne.n	80142da <logf+0x3e>
 80142c8:	f7fd ff72 	bl	80121b0 <__errno>
 80142cc:	2322      	movs	r3, #34	@ 0x22
 80142ce:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80142f0 <logf+0x54>
 80142d2:	6003      	str	r3, [r0, #0]
 80142d4:	ecbd 8b02 	vpop	{d8}
 80142d8:	bd08      	pop	{r3, pc}
 80142da:	f7fd ff69 	bl	80121b0 <__errno>
 80142de:	ecbd 8b02 	vpop	{d8}
 80142e2:	2321      	movs	r3, #33	@ 0x21
 80142e4:	6003      	str	r3, [r0, #0]
 80142e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80142ea:	4802      	ldr	r0, [pc, #8]	@ (80142f4 <logf+0x58>)
 80142ec:	f000 b804 	b.w	80142f8 <nanf>
 80142f0:	ff800000 	.word	0xff800000
 80142f4:	08014f6e 	.word	0x08014f6e

080142f8 <nanf>:
 80142f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014300 <nanf+0x8>
 80142fc:	4770      	bx	lr
 80142fe:	bf00      	nop
 8014300:	7fc00000 	.word	0x7fc00000

08014304 <__ieee754_logf>:
 8014304:	ee10 3a10 	vmov	r3, s0
 8014308:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801430c:	d106      	bne.n	801431c <__ieee754_logf+0x18>
 801430e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80144a8 <__ieee754_logf+0x1a4>
 8014312:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80144ac <__ieee754_logf+0x1a8>
 8014316:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801431a:	4770      	bx	lr
 801431c:	2b00      	cmp	r3, #0
 801431e:	461a      	mov	r2, r3
 8014320:	da02      	bge.n	8014328 <__ieee754_logf+0x24>
 8014322:	ee30 7a40 	vsub.f32	s14, s0, s0
 8014326:	e7f4      	b.n	8014312 <__ieee754_logf+0xe>
 8014328:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801432c:	db02      	blt.n	8014334 <__ieee754_logf+0x30>
 801432e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014332:	4770      	bx	lr
 8014334:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014338:	bfb8      	it	lt
 801433a:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 80144b0 <__ieee754_logf+0x1ac>
 801433e:	485d      	ldr	r0, [pc, #372]	@ (80144b4 <__ieee754_logf+0x1b0>)
 8014340:	bfbe      	ittt	lt
 8014342:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8014346:	f06f 0118 	mvnlt.w	r1, #24
 801434a:	ee17 2a90 	vmovlt	r2, s15
 801434e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8014352:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8014356:	4410      	add	r0, r2
 8014358:	bfa8      	it	ge
 801435a:	2100      	movge	r1, #0
 801435c:	3b7f      	subs	r3, #127	@ 0x7f
 801435e:	440b      	add	r3, r1
 8014360:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8014364:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8014368:	4311      	orrs	r1, r2
 801436a:	ee00 1a10 	vmov	s0, r1
 801436e:	4952      	ldr	r1, [pc, #328]	@ (80144b8 <__ieee754_logf+0x1b4>)
 8014370:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8014374:	f102 000f 	add.w	r0, r2, #15
 8014378:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801437c:	4001      	ands	r1, r0
 801437e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014382:	bb89      	cbnz	r1, 80143e8 <__ieee754_logf+0xe4>
 8014384:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801438c:	d10f      	bne.n	80143ae <__ieee754_logf+0xaa>
 801438e:	2b00      	cmp	r3, #0
 8014390:	f000 8087 	beq.w	80144a2 <__ieee754_logf+0x19e>
 8014394:	ee07 3a90 	vmov	s15, r3
 8014398:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80144bc <__ieee754_logf+0x1b8>
 801439c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80144c0 <__ieee754_logf+0x1bc>
 80143a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143a4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80143a8:	eea7 0a87 	vfma.f32	s0, s15, s14
 80143ac:	4770      	bx	lr
 80143ae:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80144c4 <__ieee754_logf+0x1c0>
 80143b2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80143b6:	eee0 7a66 	vfms.f32	s15, s0, s13
 80143ba:	ee20 7a00 	vmul.f32	s14, s0, s0
 80143be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80143c2:	b913      	cbnz	r3, 80143ca <__ieee754_logf+0xc6>
 80143c4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80143c8:	4770      	bx	lr
 80143ca:	ee07 3a90 	vmov	s15, r3
 80143ce:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80144bc <__ieee754_logf+0x1b8>
 80143d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143d6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80143da:	ee37 0a40 	vsub.f32	s0, s14, s0
 80143de:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80144c0 <__ieee754_logf+0x1bc>
 80143e2:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80143e6:	4770      	bx	lr
 80143e8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80143ec:	ee70 7a27 	vadd.f32	s15, s0, s15
 80143f0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80144c8 <__ieee754_logf+0x1c4>
 80143f4:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80144cc <__ieee754_logf+0x1c8>
 80143f8:	4935      	ldr	r1, [pc, #212]	@ (80144d0 <__ieee754_logf+0x1cc>)
 80143fa:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80143fe:	4411      	add	r1, r2
 8014400:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8014404:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8014408:	430a      	orrs	r2, r1
 801440a:	2a00      	cmp	r2, #0
 801440c:	ee07 3a90 	vmov	s15, r3
 8014410:	ee26 5a06 	vmul.f32	s10, s12, s12
 8014414:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014418:	ee25 7a05 	vmul.f32	s14, s10, s10
 801441c:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80144d4 <__ieee754_logf+0x1d0>
 8014420:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014424:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80144d8 <__ieee754_logf+0x1d4>
 8014428:	eee7 5a87 	vfma.f32	s11, s15, s14
 801442c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80144dc <__ieee754_logf+0x1d8>
 8014430:	eee7 7a24 	vfma.f32	s15, s14, s9
 8014434:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80144e0 <__ieee754_logf+0x1dc>
 8014438:	eee7 4a87 	vfma.f32	s9, s15, s14
 801443c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80144e4 <__ieee754_logf+0x1e0>
 8014440:	eee4 7a87 	vfma.f32	s15, s9, s14
 8014444:	ee67 7a85 	vmul.f32	s15, s15, s10
 8014448:	eee5 7a87 	vfma.f32	s15, s11, s14
 801444c:	dd1a      	ble.n	8014484 <__ieee754_logf+0x180>
 801444e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8014452:	ee20 7a07 	vmul.f32	s14, s0, s14
 8014456:	ee27 7a00 	vmul.f32	s14, s14, s0
 801445a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801445e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014462:	b913      	cbnz	r3, 801446a <__ieee754_logf+0x166>
 8014464:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014468:	e7ac      	b.n	80143c4 <__ieee754_logf+0xc0>
 801446a:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80144bc <__ieee754_logf+0x1b8>
 801446e:	eee6 7a86 	vfma.f32	s15, s13, s12
 8014472:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014476:	ee37 0a40 	vsub.f32	s0, s14, s0
 801447a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80144c0 <__ieee754_logf+0x1bc>
 801447e:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8014482:	4770      	bx	lr
 8014484:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014488:	ee67 7a86 	vmul.f32	s15, s15, s12
 801448c:	b913      	cbnz	r3, 8014494 <__ieee754_logf+0x190>
 801448e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014492:	4770      	bx	lr
 8014494:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80144bc <__ieee754_logf+0x1b8>
 8014498:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801449c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80144a0:	e7eb      	b.n	801447a <__ieee754_logf+0x176>
 80144a2:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80144ac <__ieee754_logf+0x1a8>
 80144a6:	4770      	bx	lr
 80144a8:	cc000000 	.word	0xcc000000
 80144ac:	00000000 	.word	0x00000000
 80144b0:	4c000000 	.word	0x4c000000
 80144b4:	004afb20 	.word	0x004afb20
 80144b8:	007ffff0 	.word	0x007ffff0
 80144bc:	3717f7d1 	.word	0x3717f7d1
 80144c0:	3f317180 	.word	0x3f317180
 80144c4:	3eaaaaab 	.word	0x3eaaaaab
 80144c8:	3e1cd04f 	.word	0x3e1cd04f
 80144cc:	3e178897 	.word	0x3e178897
 80144d0:	ffcf5c30 	.word	0xffcf5c30
 80144d4:	3e638e29 	.word	0x3e638e29
 80144d8:	3ecccccd 	.word	0x3ecccccd
 80144dc:	3e3a3325 	.word	0x3e3a3325
 80144e0:	3e924925 	.word	0x3e924925
 80144e4:	3f2aaaab 	.word	0x3f2aaaab

080144e8 <_sbrk>:
 80144e8:	4a04      	ldr	r2, [pc, #16]	@ (80144fc <_sbrk+0x14>)
 80144ea:	6811      	ldr	r1, [r2, #0]
 80144ec:	4603      	mov	r3, r0
 80144ee:	b909      	cbnz	r1, 80144f4 <_sbrk+0xc>
 80144f0:	4903      	ldr	r1, [pc, #12]	@ (8014500 <_sbrk+0x18>)
 80144f2:	6011      	str	r1, [r2, #0]
 80144f4:	6810      	ldr	r0, [r2, #0]
 80144f6:	4403      	add	r3, r0
 80144f8:	6013      	str	r3, [r2, #0]
 80144fa:	4770      	bx	lr
 80144fc:	20017168 	.word	0x20017168
 8014500:	20017170 	.word	0x20017170

08014504 <_init>:
 8014504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014506:	bf00      	nop
 8014508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801450a:	bc08      	pop	{r3}
 801450c:	469e      	mov	lr, r3
 801450e:	4770      	bx	lr

08014510 <_fini>:
 8014510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014512:	bf00      	nop
 8014514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014516:	bc08      	pop	{r3}
 8014518:	469e      	mov	lr, r3
 801451a:	4770      	bx	lr
