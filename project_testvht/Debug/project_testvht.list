
project_testvht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfd8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800e178  0800e178  0000f178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3a8  0800e3a8  00010088  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3a8  0800e3a8  0000f3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3b0  0800e3b0  00010088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3b0  0800e3b0  0000f3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e3b4  0800e3b4  0000f3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800e3b8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014a9c  20000088  0800e440  00010088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014b24  0800e440  00010b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002668b  00000000  00000000  000100b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005980  00000000  00000000  00036743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022a0  00000000  00000000  0003c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ad5  00000000  00000000  0003e368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020317  00000000  00000000  0003fe3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e7d8  00000000  00000000  00060154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b702e  00000000  00000000  0008e92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014595a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009968  00000000  00000000  001459a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0014f308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e160 	.word	0x0800e160

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800e160 	.word	0x0800e160

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2001440c 	.word	0x2001440c

08000274 <strcmp>:
 8000274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800027c:	2a01      	cmp	r2, #1
 800027e:	bf28      	it	cs
 8000280:	429a      	cmpcs	r2, r3
 8000282:	d0f7      	beq.n	8000274 <strcmp>
 8000284:	1ad0      	subs	r0, r2, r3
 8000286:	4770      	bx	lr

08000288 <strlen>:
 8000288:	4603      	mov	r3, r0
 800028a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028e:	2a00      	cmp	r2, #0
 8000290:	d1fb      	bne.n	800028a <strlen+0x2>
 8000292:	1a18      	subs	r0, r3, r0
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295
 8000350:	f04f 30ff 	movne.w	r0, #4294967295
 8000354:	f000 b96a 	b.w	800062c <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	460c      	mov	r4, r1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d14e      	bne.n	800041a <__udivmoddi4+0xaa>
 800037c:	4694      	mov	ip, r2
 800037e:	458c      	cmp	ip, r1
 8000380:	4686      	mov	lr, r0
 8000382:	fab2 f282 	clz	r2, r2
 8000386:	d962      	bls.n	800044e <__udivmoddi4+0xde>
 8000388:	b14a      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038a:	f1c2 0320 	rsb	r3, r2, #32
 800038e:	4091      	lsls	r1, r2
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa0c fc02 	lsl.w	ip, ip, r2
 8000398:	4319      	orrs	r1, r3
 800039a:	fa00 fe02 	lsl.w	lr, r0, r2
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f f68c 	uxth.w	r6, ip
 80003a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb07 1114 	mls	r1, r7, r4, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb04 f106 	mul.w	r1, r4, r6
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003c6:	f080 8112 	bcs.w	80005ee <__udivmoddi4+0x27e>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 810f 	bls.w	80005ee <__udivmoddi4+0x27e>
 80003d0:	3c02      	subs	r4, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb1 f0f7 	udiv	r0, r1, r7
 80003de:	fb07 1110 	mls	r1, r7, r0, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb00 f606 	mul.w	r6, r0, r6
 80003ea:	429e      	cmp	r6, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x94>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f6:	f080 80fc 	bcs.w	80005f2 <__udivmoddi4+0x282>
 80003fa:	429e      	cmp	r6, r3
 80003fc:	f240 80f9 	bls.w	80005f2 <__udivmoddi4+0x282>
 8000400:	4463      	add	r3, ip
 8000402:	3802      	subs	r0, #2
 8000404:	1b9b      	subs	r3, r3, r6
 8000406:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800040a:	2100      	movs	r1, #0
 800040c:	b11d      	cbz	r5, 8000416 <__udivmoddi4+0xa6>
 800040e:	40d3      	lsrs	r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	e9c5 3200 	strd	r3, r2, [r5]
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d905      	bls.n	800042a <__udivmoddi4+0xba>
 800041e:	b10d      	cbz	r5, 8000424 <__udivmoddi4+0xb4>
 8000420:	e9c5 0100 	strd	r0, r1, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	4608      	mov	r0, r1
 8000428:	e7f5      	b.n	8000416 <__udivmoddi4+0xa6>
 800042a:	fab3 f183 	clz	r1, r3
 800042e:	2900      	cmp	r1, #0
 8000430:	d146      	bne.n	80004c0 <__udivmoddi4+0x150>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d302      	bcc.n	800043c <__udivmoddi4+0xcc>
 8000436:	4290      	cmp	r0, r2
 8000438:	f0c0 80f0 	bcc.w	800061c <__udivmoddi4+0x2ac>
 800043c:	1a86      	subs	r6, r0, r2
 800043e:	eb64 0303 	sbc.w	r3, r4, r3
 8000442:	2001      	movs	r0, #1
 8000444:	2d00      	cmp	r5, #0
 8000446:	d0e6      	beq.n	8000416 <__udivmoddi4+0xa6>
 8000448:	e9c5 6300 	strd	r6, r3, [r5]
 800044c:	e7e3      	b.n	8000416 <__udivmoddi4+0xa6>
 800044e:	2a00      	cmp	r2, #0
 8000450:	f040 8090 	bne.w	8000574 <__udivmoddi4+0x204>
 8000454:	eba1 040c 	sub.w	r4, r1, ip
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa1f f78c 	uxth.w	r7, ip
 8000460:	2101      	movs	r1, #1
 8000462:	fbb4 f6f8 	udiv	r6, r4, r8
 8000466:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800046a:	fb08 4416 	mls	r4, r8, r6, r4
 800046e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000472:	fb07 f006 	mul.w	r0, r7, r6
 8000476:	4298      	cmp	r0, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x11c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x11a>
 8000484:	4298      	cmp	r0, r3
 8000486:	f200 80cd 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 800048a:	4626      	mov	r6, r4
 800048c:	1a1c      	subs	r4, r3, r0
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb4 f0f8 	udiv	r0, r4, r8
 8000496:	fb08 4410 	mls	r4, r8, r0, r4
 800049a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800049e:	fb00 f707 	mul.w	r7, r0, r7
 80004a2:	429f      	cmp	r7, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x148>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ae:	d202      	bcs.n	80004b6 <__udivmoddi4+0x146>
 80004b0:	429f      	cmp	r7, r3
 80004b2:	f200 80b0 	bhi.w	8000616 <__udivmoddi4+0x2a6>
 80004b6:	4620      	mov	r0, r4
 80004b8:	1bdb      	subs	r3, r3, r7
 80004ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004be:	e7a5      	b.n	800040c <__udivmoddi4+0x9c>
 80004c0:	f1c1 0620 	rsb	r6, r1, #32
 80004c4:	408b      	lsls	r3, r1
 80004c6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ca:	431f      	orrs	r7, r3
 80004cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004d0:	fa04 f301 	lsl.w	r3, r4, r1
 80004d4:	ea43 030c 	orr.w	r3, r3, ip
 80004d8:	40f4      	lsrs	r4, r6
 80004da:	fa00 f801 	lsl.w	r8, r0, r1
 80004de:	0c38      	lsrs	r0, r7, #16
 80004e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004e4:	fbb4 fef0 	udiv	lr, r4, r0
 80004e8:	fa1f fc87 	uxth.w	ip, r7
 80004ec:	fb00 441e 	mls	r4, r0, lr, r4
 80004f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f4:	fb0e f90c 	mul.w	r9, lr, ip
 80004f8:	45a1      	cmp	r9, r4
 80004fa:	fa02 f201 	lsl.w	r2, r2, r1
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x1a6>
 8000500:	193c      	adds	r4, r7, r4
 8000502:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000506:	f080 8084 	bcs.w	8000612 <__udivmoddi4+0x2a2>
 800050a:	45a1      	cmp	r9, r4
 800050c:	f240 8081 	bls.w	8000612 <__udivmoddi4+0x2a2>
 8000510:	f1ae 0e02 	sub.w	lr, lr, #2
 8000514:	443c      	add	r4, r7
 8000516:	eba4 0409 	sub.w	r4, r4, r9
 800051a:	fa1f f983 	uxth.w	r9, r3
 800051e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000522:	fb00 4413 	mls	r4, r0, r3, r4
 8000526:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800052a:	fb03 fc0c 	mul.w	ip, r3, ip
 800052e:	45a4      	cmp	ip, r4
 8000530:	d907      	bls.n	8000542 <__udivmoddi4+0x1d2>
 8000532:	193c      	adds	r4, r7, r4
 8000534:	f103 30ff 	add.w	r0, r3, #4294967295
 8000538:	d267      	bcs.n	800060a <__udivmoddi4+0x29a>
 800053a:	45a4      	cmp	ip, r4
 800053c:	d965      	bls.n	800060a <__udivmoddi4+0x29a>
 800053e:	3b02      	subs	r3, #2
 8000540:	443c      	add	r4, r7
 8000542:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000546:	fba0 9302 	umull	r9, r3, r0, r2
 800054a:	eba4 040c 	sub.w	r4, r4, ip
 800054e:	429c      	cmp	r4, r3
 8000550:	46ce      	mov	lr, r9
 8000552:	469c      	mov	ip, r3
 8000554:	d351      	bcc.n	80005fa <__udivmoddi4+0x28a>
 8000556:	d04e      	beq.n	80005f6 <__udivmoddi4+0x286>
 8000558:	b155      	cbz	r5, 8000570 <__udivmoddi4+0x200>
 800055a:	ebb8 030e 	subs.w	r3, r8, lr
 800055e:	eb64 040c 	sbc.w	r4, r4, ip
 8000562:	fa04 f606 	lsl.w	r6, r4, r6
 8000566:	40cb      	lsrs	r3, r1
 8000568:	431e      	orrs	r6, r3
 800056a:	40cc      	lsrs	r4, r1
 800056c:	e9c5 6400 	strd	r6, r4, [r5]
 8000570:	2100      	movs	r1, #0
 8000572:	e750      	b.n	8000416 <__udivmoddi4+0xa6>
 8000574:	f1c2 0320 	rsb	r3, r2, #32
 8000578:	fa20 f103 	lsr.w	r1, r0, r3
 800057c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000580:	fa24 f303 	lsr.w	r3, r4, r3
 8000584:	4094      	lsls	r4, r2
 8000586:	430c      	orrs	r4, r1
 8000588:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800058c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000590:	fa1f f78c 	uxth.w	r7, ip
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3110 	mls	r1, r8, r0, r3
 800059c:	0c23      	lsrs	r3, r4, #16
 800059e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a2:	fb00 f107 	mul.w	r1, r0, r7
 80005a6:	4299      	cmp	r1, r3
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x24c>
 80005aa:	eb1c 0303 	adds.w	r3, ip, r3
 80005ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80005b2:	d22c      	bcs.n	800060e <__udivmoddi4+0x29e>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	d92a      	bls.n	800060e <__udivmoddi4+0x29e>
 80005b8:	3802      	subs	r0, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	1a5b      	subs	r3, r3, r1
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005c4:	fb08 3311 	mls	r3, r8, r1, r3
 80005c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005cc:	fb01 f307 	mul.w	r3, r1, r7
 80005d0:	42a3      	cmp	r3, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x276>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005dc:	d213      	bcs.n	8000606 <__udivmoddi4+0x296>
 80005de:	42a3      	cmp	r3, r4
 80005e0:	d911      	bls.n	8000606 <__udivmoddi4+0x296>
 80005e2:	3902      	subs	r1, #2
 80005e4:	4464      	add	r4, ip
 80005e6:	1ae4      	subs	r4, r4, r3
 80005e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005ec:	e739      	b.n	8000462 <__udivmoddi4+0xf2>
 80005ee:	4604      	mov	r4, r0
 80005f0:	e6f0      	b.n	80003d4 <__udivmoddi4+0x64>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e706      	b.n	8000404 <__udivmoddi4+0x94>
 80005f6:	45c8      	cmp	r8, r9
 80005f8:	d2ae      	bcs.n	8000558 <__udivmoddi4+0x1e8>
 80005fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000602:	3801      	subs	r0, #1
 8000604:	e7a8      	b.n	8000558 <__udivmoddi4+0x1e8>
 8000606:	4631      	mov	r1, r6
 8000608:	e7ed      	b.n	80005e6 <__udivmoddi4+0x276>
 800060a:	4603      	mov	r3, r0
 800060c:	e799      	b.n	8000542 <__udivmoddi4+0x1d2>
 800060e:	4630      	mov	r0, r6
 8000610:	e7d4      	b.n	80005bc <__udivmoddi4+0x24c>
 8000612:	46d6      	mov	lr, sl
 8000614:	e77f      	b.n	8000516 <__udivmoddi4+0x1a6>
 8000616:	4463      	add	r3, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e74d      	b.n	80004b8 <__udivmoddi4+0x148>
 800061c:	4606      	mov	r6, r0
 800061e:	4623      	mov	r3, r4
 8000620:	4608      	mov	r0, r1
 8000622:	e70f      	b.n	8000444 <__udivmoddi4+0xd4>
 8000624:	3e02      	subs	r6, #2
 8000626:	4463      	add	r3, ip
 8000628:	e730      	b.n	800048c <__udivmoddi4+0x11c>
 800062a:	bf00      	nop

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <SDTimer_Handler>:
// counter of fafts
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <SDTimer_Handler+0x40>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d006      	beq.n	800064c <SDTimer_Handler+0x1c>
    Timer1--;
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <SDTimer_Handler+0x40>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	3b01      	subs	r3, #1
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <SDTimer_Handler+0x40>)
 800064a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <SDTimer_Handler+0x44>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <SDTimer_Handler+0x34>
    Timer2--;
 8000656:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <SDTimer_Handler+0x44>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	3b01      	subs	r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b04      	ldr	r3, [pc, #16]	@ (8000674 <SDTimer_Handler+0x44>)
 8000662:	701a      	strb	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200012a2 	.word	0x200012a2
 8000674:	200012a3 	.word	0x200012a3

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	@ 0x30
 800067c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fed7 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f93f 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 fb01 	bl	8000c8c <MX_GPIO_Init>
  MX_I2C1_Init();
 800068a:	f000 f9a7 	bl	80009dc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800068e:	f000 faa9 	bl	8000be4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000692:	f000 fa07 	bl	8000aa4 <MX_TIM1_Init>
  MX_SPI2_Init();
 8000696:	f000 f9cf 	bl	8000a38 <MX_SPI2_Init>
  MX_FATFS_Init();
 800069a:	f004 fe7f 	bl	800539c <MX_FATFS_Init>
  MX_USART2_UART_Init();
 800069e:	f000 facb 	bl	8000c38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // init lcd
  CLCD_I2C_Init(&LCD1,&hi2c1,0x4e,20,4);
 80006a2:	2304      	movs	r3, #4
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2314      	movs	r3, #20
 80006a8:	224e      	movs	r2, #78	@ 0x4e
 80006aa:	4977      	ldr	r1, [pc, #476]	@ (8000888 <main+0x210>)
 80006ac:	4877      	ldr	r0, [pc, #476]	@ (800088c <main+0x214>)
 80006ae:	f005 fc74 	bl	8005f9a <CLCD_I2C_Init>

  // init fatfs
  fresult = f_mount(&fs, "/", 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	4976      	ldr	r1, [pc, #472]	@ (8000890 <main+0x218>)
 80006b6:	4877      	ldr	r0, [pc, #476]	@ (8000894 <main+0x21c>)
 80006b8:	f005 fb6a 	bl	8005d90 <f_mount>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	4b75      	ldr	r3, [pc, #468]	@ (8000898 <main+0x220>)
 80006c2:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)  print_cli("ERROR!!! in mounting SD CARD...\n\n");
 80006c4:	4b74      	ldr	r3, [pc, #464]	@ (8000898 <main+0x220>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d003      	beq.n	80006d4 <main+0x5c>
 80006cc:	4873      	ldr	r0, [pc, #460]	@ (800089c <main+0x224>)
 80006ce:	f006 fc4f 	bl	8006f70 <print_cli>
 80006d2:	e002      	b.n	80006da <main+0x62>
  else print_cli("SD CARD mounted successfully...\n\n");
 80006d4:	4872      	ldr	r0, [pc, #456]	@ (80008a0 <main+0x228>)
 80006d6:	f006 fc4b 	bl	8006f70 <print_cli>
//     flash_erease(FLASH_SECTOR_6);
//     flash_write_arr(0x08040000,(uint8_t *)&parameter,sizeof(parameter));
//     flash_lock();

  // read parameter from flash
  flash_read_arr(0x08040000, (uint8_t*)&parameter_read, sizeof(parameter_read));
 80006da:	220f      	movs	r2, #15
 80006dc:	4971      	ldr	r1, [pc, #452]	@ (80008a4 <main+0x22c>)
 80006de:	4872      	ldr	r0, [pc, #456]	@ (80008a8 <main+0x230>)
 80006e0:	f006 fa93 	bl	8006c0a <flash_read_arr>


// create tasks
  status = xTaskCreate(sensor_task, "sensor_task", 250, NULL, 2, &handle_sensor_task);
 80006e4:	4b71      	ldr	r3, [pc, #452]	@ (80008ac <main+0x234>)
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	2302      	movs	r3, #2
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2300      	movs	r3, #0
 80006ee:	22fa      	movs	r2, #250	@ 0xfa
 80006f0:	496f      	ldr	r1, [pc, #444]	@ (80008b0 <main+0x238>)
 80006f2:	4870      	ldr	r0, [pc, #448]	@ (80008b4 <main+0x23c>)
 80006f4:	f008 fbc5 	bl	8008e82 <xTaskCreate>
 80006f8:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 80006fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d10b      	bne.n	8000718 <main+0xa0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000704:	f383 8811 	msr	BASEPRI, r3
 8000708:	f3bf 8f6f 	isb	sy
 800070c:	f3bf 8f4f 	dsb	sy
 8000710:	623b      	str	r3, [r7, #32]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <main+0x9c>

  status = xTaskCreate(scan_keypad_task, "scan_keypad_task", 250, NULL, 3, &handle_scan_keypad_task);
 8000718:	4b67      	ldr	r3, [pc, #412]	@ (80008b8 <main+0x240>)
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	2303      	movs	r3, #3
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2300      	movs	r3, #0
 8000722:	22fa      	movs	r2, #250	@ 0xfa
 8000724:	4965      	ldr	r1, [pc, #404]	@ (80008bc <main+0x244>)
 8000726:	4866      	ldr	r0, [pc, #408]	@ (80008c0 <main+0x248>)
 8000728:	f008 fbab 	bl	8008e82 <xTaskCreate>
 800072c:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 800072e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000730:	2b00      	cmp	r3, #0
 8000732:	d10b      	bne.n	800074c <main+0xd4>
    __asm volatile
 8000734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000738:	f383 8811 	msr	BASEPRI, r3
 800073c:	f3bf 8f6f 	isb	sy
 8000740:	f3bf 8f4f 	dsb	sy
 8000744:	61fb      	str	r3, [r7, #28]
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <main+0xd0>

  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800074c:	4b5d      	ldr	r3, [pc, #372]	@ (80008c4 <main+0x24c>)
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	2302      	movs	r3, #2
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2300      	movs	r3, #0
 8000756:	22fa      	movs	r2, #250	@ 0xfa
 8000758:	495b      	ldr	r1, [pc, #364]	@ (80008c8 <main+0x250>)
 800075a:	485c      	ldr	r0, [pc, #368]	@ (80008cc <main+0x254>)
 800075c:	f008 fb91 	bl	8008e82 <xTaskCreate>
 8000760:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 8000762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000764:	2b00      	cmp	r3, #0
 8000766:	d10b      	bne.n	8000780 <main+0x108>
    __asm volatile
 8000768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800076c:	f383 8811 	msr	BASEPRI, r3
 8000770:	f3bf 8f6f 	isb	sy
 8000774:	f3bf 8f4f 	dsb	sy
 8000778:	61bb      	str	r3, [r7, #24]
}
 800077a:	bf00      	nop
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <main+0x104>

  status = xTaskCreate(motor_task, "motor_task", 250, NULL, 3, &handle_motor_task);
 8000780:	4b53      	ldr	r3, [pc, #332]	@ (80008d0 <main+0x258>)
 8000782:	9301      	str	r3, [sp, #4]
 8000784:	2303      	movs	r3, #3
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2300      	movs	r3, #0
 800078a:	22fa      	movs	r2, #250	@ 0xfa
 800078c:	4951      	ldr	r1, [pc, #324]	@ (80008d4 <main+0x25c>)
 800078e:	4852      	ldr	r0, [pc, #328]	@ (80008d8 <main+0x260>)
 8000790:	f008 fb77 	bl	8008e82 <xTaskCreate>
 8000794:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 8000796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000798:	2b00      	cmp	r3, #0
 800079a:	d10b      	bne.n	80007b4 <main+0x13c>
    __asm volatile
 800079c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007a0:	f383 8811 	msr	BASEPRI, r3
 80007a4:	f3bf 8f6f 	isb	sy
 80007a8:	f3bf 8f4f 	dsb	sy
 80007ac:	617b      	str	r3, [r7, #20]
}
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <main+0x138>

  status = xTaskCreate(menuconfig_task, "menuconfig_task", 250, NULL, 2, &handle_menuconfig_task);
 80007b4:	4b49      	ldr	r3, [pc, #292]	@ (80008dc <main+0x264>)
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	2302      	movs	r3, #2
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2300      	movs	r3, #0
 80007be:	22fa      	movs	r2, #250	@ 0xfa
 80007c0:	4947      	ldr	r1, [pc, #284]	@ (80008e0 <main+0x268>)
 80007c2:	4848      	ldr	r0, [pc, #288]	@ (80008e4 <main+0x26c>)
 80007c4:	f008 fb5d 	bl	8008e82 <xTaskCreate>
 80007c8:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 80007ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10b      	bne.n	80007e8 <main+0x170>
    __asm volatile
 80007d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007d4:	f383 8811 	msr	BASEPRI, r3
 80007d8:	f3bf 8f6f 	isb	sy
 80007dc:	f3bf 8f4f 	dsb	sy
 80007e0:	613b      	str	r3, [r7, #16]
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <main+0x16c>

  status = xTaskCreate(password_task, "password_task", 250, NULL, 2, &handle_password_task);
 80007e8:	4b3f      	ldr	r3, [pc, #252]	@ (80008e8 <main+0x270>)
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	2302      	movs	r3, #2
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2300      	movs	r3, #0
 80007f2:	22fa      	movs	r2, #250	@ 0xfa
 80007f4:	493d      	ldr	r1, [pc, #244]	@ (80008ec <main+0x274>)
 80007f6:	483e      	ldr	r0, [pc, #248]	@ (80008f0 <main+0x278>)
 80007f8:	f008 fb43 	bl	8008e82 <xTaskCreate>
 80007fc:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 80007fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000800:	2b00      	cmp	r3, #0
 8000802:	d10b      	bne.n	800081c <main+0x1a4>
    __asm volatile
 8000804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000808:	f383 8811 	msr	BASEPRI, r3
 800080c:	f3bf 8f6f 	isb	sy
 8000810:	f3bf 8f4f 	dsb	sy
 8000814:	60fb      	str	r3, [r7, #12]
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <main+0x1a0>

  status = xTaskCreate(sd_card_task, "sd_card_task", 250, NULL, 2, &handle_sd_card_task);
 800081c:	4b35      	ldr	r3, [pc, #212]	@ (80008f4 <main+0x27c>)
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	2302      	movs	r3, #2
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2300      	movs	r3, #0
 8000826:	22fa      	movs	r2, #250	@ 0xfa
 8000828:	4933      	ldr	r1, [pc, #204]	@ (80008f8 <main+0x280>)
 800082a:	4834      	ldr	r0, [pc, #208]	@ (80008fc <main+0x284>)
 800082c:	f008 fb29 	bl	8008e82 <xTaskCreate>
 8000830:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status);
 8000832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000834:	2b00      	cmp	r3, #0
 8000836:	d10b      	bne.n	8000850 <main+0x1d8>
    __asm volatile
 8000838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800083c:	f383 8811 	msr	BASEPRI, r3
 8000840:	f3bf 8f6f 	isb	sy
 8000844:	f3bf 8f4f 	dsb	sy
 8000848:	60bb      	str	r3, [r7, #8]
}
 800084a:	bf00      	nop
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <main+0x1d4>

  // create queues
  q_print = xQueueCreate(10, sizeof(size_t));
 8000850:	2200      	movs	r2, #0
 8000852:	2104      	movs	r1, #4
 8000854:	200a      	movs	r0, #10
 8000856:	f007 fec9 	bl	80085ec <xQueueGenericCreate>
 800085a:	4603      	mov	r3, r0
 800085c:	4a28      	ldr	r2, [pc, #160]	@ (8000900 <main+0x288>)
 800085e:	6013      	str	r3, [r2, #0]

  configASSERT(q_print != NULL);
 8000860:	4b27      	ldr	r3, [pc, #156]	@ (8000900 <main+0x288>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10b      	bne.n	8000880 <main+0x208>
    __asm volatile
 8000868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800086c:	f383 8811 	msr	BASEPRI, r3
 8000870:	f3bf 8f6f 	isb	sy
 8000874:	f3bf 8f4f 	dsb	sy
 8000878:	607b      	str	r3, [r7, #4]
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <main+0x204>

  // start schedule
  vTaskStartScheduler();
 8000880:	f008 fe6c 	bl	800955c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <main+0x20c>
 8000888:	200000a4 	.word	0x200000a4
 800088c:	20000228 	.word	0x20000228
 8000890:	0800e178 	.word	0x0800e178
 8000894:	20000268 	.word	0x20000268
 8000898:	200012a0 	.word	0x200012a0
 800089c:	0800e17c 	.word	0x0800e17c
 80008a0:	0800e1a0 	.word	0x0800e1a0
 80008a4:	20000258 	.word	0x20000258
 80008a8:	08040000 	.word	0x08040000
 80008ac:	20000234 	.word	0x20000234
 80008b0:	0800e1c4 	.word	0x0800e1c4
 80008b4:	08007109 	.word	0x08007109
 80008b8:	2000023c 	.word	0x2000023c
 80008bc:	0800e1d0 	.word	0x0800e1d0
 80008c0:	080071c9 	.word	0x080071c9
 80008c4:	20000238 	.word	0x20000238
 80008c8:	0800e1e4 	.word	0x0800e1e4
 80008cc:	08007141 	.word	0x08007141
 80008d0:	20000248 	.word	0x20000248
 80008d4:	0800e1f0 	.word	0x0800e1f0
 80008d8:	0800718d 	.word	0x0800718d
 80008dc:	20000240 	.word	0x20000240
 80008e0:	0800e1fc 	.word	0x0800e1fc
 80008e4:	080072c9 	.word	0x080072c9
 80008e8:	20000244 	.word	0x20000244
 80008ec:	0800e20c 	.word	0x0800e20c
 80008f0:	08007eb1 	.word	0x08007eb1
 80008f4:	2000024c 	.word	0x2000024c
 80008f8:	0800e21c 	.word	0x0800e21c
 80008fc:	08007181 	.word	0x08007181
 8000900:	20000250 	.word	0x20000250

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	@ 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	2230      	movs	r2, #48	@ 0x30
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f00c fc68 	bl	800d1e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	4b29      	ldr	r3, [pc, #164]	@ (80009d4 <SystemClock_Config+0xd0>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	4a28      	ldr	r2, [pc, #160]	@ (80009d4 <SystemClock_Config+0xd0>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000936:	6413      	str	r3, [r2, #64]	@ 0x40
 8000938:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <SystemClock_Config+0xd0>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <SystemClock_Config+0xd4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000950:	4a21      	ldr	r2, [pc, #132]	@ (80009d8 <SystemClock_Config+0xd4>)
 8000952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <SystemClock_Config+0xd4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096c:	2310      	movs	r3, #16
 800096e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000974:	2300      	movs	r3, #0
 8000976:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000978:	2310      	movs	r3, #16
 800097a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800097c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000980:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000982:	2304      	movs	r3, #4
 8000984:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000986:	2307      	movs	r3, #7
 8000988:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	4618      	mov	r0, r3
 8000990:	f001 ffd2 	bl	8002938 <HAL_RCC_OscConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800099a:	f000 fa2d 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099e:	230f      	movs	r3, #15
 80009a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a2:	2302      	movs	r3, #2
 80009a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2102      	movs	r1, #2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fa34 	bl	8002e28 <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009c6:	f000 fa17 	bl	8000df8 <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	@ 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40007000 	.word	0x40007000

080009dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <MX_I2C1_Init+0x50>)
 80009e2:	4a13      	ldr	r2, [pc, #76]	@ (8000a30 <MX_I2C1_Init+0x54>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_I2C1_Init+0x50>)
 80009e8:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <MX_I2C1_Init+0x58>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_I2C1_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_I2C1_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_I2C1_Init+0x50>)
 80009fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <MX_I2C1_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_I2C1_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <MX_I2C1_Init+0x50>)
 8000a1a:	f001 faef 	bl	8001ffc <HAL_I2C_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a24:	f000 f9e8 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200000a4 	.word	0x200000a4
 8000a30:	40005400 	.word	0x40005400
 8000a34:	000186a0 	.word	0x000186a0

08000a38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_SPI2_Init+0x64>)
 8000a3e:	4a18      	ldr	r2, [pc, #96]	@ (8000aa0 <MX_SPI2_Init+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_SPI2_Init+0x64>)
 8000a44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_SPI2_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_SPI2_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_SPI2_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_SPI2_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_SPI2_Init+0x64>)
 8000a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_SPI2_Init+0x64>)
 8000a6c:	2210      	movs	r2, #16
 8000a6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <MX_SPI2_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_SPI2_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <MX_SPI2_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_SPI2_Init+0x64>)
 8000a84:	220a      	movs	r2, #10
 8000a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_SPI2_Init+0x64>)
 8000a8a:	f002 fc1f 	bl	80032cc <HAL_SPI_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a94:	f000 f9b0 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200000f8 	.word	0x200000f8
 8000aa0:	40003800 	.word	0x40003800

08000aa4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b096      	sub	sp, #88	@ 0x58
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aaa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
 8000ad2:	615a      	str	r2, [r3, #20]
 8000ad4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2220      	movs	r2, #32
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f00c fb83 	bl	800d1e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000ae4:	4a3e      	ldr	r2, [pc, #248]	@ (8000be0 <MX_TIM1_Init+0x13c>)
 8000ae6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000aea:	2253      	movs	r2, #83	@ 0x53
 8000aec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b3b      	ldr	r3, [pc, #236]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000af4:	4b39      	ldr	r3, [pc, #228]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000af6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000afa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afc:	4b37      	ldr	r3, [pc, #220]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b02:	4b36      	ldr	r3, [pc, #216]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b08:	4b34      	ldr	r3, [pc, #208]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b0e:	4833      	ldr	r0, [pc, #204]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000b10:	f003 f82e 	bl	8003b70 <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b1a:	f000 f96d 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b22:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b24:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b28:	4619      	mov	r1, r3
 8000b2a:	482c      	ldr	r0, [pc, #176]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000b2c:	f003 fb8e 	bl	800424c <HAL_TIM_ConfigClockSource>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b36:	f000 f95f 	bl	8000df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b3a:	4828      	ldr	r0, [pc, #160]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000b3c:	f003 f8ca 	bl	8003cd4 <HAL_TIM_PWM_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b46:	f000 f957 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b56:	4619      	mov	r1, r3
 8000b58:	4820      	ldr	r0, [pc, #128]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000b5a:	f003 ff3f 	bl	80049dc <HAL_TIMEx_MasterConfigSynchronization>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b64:	f000 f948 	bl	8000df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b68:	2360      	movs	r3, #96	@ 0x60
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4813      	ldr	r0, [pc, #76]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000b8e:	f003 fa9b 	bl	80040c8 <HAL_TIM_PWM_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b98:	f000 f92e 	bl	8000df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4807      	ldr	r0, [pc, #28]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000bc0:	f003 ff7a 	bl	8004ab8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000bca:	f000 f915 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bce:	4803      	ldr	r0, [pc, #12]	@ (8000bdc <MX_TIM1_Init+0x138>)
 8000bd0:	f000 fa12 	bl	8000ff8 <HAL_TIM_MspPostInit>

}
 8000bd4:	bf00      	nop
 8000bd6:	3758      	adds	r7, #88	@ 0x58
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000150 	.word	0x20000150
 8000be0:	40010000 	.word	0x40010000

08000be4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <MX_USART1_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c1c:	f003 ffb2 	bl	8004b84 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f000 f8e7 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000198 	.word	0x20000198
 8000c34:	40011000 	.word	0x40011000

08000c38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <MX_USART2_UART_Init+0x50>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c70:	f003 ff88 	bl	8004b84 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c7a:	f000 f8bd 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001e0 	.word	0x200001e0
 8000c88:	40004400 	.word	0x40004400

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8000da0 <MX_GPIO_Init+0x114>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a3d      	ldr	r2, [pc, #244]	@ (8000da0 <MX_GPIO_Init+0x114>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8000da0 <MX_GPIO_Init+0x114>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b37      	ldr	r3, [pc, #220]	@ (8000da0 <MX_GPIO_Init+0x114>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a36      	ldr	r2, [pc, #216]	@ (8000da0 <MX_GPIO_Init+0x114>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b34      	ldr	r3, [pc, #208]	@ (8000da0 <MX_GPIO_Init+0x114>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b30      	ldr	r3, [pc, #192]	@ (8000da0 <MX_GPIO_Init+0x114>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8000da0 <MX_GPIO_Init+0x114>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <MX_GPIO_Init+0x114>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b29      	ldr	r3, [pc, #164]	@ (8000da0 <MX_GPIO_Init+0x114>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a28      	ldr	r2, [pc, #160]	@ (8000da0 <MX_GPIO_Init+0x114>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b26      	ldr	r3, [pc, #152]	@ (8000da0 <MX_GPIO_Init+0x114>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2160      	movs	r1, #96	@ 0x60
 8000d16:	4823      	ldr	r0, [pc, #140]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000d18:	f001 f956 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000d22:	4821      	ldr	r0, [pc, #132]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000d24:	f001 f950 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d2e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	481b      	ldr	r0, [pc, #108]	@ (8000dac <MX_GPIO_Init+0x120>)
 8000d40:	f000 ffa6 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8000d44:	2360      	movs	r3, #96	@ 0x60
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4812      	ldr	r0, [pc, #72]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000d5c:	f000 ff98 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d60:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	480b      	ldr	r0, [pc, #44]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000d7a:	f000 ff89 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d7e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	@ (8000dac <MX_GPIO_Init+0x120>)
 8000d94:	f000 ff7c 	bl	8001c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	@ 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40020800 	.word	0x40020800

08000db0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	  FatFsCnt++;
 8000db8:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000dc4:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b09      	cmp	r3, #9
 8000dce:	d904      	bls.n	8000dda <HAL_TIM_PeriodElapsedCallback+0x2a>
	  {
	    FatFsCnt = 0;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8000dd6:	f7ff fc2b 	bl	8000630 <SDTimer_Handler>
	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a05      	ldr	r2, [pc, #20]	@ (8000df4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d101      	bne.n	8000de8 <HAL_TIM_PeriodElapsedCallback+0x38>
    HAL_IncTick();
 8000de4:	f000 fb46 	bl	8001474 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200012a1 	.word	0x200012a1
 8000df4:	40000800 	.word	0x40000800

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x8>

08000e04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <HAL_MspInit+0x4c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	4a0f      	ldr	r2, [pc, #60]	@ (8000e50 <HAL_MspInit+0x4c>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <HAL_MspInit+0x4c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <HAL_MspInit+0x4c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	4a08      	ldr	r2, [pc, #32]	@ (8000e50 <HAL_MspInit+0x4c>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_MspInit+0x4c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800

08000e54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a19      	ldr	r2, [pc, #100]	@ (8000ed8 <HAL_I2C_MspInit+0x84>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d12b      	bne.n	8000ece <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <HAL_I2C_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a17      	ldr	r2, [pc, #92]	@ (8000edc <HAL_I2C_MspInit+0x88>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_I2C_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e92:	23c0      	movs	r3, #192	@ 0xc0
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e96:	2312      	movs	r3, #18
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <HAL_I2C_MspInit+0x8c>)
 8000eae:	f000 feef 	bl	8001c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <HAL_I2C_MspInit+0x88>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	4a08      	ldr	r2, [pc, #32]	@ (8000edc <HAL_I2C_MspInit+0x88>)
 8000ebc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_I2C_MspInit+0x88>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	@ 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40005400 	.word	0x40005400
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a28      	ldr	r2, [pc, #160]	@ (8000fa4 <HAL_SPI_MspInit+0xc0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d14a      	bne.n	8000f9c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <HAL_SPI_MspInit+0xc4>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	4a26      	ldr	r2, [pc, #152]	@ (8000fa8 <HAL_SPI_MspInit+0xc4>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f16:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <HAL_SPI_MspInit+0xc4>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <HAL_SPI_MspInit+0xc4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa8 <HAL_SPI_MspInit+0xc4>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <HAL_SPI_MspInit+0xc4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <HAL_SPI_MspInit+0xc4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a18      	ldr	r2, [pc, #96]	@ (8000fa8 <HAL_SPI_MspInit+0xc4>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <HAL_SPI_MspInit+0xc4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	480d      	ldr	r0, [pc, #52]	@ (8000fac <HAL_SPI_MspInit+0xc8>)
 8000f76:	f000 fe8b 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4806      	ldr	r0, [pc, #24]	@ (8000fb0 <HAL_SPI_MspInit+0xcc>)
 8000f98:	f000 fe7a 	bl	8001c90 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	@ 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40003800 	.word	0x40003800
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020800 	.word	0x40020800
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x3c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10d      	bne.n	8000fe2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x40>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	4a09      	ldr	r2, [pc, #36]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x40>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x40>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <HAL_TIM_MspPostInit+0x68>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d11e      	bne.n	8001058 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <HAL_TIM_MspPostInit+0x6c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a10      	ldr	r2, [pc, #64]	@ (8001064 <HAL_TIM_MspPostInit+0x6c>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <HAL_TIM_MspPostInit+0x6c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001036:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800103a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001048:	2301      	movs	r3, #1
 800104a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <HAL_TIM_MspPostInit+0x70>)
 8001054:	f000 fe1c 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40010000 	.word	0x40010000
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	@ 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a32      	ldr	r2, [pc, #200]	@ (8001154 <HAL_UART_MspInit+0xe8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d12d      	bne.n	80010ea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	4b31      	ldr	r3, [pc, #196]	@ (8001158 <HAL_UART_MspInit+0xec>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	4a30      	ldr	r2, [pc, #192]	@ (8001158 <HAL_UART_MspInit+0xec>)
 8001098:	f043 0310 	orr.w	r3, r3, #16
 800109c:	6453      	str	r3, [r2, #68]	@ 0x44
 800109e:	4b2e      	ldr	r3, [pc, #184]	@ (8001158 <HAL_UART_MspInit+0xec>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <HAL_UART_MspInit+0xec>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a29      	ldr	r2, [pc, #164]	@ (8001158 <HAL_UART_MspInit+0xec>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <HAL_UART_MspInit+0xec>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d8:	2307      	movs	r3, #7
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	481e      	ldr	r0, [pc, #120]	@ (800115c <HAL_UART_MspInit+0xf0>)
 80010e4:	f000 fdd4 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010e8:	e030      	b.n	800114c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <HAL_UART_MspInit+0xf4>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d12b      	bne.n	800114c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <HAL_UART_MspInit+0xec>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fc:	4a16      	ldr	r2, [pc, #88]	@ (8001158 <HAL_UART_MspInit+0xec>)
 80010fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001102:	6413      	str	r3, [r2, #64]	@ 0x40
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <HAL_UART_MspInit+0xec>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <HAL_UART_MspInit+0xec>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001118:	4a0f      	ldr	r2, [pc, #60]	@ (8001158 <HAL_UART_MspInit+0xec>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001120:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <HAL_UART_MspInit+0xec>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800112c:	230c      	movs	r3, #12
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113c:	2307      	movs	r3, #7
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <HAL_UART_MspInit+0xf0>)
 8001148:	f000 fda2 	bl	8001c90 <HAL_GPIO_Init>
}
 800114c:	bf00      	nop
 800114e:	3730      	adds	r7, #48	@ 0x30
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40011000 	.word	0x40011000
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000
 8001160:	40004400 	.word	0x40004400

08001164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	@ 0x38
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	4b33      	ldr	r3, [pc, #204]	@ (8001248 <HAL_InitTick+0xe4>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	4a32      	ldr	r2, [pc, #200]	@ (8001248 <HAL_InitTick+0xe4>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6413      	str	r3, [r2, #64]	@ 0x40
 8001184:	4b30      	ldr	r3, [pc, #192]	@ (8001248 <HAL_InitTick+0xe4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001190:	f107 0210 	add.w	r2, r7, #16
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f002 f864 	bl	8003268 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d103      	bne.n	80011b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011aa:	f002 f835 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 80011ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80011b0:	e004      	b.n	80011bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011b2:	f002 f831 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 80011b6:	4603      	mov	r3, r0
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011be:	4a23      	ldr	r2, [pc, #140]	@ (800124c <HAL_InitTick+0xe8>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	0c9b      	lsrs	r3, r3, #18
 80011c6:	3b01      	subs	r3, #1
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <HAL_InitTick+0xec>)
 80011cc:	4a21      	ldr	r2, [pc, #132]	@ (8001254 <HAL_InitTick+0xf0>)
 80011ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <HAL_InitTick+0xec>)
 80011d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011d6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80011d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001250 <HAL_InitTick+0xec>)
 80011da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011dc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80011de:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <HAL_InitTick+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <HAL_InitTick+0xec>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_InitTick+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80011f0:	4817      	ldr	r0, [pc, #92]	@ (8001250 <HAL_InitTick+0xec>)
 80011f2:	f002 fcbd 	bl	8003b70 <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80011fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001200:	2b00      	cmp	r3, #0
 8001202:	d11b      	bne.n	800123c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001204:	4812      	ldr	r0, [pc, #72]	@ (8001250 <HAL_InitTick+0xec>)
 8001206:	f002 fd03 	bl	8003c10 <HAL_TIM_Base_Start_IT>
 800120a:	4603      	mov	r3, r0
 800120c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001210:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001214:	2b00      	cmp	r3, #0
 8001216:	d111      	bne.n	800123c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001218:	201e      	movs	r0, #30
 800121a:	f000 fa43 	bl	80016a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d808      	bhi.n	8001236 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	201e      	movs	r0, #30
 800122a:	f000 fa1f 	bl	800166c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800122e:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <HAL_InitTick+0xf4>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	e002      	b.n	800123c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800123c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001240:	4618      	mov	r0, r3
 8001242:	3738      	adds	r7, #56	@ 0x38
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	431bde83 	.word	0x431bde83
 8001250:	200012a4 	.word	0x200012a4
 8001254:	40000800 	.word	0x40000800
 8001258:	20000004 	.word	0x20000004

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <NMI_Handler+0x4>

08001264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <MemManage_Handler+0x4>

08001274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <UsageFault_Handler+0x4>

08001284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <TIM4_IRQHandler+0x10>)
 800129a:	f002 fe25 	bl	8003ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200012a4 	.word	0x200012a4

080012a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e00a      	b.n	80012d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ba:	f3af 8000 	nop.w
 80012be:	4601      	mov	r1, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf0      	blt.n	80012ba <_read+0x12>
  }

  return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800130a:	605a      	str	r2, [r3, #4]
  return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_isatty>:

int _isatty(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001354:	4a14      	ldr	r2, [pc, #80]	@ (80013a8 <_sbrk+0x5c>)
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <_sbrk+0x60>)
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <_sbrk+0x64>)
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <_sbrk+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800137c:	f00b ff70 	bl	800d260 <__errno>
 8001380:	4603      	mov	r3, r0
 8001382:	220c      	movs	r2, #12
 8001384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	e009      	b.n	80013a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <_sbrk+0x64>)
 800139c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20018000 	.word	0x20018000
 80013ac:	00000400 	.word	0x00000400
 80013b0:	200012ec 	.word	0x200012ec
 80013b4:	20014b28 	.word	0x20014b28

080013b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <SystemInit+0x20>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c2:	4a05      	ldr	r2, [pc, #20]	@ (80013d8 <SystemInit+0x20>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001414 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013e0:	f7ff ffea 	bl	80013b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e6:	490d      	ldr	r1, [pc, #52]	@ (800141c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800140a:	f00b ff2f 	bl	800d26c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140e:	f7ff f933 	bl	8000678 <main>
  bx  lr    
 8001412:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001414:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001420:	0800e3b8 	.word	0x0800e3b8
  ldr r2, =_sbss
 8001424:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001428:	20014b24 	.word	0x20014b24

0800142c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001434:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0d      	ldr	r2, [pc, #52]	@ (8001470 <HAL_Init+0x40>)
 800143a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800143e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001440:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <HAL_Init+0x40>)
 8001446:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800144a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <HAL_Init+0x40>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <HAL_Init+0x40>)
 8001452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001458:	2003      	movs	r0, #3
 800145a:	f000 f8fc 	bl	8001656 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145e:	200f      	movs	r0, #15
 8001460:	f7ff fe80 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001464:	f7ff fcce 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023c00 	.word	0x40023c00

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008
 8001498:	200012f0 	.word	0x200012f0

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	200012f0 	.word	0x200012f0

080014b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff ffee 	bl	800149c <HAL_GetTick>
 80014c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014cc:	d005      	beq.n	80014da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_Delay+0x44>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014da:	bf00      	nop
 80014dc:	f7ff ffde 	bl	800149c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8f7      	bhi.n	80014dc <HAL_Delay+0x28>
  {
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	@ (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4907      	ldr	r1, [pc, #28]	@ (8001598 <__NVIC_EnableIRQ+0x38>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	@ (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	@ 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	@ 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ff4c 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167e:	f7ff ff61 	bl	8001544 <__NVIC_GetPriorityGrouping>
 8001682:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	6978      	ldr	r0, [r7, #20]
 800168a:	f7ff ffb1 	bl	80015f0 <NVIC_EncodePriority>
 800168e:	4602      	mov	r2, r0
 8001690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff80 	bl	800159c <__NVIC_SetPriority>
}
 800169c:	bf00      	nop
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff54 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016d2:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <HAL_FLASH_Program+0xa0>)
 80016d4:	7e1b      	ldrb	r3, [r3, #24]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_FLASH_Program+0x1e>
 80016da:	2302      	movs	r3, #2
 80016dc:	e03b      	b.n	8001756 <HAL_FLASH_Program+0x96>
 80016de:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <HAL_FLASH_Program+0xa0>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016e4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80016e8:	f000 f870 	bl	80017cc <FLASH_WaitForLastOperation>
 80016ec:	4603      	mov	r3, r0
 80016ee:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d12b      	bne.n	800174e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d105      	bne.n	8001708 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80016fc:	783b      	ldrb	r3, [r7, #0]
 80016fe:	4619      	mov	r1, r3
 8001700:	68b8      	ldr	r0, [r7, #8]
 8001702:	f000 f91b 	bl	800193c <FLASH_Program_Byte>
 8001706:	e016      	b.n	8001736 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d105      	bne.n	800171a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800170e:	883b      	ldrh	r3, [r7, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	68b8      	ldr	r0, [r7, #8]
 8001714:	f000 f8ee 	bl	80018f4 <FLASH_Program_HalfWord>
 8001718:	e00d      	b.n	8001736 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d105      	bne.n	800172c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	4619      	mov	r1, r3
 8001724:	68b8      	ldr	r0, [r7, #8]
 8001726:	f000 f8c3 	bl	80018b0 <FLASH_Program_Word>
 800172a:	e004      	b.n	8001736 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800172c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001730:	68b8      	ldr	r0, [r7, #8]
 8001732:	f000 f88b 	bl	800184c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001736:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800173a:	f000 f847 	bl	80017cc <FLASH_WaitForLastOperation>
 800173e:	4603      	mov	r3, r0
 8001740:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <HAL_FLASH_Program+0xa4>)
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	4a07      	ldr	r2, [pc, #28]	@ (8001764 <HAL_FLASH_Program+0xa4>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800174e:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <HAL_FLASH_Program+0xa0>)
 8001750:	2200      	movs	r2, #0
 8001752:	761a      	strb	r2, [r3, #24]

  return status;
 8001754:	7dfb      	ldrb	r3, [r7, #23]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200012f4 	.word	0x200012f4
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001772:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_FLASH_Unlock+0x38>)
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	da0b      	bge.n	8001792 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <HAL_FLASH_Unlock+0x38>)
 800177c:	4a09      	ldr	r2, [pc, #36]	@ (80017a4 <HAL_FLASH_Unlock+0x3c>)
 800177e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001780:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <HAL_FLASH_Unlock+0x38>)
 8001782:	4a09      	ldr	r2, [pc, #36]	@ (80017a8 <HAL_FLASH_Unlock+0x40>)
 8001784:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_FLASH_Unlock+0x38>)
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	2b00      	cmp	r3, #0
 800178c:	da01      	bge.n	8001792 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001792:	79fb      	ldrb	r3, [r7, #7]
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40023c00 	.word	0x40023c00
 80017a4:	45670123 	.word	0x45670123
 80017a8:	cdef89ab 	.word	0xcdef89ab

080017ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <HAL_FLASH_Lock+0x1c>)
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	4a04      	ldr	r2, [pc, #16]	@ (80017c8 <HAL_FLASH_Lock+0x1c>)
 80017b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80017ba:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	40023c00 	.word	0x40023c00

080017cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <FLASH_WaitForLastOperation+0x78>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80017de:	f7ff fe5d 	bl	800149c <HAL_GetTick>
 80017e2:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80017e4:	e010      	b.n	8001808 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d00c      	beq.n	8001808 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d007      	beq.n	8001804 <FLASH_WaitForLastOperation+0x38>
 80017f4:	f7ff fe52 	bl	800149c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	d201      	bcs.n	8001808 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e019      	b.n	800183c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001808:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <FLASH_WaitForLastOperation+0x7c>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1e8      	bne.n	80017e6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <FLASH_WaitForLastOperation+0x7c>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001820:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <FLASH_WaitForLastOperation+0x7c>)
 8001822:	2201      	movs	r2, #1
 8001824:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001826:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <FLASH_WaitForLastOperation+0x7c>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001832:	f000 f8a5 	bl	8001980 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0

}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200012f4 	.word	0x200012f4
 8001848:	40023c00 	.word	0x40023c00

0800184c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <FLASH_Program_DoubleWord+0x60>)
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	4a13      	ldr	r2, [pc, #76]	@ (80018ac <FLASH_Program_DoubleWord+0x60>)
 800185e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001862:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <FLASH_Program_DoubleWord+0x60>)
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	4a10      	ldr	r2, [pc, #64]	@ (80018ac <FLASH_Program_DoubleWord+0x60>)
 800186a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800186e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001870:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <FLASH_Program_DoubleWord+0x60>)
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <FLASH_Program_DoubleWord+0x60>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	000a      	movs	r2, r1
 8001896:	2300      	movs	r3, #0
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	3104      	adds	r1, #4
 800189c:	4613      	mov	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <FLASH_Program_Word+0x40>)
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	4a0c      	ldr	r2, [pc, #48]	@ (80018f0 <FLASH_Program_Word+0x40>)
 80018c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <FLASH_Program_Word+0x40>)
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	4a09      	ldr	r2, [pc, #36]	@ (80018f0 <FLASH_Program_Word+0x40>)
 80018cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <FLASH_Program_Word+0x40>)
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	4a06      	ldr	r2, [pc, #24]	@ (80018f0 <FLASH_Program_Word+0x40>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	601a      	str	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40023c00 	.word	0x40023c00

080018f4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001900:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <FLASH_Program_HalfWord+0x44>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	4a0c      	ldr	r2, [pc, #48]	@ (8001938 <FLASH_Program_HalfWord+0x44>)
 8001906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800190a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800190c:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <FLASH_Program_HalfWord+0x44>)
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <FLASH_Program_HalfWord+0x44>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001916:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001918:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <FLASH_Program_HalfWord+0x44>)
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	4a06      	ldr	r2, [pc, #24]	@ (8001938 <FLASH_Program_HalfWord+0x44>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	801a      	strh	r2, [r3, #0]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00

0800193c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <FLASH_Program_Byte+0x40>)
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	4a0b      	ldr	r2, [pc, #44]	@ (800197c <FLASH_Program_Byte+0x40>)
 800194e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001952:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001954:	4b09      	ldr	r3, [pc, #36]	@ (800197c <FLASH_Program_Byte+0x40>)
 8001956:	4a09      	ldr	r2, [pc, #36]	@ (800197c <FLASH_Program_Byte+0x40>)
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800195c:	4b07      	ldr	r3, [pc, #28]	@ (800197c <FLASH_Program_Byte+0x40>)
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	4a06      	ldr	r2, [pc, #24]	@ (800197c <FLASH_Program_Byte+0x40>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	701a      	strb	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001984:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <FLASH_SetErrorCode+0xc4>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001990:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <FLASH_SetErrorCode+0xc8>)
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	4a2b      	ldr	r2, [pc, #172]	@ (8001a48 <FLASH_SetErrorCode+0xc8>)
 800199a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800199c:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <FLASH_SetErrorCode+0xc4>)
 800199e:	2210      	movs	r2, #16
 80019a0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80019a2:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <FLASH_SetErrorCode+0xc4>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f003 0320 	and.w	r3, r3, #32
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d008      	beq.n	80019c0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80019ae:	4b26      	ldr	r3, [pc, #152]	@ (8001a48 <FLASH_SetErrorCode+0xc8>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f043 0308 	orr.w	r3, r3, #8
 80019b6:	4a24      	ldr	r2, [pc, #144]	@ (8001a48 <FLASH_SetErrorCode+0xc8>)
 80019b8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80019ba:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <FLASH_SetErrorCode+0xc4>)
 80019bc:	2220      	movs	r2, #32
 80019be:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80019c0:	4b20      	ldr	r3, [pc, #128]	@ (8001a44 <FLASH_SetErrorCode+0xc4>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80019cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a48 <FLASH_SetErrorCode+0xc8>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a48 <FLASH_SetErrorCode+0xc8>)
 80019d6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80019d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <FLASH_SetErrorCode+0xc4>)
 80019da:	2240      	movs	r2, #64	@ 0x40
 80019dc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80019de:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <FLASH_SetErrorCode+0xc4>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80019ea:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <FLASH_SetErrorCode+0xc8>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	4a15      	ldr	r2, [pc, #84]	@ (8001a48 <FLASH_SetErrorCode+0xc8>)
 80019f4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80019f6:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <FLASH_SetErrorCode+0xc4>)
 80019f8:	2280      	movs	r2, #128	@ 0x80
 80019fa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <FLASH_SetErrorCode+0xc4>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d009      	beq.n	8001a1c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <FLASH_SetErrorCode+0xc8>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	4a0d      	ldr	r2, [pc, #52]	@ (8001a48 <FLASH_SetErrorCode+0xc8>)
 8001a12:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001a14:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <FLASH_SetErrorCode+0xc4>)
 8001a16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a1a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001a1c:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <FLASH_SetErrorCode+0xc4>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001a28:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <FLASH_SetErrorCode+0xc8>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	f043 0320 	orr.w	r3, r3, #32
 8001a30:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <FLASH_SetErrorCode+0xc8>)
 8001a32:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <FLASH_SetErrorCode+0xc4>)
 8001a36:	2202      	movs	r2, #2
 8001a38:	60da      	str	r2, [r3, #12]
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40023c00 	.word	0x40023c00
 8001a48:	200012f4 	.word	0x200012f4

08001a4c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a5e:	4b31      	ldr	r3, [pc, #196]	@ (8001b24 <HAL_FLASHEx_Erase+0xd8>)
 8001a60:	7e1b      	ldrb	r3, [r3, #24]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_FLASHEx_Erase+0x1e>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e058      	b.n	8001b1c <HAL_FLASHEx_Erase+0xd0>
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b24 <HAL_FLASHEx_Erase+0xd8>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a70:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a74:	f7ff feaa 	bl	80017cc <FLASH_WaitForLastOperation>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d148      	bne.n	8001b14 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d115      	bne.n	8001abe <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f000 f844 	bl	8001b2c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001aa4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001aa8:	f7ff fe90 	bl	80017cc <FLASH_WaitForLastOperation>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <HAL_FLASHEx_Erase+0xdc>)
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8001b28 <HAL_FLASHEx_Erase+0xdc>)
 8001ab6:	f023 0304 	bic.w	r3, r3, #4
 8001aba:	6113      	str	r3, [r2, #16]
 8001abc:	e028      	b.n	8001b10 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	e01c      	b.n	8001b00 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4619      	mov	r1, r3
 8001ace:	68b8      	ldr	r0, [r7, #8]
 8001ad0:	f000 f850 	bl	8001b74 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ad4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ad8:	f7ff fe78 	bl	80017cc <FLASH_WaitForLastOperation>
 8001adc:	4603      	mov	r3, r0
 8001ade:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001ae0:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <HAL_FLASHEx_Erase+0xdc>)
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	4a10      	ldr	r2, [pc, #64]	@ (8001b28 <HAL_FLASHEx_Erase+0xdc>)
 8001ae6:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001aea:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	601a      	str	r2, [r3, #0]
          break;
 8001af8:	e00a      	b.n	8001b10 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3301      	adds	r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4413      	add	r3, r2
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d3da      	bcc.n	8001ac6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001b10:	f000 f878 	bl	8001c04 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b14:	4b03      	ldr	r3, [pc, #12]	@ (8001b24 <HAL_FLASHEx_Erase+0xd8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	761a      	strb	r2, [r3, #24]

  return status;
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200012f4 	.word	0x200012f4
 8001b28:	40023c00 	.word	0x40023c00

08001b2c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b38:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <FLASH_MassErase+0x44>)
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b70 <FLASH_MassErase+0x44>)
 8001b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <FLASH_MassErase+0x44>)
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	4a09      	ldr	r2, [pc, #36]	@ (8001b70 <FLASH_MassErase+0x44>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001b50:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <FLASH_MassErase+0x44>)
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	4a05      	ldr	r2, [pc, #20]	@ (8001b70 <FLASH_MassErase+0x44>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b60:	6113      	str	r3, [r2, #16]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00

08001b74 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d102      	bne.n	8001b90 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	e010      	b.n	8001bb2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d103      	bne.n	8001b9e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001b96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	e009      	b.n	8001bb2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d103      	bne.n	8001bac <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001ba4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	e002      	b.n	8001bb2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001bac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bb0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bb2:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <FLASH_Erase_Sector+0x8c>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <FLASH_Erase_Sector+0x8c>)
 8001bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <FLASH_Erase_Sector+0x8c>)
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	490f      	ldr	r1, [pc, #60]	@ (8001c00 <FLASH_Erase_Sector+0x8c>)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001bca:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <FLASH_Erase_Sector+0x8c>)
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	4a0c      	ldr	r2, [pc, #48]	@ (8001c00 <FLASH_Erase_Sector+0x8c>)
 8001bd0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001bd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <FLASH_Erase_Sector+0x8c>)
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4313      	orrs	r3, r2
 8001be0:	4a07      	ldr	r2, [pc, #28]	@ (8001c00 <FLASH_Erase_Sector+0x8c>)
 8001be2:	f043 0302 	orr.w	r3, r3, #2
 8001be6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <FLASH_Erase_Sector+0x8c>)
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <FLASH_Erase_Sector+0x8c>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf2:	6113      	str	r3, [r2, #16]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001c08:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d017      	beq.n	8001c44 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c14:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1c      	ldr	r2, [pc, #112]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c1a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001c1e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001c20:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a19      	ldr	r2, [pc, #100]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c26:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a16      	ldr	r2, [pc, #88]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001c36:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c38:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a13      	ldr	r2, [pc, #76]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c42:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d017      	beq.n	8001c80 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001c50:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0d      	ldr	r2, [pc, #52]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c5a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c72:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c74:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <FLASH_FlushCaches+0x88>)
 8001c7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c7e:	6013      	str	r3, [r2, #0]
  }
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40023c00 	.word	0x40023c00

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	@ 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	e159      	b.n	8001f60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cac:	2201      	movs	r2, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	f040 8148 	bne.w	8001f5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d005      	beq.n	8001ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d130      	bne.n	8001d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	2203      	movs	r2, #3
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 0201 	and.w	r2, r3, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d017      	beq.n	8001d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d123      	bne.n	8001dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	220f      	movs	r2, #15
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	69b9      	ldr	r1, [r7, #24]
 8001dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0203 	and.w	r2, r3, #3
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80a2 	beq.w	8001f5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b57      	ldr	r3, [pc, #348]	@ (8001f78 <HAL_GPIO_Init+0x2e8>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	4a56      	ldr	r2, [pc, #344]	@ (8001f78 <HAL_GPIO_Init+0x2e8>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e26:	4b54      	ldr	r3, [pc, #336]	@ (8001f78 <HAL_GPIO_Init+0x2e8>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e32:	4a52      	ldr	r2, [pc, #328]	@ (8001f7c <HAL_GPIO_Init+0x2ec>)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	220f      	movs	r2, #15
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a49      	ldr	r2, [pc, #292]	@ (8001f80 <HAL_GPIO_Init+0x2f0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d019      	beq.n	8001e92 <HAL_GPIO_Init+0x202>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a48      	ldr	r2, [pc, #288]	@ (8001f84 <HAL_GPIO_Init+0x2f4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0x1fe>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a47      	ldr	r2, [pc, #284]	@ (8001f88 <HAL_GPIO_Init+0x2f8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00d      	beq.n	8001e8a <HAL_GPIO_Init+0x1fa>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a46      	ldr	r2, [pc, #280]	@ (8001f8c <HAL_GPIO_Init+0x2fc>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x1f6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a45      	ldr	r2, [pc, #276]	@ (8001f90 <HAL_GPIO_Init+0x300>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_GPIO_Init+0x1f2>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e008      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e82:	2307      	movs	r3, #7
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e86:	2303      	movs	r3, #3
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e92:	2300      	movs	r3, #0
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f002 0203 	and.w	r2, r2, #3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea4:	4935      	ldr	r1, [pc, #212]	@ (8001f7c <HAL_GPIO_Init+0x2ec>)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb2:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001edc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f00:	4a24      	ldr	r2, [pc, #144]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f06:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f30:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f54:	4a0f      	ldr	r2, [pc, #60]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f67f aea2 	bls.w	8001cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3724      	adds	r7, #36	@ 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40013800 	.word	0x40013800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40013c00 	.word	0x40013c00

08001f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	887b      	ldrh	r3, [r7, #2]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	e001      	b.n	8001fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd8:	787b      	ldrb	r3, [r7, #1]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe4:	e003      	b.n	8001fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fe6:	887b      	ldrh	r3, [r7, #2]
 8001fe8:	041a      	lsls	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	619a      	str	r2, [r3, #24]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e12b      	b.n	8002266 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7fe ff16 	bl	8000e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2224      	movs	r2, #36	@ 0x24
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800204e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800205e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002060:	f001 f8da 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8002064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a81      	ldr	r2, [pc, #516]	@ (8002270 <HAL_I2C_Init+0x274>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d807      	bhi.n	8002080 <HAL_I2C_Init+0x84>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a80      	ldr	r2, [pc, #512]	@ (8002274 <HAL_I2C_Init+0x278>)
 8002074:	4293      	cmp	r3, r2
 8002076:	bf94      	ite	ls
 8002078:	2301      	movls	r3, #1
 800207a:	2300      	movhi	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e006      	b.n	800208e <HAL_I2C_Init+0x92>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a7d      	ldr	r2, [pc, #500]	@ (8002278 <HAL_I2C_Init+0x27c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	bf94      	ite	ls
 8002088:	2301      	movls	r3, #1
 800208a:	2300      	movhi	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0e7      	b.n	8002266 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4a78      	ldr	r2, [pc, #480]	@ (800227c <HAL_I2C_Init+0x280>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0c9b      	lsrs	r3, r3, #18
 80020a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002270 <HAL_I2C_Init+0x274>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d802      	bhi.n	80020d0 <HAL_I2C_Init+0xd4>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3301      	adds	r3, #1
 80020ce:	e009      	b.n	80020e4 <HAL_I2C_Init+0xe8>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	4a69      	ldr	r2, [pc, #420]	@ (8002280 <HAL_I2C_Init+0x284>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	099b      	lsrs	r3, r3, #6
 80020e2:	3301      	adds	r3, #1
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	495c      	ldr	r1, [pc, #368]	@ (8002270 <HAL_I2C_Init+0x274>)
 8002100:	428b      	cmp	r3, r1
 8002102:	d819      	bhi.n	8002138 <HAL_I2C_Init+0x13c>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1e59      	subs	r1, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002112:	1c59      	adds	r1, r3, #1
 8002114:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002118:	400b      	ands	r3, r1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_I2C_Init+0x138>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1e59      	subs	r1, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fbb1 f3f3 	udiv	r3, r1, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002132:	e051      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002134:	2304      	movs	r3, #4
 8002136:	e04f      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d111      	bne.n	8002164 <HAL_I2C_Init+0x168>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1e58      	subs	r0, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	440b      	add	r3, r1
 800214e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002152:	3301      	adds	r3, #1
 8002154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	e012      	b.n	800218a <HAL_I2C_Init+0x18e>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1e58      	subs	r0, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	0099      	lsls	r1, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	fbb0 f3f3 	udiv	r3, r0, r3
 800217a:	3301      	adds	r3, #1
 800217c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_I2C_Init+0x196>
 800218e:	2301      	movs	r3, #1
 8002190:	e022      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10e      	bne.n	80021b8 <HAL_I2C_Init+0x1bc>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1e58      	subs	r0, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	440b      	add	r3, r1
 80021a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b6:	e00f      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1e58      	subs	r0, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	0099      	lsls	r1, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	6809      	ldr	r1, [r1, #0]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002206:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6911      	ldr	r1, [r2, #16]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68d2      	ldr	r2, [r2, #12]
 8002212:	4311      	orrs	r1, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	430b      	orrs	r3, r1
 800221a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	000186a0 	.word	0x000186a0
 8002274:	001e847f 	.word	0x001e847f
 8002278:	003d08ff 	.word	0x003d08ff
 800227c:	431bde83 	.word	0x431bde83
 8002280:	10624dd3 	.word	0x10624dd3

08002284 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	461a      	mov	r2, r3
 8002290:	460b      	mov	r3, r1
 8002292:	817b      	strh	r3, [r7, #10]
 8002294:	4613      	mov	r3, r2
 8002296:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff f900 	bl	800149c <HAL_GetTick>
 800229c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	f040 80e0 	bne.w	800246c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2319      	movs	r3, #25
 80022b2:	2201      	movs	r2, #1
 80022b4:	4970      	ldr	r1, [pc, #448]	@ (8002478 <HAL_I2C_Master_Transmit+0x1f4>)
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f964 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022c2:	2302      	movs	r3, #2
 80022c4:	e0d3      	b.n	800246e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_I2C_Master_Transmit+0x50>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e0cc      	b.n	800246e <HAL_I2C_Master_Transmit+0x1ea>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d007      	beq.n	80022fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002308:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2221      	movs	r2, #33	@ 0x21
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2210      	movs	r2, #16
 8002316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	893a      	ldrh	r2, [r7, #8]
 800232a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4a50      	ldr	r2, [pc, #320]	@ (800247c <HAL_I2C_Master_Transmit+0x1f8>)
 800233a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800233c:	8979      	ldrh	r1, [r7, #10]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f89c 	bl	8002480 <I2C_MasterRequestWrite>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e08d      	b.n	800246e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002368:	e066      	b.n	8002438 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	6a39      	ldr	r1, [r7, #32]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fa22 	bl	80027b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00d      	beq.n	8002396 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	2b04      	cmp	r3, #4
 8002380:	d107      	bne.n	8002392 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002390:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e06b      	b.n	800246e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d11b      	bne.n	800240c <HAL_I2C_Master_Transmit+0x188>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d017      	beq.n	800240c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	6a39      	ldr	r1, [r7, #32]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fa19 	bl	8002848 <I2C_WaitOnBTFFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00d      	beq.n	8002438 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	2b04      	cmp	r3, #4
 8002422:	d107      	bne.n	8002434 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002432:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e01a      	b.n	800246e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243c:	2b00      	cmp	r3, #0
 800243e:	d194      	bne.n	800236a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800244e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	00100002 	.word	0x00100002
 800247c:	ffff0000 	.word	0xffff0000

08002480 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	460b      	mov	r3, r1
 800248e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d006      	beq.n	80024aa <I2C_MasterRequestWrite+0x2a>
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d003      	beq.n	80024aa <I2C_MasterRequestWrite+0x2a>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024a8:	d108      	bne.n	80024bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e00b      	b.n	80024d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	2b12      	cmp	r3, #18
 80024c2:	d107      	bne.n	80024d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f84f 	bl	8002584 <I2C_WaitOnFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00d      	beq.n	8002508 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024fa:	d103      	bne.n	8002504 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002502:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e035      	b.n	8002574 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002510:	d108      	bne.n	8002524 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002512:	897b      	ldrh	r3, [r7, #10]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002520:	611a      	str	r2, [r3, #16]
 8002522:	e01b      	b.n	800255c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002524:	897b      	ldrh	r3, [r7, #10]
 8002526:	11db      	asrs	r3, r3, #7
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f003 0306 	and.w	r3, r3, #6
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f063 030f 	orn	r3, r3, #15
 8002534:	b2da      	uxtb	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	490e      	ldr	r1, [pc, #56]	@ (800257c <I2C_MasterRequestWrite+0xfc>)
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f898 	bl	8002678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e010      	b.n	8002574 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002552:	897b      	ldrh	r3, [r7, #10]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4907      	ldr	r1, [pc, #28]	@ (8002580 <I2C_MasterRequestWrite+0x100>)
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f888 	bl	8002678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	00010008 	.word	0x00010008
 8002580:	00010002 	.word	0x00010002

08002584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002594:	e048      	b.n	8002628 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d044      	beq.n	8002628 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259e:	f7fe ff7d 	bl	800149c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d139      	bne.n	8002628 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	0c1b      	lsrs	r3, r3, #16
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d10d      	bne.n	80025da <I2C_WaitOnFlagUntilTimeout+0x56>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	43da      	mvns	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	4013      	ands	r3, r2
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	e00c      	b.n	80025f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	43da      	mvns	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4013      	ands	r3, r2
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d116      	bne.n	8002628 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e023      	b.n	8002670 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	0c1b      	lsrs	r3, r3, #16
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d10d      	bne.n	800264e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	43da      	mvns	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	4013      	ands	r3, r2
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	e00c      	b.n	8002668 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	43da      	mvns	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4013      	ands	r3, r2
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	429a      	cmp	r2, r3
 800266c:	d093      	beq.n	8002596 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002686:	e071      	b.n	800276c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002696:	d123      	bne.n	80026e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	f043 0204 	orr.w	r2, r3, #4
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e067      	b.n	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e6:	d041      	beq.n	800276c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e8:	f7fe fed8 	bl	800149c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d302      	bcc.n	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d136      	bne.n	800276c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	0c1b      	lsrs	r3, r3, #16
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d10c      	bne.n	8002722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	43da      	mvns	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4013      	ands	r3, r2
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	bf14      	ite	ne
 800271a:	2301      	movne	r3, #1
 800271c:	2300      	moveq	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	e00b      	b.n	800273a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	43da      	mvns	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	4013      	ands	r3, r2
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d016      	beq.n	800276c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e021      	b.n	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	0c1b      	lsrs	r3, r3, #16
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d10c      	bne.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	43da      	mvns	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4013      	ands	r3, r2
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf14      	ite	ne
 8002788:	2301      	movne	r3, #1
 800278a:	2300      	moveq	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	e00b      	b.n	80027a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4013      	ands	r3, r2
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f47f af6d 	bne.w	8002688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027c4:	e034      	b.n	8002830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f886 	bl	80028d8 <I2C_IsAcknowledgeFailed>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e034      	b.n	8002840 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d028      	beq.n	8002830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027de:	f7fe fe5d 	bl	800149c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d302      	bcc.n	80027f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d11d      	bne.n	8002830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fe:	2b80      	cmp	r3, #128	@ 0x80
 8002800:	d016      	beq.n	8002830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e007      	b.n	8002840 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800283a:	2b80      	cmp	r3, #128	@ 0x80
 800283c:	d1c3      	bne.n	80027c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002854:	e034      	b.n	80028c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f83e 	bl	80028d8 <I2C_IsAcknowledgeFailed>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e034      	b.n	80028d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d028      	beq.n	80028c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286e:	f7fe fe15 	bl	800149c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	429a      	cmp	r2, r3
 800287c:	d302      	bcc.n	8002884 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d11d      	bne.n	80028c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b04      	cmp	r3, #4
 8002890:	d016      	beq.n	80028c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	f043 0220 	orr.w	r2, r3, #32
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e007      	b.n	80028d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d1c3      	bne.n	8002856 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ee:	d11b      	bne.n	8002928 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	f043 0204 	orr.w	r2, r3, #4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e267      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d075      	beq.n	8002a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002956:	4b88      	ldr	r3, [pc, #544]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b04      	cmp	r3, #4
 8002960:	d00c      	beq.n	800297c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002962:	4b85      	ldr	r3, [pc, #532]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800296a:	2b08      	cmp	r3, #8
 800296c:	d112      	bne.n	8002994 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296e:	4b82      	ldr	r3, [pc, #520]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002976:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800297a:	d10b      	bne.n	8002994 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d05b      	beq.n	8002a40 <HAL_RCC_OscConfig+0x108>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d157      	bne.n	8002a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e242      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800299c:	d106      	bne.n	80029ac <HAL_RCC_OscConfig+0x74>
 800299e:	4b76      	ldr	r3, [pc, #472]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a75      	ldr	r2, [pc, #468]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e01d      	b.n	80029e8 <HAL_RCC_OscConfig+0xb0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x98>
 80029b6:	4b70      	ldr	r3, [pc, #448]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6f      	ldr	r2, [pc, #444]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a6c      	ldr	r2, [pc, #432]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0xb0>
 80029d0:	4b69      	ldr	r3, [pc, #420]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a68      	ldr	r2, [pc, #416]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b66      	ldr	r3, [pc, #408]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a65      	ldr	r2, [pc, #404]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 80029e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d013      	beq.n	8002a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7fe fd54 	bl	800149c <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f8:	f7fe fd50 	bl	800149c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	@ 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e207      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0xc0>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe fd40 	bl	800149c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fe fd3c 	bl	800149c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	@ 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1f3      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a32:	4b51      	ldr	r3, [pc, #324]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0xe8>
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d063      	beq.n	8002b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a5a:	4b47      	ldr	r3, [pc, #284]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d11c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a66:	4b44      	ldr	r3, [pc, #272]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d116      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a72:	4b41      	ldr	r3, [pc, #260]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_RCC_OscConfig+0x152>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e1c7      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4937      	ldr	r1, [pc, #220]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9e:	e03a      	b.n	8002b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa8:	4b34      	ldr	r3, [pc, #208]	@ (8002b7c <HAL_RCC_OscConfig+0x244>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7fe fcf5 	bl	800149c <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab6:	f7fe fcf1 	bl	800149c <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e1a8      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad4:	4b28      	ldr	r3, [pc, #160]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4925      	ldr	r1, [pc, #148]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]
 8002ae8:	e015      	b.n	8002b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aea:	4b24      	ldr	r3, [pc, #144]	@ (8002b7c <HAL_RCC_OscConfig+0x244>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fcd4 	bl	800149c <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af8:	f7fe fcd0 	bl	800149c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e187      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d036      	beq.n	8002b90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2a:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <HAL_RCC_OscConfig+0x248>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe fcb4 	bl	800149c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b38:	f7fe fcb0 	bl	800149c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e167      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b78 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x200>
 8002b56:	e01b      	b.n	8002b90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <HAL_RCC_OscConfig+0x248>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5e:	f7fe fc9d 	bl	800149c <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b64:	e00e      	b.n	8002b84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b66:	f7fe fc99 	bl	800149c <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d907      	bls.n	8002b84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e150      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	42470000 	.word	0x42470000
 8002b80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b84:	4b88      	ldr	r3, [pc, #544]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ea      	bne.n	8002b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8097 	beq.w	8002ccc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba2:	4b81      	ldr	r3, [pc, #516]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	4b7d      	ldr	r3, [pc, #500]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	4a7c      	ldr	r2, [pc, #496]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bbe:	4b7a      	ldr	r3, [pc, #488]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	4b77      	ldr	r3, [pc, #476]	@ (8002dac <HAL_RCC_OscConfig+0x474>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d118      	bne.n	8002c0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bda:	4b74      	ldr	r3, [pc, #464]	@ (8002dac <HAL_RCC_OscConfig+0x474>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a73      	ldr	r2, [pc, #460]	@ (8002dac <HAL_RCC_OscConfig+0x474>)
 8002be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be6:	f7fe fc59 	bl	800149c <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bee:	f7fe fc55 	bl	800149c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e10c      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	4b6a      	ldr	r3, [pc, #424]	@ (8002dac <HAL_RCC_OscConfig+0x474>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2ea>
 8002c14:	4b64      	ldr	r3, [pc, #400]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c18:	4a63      	ldr	r2, [pc, #396]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c20:	e01c      	b.n	8002c5c <HAL_RCC_OscConfig+0x324>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x30c>
 8002c2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2e:	4a5e      	ldr	r2, [pc, #376]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c36:	4b5c      	ldr	r3, [pc, #368]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0x324>
 8002c44:	4b58      	ldr	r3, [pc, #352]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c48:	4a57      	ldr	r2, [pc, #348]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c50:	4b55      	ldr	r3, [pc, #340]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c54:	4a54      	ldr	r2, [pc, #336]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f023 0304 	bic.w	r3, r3, #4
 8002c5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d015      	beq.n	8002c90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe fc1a 	bl	800149c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fc16 	bl	800149c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e0cb      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c82:	4b49      	ldr	r3, [pc, #292]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0ee      	beq.n	8002c6c <HAL_RCC_OscConfig+0x334>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c90:	f7fe fc04 	bl	800149c <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe fc00 	bl	800149c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e0b5      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cae:	4b3e      	ldr	r3, [pc, #248]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1ee      	bne.n	8002c98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc0:	4b39      	ldr	r3, [pc, #228]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	4a38      	ldr	r2, [pc, #224]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80a1 	beq.w	8002e18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd6:	4b34      	ldr	r3, [pc, #208]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d05c      	beq.n	8002d9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d141      	bne.n	8002d6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cea:	4b31      	ldr	r3, [pc, #196]	@ (8002db0 <HAL_RCC_OscConfig+0x478>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fbd4 	bl	800149c <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe fbd0 	bl	800149c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e087      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	4b27      	ldr	r3, [pc, #156]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	019b      	lsls	r3, r3, #6
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	491b      	ldr	r1, [pc, #108]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d40:	4b1b      	ldr	r3, [pc, #108]	@ (8002db0 <HAL_RCC_OscConfig+0x478>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fe fba9 	bl	800149c <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe fba5 	bl	800149c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e05c      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d60:	4b11      	ldr	r3, [pc, #68]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x416>
 8002d6c:	e054      	b.n	8002e18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	4b10      	ldr	r3, [pc, #64]	@ (8002db0 <HAL_RCC_OscConfig+0x478>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe fb92 	bl	800149c <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe fb8e 	bl	800149c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e045      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	4b06      	ldr	r3, [pc, #24]	@ (8002da8 <HAL_RCC_OscConfig+0x470>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x444>
 8002d9a:	e03d      	b.n	8002e18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e038      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40007000 	.word	0x40007000
 8002db0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <HAL_RCC_OscConfig+0x4ec>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d028      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d121      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d11a      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002de4:	4013      	ands	r3, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d111      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800

08002e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0cc      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b68      	ldr	r3, [pc, #416]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d90c      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b65      	ldr	r3, [pc, #404]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b63      	ldr	r3, [pc, #396]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0b8      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e7c:	4b59      	ldr	r3, [pc, #356]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a58      	ldr	r2, [pc, #352]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e94:	4b53      	ldr	r3, [pc, #332]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4a52      	ldr	r2, [pc, #328]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4b50      	ldr	r3, [pc, #320]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	494d      	ldr	r1, [pc, #308]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d044      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b47      	ldr	r3, [pc, #284]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d119      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e07f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e06f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e067      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f06:	4b37      	ldr	r3, [pc, #220]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f023 0203 	bic.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4934      	ldr	r1, [pc, #208]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f18:	f7fe fac0 	bl	800149c <HAL_GetTick>
 8002f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f20:	f7fe fabc 	bl	800149c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e04f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 020c 	and.w	r2, r3, #12
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d1eb      	bne.n	8002f20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f48:	4b25      	ldr	r3, [pc, #148]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d20c      	bcs.n	8002f70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b22      	ldr	r3, [pc, #136]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e032      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f7c:	4b19      	ldr	r3, [pc, #100]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4916      	ldr	r1, [pc, #88]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f9a:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	490e      	ldr	r1, [pc, #56]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fae:	f000 f821 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	490a      	ldr	r1, [pc, #40]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	5ccb      	ldrb	r3, [r1, r3]
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	4a09      	ldr	r2, [pc, #36]	@ (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fca:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe f8c8 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023c00 	.word	0x40023c00
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	0800e33c 	.word	0x0800e33c
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000004 	.word	0x20000004

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff8:	b094      	sub	sp, #80	@ 0x50
 8002ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800300c:	4b79      	ldr	r3, [pc, #484]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b08      	cmp	r3, #8
 8003016:	d00d      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x40>
 8003018:	2b08      	cmp	r3, #8
 800301a:	f200 80e1 	bhi.w	80031e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x34>
 8003022:	2b04      	cmp	r3, #4
 8003024:	d003      	beq.n	800302e <HAL_RCC_GetSysClockFreq+0x3a>
 8003026:	e0db      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003028:	4b73      	ldr	r3, [pc, #460]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800302a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800302c:	e0db      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302e:	4b73      	ldr	r3, [pc, #460]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003030:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003032:	e0d8      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003034:	4b6f      	ldr	r3, [pc, #444]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800303c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800303e:	4b6d      	ldr	r3, [pc, #436]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d063      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304a:	4b6a      	ldr	r3, [pc, #424]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	099b      	lsrs	r3, r3, #6
 8003050:	2200      	movs	r2, #0
 8003052:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003054:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305c:	633b      	str	r3, [r7, #48]	@ 0x30
 800305e:	2300      	movs	r3, #0
 8003060:	637b      	str	r3, [r7, #52]	@ 0x34
 8003062:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003066:	4622      	mov	r2, r4
 8003068:	462b      	mov	r3, r5
 800306a:	f04f 0000 	mov.w	r0, #0
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	0159      	lsls	r1, r3, #5
 8003074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003078:	0150      	lsls	r0, r2, #5
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4621      	mov	r1, r4
 8003080:	1a51      	subs	r1, r2, r1
 8003082:	6139      	str	r1, [r7, #16]
 8003084:	4629      	mov	r1, r5
 8003086:	eb63 0301 	sbc.w	r3, r3, r1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003098:	4659      	mov	r1, fp
 800309a:	018b      	lsls	r3, r1, #6
 800309c:	4651      	mov	r1, sl
 800309e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030a2:	4651      	mov	r1, sl
 80030a4:	018a      	lsls	r2, r1, #6
 80030a6:	4651      	mov	r1, sl
 80030a8:	ebb2 0801 	subs.w	r8, r2, r1
 80030ac:	4659      	mov	r1, fp
 80030ae:	eb63 0901 	sbc.w	r9, r3, r1
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030c6:	4690      	mov	r8, r2
 80030c8:	4699      	mov	r9, r3
 80030ca:	4623      	mov	r3, r4
 80030cc:	eb18 0303 	adds.w	r3, r8, r3
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	462b      	mov	r3, r5
 80030d4:	eb49 0303 	adc.w	r3, r9, r3
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030e6:	4629      	mov	r1, r5
 80030e8:	024b      	lsls	r3, r1, #9
 80030ea:	4621      	mov	r1, r4
 80030ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030f0:	4621      	mov	r1, r4
 80030f2:	024a      	lsls	r2, r1, #9
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030fa:	2200      	movs	r2, #0
 80030fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003100:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003104:	f7fd f91c 	bl	8000340 <__aeabi_uldivmod>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4613      	mov	r3, r2
 800310e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003110:	e058      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003112:	4b38      	ldr	r3, [pc, #224]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	2200      	movs	r2, #0
 800311a:	4618      	mov	r0, r3
 800311c:	4611      	mov	r1, r2
 800311e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
 8003128:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800312c:	4642      	mov	r2, r8
 800312e:	464b      	mov	r3, r9
 8003130:	f04f 0000 	mov.w	r0, #0
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	0159      	lsls	r1, r3, #5
 800313a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800313e:	0150      	lsls	r0, r2, #5
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4641      	mov	r1, r8
 8003146:	ebb2 0a01 	subs.w	sl, r2, r1
 800314a:	4649      	mov	r1, r9
 800314c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800315c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003160:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003164:	ebb2 040a 	subs.w	r4, r2, sl
 8003168:	eb63 050b 	sbc.w	r5, r3, fp
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	00eb      	lsls	r3, r5, #3
 8003176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800317a:	00e2      	lsls	r2, r4, #3
 800317c:	4614      	mov	r4, r2
 800317e:	461d      	mov	r5, r3
 8003180:	4643      	mov	r3, r8
 8003182:	18e3      	adds	r3, r4, r3
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	464b      	mov	r3, r9
 8003188:	eb45 0303 	adc.w	r3, r5, r3
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800319a:	4629      	mov	r1, r5
 800319c:	028b      	lsls	r3, r1, #10
 800319e:	4621      	mov	r1, r4
 80031a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031a4:	4621      	mov	r1, r4
 80031a6:	028a      	lsls	r2, r1, #10
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ae:	2200      	movs	r2, #0
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	61fa      	str	r2, [r7, #28]
 80031b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b8:	f7fd f8c2 	bl	8000340 <__aeabi_uldivmod>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4613      	mov	r3, r2
 80031c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	3301      	adds	r3, #1
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80031d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031de:	e002      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031e0:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3750      	adds	r7, #80	@ 0x50
 80031ec:	46bd      	mov	sp, r7
 80031ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	00f42400 	.word	0x00f42400
 80031fc:	007a1200 	.word	0x007a1200

08003200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003204:	4b03      	ldr	r3, [pc, #12]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x14>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000000 	.word	0x20000000

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800321c:	f7ff fff0 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	0a9b      	lsrs	r3, r3, #10
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4903      	ldr	r1, [pc, #12]	@ (800323c <HAL_RCC_GetPCLK1Freq+0x24>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40023800 	.word	0x40023800
 800323c:	0800e34c 	.word	0x0800e34c

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff ffdc 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0b5b      	lsrs	r3, r3, #13
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	@ (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40023800 	.word	0x40023800
 8003264:	0800e34c 	.word	0x0800e34c

08003268 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	220f      	movs	r2, #15
 8003276:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003278:	4b12      	ldr	r3, [pc, #72]	@ (80032c4 <HAL_RCC_GetClockConfig+0x5c>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0203 	and.w	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003284:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003290:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800329c:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <HAL_RCC_GetClockConfig+0x5c>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032aa:	4b07      	ldr	r3, [pc, #28]	@ (80032c8 <HAL_RCC_GetClockConfig+0x60>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0207 	and.w	r2, r3, #7
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	601a      	str	r2, [r3, #0]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40023c00 	.word	0x40023c00

080032cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e07b      	b.n	80033d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d108      	bne.n	80032f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032ee:	d009      	beq.n	8003304 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	61da      	str	r2, [r3, #28]
 80032f6:	e005      	b.n	8003304 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd fde0 	bl	8000ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800333a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003388:	ea42 0103 	orr.w	r1, r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	f003 0104 	and.w	r1, r3, #4
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	f003 0210 	and.w	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b088      	sub	sp, #32
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033ee:	f7fe f855 	bl	800149c <HAL_GetTick>
 80033f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d001      	beq.n	8003408 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
 8003406:	e12a      	b.n	800365e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_SPI_Transmit+0x36>
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e122      	b.n	800365e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_SPI_Transmit+0x48>
 8003422:	2302      	movs	r3, #2
 8003424:	e11b      	b.n	800365e <HAL_SPI_Transmit+0x280>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2203      	movs	r2, #3
 8003432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	88fa      	ldrh	r2, [r7, #6]
 8003446:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	88fa      	ldrh	r2, [r7, #6]
 800344c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003474:	d10f      	bne.n	8003496 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003484:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003494:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a0:	2b40      	cmp	r3, #64	@ 0x40
 80034a2:	d007      	beq.n	80034b4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034bc:	d152      	bne.n	8003564 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_SPI_Transmit+0xee>
 80034c6:	8b7b      	ldrh	r3, [r7, #26]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d145      	bne.n	8003558 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d0:	881a      	ldrh	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034dc:	1c9a      	adds	r2, r3, #2
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034f0:	e032      	b.n	8003558 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d112      	bne.n	8003526 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003504:	881a      	ldrh	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003510:	1c9a      	adds	r2, r3, #2
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003524:	e018      	b.n	8003558 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003526:	f7fd ffb9 	bl	800149c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d803      	bhi.n	800353e <HAL_SPI_Transmit+0x160>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d102      	bne.n	8003544 <HAL_SPI_Transmit+0x166>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d109      	bne.n	8003558 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e082      	b.n	800365e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1c7      	bne.n	80034f2 <HAL_SPI_Transmit+0x114>
 8003562:	e053      	b.n	800360c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <HAL_SPI_Transmit+0x194>
 800356c:	8b7b      	ldrh	r3, [r7, #26]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d147      	bne.n	8003602 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	330c      	adds	r3, #12
 800357c:	7812      	ldrb	r2, [r2, #0]
 800357e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003598:	e033      	b.n	8003602 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d113      	bne.n	80035d0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	330c      	adds	r3, #12
 80035b2:	7812      	ldrb	r2, [r2, #0]
 80035b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80035ce:	e018      	b.n	8003602 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035d0:	f7fd ff64 	bl	800149c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d803      	bhi.n	80035e8 <HAL_SPI_Transmit+0x20a>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d102      	bne.n	80035ee <HAL_SPI_Transmit+0x210>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e02d      	b.n	800365e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1c6      	bne.n	800359a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	6839      	ldr	r1, [r7, #0]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 fa59 	bl	8003ac8 <SPI_EndRxTxTransaction>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800365c:	2300      	movs	r3, #0
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b08a      	sub	sp, #40	@ 0x28
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003674:	2301      	movs	r3, #1
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003678:	f7fd ff10 	bl	800149c <HAL_GetTick>
 800367c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003684:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800368c:	887b      	ldrh	r3, [r7, #2]
 800368e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003690:	7ffb      	ldrb	r3, [r7, #31]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d00c      	beq.n	80036b0 <HAL_SPI_TransmitReceive+0x4a>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800369c:	d106      	bne.n	80036ac <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <HAL_SPI_TransmitReceive+0x46>
 80036a6:	7ffb      	ldrb	r3, [r7, #31]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d001      	beq.n	80036b0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
 80036ae:	e17f      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_SPI_TransmitReceive+0x5c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_SPI_TransmitReceive+0x5c>
 80036bc:	887b      	ldrh	r3, [r7, #2]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e174      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_SPI_TransmitReceive+0x6e>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e16d      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x34a>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d003      	beq.n	80036f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2205      	movs	r2, #5
 80036ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	887a      	ldrh	r2, [r7, #2]
 8003706:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	887a      	ldrh	r2, [r7, #2]
 8003712:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003730:	2b40      	cmp	r3, #64	@ 0x40
 8003732:	d007      	beq.n	8003744 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003742:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800374c:	d17e      	bne.n	800384c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_SPI_TransmitReceive+0xf6>
 8003756:	8afb      	ldrh	r3, [r7, #22]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d16c      	bne.n	8003836 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	881a      	ldrh	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376c:	1c9a      	adds	r2, r3, #2
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003780:	e059      	b.n	8003836 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b02      	cmp	r3, #2
 800378e:	d11b      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x162>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x162>
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	2b01      	cmp	r3, #1
 800379e:	d113      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a4:	881a      	ldrh	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b0:	1c9a      	adds	r2, r3, #2
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d119      	bne.n	800380a <HAL_SPI_TransmitReceive+0x1a4>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d014      	beq.n	800380a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ea:	b292      	uxth	r2, r2
 80037ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f2:	1c9a      	adds	r2, r3, #2
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003806:	2301      	movs	r3, #1
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800380a:	f7fd fe47 	bl	800149c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003816:	429a      	cmp	r2, r3
 8003818:	d80d      	bhi.n	8003836 <HAL_SPI_TransmitReceive+0x1d0>
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d009      	beq.n	8003836 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0bc      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1a0      	bne.n	8003782 <HAL_SPI_TransmitReceive+0x11c>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d19b      	bne.n	8003782 <HAL_SPI_TransmitReceive+0x11c>
 800384a:	e082      	b.n	8003952 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_SPI_TransmitReceive+0x1f4>
 8003854:	8afb      	ldrh	r3, [r7, #22]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d171      	bne.n	800393e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	330c      	adds	r3, #12
 8003864:	7812      	ldrb	r2, [r2, #0]
 8003866:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003880:	e05d      	b.n	800393e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b02      	cmp	r3, #2
 800388e:	d11c      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x264>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d017      	beq.n	80038ca <HAL_SPI_TransmitReceive+0x264>
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	2b01      	cmp	r3, #1
 800389e:	d114      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	330c      	adds	r3, #12
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d119      	bne.n	800390c <HAL_SPI_TransmitReceive+0x2a6>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d014      	beq.n	800390c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003908:	2301      	movs	r3, #1
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800390c:	f7fd fdc6 	bl	800149c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003918:	429a      	cmp	r2, r3
 800391a:	d803      	bhi.n	8003924 <HAL_SPI_TransmitReceive+0x2be>
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003922:	d102      	bne.n	800392a <HAL_SPI_TransmitReceive+0x2c4>
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e038      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d19c      	bne.n	8003882 <HAL_SPI_TransmitReceive+0x21c>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d197      	bne.n	8003882 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003952:	6a3a      	ldr	r2, [r7, #32]
 8003954:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f8b6 	bl	8003ac8 <SPI_EndRxTxTransaction>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e01d      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	@ 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039c8:	f7fd fd68 	bl	800149c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039d8:	f7fd fd60 	bl	800149c <HAL_GetTick>
 80039dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039de:	4b39      	ldr	r3, [pc, #228]	@ (8003ac4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	015b      	lsls	r3, r3, #5
 80039e4:	0d1b      	lsrs	r3, r3, #20
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ee:	e054      	b.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d050      	beq.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039f8:	f7fd fd50 	bl	800149c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d902      	bls.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d13d      	bne.n	8003a8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a26:	d111      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a30:	d004      	beq.n	8003a3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a3a:	d107      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a54:	d10f      	bne.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e017      	b.n	8003aba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d19b      	bne.n	80039f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3720      	adds	r7, #32
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000000 	.word	0x20000000

08003ac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2201      	movs	r2, #1
 8003adc:	2102      	movs	r1, #2
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f7ff ff6a 	bl	80039b8 <SPI_WaitFlagStateUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d007      	beq.n	8003afa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aee:	f043 0220 	orr.w	r2, r3, #32
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e032      	b.n	8003b60 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003afa:	4b1b      	ldr	r3, [pc, #108]	@ (8003b68 <SPI_EndRxTxTransaction+0xa0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1b      	ldr	r2, [pc, #108]	@ (8003b6c <SPI_EndRxTxTransaction+0xa4>)
 8003b00:	fba2 2303 	umull	r2, r3, r2, r3
 8003b04:	0d5b      	lsrs	r3, r3, #21
 8003b06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b18:	d112      	bne.n	8003b40 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2180      	movs	r1, #128	@ 0x80
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f7ff ff47 	bl	80039b8 <SPI_WaitFlagStateUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d016      	beq.n	8003b5e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b34:	f043 0220 	orr.w	r2, r3, #32
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e00f      	b.n	8003b60 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b56:	2b80      	cmp	r3, #128	@ 0x80
 8003b58:	d0f2      	beq.n	8003b40 <SPI_EndRxTxTransaction+0x78>
 8003b5a:	e000      	b.n	8003b5e <SPI_EndRxTxTransaction+0x96>
        break;
 8003b5c:	bf00      	nop
  }

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000000 	.word	0x20000000
 8003b6c:	165e9f81 	.word	0x165e9f81

08003b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e041      	b.n	8003c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd fa0c 	bl	8000fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f000 fc3c 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d001      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e044      	b.n	8003cb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1e      	ldr	r2, [pc, #120]	@ (8003cc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d018      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x6c>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c52:	d013      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x6c>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00e      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x6c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a19      	ldr	r2, [pc, #100]	@ (8003cc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d009      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x6c>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	@ (8003ccc <HAL_TIM_Base_Start_IT+0xbc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d004      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x6c>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a16      	ldr	r2, [pc, #88]	@ (8003cd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d111      	bne.n	8003ca0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d010      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9e:	e007      	b.n	8003cb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40010000 	.word	0x40010000
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40000800 	.word	0x40000800
 8003ccc:	40000c00 	.word	0x40000c00
 8003cd0:	40014000 	.word	0x40014000

08003cd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e041      	b.n	8003d6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f839 	bl	8003d72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f000 fb8a 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <HAL_TIM_PWM_Start+0x24>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	bf14      	ite	ne
 8003da4:	2301      	movne	r3, #1
 8003da6:	2300      	moveq	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e022      	b.n	8003df2 <HAL_TIM_PWM_Start+0x6a>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d109      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0x3e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	bf14      	ite	ne
 8003dbe:	2301      	movne	r3, #1
 8003dc0:	2300      	moveq	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	e015      	b.n	8003df2 <HAL_TIM_PWM_Start+0x6a>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d109      	bne.n	8003de0 <HAL_TIM_PWM_Start+0x58>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	bf14      	ite	ne
 8003dd8:	2301      	movne	r3, #1
 8003dda:	2300      	moveq	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	e008      	b.n	8003df2 <HAL_TIM_PWM_Start+0x6a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e068      	b.n	8003ecc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d104      	bne.n	8003e0a <HAL_TIM_PWM_Start+0x82>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e08:	e013      	b.n	8003e32 <HAL_TIM_PWM_Start+0xaa>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d104      	bne.n	8003e1a <HAL_TIM_PWM_Start+0x92>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e18:	e00b      	b.n	8003e32 <HAL_TIM_PWM_Start+0xaa>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d104      	bne.n	8003e2a <HAL_TIM_PWM_Start+0xa2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e28:	e003      	b.n	8003e32 <HAL_TIM_PWM_Start+0xaa>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2201      	movs	r2, #1
 8003e38:	6839      	ldr	r1, [r7, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fda8 	bl	8004990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a23      	ldr	r2, [pc, #140]	@ (8003ed4 <HAL_TIM_PWM_Start+0x14c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d107      	bne.n	8003e5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ed4 <HAL_TIM_PWM_Start+0x14c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d018      	beq.n	8003e96 <HAL_TIM_PWM_Start+0x10e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e6c:	d013      	beq.n	8003e96 <HAL_TIM_PWM_Start+0x10e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a19      	ldr	r2, [pc, #100]	@ (8003ed8 <HAL_TIM_PWM_Start+0x150>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00e      	beq.n	8003e96 <HAL_TIM_PWM_Start+0x10e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a17      	ldr	r2, [pc, #92]	@ (8003edc <HAL_TIM_PWM_Start+0x154>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d009      	beq.n	8003e96 <HAL_TIM_PWM_Start+0x10e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a16      	ldr	r2, [pc, #88]	@ (8003ee0 <HAL_TIM_PWM_Start+0x158>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_TIM_PWM_Start+0x10e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <HAL_TIM_PWM_Start+0x15c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d111      	bne.n	8003eba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b06      	cmp	r3, #6
 8003ea6:	d010      	beq.n	8003eca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb8:	e007      	b.n	8003eca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40010000 	.word	0x40010000
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800
 8003ee0:	40000c00 	.word	0x40000c00
 8003ee4:	40014000 	.word	0x40014000

08003ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d020      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01b      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0202 	mvn.w	r2, #2
 8003f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fa5b 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa4d 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fa5e 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d020      	beq.n	8003f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01b      	beq.n	8003f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0204 	mvn.w	r2, #4
 8003f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa35 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fa27 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fa38 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d020      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01b      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0208 	mvn.w	r2, #8
 8003fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2204      	movs	r2, #4
 8003fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa0f 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fa01 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fa12 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d020      	beq.n	8004030 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01b      	beq.n	8004030 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0210 	mvn.w	r2, #16
 8004000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2208      	movs	r2, #8
 8004006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f9e9 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f9db 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f9ec 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0201 	mvn.w	r2, #1
 800404c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fc feae 	bl	8000db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00c      	beq.n	8004078 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fd7c 	bl	8004b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00c      	beq.n	800409c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f9bd 	bl	8004416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00c      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0220 	mvn.w	r2, #32
 80040b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fd4e 	bl	8004b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e0ae      	b.n	8004244 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b0c      	cmp	r3, #12
 80040f2:	f200 809f 	bhi.w	8004234 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040f6:	a201      	add	r2, pc, #4	@ (adr r2, 80040fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	08004131 	.word	0x08004131
 8004100:	08004235 	.word	0x08004235
 8004104:	08004235 	.word	0x08004235
 8004108:	08004235 	.word	0x08004235
 800410c:	08004171 	.word	0x08004171
 8004110:	08004235 	.word	0x08004235
 8004114:	08004235 	.word	0x08004235
 8004118:	08004235 	.word	0x08004235
 800411c:	080041b3 	.word	0x080041b3
 8004120:	08004235 	.word	0x08004235
 8004124:	08004235 	.word	0x08004235
 8004128:	08004235 	.word	0x08004235
 800412c:	080041f3 	.word	0x080041f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fa04 	bl	8004544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0208 	orr.w	r2, r2, #8
 800414a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0204 	bic.w	r2, r2, #4
 800415a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6999      	ldr	r1, [r3, #24]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	619a      	str	r2, [r3, #24]
      break;
 800416e:	e064      	b.n	800423a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fa4a 	bl	8004610 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800418a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6999      	ldr	r1, [r3, #24]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	021a      	lsls	r2, r3, #8
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	619a      	str	r2, [r3, #24]
      break;
 80041b0:	e043      	b.n	800423a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fa95 	bl	80046e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0208 	orr.w	r2, r2, #8
 80041cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0204 	bic.w	r2, r2, #4
 80041dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69d9      	ldr	r1, [r3, #28]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	61da      	str	r2, [r3, #28]
      break;
 80041f0:	e023      	b.n	800423a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fadf 	bl	80047bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800420c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800421c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69d9      	ldr	r1, [r3, #28]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	021a      	lsls	r2, r3, #8
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	61da      	str	r2, [r3, #28]
      break;
 8004232:	e002      	b.n	800423a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	75fb      	strb	r3, [r7, #23]
      break;
 8004238:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004242:	7dfb      	ldrb	r3, [r7, #23]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_TIM_ConfigClockSource+0x1c>
 8004264:	2302      	movs	r3, #2
 8004266:	e0b4      	b.n	80043d2 <HAL_TIM_ConfigClockSource+0x186>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800428e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042a0:	d03e      	beq.n	8004320 <HAL_TIM_ConfigClockSource+0xd4>
 80042a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042a6:	f200 8087 	bhi.w	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ae:	f000 8086 	beq.w	80043be <HAL_TIM_ConfigClockSource+0x172>
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b6:	d87f      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042b8:	2b70      	cmp	r3, #112	@ 0x70
 80042ba:	d01a      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0xa6>
 80042bc:	2b70      	cmp	r3, #112	@ 0x70
 80042be:	d87b      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042c0:	2b60      	cmp	r3, #96	@ 0x60
 80042c2:	d050      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x11a>
 80042c4:	2b60      	cmp	r3, #96	@ 0x60
 80042c6:	d877      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042c8:	2b50      	cmp	r3, #80	@ 0x50
 80042ca:	d03c      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0xfa>
 80042cc:	2b50      	cmp	r3, #80	@ 0x50
 80042ce:	d873      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042d0:	2b40      	cmp	r3, #64	@ 0x40
 80042d2:	d058      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x13a>
 80042d4:	2b40      	cmp	r3, #64	@ 0x40
 80042d6:	d86f      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042d8:	2b30      	cmp	r3, #48	@ 0x30
 80042da:	d064      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x15a>
 80042dc:	2b30      	cmp	r3, #48	@ 0x30
 80042de:	d86b      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d060      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x15a>
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d867      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d05c      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x15a>
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d05a      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x15a>
 80042f0:	e062      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004302:	f000 fb25 	bl	8004950 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	609a      	str	r2, [r3, #8]
      break;
 800431e:	e04f      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004330:	f000 fb0e 	bl	8004950 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004342:	609a      	str	r2, [r3, #8]
      break;
 8004344:	e03c      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004352:	461a      	mov	r2, r3
 8004354:	f000 fa82 	bl	800485c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2150      	movs	r1, #80	@ 0x50
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fadb 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 8004364:	e02c      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004372:	461a      	mov	r2, r3
 8004374:	f000 faa1 	bl	80048ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2160      	movs	r1, #96	@ 0x60
 800437e:	4618      	mov	r0, r3
 8004380:	f000 facb 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 8004384:	e01c      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004392:	461a      	mov	r2, r3
 8004394:	f000 fa62 	bl	800485c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2140      	movs	r1, #64	@ 0x40
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fabb 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 80043a4:	e00c      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f000 fab2 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 80043b6:	e003      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
      break;
 80043bc:	e000      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a3a      	ldr	r2, [pc, #232]	@ (8004528 <TIM_Base_SetConfig+0xfc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00f      	beq.n	8004464 <TIM_Base_SetConfig+0x38>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444a:	d00b      	beq.n	8004464 <TIM_Base_SetConfig+0x38>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a37      	ldr	r2, [pc, #220]	@ (800452c <TIM_Base_SetConfig+0x100>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d007      	beq.n	8004464 <TIM_Base_SetConfig+0x38>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a36      	ldr	r2, [pc, #216]	@ (8004530 <TIM_Base_SetConfig+0x104>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_Base_SetConfig+0x38>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a35      	ldr	r2, [pc, #212]	@ (8004534 <TIM_Base_SetConfig+0x108>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d108      	bne.n	8004476 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800446a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a2b      	ldr	r2, [pc, #172]	@ (8004528 <TIM_Base_SetConfig+0xfc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d01b      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004484:	d017      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a28      	ldr	r2, [pc, #160]	@ (800452c <TIM_Base_SetConfig+0x100>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d013      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a27      	ldr	r2, [pc, #156]	@ (8004530 <TIM_Base_SetConfig+0x104>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00f      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a26      	ldr	r2, [pc, #152]	@ (8004534 <TIM_Base_SetConfig+0x108>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00b      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a25      	ldr	r2, [pc, #148]	@ (8004538 <TIM_Base_SetConfig+0x10c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d007      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a24      	ldr	r2, [pc, #144]	@ (800453c <TIM_Base_SetConfig+0x110>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d003      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a23      	ldr	r2, [pc, #140]	@ (8004540 <TIM_Base_SetConfig+0x114>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d108      	bne.n	80044c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004528 <TIM_Base_SetConfig+0xfc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d103      	bne.n	80044fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b01      	cmp	r3, #1
 800450c:	d105      	bne.n	800451a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f023 0201 	bic.w	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	611a      	str	r2, [r3, #16]
  }
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40010000 	.word	0x40010000
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40014000 	.word	0x40014000
 800453c:	40014400 	.word	0x40014400
 8004540:	40014800 	.word	0x40014800

08004544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f023 0201 	bic.w	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0303 	bic.w	r3, r3, #3
 800457a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f023 0302 	bic.w	r3, r3, #2
 800458c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a1c      	ldr	r2, [pc, #112]	@ (800460c <TIM_OC1_SetConfig+0xc8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d10c      	bne.n	80045ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0308 	bic.w	r3, r3, #8
 80045a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f023 0304 	bic.w	r3, r3, #4
 80045b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a13      	ldr	r2, [pc, #76]	@ (800460c <TIM_OC1_SetConfig+0xc8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d111      	bne.n	80045e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	621a      	str	r2, [r3, #32]
}
 8004600:	bf00      	nop
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	40010000 	.word	0x40010000

08004610 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f023 0210 	bic.w	r2, r3, #16
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0320 	bic.w	r3, r3, #32
 800465a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a1e      	ldr	r2, [pc, #120]	@ (80046e4 <TIM_OC2_SetConfig+0xd4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d10d      	bne.n	800468c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800468a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a15      	ldr	r2, [pc, #84]	@ (80046e4 <TIM_OC2_SetConfig+0xd4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d113      	bne.n	80046bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800469a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000

080046e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0303 	bic.w	r3, r3, #3
 800471e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1d      	ldr	r2, [pc, #116]	@ (80047b8 <TIM_OC3_SetConfig+0xd0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d10d      	bne.n	8004762 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800474c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a14      	ldr	r2, [pc, #80]	@ (80047b8 <TIM_OC3_SetConfig+0xd0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d113      	bne.n	8004792 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	621a      	str	r2, [r3, #32]
}
 80047ac:	bf00      	nop
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	40010000 	.word	0x40010000

080047bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	031b      	lsls	r3, r3, #12
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a10      	ldr	r2, [pc, #64]	@ (8004858 <TIM_OC4_SetConfig+0x9c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d109      	bne.n	8004830 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004822:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	019b      	lsls	r3, r3, #6
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	621a      	str	r2, [r3, #32]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40010000 	.word	0x40010000

0800485c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	f023 0201 	bic.w	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f023 030a 	bic.w	r3, r3, #10
 8004898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4313      	orrs	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b087      	sub	sp, #28
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f023 0210 	bic.w	r2, r3, #16
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	031b      	lsls	r3, r3, #12
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	621a      	str	r2, [r3, #32]
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	f043 0307 	orr.w	r3, r3, #7
 800493c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	609a      	str	r2, [r3, #8]
}
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800496a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	021a      	lsls	r2, r3, #8
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	431a      	orrs	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4313      	orrs	r3, r2
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	609a      	str	r2, [r3, #8]
}
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	2201      	movs	r2, #1
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1a      	ldr	r2, [r3, #32]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	401a      	ands	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1a      	ldr	r2, [r3, #32]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	fa01 f303 	lsl.w	r3, r1, r3
 80049c8:	431a      	orrs	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e050      	b.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d018      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a40:	d013      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a18      	ldr	r2, [pc, #96]	@ (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00e      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a16      	ldr	r2, [pc, #88]	@ (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d009      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a15      	ldr	r2, [pc, #84]	@ (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d004      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a13      	ldr	r2, [pc, #76]	@ (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d10c      	bne.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40010000 	.word	0x40010000
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	40000800 	.word	0x40000800
 8004ab0:	40000c00 	.word	0x40000c00
 8004ab4:	40014000 	.word	0x40014000

08004ab8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e03d      	b.n	8004b50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e042      	b.n	8004c1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fc fa5e 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2224      	movs	r2, #36	@ 0x24
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f973 	bl	8004eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695a      	ldr	r2, [r3, #20]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	@ 0x28
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d175      	bne.n	8004d30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_UART_Transmit+0x2c>
 8004c4a:	88fb      	ldrh	r3, [r7, #6]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e06e      	b.n	8004d32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2221      	movs	r2, #33	@ 0x21
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c62:	f7fc fc1b 	bl	800149c <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	88fa      	ldrh	r2, [r7, #6]
 8004c72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7c:	d108      	bne.n	8004c90 <HAL_UART_Transmit+0x6c>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	e003      	b.n	8004c98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c98:	e02e      	b.n	8004cf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2180      	movs	r1, #128	@ 0x80
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f848 	bl	8004d3a <UART_WaitOnFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e03a      	b.n	8004d32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	e007      	b.n	8004cea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	781a      	ldrb	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1cb      	bne.n	8004c9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2140      	movs	r1, #64	@ 0x40
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f814 	bl	8004d3a <UART_WaitOnFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e006      	b.n	8004d32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e000      	b.n	8004d32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
  }
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	603b      	str	r3, [r7, #0]
 8004d46:	4613      	mov	r3, r2
 8004d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4a:	e03b      	b.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d52:	d037      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d54:	f7fc fba2 	bl	800149c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	6a3a      	ldr	r2, [r7, #32]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e03a      	b.n	8004de4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d023      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b80      	cmp	r3, #128	@ 0x80
 8004d80:	d020      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b40      	cmp	r3, #64	@ 0x40
 8004d86:	d01d      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d116      	bne.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 f81d 	bl	8004dec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2208      	movs	r2, #8
 8004db6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e00f      	b.n	8004de4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d0b4      	beq.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b095      	sub	sp, #84	@ 0x54
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	330c      	adds	r3, #12
 8004e12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e14:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e5      	bne.n	8004df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3314      	adds	r3, #20
 8004e46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e5      	bne.n	8004e28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d119      	bne.n	8004e98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f023 0310 	bic.w	r3, r3, #16
 8004e7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	330c      	adds	r3, #12
 8004e82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e84:	61ba      	str	r2, [r7, #24]
 8004e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6979      	ldr	r1, [r7, #20]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	613b      	str	r3, [r7, #16]
   return(result);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e5      	bne.n	8004e64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ea6:	bf00      	nop
 8004ea8:	3754      	adds	r7, #84	@ 0x54
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
	...

08004eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb8:	b0c0      	sub	sp, #256	@ 0x100
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed0:	68d9      	ldr	r1, [r3, #12]
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	ea40 0301 	orr.w	r3, r0, r1
 8004edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f0c:	f021 010c 	bic.w	r1, r1, #12
 8004f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2e:	6999      	ldr	r1, [r3, #24]
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	ea40 0301 	orr.w	r3, r0, r1
 8004f3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b8f      	ldr	r3, [pc, #572]	@ (8005180 <UART_SetConfig+0x2cc>)
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d005      	beq.n	8004f54 <UART_SetConfig+0xa0>
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8005184 <UART_SetConfig+0x2d0>)
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d104      	bne.n	8004f5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f54:	f7fe f974 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8004f58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f5c:	e003      	b.n	8004f66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f5e:	f7fe f95b 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8004f62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f70:	f040 810c 	bne.w	800518c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f86:	4622      	mov	r2, r4
 8004f88:	462b      	mov	r3, r5
 8004f8a:	1891      	adds	r1, r2, r2
 8004f8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f8e:	415b      	adcs	r3, r3
 8004f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f96:	4621      	mov	r1, r4
 8004f98:	eb12 0801 	adds.w	r8, r2, r1
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	eb43 0901 	adc.w	r9, r3, r1
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fb6:	4690      	mov	r8, r2
 8004fb8:	4699      	mov	r9, r3
 8004fba:	4623      	mov	r3, r4
 8004fbc:	eb18 0303 	adds.w	r3, r8, r3
 8004fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fc4:	462b      	mov	r3, r5
 8004fc6:	eb49 0303 	adc.w	r3, r9, r3
 8004fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	18db      	adds	r3, r3, r3
 8004fe6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fe8:	4613      	mov	r3, r2
 8004fea:	eb42 0303 	adc.w	r3, r2, r3
 8004fee:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ff0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ff4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ff8:	f7fb f9a2 	bl	8000340 <__aeabi_uldivmod>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4b61      	ldr	r3, [pc, #388]	@ (8005188 <UART_SetConfig+0x2d4>)
 8005002:	fba3 2302 	umull	r2, r3, r3, r2
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	011c      	lsls	r4, r3, #4
 800500a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800500e:	2200      	movs	r2, #0
 8005010:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005014:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005018:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800501c:	4642      	mov	r2, r8
 800501e:	464b      	mov	r3, r9
 8005020:	1891      	adds	r1, r2, r2
 8005022:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005024:	415b      	adcs	r3, r3
 8005026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800502c:	4641      	mov	r1, r8
 800502e:	eb12 0a01 	adds.w	sl, r2, r1
 8005032:	4649      	mov	r1, r9
 8005034:	eb43 0b01 	adc.w	fp, r3, r1
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005044:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800504c:	4692      	mov	sl, r2
 800504e:	469b      	mov	fp, r3
 8005050:	4643      	mov	r3, r8
 8005052:	eb1a 0303 	adds.w	r3, sl, r3
 8005056:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800505a:	464b      	mov	r3, r9
 800505c:	eb4b 0303 	adc.w	r3, fp, r3
 8005060:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005070:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005074:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005078:	460b      	mov	r3, r1
 800507a:	18db      	adds	r3, r3, r3
 800507c:	643b      	str	r3, [r7, #64]	@ 0x40
 800507e:	4613      	mov	r3, r2
 8005080:	eb42 0303 	adc.w	r3, r2, r3
 8005084:	647b      	str	r3, [r7, #68]	@ 0x44
 8005086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800508a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800508e:	f7fb f957 	bl	8000340 <__aeabi_uldivmod>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4611      	mov	r1, r2
 8005098:	4b3b      	ldr	r3, [pc, #236]	@ (8005188 <UART_SetConfig+0x2d4>)
 800509a:	fba3 2301 	umull	r2, r3, r3, r1
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	2264      	movs	r2, #100	@ 0x64
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	1acb      	subs	r3, r1, r3
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80050ae:	4b36      	ldr	r3, [pc, #216]	@ (8005188 <UART_SetConfig+0x2d4>)
 80050b0:	fba3 2302 	umull	r2, r3, r3, r2
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050bc:	441c      	add	r4, r3
 80050be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050d0:	4642      	mov	r2, r8
 80050d2:	464b      	mov	r3, r9
 80050d4:	1891      	adds	r1, r2, r2
 80050d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050d8:	415b      	adcs	r3, r3
 80050da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050e0:	4641      	mov	r1, r8
 80050e2:	1851      	adds	r1, r2, r1
 80050e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80050e6:	4649      	mov	r1, r9
 80050e8:	414b      	adcs	r3, r1
 80050ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050f8:	4659      	mov	r1, fp
 80050fa:	00cb      	lsls	r3, r1, #3
 80050fc:	4651      	mov	r1, sl
 80050fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005102:	4651      	mov	r1, sl
 8005104:	00ca      	lsls	r2, r1, #3
 8005106:	4610      	mov	r0, r2
 8005108:	4619      	mov	r1, r3
 800510a:	4603      	mov	r3, r0
 800510c:	4642      	mov	r2, r8
 800510e:	189b      	adds	r3, r3, r2
 8005110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005114:	464b      	mov	r3, r9
 8005116:	460a      	mov	r2, r1
 8005118:	eb42 0303 	adc.w	r3, r2, r3
 800511c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800512c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005134:	460b      	mov	r3, r1
 8005136:	18db      	adds	r3, r3, r3
 8005138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800513a:	4613      	mov	r3, r2
 800513c:	eb42 0303 	adc.w	r3, r2, r3
 8005140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005146:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800514a:	f7fb f8f9 	bl	8000340 <__aeabi_uldivmod>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4b0d      	ldr	r3, [pc, #52]	@ (8005188 <UART_SetConfig+0x2d4>)
 8005154:	fba3 1302 	umull	r1, r3, r3, r2
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	2164      	movs	r1, #100	@ 0x64
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	3332      	adds	r3, #50	@ 0x32
 8005166:	4a08      	ldr	r2, [pc, #32]	@ (8005188 <UART_SetConfig+0x2d4>)
 8005168:	fba2 2303 	umull	r2, r3, r2, r3
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	f003 0207 	and.w	r2, r3, #7
 8005172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4422      	add	r2, r4
 800517a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800517c:	e106      	b.n	800538c <UART_SetConfig+0x4d8>
 800517e:	bf00      	nop
 8005180:	40011000 	.word	0x40011000
 8005184:	40011400 	.word	0x40011400
 8005188:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800518c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005190:	2200      	movs	r2, #0
 8005192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005196:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800519a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800519e:	4642      	mov	r2, r8
 80051a0:	464b      	mov	r3, r9
 80051a2:	1891      	adds	r1, r2, r2
 80051a4:	6239      	str	r1, [r7, #32]
 80051a6:	415b      	adcs	r3, r3
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051ae:	4641      	mov	r1, r8
 80051b0:	1854      	adds	r4, r2, r1
 80051b2:	4649      	mov	r1, r9
 80051b4:	eb43 0501 	adc.w	r5, r3, r1
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	00eb      	lsls	r3, r5, #3
 80051c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051c6:	00e2      	lsls	r2, r4, #3
 80051c8:	4614      	mov	r4, r2
 80051ca:	461d      	mov	r5, r3
 80051cc:	4643      	mov	r3, r8
 80051ce:	18e3      	adds	r3, r4, r3
 80051d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051d4:	464b      	mov	r3, r9
 80051d6:	eb45 0303 	adc.w	r3, r5, r3
 80051da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051fa:	4629      	mov	r1, r5
 80051fc:	008b      	lsls	r3, r1, #2
 80051fe:	4621      	mov	r1, r4
 8005200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005204:	4621      	mov	r1, r4
 8005206:	008a      	lsls	r2, r1, #2
 8005208:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800520c:	f7fb f898 	bl	8000340 <__aeabi_uldivmod>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4b60      	ldr	r3, [pc, #384]	@ (8005398 <UART_SetConfig+0x4e4>)
 8005216:	fba3 2302 	umull	r2, r3, r3, r2
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	011c      	lsls	r4, r3, #4
 800521e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005222:	2200      	movs	r2, #0
 8005224:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005228:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800522c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005230:	4642      	mov	r2, r8
 8005232:	464b      	mov	r3, r9
 8005234:	1891      	adds	r1, r2, r2
 8005236:	61b9      	str	r1, [r7, #24]
 8005238:	415b      	adcs	r3, r3
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005240:	4641      	mov	r1, r8
 8005242:	1851      	adds	r1, r2, r1
 8005244:	6139      	str	r1, [r7, #16]
 8005246:	4649      	mov	r1, r9
 8005248:	414b      	adcs	r3, r1
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005258:	4659      	mov	r1, fp
 800525a:	00cb      	lsls	r3, r1, #3
 800525c:	4651      	mov	r1, sl
 800525e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005262:	4651      	mov	r1, sl
 8005264:	00ca      	lsls	r2, r1, #3
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	4603      	mov	r3, r0
 800526c:	4642      	mov	r2, r8
 800526e:	189b      	adds	r3, r3, r2
 8005270:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005274:	464b      	mov	r3, r9
 8005276:	460a      	mov	r2, r1
 8005278:	eb42 0303 	adc.w	r3, r2, r3
 800527c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	67bb      	str	r3, [r7, #120]	@ 0x78
 800528a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005298:	4649      	mov	r1, r9
 800529a:	008b      	lsls	r3, r1, #2
 800529c:	4641      	mov	r1, r8
 800529e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052a2:	4641      	mov	r1, r8
 80052a4:	008a      	lsls	r2, r1, #2
 80052a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80052aa:	f7fb f849 	bl	8000340 <__aeabi_uldivmod>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4611      	mov	r1, r2
 80052b4:	4b38      	ldr	r3, [pc, #224]	@ (8005398 <UART_SetConfig+0x4e4>)
 80052b6:	fba3 2301 	umull	r2, r3, r3, r1
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	2264      	movs	r2, #100	@ 0x64
 80052be:	fb02 f303 	mul.w	r3, r2, r3
 80052c2:	1acb      	subs	r3, r1, r3
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	3332      	adds	r3, #50	@ 0x32
 80052c8:	4a33      	ldr	r2, [pc, #204]	@ (8005398 <UART_SetConfig+0x4e4>)
 80052ca:	fba2 2303 	umull	r2, r3, r2, r3
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052d4:	441c      	add	r4, r3
 80052d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052da:	2200      	movs	r2, #0
 80052dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80052de:	677a      	str	r2, [r7, #116]	@ 0x74
 80052e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052e4:	4642      	mov	r2, r8
 80052e6:	464b      	mov	r3, r9
 80052e8:	1891      	adds	r1, r2, r2
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	415b      	adcs	r3, r3
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052f4:	4641      	mov	r1, r8
 80052f6:	1851      	adds	r1, r2, r1
 80052f8:	6039      	str	r1, [r7, #0]
 80052fa:	4649      	mov	r1, r9
 80052fc:	414b      	adcs	r3, r1
 80052fe:	607b      	str	r3, [r7, #4]
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800530c:	4659      	mov	r1, fp
 800530e:	00cb      	lsls	r3, r1, #3
 8005310:	4651      	mov	r1, sl
 8005312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005316:	4651      	mov	r1, sl
 8005318:	00ca      	lsls	r2, r1, #3
 800531a:	4610      	mov	r0, r2
 800531c:	4619      	mov	r1, r3
 800531e:	4603      	mov	r3, r0
 8005320:	4642      	mov	r2, r8
 8005322:	189b      	adds	r3, r3, r2
 8005324:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005326:	464b      	mov	r3, r9
 8005328:	460a      	mov	r2, r1
 800532a:	eb42 0303 	adc.w	r3, r2, r3
 800532e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	663b      	str	r3, [r7, #96]	@ 0x60
 800533a:	667a      	str	r2, [r7, #100]	@ 0x64
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005348:	4649      	mov	r1, r9
 800534a:	008b      	lsls	r3, r1, #2
 800534c:	4641      	mov	r1, r8
 800534e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005352:	4641      	mov	r1, r8
 8005354:	008a      	lsls	r2, r1, #2
 8005356:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800535a:	f7fa fff1 	bl	8000340 <__aeabi_uldivmod>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4b0d      	ldr	r3, [pc, #52]	@ (8005398 <UART_SetConfig+0x4e4>)
 8005364:	fba3 1302 	umull	r1, r3, r3, r2
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	2164      	movs	r1, #100	@ 0x64
 800536c:	fb01 f303 	mul.w	r3, r1, r3
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	3332      	adds	r3, #50	@ 0x32
 8005376:	4a08      	ldr	r2, [pc, #32]	@ (8005398 <UART_SetConfig+0x4e4>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	f003 020f 	and.w	r2, r3, #15
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4422      	add	r2, r4
 800538a:	609a      	str	r2, [r3, #8]
}
 800538c:	bf00      	nop
 800538e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005392:	46bd      	mov	sp, r7
 8005394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005398:	51eb851f 	.word	0x51eb851f

0800539c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80053a0:	4904      	ldr	r1, [pc, #16]	@ (80053b4 <MX_FATFS_Init+0x18>)
 80053a2:	4805      	ldr	r0, [pc, #20]	@ (80053b8 <MX_FATFS_Init+0x1c>)
 80053a4:	f000 fd86 	bl	8005eb4 <FATFS_LinkDriver>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	4b03      	ldr	r3, [pc, #12]	@ (80053bc <MX_FATFS_Init+0x20>)
 80053ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80053b0:	bf00      	nop
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20001318 	.word	0x20001318
 80053b8:	2000000c 	.word	0x2000000c
 80053bc:	20001314 	.word	0x20001314

080053c0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 f8b1 	bl	8006534 <SD_disk_initialize>
 80053d2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f001 f98f 	bl	800670c <SD_disk_status>
 80053ee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read (pdrv, buff, sector, count);
 8005408:	7bf8      	ldrb	r0, [r7, #15]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	f001 f992 	bl	8006738 <SD_disk_read>
 8005414:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b084      	sub	sp, #16
 8005422:	af00      	add	r7, sp, #0
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	4603      	mov	r3, r0
 800542c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 800542e:	7bf8      	ldrb	r0, [r7, #15]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	f001 f9e9 	bl	800680c <SD_disk_write>
 800543a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	603a      	str	r2, [r7, #0]
 800544e:	71fb      	strb	r3, [r7, #7]
 8005450:	460b      	mov	r3, r1
 8005452:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv, cmd, buff);
 8005454:	79b9      	ldrb	r1, [r7, #6]
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f001 fa5a 	bl	8006914 <SD_disk_ioctl>
 8005460:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	4a08      	ldr	r2, [pc, #32]	@ (800549c <disk_status+0x30>)
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	79fa      	ldrb	r2, [r7, #7]
 8005484:	4905      	ldr	r1, [pc, #20]	@ (800549c <disk_status+0x30>)
 8005486:	440a      	add	r2, r1
 8005488:	7a12      	ldrb	r2, [r2, #8]
 800548a:	4610      	mov	r0, r2
 800548c:	4798      	blx	r3
 800548e:	4603      	mov	r3, r0
 8005490:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005492:	7bfb      	ldrb	r3, [r7, #15]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20001544 	.word	0x20001544

080054a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	4a0e      	ldr	r2, [pc, #56]	@ (80054ec <disk_initialize+0x4c>)
 80054b2:	5cd3      	ldrb	r3, [r2, r3]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d114      	bne.n	80054e2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	4a0c      	ldr	r2, [pc, #48]	@ (80054ec <disk_initialize+0x4c>)
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	79fa      	ldrb	r2, [r7, #7]
 80054c6:	4909      	ldr	r1, [pc, #36]	@ (80054ec <disk_initialize+0x4c>)
 80054c8:	440a      	add	r2, r1
 80054ca:	7a12      	ldrb	r2, [r2, #8]
 80054cc:	4610      	mov	r0, r2
 80054ce:	4798      	blx	r3
 80054d0:	4603      	mov	r3, r0
 80054d2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d103      	bne.n	80054e2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	4a03      	ldr	r2, [pc, #12]	@ (80054ec <disk_initialize+0x4c>)
 80054de:	2101      	movs	r1, #1
 80054e0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20001544 	.word	0x20001544

080054f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	4603      	mov	r3, r0
 80054fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	4a0a      	ldr	r2, [pc, #40]	@ (800552c <disk_read+0x3c>)
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	689c      	ldr	r4, [r3, #8]
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	4a07      	ldr	r2, [pc, #28]	@ (800552c <disk_read+0x3c>)
 8005510:	4413      	add	r3, r2
 8005512:	7a18      	ldrb	r0, [r3, #8]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	47a0      	blx	r4
 800551c:	4603      	mov	r3, r0
 800551e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
}
 8005522:	4618      	mov	r0, r3
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	bd90      	pop	{r4, r7, pc}
 800552a:	bf00      	nop
 800552c:	20001544 	.word	0x20001544

08005530 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005530:	b590      	push	{r4, r7, lr}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	4603      	mov	r3, r0
 800553e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	4a0a      	ldr	r2, [pc, #40]	@ (800556c <disk_write+0x3c>)
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	68dc      	ldr	r4, [r3, #12]
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	4a07      	ldr	r2, [pc, #28]	@ (800556c <disk_write+0x3c>)
 8005550:	4413      	add	r3, r2
 8005552:	7a18      	ldrb	r0, [r3, #8]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	47a0      	blx	r4
 800555c:	4603      	mov	r3, r0
 800555e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005560:	7dfb      	ldrb	r3, [r7, #23]
}
 8005562:	4618      	mov	r0, r3
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	bd90      	pop	{r4, r7, pc}
 800556a:	bf00      	nop
 800556c:	20001544 	.word	0x20001544

08005570 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	603a      	str	r2, [r7, #0]
 800557a:	71fb      	strb	r3, [r7, #7]
 800557c:	460b      	mov	r3, r1
 800557e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	4a09      	ldr	r2, [pc, #36]	@ (80055a8 <disk_ioctl+0x38>)
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	79fa      	ldrb	r2, [r7, #7]
 800558e:	4906      	ldr	r1, [pc, #24]	@ (80055a8 <disk_ioctl+0x38>)
 8005590:	440a      	add	r2, r1
 8005592:	7a10      	ldrb	r0, [r2, #8]
 8005594:	79b9      	ldrb	r1, [r7, #6]
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	4798      	blx	r3
 800559a:	4603      	mov	r3, r0
 800559c:	73fb      	strb	r3, [r7, #15]
  return res;
 800559e:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20001544 	.word	0x20001544

080055ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3301      	adds	r3, #1
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80055bc:	89fb      	ldrh	r3, [r7, #14]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	b21a      	sxth	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	b21b      	sxth	r3, r3
 80055c8:	4313      	orrs	r3, r2
 80055ca:	b21b      	sxth	r3, r3
 80055cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80055ce:	89fb      	ldrh	r3, [r7, #14]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3303      	adds	r3, #3
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	3202      	adds	r2, #2
 80055f4:	7812      	ldrb	r2, [r2, #0]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	021b      	lsls	r3, r3, #8
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	3201      	adds	r2, #1
 8005602:	7812      	ldrb	r2, [r2, #0]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	7812      	ldrb	r2, [r2, #0]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]
	return rv;
 8005614:	68fb      	ldr	r3, [r7, #12]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e010      	b.n	8005654 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005632:	4a0d      	ldr	r2, [pc, #52]	@ (8005668 <clear_lock+0x44>)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	4413      	add	r3, r2
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	429a      	cmp	r2, r3
 8005640:	d105      	bne.n	800564e <clear_lock+0x2a>
 8005642:	4a09      	ldr	r2, [pc, #36]	@ (8005668 <clear_lock+0x44>)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	4413      	add	r3, r2
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3301      	adds	r3, #1
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d9eb      	bls.n	8005632 <clear_lock+0xe>
	}
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	20001324 	.word	0x20001324

0800566c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005674:	2300      	movs	r3, #0
 8005676:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	78db      	ldrb	r3, [r3, #3]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d034      	beq.n	80056ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005684:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	7858      	ldrb	r0, [r3, #1]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005690:	2301      	movs	r3, #1
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	f7ff ff4c 	bl	8005530 <disk_write>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800569e:	2301      	movs	r3, #1
 80056a0:	73fb      	strb	r3, [r7, #15]
 80056a2:	e022      	b.n	80056ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	1ad2      	subs	r2, r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d217      	bcs.n	80056ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	789b      	ldrb	r3, [r3, #2]
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	e010      	b.n	80056e4 <sync_window+0x78>
					wsect += fs->fsize;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4413      	add	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	7858      	ldrb	r0, [r3, #1]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80056d6:	2301      	movs	r3, #1
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	f7ff ff29 	bl	8005530 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d8eb      	bhi.n	80056c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d01b      	beq.n	8005744 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7ff ffad 	bl	800566c <sync_window>
 8005712:	4603      	mov	r3, r0
 8005714:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d113      	bne.n	8005744 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	7858      	ldrb	r0, [r3, #1]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005726:	2301      	movs	r3, #1
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	f7ff fee1 	bl	80054f0 <disk_read>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005734:	f04f 33ff 	mov.w	r3, #4294967295
 8005738:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800573a:	2301      	movs	r3, #1
 800573c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800574e:	b480      	push	{r7}
 8005750:	b087      	sub	sp, #28
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005756:	f04f 33ff 	mov.w	r3, #4294967295
 800575a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d031      	beq.n	80057c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	e002      	b.n	8005772 <get_ldnumber+0x24>
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	3301      	adds	r3, #1
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b1f      	cmp	r3, #31
 8005778:	d903      	bls.n	8005782 <get_ldnumber+0x34>
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b3a      	cmp	r3, #58	@ 0x3a
 8005780:	d1f4      	bne.n	800576c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b3a      	cmp	r3, #58	@ 0x3a
 8005788:	d11c      	bne.n	80057c4 <get_ldnumber+0x76>
			tp = *path;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	60fa      	str	r2, [r7, #12]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	3b30      	subs	r3, #48	@ 0x30
 800579a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b09      	cmp	r3, #9
 80057a0:	d80e      	bhi.n	80057c0 <get_ldnumber+0x72>
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d10a      	bne.n	80057c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d107      	bne.n	80057c0 <get_ldnumber+0x72>
					vol = (int)i;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	3301      	adds	r3, #1
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	e002      	b.n	80057ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80057c4:	2300      	movs	r3, #0
 80057c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80057c8:	693b      	ldr	r3, [r7, #16]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	70da      	strb	r2, [r3, #3]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f04f 32ff 	mov.w	r2, #4294967295
 80057ee:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff ff7e 	bl	80056f4 <move_window>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <check_fs+0x2a>
 80057fe:	2304      	movs	r3, #4
 8005800:	e038      	b.n	8005874 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3338      	adds	r3, #56	@ 0x38
 8005806:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fece 	bl	80055ac <ld_word>
 8005810:	4603      	mov	r3, r0
 8005812:	461a      	mov	r2, r3
 8005814:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005818:	429a      	cmp	r2, r3
 800581a:	d001      	beq.n	8005820 <check_fs+0x48>
 800581c:	2303      	movs	r3, #3
 800581e:	e029      	b.n	8005874 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005826:	2be9      	cmp	r3, #233	@ 0xe9
 8005828:	d009      	beq.n	800583e <check_fs+0x66>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005830:	2beb      	cmp	r3, #235	@ 0xeb
 8005832:	d11e      	bne.n	8005872 <check_fs+0x9a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800583a:	2b90      	cmp	r3, #144	@ 0x90
 800583c:	d119      	bne.n	8005872 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3338      	adds	r3, #56	@ 0x38
 8005842:	3336      	adds	r3, #54	@ 0x36
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fec9 	bl	80055dc <ld_dword>
 800584a:	4603      	mov	r3, r0
 800584c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005850:	4a0a      	ldr	r2, [pc, #40]	@ (800587c <check_fs+0xa4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d101      	bne.n	800585a <check_fs+0x82>
 8005856:	2300      	movs	r3, #0
 8005858:	e00c      	b.n	8005874 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3338      	adds	r3, #56	@ 0x38
 800585e:	3352      	adds	r3, #82	@ 0x52
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff febb 	bl	80055dc <ld_dword>
 8005866:	4603      	mov	r3, r0
 8005868:	4a05      	ldr	r2, [pc, #20]	@ (8005880 <check_fs+0xa8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d101      	bne.n	8005872 <check_fs+0x9a>
 800586e:	2300      	movs	r3, #0
 8005870:	e000      	b.n	8005874 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005872:	2302      	movs	r3, #2
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	00544146 	.word	0x00544146
 8005880:	33544146 	.word	0x33544146

08005884 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b096      	sub	sp, #88	@ 0x58
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	4613      	mov	r3, r2
 8005890:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f7ff ff58 	bl	800574e <get_ldnumber>
 800589e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80058a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da01      	bge.n	80058aa <find_volume+0x26>
 80058a6:	230b      	movs	r3, #11
 80058a8:	e265      	b.n	8005d76 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80058aa:	4a9f      	ldr	r2, [pc, #636]	@ (8005b28 <find_volume+0x2a4>)
 80058ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80058b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <find_volume+0x3a>
 80058ba:	230c      	movs	r3, #12
 80058bc:	e25b      	b.n	8005d76 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	f023 0301 	bic.w	r3, r3, #1
 80058ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80058cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01a      	beq.n	800590a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80058d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff fdc7 	bl	800546c <disk_status>
 80058de:	4603      	mov	r3, r0
 80058e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80058e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10c      	bne.n	800590a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <find_volume+0x82>
 80058f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005902:	230a      	movs	r3, #10
 8005904:	e237      	b.n	8005d76 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005906:	2300      	movs	r3, #0
 8005908:	e235      	b.n	8005d76 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800590a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590c:	2200      	movs	r2, #0
 800590e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005912:	b2da      	uxtb	r2, r3
 8005914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005916:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff fdbf 	bl	80054a0 <disk_initialize>
 8005922:	4603      	mov	r3, r0
 8005924:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005928:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005934:	2303      	movs	r3, #3
 8005936:	e21e      	b.n	8005d76 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <find_volume+0xca>
 800593e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800594a:	230a      	movs	r3, #10
 800594c:	e213      	b.n	8005d76 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800594e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005950:	7858      	ldrb	r0, [r3, #1]
 8005952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005954:	330c      	adds	r3, #12
 8005956:	461a      	mov	r2, r3
 8005958:	2102      	movs	r1, #2
 800595a:	f7ff fe09 	bl	8005570 <disk_ioctl>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <find_volume+0xe4>
 8005964:	2301      	movs	r3, #1
 8005966:	e206      	b.n	8005d76 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596a:	899b      	ldrh	r3, [r3, #12]
 800596c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005970:	d80d      	bhi.n	800598e <find_volume+0x10a>
 8005972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005974:	899b      	ldrh	r3, [r3, #12]
 8005976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800597a:	d308      	bcc.n	800598e <find_volume+0x10a>
 800597c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597e:	899b      	ldrh	r3, [r3, #12]
 8005980:	461a      	mov	r2, r3
 8005982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005984:	899b      	ldrh	r3, [r3, #12]
 8005986:	3b01      	subs	r3, #1
 8005988:	4013      	ands	r3, r2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <find_volume+0x10e>
 800598e:	2301      	movs	r3, #1
 8005990:	e1f1      	b.n	8005d76 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005992:	2300      	movs	r3, #0
 8005994:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005996:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005998:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800599a:	f7ff ff1d 	bl	80057d8 <check_fs>
 800599e:	4603      	mov	r3, r0
 80059a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80059a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d149      	bne.n	8005a40 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80059ac:	2300      	movs	r3, #0
 80059ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80059b0:	e01e      	b.n	80059f0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80059b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80059b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80059c0:	4413      	add	r3, r2
 80059c2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80059c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c6:	3304      	adds	r3, #4
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d006      	beq.n	80059dc <find_volume+0x158>
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	3308      	adds	r3, #8
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fe02 	bl	80055dc <ld_dword>
 80059d8:	4602      	mov	r2, r0
 80059da:	e000      	b.n	80059de <find_volume+0x15a>
 80059dc:	2200      	movs	r2, #0
 80059de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	3358      	adds	r3, #88	@ 0x58
 80059e4:	443b      	add	r3, r7
 80059e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80059ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ec:	3301      	adds	r3, #1
 80059ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80059f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d9dd      	bls.n	80059b2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80059f6:	2300      	movs	r3, #0
 80059f8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80059fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <find_volume+0x182>
 8005a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a02:	3b01      	subs	r3, #1
 8005a04:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	3358      	adds	r3, #88	@ 0x58
 8005a0c:	443b      	add	r3, r7
 8005a0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005a12:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <find_volume+0x1a2>
 8005a1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a1e:	f7ff fedb 	bl	80057d8 <check_fs>
 8005a22:	4603      	mov	r3, r0
 8005a24:	e000      	b.n	8005a28 <find_volume+0x1a4>
 8005a26:	2303      	movs	r3, #3
 8005a28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005a2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d905      	bls.n	8005a40 <find_volume+0x1bc>
 8005a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a36:	3301      	adds	r3, #1
 8005a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d9e2      	bls.n	8005a06 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005a40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d101      	bne.n	8005a4c <find_volume+0x1c8>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e194      	b.n	8005d76 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d901      	bls.n	8005a58 <find_volume+0x1d4>
 8005a54:	230d      	movs	r3, #13
 8005a56:	e18e      	b.n	8005d76 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5a:	3338      	adds	r3, #56	@ 0x38
 8005a5c:	330b      	adds	r3, #11
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fda4 	bl	80055ac <ld_word>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6a:	899b      	ldrh	r3, [r3, #12]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d001      	beq.n	8005a74 <find_volume+0x1f0>
 8005a70:	230d      	movs	r3, #13
 8005a72:	e180      	b.n	8005d76 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a76:	3338      	adds	r3, #56	@ 0x38
 8005a78:	3316      	adds	r3, #22
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fd96 	bl	80055ac <ld_word>
 8005a80:	4603      	mov	r3, r0
 8005a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <find_volume+0x214>
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8c:	3338      	adds	r3, #56	@ 0x38
 8005a8e:	3324      	adds	r3, #36	@ 0x24
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fda3 	bl	80055dc <ld_dword>
 8005a96:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a9c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aaa:	789b      	ldrb	r3, [r3, #2]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d005      	beq.n	8005abc <find_volume+0x238>
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab2:	789b      	ldrb	r3, [r3, #2]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d001      	beq.n	8005abc <find_volume+0x238>
 8005ab8:	230d      	movs	r3, #13
 8005aba:	e15c      	b.n	8005d76 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abe:	789b      	ldrb	r3, [r3, #2]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ac4:	fb02 f303 	mul.w	r3, r2, r3
 8005ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005acc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad8:	895b      	ldrh	r3, [r3, #10]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d008      	beq.n	8005af0 <find_volume+0x26c>
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	895b      	ldrh	r3, [r3, #10]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae6:	895b      	ldrh	r3, [r3, #10]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <find_volume+0x270>
 8005af0:	230d      	movs	r3, #13
 8005af2:	e140      	b.n	8005d76 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af6:	3338      	adds	r3, #56	@ 0x38
 8005af8:	3311      	adds	r3, #17
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fd56 	bl	80055ac <ld_word>
 8005b00:	4603      	mov	r3, r0
 8005b02:	461a      	mov	r2, r3
 8005b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0a:	891b      	ldrh	r3, [r3, #8]
 8005b0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b0e:	8992      	ldrh	r2, [r2, #12]
 8005b10:	0952      	lsrs	r2, r2, #5
 8005b12:	b292      	uxth	r2, r2
 8005b14:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b18:	fb01 f202 	mul.w	r2, r1, r2
 8005b1c:	1a9b      	subs	r3, r3, r2
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <find_volume+0x2a8>
 8005b24:	230d      	movs	r3, #13
 8005b26:	e126      	b.n	8005d76 <find_volume+0x4f2>
 8005b28:	2000131c 	.word	0x2000131c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2e:	3338      	adds	r3, #56	@ 0x38
 8005b30:	3313      	adds	r3, #19
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fd3a 	bl	80055ac <ld_word>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005b3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <find_volume+0x2cc>
 8005b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b44:	3338      	adds	r3, #56	@ 0x38
 8005b46:	3320      	adds	r3, #32
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fd47 	bl	80055dc <ld_dword>
 8005b4e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b52:	3338      	adds	r3, #56	@ 0x38
 8005b54:	330e      	adds	r3, #14
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff fd28 	bl	80055ac <ld_word>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005b60:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <find_volume+0x2e6>
 8005b66:	230d      	movs	r3, #13
 8005b68:	e105      	b.n	8005d76 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005b6a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b6e:	4413      	add	r3, r2
 8005b70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b72:	8911      	ldrh	r1, [r2, #8]
 8005b74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b76:	8992      	ldrh	r2, [r2, #12]
 8005b78:	0952      	lsrs	r2, r2, #5
 8005b7a:	b292      	uxth	r2, r2
 8005b7c:	fbb1 f2f2 	udiv	r2, r1, r2
 8005b80:	b292      	uxth	r2, r2
 8005b82:	4413      	add	r3, r2
 8005b84:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005b86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d201      	bcs.n	8005b92 <find_volume+0x30e>
 8005b8e:	230d      	movs	r3, #13
 8005b90:	e0f1      	b.n	8005d76 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b9a:	8952      	ldrh	r2, [r2, #10]
 8005b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <find_volume+0x328>
 8005ba8:	230d      	movs	r3, #13
 8005baa:	e0e4      	b.n	8005d76 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005bac:	2303      	movs	r3, #3
 8005bae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d802      	bhi.n	8005bc2 <find_volume+0x33e>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d802      	bhi.n	8005bd2 <find_volume+0x34e>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	1c9a      	adds	r2, r3, #2
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bdc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bde:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005be0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005be4:	441a      	add	r2, r3
 8005be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005bea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bee:	441a      	add	r2, r3
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8005bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d11e      	bne.n	8005c3a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bfe:	3338      	adds	r3, #56	@ 0x38
 8005c00:	332a      	adds	r3, #42	@ 0x2a
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff fcd2 	bl	80055ac <ld_word>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <find_volume+0x38e>
 8005c0e:	230d      	movs	r3, #13
 8005c10:	e0b1      	b.n	8005d76 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c14:	891b      	ldrh	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <find_volume+0x39a>
 8005c1a:	230d      	movs	r3, #13
 8005c1c:	e0ab      	b.n	8005d76 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c20:	3338      	adds	r3, #56	@ 0x38
 8005c22:	332c      	adds	r3, #44	@ 0x2c
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fcd9 	bl	80055dc <ld_dword>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c38:	e01f      	b.n	8005c7a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3c:	891b      	ldrh	r3, [r3, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <find_volume+0x3c2>
 8005c42:	230d      	movs	r3, #13
 8005c44:	e097      	b.n	8005d76 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c4c:	441a      	add	r2, r3
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005c52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d103      	bne.n	8005c62 <find_volume+0x3de>
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	e00a      	b.n	8005c78 <find_volume+0x3f4>
 8005c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c64:	69da      	ldr	r2, [r3, #28]
 8005c66:	4613      	mov	r3, r2
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	4413      	add	r3, r2
 8005c6c:	085a      	lsrs	r2, r3, #1
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005c78:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c80:	899b      	ldrh	r3, [r3, #12]
 8005c82:	4619      	mov	r1, r3
 8005c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c86:	440b      	add	r3, r1
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c8c:	8989      	ldrh	r1, [r1, #12]
 8005c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d201      	bcs.n	8005c9a <find_volume+0x416>
 8005c96:	230d      	movs	r3, #13
 8005c98:	e06d      	b.n	8005d76 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca0:	619a      	str	r2, [r3, #24]
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cac:	2280      	movs	r2, #128	@ 0x80
 8005cae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d149      	bne.n	8005d4c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cba:	3338      	adds	r3, #56	@ 0x38
 8005cbc:	3330      	adds	r3, #48	@ 0x30
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fc74 	bl	80055ac <ld_word>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d140      	bne.n	8005d4c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ccc:	3301      	adds	r3, #1
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005cd2:	f7ff fd0f 	bl	80056f4 <move_window>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d137      	bne.n	8005d4c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cde:	2200      	movs	r2, #0
 8005ce0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce4:	3338      	adds	r3, #56	@ 0x38
 8005ce6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff fc5e 	bl	80055ac <ld_word>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d127      	bne.n	8005d4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfe:	3338      	adds	r3, #56	@ 0x38
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff fc6b 	bl	80055dc <ld_dword>
 8005d06:	4603      	mov	r3, r0
 8005d08:	4a1d      	ldr	r2, [pc, #116]	@ (8005d80 <find_volume+0x4fc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d11e      	bne.n	8005d4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d10:	3338      	adds	r3, #56	@ 0x38
 8005d12:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff fc60 	bl	80055dc <ld_dword>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	4a19      	ldr	r2, [pc, #100]	@ (8005d84 <find_volume+0x500>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d113      	bne.n	8005d4c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d26:	3338      	adds	r3, #56	@ 0x38
 8005d28:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fc55 	bl	80055dc <ld_dword>
 8005d32:	4602      	mov	r2, r0
 8005d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d36:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3a:	3338      	adds	r3, #56	@ 0x38
 8005d3c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff fc4b 	bl	80055dc <ld_dword>
 8005d46:	4602      	mov	r2, r0
 8005d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005d52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005d54:	4b0c      	ldr	r3, [pc, #48]	@ (8005d88 <find_volume+0x504>)
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d88 <find_volume+0x504>)
 8005d5e:	801a      	strh	r2, [r3, #0]
 8005d60:	4b09      	ldr	r3, [pc, #36]	@ (8005d88 <find_volume+0x504>)
 8005d62:	881a      	ldrh	r2, [r3, #0]
 8005d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d66:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8005d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6a:	4a08      	ldr	r2, [pc, #32]	@ (8005d8c <find_volume+0x508>)
 8005d6c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005d6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d70:	f7ff fc58 	bl	8005624 <clear_lock>
#endif
	return FR_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3758      	adds	r7, #88	@ 0x58
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	41615252 	.word	0x41615252
 8005d84:	61417272 	.word	0x61417272
 8005d88:	20001320 	.word	0x20001320
 8005d8c:	20001344 	.word	0x20001344

08005d90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005da2:	f107 0310 	add.w	r3, r7, #16
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fcd1 	bl	800574e <get_ldnumber>
 8005dac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	da01      	bge.n	8005db8 <f_mount+0x28>
 8005db4:	230b      	movs	r3, #11
 8005db6:	e02b      	b.n	8005e10 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005db8:	4a17      	ldr	r2, [pc, #92]	@ (8005e18 <f_mount+0x88>)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005dc8:	69b8      	ldr	r0, [r7, #24]
 8005dca:	f7ff fc2b 	bl	8005624 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	490d      	ldr	r1, [pc, #52]	@ (8005e18 <f_mount+0x88>)
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <f_mount+0x66>
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d001      	beq.n	8005dfa <f_mount+0x6a>
 8005df6:	2300      	movs	r3, #0
 8005df8:	e00a      	b.n	8005e10 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005dfa:	f107 010c 	add.w	r1, r7, #12
 8005dfe:	f107 0308 	add.w	r3, r7, #8
 8005e02:	2200      	movs	r2, #0
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fd3d 	bl	8005884 <find_volume>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3720      	adds	r7, #32
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	2000131c 	.word	0x2000131c

08005e1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	4613      	mov	r3, r2
 8005e28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005e32:	4b1f      	ldr	r3, [pc, #124]	@ (8005eb0 <FATFS_LinkDriverEx+0x94>)
 8005e34:	7a5b      	ldrb	r3, [r3, #9]
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d131      	bne.n	8005ea0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8005eb0 <FATFS_LinkDriverEx+0x94>)
 8005e3e:	7a5b      	ldrb	r3, [r3, #9]
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	461a      	mov	r2, r3
 8005e44:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb0 <FATFS_LinkDriverEx+0x94>)
 8005e46:	2100      	movs	r1, #0
 8005e48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005e4a:	4b19      	ldr	r3, [pc, #100]	@ (8005eb0 <FATFS_LinkDriverEx+0x94>)
 8005e4c:	7a5b      	ldrb	r3, [r3, #9]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	4a17      	ldr	r2, [pc, #92]	@ (8005eb0 <FATFS_LinkDriverEx+0x94>)
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005e5a:	4b15      	ldr	r3, [pc, #84]	@ (8005eb0 <FATFS_LinkDriverEx+0x94>)
 8005e5c:	7a5b      	ldrb	r3, [r3, #9]
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	4b13      	ldr	r3, [pc, #76]	@ (8005eb0 <FATFS_LinkDriverEx+0x94>)
 8005e64:	4413      	add	r3, r2
 8005e66:	79fa      	ldrb	r2, [r7, #7]
 8005e68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005e6a:	4b11      	ldr	r3, [pc, #68]	@ (8005eb0 <FATFS_LinkDriverEx+0x94>)
 8005e6c:	7a5b      	ldrb	r3, [r3, #9]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	b2d1      	uxtb	r1, r2
 8005e74:	4a0e      	ldr	r2, [pc, #56]	@ (8005eb0 <FATFS_LinkDriverEx+0x94>)
 8005e76:	7251      	strb	r1, [r2, #9]
 8005e78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005e7a:	7dbb      	ldrb	r3, [r7, #22]
 8005e7c:	3330      	adds	r3, #48	@ 0x30
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	3301      	adds	r3, #1
 8005e88:	223a      	movs	r2, #58	@ 0x3a
 8005e8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	3302      	adds	r3, #2
 8005e90:	222f      	movs	r2, #47	@ 0x2f
 8005e92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	3303      	adds	r3, #3
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	371c      	adds	r7, #28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	20001544 	.word	0x20001544

08005eb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff ffaa 	bl	8005e1c <FATFS_LinkDriverEx>
 8005ec8:	4603      	mov	r3, r0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <CLCD_Delay>:
******************************************************************************************************************/
#include "LCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	4603      	mov	r3, r0
 8005eda:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fb fae8 	bl	80014b4 <HAL_Delay>
}
 8005ee4:	bf00      	nop
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af02      	add	r7, sp, #8
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	70fb      	strb	r3, [r7, #3]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f023 030f 	bic.w	r3, r3, #15
 8005f02:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	7adb      	ldrb	r3, [r3, #11]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d007      	beq.n	8005f22 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	f043 0308 	orr.w	r3, r3, #8
 8005f18:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 8005f1a:	7bbb      	ldrb	r3, [r7, #14]
 8005f1c:	f043 0308 	orr.w	r3, r3, #8
 8005f20:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8005f22:	78bb      	ldrb	r3, [r7, #2]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d108      	bne.n	8005f3a <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	f043 0301 	orr.w	r3, r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8005f30:	7bbb      	ldrb	r3, [r7, #14]
 8005f32:	f043 0301 	orr.w	r3, r3, #1
 8005f36:	73bb      	strb	r3, [r7, #14]
 8005f38:	e00a      	b.n	8005f50 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8005f3a:	78bb      	ldrb	r3, [r7, #2]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d107      	bne.n	8005f50 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	f023 0301 	bic.w	r3, r3, #1
 8005f46:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8005f48:	7bbb      	ldrb	r3, [r7, #14]
 8005f4a:	f023 0301 	bic.w	r3, r3, #1
 8005f4e:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	f043 0304 	orr.w	r3, r3, #4
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	f7ff ffb9 	bl	8005ed2 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8005f64:	7bbb      	ldrb	r3, [r7, #14]
 8005f66:	f043 0304 	orr.w	r3, r3, #4
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8005f6e:	2001      	movs	r0, #1
 8005f70:	f7ff ffaf 	bl	8005ed2 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	791b      	ldrb	r3, [r3, #4]
 8005f80:	4619      	mov	r1, r3
 8005f82:	f107 0208 	add.w	r2, r7, #8
 8005f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	f7fc f979 	bl	8002284 <HAL_I2C_Master_Transmit>
}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	460b      	mov	r3, r1
 8005faa:	71fb      	strb	r3, [r7, #7]
 8005fac:	4613      	mov	r3, r2
 8005fae:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	79fa      	ldrb	r2, [r7, #7]
 8005fba:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	79ba      	ldrb	r2, [r7, #6]
 8005fc0:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	7e3a      	ldrb	r2, [r7, #24]
 8005fc6:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2228      	movs	r2, #40	@ 0x28
 8005fcc:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2206      	movs	r2, #6
 8005fd2:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	220c      	movs	r2, #12
 8005fd8:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2214      	movs	r2, #20
 8005fde:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2208      	movs	r2, #8
 8005fe4:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8005fe6:	2032      	movs	r0, #50	@ 0x32
 8005fe8:	f7ff ff73 	bl	8005ed2 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8005fec:	2200      	movs	r2, #0
 8005fee:	2133      	movs	r1, #51	@ 0x33
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f7ff ff7b 	bl	8005eec <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2133      	movs	r1, #51	@ 0x33
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff ff76 	bl	8005eec <CLCD_WriteI2C>
	CLCD_Delay(5);
 8006000:	2005      	movs	r0, #5
 8006002:	f7ff ff66 	bl	8005ed2 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8006006:	2200      	movs	r2, #0
 8006008:	2132      	movs	r1, #50	@ 0x32
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f7ff ff6e 	bl	8005eec <CLCD_WriteI2C>
	CLCD_Delay(5);
 8006010:	2005      	movs	r0, #5
 8006012:	f7ff ff5e 	bl	8005ed2 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8006016:	2200      	movs	r2, #0
 8006018:	2120      	movs	r1, #32
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7ff ff66 	bl	8005eec <CLCD_WriteI2C>
	CLCD_Delay(5);
 8006020:	2005      	movs	r0, #5
 8006022:	f7ff ff56 	bl	8005ed2 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	79db      	ldrb	r3, [r3, #7]
 800602a:	2200      	movs	r2, #0
 800602c:	4619      	mov	r1, r3
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f7ff ff5c 	bl	8005eec <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	7a1b      	ldrb	r3, [r3, #8]
 8006038:	2200      	movs	r2, #0
 800603a:	4619      	mov	r1, r3
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7ff ff55 	bl	8005eec <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	7a5b      	ldrb	r3, [r3, #9]
 8006046:	2200      	movs	r2, #0
 8006048:	4619      	mov	r1, r3
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff ff4e 	bl	8005eec <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	7a9b      	ldrb	r3, [r3, #10]
 8006054:	2200      	movs	r2, #0
 8006056:	4619      	mov	r1, r3
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff ff47 	bl	8005eec <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 800605e:	2200      	movs	r2, #0
 8006060:	2101      	movs	r1, #1
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f7ff ff42 	bl	8005eec <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8006068:	2200      	movs	r2, #0
 800606a:	2102      	movs	r1, #2
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff ff3d 	bl	8005eec <CLCD_WriteI2C>
}
 8006072:	bf00      	nop
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	460b      	mov	r3, r1
 8006084:	70fb      	strb	r3, [r7, #3]
 8006086:	4613      	mov	r3, r2
 8006088:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 800608a:	2300      	movs	r3, #0
 800608c:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	795b      	ldrb	r3, [r3, #5]
 8006092:	78fa      	ldrb	r2, [r7, #3]
 8006094:	429a      	cmp	r2, r3
 8006096:	d303      	bcc.n	80060a0 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	795b      	ldrb	r3, [r3, #5]
 800609c:	3b01      	subs	r3, #1
 800609e:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	799b      	ldrb	r3, [r3, #6]
 80060a4:	78ba      	ldrb	r2, [r7, #2]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d303      	bcc.n	80060b2 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	799b      	ldrb	r3, [r3, #6]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 80060b2:	78bb      	ldrb	r3, [r7, #2]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	73fb      	strb	r3, [r7, #15]
 80060bc:	e013      	b.n	80060e6 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 80060be:	78bb      	ldrb	r3, [r7, #2]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d103      	bne.n	80060cc <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	3340      	adds	r3, #64	@ 0x40
 80060c8:	73fb      	strb	r3, [r7, #15]
 80060ca:	e00c      	b.n	80060e6 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 80060cc:	78bb      	ldrb	r3, [r7, #2]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d103      	bne.n	80060da <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	3314      	adds	r3, #20
 80060d6:	73fb      	strb	r3, [r7, #15]
 80060d8:	e005      	b.n	80060e6 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 80060da:	78bb      	ldrb	r3, [r7, #2]
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d102      	bne.n	80060e6 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	3354      	adds	r3, #84	@ 0x54
 80060e4:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2200      	movs	r2, #0
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff fefa 	bl	8005eec <CLCD_WriteI2C>
}
 80060f8:	bf00      	nop
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	2201      	movs	r2, #1
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7ff feea 	bl	8005eec <CLCD_WriteI2C>
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 800612a:	e007      	b.n	800613c <CLCD_I2C_WriteString+0x1c>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	603a      	str	r2, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff ffe2 	bl	8006100 <CLCD_I2C_WriteChar>
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1f3      	bne.n	800612c <CLCD_I2C_WriteString+0xc>
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8006156:	2200      	movs	r2, #0
 8006158:	2101      	movs	r1, #1
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fec6 	bl	8005eec <CLCD_WriteI2C>
	CLCD_Delay(5);
 8006160:	2005      	movs	r0, #5
 8006162:	f7ff feb6 	bl	8005ed2 <CLCD_Delay>
}
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <CLCD_I2C_BlinkOn>:
{
	LCD->DISPLAYCTRL &= ~LCD_CURSORON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_BlinkOn(CLCD_I2C_Name* LCD)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
	LCD->DISPLAYCTRL |= LCD_BLINKON;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	7a1b      	ldrb	r3, [r3, #8]
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	b2da      	uxtb	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	721a      	strb	r2, [r3, #8]
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	7a1b      	ldrb	r3, [r3, #8]
 8006188:	2200      	movs	r2, #0
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff fead 	bl	8005eec <CLCD_WriteI2C>
}
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <CLCD_I2C_BlinkOff>:
void CLCD_I2C_BlinkOff(CLCD_I2C_Name* LCD)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	7a1b      	ldrb	r3, [r3, #8]
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	721a      	strb	r2, [r3, #8]
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	7a1b      	ldrb	r3, [r3, #8]
 80061b4:	2200      	movs	r2, #0
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff fe97 	bl	8005eec <CLCD_WriteI2C>
}
 80061be:	bf00      	nop
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80061cc:	2200      	movs	r2, #0
 80061ce:	2140      	movs	r1, #64	@ 0x40
 80061d0:	4803      	ldr	r0, [pc, #12]	@ (80061e0 <SELECT+0x18>)
 80061d2:	f7fb fef9 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80061d6:	2001      	movs	r0, #1
 80061d8:	f7fb f96c 	bl	80014b4 <HAL_Delay>
}
 80061dc:	bf00      	nop
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40020000 	.word	0x40020000

080061e4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80061e8:	2201      	movs	r2, #1
 80061ea:	2140      	movs	r1, #64	@ 0x40
 80061ec:	4803      	ldr	r0, [pc, #12]	@ (80061fc <DESELECT+0x18>)
 80061ee:	f7fb feeb 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80061f2:	2001      	movs	r0, #1
 80061f4:	f7fb f95e 	bl	80014b4 <HAL_Delay>
}
 80061f8:	bf00      	nop
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40020000 	.word	0x40020000

08006200 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800620a:	bf00      	nop
 800620c:	4b08      	ldr	r3, [pc, #32]	@ (8006230 <SPI_TxByte+0x30>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b02      	cmp	r3, #2
 8006218:	d1f8      	bne.n	800620c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800621a:	1df9      	adds	r1, r7, #7
 800621c:	2364      	movs	r3, #100	@ 0x64
 800621e:	2201      	movs	r2, #1
 8006220:	4803      	ldr	r0, [pc, #12]	@ (8006230 <SPI_TxByte+0x30>)
 8006222:	f7fd f8dc 	bl	80033de <HAL_SPI_Transmit>
}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	200000f8 	.word	0x200000f8

08006234 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8006240:	bf00      	nop
 8006242:	4b08      	ldr	r3, [pc, #32]	@ (8006264 <SPI_TxBuffer+0x30>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b02      	cmp	r3, #2
 800624e:	d1f8      	bne.n	8006242 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8006250:	887a      	ldrh	r2, [r7, #2]
 8006252:	2364      	movs	r3, #100	@ 0x64
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4803      	ldr	r0, [pc, #12]	@ (8006264 <SPI_TxBuffer+0x30>)
 8006258:	f7fd f8c1 	bl	80033de <HAL_SPI_Transmit>
}
 800625c:	bf00      	nop
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	200000f8 	.word	0x200000f8

08006268 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800626e:	23ff      	movs	r3, #255	@ 0xff
 8006270:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8006272:	bf00      	nop
 8006274:	4b09      	ldr	r3, [pc, #36]	@ (800629c <SPI_RxByte+0x34>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b02      	cmp	r3, #2
 8006280:	d1f8      	bne.n	8006274 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8006282:	1dba      	adds	r2, r7, #6
 8006284:	1df9      	adds	r1, r7, #7
 8006286:	2364      	movs	r3, #100	@ 0x64
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	2301      	movs	r3, #1
 800628c:	4803      	ldr	r0, [pc, #12]	@ (800629c <SPI_RxByte+0x34>)
 800628e:	f7fd f9ea 	bl	8003666 <HAL_SPI_TransmitReceive>

	return data;
 8006292:	79bb      	ldrb	r3, [r7, #6]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	200000f8 	.word	0x200000f8

080062a0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80062a8:	f7ff ffde 	bl	8006268 <SPI_RxByte>
 80062ac:	4603      	mov	r3, r0
 80062ae:	461a      	mov	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	701a      	strb	r2, [r3, #0]
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80062c2:	4b0a      	ldr	r3, [pc, #40]	@ (80062ec <SD_ReadyWait+0x30>)
 80062c4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80062c8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80062ca:	f7ff ffcd 	bl	8006268 <SPI_RxByte>
 80062ce:	4603      	mov	r3, r0
 80062d0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	2bff      	cmp	r3, #255	@ 0xff
 80062d6:	d004      	beq.n	80062e2 <SD_ReadyWait+0x26>
 80062d8:	4b04      	ldr	r3, [pc, #16]	@ (80062ec <SD_ReadyWait+0x30>)
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f3      	bne.n	80062ca <SD_ReadyWait+0xe>

	return res;
 80062e2:	79fb      	ldrb	r3, [r7, #7]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	200012a3 	.word	0x200012a3

080062f0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80062f6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80062fa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80062fc:	f7ff ff72 	bl	80061e4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8006300:	2300      	movs	r3, #0
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	e005      	b.n	8006312 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8006306:	20ff      	movs	r0, #255	@ 0xff
 8006308:	f7ff ff7a 	bl	8006200 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	3301      	adds	r3, #1
 8006310:	60bb      	str	r3, [r7, #8]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b09      	cmp	r3, #9
 8006316:	ddf6      	ble.n	8006306 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8006318:	f7ff ff56 	bl	80061c8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800631c:	2340      	movs	r3, #64	@ 0x40
 800631e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8006328:	2300      	movs	r3, #0
 800632a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8006330:	2395      	movs	r3, #149	@ 0x95
 8006332:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8006334:	463b      	mov	r3, r7
 8006336:	2106      	movs	r1, #6
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff ff7b 	bl	8006234 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800633e:	e002      	b.n	8006346 <SD_PowerOn+0x56>
	{
		cnt--;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3b01      	subs	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8006346:	f7ff ff8f 	bl	8006268 <SPI_RxByte>
 800634a:	4603      	mov	r3, r0
 800634c:	2b01      	cmp	r3, #1
 800634e:	d002      	beq.n	8006356 <SD_PowerOn+0x66>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1f4      	bne.n	8006340 <SD_PowerOn+0x50>
	}

	DESELECT();
 8006356:	f7ff ff45 	bl	80061e4 <DESELECT>
	SPI_TxByte(0XFF);
 800635a:	20ff      	movs	r0, #255	@ 0xff
 800635c:	f7ff ff50 	bl	8006200 <SPI_TxByte>

	PowerFlag = 1;
 8006360:	4b03      	ldr	r3, [pc, #12]	@ (8006370 <SD_PowerOn+0x80>)
 8006362:	2201      	movs	r2, #1
 8006364:	701a      	strb	r2, [r3, #0]
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20001551 	.word	0x20001551

08006374 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8006378:	4b03      	ldr	r3, [pc, #12]	@ (8006388 <SD_PowerOff+0x14>)
 800637a:	2200      	movs	r2, #0
 800637c:	701a      	strb	r2, [r3, #0]
}
 800637e:	bf00      	nop
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	20001551 	.word	0x20001551

0800638c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8006390:	4b03      	ldr	r3, [pc, #12]	@ (80063a0 <SD_CheckPower+0x14>)
 8006392:	781b      	ldrb	r3, [r3, #0]
}
 8006394:	4618      	mov	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20001551 	.word	0x20001551

080063a4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80063ae:	4b14      	ldr	r3, [pc, #80]	@ (8006400 <SD_RxDataBlock+0x5c>)
 80063b0:	22c8      	movs	r2, #200	@ 0xc8
 80063b2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80063b4:	f7ff ff58 	bl	8006268 <SPI_RxByte>
 80063b8:	4603      	mov	r3, r0
 80063ba:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	2bff      	cmp	r3, #255	@ 0xff
 80063c0:	d104      	bne.n	80063cc <SD_RxDataBlock+0x28>
 80063c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006400 <SD_RxDataBlock+0x5c>)
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1f3      	bne.n	80063b4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80063d0:	d001      	beq.n	80063d6 <SD_RxDataBlock+0x32>
 80063d2:	2300      	movs	r3, #0
 80063d4:	e00f      	b.n	80063f6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff ff5f 	bl	80062a0 <SPI_RxBytePtr>
	} while(len--);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	1e5a      	subs	r2, r3, #1
 80063e6:	603a      	str	r2, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1f4      	bne.n	80063d6 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80063ec:	f7ff ff3c 	bl	8006268 <SPI_RxByte>
	SPI_RxByte();
 80063f0:	f7ff ff3a 	bl	8006268 <SPI_RxByte>

	return TRUE;
 80063f4:	2301      	movs	r3, #1
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	200012a2 	.word	0x200012a2

08006404 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8006414:	f7ff ff52 	bl	80062bc <SD_ReadyWait>
 8006418:	4603      	mov	r3, r0
 800641a:	2bff      	cmp	r3, #255	@ 0xff
 800641c:	d001      	beq.n	8006422 <SD_TxDataBlock+0x1e>
 800641e:	2300      	movs	r3, #0
 8006420:	e02f      	b.n	8006482 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8006422:	78fb      	ldrb	r3, [r7, #3]
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff feeb 	bl	8006200 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	2bfd      	cmp	r3, #253	@ 0xfd
 800642e:	d020      	beq.n	8006472 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8006430:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff fefd 	bl	8006234 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800643a:	f7ff ff15 	bl	8006268 <SPI_RxByte>
		SPI_RxByte();
 800643e:	f7ff ff13 	bl	8006268 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8006442:	e00b      	b.n	800645c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8006444:	f7ff ff10 	bl	8006268 <SPI_RxByte>
 8006448:	4603      	mov	r3, r0
 800644a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	f003 031f 	and.w	r3, r3, #31
 8006452:	2b05      	cmp	r3, #5
 8006454:	d006      	beq.n	8006464 <SD_TxDataBlock+0x60>
			i++;
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	3301      	adds	r3, #1
 800645a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800645c:	7bbb      	ldrb	r3, [r7, #14]
 800645e:	2b40      	cmp	r3, #64	@ 0x40
 8006460:	d9f0      	bls.n	8006444 <SD_TxDataBlock+0x40>
 8006462:	e000      	b.n	8006466 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8006464:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8006466:	bf00      	nop
 8006468:	f7ff fefe 	bl	8006268 <SPI_RxByte>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0fa      	beq.n	8006468 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	2b05      	cmp	r3, #5
 800647a:	d101      	bne.n	8006480 <SD_TxDataBlock+0x7c>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <SD_TxDataBlock+0x7e>

	return FALSE;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	4603      	mov	r3, r0
 8006492:	6039      	str	r1, [r7, #0]
 8006494:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8006496:	f7ff ff11 	bl	80062bc <SD_ReadyWait>
 800649a:	4603      	mov	r3, r0
 800649c:	2bff      	cmp	r3, #255	@ 0xff
 800649e:	d001      	beq.n	80064a4 <SD_SendCmd+0x1a>
 80064a0:	23ff      	movs	r3, #255	@ 0xff
 80064a2:	e042      	b.n	800652a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff feaa 	bl	8006200 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	0e1b      	lsrs	r3, r3, #24
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff fea4 	bl	8006200 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	0c1b      	lsrs	r3, r3, #16
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fe9e 	bl	8006200 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	0a1b      	lsrs	r3, r3, #8
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff fe98 	bl	8006200 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff fe93 	bl	8006200 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	2b40      	cmp	r3, #64	@ 0x40
 80064de:	d102      	bne.n	80064e6 <SD_SendCmd+0x5c>
 80064e0:	2395      	movs	r3, #149	@ 0x95
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	e007      	b.n	80064f6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	2b48      	cmp	r3, #72	@ 0x48
 80064ea:	d102      	bne.n	80064f2 <SD_SendCmd+0x68>
 80064ec:	2387      	movs	r3, #135	@ 0x87
 80064ee:	73fb      	strb	r3, [r7, #15]
 80064f0:	e001      	b.n	80064f6 <SD_SendCmd+0x6c>
	else crc = 1;
 80064f2:	2301      	movs	r3, #1
 80064f4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff fe81 	bl	8006200 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	2b4c      	cmp	r3, #76	@ 0x4c
 8006502:	d101      	bne.n	8006508 <SD_SendCmd+0x7e>
 8006504:	f7ff feb0 	bl	8006268 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8006508:	230a      	movs	r3, #10
 800650a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800650c:	f7ff feac 	bl	8006268 <SPI_RxByte>
 8006510:	4603      	mov	r3, r0
 8006512:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8006514:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006518:	2b00      	cmp	r3, #0
 800651a:	da05      	bge.n	8006528 <SD_SendCmd+0x9e>
 800651c:	7bbb      	ldrb	r3, [r7, #14]
 800651e:	3b01      	subs	r3, #1
 8006520:	73bb      	strb	r3, [r7, #14]
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1f1      	bne.n	800650c <SD_SendCmd+0x82>

	return res;
 8006528:	7b7b      	ldrb	r3, [r7, #13]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8006534:	b590      	push	{r4, r7, lr}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <SD_disk_initialize+0x14>
 8006544:	2301      	movs	r3, #1
 8006546:	e0d6      	b.n	80066f6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8006548:	4b6d      	ldr	r3, [pc, #436]	@ (8006700 <SD_disk_initialize+0x1cc>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <SD_disk_initialize+0x2a>
 8006556:	4b6a      	ldr	r3, [pc, #424]	@ (8006700 <SD_disk_initialize+0x1cc>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	e0cb      	b.n	80066f6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800655e:	f7ff fec7 	bl	80062f0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8006562:	f7ff fe31 	bl	80061c8 <SELECT>

	/* check disk type */
	type = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800656a:	2100      	movs	r1, #0
 800656c:	2040      	movs	r0, #64	@ 0x40
 800656e:	f7ff ff8c 	bl	800648a <SD_SendCmd>
 8006572:	4603      	mov	r3, r0
 8006574:	2b01      	cmp	r3, #1
 8006576:	f040 80a6 	bne.w	80066c6 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800657a:	4b62      	ldr	r3, [pc, #392]	@ (8006704 <SD_disk_initialize+0x1d0>)
 800657c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006580:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8006582:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8006586:	2048      	movs	r0, #72	@ 0x48
 8006588:	f7ff ff7f 	bl	800648a <SD_SendCmd>
 800658c:	4603      	mov	r3, r0
 800658e:	2b01      	cmp	r3, #1
 8006590:	d158      	bne.n	8006644 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8006592:	2300      	movs	r3, #0
 8006594:	73fb      	strb	r3, [r7, #15]
 8006596:	e00c      	b.n	80065b2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8006598:	7bfc      	ldrb	r4, [r7, #15]
 800659a:	f7ff fe65 	bl	8006268 <SPI_RxByte>
 800659e:	4603      	mov	r3, r0
 80065a0:	461a      	mov	r2, r3
 80065a2:	f104 0310 	add.w	r3, r4, #16
 80065a6:	443b      	add	r3, r7
 80065a8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	3301      	adds	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d9ef      	bls.n	8006598 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80065b8:	7abb      	ldrb	r3, [r7, #10]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	f040 8083 	bne.w	80066c6 <SD_disk_initialize+0x192>
 80065c0:	7afb      	ldrb	r3, [r7, #11]
 80065c2:	2baa      	cmp	r3, #170	@ 0xaa
 80065c4:	d17f      	bne.n	80066c6 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80065c6:	2100      	movs	r1, #0
 80065c8:	2077      	movs	r0, #119	@ 0x77
 80065ca:	f7ff ff5e 	bl	800648a <SD_SendCmd>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d807      	bhi.n	80065e4 <SD_disk_initialize+0xb0>
 80065d4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80065d8:	2069      	movs	r0, #105	@ 0x69
 80065da:	f7ff ff56 	bl	800648a <SD_SendCmd>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80065e4:	4b47      	ldr	r3, [pc, #284]	@ (8006704 <SD_disk_initialize+0x1d0>)
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1eb      	bne.n	80065c6 <SD_disk_initialize+0x92>
 80065ee:	e000      	b.n	80065f2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80065f0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80065f2:	4b44      	ldr	r3, [pc, #272]	@ (8006704 <SD_disk_initialize+0x1d0>)
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d064      	beq.n	80066c6 <SD_disk_initialize+0x192>
 80065fc:	2100      	movs	r1, #0
 80065fe:	207a      	movs	r0, #122	@ 0x7a
 8006600:	f7ff ff43 	bl	800648a <SD_SendCmd>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d15d      	bne.n	80066c6 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]
 800660e:	e00c      	b.n	800662a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8006610:	7bfc      	ldrb	r4, [r7, #15]
 8006612:	f7ff fe29 	bl	8006268 <SPI_RxByte>
 8006616:	4603      	mov	r3, r0
 8006618:	461a      	mov	r2, r3
 800661a:	f104 0310 	add.w	r3, r4, #16
 800661e:	443b      	add	r3, r7
 8006620:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	3301      	adds	r3, #1
 8006628:	73fb      	strb	r3, [r7, #15]
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2b03      	cmp	r3, #3
 800662e:	d9ef      	bls.n	8006610 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8006630:	7a3b      	ldrb	r3, [r7, #8]
 8006632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <SD_disk_initialize+0x10a>
 800663a:	230c      	movs	r3, #12
 800663c:	e000      	b.n	8006640 <SD_disk_initialize+0x10c>
 800663e:	2304      	movs	r3, #4
 8006640:	73bb      	strb	r3, [r7, #14]
 8006642:	e040      	b.n	80066c6 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8006644:	2100      	movs	r1, #0
 8006646:	2077      	movs	r0, #119	@ 0x77
 8006648:	f7ff ff1f 	bl	800648a <SD_SendCmd>
 800664c:	4603      	mov	r3, r0
 800664e:	2b01      	cmp	r3, #1
 8006650:	d808      	bhi.n	8006664 <SD_disk_initialize+0x130>
 8006652:	2100      	movs	r1, #0
 8006654:	2069      	movs	r0, #105	@ 0x69
 8006656:	f7ff ff18 	bl	800648a <SD_SendCmd>
 800665a:	4603      	mov	r3, r0
 800665c:	2b01      	cmp	r3, #1
 800665e:	d801      	bhi.n	8006664 <SD_disk_initialize+0x130>
 8006660:	2302      	movs	r3, #2
 8006662:	e000      	b.n	8006666 <SD_disk_initialize+0x132>
 8006664:	2301      	movs	r3, #1
 8006666:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8006668:	7bbb      	ldrb	r3, [r7, #14]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d10e      	bne.n	800668c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800666e:	2100      	movs	r1, #0
 8006670:	2077      	movs	r0, #119	@ 0x77
 8006672:	f7ff ff0a 	bl	800648a <SD_SendCmd>
 8006676:	4603      	mov	r3, r0
 8006678:	2b01      	cmp	r3, #1
 800667a:	d80e      	bhi.n	800669a <SD_disk_initialize+0x166>
 800667c:	2100      	movs	r1, #0
 800667e:	2069      	movs	r0, #105	@ 0x69
 8006680:	f7ff ff03 	bl	800648a <SD_SendCmd>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d107      	bne.n	800669a <SD_disk_initialize+0x166>
 800668a:	e00d      	b.n	80066a8 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800668c:	2100      	movs	r1, #0
 800668e:	2041      	movs	r0, #65	@ 0x41
 8006690:	f7ff fefb 	bl	800648a <SD_SendCmd>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d005      	beq.n	80066a6 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800669a:	4b1a      	ldr	r3, [pc, #104]	@ (8006704 <SD_disk_initialize+0x1d0>)
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e1      	bne.n	8006668 <SD_disk_initialize+0x134>
 80066a4:	e000      	b.n	80066a8 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80066a6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80066a8:	4b16      	ldr	r3, [pc, #88]	@ (8006704 <SD_disk_initialize+0x1d0>)
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d007      	beq.n	80066c2 <SD_disk_initialize+0x18e>
 80066b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80066b6:	2050      	movs	r0, #80	@ 0x50
 80066b8:	f7ff fee7 	bl	800648a <SD_SendCmd>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <SD_disk_initialize+0x192>
 80066c2:	2300      	movs	r3, #0
 80066c4:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80066c6:	4a10      	ldr	r2, [pc, #64]	@ (8006708 <SD_disk_initialize+0x1d4>)
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
 80066ca:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80066cc:	f7ff fd8a 	bl	80061e4 <DESELECT>
	SPI_RxByte();
 80066d0:	f7ff fdca 	bl	8006268 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d008      	beq.n	80066ec <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80066da:	4b09      	ldr	r3, [pc, #36]	@ (8006700 <SD_disk_initialize+0x1cc>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	f023 0301 	bic.w	r3, r3, #1
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	4b06      	ldr	r3, [pc, #24]	@ (8006700 <SD_disk_initialize+0x1cc>)
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	e001      	b.n	80066f0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80066ec:	f7ff fe42 	bl	8006374 <SD_PowerOff>
	}

	return Stat;
 80066f0:	4b03      	ldr	r3, [pc, #12]	@ (8006700 <SD_disk_initialize+0x1cc>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b2db      	uxtb	r3, r3
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd90      	pop	{r4, r7, pc}
 80066fe:	bf00      	nop
 8006700:	20000020 	.word	0x20000020
 8006704:	200012a2 	.word	0x200012a2
 8006708:	20001550 	.word	0x20001550

0800670c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <SD_disk_status+0x14>
 800671c:	2301      	movs	r3, #1
 800671e:	e002      	b.n	8006726 <SD_disk_status+0x1a>
	return Stat;
 8006720:	4b04      	ldr	r3, [pc, #16]	@ (8006734 <SD_disk_status+0x28>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	b2db      	uxtb	r3, r3
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20000020 	.word	0x20000020

08006738 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <SD_disk_read+0x1c>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <SD_disk_read+0x20>
 8006754:	2304      	movs	r3, #4
 8006756:	e051      	b.n	80067fc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006758:	4b2a      	ldr	r3, [pc, #168]	@ (8006804 <SD_disk_read+0xcc>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <SD_disk_read+0x32>
 8006766:	2303      	movs	r3, #3
 8006768:	e048      	b.n	80067fc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800676a:	4b27      	ldr	r3, [pc, #156]	@ (8006808 <SD_disk_read+0xd0>)
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <SD_disk_read+0x44>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	025b      	lsls	r3, r3, #9
 800677a:	607b      	str	r3, [r7, #4]

	SELECT();
 800677c:	f7ff fd24 	bl	80061c8 <SELECT>

	if (count == 1)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d111      	bne.n	80067aa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	2051      	movs	r0, #81	@ 0x51
 800678a:	f7ff fe7e 	bl	800648a <SD_SendCmd>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d129      	bne.n	80067e8 <SD_disk_read+0xb0>
 8006794:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006798:	68b8      	ldr	r0, [r7, #8]
 800679a:	f7ff fe03 	bl	80063a4 <SD_RxDataBlock>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d021      	beq.n	80067e8 <SD_disk_read+0xb0>
 80067a4:	2300      	movs	r3, #0
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	e01e      	b.n	80067e8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	2052      	movs	r0, #82	@ 0x52
 80067ae:	f7ff fe6c 	bl	800648a <SD_SendCmd>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d117      	bne.n	80067e8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80067b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80067bc:	68b8      	ldr	r0, [r7, #8]
 80067be:	f7ff fdf1 	bl	80063a4 <SD_RxDataBlock>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <SD_disk_read+0xa6>
				buff += 512;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80067ce:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	603b      	str	r3, [r7, #0]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1ed      	bne.n	80067b8 <SD_disk_read+0x80>
 80067dc:	e000      	b.n	80067e0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80067de:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80067e0:	2100      	movs	r1, #0
 80067e2:	204c      	movs	r0, #76	@ 0x4c
 80067e4:	f7ff fe51 	bl	800648a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80067e8:	f7ff fcfc 	bl	80061e4 <DESELECT>
	SPI_RxByte();
 80067ec:	f7ff fd3c 	bl	8006268 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	bf14      	ite	ne
 80067f6:	2301      	movne	r3, #1
 80067f8:	2300      	moveq	r3, #0
 80067fa:	b2db      	uxtb	r3, r3
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20000020 	.word	0x20000020
 8006808:	20001550 	.word	0x20001550

0800680c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	4603      	mov	r3, r0
 800681a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d102      	bne.n	8006828 <SD_disk_write+0x1c>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <SD_disk_write+0x20>
 8006828:	2304      	movs	r3, #4
 800682a:	e06b      	b.n	8006904 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800682c:	4b37      	ldr	r3, [pc, #220]	@ (800690c <SD_disk_write+0x100>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <SD_disk_write+0x32>
 800683a:	2303      	movs	r3, #3
 800683c:	e062      	b.n	8006904 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800683e:	4b33      	ldr	r3, [pc, #204]	@ (800690c <SD_disk_write+0x100>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <SD_disk_write+0x44>
 800684c:	2302      	movs	r3, #2
 800684e:	e059      	b.n	8006904 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8006850:	4b2f      	ldr	r3, [pc, #188]	@ (8006910 <SD_disk_write+0x104>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <SD_disk_write+0x56>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	025b      	lsls	r3, r3, #9
 8006860:	607b      	str	r3, [r7, #4]

	SELECT();
 8006862:	f7ff fcb1 	bl	80061c8 <SELECT>

	if (count == 1)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d110      	bne.n	800688e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	2058      	movs	r0, #88	@ 0x58
 8006870:	f7ff fe0b 	bl	800648a <SD_SendCmd>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d13a      	bne.n	80068f0 <SD_disk_write+0xe4>
 800687a:	21fe      	movs	r1, #254	@ 0xfe
 800687c:	68b8      	ldr	r0, [r7, #8]
 800687e:	f7ff fdc1 	bl	8006404 <SD_TxDataBlock>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d033      	beq.n	80068f0 <SD_disk_write+0xe4>
			count = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	e030      	b.n	80068f0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800688e:	4b20      	ldr	r3, [pc, #128]	@ (8006910 <SD_disk_write+0x104>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d007      	beq.n	80068aa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800689a:	2100      	movs	r1, #0
 800689c:	2077      	movs	r0, #119	@ 0x77
 800689e:	f7ff fdf4 	bl	800648a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	2057      	movs	r0, #87	@ 0x57
 80068a6:	f7ff fdf0 	bl	800648a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	2059      	movs	r0, #89	@ 0x59
 80068ae:	f7ff fdec 	bl	800648a <SD_SendCmd>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11b      	bne.n	80068f0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80068b8:	21fc      	movs	r1, #252	@ 0xfc
 80068ba:	68b8      	ldr	r0, [r7, #8]
 80068bc:	f7ff fda2 	bl	8006404 <SD_TxDataBlock>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <SD_disk_write+0xd0>
				buff += 512;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80068cc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1ee      	bne.n	80068b8 <SD_disk_write+0xac>
 80068da:	e000      	b.n	80068de <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80068dc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80068de:	21fd      	movs	r1, #253	@ 0xfd
 80068e0:	2000      	movs	r0, #0
 80068e2:	f7ff fd8f 	bl	8006404 <SD_TxDataBlock>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <SD_disk_write+0xe4>
			{
				count = 1;
 80068ec:	2301      	movs	r3, #1
 80068ee:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80068f0:	f7ff fc78 	bl	80061e4 <DESELECT>
	SPI_RxByte();
 80068f4:	f7ff fcb8 	bl	8006268 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bf14      	ite	ne
 80068fe:	2301      	movne	r3, #1
 8006900:	2300      	moveq	r3, #0
 8006902:	b2db      	uxtb	r3, r3
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000020 	.word	0x20000020
 8006910:	20001550 	.word	0x20001550

08006914 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8006914:	b590      	push	{r4, r7, lr}
 8006916:	b08b      	sub	sp, #44	@ 0x2c
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	603a      	str	r2, [r7, #0]
 800691e:	71fb      	strb	r3, [r7, #7]
 8006920:	460b      	mov	r3, r1
 8006922:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <SD_disk_ioctl+0x1e>
 800692e:	2304      	movs	r3, #4
 8006930:	e113      	b.n	8006b5a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8006938:	79bb      	ldrb	r3, [r7, #6]
 800693a:	2b05      	cmp	r3, #5
 800693c:	d124      	bne.n	8006988 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d012      	beq.n	800696c <SD_disk_ioctl+0x58>
 8006946:	2b02      	cmp	r3, #2
 8006948:	dc1a      	bgt.n	8006980 <SD_disk_ioctl+0x6c>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d002      	beq.n	8006954 <SD_disk_ioctl+0x40>
 800694e:	2b01      	cmp	r3, #1
 8006950:	d006      	beq.n	8006960 <SD_disk_ioctl+0x4c>
 8006952:	e015      	b.n	8006980 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8006954:	f7ff fd0e 	bl	8006374 <SD_PowerOff>
			res = RES_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800695e:	e0fa      	b.n	8006b56 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8006960:	f7ff fcc6 	bl	80062f0 <SD_PowerOn>
			res = RES_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800696a:	e0f4      	b.n	8006b56 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	1c5c      	adds	r4, r3, #1
 8006970:	f7ff fd0c 	bl	800638c <SD_CheckPower>
 8006974:	4603      	mov	r3, r0
 8006976:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8006978:	2300      	movs	r3, #0
 800697a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800697e:	e0ea      	b.n	8006b56 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8006980:	2304      	movs	r3, #4
 8006982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006986:	e0e6      	b.n	8006b56 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006988:	4b76      	ldr	r3, [pc, #472]	@ (8006b64 <SD_disk_ioctl+0x250>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <SD_disk_ioctl+0x86>
 8006996:	2303      	movs	r3, #3
 8006998:	e0df      	b.n	8006b5a <SD_disk_ioctl+0x246>

		SELECT();
 800699a:	f7ff fc15 	bl	80061c8 <SELECT>

		switch (ctrl)
 800699e:	79bb      	ldrb	r3, [r7, #6]
 80069a0:	2b0d      	cmp	r3, #13
 80069a2:	f200 80c9 	bhi.w	8006b38 <SD_disk_ioctl+0x224>
 80069a6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ac <SD_disk_ioctl+0x98>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	08006aa3 	.word	0x08006aa3
 80069b0:	080069e5 	.word	0x080069e5
 80069b4:	08006a93 	.word	0x08006a93
 80069b8:	08006b39 	.word	0x08006b39
 80069bc:	08006b39 	.word	0x08006b39
 80069c0:	08006b39 	.word	0x08006b39
 80069c4:	08006b39 	.word	0x08006b39
 80069c8:	08006b39 	.word	0x08006b39
 80069cc:	08006b39 	.word	0x08006b39
 80069d0:	08006b39 	.word	0x08006b39
 80069d4:	08006b39 	.word	0x08006b39
 80069d8:	08006ab5 	.word	0x08006ab5
 80069dc:	08006ad9 	.word	0x08006ad9
 80069e0:	08006afd 	.word	0x08006afd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80069e4:	2100      	movs	r1, #0
 80069e6:	2049      	movs	r0, #73	@ 0x49
 80069e8:	f7ff fd4f 	bl	800648a <SD_SendCmd>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f040 80a6 	bne.w	8006b40 <SD_disk_ioctl+0x22c>
 80069f4:	f107 030c 	add.w	r3, r7, #12
 80069f8:	2110      	movs	r1, #16
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff fcd2 	bl	80063a4 <SD_RxDataBlock>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 809c 	beq.w	8006b40 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8006a08:	7b3b      	ldrb	r3, [r7, #12]
 8006a0a:	099b      	lsrs	r3, r3, #6
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d10d      	bne.n	8006a2e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8006a12:	7d7b      	ldrb	r3, [r7, #21]
 8006a14:	461a      	mov	r2, r3
 8006a16:	7d3b      	ldrb	r3, [r7, #20]
 8006a18:	021b      	lsls	r3, r3, #8
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	4413      	add	r3, r2
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3301      	adds	r3, #1
 8006a22:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8006a24:	8bfb      	ldrh	r3, [r7, #30]
 8006a26:	029a      	lsls	r2, r3, #10
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	e02d      	b.n	8006a8a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006a2e:	7c7b      	ldrb	r3, [r7, #17]
 8006a30:	f003 030f 	and.w	r3, r3, #15
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	7dbb      	ldrb	r3, [r7, #22]
 8006a38:	09db      	lsrs	r3, r3, #7
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	4413      	add	r3, r2
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	7d7b      	ldrb	r3, [r7, #21]
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	f003 0306 	and.w	r3, r3, #6
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	3302      	adds	r3, #2
 8006a52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8006a56:	7d3b      	ldrb	r3, [r7, #20]
 8006a58:	099b      	lsrs	r3, r3, #6
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	7cfb      	ldrb	r3, [r7, #19]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	4413      	add	r3, r2
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	7cbb      	ldrb	r3, [r7, #18]
 8006a6a:	029b      	lsls	r3, r3, #10
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	4413      	add	r3, r2
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3301      	adds	r3, #1
 8006a7a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8006a7c:	8bfa      	ldrh	r2, [r7, #30]
 8006a7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a82:	3b09      	subs	r3, #9
 8006a84:	409a      	lsls	r2, r3
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8006a90:	e056      	b.n	8006b40 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a98:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8006aa0:	e055      	b.n	8006b4e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8006aa2:	f7ff fc0b 	bl	80062bc <SD_ReadyWait>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2bff      	cmp	r3, #255	@ 0xff
 8006aaa:	d14b      	bne.n	8006b44 <SD_disk_ioctl+0x230>
 8006aac:	2300      	movs	r3, #0
 8006aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8006ab2:	e047      	b.n	8006b44 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	2049      	movs	r0, #73	@ 0x49
 8006ab8:	f7ff fce7 	bl	800648a <SD_SendCmd>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d142      	bne.n	8006b48 <SD_disk_ioctl+0x234>
 8006ac2:	2110      	movs	r1, #16
 8006ac4:	6a38      	ldr	r0, [r7, #32]
 8006ac6:	f7ff fc6d 	bl	80063a4 <SD_RxDataBlock>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d03b      	beq.n	8006b48 <SD_disk_ioctl+0x234>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8006ad6:	e037      	b.n	8006b48 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8006ad8:	2100      	movs	r1, #0
 8006ada:	204a      	movs	r0, #74	@ 0x4a
 8006adc:	f7ff fcd5 	bl	800648a <SD_SendCmd>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d132      	bne.n	8006b4c <SD_disk_ioctl+0x238>
 8006ae6:	2110      	movs	r1, #16
 8006ae8:	6a38      	ldr	r0, [r7, #32]
 8006aea:	f7ff fc5b 	bl	80063a4 <SD_RxDataBlock>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d02b      	beq.n	8006b4c <SD_disk_ioctl+0x238>
 8006af4:	2300      	movs	r3, #0
 8006af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8006afa:	e027      	b.n	8006b4c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8006afc:	2100      	movs	r1, #0
 8006afe:	207a      	movs	r0, #122	@ 0x7a
 8006b00:	f7ff fcc3 	bl	800648a <SD_SendCmd>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d116      	bne.n	8006b38 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006b10:	e00b      	b.n	8006b2a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8006b12:	6a3c      	ldr	r4, [r7, #32]
 8006b14:	1c63      	adds	r3, r4, #1
 8006b16:	623b      	str	r3, [r7, #32]
 8006b18:	f7ff fba6 	bl	8006268 <SPI_RxByte>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8006b20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b24:	3301      	adds	r3, #1
 8006b26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006b2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d9ef      	bls.n	8006b12 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8006b38:	2304      	movs	r3, #4
 8006b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b3e:	e006      	b.n	8006b4e <SD_disk_ioctl+0x23a>
			break;
 8006b40:	bf00      	nop
 8006b42:	e004      	b.n	8006b4e <SD_disk_ioctl+0x23a>
			break;
 8006b44:	bf00      	nop
 8006b46:	e002      	b.n	8006b4e <SD_disk_ioctl+0x23a>
			break;
 8006b48:	bf00      	nop
 8006b4a:	e000      	b.n	8006b4e <SD_disk_ioctl+0x23a>
			break;
 8006b4c:	bf00      	nop
		}

		DESELECT();
 8006b4e:	f7ff fb49 	bl	80061e4 <DESELECT>
		SPI_RxByte();
 8006b52:	f7ff fb89 	bl	8006268 <SPI_RxByte>
	}

	return res;
 8006b56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	372c      	adds	r7, #44	@ 0x2c
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd90      	pop	{r4, r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20000020 	.word	0x20000020

08006b68 <flash_unlock>:
 */

#include "flash.h"

void flash_unlock()
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8006b6c:	f7fa fdfc 	bl	8001768 <HAL_FLASH_Unlock>
}
 8006b70:	bf00      	nop
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <flash_lock>:

void flash_lock()
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  HAL_FLASH_Lock();
 8006b78:	f7fa fe18 	bl	80017ac <HAL_FLASH_Lock>
}
 8006b7c:	bf00      	nop
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <flash_erease>:
void flash_erease(uint32_t sector)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.Sector = sector;  //This parameter must be a value of @ref FLASHEx_Sectors
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	617b      	str	r3, [r7, #20]
	eraseInit.NbSectors = 1;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	61bb      	str	r3, [r7, #24]
	eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]
	eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8006b94:	2302      	movs	r3, #2
 8006b96:	61fb      	str	r3, [r7, #28]
	uint32_t PageError;
	HAL_FLASHEx_Erase(&eraseInit,&PageError);
 8006b98:	f107 0208 	add.w	r2, r7, #8
 8006b9c:	f107 030c 	add.w	r3, r7, #12
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fa ff52 	bl	8001a4c <HAL_FLASHEx_Erase>
}
 8006ba8:	bf00      	nop
 8006baa:	3720      	adds	r7, #32
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <flash_write_arr>:
void flash_write_arr(uint32_t addr,uint8_t *data,uint16_t len)
{
 8006bb0:	b5b0      	push	{r4, r5, r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	80fb      	strh	r3, [r7, #6]
	 for(uint16_t i=0;i<len;i+=2)
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	82fb      	strh	r3, [r7, #22]
 8006bc2:	e019      	b.n	8006bf8 <flash_write_arr+0x48>
	{
		 HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr+i ,*(data + i) | (uint16_t)*(data+i+1)<<8);
 8006bc4:	8afa      	ldrh	r2, [r7, #22]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	18d1      	adds	r1, r2, r3
 8006bca:	8afb      	ldrh	r3, [r7, #22]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	4413      	add	r3, r2
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	8afb      	ldrh	r3, [r7, #22]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	4413      	add	r3, r2
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	4303      	orrs	r3, r0
 8006be2:	17da      	asrs	r2, r3, #31
 8006be4:	461c      	mov	r4, r3
 8006be6:	4615      	mov	r5, r2
 8006be8:	4622      	mov	r2, r4
 8006bea:	462b      	mov	r3, r5
 8006bec:	2001      	movs	r0, #1
 8006bee:	f7fa fd67 	bl	80016c0 <HAL_FLASH_Program>
	 for(uint16_t i=0;i<len;i+=2)
 8006bf2:	8afb      	ldrh	r3, [r7, #22]
 8006bf4:	3302      	adds	r3, #2
 8006bf6:	82fb      	strh	r3, [r7, #22]
 8006bf8:	8afa      	ldrh	r2, [r7, #22]
 8006bfa:	88fb      	ldrh	r3, [r7, #6]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d3e1      	bcc.n	8006bc4 <flash_write_arr+0x14>
	 }
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bdb0      	pop	{r4, r5, r7, pc}

08006c0a <flash_read_arr>:
void flash_read_arr(uint32_t addr,uint8_t *data,uint16_t len)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b089      	sub	sp, #36	@ 0x24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	4613      	mov	r3, r2
 8006c16:	80fb      	strh	r3, [r7, #6]
	 for(uint16_t i=0;i<len;i+=2){
 8006c18:	2300      	movs	r3, #0
 8006c1a:	83fb      	strh	r3, [r7, #30]
 8006c1c:	e018      	b.n	8006c50 <flash_read_arr+0x46>
		 volatile uint32_t *p= (volatile uint32_t *)(addr+i);
 8006c1e:	8bfa      	ldrh	r2, [r7, #30]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	61bb      	str	r3, [r7, #24]
		 uint16_t data_temp=*p;
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	82fb      	strh	r3, [r7, #22]
		 //cach 1
//		 data[i] = data_temp;
//		 data[i+1] = data_temp>>8;
		 //cach 2
		 *(data+i) = data_temp;
 8006c2c:	8bfb      	ldrh	r3, [r7, #30]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	4413      	add	r3, r2
 8006c32:	8afa      	ldrh	r2, [r7, #22]
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]
		 *(data+i+1) = data_temp>>8;
 8006c38:	8afb      	ldrh	r3, [r7, #22]
 8006c3a:	0a1b      	lsrs	r3, r3, #8
 8006c3c:	b299      	uxth	r1, r3
 8006c3e:	8bfb      	ldrh	r3, [r7, #30]
 8006c40:	3301      	adds	r3, #1
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	4413      	add	r3, r2
 8006c46:	b2ca      	uxtb	r2, r1
 8006c48:	701a      	strb	r2, [r3, #0]
	 for(uint16_t i=0;i<len;i+=2){
 8006c4a:	8bfb      	ldrh	r3, [r7, #30]
 8006c4c:	3302      	adds	r3, #2
 8006c4e:	83fb      	strh	r3, [r7, #30]
 8006c50:	8bfa      	ldrh	r2, [r7, #30]
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d3e2      	bcc.n	8006c1e <flash_read_arr+0x14>
	 }
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	3724      	adds	r7, #36	@ 0x24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
	...

08006c68 <process_button_pad_value>:
 *
 */
#include "keypad.h"
//////////////////////button fuctions/////////////////////////////
uint16_t process_button_pad_value(uint16_t btn_pad_value)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	80fb      	strh	r3, [r7, #6]
  static button_state_t btn_sm_state = NOT_PRESSED;
  static uint32_t curr_time = 0;

  switch(btn_sm_state){
 8006c72:	4b29      	ldr	r3, [pc, #164]	@ (8006d18 <process_button_pad_value+0xb0>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d026      	beq.n	8006cc8 <process_button_pad_value+0x60>
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	dc47      	bgt.n	8006d0e <process_button_pad_value+0xa6>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <process_button_pad_value+0x20>
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d00c      	beq.n	8006ca0 <process_button_pad_value+0x38>
 8006c86:	e042      	b.n	8006d0e <process_button_pad_value+0xa6>
    case NOT_PRESSED:{
      if(btn_pad_value){
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d03a      	beq.n	8006d04 <process_button_pad_value+0x9c>
        btn_sm_state = BOUNCE;
 8006c8e:	4b22      	ldr	r3, [pc, #136]	@ (8006d18 <process_button_pad_value+0xb0>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	701a      	strb	r2, [r3, #0]
        curr_time = HAL_GetTick();
 8006c94:	f7fa fc02 	bl	800149c <HAL_GetTick>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	4a20      	ldr	r2, [pc, #128]	@ (8006d1c <process_button_pad_value+0xb4>)
 8006c9c:	6013      	str	r3, [r2, #0]
      }
      break;
 8006c9e:	e031      	b.n	8006d04 <process_button_pad_value+0x9c>
    }
    case BOUNCE:{
      if(HAL_GetTick() - curr_time >= 50 ){
 8006ca0:	f7fa fbfc 	bl	800149c <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d1c <process_button_pad_value+0xb4>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b31      	cmp	r3, #49	@ 0x31
 8006cae:	d92b      	bls.n	8006d08 <process_button_pad_value+0xa0>
        //50ms has passed
        if(btn_pad_value){
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <process_button_pad_value+0x58>
          btn_sm_state = PRESSED;
 8006cb6:	4b18      	ldr	r3, [pc, #96]	@ (8006d18 <process_button_pad_value+0xb0>)
 8006cb8:	2202      	movs	r2, #2
 8006cba:	701a      	strb	r2, [r3, #0]
          return btn_pad_value;
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	e027      	b.n	8006d10 <process_button_pad_value+0xa8>
        }
        else
          btn_sm_state = NOT_PRESSED;
 8006cc0:	4b15      	ldr	r3, [pc, #84]	@ (8006d18 <process_button_pad_value+0xb0>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006cc6:	e01f      	b.n	8006d08 <process_button_pad_value+0xa0>
    }
    case PRESSED:{
      if(!btn_pad_value){
 8006cc8:	88fb      	ldrh	r3, [r7, #6]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d108      	bne.n	8006ce0 <process_button_pad_value+0x78>
        btn_sm_state = BOUNCE;
 8006cce:	4b12      	ldr	r3, [pc, #72]	@ (8006d18 <process_button_pad_value+0xb0>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	701a      	strb	r2, [r3, #0]
        curr_time = HAL_GetTick();
 8006cd4:	f7fa fbe2 	bl	800149c <HAL_GetTick>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	4a10      	ldr	r2, [pc, #64]	@ (8006d1c <process_button_pad_value+0xb4>)
 8006cdc:	6013      	str	r3, [r2, #0]
				if(HAL_GetTick() - curr_time >= 300 ){
					btn_sm_state = BOUNCE;
					curr_time = HAL_GetTick();
				}
			}
      break;
 8006cde:	e015      	b.n	8006d0c <process_button_pad_value+0xa4>
				if(HAL_GetTick() - curr_time >= 300 ){
 8006ce0:	f7fa fbdc 	bl	800149c <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d1c <process_button_pad_value+0xb4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006cf0:	d30c      	bcc.n	8006d0c <process_button_pad_value+0xa4>
					btn_sm_state = BOUNCE;
 8006cf2:	4b09      	ldr	r3, [pc, #36]	@ (8006d18 <process_button_pad_value+0xb0>)
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	701a      	strb	r2, [r3, #0]
					curr_time = HAL_GetTick();
 8006cf8:	f7fa fbd0 	bl	800149c <HAL_GetTick>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	4a07      	ldr	r2, [pc, #28]	@ (8006d1c <process_button_pad_value+0xb4>)
 8006d00:	6013      	str	r3, [r2, #0]
      break;
 8006d02:	e003      	b.n	8006d0c <process_button_pad_value+0xa4>
      break;
 8006d04:	bf00      	nop
 8006d06:	e002      	b.n	8006d0e <process_button_pad_value+0xa6>
      break;
 8006d08:	bf00      	nop
 8006d0a:	e000      	b.n	8006d0e <process_button_pad_value+0xa6>
      break;
 8006d0c:	bf00      	nop
    }

  }

  return 0;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20001552 	.word	0x20001552
 8006d1c:	20001554 	.word	0x20001554

08006d20 <read_keypad>:

///////////////////////////scan keypad////////////////////////////////////////////
uint16_t read_keypad (void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
	uint16_t key_state = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	80fb      	strh	r3, [r7, #6]
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  //Pull the R1 low
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d30:	488d      	ldr	r0, [pc, #564]	@ (8006f68 <read_keypad+0x248>)
 8006d32:	f7fb f949 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8006d36:	2201      	movs	r2, #1
 8006d38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006d3c:	488a      	ldr	r0, [pc, #552]	@ (8006f68 <read_keypad+0x248>)
 8006d3e:	f7fb f943 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8006d42:	2201      	movs	r2, #1
 8006d44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006d48:	4887      	ldr	r0, [pc, #540]	@ (8006f68 <read_keypad+0x248>)
 8006d4a:	f7fb f93d 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006d54:	4884      	ldr	r0, [pc, #528]	@ (8006f68 <read_keypad+0x248>)
 8006d56:	f7fb f937 	bl	8001fc8 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8006d5a:	2140      	movs	r1, #64	@ 0x40
 8006d5c:	4883      	ldr	r0, [pc, #524]	@ (8006f6c <read_keypad+0x24c>)
 8006d5e:	f7fb f91b 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d103      	bne.n	8006d70 <read_keypad+0x50>
	{
		key_state |= (1 << 0); // button 1
 8006d68:	88fb      	ldrh	r3, [r7, #6]
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8006d70:	2180      	movs	r1, #128	@ 0x80
 8006d72:	487e      	ldr	r0, [pc, #504]	@ (8006f6c <read_keypad+0x24c>)
 8006d74:	f7fb f910 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <read_keypad+0x66>
	{
		key_state |= (1 << 1); // button 2
 8006d7e:	88fb      	ldrh	r3, [r7, #6]
 8006d80:	f043 0302 	orr.w	r3, r3, #2
 8006d84:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8006d86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006d8a:	4878      	ldr	r0, [pc, #480]	@ (8006f6c <read_keypad+0x24c>)
 8006d8c:	f7fb f904 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <read_keypad+0x7e>
	{
		key_state |= (1 << 2); // button 3
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	f043 0304 	orr.w	r3, r3, #4
 8006d9c:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8006d9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006da2:	4872      	ldr	r0, [pc, #456]	@ (8006f6c <read_keypad+0x24c>)
 8006da4:	f7fb f8f8 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <read_keypad+0x96>
	{
		key_state |= (1 << 3); // button A
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	f043 0308 	orr.w	r3, r3, #8
 8006db4:	80fb      	strh	r3, [r7, #6]
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8006db6:	2201      	movs	r2, #1
 8006db8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006dbc:	486a      	ldr	r0, [pc, #424]	@ (8006f68 <read_keypad+0x248>)
 8006dbe:	f7fb f903 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Pull the R2 High
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006dc8:	4867      	ldr	r0, [pc, #412]	@ (8006f68 <read_keypad+0x248>)
 8006dca:	f7fb f8fd 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006dd4:	4864      	ldr	r0, [pc, #400]	@ (8006f68 <read_keypad+0x248>)
 8006dd6:	f7fb f8f7 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006de0:	4861      	ldr	r0, [pc, #388]	@ (8006f68 <read_keypad+0x248>)
 8006de2:	f7fb f8f1 	bl	8001fc8 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8006de6:	2140      	movs	r1, #64	@ 0x40
 8006de8:	4860      	ldr	r0, [pc, #384]	@ (8006f6c <read_keypad+0x24c>)
 8006dea:	f7fb f8d5 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d103      	bne.n	8006dfc <read_keypad+0xdc>
	{
		key_state |= (1 << 4); // button 4
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	f043 0310 	orr.w	r3, r3, #16
 8006dfa:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8006dfc:	2180      	movs	r1, #128	@ 0x80
 8006dfe:	485b      	ldr	r0, [pc, #364]	@ (8006f6c <read_keypad+0x24c>)
 8006e00:	f7fb f8ca 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d103      	bne.n	8006e12 <read_keypad+0xf2>
	{
		key_state |= (1 << 5); // button 5
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
 8006e0c:	f043 0320 	orr.w	r3, r3, #32
 8006e10:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8006e12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006e16:	4855      	ldr	r0, [pc, #340]	@ (8006f6c <read_keypad+0x24c>)
 8006e18:	f7fb f8be 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d103      	bne.n	8006e2a <read_keypad+0x10a>
	{
		key_state |= (1 << 6); // button 6
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e28:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8006e2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006e2e:	484f      	ldr	r0, [pc, #316]	@ (8006f6c <read_keypad+0x24c>)
 8006e30:	f7fb f8b2 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <read_keypad+0x122>
	{
		key_state |= (1 << 7); // button B
 8006e3a:	88fb      	ldrh	r3, [r7, #6]
 8006e3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e40:	80fb      	strh	r3, [r7, #6]
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8006e42:	2201      	movs	r2, #1
 8006e44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006e48:	4847      	ldr	r0, [pc, #284]	@ (8006f68 <read_keypad+0x248>)
 8006e4a:	f7fb f8bd 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006e54:	4844      	ldr	r0, [pc, #272]	@ (8006f68 <read_keypad+0x248>)
 8006e56:	f7fb f8b7 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Pull the R3 High
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006e60:	4841      	ldr	r0, [pc, #260]	@ (8006f68 <read_keypad+0x248>)
 8006e62:	f7fb f8b1 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8006e66:	2201      	movs	r2, #1
 8006e68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006e6c:	483e      	ldr	r0, [pc, #248]	@ (8006f68 <read_keypad+0x248>)
 8006e6e:	f7fb f8ab 	bl	8001fc8 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8006e72:	2140      	movs	r1, #64	@ 0x40
 8006e74:	483d      	ldr	r0, [pc, #244]	@ (8006f6c <read_keypad+0x24c>)
 8006e76:	f7fb f88f 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d103      	bne.n	8006e88 <read_keypad+0x168>
	{
		key_state |= (1 << 8); // button 7
 8006e80:	88fb      	ldrh	r3, [r7, #6]
 8006e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e86:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8006e88:	2180      	movs	r1, #128	@ 0x80
 8006e8a:	4838      	ldr	r0, [pc, #224]	@ (8006f6c <read_keypad+0x24c>)
 8006e8c:	f7fb f884 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d103      	bne.n	8006e9e <read_keypad+0x17e>
	{
		key_state |= (1 << 9); // button 8
 8006e96:	88fb      	ldrh	r3, [r7, #6]
 8006e98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e9c:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8006e9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006ea2:	4832      	ldr	r0, [pc, #200]	@ (8006f6c <read_keypad+0x24c>)
 8006ea4:	f7fb f878 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d103      	bne.n	8006eb6 <read_keypad+0x196>
	{
		key_state |= (1 << 10); // button 9
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006eb4:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8006eb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006eba:	482c      	ldr	r0, [pc, #176]	@ (8006f6c <read_keypad+0x24c>)
 8006ebc:	f7fb f86c 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d103      	bne.n	8006ece <read_keypad+0x1ae>
	{
		key_state |= (1 << 11); // button C
 8006ec6:	88fb      	ldrh	r3, [r7, #6]
 8006ec8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006ecc:	80fb      	strh	r3, [r7, #6]
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ed4:	4824      	ldr	r0, [pc, #144]	@ (8006f68 <read_keypad+0x248>)
 8006ed6:	f7fb f877 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8006eda:	2201      	movs	r2, #1
 8006edc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006ee0:	4821      	ldr	r0, [pc, #132]	@ (8006f68 <read_keypad+0x248>)
 8006ee2:	f7fb f871 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006eec:	481e      	ldr	r0, [pc, #120]	@ (8006f68 <read_keypad+0x248>)
 8006eee:	f7fb f86b 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Pull the R4 High
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006ef8:	481b      	ldr	r0, [pc, #108]	@ (8006f68 <read_keypad+0x248>)
 8006efa:	f7fb f865 	bl	8001fc8 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8006efe:	2140      	movs	r1, #64	@ 0x40
 8006f00:	481a      	ldr	r0, [pc, #104]	@ (8006f6c <read_keypad+0x24c>)
 8006f02:	f7fb f849 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d103      	bne.n	8006f14 <read_keypad+0x1f4>
	{
		key_state |= (1 << 12); // button *
 8006f0c:	88fb      	ldrh	r3, [r7, #6]
 8006f0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006f12:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8006f14:	2180      	movs	r1, #128	@ 0x80
 8006f16:	4815      	ldr	r0, [pc, #84]	@ (8006f6c <read_keypad+0x24c>)
 8006f18:	f7fb f83e 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d103      	bne.n	8006f2a <read_keypad+0x20a>
	{
		key_state |= (1 << 13); // button 0
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006f28:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 8006f2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006f2e:	480f      	ldr	r0, [pc, #60]	@ (8006f6c <read_keypad+0x24c>)
 8006f30:	f7fb f832 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d103      	bne.n	8006f42 <read_keypad+0x222>
	{
		key_state |= (1 << 14); // button #
 8006f3a:	88fb      	ldrh	r3, [r7, #6]
 8006f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f40:	80fb      	strh	r3, [r7, #6]
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8006f42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f46:	4809      	ldr	r0, [pc, #36]	@ (8006f6c <read_keypad+0x24c>)
 8006f48:	f7fb f826 	bl	8001f98 <HAL_GPIO_ReadPin>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d105      	bne.n	8006f5e <read_keypad+0x23e>
	{
		key_state |= (1 << 15); // button D
 8006f52:	88fb      	ldrh	r3, [r7, #6]
 8006f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f5c:	80fb      	strh	r3, [r7, #6]
	}

	return key_state ;
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40020400 	.word	0x40020400
 8006f6c:	40020800 	.word	0x40020800

08006f70 <print_cli>:
#include "stdarg.h"
#include "stdio.h"
extern UART_HandleTypeDef huart2;

void print_cli(const char* str, ...)
{
 8006f70:	b40f      	push	{r0, r1, r2, r3}
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b0a2      	sub	sp, #136	@ 0x88
 8006f76:	af00      	add	r7, sp, #0
  char stringArray[128];
	
	va_list args;
	va_start(args,str);
 8006f78:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8006f7c:	603b      	str	r3, [r7, #0]
	uint8_t len_str = vsprintf(stringArray,str,args);
 8006f7e:	1d3b      	adds	r3, r7, #4
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f86:	4618      	mov	r0, r3
 8006f88:	f006 f914 	bl	800d1b4 <vsiprintf>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	va_end(args);
	
	HAL_UART_Transmit(&huart2,(uint8_t *)stringArray,len_str,200);
 8006f92:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	1d39      	adds	r1, r7, #4
 8006f9a:	23c8      	movs	r3, #200	@ 0xc8
 8006f9c:	4804      	ldr	r0, [pc, #16]	@ (8006fb0 <print_cli+0x40>)
 8006f9e:	f7fd fe41 	bl	8004c24 <HAL_UART_Transmit>
}
 8006fa2:	bf00      	nop
 8006fa4:	3788      	adds	r7, #136	@ 0x88
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fac:	b004      	add	sp, #16
 8006fae:	4770      	bx	lr
 8006fb0:	200001e0 	.word	0x200001e0

08006fb4 <pwm_set_duty>:
 *
 */

#include "pwm_duty.h"

void pwm_set_duty(TIM_HandleTypeDef *htim, uint32_t Channel,uint8_t duty){
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	71fb      	strb	r3, [r7, #7]
  uint32_t temp = htim -> Instance -> ARR;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc8:	617b      	str	r3, [r7, #20]
	if(Channel== TIM_CHANNEL_1){
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <pwm_set_duty+0x32>
	 htim -> Instance -> CCR1 = (duty*temp)/100;
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	fb03 f202 	mul.w	r2, r3, r2
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	491a      	ldr	r1, [pc, #104]	@ (8007048 <pwm_set_duty+0x94>)
 8006fde:	fba1 1202 	umull	r1, r2, r1, r2
 8006fe2:	0952      	lsrs	r2, r2, #5
 8006fe4:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if(Channel== TIM_CHANNEL_2){
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d10a      	bne.n	8007002 <pwm_set_duty+0x4e>
	 htim -> Instance -> CCR2 = (duty*temp)/100;
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	fb03 f202 	mul.w	r2, r3, r2
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4913      	ldr	r1, [pc, #76]	@ (8007048 <pwm_set_duty+0x94>)
 8006ffa:	fba1 1202 	umull	r1, r2, r1, r2
 8006ffe:	0952      	lsrs	r2, r2, #5
 8007000:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	if(Channel== TIM_CHANNEL_3){
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b08      	cmp	r3, #8
 8007006:	d10a      	bne.n	800701e <pwm_set_duty+0x6a>
	 htim -> Instance -> CCR3 = (duty*temp)/100;
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	fb03 f202 	mul.w	r2, r3, r2
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	490c      	ldr	r1, [pc, #48]	@ (8007048 <pwm_set_duty+0x94>)
 8007016:	fba1 1202 	umull	r1, r2, r1, r2
 800701a:	0952      	lsrs	r2, r2, #5
 800701c:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	if(Channel== TIM_CHANNEL_4){
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b0c      	cmp	r3, #12
 8007022:	d10a      	bne.n	800703a <pwm_set_duty+0x86>
	 htim -> Instance -> CCR4 = (duty*temp)/100;
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	fb03 f202 	mul.w	r2, r3, r2
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4905      	ldr	r1, [pc, #20]	@ (8007048 <pwm_set_duty+0x94>)
 8007032:	fba1 1202 	umull	r1, r2, r1, r2
 8007036:	0952      	lsrs	r2, r2, #5
 8007038:	641a      	str	r2, [r3, #64]	@ 0x40
	}
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	51eb851f 	.word	0x51eb851f

0800704c <delete_data>:
 *      Author: Pham Huy Tuyen
 */

#include "main.h"

void delete_data(parameter_t *data) {
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
    if (data->len > 0) {
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d009      	beq.n	8007070 <delete_data+0x24>
        data->len--;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	1e5a      	subs	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	60da      	str	r2, [r3, #12]
        data->payload[data->len] = '\0';
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	2100      	movs	r1, #0
 800706e:	54d1      	strb	r1, [r2, r3]
    }
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <add_data>:

void add_data(parameter_t *data, char c) {
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
    if (data->len < 10) {
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	2b09      	cmp	r3, #9
 800708e:	d80e      	bhi.n	80070ae <add_data+0x32>
        data->payload[data->len] = c;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	78f9      	ldrb	r1, [r7, #3]
 8007098:	54d1      	strb	r1, [r2, r3]
        data->len++;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	60da      	str	r2, [r3, #12]
        data->payload[data->len] = '\0';
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	2100      	movs	r1, #0
 80070ac:	54d1      	strb	r1, [r2, r3]
    }
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
	...

080070bc <set_cow>:

void set_cow(uint8_t prev_state, uint8_t new_state) {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	460a      	mov	r2, r1
 80070c6:	71fb      	strb	r3, [r7, #7]
 80070c8:	4613      	mov	r3, r2
 80070ca:	71bb      	strb	r3, [r7, #6]
    CLCD_I2C_SetCursor(&LCD1, 19, prev_state); // delete the "<" character from old position
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	461a      	mov	r2, r3
 80070d0:	2113      	movs	r1, #19
 80070d2:	480a      	ldr	r0, [pc, #40]	@ (80070fc <set_cow+0x40>)
 80070d4:	f7fe ffd1 	bl	800607a <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, " ");
 80070d8:	4909      	ldr	r1, [pc, #36]	@ (8007100 <set_cow+0x44>)
 80070da:	4808      	ldr	r0, [pc, #32]	@ (80070fc <set_cow+0x40>)
 80070dc:	f7ff f820 	bl	8006120 <CLCD_I2C_WriteString>

    CLCD_I2C_SetCursor(&LCD1, 19, new_state); // store the "<" character from new position
 80070e0:	79bb      	ldrb	r3, [r7, #6]
 80070e2:	461a      	mov	r2, r3
 80070e4:	2113      	movs	r1, #19
 80070e6:	4805      	ldr	r0, [pc, #20]	@ (80070fc <set_cow+0x40>)
 80070e8:	f7fe ffc7 	bl	800607a <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, "<");
 80070ec:	4905      	ldr	r1, [pc, #20]	@ (8007104 <set_cow+0x48>)
 80070ee:	4803      	ldr	r0, [pc, #12]	@ (80070fc <set_cow+0x40>)
 80070f0:	f7ff f816 	bl	8006120 <CLCD_I2C_WriteString>
}
 80070f4:	bf00      	nop
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	20000228 	.word	0x20000228
 8007100:	0800e22c 	.word	0x0800e22c
 8007104:	0800e230 	.word	0x0800e230

08007108 <sensor_task>:

void sensor_task(void *param) {
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
	uint16_t count = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	81fb      	strh	r3, [r7, #14]
    while (1) {
        //if (curr_state == sRunning) {
        //}
    	count ++;
 8007114:	89fb      	ldrh	r3, [r7, #14]
 8007116:	3301      	adds	r3, #1
 8007118:	b29b      	uxth	r3, r3
 800711a:	81fb      	strh	r3, [r7, #14]
    	xQueueSend(q_print,&count,portMAX_DELAY);
 800711c:	4b07      	ldr	r3, [pc, #28]	@ (800713c <sensor_task+0x34>)
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	f107 010e 	add.w	r1, r7, #14
 8007124:	2300      	movs	r3, #0
 8007126:	f04f 32ff 	mov.w	r2, #4294967295
 800712a:	f001 fadb 	bl	80086e4 <xQueueGenericSend>
        vTaskDelay(pdMS_TO_TICKS(1000));
 800712e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007132:	f002 f815 	bl	8009160 <vTaskDelay>
    	count ++;
 8007136:	bf00      	nop
 8007138:	e7ec      	b.n	8007114 <sensor_task+0xc>
 800713a:	bf00      	nop
 800713c:	20000250 	.word	0x20000250

08007140 <print_task>:
    }
}

void print_task(void *param){
 8007140:	b590      	push	{r4, r7, lr}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]

	uint32_t *msg;

	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8007148:	4b0b      	ldr	r3, [pc, #44]	@ (8007178 <print_task+0x38>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f107 010c 	add.w	r1, r7, #12
 8007150:	f04f 32ff 	mov.w	r2, #4294967295
 8007154:	4618      	mov	r0, r3
 8007156:	f001 fbd3 	bl	8008900 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 800715a:	68fc      	ldr	r4, [r7, #12]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4618      	mov	r0, r3
 8007160:	f7f9 f892 	bl	8000288 <strlen>
 8007164:	4603      	mov	r3, r0
 8007166:	b29a      	uxth	r2, r3
 8007168:	f04f 33ff 	mov.w	r3, #4294967295
 800716c:	4621      	mov	r1, r4
 800716e:	4803      	ldr	r0, [pc, #12]	@ (800717c <print_task+0x3c>)
 8007170:	f7fd fd58 	bl	8004c24 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8007174:	bf00      	nop
 8007176:	e7e7      	b.n	8007148 <print_task+0x8>
 8007178:	20000250 	.word	0x20000250
 800717c:	200001e0 	.word	0x200001e0

08007180 <sd_card_task>:
	}

}
void sd_card_task(void *param){
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
	while(1){
 8007188:	bf00      	nop
 800718a:	e7fd      	b.n	8007188 <sd_card_task+0x8>

0800718c <motor_task>:

	}

}

void motor_task(void *param){
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	  // start timer
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8007194:	2100      	movs	r1, #0
 8007196:	480b      	ldr	r0, [pc, #44]	@ (80071c4 <motor_task+0x38>)
 8007198:	f7fc fdf6 	bl	8003d88 <HAL_TIM_PWM_Start>
	while(1){
		  pwm_set_duty(&htim1,TIM_CHANNEL_1,20);
 800719c:	2214      	movs	r2, #20
 800719e:	2100      	movs	r1, #0
 80071a0:	4808      	ldr	r0, [pc, #32]	@ (80071c4 <motor_task+0x38>)
 80071a2:	f7ff ff07 	bl	8006fb4 <pwm_set_duty>
		  vTaskDelay(pdMS_TO_TICKS(5000));
 80071a6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80071aa:	f001 ffd9 	bl	8009160 <vTaskDelay>
		  pwm_set_duty(&htim1,TIM_CHANNEL_1,100);
 80071ae:	2264      	movs	r2, #100	@ 0x64
 80071b0:	2100      	movs	r1, #0
 80071b2:	4804      	ldr	r0, [pc, #16]	@ (80071c4 <motor_task+0x38>)
 80071b4:	f7ff fefe 	bl	8006fb4 <pwm_set_duty>
		  vTaskDelay(pdMS_TO_TICKS(10000));
 80071b8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80071bc:	f001 ffd0 	bl	8009160 <vTaskDelay>
		  pwm_set_duty(&htim1,TIM_CHANNEL_1,20);
 80071c0:	bf00      	nop
 80071c2:	e7eb      	b.n	800719c <motor_task+0x10>
 80071c4:	20000150 	.word	0x20000150

080071c8 <scan_keypad_task>:
	}
}

uint16_t btn_value1;
void scan_keypad_task(void *param){
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	6078      	str	r0, [r7, #4]

	while(1){
		btn_value1 = process_button_pad_value(read_keypad());
 80071d0:	f7ff fda6 	bl	8006d20 <read_keypad>
 80071d4:	4603      	mov	r3, r0
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff fd46 	bl	8006c68 <process_button_pad_value>
 80071dc:	4603      	mov	r3, r0
 80071de:	461a      	mov	r2, r3
 80071e0:	4b2f      	ldr	r3, [pc, #188]	@ (80072a0 <scan_keypad_task+0xd8>)
 80071e2:	801a      	strh	r2, [r3, #0]
		if(btn_value1){
 80071e4:	4b2e      	ldr	r3, [pc, #184]	@ (80072a0 <scan_keypad_task+0xd8>)
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d054      	beq.n	8007296 <scan_keypad_task+0xce>
			printf("%d\n",btn_value1);
 80071ec:	4b2c      	ldr	r3, [pc, #176]	@ (80072a0 <scan_keypad_task+0xd8>)
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	4619      	mov	r1, r3
 80071f2:	482c      	ldr	r0, [pc, #176]	@ (80072a4 <scan_keypad_task+0xdc>)
 80071f4:	f005 ff72 	bl	800d0dc <iprintf>
			switch(curr_state)
 80071f8:	4b2b      	ldr	r3, [pc, #172]	@ (80072a8 <scan_keypad_task+0xe0>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	dc4a      	bgt.n	8007296 <scan_keypad_task+0xce>
 8007200:	2b02      	cmp	r3, #2
 8007202:	da3b      	bge.n	800727c <scan_keypad_task+0xb4>
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <scan_keypad_task+0x46>
 8007208:	2b01      	cmp	r3, #1
 800720a:	d02b      	beq.n	8007264 <scan_keypad_task+0x9c>
 800720c:	e043      	b.n	8007296 <scan_keypad_task+0xce>
			{
			case sRunning:
				if(btn_value1 == BUTTON_A_3){
 800720e:	4b24      	ldr	r3, [pc, #144]	@ (80072a0 <scan_keypad_task+0xd8>)
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	2b0c      	cmp	r3, #12
 8007214:	d13e      	bne.n	8007294 <scan_keypad_task+0xcc>
					curr_state = sPassword;
 8007216:	4b24      	ldr	r3, [pc, #144]	@ (80072a8 <scan_keypad_task+0xe0>)
 8007218:	2201      	movs	r2, #1
 800721a:	701a      	strb	r2, [r3, #0]
					pwm_set_duty(&htim1,TIM_CHANNEL_1,0);
 800721c:	2200      	movs	r2, #0
 800721e:	2100      	movs	r1, #0
 8007220:	4822      	ldr	r0, [pc, #136]	@ (80072ac <scan_keypad_task+0xe4>)
 8007222:	f7ff fec7 	bl	8006fb4 <pwm_set_duty>
					vTaskSuspend(handle_sensor_task);
 8007226:	4b22      	ldr	r3, [pc, #136]	@ (80072b0 <scan_keypad_task+0xe8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4618      	mov	r0, r3
 800722c:	f001 ffd0 	bl	80091d0 <vTaskSuspend>
					vTaskSuspend(handle_motor_task);
 8007230:	4b20      	ldr	r3, [pc, #128]	@ (80072b4 <scan_keypad_task+0xec>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4618      	mov	r0, r3
 8007236:	f001 ffcb 	bl	80091d0 <vTaskSuspend>
					CLCD_I2C_Clear(&LCD1);
 800723a:	481f      	ldr	r0, [pc, #124]	@ (80072b8 <scan_keypad_task+0xf0>)
 800723c:	f7fe ff87 	bl	800614e <CLCD_I2C_Clear>
					CLCD_I2C_SetCursor(&LCD1, 3, 0);
 8007240:	2200      	movs	r2, #0
 8007242:	2103      	movs	r1, #3
 8007244:	481c      	ldr	r0, [pc, #112]	@ (80072b8 <scan_keypad_task+0xf0>)
 8007246:	f7fe ff18 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "ENTER PASSWORD");
 800724a:	491c      	ldr	r1, [pc, #112]	@ (80072bc <scan_keypad_task+0xf4>)
 800724c:	481a      	ldr	r0, [pc, #104]	@ (80072b8 <scan_keypad_task+0xf0>)
 800724e:	f7fe ff67 	bl	8006120 <CLCD_I2C_WriteString>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8007252:	2201      	movs	r2, #1
 8007254:	2104      	movs	r1, #4
 8007256:	4818      	ldr	r0, [pc, #96]	@ (80072b8 <scan_keypad_task+0xf0>)
 8007258:	f7fe ff0f 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_BlinkOn(&LCD1);
 800725c:	4816      	ldr	r0, [pc, #88]	@ (80072b8 <scan_keypad_task+0xf0>)
 800725e:	f7fe ff86 	bl	800616e <CLCD_I2C_BlinkOn>

				}
				break;
 8007262:	e017      	b.n	8007294 <scan_keypad_task+0xcc>
			case sPassword:
				xTaskNotify(handle_password_task,(uint32_t)btn_value1 , eSetValueWithOverwrite);
 8007264:	4b16      	ldr	r3, [pc, #88]	@ (80072c0 <scan_keypad_task+0xf8>)
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	4b0d      	ldr	r3, [pc, #52]	@ (80072a0 <scan_keypad_task+0xd8>)
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	2300      	movs	r3, #0
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	2303      	movs	r3, #3
 8007274:	2100      	movs	r1, #0
 8007276:	f003 f889 	bl	800a38c <xTaskGenericNotify>
				break;
 800727a:	e00c      	b.n	8007296 <scan_keypad_task+0xce>
			case sMenucofig_Setparameter:
			case sMenuconfig_Changepassword:
			case sMenuconfig_Saveparameter:
				xTaskNotify(handle_menuconfig_task,(uint32_t)btn_value1 , eSetValueWithOverwrite);
 800727c:	4b11      	ldr	r3, [pc, #68]	@ (80072c4 <scan_keypad_task+0xfc>)
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	4b07      	ldr	r3, [pc, #28]	@ (80072a0 <scan_keypad_task+0xd8>)
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	2300      	movs	r3, #0
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	2303      	movs	r3, #3
 800728c:	2100      	movs	r1, #0
 800728e:	f003 f87d 	bl	800a38c <xTaskGenericNotify>
				break;
 8007292:	e000      	b.n	8007296 <scan_keypad_task+0xce>
				break;
 8007294:	bf00      	nop
			}// end of switch
		}
		vTaskDelay(pdMS_TO_TICKS(20));
 8007296:	2014      	movs	r0, #20
 8007298:	f001 ff62 	bl	8009160 <vTaskDelay>
		btn_value1 = process_button_pad_value(read_keypad());
 800729c:	e798      	b.n	80071d0 <scan_keypad_task+0x8>
 800729e:	bf00      	nop
 80072a0:	20001558 	.word	0x20001558
 80072a4:	0800e234 	.word	0x0800e234
 80072a8:	20000254 	.word	0x20000254
 80072ac:	20000150 	.word	0x20000150
 80072b0:	20000234 	.word	0x20000234
 80072b4:	20000248 	.word	0x20000248
 80072b8:	20000228 	.word	0x20000228
 80072bc:	0800e238 	.word	0x0800e238
 80072c0:	20000244 	.word	0x20000244
 80072c4:	20000240 	.word	0x20000240

080072c8 <menuconfig_task>:
	}
}

void menuconfig_task(void *param){
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af02      	add	r7, sp, #8
 80072ce:	6078      	str	r0, [r7, #4]

	  uint16_t btn_value;
	  uint32_t btn_value_addr;

	while(1){
		xTaskNotifyWait(0,0,&btn_value_addr,portMAX_DELAY);
 80072d0:	f107 0308 	add.w	r3, r7, #8
 80072d4:	f04f 32ff 	mov.w	r2, #4294967295
 80072d8:	9200      	str	r2, [sp, #0]
 80072da:	2200      	movs	r2, #0
 80072dc:	2100      	movs	r1, #0
 80072de:	2000      	movs	r0, #0
 80072e0:	f002 ffbc 	bl	800a25c <xTaskGenericNotifyWait>
		btn_value = (uint16_t) btn_value_addr;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	81fb      	strh	r3, [r7, #14]
		printf("%d\n",btn_value);
 80072e8:	89fb      	ldrh	r3, [r7, #14]
 80072ea:	4619      	mov	r1, r3
 80072ec:	48b4      	ldr	r0, [pc, #720]	@ (80075c0 <menuconfig_task+0x2f8>)
 80072ee:	f005 fef5 	bl	800d0dc <iprintf>
		uint8_t prev_state;

		switch(curr_state){
 80072f2:	4bb4      	ldr	r3, [pc, #720]	@ (80075c4 <menuconfig_task+0x2fc>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	f000 8303 	beq.w	8007902 <menuconfig_task+0x63a>
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	dce7      	bgt.n	80072d0 <menuconfig_task+0x8>
 8007300:	2b02      	cmp	r3, #2
 8007302:	d004      	beq.n	800730e <menuconfig_task+0x46>
 8007304:	2b03      	cmp	r3, #3
 8007306:	f000 8387 	beq.w	8007a18 <menuconfig_task+0x750>
 800730a:	f000 bdb0 	b.w	8007e6e <menuconfig_task+0xba6>
             case sMenucofig_Setparameter:
					switch (btn_value) {
 800730e:	89fb      	ldrh	r3, [r7, #14]
 8007310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007314:	f000 82d4 	beq.w	80078c0 <menuconfig_task+0x5f8>
 8007318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800731c:	f300 82ed 	bgt.w	80078fa <menuconfig_task+0x632>
 8007320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007324:	f000 82eb 	beq.w	80078fe <menuconfig_task+0x636>
 8007328:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800732c:	f300 82e5 	bgt.w	80078fa <menuconfig_task+0x632>
 8007330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007334:	f000 829a 	beq.w	800786c <menuconfig_task+0x5a4>
 8007338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800733c:	f300 82dd 	bgt.w	80078fa <menuconfig_task+0x632>
 8007340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007344:	f000 8270 	beq.w	8007828 <menuconfig_task+0x560>
 8007348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800734c:	f300 82d5 	bgt.w	80078fa <menuconfig_task+0x632>
 8007350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007354:	f000 822b 	beq.w	80077ae <menuconfig_task+0x4e6>
 8007358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800735c:	f300 82cd 	bgt.w	80078fa <menuconfig_task+0x632>
 8007360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007364:	f000 81f9 	beq.w	800775a <menuconfig_task+0x492>
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800736c:	f300 82c5 	bgt.w	80078fa <menuconfig_task+0x632>
 8007370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007374:	f000 81c7 	beq.w	8007706 <menuconfig_task+0x43e>
 8007378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800737c:	f300 82bd 	bgt.w	80078fa <menuconfig_task+0x632>
 8007380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007384:	f000 8195 	beq.w	80076b2 <menuconfig_task+0x3ea>
 8007388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800738c:	f300 82b5 	bgt.w	80078fa <menuconfig_task+0x632>
 8007390:	2b80      	cmp	r3, #128	@ 0x80
 8007392:	f000 8175 	beq.w	8007680 <menuconfig_task+0x3b8>
 8007396:	2b80      	cmp	r3, #128	@ 0x80
 8007398:	f300 82af 	bgt.w	80078fa <menuconfig_task+0x632>
 800739c:	2b20      	cmp	r3, #32
 800739e:	dc49      	bgt.n	8007434 <menuconfig_task+0x16c>
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f340 82aa 	ble.w	80078fa <menuconfig_task+0x632>
 80073a6:	3b01      	subs	r3, #1
 80073a8:	2b1f      	cmp	r3, #31
 80073aa:	f200 82a6 	bhi.w	80078fa <menuconfig_task+0x632>
 80073ae:	a201      	add	r2, pc, #4	@ (adr r2, 80073b4 <menuconfig_task+0xec>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	0800743d 	.word	0x0800743d
 80073b8:	08007491 	.word	0x08007491
 80073bc:	080078fb 	.word	0x080078fb
 80073c0:	080074e5 	.word	0x080074e5
 80073c4:	080078fb 	.word	0x080078fb
 80073c8:	080078fb 	.word	0x080078fb
 80073cc:	080078fb 	.word	0x080078fb
 80073d0:	08007539 	.word	0x08007539
 80073d4:	080078fb 	.word	0x080078fb
 80073d8:	080078fb 	.word	0x080078fb
 80073dc:	080078fb 	.word	0x080078fb
 80073e0:	080078fb 	.word	0x080078fb
 80073e4:	080078fb 	.word	0x080078fb
 80073e8:	080078fb 	.word	0x080078fb
 80073ec:	080078fb 	.word	0x080078fb
 80073f0:	0800756b 	.word	0x0800756b
 80073f4:	080078fb 	.word	0x080078fb
 80073f8:	080078fb 	.word	0x080078fb
 80073fc:	080078fb 	.word	0x080078fb
 8007400:	080078fb 	.word	0x080078fb
 8007404:	080078fb 	.word	0x080078fb
 8007408:	080078fb 	.word	0x080078fb
 800740c:	080078fb 	.word	0x080078fb
 8007410:	080078fb 	.word	0x080078fb
 8007414:	080078fb 	.word	0x080078fb
 8007418:	080078fb 	.word	0x080078fb
 800741c:	080078fb 	.word	0x080078fb
 8007420:	080078fb 	.word	0x080078fb
 8007424:	080078fb 	.word	0x080078fb
 8007428:	080078fb 	.word	0x080078fb
 800742c:	080078fb 	.word	0x080078fb
 8007430:	080075d9 	.word	0x080075d9
 8007434:	2b40      	cmp	r3, #64	@ 0x40
 8007436:	f000 80f9 	beq.w	800762c <menuconfig_task+0x364>
							 CLCD_I2C_WriteString(&LCD1, "Enter:");
							 CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
							 break;

						default:
							 break;
 800743a:	e25e      	b.n	80078fa <menuconfig_task+0x632>
							add_data(&data[state], '1');
 800743c:	4b62      	ldr	r3, [pc, #392]	@ (80075c8 <menuconfig_task+0x300>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	4a62      	ldr	r2, [pc, #392]	@ (80075cc <menuconfig_task+0x304>)
 8007444:	4413      	add	r3, r2
 8007446:	2131      	movs	r1, #49	@ 0x31
 8007448:	4618      	mov	r0, r3
 800744a:	f7ff fe17 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 800744e:	4b5e      	ldr	r3, [pc, #376]	@ (80075c8 <menuconfig_task+0x300>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	4a5e      	ldr	r2, [pc, #376]	@ (80075cc <menuconfig_task+0x304>)
 8007454:	011b      	lsls	r3, r3, #4
 8007456:	4413      	add	r3, r2
 8007458:	330c      	adds	r3, #12
 800745a:	6819      	ldr	r1, [r3, #0]
 800745c:	4b5a      	ldr	r3, [pc, #360]	@ (80075c8 <menuconfig_task+0x300>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	011b      	lsls	r3, r3, #4
 8007462:	4a5a      	ldr	r2, [pc, #360]	@ (80075cc <menuconfig_task+0x304>)
 8007464:	4413      	add	r3, r2
 8007466:	461a      	mov	r2, r3
 8007468:	4859      	ldr	r0, [pc, #356]	@ (80075d0 <menuconfig_task+0x308>)
 800746a:	f005 fe37 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800746e:	4b56      	ldr	r3, [pc, #344]	@ (80075c8 <menuconfig_task+0x300>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	2103      	movs	r1, #3
 8007476:	4857      	ldr	r0, [pc, #348]	@ (80075d4 <menuconfig_task+0x30c>)
 8007478:	f7fe fdff 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800747c:	4b52      	ldr	r3, [pc, #328]	@ (80075c8 <menuconfig_task+0x300>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	011b      	lsls	r3, r3, #4
 8007482:	4a52      	ldr	r2, [pc, #328]	@ (80075cc <menuconfig_task+0x304>)
 8007484:	4413      	add	r3, r2
 8007486:	4619      	mov	r1, r3
 8007488:	4852      	ldr	r0, [pc, #328]	@ (80075d4 <menuconfig_task+0x30c>)
 800748a:	f7fe fe49 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 800748e:	e237      	b.n	8007900 <menuconfig_task+0x638>
							add_data(&data[state], '2');
 8007490:	4b4d      	ldr	r3, [pc, #308]	@ (80075c8 <menuconfig_task+0x300>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	4a4d      	ldr	r2, [pc, #308]	@ (80075cc <menuconfig_task+0x304>)
 8007498:	4413      	add	r3, r2
 800749a:	2132      	movs	r1, #50	@ 0x32
 800749c:	4618      	mov	r0, r3
 800749e:	f7ff fded 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 80074a2:	4b49      	ldr	r3, [pc, #292]	@ (80075c8 <menuconfig_task+0x300>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	4a49      	ldr	r2, [pc, #292]	@ (80075cc <menuconfig_task+0x304>)
 80074a8:	011b      	lsls	r3, r3, #4
 80074aa:	4413      	add	r3, r2
 80074ac:	330c      	adds	r3, #12
 80074ae:	6819      	ldr	r1, [r3, #0]
 80074b0:	4b45      	ldr	r3, [pc, #276]	@ (80075c8 <menuconfig_task+0x300>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	4a45      	ldr	r2, [pc, #276]	@ (80075cc <menuconfig_task+0x304>)
 80074b8:	4413      	add	r3, r2
 80074ba:	461a      	mov	r2, r3
 80074bc:	4844      	ldr	r0, [pc, #272]	@ (80075d0 <menuconfig_task+0x308>)
 80074be:	f005 fe0d 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 80074c2:	4b41      	ldr	r3, [pc, #260]	@ (80075c8 <menuconfig_task+0x300>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	2103      	movs	r1, #3
 80074ca:	4842      	ldr	r0, [pc, #264]	@ (80075d4 <menuconfig_task+0x30c>)
 80074cc:	f7fe fdd5 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 80074d0:	4b3d      	ldr	r3, [pc, #244]	@ (80075c8 <menuconfig_task+0x300>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	011b      	lsls	r3, r3, #4
 80074d6:	4a3d      	ldr	r2, [pc, #244]	@ (80075cc <menuconfig_task+0x304>)
 80074d8:	4413      	add	r3, r2
 80074da:	4619      	mov	r1, r3
 80074dc:	483d      	ldr	r0, [pc, #244]	@ (80075d4 <menuconfig_task+0x30c>)
 80074de:	f7fe fe1f 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 80074e2:	e20d      	b.n	8007900 <menuconfig_task+0x638>
							add_data(&data[state], '3');
 80074e4:	4b38      	ldr	r3, [pc, #224]	@ (80075c8 <menuconfig_task+0x300>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	4a38      	ldr	r2, [pc, #224]	@ (80075cc <menuconfig_task+0x304>)
 80074ec:	4413      	add	r3, r2
 80074ee:	2133      	movs	r1, #51	@ 0x33
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff fdc3 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 80074f6:	4b34      	ldr	r3, [pc, #208]	@ (80075c8 <menuconfig_task+0x300>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	4a34      	ldr	r2, [pc, #208]	@ (80075cc <menuconfig_task+0x304>)
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	4413      	add	r3, r2
 8007500:	330c      	adds	r3, #12
 8007502:	6819      	ldr	r1, [r3, #0]
 8007504:	4b30      	ldr	r3, [pc, #192]	@ (80075c8 <menuconfig_task+0x300>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	4a30      	ldr	r2, [pc, #192]	@ (80075cc <menuconfig_task+0x304>)
 800750c:	4413      	add	r3, r2
 800750e:	461a      	mov	r2, r3
 8007510:	482f      	ldr	r0, [pc, #188]	@ (80075d0 <menuconfig_task+0x308>)
 8007512:	f005 fde3 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 8007516:	4b2c      	ldr	r3, [pc, #176]	@ (80075c8 <menuconfig_task+0x300>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	2103      	movs	r1, #3
 800751e:	482d      	ldr	r0, [pc, #180]	@ (80075d4 <menuconfig_task+0x30c>)
 8007520:	f7fe fdab 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 8007524:	4b28      	ldr	r3, [pc, #160]	@ (80075c8 <menuconfig_task+0x300>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	4a28      	ldr	r2, [pc, #160]	@ (80075cc <menuconfig_task+0x304>)
 800752c:	4413      	add	r3, r2
 800752e:	4619      	mov	r1, r3
 8007530:	4828      	ldr	r0, [pc, #160]	@ (80075d4 <menuconfig_task+0x30c>)
 8007532:	f7fe fdf5 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007536:	e1e3      	b.n	8007900 <menuconfig_task+0x638>
							prev_state = state; // save old position
 8007538:	4b23      	ldr	r3, [pc, #140]	@ (80075c8 <menuconfig_task+0x300>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	737b      	strb	r3, [r7, #13]
							if (state == s1_s) state = t2_s;
 800753e:	4b22      	ldr	r3, [pc, #136]	@ (80075c8 <menuconfig_task+0x300>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d103      	bne.n	800754e <menuconfig_task+0x286>
 8007546:	4b20      	ldr	r3, [pc, #128]	@ (80075c8 <menuconfig_task+0x300>)
 8007548:	2203      	movs	r2, #3
 800754a:	701a      	strb	r2, [r3, #0]
 800754c:	e005      	b.n	800755a <menuconfig_task+0x292>
							else state--; // new postion
 800754e:	4b1e      	ldr	r3, [pc, #120]	@ (80075c8 <menuconfig_task+0x300>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	3b01      	subs	r3, #1
 8007554:	b2da      	uxtb	r2, r3
 8007556:	4b1c      	ldr	r3, [pc, #112]	@ (80075c8 <menuconfig_task+0x300>)
 8007558:	701a      	strb	r2, [r3, #0]
							set_cow(prev_state, state);
 800755a:	4b1b      	ldr	r3, [pc, #108]	@ (80075c8 <menuconfig_task+0x300>)
 800755c:	781a      	ldrb	r2, [r3, #0]
 800755e:	7b7b      	ldrb	r3, [r7, #13]
 8007560:	4611      	mov	r1, r2
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff fdaa 	bl	80070bc <set_cow>
							break;
 8007568:	e1ca      	b.n	8007900 <menuconfig_task+0x638>
							add_data(&data[state], '4');
 800756a:	4b17      	ldr	r3, [pc, #92]	@ (80075c8 <menuconfig_task+0x300>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	011b      	lsls	r3, r3, #4
 8007570:	4a16      	ldr	r2, [pc, #88]	@ (80075cc <menuconfig_task+0x304>)
 8007572:	4413      	add	r3, r2
 8007574:	2134      	movs	r1, #52	@ 0x34
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff fd80 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 800757c:	4b12      	ldr	r3, [pc, #72]	@ (80075c8 <menuconfig_task+0x300>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	4a12      	ldr	r2, [pc, #72]	@ (80075cc <menuconfig_task+0x304>)
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	4413      	add	r3, r2
 8007586:	330c      	adds	r3, #12
 8007588:	6819      	ldr	r1, [r3, #0]
 800758a:	4b0f      	ldr	r3, [pc, #60]	@ (80075c8 <menuconfig_task+0x300>)
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	4a0e      	ldr	r2, [pc, #56]	@ (80075cc <menuconfig_task+0x304>)
 8007592:	4413      	add	r3, r2
 8007594:	461a      	mov	r2, r3
 8007596:	480e      	ldr	r0, [pc, #56]	@ (80075d0 <menuconfig_task+0x308>)
 8007598:	f005 fda0 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800759c:	4b0a      	ldr	r3, [pc, #40]	@ (80075c8 <menuconfig_task+0x300>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	2103      	movs	r1, #3
 80075a4:	480b      	ldr	r0, [pc, #44]	@ (80075d4 <menuconfig_task+0x30c>)
 80075a6:	f7fe fd68 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 80075aa:	4b07      	ldr	r3, [pc, #28]	@ (80075c8 <menuconfig_task+0x300>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	4a06      	ldr	r2, [pc, #24]	@ (80075cc <menuconfig_task+0x304>)
 80075b2:	4413      	add	r3, r2
 80075b4:	4619      	mov	r1, r3
 80075b6:	4807      	ldr	r0, [pc, #28]	@ (80075d4 <menuconfig_task+0x30c>)
 80075b8:	f7fe fdb2 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 80075bc:	e1a0      	b.n	8007900 <menuconfig_task+0x638>
 80075be:	bf00      	nop
 80075c0:	0800e234 	.word	0x0800e234
 80075c4:	20000254 	.word	0x20000254
 80075c8:	2000155a 	.word	0x2000155a
 80075cc:	2000155c 	.word	0x2000155c
 80075d0:	0800e248 	.word	0x0800e248
 80075d4:	20000228 	.word	0x20000228
							add_data(&data[state], '5');
 80075d8:	4b9c      	ldr	r3, [pc, #624]	@ (800784c <menuconfig_task+0x584>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	011b      	lsls	r3, r3, #4
 80075de:	4a9c      	ldr	r2, [pc, #624]	@ (8007850 <menuconfig_task+0x588>)
 80075e0:	4413      	add	r3, r2
 80075e2:	2135      	movs	r1, #53	@ 0x35
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fd49 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 80075ea:	4b98      	ldr	r3, [pc, #608]	@ (800784c <menuconfig_task+0x584>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	4a98      	ldr	r2, [pc, #608]	@ (8007850 <menuconfig_task+0x588>)
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	4413      	add	r3, r2
 80075f4:	330c      	adds	r3, #12
 80075f6:	6819      	ldr	r1, [r3, #0]
 80075f8:	4b94      	ldr	r3, [pc, #592]	@ (800784c <menuconfig_task+0x584>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	011b      	lsls	r3, r3, #4
 80075fe:	4a94      	ldr	r2, [pc, #592]	@ (8007850 <menuconfig_task+0x588>)
 8007600:	4413      	add	r3, r2
 8007602:	461a      	mov	r2, r3
 8007604:	4893      	ldr	r0, [pc, #588]	@ (8007854 <menuconfig_task+0x58c>)
 8007606:	f005 fd69 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800760a:	4b90      	ldr	r3, [pc, #576]	@ (800784c <menuconfig_task+0x584>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	2103      	movs	r1, #3
 8007612:	4891      	ldr	r0, [pc, #580]	@ (8007858 <menuconfig_task+0x590>)
 8007614:	f7fe fd31 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 8007618:	4b8c      	ldr	r3, [pc, #560]	@ (800784c <menuconfig_task+0x584>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	011b      	lsls	r3, r3, #4
 800761e:	4a8c      	ldr	r2, [pc, #560]	@ (8007850 <menuconfig_task+0x588>)
 8007620:	4413      	add	r3, r2
 8007622:	4619      	mov	r1, r3
 8007624:	488c      	ldr	r0, [pc, #560]	@ (8007858 <menuconfig_task+0x590>)
 8007626:	f7fe fd7b 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 800762a:	e169      	b.n	8007900 <menuconfig_task+0x638>
							add_data(&data[state], '6');
 800762c:	4b87      	ldr	r3, [pc, #540]	@ (800784c <menuconfig_task+0x584>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	4a87      	ldr	r2, [pc, #540]	@ (8007850 <menuconfig_task+0x588>)
 8007634:	4413      	add	r3, r2
 8007636:	2136      	movs	r1, #54	@ 0x36
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fd1f 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 800763e:	4b83      	ldr	r3, [pc, #524]	@ (800784c <menuconfig_task+0x584>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	4a83      	ldr	r2, [pc, #524]	@ (8007850 <menuconfig_task+0x588>)
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	4413      	add	r3, r2
 8007648:	330c      	adds	r3, #12
 800764a:	6819      	ldr	r1, [r3, #0]
 800764c:	4b7f      	ldr	r3, [pc, #508]	@ (800784c <menuconfig_task+0x584>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	011b      	lsls	r3, r3, #4
 8007652:	4a7f      	ldr	r2, [pc, #508]	@ (8007850 <menuconfig_task+0x588>)
 8007654:	4413      	add	r3, r2
 8007656:	461a      	mov	r2, r3
 8007658:	487e      	ldr	r0, [pc, #504]	@ (8007854 <menuconfig_task+0x58c>)
 800765a:	f005 fd3f 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800765e:	4b7b      	ldr	r3, [pc, #492]	@ (800784c <menuconfig_task+0x584>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	2103      	movs	r1, #3
 8007666:	487c      	ldr	r0, [pc, #496]	@ (8007858 <menuconfig_task+0x590>)
 8007668:	f7fe fd07 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800766c:	4b77      	ldr	r3, [pc, #476]	@ (800784c <menuconfig_task+0x584>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	011b      	lsls	r3, r3, #4
 8007672:	4a77      	ldr	r2, [pc, #476]	@ (8007850 <menuconfig_task+0x588>)
 8007674:	4413      	add	r3, r2
 8007676:	4619      	mov	r1, r3
 8007678:	4877      	ldr	r0, [pc, #476]	@ (8007858 <menuconfig_task+0x590>)
 800767a:	f7fe fd51 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 800767e:	e13f      	b.n	8007900 <menuconfig_task+0x638>
							prev_state = state; // save old position
 8007680:	4b72      	ldr	r3, [pc, #456]	@ (800784c <menuconfig_task+0x584>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	737b      	strb	r3, [r7, #13]
							if (state == t2_s) state = s1_s;
 8007686:	4b71      	ldr	r3, [pc, #452]	@ (800784c <menuconfig_task+0x584>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b03      	cmp	r3, #3
 800768c:	d103      	bne.n	8007696 <menuconfig_task+0x3ce>
 800768e:	4b6f      	ldr	r3, [pc, #444]	@ (800784c <menuconfig_task+0x584>)
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	e005      	b.n	80076a2 <menuconfig_task+0x3da>
							else state++; // new position
 8007696:	4b6d      	ldr	r3, [pc, #436]	@ (800784c <menuconfig_task+0x584>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	3301      	adds	r3, #1
 800769c:	b2da      	uxtb	r2, r3
 800769e:	4b6b      	ldr	r3, [pc, #428]	@ (800784c <menuconfig_task+0x584>)
 80076a0:	701a      	strb	r2, [r3, #0]
							set_cow(prev_state, state);
 80076a2:	4b6a      	ldr	r3, [pc, #424]	@ (800784c <menuconfig_task+0x584>)
 80076a4:	781a      	ldrb	r2, [r3, #0]
 80076a6:	7b7b      	ldrb	r3, [r7, #13]
 80076a8:	4611      	mov	r1, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff fd06 	bl	80070bc <set_cow>
							break;
 80076b0:	e126      	b.n	8007900 <menuconfig_task+0x638>
							add_data(&data[state], '7');
 80076b2:	4b66      	ldr	r3, [pc, #408]	@ (800784c <menuconfig_task+0x584>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	4a65      	ldr	r2, [pc, #404]	@ (8007850 <menuconfig_task+0x588>)
 80076ba:	4413      	add	r3, r2
 80076bc:	2137      	movs	r1, #55	@ 0x37
 80076be:	4618      	mov	r0, r3
 80076c0:	f7ff fcdc 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 80076c4:	4b61      	ldr	r3, [pc, #388]	@ (800784c <menuconfig_task+0x584>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	4a61      	ldr	r2, [pc, #388]	@ (8007850 <menuconfig_task+0x588>)
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	4413      	add	r3, r2
 80076ce:	330c      	adds	r3, #12
 80076d0:	6819      	ldr	r1, [r3, #0]
 80076d2:	4b5e      	ldr	r3, [pc, #376]	@ (800784c <menuconfig_task+0x584>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	4a5d      	ldr	r2, [pc, #372]	@ (8007850 <menuconfig_task+0x588>)
 80076da:	4413      	add	r3, r2
 80076dc:	461a      	mov	r2, r3
 80076de:	485d      	ldr	r0, [pc, #372]	@ (8007854 <menuconfig_task+0x58c>)
 80076e0:	f005 fcfc 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 80076e4:	4b59      	ldr	r3, [pc, #356]	@ (800784c <menuconfig_task+0x584>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	2103      	movs	r1, #3
 80076ec:	485a      	ldr	r0, [pc, #360]	@ (8007858 <menuconfig_task+0x590>)
 80076ee:	f7fe fcc4 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 80076f2:	4b56      	ldr	r3, [pc, #344]	@ (800784c <menuconfig_task+0x584>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	4a55      	ldr	r2, [pc, #340]	@ (8007850 <menuconfig_task+0x588>)
 80076fa:	4413      	add	r3, r2
 80076fc:	4619      	mov	r1, r3
 80076fe:	4856      	ldr	r0, [pc, #344]	@ (8007858 <menuconfig_task+0x590>)
 8007700:	f7fe fd0e 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007704:	e0fc      	b.n	8007900 <menuconfig_task+0x638>
							add_data(&data[state], '8');
 8007706:	4b51      	ldr	r3, [pc, #324]	@ (800784c <menuconfig_task+0x584>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	4a50      	ldr	r2, [pc, #320]	@ (8007850 <menuconfig_task+0x588>)
 800770e:	4413      	add	r3, r2
 8007710:	2138      	movs	r1, #56	@ 0x38
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff fcb2 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 8007718:	4b4c      	ldr	r3, [pc, #304]	@ (800784c <menuconfig_task+0x584>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	4a4c      	ldr	r2, [pc, #304]	@ (8007850 <menuconfig_task+0x588>)
 800771e:	011b      	lsls	r3, r3, #4
 8007720:	4413      	add	r3, r2
 8007722:	330c      	adds	r3, #12
 8007724:	6819      	ldr	r1, [r3, #0]
 8007726:	4b49      	ldr	r3, [pc, #292]	@ (800784c <menuconfig_task+0x584>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	011b      	lsls	r3, r3, #4
 800772c:	4a48      	ldr	r2, [pc, #288]	@ (8007850 <menuconfig_task+0x588>)
 800772e:	4413      	add	r3, r2
 8007730:	461a      	mov	r2, r3
 8007732:	4848      	ldr	r0, [pc, #288]	@ (8007854 <menuconfig_task+0x58c>)
 8007734:	f005 fcd2 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 8007738:	4b44      	ldr	r3, [pc, #272]	@ (800784c <menuconfig_task+0x584>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
 800773e:	2103      	movs	r1, #3
 8007740:	4845      	ldr	r0, [pc, #276]	@ (8007858 <menuconfig_task+0x590>)
 8007742:	f7fe fc9a 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 8007746:	4b41      	ldr	r3, [pc, #260]	@ (800784c <menuconfig_task+0x584>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	4a40      	ldr	r2, [pc, #256]	@ (8007850 <menuconfig_task+0x588>)
 800774e:	4413      	add	r3, r2
 8007750:	4619      	mov	r1, r3
 8007752:	4841      	ldr	r0, [pc, #260]	@ (8007858 <menuconfig_task+0x590>)
 8007754:	f7fe fce4 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007758:	e0d2      	b.n	8007900 <menuconfig_task+0x638>
							add_data(&data[state], '9');
 800775a:	4b3c      	ldr	r3, [pc, #240]	@ (800784c <menuconfig_task+0x584>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	4a3b      	ldr	r2, [pc, #236]	@ (8007850 <menuconfig_task+0x588>)
 8007762:	4413      	add	r3, r2
 8007764:	2139      	movs	r1, #57	@ 0x39
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff fc88 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 800776c:	4b37      	ldr	r3, [pc, #220]	@ (800784c <menuconfig_task+0x584>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	4a37      	ldr	r2, [pc, #220]	@ (8007850 <menuconfig_task+0x588>)
 8007772:	011b      	lsls	r3, r3, #4
 8007774:	4413      	add	r3, r2
 8007776:	330c      	adds	r3, #12
 8007778:	6819      	ldr	r1, [r3, #0]
 800777a:	4b34      	ldr	r3, [pc, #208]	@ (800784c <menuconfig_task+0x584>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	011b      	lsls	r3, r3, #4
 8007780:	4a33      	ldr	r2, [pc, #204]	@ (8007850 <menuconfig_task+0x588>)
 8007782:	4413      	add	r3, r2
 8007784:	461a      	mov	r2, r3
 8007786:	4833      	ldr	r0, [pc, #204]	@ (8007854 <menuconfig_task+0x58c>)
 8007788:	f005 fca8 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800778c:	4b2f      	ldr	r3, [pc, #188]	@ (800784c <menuconfig_task+0x584>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	2103      	movs	r1, #3
 8007794:	4830      	ldr	r0, [pc, #192]	@ (8007858 <menuconfig_task+0x590>)
 8007796:	f7fe fc70 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 800779a:	4b2c      	ldr	r3, [pc, #176]	@ (800784c <menuconfig_task+0x584>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	4a2b      	ldr	r2, [pc, #172]	@ (8007850 <menuconfig_task+0x588>)
 80077a2:	4413      	add	r3, r2
 80077a4:	4619      	mov	r1, r3
 80077a6:	482c      	ldr	r0, [pc, #176]	@ (8007858 <menuconfig_task+0x590>)
 80077a8:	f7fe fcba 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 80077ac:	e0a8      	b.n	8007900 <menuconfig_task+0x638>
							delete_data(&data[state]);
 80077ae:	4b27      	ldr	r3, [pc, #156]	@ (800784c <menuconfig_task+0x584>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	011b      	lsls	r3, r3, #4
 80077b4:	4a26      	ldr	r2, [pc, #152]	@ (8007850 <menuconfig_task+0x588>)
 80077b6:	4413      	add	r3, r2
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff fc47 	bl	800704c <delete_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 80077be:	4b23      	ldr	r3, [pc, #140]	@ (800784c <menuconfig_task+0x584>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	4a23      	ldr	r2, [pc, #140]	@ (8007850 <menuconfig_task+0x588>)
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	4413      	add	r3, r2
 80077c8:	330c      	adds	r3, #12
 80077ca:	6819      	ldr	r1, [r3, #0]
 80077cc:	4b1f      	ldr	r3, [pc, #124]	@ (800784c <menuconfig_task+0x584>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	4a1f      	ldr	r2, [pc, #124]	@ (8007850 <menuconfig_task+0x588>)
 80077d4:	4413      	add	r3, r2
 80077d6:	461a      	mov	r2, r3
 80077d8:	481e      	ldr	r0, [pc, #120]	@ (8007854 <menuconfig_task+0x58c>)
 80077da:	f005 fc7f 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3+data[state].len, state);
 80077de:	4b1b      	ldr	r3, [pc, #108]	@ (800784c <menuconfig_task+0x584>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007850 <menuconfig_task+0x588>)
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	4413      	add	r3, r2
 80077e8:	330c      	adds	r3, #12
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	3303      	adds	r3, #3
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	4a16      	ldr	r2, [pc, #88]	@ (800784c <menuconfig_task+0x584>)
 80077f4:	7812      	ldrb	r2, [r2, #0]
 80077f6:	4619      	mov	r1, r3
 80077f8:	4817      	ldr	r0, [pc, #92]	@ (8007858 <menuconfig_task+0x590>)
 80077fa:	f7fe fc3e 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, " ");
 80077fe:	4917      	ldr	r1, [pc, #92]	@ (800785c <menuconfig_task+0x594>)
 8007800:	4815      	ldr	r0, [pc, #84]	@ (8007858 <menuconfig_task+0x590>)
 8007802:	f7fe fc8d 	bl	8006120 <CLCD_I2C_WriteString>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 8007806:	4b11      	ldr	r3, [pc, #68]	@ (800784c <menuconfig_task+0x584>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	2103      	movs	r1, #3
 800780e:	4812      	ldr	r0, [pc, #72]	@ (8007858 <menuconfig_task+0x590>)
 8007810:	f7fe fc33 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 8007814:	4b0d      	ldr	r3, [pc, #52]	@ (800784c <menuconfig_task+0x584>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	011b      	lsls	r3, r3, #4
 800781a:	4a0d      	ldr	r2, [pc, #52]	@ (8007850 <menuconfig_task+0x588>)
 800781c:	4413      	add	r3, r2
 800781e:	4619      	mov	r1, r3
 8007820:	480d      	ldr	r0, [pc, #52]	@ (8007858 <menuconfig_task+0x590>)
 8007822:	f7fe fc7d 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007826:	e06b      	b.n	8007900 <menuconfig_task+0x638>
							curr_state = sRunning;
 8007828:	4b0d      	ldr	r3, [pc, #52]	@ (8007860 <menuconfig_task+0x598>)
 800782a:	2200      	movs	r2, #0
 800782c:	701a      	strb	r2, [r3, #0]
							CLCD_I2C_Clear(&LCD1);
 800782e:	480a      	ldr	r0, [pc, #40]	@ (8007858 <menuconfig_task+0x590>)
 8007830:	f7fe fc8d 	bl	800614e <CLCD_I2C_Clear>
							vTaskResume(handle_sensor_task);
 8007834:	4b0b      	ldr	r3, [pc, #44]	@ (8007864 <menuconfig_task+0x59c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4618      	mov	r0, r3
 800783a:	f001 fdb5 	bl	80093a8 <vTaskResume>
							vTaskResume(handle_motor_task);
 800783e:	4b0a      	ldr	r3, [pc, #40]	@ (8007868 <menuconfig_task+0x5a0>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f001 fdb0 	bl	80093a8 <vTaskResume>
							break;
 8007848:	e05a      	b.n	8007900 <menuconfig_task+0x638>
 800784a:	bf00      	nop
 800784c:	2000155a 	.word	0x2000155a
 8007850:	2000155c 	.word	0x2000155c
 8007854:	0800e248 	.word	0x0800e248
 8007858:	20000228 	.word	0x20000228
 800785c:	0800e22c 	.word	0x0800e22c
 8007860:	20000254 	.word	0x20000254
 8007864:	20000234 	.word	0x20000234
 8007868:	20000248 	.word	0x20000248
							add_data(&data[state], '0');
 800786c:	4bbe      	ldr	r3, [pc, #760]	@ (8007b68 <menuconfig_task+0x8a0>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	011b      	lsls	r3, r3, #4
 8007872:	4abe      	ldr	r2, [pc, #760]	@ (8007b6c <menuconfig_task+0x8a4>)
 8007874:	4413      	add	r3, r2
 8007876:	2130      	movs	r1, #48	@ 0x30
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff fbff 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", data[state].len, data[state].payload);
 800787e:	4bba      	ldr	r3, [pc, #744]	@ (8007b68 <menuconfig_task+0x8a0>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	4aba      	ldr	r2, [pc, #744]	@ (8007b6c <menuconfig_task+0x8a4>)
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	4413      	add	r3, r2
 8007888:	330c      	adds	r3, #12
 800788a:	6819      	ldr	r1, [r3, #0]
 800788c:	4bb6      	ldr	r3, [pc, #728]	@ (8007b68 <menuconfig_task+0x8a0>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	4ab6      	ldr	r2, [pc, #728]	@ (8007b6c <menuconfig_task+0x8a4>)
 8007894:	4413      	add	r3, r2
 8007896:	461a      	mov	r2, r3
 8007898:	48b5      	ldr	r0, [pc, #724]	@ (8007b70 <menuconfig_task+0x8a8>)
 800789a:	f005 fc1f 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 3, state);
 800789e:	4bb2      	ldr	r3, [pc, #712]	@ (8007b68 <menuconfig_task+0x8a0>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	2103      	movs	r1, #3
 80078a6:	48b3      	ldr	r0, [pc, #716]	@ (8007b74 <menuconfig_task+0x8ac>)
 80078a8:	f7fe fbe7 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)data[state].payload);
 80078ac:	4bae      	ldr	r3, [pc, #696]	@ (8007b68 <menuconfig_task+0x8a0>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	011b      	lsls	r3, r3, #4
 80078b2:	4aae      	ldr	r2, [pc, #696]	@ (8007b6c <menuconfig_task+0x8a4>)
 80078b4:	4413      	add	r3, r2
 80078b6:	4619      	mov	r1, r3
 80078b8:	48ae      	ldr	r0, [pc, #696]	@ (8007b74 <menuconfig_task+0x8ac>)
 80078ba:	f7fe fc31 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 80078be:	e01f      	b.n	8007900 <menuconfig_task+0x638>
							 curr_state = sMenuconfig_Changepassword;
 80078c0:	4bad      	ldr	r3, [pc, #692]	@ (8007b78 <menuconfig_task+0x8b0>)
 80078c2:	2203      	movs	r2, #3
 80078c4:	701a      	strb	r2, [r3, #0]
							 CLCD_I2C_Clear(&LCD1);
 80078c6:	48ab      	ldr	r0, [pc, #684]	@ (8007b74 <menuconfig_task+0x8ac>)
 80078c8:	f7fe fc41 	bl	800614e <CLCD_I2C_Clear>
							 CLCD_I2C_SetCursor(&LCD1, 2, 0);
 80078cc:	2200      	movs	r2, #0
 80078ce:	2102      	movs	r1, #2
 80078d0:	48a8      	ldr	r0, [pc, #672]	@ (8007b74 <menuconfig_task+0x8ac>)
 80078d2:	f7fe fbd2 	bl	800607a <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "change password");
 80078d6:	49a9      	ldr	r1, [pc, #676]	@ (8007b7c <menuconfig_task+0x8b4>)
 80078d8:	48a6      	ldr	r0, [pc, #664]	@ (8007b74 <menuconfig_task+0x8ac>)
 80078da:	f7fe fc21 	bl	8006120 <CLCD_I2C_WriteString>
							 CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80078de:	2201      	movs	r2, #1
 80078e0:	2100      	movs	r1, #0
 80078e2:	48a4      	ldr	r0, [pc, #656]	@ (8007b74 <menuconfig_task+0x8ac>)
 80078e4:	f7fe fbc9 	bl	800607a <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "Enter:");
 80078e8:	49a5      	ldr	r1, [pc, #660]	@ (8007b80 <menuconfig_task+0x8b8>)
 80078ea:	48a2      	ldr	r0, [pc, #648]	@ (8007b74 <menuconfig_task+0x8ac>)
 80078ec:	f7fe fc18 	bl	8006120 <CLCD_I2C_WriteString>
							 CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80078f0:	49a4      	ldr	r1, [pc, #656]	@ (8007b84 <menuconfig_task+0x8bc>)
 80078f2:	48a0      	ldr	r0, [pc, #640]	@ (8007b74 <menuconfig_task+0x8ac>)
 80078f4:	f7fe fc14 	bl	8006120 <CLCD_I2C_WriteString>
							 break;
 80078f8:	e002      	b.n	8007900 <menuconfig_task+0x638>
							 break;
 80078fa:	bf00      	nop
 80078fc:	e2b7      	b.n	8007e6e <menuconfig_task+0xba6>
							break;
 80078fe:	bf00      	nop
							 }// end switch
					break;
 8007900:	e2b5      	b.n	8007e6e <menuconfig_task+0xba6>

				case sMenuconfig_Saveparameter:
					switch (btn_value) {
 8007902:	89fb      	ldrh	r3, [r7, #14]
 8007904:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007908:	d028      	beq.n	800795c <menuconfig_task+0x694>
 800790a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800790e:	dc7f      	bgt.n	8007a10 <menuconfig_task+0x748>
 8007910:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007914:	d01d      	beq.n	8007952 <menuconfig_task+0x68a>
 8007916:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800791a:	dc79      	bgt.n	8007a10 <menuconfig_task+0x748>
 800791c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007920:	d006      	beq.n	8007930 <menuconfig_task+0x668>
 8007922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007926:	dc73      	bgt.n	8007a10 <menuconfig_task+0x748>
 8007928:	2b08      	cmp	r3, #8
 800792a:	d073      	beq.n	8007a14 <menuconfig_task+0x74c>
 800792c:	2b80      	cmp	r3, #128	@ 0x80
							case BUTTON_A:
								break;
							case BUTTON_B:
								break;
 800792e:	e072      	b.n	8007a16 <menuconfig_task+0x74e>
							case BUTTON_Star:
								curr_state = sRunning;
 8007930:	4b91      	ldr	r3, [pc, #580]	@ (8007b78 <menuconfig_task+0x8b0>)
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
								CLCD_I2C_Clear(&LCD1);
 8007936:	488f      	ldr	r0, [pc, #572]	@ (8007b74 <menuconfig_task+0x8ac>)
 8007938:	f7fe fc09 	bl	800614e <CLCD_I2C_Clear>
								vTaskResume(handle_sensor_task);
 800793c:	4b92      	ldr	r3, [pc, #584]	@ (8007b88 <menuconfig_task+0x8c0>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4618      	mov	r0, r3
 8007942:	f001 fd31 	bl	80093a8 <vTaskResume>
								vTaskResume(handle_motor_task);
 8007946:	4b91      	ldr	r3, [pc, #580]	@ (8007b8c <menuconfig_task+0x8c4>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4618      	mov	r0, r3
 800794c:	f001 fd2c 	bl	80093a8 <vTaskResume>
								break;
 8007950:	e061      	b.n	8007a16 <menuconfig_task+0x74e>

							case BUTTON_Hash:
								 CLCD_I2C_WriteString(&LCD1, "#");
 8007952:	498f      	ldr	r1, [pc, #572]	@ (8007b90 <menuconfig_task+0x8c8>)
 8007954:	4887      	ldr	r0, [pc, #540]	@ (8007b74 <menuconfig_task+0x8ac>)
 8007956:	f7fe fbe3 	bl	8006120 <CLCD_I2C_WriteString>
								break;
 800795a:	e05c      	b.n	8007a16 <menuconfig_task+0x74e>

							case BUTTON_D:
								 curr_state = sMenucofig_Setparameter;
 800795c:	4b86      	ldr	r3, [pc, #536]	@ (8007b78 <menuconfig_task+0x8b0>)
 800795e:	2202      	movs	r2, #2
 8007960:	701a      	strb	r2, [r3, #0]
								 CLCD_I2C_Clear(&LCD1);
 8007962:	4884      	ldr	r0, [pc, #528]	@ (8007b74 <menuconfig_task+0x8ac>)
 8007964:	f7fe fbf3 	bl	800614e <CLCD_I2C_Clear>
								 CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8007968:	2200      	movs	r2, #0
 800796a:	2100      	movs	r1, #0
 800796c:	4881      	ldr	r0, [pc, #516]	@ (8007b74 <menuconfig_task+0x8ac>)
 800796e:	f7fe fb84 	bl	800607a <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "s1:");
 8007972:	4988      	ldr	r1, [pc, #544]	@ (8007b94 <menuconfig_task+0x8cc>)
 8007974:	487f      	ldr	r0, [pc, #508]	@ (8007b74 <menuconfig_task+0x8ac>)
 8007976:	f7fe fbd3 	bl	8006120 <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 19, state);
 800797a:	4b7b      	ldr	r3, [pc, #492]	@ (8007b68 <menuconfig_task+0x8a0>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	2113      	movs	r1, #19
 8007982:	487c      	ldr	r0, [pc, #496]	@ (8007b74 <menuconfig_task+0x8ac>)
 8007984:	f7fe fb79 	bl	800607a <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "<");
 8007988:	4983      	ldr	r1, [pc, #524]	@ (8007b98 <menuconfig_task+0x8d0>)
 800798a:	487a      	ldr	r0, [pc, #488]	@ (8007b74 <menuconfig_task+0x8ac>)
 800798c:	f7fe fbc8 	bl	8006120 <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 3, 0);
 8007990:	2200      	movs	r2, #0
 8007992:	2103      	movs	r1, #3
 8007994:	4877      	ldr	r0, [pc, #476]	@ (8007b74 <menuconfig_task+0x8ac>)
 8007996:	f7fe fb70 	bl	800607a <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, (char*)data[0].payload);
 800799a:	4974      	ldr	r1, [pc, #464]	@ (8007b6c <menuconfig_task+0x8a4>)
 800799c:	4875      	ldr	r0, [pc, #468]	@ (8007b74 <menuconfig_task+0x8ac>)
 800799e:	f7fe fbbf 	bl	8006120 <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80079a2:	2201      	movs	r2, #1
 80079a4:	2100      	movs	r1, #0
 80079a6:	4873      	ldr	r0, [pc, #460]	@ (8007b74 <menuconfig_task+0x8ac>)
 80079a8:	f7fe fb67 	bl	800607a <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "t1:");
 80079ac:	497b      	ldr	r1, [pc, #492]	@ (8007b9c <menuconfig_task+0x8d4>)
 80079ae:	4871      	ldr	r0, [pc, #452]	@ (8007b74 <menuconfig_task+0x8ac>)
 80079b0:	f7fe fbb6 	bl	8006120 <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 3, 1);
 80079b4:	2201      	movs	r2, #1
 80079b6:	2103      	movs	r1, #3
 80079b8:	486e      	ldr	r0, [pc, #440]	@ (8007b74 <menuconfig_task+0x8ac>)
 80079ba:	f7fe fb5e 	bl	800607a <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, (char*)data[1].payload);
 80079be:	4978      	ldr	r1, [pc, #480]	@ (8007ba0 <menuconfig_task+0x8d8>)
 80079c0:	486c      	ldr	r0, [pc, #432]	@ (8007b74 <menuconfig_task+0x8ac>)
 80079c2:	f7fe fbad 	bl	8006120 <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 0, 2);
 80079c6:	2202      	movs	r2, #2
 80079c8:	2100      	movs	r1, #0
 80079ca:	486a      	ldr	r0, [pc, #424]	@ (8007b74 <menuconfig_task+0x8ac>)
 80079cc:	f7fe fb55 	bl	800607a <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "s1:");
 80079d0:	4970      	ldr	r1, [pc, #448]	@ (8007b94 <menuconfig_task+0x8cc>)
 80079d2:	4868      	ldr	r0, [pc, #416]	@ (8007b74 <menuconfig_task+0x8ac>)
 80079d4:	f7fe fba4 	bl	8006120 <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 3, 2);
 80079d8:	2202      	movs	r2, #2
 80079da:	2103      	movs	r1, #3
 80079dc:	4865      	ldr	r0, [pc, #404]	@ (8007b74 <menuconfig_task+0x8ac>)
 80079de:	f7fe fb4c 	bl	800607a <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, (char*)data[2].payload);
 80079e2:	4970      	ldr	r1, [pc, #448]	@ (8007ba4 <menuconfig_task+0x8dc>)
 80079e4:	4863      	ldr	r0, [pc, #396]	@ (8007b74 <menuconfig_task+0x8ac>)
 80079e6:	f7fe fb9b 	bl	8006120 <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 0, 3);
 80079ea:	2203      	movs	r2, #3
 80079ec:	2100      	movs	r1, #0
 80079ee:	4861      	ldr	r0, [pc, #388]	@ (8007b74 <menuconfig_task+0x8ac>)
 80079f0:	f7fe fb43 	bl	800607a <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "s1:");
 80079f4:	4967      	ldr	r1, [pc, #412]	@ (8007b94 <menuconfig_task+0x8cc>)
 80079f6:	485f      	ldr	r0, [pc, #380]	@ (8007b74 <menuconfig_task+0x8ac>)
 80079f8:	f7fe fb92 	bl	8006120 <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 3, 3);
 80079fc:	2203      	movs	r2, #3
 80079fe:	2103      	movs	r1, #3
 8007a00:	485c      	ldr	r0, [pc, #368]	@ (8007b74 <menuconfig_task+0x8ac>)
 8007a02:	f7fe fb3a 	bl	800607a <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, (char*)data[3].payload);
 8007a06:	4968      	ldr	r1, [pc, #416]	@ (8007ba8 <menuconfig_task+0x8e0>)
 8007a08:	485a      	ldr	r0, [pc, #360]	@ (8007b74 <menuconfig_task+0x8ac>)
 8007a0a:	f7fe fb89 	bl	8006120 <CLCD_I2C_WriteString>
								 break;
 8007a0e:	e002      	b.n	8007a16 <menuconfig_task+0x74e>

							 default:
								 break;
 8007a10:	bf00      	nop
 8007a12:	e22c      	b.n	8007e6e <menuconfig_task+0xba6>
								break;
 8007a14:	bf00      	nop
						 }// end switch
					break;
 8007a16:	e22a      	b.n	8007e6e <menuconfig_task+0xba6>
				case sMenuconfig_Changepassword:
					switch (btn_value) {
 8007a18:	89fb      	ldrh	r3, [r7, #14]
 8007a1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a1e:	f000 8200 	beq.w	8007e22 <menuconfig_task+0xb5a>
 8007a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a26:	f300 821e 	bgt.w	8007e66 <menuconfig_task+0xb9e>
 8007a2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a2e:	f000 81ad 	beq.w	8007d8c <menuconfig_task+0xac4>
 8007a32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a36:	f300 8216 	bgt.w	8007e66 <menuconfig_task+0xb9e>
 8007a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a3e:	f000 8190 	beq.w	8007d62 <menuconfig_task+0xa9a>
 8007a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a46:	f300 820e 	bgt.w	8007e66 <menuconfig_task+0xb9e>
 8007a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a4e:	f000 8177 	beq.w	8007d40 <menuconfig_task+0xa78>
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a56:	f300 8206 	bgt.w	8007e66 <menuconfig_task+0xb9e>
 8007a5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a5e:	f000 814d 	beq.w	8007cfc <menuconfig_task+0xa34>
 8007a62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a66:	f300 81fe 	bgt.w	8007e66 <menuconfig_task+0xb9e>
 8007a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a6e:	f000 8130 	beq.w	8007cd2 <menuconfig_task+0xa0a>
 8007a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a76:	f300 81f6 	bgt.w	8007e66 <menuconfig_task+0xb9e>
 8007a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a7e:	f000 8113 	beq.w	8007ca8 <menuconfig_task+0x9e0>
 8007a82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a86:	f300 81ee 	bgt.w	8007e66 <menuconfig_task+0xb9e>
 8007a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a8e:	f000 80f6 	beq.w	8007c7e <menuconfig_task+0x9b6>
 8007a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a96:	f300 81e6 	bgt.w	8007e66 <menuconfig_task+0xb9e>
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	dc4a      	bgt.n	8007b34 <menuconfig_task+0x86c>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f340 81e1 	ble.w	8007e66 <menuconfig_task+0xb9e>
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	2b1f      	cmp	r3, #31
 8007aa8:	f200 81dd 	bhi.w	8007e66 <menuconfig_task+0xb9e>
 8007aac:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <menuconfig_task+0x7ec>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007b3d 	.word	0x08007b3d
 8007ab8:	08007bad 	.word	0x08007bad
 8007abc:	08007e67 	.word	0x08007e67
 8007ac0:	08007bd7 	.word	0x08007bd7
 8007ac4:	08007e67 	.word	0x08007e67
 8007ac8:	08007e67 	.word	0x08007e67
 8007acc:	08007e67 	.word	0x08007e67
 8007ad0:	08007e67 	.word	0x08007e67
 8007ad4:	08007e67 	.word	0x08007e67
 8007ad8:	08007e67 	.word	0x08007e67
 8007adc:	08007e67 	.word	0x08007e67
 8007ae0:	08007e67 	.word	0x08007e67
 8007ae4:	08007e67 	.word	0x08007e67
 8007ae8:	08007e67 	.word	0x08007e67
 8007aec:	08007e67 	.word	0x08007e67
 8007af0:	08007c01 	.word	0x08007c01
 8007af4:	08007e67 	.word	0x08007e67
 8007af8:	08007e67 	.word	0x08007e67
 8007afc:	08007e67 	.word	0x08007e67
 8007b00:	08007e67 	.word	0x08007e67
 8007b04:	08007e67 	.word	0x08007e67
 8007b08:	08007e67 	.word	0x08007e67
 8007b0c:	08007e67 	.word	0x08007e67
 8007b10:	08007e67 	.word	0x08007e67
 8007b14:	08007e67 	.word	0x08007e67
 8007b18:	08007e67 	.word	0x08007e67
 8007b1c:	08007e67 	.word	0x08007e67
 8007b20:	08007e67 	.word	0x08007e67
 8007b24:	08007e67 	.word	0x08007e67
 8007b28:	08007e67 	.word	0x08007e67
 8007b2c:	08007e67 	.word	0x08007e67
 8007b30:	08007c2b 	.word	0x08007c2b
 8007b34:	2b40      	cmp	r3, #64	@ 0x40
 8007b36:	f000 808d 	beq.w	8007c54 <menuconfig_task+0x98c>
							 CLCD_I2C_SetCursor(&LCD1, 10, 1);
							 CLCD_I2C_WriteString(&LCD1, "NO(B)");
							 break;

						 default:
							 break;
 8007b3a:	e194      	b.n	8007e66 <menuconfig_task+0xb9e>
							add_data(&password, '1');
 8007b3c:	2131      	movs	r1, #49	@ 0x31
 8007b3e:	4811      	ldr	r0, [pc, #68]	@ (8007b84 <menuconfig_task+0x8bc>)
 8007b40:	f7ff fa9c 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8007b44:	4b0f      	ldr	r3, [pc, #60]	@ (8007b84 <menuconfig_task+0x8bc>)
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	4a0e      	ldr	r2, [pc, #56]	@ (8007b84 <menuconfig_task+0x8bc>)
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4808      	ldr	r0, [pc, #32]	@ (8007b70 <menuconfig_task+0x8a8>)
 8007b4e:	f005 fac5 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8007b52:	2201      	movs	r2, #1
 8007b54:	2106      	movs	r1, #6
 8007b56:	4807      	ldr	r0, [pc, #28]	@ (8007b74 <menuconfig_task+0x8ac>)
 8007b58:	f7fe fa8f 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8007b5c:	4909      	ldr	r1, [pc, #36]	@ (8007b84 <menuconfig_task+0x8bc>)
 8007b5e:	4805      	ldr	r0, [pc, #20]	@ (8007b74 <menuconfig_task+0x8ac>)
 8007b60:	f7fe fade 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007b64:	e182      	b.n	8007e6c <menuconfig_task+0xba4>
 8007b66:	bf00      	nop
 8007b68:	2000155a 	.word	0x2000155a
 8007b6c:	2000155c 	.word	0x2000155c
 8007b70:	0800e248 	.word	0x0800e248
 8007b74:	20000228 	.word	0x20000228
 8007b78:	20000254 	.word	0x20000254
 8007b7c:	0800e25c 	.word	0x0800e25c
 8007b80:	0800e26c 	.word	0x0800e26c
 8007b84:	2000159c 	.word	0x2000159c
 8007b88:	20000234 	.word	0x20000234
 8007b8c:	20000248 	.word	0x20000248
 8007b90:	0800e274 	.word	0x0800e274
 8007b94:	0800e278 	.word	0x0800e278
 8007b98:	0800e230 	.word	0x0800e230
 8007b9c:	0800e27c 	.word	0x0800e27c
 8007ba0:	2000156c 	.word	0x2000156c
 8007ba4:	2000157c 	.word	0x2000157c
 8007ba8:	2000158c 	.word	0x2000158c
							add_data(&password, '2');
 8007bac:	2132      	movs	r1, #50	@ 0x32
 8007bae:	48b1      	ldr	r0, [pc, #708]	@ (8007e74 <menuconfig_task+0xbac>)
 8007bb0:	f7ff fa64 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8007bb4:	4baf      	ldr	r3, [pc, #700]	@ (8007e74 <menuconfig_task+0xbac>)
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	4aae      	ldr	r2, [pc, #696]	@ (8007e74 <menuconfig_task+0xbac>)
 8007bba:	4619      	mov	r1, r3
 8007bbc:	48ae      	ldr	r0, [pc, #696]	@ (8007e78 <menuconfig_task+0xbb0>)
 8007bbe:	f005 fa8d 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	2106      	movs	r1, #6
 8007bc6:	48ad      	ldr	r0, [pc, #692]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007bc8:	f7fe fa57 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8007bcc:	49a9      	ldr	r1, [pc, #676]	@ (8007e74 <menuconfig_task+0xbac>)
 8007bce:	48ab      	ldr	r0, [pc, #684]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007bd0:	f7fe faa6 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007bd4:	e14a      	b.n	8007e6c <menuconfig_task+0xba4>
							add_data(&password, '3');
 8007bd6:	2133      	movs	r1, #51	@ 0x33
 8007bd8:	48a6      	ldr	r0, [pc, #664]	@ (8007e74 <menuconfig_task+0xbac>)
 8007bda:	f7ff fa4f 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8007bde:	4ba5      	ldr	r3, [pc, #660]	@ (8007e74 <menuconfig_task+0xbac>)
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	4aa4      	ldr	r2, [pc, #656]	@ (8007e74 <menuconfig_task+0xbac>)
 8007be4:	4619      	mov	r1, r3
 8007be6:	48a4      	ldr	r0, [pc, #656]	@ (8007e78 <menuconfig_task+0xbb0>)
 8007be8:	f005 fa78 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8007bec:	2201      	movs	r2, #1
 8007bee:	2106      	movs	r1, #6
 8007bf0:	48a2      	ldr	r0, [pc, #648]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007bf2:	f7fe fa42 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8007bf6:	499f      	ldr	r1, [pc, #636]	@ (8007e74 <menuconfig_task+0xbac>)
 8007bf8:	48a0      	ldr	r0, [pc, #640]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007bfa:	f7fe fa91 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007bfe:	e135      	b.n	8007e6c <menuconfig_task+0xba4>
							add_data(&password, '4');
 8007c00:	2134      	movs	r1, #52	@ 0x34
 8007c02:	489c      	ldr	r0, [pc, #624]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c04:	f7ff fa3a 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8007c08:	4b9a      	ldr	r3, [pc, #616]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	4a99      	ldr	r2, [pc, #612]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4899      	ldr	r0, [pc, #612]	@ (8007e78 <menuconfig_task+0xbb0>)
 8007c12:	f005 fa63 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8007c16:	2201      	movs	r2, #1
 8007c18:	2106      	movs	r1, #6
 8007c1a:	4898      	ldr	r0, [pc, #608]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007c1c:	f7fe fa2d 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8007c20:	4994      	ldr	r1, [pc, #592]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c22:	4896      	ldr	r0, [pc, #600]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007c24:	f7fe fa7c 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007c28:	e120      	b.n	8007e6c <menuconfig_task+0xba4>
							add_data(&password, '5');
 8007c2a:	2135      	movs	r1, #53	@ 0x35
 8007c2c:	4891      	ldr	r0, [pc, #580]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c2e:	f7ff fa25 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8007c32:	4b90      	ldr	r3, [pc, #576]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	4a8f      	ldr	r2, [pc, #572]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c38:	4619      	mov	r1, r3
 8007c3a:	488f      	ldr	r0, [pc, #572]	@ (8007e78 <menuconfig_task+0xbb0>)
 8007c3c:	f005 fa4e 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8007c40:	2201      	movs	r2, #1
 8007c42:	2106      	movs	r1, #6
 8007c44:	488d      	ldr	r0, [pc, #564]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007c46:	f7fe fa18 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8007c4a:	498a      	ldr	r1, [pc, #552]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c4c:	488b      	ldr	r0, [pc, #556]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007c4e:	f7fe fa67 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007c52:	e10b      	b.n	8007e6c <menuconfig_task+0xba4>
							add_data(&password, '6');
 8007c54:	2136      	movs	r1, #54	@ 0x36
 8007c56:	4887      	ldr	r0, [pc, #540]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c58:	f7ff fa10 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8007c5c:	4b85      	ldr	r3, [pc, #532]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	4a84      	ldr	r2, [pc, #528]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c62:	4619      	mov	r1, r3
 8007c64:	4884      	ldr	r0, [pc, #528]	@ (8007e78 <menuconfig_task+0xbb0>)
 8007c66:	f005 fa39 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	2106      	movs	r1, #6
 8007c6e:	4883      	ldr	r0, [pc, #524]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007c70:	f7fe fa03 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8007c74:	497f      	ldr	r1, [pc, #508]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c76:	4881      	ldr	r0, [pc, #516]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007c78:	f7fe fa52 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007c7c:	e0f6      	b.n	8007e6c <menuconfig_task+0xba4>
							add_data(&password, '7');
 8007c7e:	2137      	movs	r1, #55	@ 0x37
 8007c80:	487c      	ldr	r0, [pc, #496]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c82:	f7ff f9fb 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8007c86:	4b7b      	ldr	r3, [pc, #492]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	4a7a      	ldr	r2, [pc, #488]	@ (8007e74 <menuconfig_task+0xbac>)
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	487a      	ldr	r0, [pc, #488]	@ (8007e78 <menuconfig_task+0xbb0>)
 8007c90:	f005 fa24 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8007c94:	2201      	movs	r2, #1
 8007c96:	2106      	movs	r1, #6
 8007c98:	4878      	ldr	r0, [pc, #480]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007c9a:	f7fe f9ee 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8007c9e:	4975      	ldr	r1, [pc, #468]	@ (8007e74 <menuconfig_task+0xbac>)
 8007ca0:	4876      	ldr	r0, [pc, #472]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007ca2:	f7fe fa3d 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007ca6:	e0e1      	b.n	8007e6c <menuconfig_task+0xba4>
							add_data(&password, '8');
 8007ca8:	2138      	movs	r1, #56	@ 0x38
 8007caa:	4872      	ldr	r0, [pc, #456]	@ (8007e74 <menuconfig_task+0xbac>)
 8007cac:	f7ff f9e6 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8007cb0:	4b70      	ldr	r3, [pc, #448]	@ (8007e74 <menuconfig_task+0xbac>)
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	4a6f      	ldr	r2, [pc, #444]	@ (8007e74 <menuconfig_task+0xbac>)
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	486f      	ldr	r0, [pc, #444]	@ (8007e78 <menuconfig_task+0xbb0>)
 8007cba:	f005 fa0f 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	2106      	movs	r1, #6
 8007cc2:	486e      	ldr	r0, [pc, #440]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007cc4:	f7fe f9d9 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8007cc8:	496a      	ldr	r1, [pc, #424]	@ (8007e74 <menuconfig_task+0xbac>)
 8007cca:	486c      	ldr	r0, [pc, #432]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007ccc:	f7fe fa28 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007cd0:	e0cc      	b.n	8007e6c <menuconfig_task+0xba4>
							add_data(&password, '9');
 8007cd2:	2139      	movs	r1, #57	@ 0x39
 8007cd4:	4867      	ldr	r0, [pc, #412]	@ (8007e74 <menuconfig_task+0xbac>)
 8007cd6:	f7ff f9d1 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8007cda:	4b66      	ldr	r3, [pc, #408]	@ (8007e74 <menuconfig_task+0xbac>)
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	4a65      	ldr	r2, [pc, #404]	@ (8007e74 <menuconfig_task+0xbac>)
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4865      	ldr	r0, [pc, #404]	@ (8007e78 <menuconfig_task+0xbb0>)
 8007ce4:	f005 f9fa 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8007ce8:	2201      	movs	r2, #1
 8007cea:	2106      	movs	r1, #6
 8007cec:	4863      	ldr	r0, [pc, #396]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007cee:	f7fe f9c4 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8007cf2:	4960      	ldr	r1, [pc, #384]	@ (8007e74 <menuconfig_task+0xbac>)
 8007cf4:	4861      	ldr	r0, [pc, #388]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007cf6:	f7fe fa13 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007cfa:	e0b7      	b.n	8007e6c <menuconfig_task+0xba4>
							delete_data(&password);
 8007cfc:	485d      	ldr	r0, [pc, #372]	@ (8007e74 <menuconfig_task+0xbac>)
 8007cfe:	f7ff f9a5 	bl	800704c <delete_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8007d02:	4b5c      	ldr	r3, [pc, #368]	@ (8007e74 <menuconfig_task+0xbac>)
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	4a5b      	ldr	r2, [pc, #364]	@ (8007e74 <menuconfig_task+0xbac>)
 8007d08:	4619      	mov	r1, r3
 8007d0a:	485b      	ldr	r0, [pc, #364]	@ (8007e78 <menuconfig_task+0xbb0>)
 8007d0c:	f005 f9e6 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6+password.len, 1);
 8007d10:	4b58      	ldr	r3, [pc, #352]	@ (8007e74 <menuconfig_task+0xbac>)
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	3306      	adds	r3, #6
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	4857      	ldr	r0, [pc, #348]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007d20:	f7fe f9ab 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, " ");
 8007d24:	4956      	ldr	r1, [pc, #344]	@ (8007e80 <menuconfig_task+0xbb8>)
 8007d26:	4855      	ldr	r0, [pc, #340]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007d28:	f7fe f9fa 	bl	8006120 <CLCD_I2C_WriteString>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	2106      	movs	r1, #6
 8007d30:	4852      	ldr	r0, [pc, #328]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007d32:	f7fe f9a2 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8007d36:	494f      	ldr	r1, [pc, #316]	@ (8007e74 <menuconfig_task+0xbac>)
 8007d38:	4850      	ldr	r0, [pc, #320]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007d3a:	f7fe f9f1 	bl	8006120 <CLCD_I2C_WriteString>
							break;
 8007d3e:	e095      	b.n	8007e6c <menuconfig_task+0xba4>
							 curr_state = sRunning;
 8007d40:	4b50      	ldr	r3, [pc, #320]	@ (8007e84 <menuconfig_task+0xbbc>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]
							 CLCD_I2C_Clear(&LCD1);
 8007d46:	484d      	ldr	r0, [pc, #308]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007d48:	f7fe fa01 	bl	800614e <CLCD_I2C_Clear>
							 vTaskResume(handle_sensor_task);
 8007d4c:	4b4e      	ldr	r3, [pc, #312]	@ (8007e88 <menuconfig_task+0xbc0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 fb29 	bl	80093a8 <vTaskResume>
							 vTaskResume(handle_motor_task);
 8007d56:	4b4d      	ldr	r3, [pc, #308]	@ (8007e8c <menuconfig_task+0xbc4>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f001 fb24 	bl	80093a8 <vTaskResume>
							 break;
 8007d60:	e084      	b.n	8007e6c <menuconfig_task+0xba4>
							add_data(&password, '0');
 8007d62:	2130      	movs	r1, #48	@ 0x30
 8007d64:	4843      	ldr	r0, [pc, #268]	@ (8007e74 <menuconfig_task+0xbac>)
 8007d66:	f7ff f989 	bl	800707c <add_data>
							printf("len=%d, payload=%s\n", password.len, password.payload);
 8007d6a:	4b42      	ldr	r3, [pc, #264]	@ (8007e74 <menuconfig_task+0xbac>)
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	4a41      	ldr	r2, [pc, #260]	@ (8007e74 <menuconfig_task+0xbac>)
 8007d70:	4619      	mov	r1, r3
 8007d72:	4841      	ldr	r0, [pc, #260]	@ (8007e78 <menuconfig_task+0xbb0>)
 8007d74:	f005 f9b2 	bl	800d0dc <iprintf>
							CLCD_I2C_SetCursor(&LCD1, 6, 1);
 8007d78:	2201      	movs	r2, #1
 8007d7a:	2106      	movs	r1, #6
 8007d7c:	483f      	ldr	r0, [pc, #252]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007d7e:	f7fe f97c 	bl	800607a <CLCD_I2C_SetCursor>
							CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8007d82:	493c      	ldr	r1, [pc, #240]	@ (8007e74 <menuconfig_task+0xbac>)
 8007d84:	483d      	ldr	r0, [pc, #244]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007d86:	f7fe f9cb 	bl	8006120 <CLCD_I2C_WriteString>
							 break;
 8007d8a:	e06f      	b.n	8007e6c <menuconfig_task+0xba4>
							 if(password.len != 0){
 8007d8c:	4b39      	ldr	r3, [pc, #228]	@ (8007e74 <menuconfig_task+0xbac>)
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d06a      	beq.n	8007e6a <menuconfig_task+0xba2>
								memcpy(parameter_read.password, password.payload, sizeof(password.payload));
 8007d94:	4a3e      	ldr	r2, [pc, #248]	@ (8007e90 <menuconfig_task+0xbc8>)
 8007d96:	4b37      	ldr	r3, [pc, #220]	@ (8007e74 <menuconfig_task+0xbac>)
 8007d98:	cb03      	ldmia	r3!, {r0, r1}
 8007d9a:	6010      	str	r0, [r2, #0]
 8007d9c:	6051      	str	r1, [r2, #4]
 8007d9e:	8819      	ldrh	r1, [r3, #0]
 8007da0:	789b      	ldrb	r3, [r3, #2]
 8007da2:	8111      	strh	r1, [r2, #8]
 8007da4:	7293      	strb	r3, [r2, #10]
								flash_unlock();
 8007da6:	f7fe fedf 	bl	8006b68 <flash_unlock>
								flash_erease(FLASH_SECTOR_6);
 8007daa:	2006      	movs	r0, #6
 8007dac:	f7fe fee8 	bl	8006b80 <flash_erease>
								flash_write_arr(0x08040000,(uint8_t *)&parameter_read,sizeof(parameter_read));
 8007db0:	220f      	movs	r2, #15
 8007db2:	4937      	ldr	r1, [pc, #220]	@ (8007e90 <menuconfig_task+0xbc8>)
 8007db4:	4837      	ldr	r0, [pc, #220]	@ (8007e94 <menuconfig_task+0xbcc>)
 8007db6:	f7fe fefb 	bl	8006bb0 <flash_write_arr>
								flash_lock();
 8007dba:	f7fe fedb 	bl	8006b74 <flash_lock>
								memset(password.payload, 0, sizeof(password.payload));  // reset data
 8007dbe:	220b      	movs	r2, #11
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	482c      	ldr	r0, [pc, #176]	@ (8007e74 <menuconfig_task+0xbac>)
 8007dc4:	f005 fa10 	bl	800d1e8 <memset>
								password.len = 0;  // reset length
 8007dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8007e74 <menuconfig_task+0xbac>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	60da      	str	r2, [r3, #12]
								CLCD_I2C_Clear(&LCD1);
 8007dce:	482b      	ldr	r0, [pc, #172]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007dd0:	f7fe f9bd 	bl	800614e <CLCD_I2C_Clear>
								CLCD_I2C_SetCursor(&LCD1, 1, 0);
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	4828      	ldr	r0, [pc, #160]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007dda:	f7fe f94e 	bl	800607a <CLCD_I2C_SetCursor>
								CLCD_I2C_WriteString(&LCD1, "change sucessfully");
 8007dde:	492e      	ldr	r1, [pc, #184]	@ (8007e98 <menuconfig_task+0xbd0>)
 8007de0:	4826      	ldr	r0, [pc, #152]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007de2:	f7fe f99d 	bl	8006120 <CLCD_I2C_WriteString>
								vTaskDelay(pdMS_TO_TICKS(1000));
 8007de6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007dea:	f001 f9b9 	bl	8009160 <vTaskDelay>
								 CLCD_I2C_Clear(&LCD1);
 8007dee:	4823      	ldr	r0, [pc, #140]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007df0:	f7fe f9ad 	bl	800614e <CLCD_I2C_Clear>
								 CLCD_I2C_SetCursor(&LCD1, 2, 0);
 8007df4:	2200      	movs	r2, #0
 8007df6:	2102      	movs	r1, #2
 8007df8:	4820      	ldr	r0, [pc, #128]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007dfa:	f7fe f93e 	bl	800607a <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "change password");
 8007dfe:	4927      	ldr	r1, [pc, #156]	@ (8007e9c <menuconfig_task+0xbd4>)
 8007e00:	481e      	ldr	r0, [pc, #120]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007e02:	f7fe f98d 	bl	8006120 <CLCD_I2C_WriteString>
								 CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8007e06:	2201      	movs	r2, #1
 8007e08:	2100      	movs	r1, #0
 8007e0a:	481c      	ldr	r0, [pc, #112]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007e0c:	f7fe f935 	bl	800607a <CLCD_I2C_SetCursor>
								 CLCD_I2C_WriteString(&LCD1, "Enter:");
 8007e10:	4923      	ldr	r1, [pc, #140]	@ (8007ea0 <menuconfig_task+0xbd8>)
 8007e12:	481a      	ldr	r0, [pc, #104]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007e14:	f7fe f984 	bl	8006120 <CLCD_I2C_WriteString>
								 CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8007e18:	4916      	ldr	r1, [pc, #88]	@ (8007e74 <menuconfig_task+0xbac>)
 8007e1a:	4818      	ldr	r0, [pc, #96]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007e1c:	f7fe f980 	bl	8006120 <CLCD_I2C_WriteString>
							 break;
 8007e20:	e023      	b.n	8007e6a <menuconfig_task+0xba2>
							 curr_state = sMenuconfig_Saveparameter;
 8007e22:	4b18      	ldr	r3, [pc, #96]	@ (8007e84 <menuconfig_task+0xbbc>)
 8007e24:	2204      	movs	r2, #4
 8007e26:	701a      	strb	r2, [r3, #0]
							 CLCD_I2C_Clear(&LCD1);
 8007e28:	4814      	ldr	r0, [pc, #80]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007e2a:	f7fe f990 	bl	800614e <CLCD_I2C_Clear>
							 CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2100      	movs	r1, #0
 8007e32:	4812      	ldr	r0, [pc, #72]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007e34:	f7fe f921 	bl	800607a <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "Save new parameter?");
 8007e38:	491a      	ldr	r1, [pc, #104]	@ (8007ea4 <menuconfig_task+0xbdc>)
 8007e3a:	4810      	ldr	r0, [pc, #64]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007e3c:	f7fe f970 	bl	8006120 <CLCD_I2C_WriteString>
							 CLCD_I2C_SetCursor(&LCD1, 2, 1);
 8007e40:	2201      	movs	r2, #1
 8007e42:	2102      	movs	r1, #2
 8007e44:	480d      	ldr	r0, [pc, #52]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007e46:	f7fe f918 	bl	800607a <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "YES(A)");
 8007e4a:	4917      	ldr	r1, [pc, #92]	@ (8007ea8 <menuconfig_task+0xbe0>)
 8007e4c:	480b      	ldr	r0, [pc, #44]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007e4e:	f7fe f967 	bl	8006120 <CLCD_I2C_WriteString>
							 CLCD_I2C_SetCursor(&LCD1, 10, 1);
 8007e52:	2201      	movs	r2, #1
 8007e54:	210a      	movs	r1, #10
 8007e56:	4809      	ldr	r0, [pc, #36]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007e58:	f7fe f90f 	bl	800607a <CLCD_I2C_SetCursor>
							 CLCD_I2C_WriteString(&LCD1, "NO(B)");
 8007e5c:	4913      	ldr	r1, [pc, #76]	@ (8007eac <menuconfig_task+0xbe4>)
 8007e5e:	4807      	ldr	r0, [pc, #28]	@ (8007e7c <menuconfig_task+0xbb4>)
 8007e60:	f7fe f95e 	bl	8006120 <CLCD_I2C_WriteString>
							 break;
 8007e64:	e002      	b.n	8007e6c <menuconfig_task+0xba4>
							 break;
 8007e66:	bf00      	nop
 8007e68:	e000      	b.n	8007e6c <menuconfig_task+0xba4>
							 break;
 8007e6a:	bf00      	nop
						 }// end switch
					break;
 8007e6c:	bf00      	nop
	while(1){
 8007e6e:	f7ff ba2f 	b.w	80072d0 <menuconfig_task+0x8>
 8007e72:	bf00      	nop
 8007e74:	2000159c 	.word	0x2000159c
 8007e78:	0800e248 	.word	0x0800e248
 8007e7c:	20000228 	.word	0x20000228
 8007e80:	0800e22c 	.word	0x0800e22c
 8007e84:	20000254 	.word	0x20000254
 8007e88:	20000234 	.word	0x20000234
 8007e8c:	20000248 	.word	0x20000248
 8007e90:	20000258 	.word	0x20000258
 8007e94:	08040000 	.word	0x08040000
 8007e98:	0800e280 	.word	0x0800e280
 8007e9c:	0800e25c 	.word	0x0800e25c
 8007ea0:	0800e26c 	.word	0x0800e26c
 8007ea4:	0800e294 	.word	0x0800e294
 8007ea8:	0800e2a8 	.word	0x0800e2a8
 8007eac:	0800e2b0 	.word	0x0800e2b0

08007eb0 <password_task>:
	}

}


void password_task(void *param){
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	6078      	str	r0, [r7, #4]

	uint16_t btn_value;
	uint32_t btn_value_addr;

	while(1){
		xTaskNotifyWait(0,0,&btn_value_addr,portMAX_DELAY);
 8007eb8:	f107 0308 	add.w	r3, r7, #8
 8007ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec0:	9200      	str	r2, [sp, #0]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	f002 f9c8 	bl	800a25c <xTaskGenericNotifyWait>
		btn_value = (uint16_t) btn_value_addr;
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	81fb      	strh	r3, [r7, #14]
		printf("%d\n",btn_value);
 8007ed0:	89fb      	ldrh	r3, [r7, #14]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	48ba      	ldr	r0, [pc, #744]	@ (80081c0 <password_task+0x310>)
 8007ed6:	f005 f901 	bl	800d0dc <iprintf>

		if (btn_value) {
 8007eda:	89fb      	ldrh	r3, [r7, #14]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d0eb      	beq.n	8007eb8 <password_task+0x8>
			switch (btn_value) {
 8007ee0:	89fb      	ldrh	r3, [r7, #14]
 8007ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ee6:	f000 81ab 	beq.w	8008240 <password_task+0x390>
 8007eea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eee:	f300 8207 	bgt.w	8008300 <password_task+0x450>
 8007ef2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ef6:	f000 819e 	beq.w	8008236 <password_task+0x386>
 8007efa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007efe:	f300 81ff 	bgt.w	8008300 <password_task+0x450>
 8007f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f06:	f000 8181 	beq.w	800820c <password_task+0x35c>
 8007f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f0e:	f300 81f7 	bgt.w	8008300 <password_task+0x450>
 8007f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f16:	f000 815d 	beq.w	80081d4 <password_task+0x324>
 8007f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f1e:	f300 81ef 	bgt.w	8008300 <password_task+0x450>
 8007f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f26:	f000 8129 	beq.w	800817c <password_task+0x2cc>
 8007f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f2e:	f300 81e7 	bgt.w	8008300 <password_task+0x450>
 8007f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f36:	f000 810c 	beq.w	8008152 <password_task+0x2a2>
 8007f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f3e:	f300 81df 	bgt.w	8008300 <password_task+0x450>
 8007f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f46:	f000 80ef 	beq.w	8008128 <password_task+0x278>
 8007f4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f4e:	f300 81d7 	bgt.w	8008300 <password_task+0x450>
 8007f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f56:	f000 80d2 	beq.w	80080fe <password_task+0x24e>
 8007f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f5e:	f300 81cf 	bgt.w	8008300 <password_task+0x450>
 8007f62:	2b20      	cmp	r3, #32
 8007f64:	dc4a      	bgt.n	8007ffc <password_task+0x14c>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f340 81ca 	ble.w	8008300 <password_task+0x450>
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	2b1f      	cmp	r3, #31
 8007f70:	f200 81c6 	bhi.w	8008300 <password_task+0x450>
 8007f74:	a201      	add	r2, pc, #4	@ (adr r2, 8007f7c <password_task+0xcc>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08008003 	.word	0x08008003
 8007f80:	0800802d 	.word	0x0800802d
 8007f84:	08008301 	.word	0x08008301
 8007f88:	08008057 	.word	0x08008057
 8007f8c:	08008301 	.word	0x08008301
 8007f90:	08008301 	.word	0x08008301
 8007f94:	08008301 	.word	0x08008301
 8007f98:	08008301 	.word	0x08008301
 8007f9c:	08008301 	.word	0x08008301
 8007fa0:	08008301 	.word	0x08008301
 8007fa4:	08008301 	.word	0x08008301
 8007fa8:	08008301 	.word	0x08008301
 8007fac:	08008301 	.word	0x08008301
 8007fb0:	08008301 	.word	0x08008301
 8007fb4:	08008301 	.word	0x08008301
 8007fb8:	08008081 	.word	0x08008081
 8007fbc:	08008301 	.word	0x08008301
 8007fc0:	08008301 	.word	0x08008301
 8007fc4:	08008301 	.word	0x08008301
 8007fc8:	08008301 	.word	0x08008301
 8007fcc:	08008301 	.word	0x08008301
 8007fd0:	08008301 	.word	0x08008301
 8007fd4:	08008301 	.word	0x08008301
 8007fd8:	08008301 	.word	0x08008301
 8007fdc:	08008301 	.word	0x08008301
 8007fe0:	08008301 	.word	0x08008301
 8007fe4:	08008301 	.word	0x08008301
 8007fe8:	08008301 	.word	0x08008301
 8007fec:	08008301 	.word	0x08008301
 8007ff0:	08008301 	.word	0x08008301
 8007ff4:	08008301 	.word	0x08008301
 8007ff8:	080080ab 	.word	0x080080ab
 8007ffc:	2b40      	cmp	r3, #64	@ 0x40
 8007ffe:	d069      	beq.n	80080d4 <password_task+0x224>
						password.len = 0;  // reset length
					}
					 break;

				 default:
					 break;
 8008000:	e17e      	b.n	8008300 <password_task+0x450>
					add_data(&password, '1');
 8008002:	2131      	movs	r1, #49	@ 0x31
 8008004:	486f      	ldr	r0, [pc, #444]	@ (80081c4 <password_task+0x314>)
 8008006:	f7ff f839 	bl	800707c <add_data>
					printf("len=%d, payload=%s\n", password.len, password.payload);
 800800a:	4b6e      	ldr	r3, [pc, #440]	@ (80081c4 <password_task+0x314>)
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	4a6d      	ldr	r2, [pc, #436]	@ (80081c4 <password_task+0x314>)
 8008010:	4619      	mov	r1, r3
 8008012:	486d      	ldr	r0, [pc, #436]	@ (80081c8 <password_task+0x318>)
 8008014:	f005 f862 	bl	800d0dc <iprintf>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8008018:	2201      	movs	r2, #1
 800801a:	2104      	movs	r1, #4
 800801c:	486b      	ldr	r0, [pc, #428]	@ (80081cc <password_task+0x31c>)
 800801e:	f7fe f82c 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8008022:	4968      	ldr	r1, [pc, #416]	@ (80081c4 <password_task+0x314>)
 8008024:	4869      	ldr	r0, [pc, #420]	@ (80081cc <password_task+0x31c>)
 8008026:	f7fe f87b 	bl	8006120 <CLCD_I2C_WriteString>
					break;
 800802a:	e16a      	b.n	8008302 <password_task+0x452>
					add_data(&password, '2');
 800802c:	2132      	movs	r1, #50	@ 0x32
 800802e:	4865      	ldr	r0, [pc, #404]	@ (80081c4 <password_task+0x314>)
 8008030:	f7ff f824 	bl	800707c <add_data>
					printf("len=%d, payload=%s\n", password.len, password.payload);
 8008034:	4b63      	ldr	r3, [pc, #396]	@ (80081c4 <password_task+0x314>)
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	4a62      	ldr	r2, [pc, #392]	@ (80081c4 <password_task+0x314>)
 800803a:	4619      	mov	r1, r3
 800803c:	4862      	ldr	r0, [pc, #392]	@ (80081c8 <password_task+0x318>)
 800803e:	f005 f84d 	bl	800d0dc <iprintf>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8008042:	2201      	movs	r2, #1
 8008044:	2104      	movs	r1, #4
 8008046:	4861      	ldr	r0, [pc, #388]	@ (80081cc <password_task+0x31c>)
 8008048:	f7fe f817 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800804c:	495d      	ldr	r1, [pc, #372]	@ (80081c4 <password_task+0x314>)
 800804e:	485f      	ldr	r0, [pc, #380]	@ (80081cc <password_task+0x31c>)
 8008050:	f7fe f866 	bl	8006120 <CLCD_I2C_WriteString>
					break;
 8008054:	e155      	b.n	8008302 <password_task+0x452>
					add_data(&password, '3');
 8008056:	2133      	movs	r1, #51	@ 0x33
 8008058:	485a      	ldr	r0, [pc, #360]	@ (80081c4 <password_task+0x314>)
 800805a:	f7ff f80f 	bl	800707c <add_data>
					printf("len=%d, payload=%s\n", password.len, password.payload);
 800805e:	4b59      	ldr	r3, [pc, #356]	@ (80081c4 <password_task+0x314>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	4a58      	ldr	r2, [pc, #352]	@ (80081c4 <password_task+0x314>)
 8008064:	4619      	mov	r1, r3
 8008066:	4858      	ldr	r0, [pc, #352]	@ (80081c8 <password_task+0x318>)
 8008068:	f005 f838 	bl	800d0dc <iprintf>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800806c:	2201      	movs	r2, #1
 800806e:	2104      	movs	r1, #4
 8008070:	4856      	ldr	r0, [pc, #344]	@ (80081cc <password_task+0x31c>)
 8008072:	f7fe f802 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8008076:	4953      	ldr	r1, [pc, #332]	@ (80081c4 <password_task+0x314>)
 8008078:	4854      	ldr	r0, [pc, #336]	@ (80081cc <password_task+0x31c>)
 800807a:	f7fe f851 	bl	8006120 <CLCD_I2C_WriteString>
					break;
 800807e:	e140      	b.n	8008302 <password_task+0x452>
					add_data(&password, '4');
 8008080:	2134      	movs	r1, #52	@ 0x34
 8008082:	4850      	ldr	r0, [pc, #320]	@ (80081c4 <password_task+0x314>)
 8008084:	f7fe fffa 	bl	800707c <add_data>
					printf("len=%d, payload=%s\n", password.len, password.payload);
 8008088:	4b4e      	ldr	r3, [pc, #312]	@ (80081c4 <password_task+0x314>)
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	4a4d      	ldr	r2, [pc, #308]	@ (80081c4 <password_task+0x314>)
 800808e:	4619      	mov	r1, r3
 8008090:	484d      	ldr	r0, [pc, #308]	@ (80081c8 <password_task+0x318>)
 8008092:	f005 f823 	bl	800d0dc <iprintf>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8008096:	2201      	movs	r2, #1
 8008098:	2104      	movs	r1, #4
 800809a:	484c      	ldr	r0, [pc, #304]	@ (80081cc <password_task+0x31c>)
 800809c:	f7fd ffed 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80080a0:	4948      	ldr	r1, [pc, #288]	@ (80081c4 <password_task+0x314>)
 80080a2:	484a      	ldr	r0, [pc, #296]	@ (80081cc <password_task+0x31c>)
 80080a4:	f7fe f83c 	bl	8006120 <CLCD_I2C_WriteString>
					break;
 80080a8:	e12b      	b.n	8008302 <password_task+0x452>
					add_data(&password, '5');
 80080aa:	2135      	movs	r1, #53	@ 0x35
 80080ac:	4845      	ldr	r0, [pc, #276]	@ (80081c4 <password_task+0x314>)
 80080ae:	f7fe ffe5 	bl	800707c <add_data>
					printf("len=%d, payload=%s\n", password.len, password.payload);
 80080b2:	4b44      	ldr	r3, [pc, #272]	@ (80081c4 <password_task+0x314>)
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	4a43      	ldr	r2, [pc, #268]	@ (80081c4 <password_task+0x314>)
 80080b8:	4619      	mov	r1, r3
 80080ba:	4843      	ldr	r0, [pc, #268]	@ (80081c8 <password_task+0x318>)
 80080bc:	f005 f80e 	bl	800d0dc <iprintf>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 80080c0:	2201      	movs	r2, #1
 80080c2:	2104      	movs	r1, #4
 80080c4:	4841      	ldr	r0, [pc, #260]	@ (80081cc <password_task+0x31c>)
 80080c6:	f7fd ffd8 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80080ca:	493e      	ldr	r1, [pc, #248]	@ (80081c4 <password_task+0x314>)
 80080cc:	483f      	ldr	r0, [pc, #252]	@ (80081cc <password_task+0x31c>)
 80080ce:	f7fe f827 	bl	8006120 <CLCD_I2C_WriteString>
					break;
 80080d2:	e116      	b.n	8008302 <password_task+0x452>
					add_data(&password, '6');
 80080d4:	2136      	movs	r1, #54	@ 0x36
 80080d6:	483b      	ldr	r0, [pc, #236]	@ (80081c4 <password_task+0x314>)
 80080d8:	f7fe ffd0 	bl	800707c <add_data>
					printf("len=%d, payload=%s\n", password.len, password.payload);
 80080dc:	4b39      	ldr	r3, [pc, #228]	@ (80081c4 <password_task+0x314>)
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	4a38      	ldr	r2, [pc, #224]	@ (80081c4 <password_task+0x314>)
 80080e2:	4619      	mov	r1, r3
 80080e4:	4838      	ldr	r0, [pc, #224]	@ (80081c8 <password_task+0x318>)
 80080e6:	f004 fff9 	bl	800d0dc <iprintf>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 80080ea:	2201      	movs	r2, #1
 80080ec:	2104      	movs	r1, #4
 80080ee:	4837      	ldr	r0, [pc, #220]	@ (80081cc <password_task+0x31c>)
 80080f0:	f7fd ffc3 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80080f4:	4933      	ldr	r1, [pc, #204]	@ (80081c4 <password_task+0x314>)
 80080f6:	4835      	ldr	r0, [pc, #212]	@ (80081cc <password_task+0x31c>)
 80080f8:	f7fe f812 	bl	8006120 <CLCD_I2C_WriteString>
					break;
 80080fc:	e101      	b.n	8008302 <password_task+0x452>
					add_data(&password, '7');
 80080fe:	2137      	movs	r1, #55	@ 0x37
 8008100:	4830      	ldr	r0, [pc, #192]	@ (80081c4 <password_task+0x314>)
 8008102:	f7fe ffbb 	bl	800707c <add_data>
					printf("len=%d, payload=%s\n", password.len, password.payload);
 8008106:	4b2f      	ldr	r3, [pc, #188]	@ (80081c4 <password_task+0x314>)
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	4a2e      	ldr	r2, [pc, #184]	@ (80081c4 <password_task+0x314>)
 800810c:	4619      	mov	r1, r3
 800810e:	482e      	ldr	r0, [pc, #184]	@ (80081c8 <password_task+0x318>)
 8008110:	f004 ffe4 	bl	800d0dc <iprintf>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8008114:	2201      	movs	r2, #1
 8008116:	2104      	movs	r1, #4
 8008118:	482c      	ldr	r0, [pc, #176]	@ (80081cc <password_task+0x31c>)
 800811a:	f7fd ffae 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800811e:	4929      	ldr	r1, [pc, #164]	@ (80081c4 <password_task+0x314>)
 8008120:	482a      	ldr	r0, [pc, #168]	@ (80081cc <password_task+0x31c>)
 8008122:	f7fd fffd 	bl	8006120 <CLCD_I2C_WriteString>
					break;
 8008126:	e0ec      	b.n	8008302 <password_task+0x452>
					add_data(&password, '8');
 8008128:	2138      	movs	r1, #56	@ 0x38
 800812a:	4826      	ldr	r0, [pc, #152]	@ (80081c4 <password_task+0x314>)
 800812c:	f7fe ffa6 	bl	800707c <add_data>
					printf("len=%d, payload=%s\n", password.len, password.payload);
 8008130:	4b24      	ldr	r3, [pc, #144]	@ (80081c4 <password_task+0x314>)
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	4a23      	ldr	r2, [pc, #140]	@ (80081c4 <password_task+0x314>)
 8008136:	4619      	mov	r1, r3
 8008138:	4823      	ldr	r0, [pc, #140]	@ (80081c8 <password_task+0x318>)
 800813a:	f004 ffcf 	bl	800d0dc <iprintf>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800813e:	2201      	movs	r2, #1
 8008140:	2104      	movs	r1, #4
 8008142:	4822      	ldr	r0, [pc, #136]	@ (80081cc <password_task+0x31c>)
 8008144:	f7fd ff99 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8008148:	491e      	ldr	r1, [pc, #120]	@ (80081c4 <password_task+0x314>)
 800814a:	4820      	ldr	r0, [pc, #128]	@ (80081cc <password_task+0x31c>)
 800814c:	f7fd ffe8 	bl	8006120 <CLCD_I2C_WriteString>
					break;
 8008150:	e0d7      	b.n	8008302 <password_task+0x452>
					add_data(&password, '9');
 8008152:	2139      	movs	r1, #57	@ 0x39
 8008154:	481b      	ldr	r0, [pc, #108]	@ (80081c4 <password_task+0x314>)
 8008156:	f7fe ff91 	bl	800707c <add_data>
					printf("len=%d, payload=%s\n", password.len, password.payload);
 800815a:	4b1a      	ldr	r3, [pc, #104]	@ (80081c4 <password_task+0x314>)
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	4a19      	ldr	r2, [pc, #100]	@ (80081c4 <password_task+0x314>)
 8008160:	4619      	mov	r1, r3
 8008162:	4819      	ldr	r0, [pc, #100]	@ (80081c8 <password_task+0x318>)
 8008164:	f004 ffba 	bl	800d0dc <iprintf>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8008168:	2201      	movs	r2, #1
 800816a:	2104      	movs	r1, #4
 800816c:	4817      	ldr	r0, [pc, #92]	@ (80081cc <password_task+0x31c>)
 800816e:	f7fd ff84 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 8008172:	4914      	ldr	r1, [pc, #80]	@ (80081c4 <password_task+0x314>)
 8008174:	4815      	ldr	r0, [pc, #84]	@ (80081cc <password_task+0x31c>)
 8008176:	f7fd ffd3 	bl	8006120 <CLCD_I2C_WriteString>
					break;
 800817a:	e0c2      	b.n	8008302 <password_task+0x452>
					delete_data(&password);
 800817c:	4811      	ldr	r0, [pc, #68]	@ (80081c4 <password_task+0x314>)
 800817e:	f7fe ff65 	bl	800704c <delete_data>
					printf("len=%d, payload=%s\n", password.len, password.payload);
 8008182:	4b10      	ldr	r3, [pc, #64]	@ (80081c4 <password_task+0x314>)
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	4a0f      	ldr	r2, [pc, #60]	@ (80081c4 <password_task+0x314>)
 8008188:	4619      	mov	r1, r3
 800818a:	480f      	ldr	r0, [pc, #60]	@ (80081c8 <password_task+0x318>)
 800818c:	f004 ffa6 	bl	800d0dc <iprintf>
					CLCD_I2C_SetCursor(&LCD1, 4+password.len, 1);
 8008190:	4b0c      	ldr	r3, [pc, #48]	@ (80081c4 <password_task+0x314>)
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	b2db      	uxtb	r3, r3
 8008196:	3304      	adds	r3, #4
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2201      	movs	r2, #1
 800819c:	4619      	mov	r1, r3
 800819e:	480b      	ldr	r0, [pc, #44]	@ (80081cc <password_task+0x31c>)
 80081a0:	f7fd ff6b 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, " ");
 80081a4:	490a      	ldr	r1, [pc, #40]	@ (80081d0 <password_task+0x320>)
 80081a6:	4809      	ldr	r0, [pc, #36]	@ (80081cc <password_task+0x31c>)
 80081a8:	f7fd ffba 	bl	8006120 <CLCD_I2C_WriteString>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 80081ac:	2201      	movs	r2, #1
 80081ae:	2104      	movs	r1, #4
 80081b0:	4806      	ldr	r0, [pc, #24]	@ (80081cc <password_task+0x31c>)
 80081b2:	f7fd ff62 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 80081b6:	4903      	ldr	r1, [pc, #12]	@ (80081c4 <password_task+0x314>)
 80081b8:	4804      	ldr	r0, [pc, #16]	@ (80081cc <password_task+0x31c>)
 80081ba:	f7fd ffb1 	bl	8006120 <CLCD_I2C_WriteString>
					break;
 80081be:	e0a0      	b.n	8008302 <password_task+0x452>
 80081c0:	0800e234 	.word	0x0800e234
 80081c4:	200015ac 	.word	0x200015ac
 80081c8:	0800e248 	.word	0x0800e248
 80081cc:	20000228 	.word	0x20000228
 80081d0:	0800e22c 	.word	0x0800e22c
					curr_state = sRunning;
 80081d4:	4b4b      	ldr	r3, [pc, #300]	@ (8008304 <password_task+0x454>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
					CLCD_I2C_Clear(&LCD1);
 80081da:	484b      	ldr	r0, [pc, #300]	@ (8008308 <password_task+0x458>)
 80081dc:	f7fd ffb7 	bl	800614e <CLCD_I2C_Clear>
					CLCD_I2C_BlinkOff(&LCD1);
 80081e0:	4849      	ldr	r0, [pc, #292]	@ (8008308 <password_task+0x458>)
 80081e2:	f7fd ffda 	bl	800619a <CLCD_I2C_BlinkOff>
					memset(password.payload, 0, sizeof(password.payload));  // reset data
 80081e6:	220b      	movs	r2, #11
 80081e8:	2100      	movs	r1, #0
 80081ea:	4848      	ldr	r0, [pc, #288]	@ (800830c <password_task+0x45c>)
 80081ec:	f004 fffc 	bl	800d1e8 <memset>
					password.len = 0;  // reset length
 80081f0:	4b46      	ldr	r3, [pc, #280]	@ (800830c <password_task+0x45c>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	60da      	str	r2, [r3, #12]
					vTaskResume(handle_motor_task);
 80081f6:	4b46      	ldr	r3, [pc, #280]	@ (8008310 <password_task+0x460>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f001 f8d4 	bl	80093a8 <vTaskResume>
					vTaskResume(handle_sensor_task);
 8008200:	4b44      	ldr	r3, [pc, #272]	@ (8008314 <password_task+0x464>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4618      	mov	r0, r3
 8008206:	f001 f8cf 	bl	80093a8 <vTaskResume>
					break;
 800820a:	e07a      	b.n	8008302 <password_task+0x452>
					add_data(&password, '0');
 800820c:	2130      	movs	r1, #48	@ 0x30
 800820e:	483f      	ldr	r0, [pc, #252]	@ (800830c <password_task+0x45c>)
 8008210:	f7fe ff34 	bl	800707c <add_data>
					printf("len=%d, payload=%s\n", password.len, password.payload);
 8008214:	4b3d      	ldr	r3, [pc, #244]	@ (800830c <password_task+0x45c>)
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	4a3c      	ldr	r2, [pc, #240]	@ (800830c <password_task+0x45c>)
 800821a:	4619      	mov	r1, r3
 800821c:	483e      	ldr	r0, [pc, #248]	@ (8008318 <password_task+0x468>)
 800821e:	f004 ff5d 	bl	800d0dc <iprintf>
					CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8008222:	2201      	movs	r2, #1
 8008224:	2104      	movs	r1, #4
 8008226:	4838      	ldr	r0, [pc, #224]	@ (8008308 <password_task+0x458>)
 8008228:	f7fd ff27 	bl	800607a <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, (char*)password.payload);
 800822c:	4937      	ldr	r1, [pc, #220]	@ (800830c <password_task+0x45c>)
 800822e:	4836      	ldr	r0, [pc, #216]	@ (8008308 <password_task+0x458>)
 8008230:	f7fd ff76 	bl	8006120 <CLCD_I2C_WriteString>
					 break;
 8008234:	e065      	b.n	8008302 <password_task+0x452>
					 CLCD_I2C_WriteString(&LCD1, "#");
 8008236:	4939      	ldr	r1, [pc, #228]	@ (800831c <password_task+0x46c>)
 8008238:	4833      	ldr	r0, [pc, #204]	@ (8008308 <password_task+0x458>)
 800823a:	f7fd ff71 	bl	8006120 <CLCD_I2C_WriteString>
					 break;
 800823e:	e060      	b.n	8008302 <password_task+0x452>
					 if (strcmp((char*)password.payload, (char*)parameter_read.password) == 0)
 8008240:	4937      	ldr	r1, [pc, #220]	@ (8008320 <password_task+0x470>)
 8008242:	4832      	ldr	r0, [pc, #200]	@ (800830c <password_task+0x45c>)
 8008244:	f7f8 f816 	bl	8000274 <strcmp>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d13e      	bne.n	80082cc <password_task+0x41c>
						  curr_state = sMenucofig_Setparameter;
 800824e:	4b2d      	ldr	r3, [pc, #180]	@ (8008304 <password_task+0x454>)
 8008250:	2202      	movs	r2, #2
 8008252:	701a      	strb	r2, [r3, #0]
						  memset(password.payload, 0, sizeof(password.payload));  // reset data
 8008254:	220b      	movs	r2, #11
 8008256:	2100      	movs	r1, #0
 8008258:	482c      	ldr	r0, [pc, #176]	@ (800830c <password_task+0x45c>)
 800825a:	f004 ffc5 	bl	800d1e8 <memset>
						  password.len = 0;  // reset length
 800825e:	4b2b      	ldr	r3, [pc, #172]	@ (800830c <password_task+0x45c>)
 8008260:	2200      	movs	r2, #0
 8008262:	60da      	str	r2, [r3, #12]
						  CLCD_I2C_Clear(&LCD1);
 8008264:	4828      	ldr	r0, [pc, #160]	@ (8008308 <password_task+0x458>)
 8008266:	f7fd ff72 	bl	800614e <CLCD_I2C_Clear>
						  CLCD_I2C_BlinkOff(&LCD1);
 800826a:	4827      	ldr	r0, [pc, #156]	@ (8008308 <password_task+0x458>)
 800826c:	f7fd ff95 	bl	800619a <CLCD_I2C_BlinkOff>
						  CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8008270:	2200      	movs	r2, #0
 8008272:	2100      	movs	r1, #0
 8008274:	4824      	ldr	r0, [pc, #144]	@ (8008308 <password_task+0x458>)
 8008276:	f7fd ff00 	bl	800607a <CLCD_I2C_SetCursor>
						  CLCD_I2C_WriteString(&LCD1,"s1:");
 800827a:	492a      	ldr	r1, [pc, #168]	@ (8008324 <password_task+0x474>)
 800827c:	4822      	ldr	r0, [pc, #136]	@ (8008308 <password_task+0x458>)
 800827e:	f7fd ff4f 	bl	8006120 <CLCD_I2C_WriteString>
						  CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8008282:	2201      	movs	r2, #1
 8008284:	2100      	movs	r1, #0
 8008286:	4820      	ldr	r0, [pc, #128]	@ (8008308 <password_task+0x458>)
 8008288:	f7fd fef7 	bl	800607a <CLCD_I2C_SetCursor>
						  CLCD_I2C_WriteString(&LCD1,"t1:");
 800828c:	4926      	ldr	r1, [pc, #152]	@ (8008328 <password_task+0x478>)
 800828e:	481e      	ldr	r0, [pc, #120]	@ (8008308 <password_task+0x458>)
 8008290:	f7fd ff46 	bl	8006120 <CLCD_I2C_WriteString>
						  CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8008294:	2202      	movs	r2, #2
 8008296:	2100      	movs	r1, #0
 8008298:	481b      	ldr	r0, [pc, #108]	@ (8008308 <password_task+0x458>)
 800829a:	f7fd feee 	bl	800607a <CLCD_I2C_SetCursor>
						  CLCD_I2C_WriteString(&LCD1,"s2:");
 800829e:	4923      	ldr	r1, [pc, #140]	@ (800832c <password_task+0x47c>)
 80082a0:	4819      	ldr	r0, [pc, #100]	@ (8008308 <password_task+0x458>)
 80082a2:	f7fd ff3d 	bl	8006120 <CLCD_I2C_WriteString>
						  CLCD_I2C_SetCursor(&LCD1, 0, 3);
 80082a6:	2203      	movs	r2, #3
 80082a8:	2100      	movs	r1, #0
 80082aa:	4817      	ldr	r0, [pc, #92]	@ (8008308 <password_task+0x458>)
 80082ac:	f7fd fee5 	bl	800607a <CLCD_I2C_SetCursor>
						  CLCD_I2C_WriteString(&LCD1,"t2:");
 80082b0:	491f      	ldr	r1, [pc, #124]	@ (8008330 <password_task+0x480>)
 80082b2:	4815      	ldr	r0, [pc, #84]	@ (8008308 <password_task+0x458>)
 80082b4:	f7fd ff34 	bl	8006120 <CLCD_I2C_WriteString>
						  CLCD_I2C_SetCursor(&LCD1, 19, 0);
 80082b8:	2200      	movs	r2, #0
 80082ba:	2113      	movs	r1, #19
 80082bc:	4812      	ldr	r0, [pc, #72]	@ (8008308 <password_task+0x458>)
 80082be:	f7fd fedc 	bl	800607a <CLCD_I2C_SetCursor>
						  CLCD_I2C_WriteString(&LCD1, "<");
 80082c2:	491c      	ldr	r1, [pc, #112]	@ (8008334 <password_task+0x484>)
 80082c4:	4810      	ldr	r0, [pc, #64]	@ (8008308 <password_task+0x458>)
 80082c6:	f7fd ff2b 	bl	8006120 <CLCD_I2C_WriteString>
					 break;
 80082ca:	e01a      	b.n	8008302 <password_task+0x452>
						CLCD_I2C_Clear(&LCD1);
 80082cc:	480e      	ldr	r0, [pc, #56]	@ (8008308 <password_task+0x458>)
 80082ce:	f7fd ff3e 	bl	800614e <CLCD_I2C_Clear>
						CLCD_I2C_SetCursor(&LCD1, 4, 0);
 80082d2:	2200      	movs	r2, #0
 80082d4:	2104      	movs	r1, #4
 80082d6:	480c      	ldr	r0, [pc, #48]	@ (8008308 <password_task+0x458>)
 80082d8:	f7fd fecf 	bl	800607a <CLCD_I2C_SetCursor>
						CLCD_I2C_WriteString(&LCD1, "ENTER PASSWORD");
 80082dc:	4916      	ldr	r1, [pc, #88]	@ (8008338 <password_task+0x488>)
 80082de:	480a      	ldr	r0, [pc, #40]	@ (8008308 <password_task+0x458>)
 80082e0:	f7fd ff1e 	bl	8006120 <CLCD_I2C_WriteString>
						CLCD_I2C_SetCursor(&LCD1, 4, 1);
 80082e4:	2201      	movs	r2, #1
 80082e6:	2104      	movs	r1, #4
 80082e8:	4807      	ldr	r0, [pc, #28]	@ (8008308 <password_task+0x458>)
 80082ea:	f7fd fec6 	bl	800607a <CLCD_I2C_SetCursor>
						memset(password.payload, 0, sizeof(password.payload));  // reset data
 80082ee:	220b      	movs	r2, #11
 80082f0:	2100      	movs	r1, #0
 80082f2:	4806      	ldr	r0, [pc, #24]	@ (800830c <password_task+0x45c>)
 80082f4:	f004 ff78 	bl	800d1e8 <memset>
						password.len = 0;  // reset length
 80082f8:	4b04      	ldr	r3, [pc, #16]	@ (800830c <password_task+0x45c>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	60da      	str	r2, [r3, #12]
					 break;
 80082fe:	e000      	b.n	8008302 <password_task+0x452>
					 break;
 8008300:	bf00      	nop
	while(1){
 8008302:	e5d9      	b.n	8007eb8 <password_task+0x8>
 8008304:	20000254 	.word	0x20000254
 8008308:	20000228 	.word	0x20000228
 800830c:	200015ac 	.word	0x200015ac
 8008310:	20000248 	.word	0x20000248
 8008314:	20000234 	.word	0x20000234
 8008318:	0800e248 	.word	0x0800e248
 800831c:	0800e274 	.word	0x0800e274
 8008320:	20000258 	.word	0x20000258
 8008324:	0800e278 	.word	0x0800e278
 8008328:	0800e27c 	.word	0x0800e27c
 800832c:	0800e2b8 	.word	0x0800e2b8
 8008330:	0800e2bc 	.word	0x0800e2bc
 8008334:	0800e230 	.word	0x0800e230
 8008338:	0800e238 	.word	0x0800e238

0800833c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f103 0208 	add.w	r2, r3, #8
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f04f 32ff 	mov.w	r2, #4294967295
 8008354:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f103 0208 	add.w	r2, r3, #8
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f103 0208 	add.w	r2, r3, #8
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8008370:	f240 1019 	movw	r0, #281	@ 0x119
 8008374:	f004 fab6 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8008378:	bf00      	nop
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800838e:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8008392:	f004 faa7 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 80083da:	f240 101b 	movw	r0, #283	@ 0x11b
 80083de:	f004 fa81 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008400:	d103      	bne.n	800840a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	e00c      	b.n	8008424 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3308      	adds	r3, #8
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	e002      	b.n	8008418 <vListInsert+0x2e>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	429a      	cmp	r2, r3
 8008422:	d2f6      	bcs.n	8008412 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8008450:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8008454:	f004 fa46 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8008458:	bf00      	nop
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	6892      	ldr	r2, [r2, #8]
 8008476:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	6852      	ldr	r2, [r2, #4]
 8008480:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	429a      	cmp	r2, r3
 800848a:	d103      	bne.n	8008494 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689a      	ldr	r2, [r3, #8]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	1e5a      	subs	r2, r3, #1
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4619      	mov	r1, r3
 80084aa:	f240 101d 	movw	r0, #285	@ 0x11d
 80084ae:	f004 fa55 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80084ca:	2301      	movs	r3, #1
 80084cc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10b      	bne.n	80084f0 <xQueueGenericReset+0x30>
    __asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	60fb      	str	r3, [r7, #12]
}
 80084ea:	bf00      	nop
 80084ec:	bf00      	nop
 80084ee:	e7fd      	b.n	80084ec <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d05d      	beq.n	80085b2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d059      	beq.n	80085b2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008506:	2100      	movs	r1, #0
 8008508:	fba3 2302 	umull	r2, r3, r3, r2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d000      	beq.n	8008512 <xQueueGenericReset+0x52>
 8008510:	2101      	movs	r1, #1
 8008512:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8008514:	2b00      	cmp	r3, #0
 8008516:	d14c      	bne.n	80085b2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8008518:	f002 fd14 	bl	800af44 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008524:	6939      	ldr	r1, [r7, #16]
 8008526:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008528:	fb01 f303 	mul.w	r3, r1, r3
 800852c:	441a      	add	r2, r3
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2200      	movs	r2, #0
 8008536:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008548:	3b01      	subs	r3, #1
 800854a:	6939      	ldr	r1, [r7, #16]
 800854c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800854e:	fb01 f303 	mul.w	r3, r1, r3
 8008552:	441a      	add	r2, r3
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	22ff      	movs	r2, #255	@ 0xff
 800855c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	22ff      	movs	r2, #255	@ 0xff
 8008564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d114      	bne.n	8008598 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d01a      	beq.n	80085ac <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	3310      	adds	r3, #16
 800857a:	4618      	mov	r0, r3
 800857c:	f001 fb7a 	bl	8009c74 <xTaskRemoveFromEventList>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d012      	beq.n	80085ac <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008586:	4b18      	ldr	r3, [pc, #96]	@ (80085e8 <xQueueGenericReset+0x128>)
 8008588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	e009      	b.n	80085ac <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	3310      	adds	r3, #16
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff fecd 	bl	800833c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	3324      	adds	r3, #36	@ 0x24
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff fec8 	bl	800833c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80085ac:	f002 fcfc 	bl	800afa8 <vPortExitCritical>
 80085b0:	e001      	b.n	80085b6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10b      	bne.n	80085d4 <xQueueGenericReset+0x114>
    __asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	60bb      	str	r3, [r7, #8]
}
 80085ce:	bf00      	nop
 80085d0:	bf00      	nop
 80085d2:	e7fd      	b.n	80085d0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	4619      	mov	r1, r3
 80085d8:	2096      	movs	r0, #150	@ 0x96
 80085da:	f004 f9bf 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80085de:	697b      	ldr	r3, [r7, #20]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	e000ed04 	.word	0xe000ed04

080085ec <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08a      	sub	sp, #40	@ 0x28
 80085f0:	af02      	add	r7, sp, #8
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d02e      	beq.n	8008662 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008604:	2100      	movs	r1, #0
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	fba3 2302 	umull	r2, r3, r3, r2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d000      	beq.n	8008614 <xQueueGenericCreate+0x28>
 8008612:	2101      	movs	r1, #1
 8008614:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008616:	2b00      	cmp	r3, #0
 8008618:	d123      	bne.n	8008662 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008622:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8008626:	d81c      	bhi.n	8008662 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	fb02 f303 	mul.w	r3, r2, r3
 8008630:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	3350      	adds	r3, #80	@ 0x50
 8008636:	4618      	mov	r0, r3
 8008638:	f002 fd70 	bl	800b11c <pvPortMalloc>
 800863c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d01d      	beq.n	8008680 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	3350      	adds	r3, #80	@ 0x50
 800864c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800864e:	79fa      	ldrb	r2, [r7, #7]
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	4613      	mov	r3, r2
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	68b9      	ldr	r1, [r7, #8]
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f000 f81e 	bl	800869c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8008660:	e00e      	b.n	8008680 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10b      	bne.n	8008680 <xQueueGenericCreate+0x94>
    __asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	613b      	str	r3, [r7, #16]
}
 800867a:	bf00      	nop
 800867c:	bf00      	nop
 800867e:	e7fd      	b.n	800867c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	4618      	mov	r0, r3
 8008684:	f004 fb04 	bl	800cc90 <SEGGER_SYSVIEW_ShrinkId>
 8008688:	4603      	mov	r3, r0
 800868a:	4619      	mov	r1, r3
 800868c:	2098      	movs	r0, #152	@ 0x98
 800868e:	f004 f965 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8008692:	69fb      	ldr	r3, [r7, #28]
    }
 8008694:	4618      	mov	r0, r3
 8008696:	3720      	adds	r7, #32
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d103      	bne.n	80086b8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	e002      	b.n	80086be <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086ca:	2101      	movs	r1, #1
 80086cc:	69b8      	ldr	r0, [r7, #24]
 80086ce:	f7ff fef7 	bl	80084c0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	78fa      	ldrb	r2, [r7, #3]
 80086d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80086da:	bf00      	nop
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
	...

080086e4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b08e      	sub	sp, #56	@ 0x38
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80086f2:	2300      	movs	r3, #0
 80086f4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80086fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10b      	bne.n	8008718 <xQueueGenericSend+0x34>
    __asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008712:	bf00      	nop
 8008714:	bf00      	nop
 8008716:	e7fd      	b.n	8008714 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d103      	bne.n	8008726 <xQueueGenericSend+0x42>
 800871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <xQueueGenericSend+0x46>
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <xQueueGenericSend+0x48>
 800872a:	2300      	movs	r3, #0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10b      	bne.n	8008748 <xQueueGenericSend+0x64>
    __asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008742:	bf00      	nop
 8008744:	bf00      	nop
 8008746:	e7fd      	b.n	8008744 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2b02      	cmp	r3, #2
 800874c:	d103      	bne.n	8008756 <xQueueGenericSend+0x72>
 800874e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008752:	2b01      	cmp	r3, #1
 8008754:	d101      	bne.n	800875a <xQueueGenericSend+0x76>
 8008756:	2301      	movs	r3, #1
 8008758:	e000      	b.n	800875c <xQueueGenericSend+0x78>
 800875a:	2300      	movs	r3, #0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10b      	bne.n	8008778 <xQueueGenericSend+0x94>
    __asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	623b      	str	r3, [r7, #32]
}
 8008772:	bf00      	nop
 8008774:	bf00      	nop
 8008776:	e7fd      	b.n	8008774 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008778:	f001 fc9e 	bl	800a0b8 <xTaskGetSchedulerState>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <xQueueGenericSend+0xa4>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d101      	bne.n	800878c <xQueueGenericSend+0xa8>
 8008788:	2301      	movs	r3, #1
 800878a:	e000      	b.n	800878e <xQueueGenericSend+0xaa>
 800878c:	2300      	movs	r3, #0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10b      	bne.n	80087aa <xQueueGenericSend+0xc6>
    __asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	61fb      	str	r3, [r7, #28]
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop
 80087a8:	e7fd      	b.n	80087a6 <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80087aa:	f002 fbcb 	bl	800af44 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d302      	bcc.n	80087c0 <xQueueGenericSend+0xdc>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d12d      	bne.n	800881c <xQueueGenericSend+0x138>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	68b9      	ldr	r1, [r7, #8]
 80087c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087c6:	f000 f989 	bl	8008adc <prvCopyDataToQueue>
 80087ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d010      	beq.n	80087f6 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d6:	3324      	adds	r3, #36	@ 0x24
 80087d8:	4618      	mov	r0, r3
 80087da:	f001 fa4b 	bl	8009c74 <xTaskRemoveFromEventList>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d013      	beq.n	800880c <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80087e4:	4b45      	ldr	r3, [pc, #276]	@ (80088fc <xQueueGenericSend+0x218>)
 80087e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	e00a      	b.n	800880c <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80087f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d007      	beq.n	800880c <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80087fc:	4b3f      	ldr	r3, [pc, #252]	@ (80088fc <xQueueGenericSend+0x218>)
 80087fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800880c:	f002 fbcc 	bl	800afa8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );
 8008810:	2101      	movs	r1, #1
 8008812:	20a1      	movs	r0, #161	@ 0xa1
 8008814:	f004 f8a2 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8008818:	2301      	movs	r3, #1
 800881a:	e06b      	b.n	80088f4 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d107      	bne.n	8008832 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008822:	f002 fbc1 	bl	800afa8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8008826:	2100      	movs	r1, #0
 8008828:	20a1      	movs	r0, #161	@ 0xa1
 800882a:	f004 f897 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_FULL;
 800882e:	2300      	movs	r3, #0
 8008830:	e060      	b.n	80088f4 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008834:	2b00      	cmp	r3, #0
 8008836:	d106      	bne.n	8008846 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008838:	f107 0314 	add.w	r3, r7, #20
 800883c:	4618      	mov	r0, r3
 800883e:	f001 faf9 	bl	8009e34 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008842:	2301      	movs	r3, #1
 8008844:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008846:	f002 fbaf 	bl	800afa8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800884a:	f000 fee1 	bl	8009610 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800884e:	f002 fb79 	bl	800af44 <vPortEnterCritical>
 8008852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008854:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008858:	b25b      	sxtb	r3, r3
 800885a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885e:	d103      	bne.n	8008868 <xQueueGenericSend+0x184>
 8008860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800886e:	b25b      	sxtb	r3, r3
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008874:	d103      	bne.n	800887e <xQueueGenericSend+0x19a>
 8008876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800887e:	f002 fb93 	bl	800afa8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008882:	1d3a      	adds	r2, r7, #4
 8008884:	f107 0314 	add.w	r3, r7, #20
 8008888:	4611      	mov	r1, r2
 800888a:	4618      	mov	r0, r3
 800888c:	f001 faea 	bl	8009e64 <xTaskCheckForTimeOut>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d124      	bne.n	80088e0 <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008896:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008898:	f000 fa18 	bl	8008ccc <prvIsQueueFull>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d018      	beq.n	80088d4 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	3310      	adds	r3, #16
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	4611      	mov	r1, r2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f001 f970 	bl	8009b90 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80088b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088b2:	f000 f9a3 	bl	8008bfc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80088b6:	f000 feb9 	bl	800962c <xTaskResumeAll>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f47f af74 	bne.w	80087aa <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 80088c2:	4b0e      	ldr	r3, [pc, #56]	@ (80088fc <xQueueGenericSend+0x218>)
 80088c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	e76a      	b.n	80087aa <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80088d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088d6:	f000 f991 	bl	8008bfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80088da:	f000 fea7 	bl	800962c <xTaskResumeAll>
 80088de:	e764      	b.n	80087aa <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80088e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088e2:	f000 f98b 	bl	8008bfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80088e6:	f000 fea1 	bl	800962c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 80088ea:	2100      	movs	r1, #0
 80088ec:	20a1      	movs	r0, #161	@ 0xa1
 80088ee:	f004 f835 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

            return errQUEUE_FULL;
 80088f2:	2300      	movs	r3, #0
        }
    }
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3738      	adds	r7, #56	@ 0x38
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	e000ed04 	.word	0xe000ed04

08008900 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08c      	sub	sp, #48	@ 0x30
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800890c:	2300      	movs	r3, #0
 800890e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8008914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10b      	bne.n	8008932 <xQueueReceive+0x32>
    __asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	623b      	str	r3, [r7, #32]
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	e7fd      	b.n	800892e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d103      	bne.n	8008940 <xQueueReceive+0x40>
 8008938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <xQueueReceive+0x44>
 8008940:	2301      	movs	r3, #1
 8008942:	e000      	b.n	8008946 <xQueueReceive+0x46>
 8008944:	2300      	movs	r3, #0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10b      	bne.n	8008962 <xQueueReceive+0x62>
    __asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	61fb      	str	r3, [r7, #28]
}
 800895c:	bf00      	nop
 800895e:	bf00      	nop
 8008960:	e7fd      	b.n	800895e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008962:	f001 fba9 	bl	800a0b8 <xTaskGetSchedulerState>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d102      	bne.n	8008972 <xQueueReceive+0x72>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <xQueueReceive+0x76>
 8008972:	2301      	movs	r3, #1
 8008974:	e000      	b.n	8008978 <xQueueReceive+0x78>
 8008976:	2300      	movs	r3, #0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10b      	bne.n	8008994 <xQueueReceive+0x94>
    __asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	61bb      	str	r3, [r7, #24]
}
 800898e:	bf00      	nop
 8008990:	bf00      	nop
 8008992:	e7fd      	b.n	8008990 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008994:	f002 fad6 	bl	800af44 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800899c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d023      	beq.n	80089ec <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089a8:	f000 f902 	bl	8008bb0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	1e5a      	subs	r2, r3, #1
 80089b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00f      	beq.n	80089dc <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089be:	3310      	adds	r3, #16
 80089c0:	4618      	mov	r0, r3
 80089c2:	f001 f957 	bl	8009c74 <xTaskRemoveFromEventList>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d007      	beq.n	80089dc <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80089cc:	4b42      	ldr	r3, [pc, #264]	@ (8008ad8 <xQueueReceive+0x1d8>)
 80089ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80089dc:	f002 fae4 	bl	800afa8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80089e0:	2101      	movs	r1, #1
 80089e2:	20a4      	movs	r0, #164	@ 0xa4
 80089e4:	f003 ffba 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e071      	b.n	8008ad0 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d107      	bne.n	8008a02 <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80089f2:	f002 fad9 	bl	800afa8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80089f6:	2100      	movs	r1, #0
 80089f8:	20a4      	movs	r0, #164	@ 0xa4
 80089fa:	f003 ffaf 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80089fe:	2300      	movs	r3, #0
 8008a00:	e066      	b.n	8008ad0 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d106      	bne.n	8008a16 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008a08:	f107 0310 	add.w	r3, r7, #16
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 fa11 	bl	8009e34 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008a12:	2301      	movs	r3, #1
 8008a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008a16:	f002 fac7 	bl	800afa8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008a1a:	f000 fdf9 	bl	8009610 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008a1e:	f002 fa91 	bl	800af44 <vPortEnterCritical>
 8008a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a28:	b25b      	sxtb	r3, r3
 8008a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2e:	d103      	bne.n	8008a38 <xQueueReceive+0x138>
 8008a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a3e:	b25b      	sxtb	r3, r3
 8008a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a44:	d103      	bne.n	8008a4e <xQueueReceive+0x14e>
 8008a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a4e:	f002 faab 	bl	800afa8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a52:	1d3a      	adds	r2, r7, #4
 8008a54:	f107 0310 	add.w	r3, r7, #16
 8008a58:	4611      	mov	r1, r2
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f001 fa02 	bl	8009e64 <xTaskCheckForTimeOut>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d123      	bne.n	8008aae <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a68:	f000 f91a 	bl	8008ca0 <prvIsQueueEmpty>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d017      	beq.n	8008aa2 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a74:	3324      	adds	r3, #36	@ 0x24
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	4611      	mov	r1, r2
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f001 f888 	bl	8009b90 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008a80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a82:	f000 f8bb 	bl	8008bfc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008a86:	f000 fdd1 	bl	800962c <xTaskResumeAll>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d181      	bne.n	8008994 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8008a90:	4b11      	ldr	r3, [pc, #68]	@ (8008ad8 <xQueueReceive+0x1d8>)
 8008a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	e778      	b.n	8008994 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008aa4:	f000 f8aa 	bl	8008bfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008aa8:	f000 fdc0 	bl	800962c <xTaskResumeAll>
 8008aac:	e772      	b.n	8008994 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008aae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ab0:	f000 f8a4 	bl	8008bfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008ab4:	f000 fdba 	bl	800962c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ab8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008aba:	f000 f8f1 	bl	8008ca0 <prvIsQueueEmpty>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f43f af67 	beq.w	8008994 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	20a4      	movs	r0, #164	@ 0xa4
 8008aca:	f003 ff47 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8008ace:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3730      	adds	r7, #48	@ 0x30
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	e000ed04 	.word	0xe000ed04

08008adc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10d      	bne.n	8008b16 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d14d      	bne.n	8008b9e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f001 faf8 	bl	800a0fc <xTaskPriorityDisinherit>
 8008b0c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	609a      	str	r2, [r3, #8]
 8008b14:	e043      	b.n	8008b9e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d119      	bne.n	8008b50 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6858      	ldr	r0, [r3, #4]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b24:	461a      	mov	r2, r3
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	f004 fbc7 	bl	800d2ba <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b34:	441a      	add	r2, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d32b      	bcc.n	8008b9e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	605a      	str	r2, [r3, #4]
 8008b4e:	e026      	b.n	8008b9e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	68d8      	ldr	r0, [r3, #12]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b58:	461a      	mov	r2, r3
 8008b5a:	68b9      	ldr	r1, [r7, #8]
 8008b5c:	f004 fbad 	bl	800d2ba <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b68:	425b      	negs	r3, r3
 8008b6a:	441a      	add	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	68da      	ldr	r2, [r3, #12]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d207      	bcs.n	8008b8c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b84:	425b      	negs	r3, r3
 8008b86:	441a      	add	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d105      	bne.n	8008b9e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8008ba6:	697b      	ldr	r3, [r7, #20]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d018      	beq.n	8008bf4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bca:	441a      	add	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d303      	bcc.n	8008be4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68d9      	ldr	r1, [r3, #12]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bec:	461a      	mov	r2, r3
 8008bee:	6838      	ldr	r0, [r7, #0]
 8008bf0:	f004 fb63 	bl	800d2ba <memcpy>
    }
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8008c04:	f002 f99e 	bl	800af44 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c10:	e011      	b.n	8008c36 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d012      	beq.n	8008c40 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	3324      	adds	r3, #36	@ 0x24
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f001 f828 	bl	8009c74 <xTaskRemoveFromEventList>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8008c2a:	f001 f987 	bl	8009f3c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	dce9      	bgt.n	8008c12 <prvUnlockQueue+0x16>
 8008c3e:	e000      	b.n	8008c42 <prvUnlockQueue+0x46>
                    break;
 8008c40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	22ff      	movs	r2, #255	@ 0xff
 8008c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8008c4a:	f002 f9ad 	bl	800afa8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8008c4e:	f002 f979 	bl	800af44 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c5a:	e011      	b.n	8008c80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d012      	beq.n	8008c8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3310      	adds	r3, #16
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f001 f803 	bl	8009c74 <xTaskRemoveFromEventList>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8008c74:	f001 f962 	bl	8009f3c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	dce9      	bgt.n	8008c5c <prvUnlockQueue+0x60>
 8008c88:	e000      	b.n	8008c8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8008c8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	22ff      	movs	r2, #255	@ 0xff
 8008c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8008c94:	f002 f988 	bl	800afa8 <vPortExitCritical>
}
 8008c98:	bf00      	nop
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008ca8:	f002 f94c 	bl	800af44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d102      	bne.n	8008cba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	e001      	b.n	8008cbe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008cbe:	f002 f973 	bl	800afa8 <vPortExitCritical>

    return xReturn;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008cd4:	f002 f936 	bl	800af44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d102      	bne.n	8008cea <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	e001      	b.n	8008cee <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008cee:	f002 f95b 	bl	800afa8 <vPortExitCritical>

    return xReturn;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10b      	bne.n	8008d28 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	60fb      	str	r3, [r7, #12]
}
 8008d22:	bf00      	nop
 8008d24:	bf00      	nop
 8008d26:	e7fd      	b.n	8008d24 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d024      	beq.n	8008d78 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d2e:	2300      	movs	r3, #0
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	e01e      	b.n	8008d72 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008d34:	4a18      	ldr	r2, [pc, #96]	@ (8008d98 <vQueueAddToRegistry+0x9c>)
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	00db      	lsls	r3, r3, #3
 8008d3a:	4413      	add	r3, r2
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d105      	bne.n	8008d50 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	4a13      	ldr	r2, [pc, #76]	@ (8008d98 <vQueueAddToRegistry+0x9c>)
 8008d4a:	4413      	add	r3, r2
 8008d4c:	613b      	str	r3, [r7, #16]
                    break;
 8008d4e:	e013      	b.n	8008d78 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10a      	bne.n	8008d6c <vQueueAddToRegistry+0x70>
 8008d56:	4a10      	ldr	r2, [pc, #64]	@ (8008d98 <vQueueAddToRegistry+0x9c>)
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d104      	bne.n	8008d6c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	4a0c      	ldr	r2, [pc, #48]	@ (8008d98 <vQueueAddToRegistry+0x9c>)
 8008d68:	4413      	add	r3, r2
 8008d6a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	617b      	str	r3, [r7, #20]
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2b07      	cmp	r3, #7
 8008d76:	d9dd      	bls.n	8008d34 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d005      	beq.n	8008d8a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8008d8a:	20b6      	movs	r0, #182	@ 0xb6
 8008d8c:	f003 fdaa 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8008d90:	bf00      	nop
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	200015bc 	.word	0x200015bc

08008d9c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8008dac:	f002 f8ca 	bl	800af44 <vPortEnterCritical>
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008db6:	b25b      	sxtb	r3, r3
 8008db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dbc:	d103      	bne.n	8008dc6 <vQueueWaitForMessageRestricted+0x2a>
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dcc:	b25b      	sxtb	r3, r3
 8008dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd2:	d103      	bne.n	8008ddc <vQueueWaitForMessageRestricted+0x40>
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ddc:	f002 f8e4 	bl	800afa8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d106      	bne.n	8008df6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	3324      	adds	r3, #36	@ 0x24
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	68b9      	ldr	r1, [r7, #8]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 fef5 	bl	8009be0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8008df6:	6978      	ldr	r0, [r7, #20]
 8008df8:	f7ff ff00 	bl	8008bfc <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8008dfc:	20b9      	movs	r0, #185	@ 0xb9
 8008dfe:	f003 fd71 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8008e02:	bf00      	nop
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b08a      	sub	sp, #40	@ 0x28
 8008e0e:	af04      	add	r7, sp, #16
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	60b9      	str	r1, [r7, #8]
 8008e14:	607a      	str	r2, [r7, #4]
 8008e16:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f002 f97d 	bl	800b11c <pvPortMalloc>
 8008e22:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d013      	beq.n	8008e52 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8008e2a:	2058      	movs	r0, #88	@ 0x58
 8008e2c:	f002 f976 	bl	800b11c <pvPortMalloc>
 8008e30:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d008      	beq.n	8008e4a <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008e38:	2258      	movs	r2, #88	@ 0x58
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	6978      	ldr	r0, [r7, #20]
 8008e3e:	f004 f9d3 	bl	800d1e8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e48:	e005      	b.n	8008e56 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8008e4a:	6938      	ldr	r0, [r7, #16]
 8008e4c:	f002 fa98 	bl	800b380 <vPortFree>
 8008e50:	e001      	b.n	8008e56 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00d      	beq.n	8008e78 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	9303      	str	r3, [sp, #12]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	9302      	str	r3, [sp, #8]
 8008e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	68b9      	ldr	r1, [r7, #8]
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 f82d 	bl	8008ed2 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8008e78:	697b      	ldr	r3, [r7, #20]
    }
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b088      	sub	sp, #32
 8008e86:	af02      	add	r7, sp, #8
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	607a      	str	r2, [r7, #4]
 8008e8e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8008e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e92:	9301      	str	r3, [sp, #4]
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f7ff ffb3 	bl	8008e0a <prvCreateTask>
 8008ea4:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d005      	beq.n	8008eb8 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8008eac:	6938      	ldr	r0, [r7, #16]
 8008eae:	f000 f8a1 	bl	8008ff4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	617b      	str	r3, [r7, #20]
 8008eb6:	e002      	b.n	8008ebe <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ebc:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	20c2      	movs	r0, #194	@ 0xc2
 8008ec4:	f003 fd4a 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8008ec8:	697b      	ldr	r3, [r7, #20]
    }
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3718      	adds	r7, #24
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b088      	sub	sp, #32
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
 8008ede:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	461a      	mov	r2, r3
 8008eea:	21a5      	movs	r1, #165	@ 0xa5
 8008eec:	f004 f97c 	bl	800d1e8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008efa:	3b01      	subs	r3, #1
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	f023 0307 	bic.w	r3, r3, #7
 8008f08:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	f003 0307 	and.w	r3, r3, #7
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00b      	beq.n	8008f2c <prvInitialiseNewTask+0x5a>
    __asm volatile
 8008f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	617b      	str	r3, [r7, #20]
}
 8008f26:	bf00      	nop
 8008f28:	bf00      	nop
 8008f2a:	e7fd      	b.n	8008f28 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d01e      	beq.n	8008f70 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f32:	2300      	movs	r3, #0
 8008f34:	61fb      	str	r3, [r7, #28]
 8008f36:	e012      	b.n	8008f5e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	7819      	ldrb	r1, [r3, #0]
 8008f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4413      	add	r3, r2
 8008f46:	3334      	adds	r3, #52	@ 0x34
 8008f48:	460a      	mov	r2, r1
 8008f4a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d006      	beq.n	8008f66 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	61fb      	str	r3, [r7, #28]
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	2b09      	cmp	r3, #9
 8008f62:	d9e9      	bls.n	8008f38 <prvInitialiseNewTask+0x66>
 8008f64:	e000      	b.n	8008f68 <prvInitialiseNewTask+0x96>
            {
                break;
 8008f66:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8008f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f72:	2b04      	cmp	r3, #4
 8008f74:	d90b      	bls.n	8008f8e <prvInitialiseNewTask+0xbc>
    __asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	613b      	str	r3, [r7, #16]
}
 8008f88:	bf00      	nop
 8008f8a:	bf00      	nop
 8008f8c:	e7fd      	b.n	8008f8a <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d901      	bls.n	8008f98 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f94:	2304      	movs	r3, #4
 8008f96:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8008f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fa2:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff f9e9 	bl	8008380 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb0:	3318      	adds	r3, #24
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7ff f9e4 	bl	8008380 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fbc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8008fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc0:	f1c3 0205 	rsb	r2, r3, #5
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fcc:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	68f9      	ldr	r1, [r7, #12]
 8008fd2:	69b8      	ldr	r0, [r7, #24]
 8008fd4:	f001 fe34 	bl	800ac40 <pxPortInitialiseStack>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fdc:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8008fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fe8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008fea:	bf00      	nop
 8008fec:	3720      	adds	r7, #32
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8008ff4:	b5b0      	push	{r4, r5, r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8008ffc:	f001 ffa2 	bl	800af44 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8009000:	4b50      	ldr	r3, [pc, #320]	@ (8009144 <prvAddNewTaskToReadyList+0x150>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3301      	adds	r3, #1
 8009006:	4a4f      	ldr	r2, [pc, #316]	@ (8009144 <prvAddNewTaskToReadyList+0x150>)
 8009008:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800900a:	4b4f      	ldr	r3, [pc, #316]	@ (8009148 <prvAddNewTaskToReadyList+0x154>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d109      	bne.n	8009026 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8009012:	4a4d      	ldr	r2, [pc, #308]	@ (8009148 <prvAddNewTaskToReadyList+0x154>)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009018:	4b4a      	ldr	r3, [pc, #296]	@ (8009144 <prvAddNewTaskToReadyList+0x150>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d110      	bne.n	8009042 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8009020:	f000 ffb0 	bl	8009f84 <prvInitialiseTaskLists>
 8009024:	e00d      	b.n	8009042 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8009026:	4b49      	ldr	r3, [pc, #292]	@ (800914c <prvAddNewTaskToReadyList+0x158>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d109      	bne.n	8009042 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800902e:	4b46      	ldr	r3, [pc, #280]	@ (8009148 <prvAddNewTaskToReadyList+0x154>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009038:	429a      	cmp	r2, r3
 800903a:	d802      	bhi.n	8009042 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800903c:	4a42      	ldr	r2, [pc, #264]	@ (8009148 <prvAddNewTaskToReadyList+0x154>)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8009042:	4b43      	ldr	r3, [pc, #268]	@ (8009150 <prvAddNewTaskToReadyList+0x15c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3301      	adds	r3, #1
 8009048:	4a41      	ldr	r2, [pc, #260]	@ (8009150 <prvAddNewTaskToReadyList+0x15c>)
 800904a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800904c:	4b40      	ldr	r3, [pc, #256]	@ (8009150 <prvAddNewTaskToReadyList+0x15c>)
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d016      	beq.n	8009088 <prvAddNewTaskToReadyList+0x94>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4618      	mov	r0, r3
 800905e:	f003 fcf1 	bl	800ca44 <SEGGER_SYSVIEW_OnTaskCreate>
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009072:	461d      	mov	r5, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	461c      	mov	r4, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800907e:	1ae3      	subs	r3, r4, r3
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	462b      	mov	r3, r5
 8009084:	f002 faca 	bl	800b61c <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4618      	mov	r0, r3
 800908c:	f003 fd5e 	bl	800cb4c <SEGGER_SYSVIEW_OnTaskStartReady>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009094:	2201      	movs	r2, #1
 8009096:	409a      	lsls	r2, r3
 8009098:	4b2e      	ldr	r3, [pc, #184]	@ (8009154 <prvAddNewTaskToReadyList+0x160>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4313      	orrs	r3, r2
 800909e:	4a2d      	ldr	r2, [pc, #180]	@ (8009154 <prvAddNewTaskToReadyList+0x160>)
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a6:	492c      	ldr	r1, [pc, #176]	@ (8009158 <prvAddNewTaskToReadyList+0x164>)
 80090a8:	4613      	mov	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	440b      	add	r3, r1
 80090b2:	3304      	adds	r3, #4
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	609a      	str	r2, [r3, #8]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	689a      	ldr	r2, [r3, #8]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	60da      	str	r2, [r3, #12]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	3204      	adds	r2, #4
 80090ce:	605a      	str	r2, [r3, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	1d1a      	adds	r2, r3, #4
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	609a      	str	r2, [r3, #8]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090dc:	4613      	mov	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4a1c      	ldr	r2, [pc, #112]	@ (8009158 <prvAddNewTaskToReadyList+0x164>)
 80090e6:	441a      	add	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	615a      	str	r2, [r3, #20]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090f0:	4919      	ldr	r1, [pc, #100]	@ (8009158 <prvAddNewTaskToReadyList+0x164>)
 80090f2:	4613      	mov	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4413      	add	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	440b      	add	r3, r1
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009102:	1c59      	adds	r1, r3, #1
 8009104:	4814      	ldr	r0, [pc, #80]	@ (8009158 <prvAddNewTaskToReadyList+0x164>)
 8009106:	4613      	mov	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4403      	add	r3, r0
 8009110:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8009112:	f001 ff49 	bl	800afa8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8009116:	4b0d      	ldr	r3, [pc, #52]	@ (800914c <prvAddNewTaskToReadyList+0x158>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00e      	beq.n	800913c <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800911e:	4b0a      	ldr	r3, [pc, #40]	@ (8009148 <prvAddNewTaskToReadyList+0x154>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009128:	429a      	cmp	r2, r3
 800912a:	d207      	bcs.n	800913c <prvAddNewTaskToReadyList+0x148>
 800912c:	4b0b      	ldr	r3, [pc, #44]	@ (800915c <prvAddNewTaskToReadyList+0x168>)
 800912e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800913c:	bf00      	nop
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bdb0      	pop	{r4, r5, r7, pc}
 8009144:	200016d4 	.word	0x200016d4
 8009148:	200015fc 	.word	0x200015fc
 800914c:	200016e0 	.word	0x200016e0
 8009150:	200016f0 	.word	0x200016f0
 8009154:	200016dc 	.word	0x200016dc
 8009158:	20001600 	.word	0x20001600
 800915c:	e000ed04 	.word	0xe000ed04

08009160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009168:	2300      	movs	r3, #0
 800916a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d018      	beq.n	80091a4 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8009172:	f000 fa4d 	bl	8009610 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8009176:	4b14      	ldr	r3, [pc, #80]	@ (80091c8 <vTaskDelay+0x68>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d00b      	beq.n	8009196 <vTaskDelay+0x36>
    __asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	60bb      	str	r3, [r7, #8]
}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009196:	2100      	movs	r1, #0
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 fa2b 	bl	800a5f4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800919e:	f000 fa45 	bl	800962c <xTaskResumeAll>
 80091a2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d107      	bne.n	80091ba <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 80091aa:	4b08      	ldr	r3, [pc, #32]	@ (80091cc <vTaskDelay+0x6c>)
 80091ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 80091ba:	20c5      	movs	r0, #197	@ 0xc5
 80091bc:	f003 fb92 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80091c0:	bf00      	nop
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	200016fc 	.word	0x200016fc
 80091cc:	e000ed04 	.word	0xe000ed04

080091d0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        traceENTER_vTaskSuspend( xTaskToSuspend );

        taskENTER_CRITICAL();
 80091d8:	f001 feb4 	bl	800af44 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d102      	bne.n	80091e8 <vTaskSuspend+0x18>
 80091e2:	4b46      	ldr	r3, [pc, #280]	@ (80092fc <vTaskSuspend+0x12c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	e000      	b.n	80091ea <vTaskSuspend+0x1a>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7ff f935 	bl	8008460 <uxListRemove>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d115      	bne.n	8009228 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009200:	493f      	ldr	r1, [pc, #252]	@ (8009300 <vTaskSuspend+0x130>)
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10a      	bne.n	8009228 <vTaskSuspend+0x58>
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009216:	2201      	movs	r2, #1
 8009218:	fa02 f303 	lsl.w	r3, r2, r3
 800921c:	43da      	mvns	r2, r3
 800921e:	4b39      	ldr	r3, [pc, #228]	@ (8009304 <vTaskSuspend+0x134>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4013      	ands	r3, r2
 8009224:	4a37      	ldr	r2, [pc, #220]	@ (8009304 <vTaskSuspend+0x134>)
 8009226:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	3318      	adds	r3, #24
 8009234:	4618      	mov	r0, r3
 8009236:	f7ff f913 	bl	8008460 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	3304      	adds	r3, #4
 800923e:	4619      	mov	r1, r3
 8009240:	4831      	ldr	r0, [pc, #196]	@ (8009308 <vTaskSuspend+0x138>)
 8009242:	f7ff f8ac 	bl	800839e <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]
 800924a:	e010      	b.n	800926e <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	4413      	add	r3, r2
 8009252:	3354      	adds	r3, #84	@ 0x54
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b01      	cmp	r3, #1
 800925a:	d105      	bne.n	8009268 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	4413      	add	r3, r2
 8009262:	3354      	adds	r3, #84	@ 0x54
 8009264:	2200      	movs	r2, #0
 8009266:	701a      	strb	r2, [r3, #0]
                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	3301      	adds	r3, #1
 800926c:	617b      	str	r3, [r7, #20]
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	ddeb      	ble.n	800924c <vTaskSuspend+0x7c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
        }
        taskEXIT_CRITICAL();
 8009274:	f001 fe98 	bl	800afa8 <vPortExitCritical>

        #if ( configNUMBER_OF_CORES == 1 )
        {
            UBaseType_t uxCurrentListLength;

            if( xSchedulerRunning != pdFALSE )
 8009278:	4b24      	ldr	r3, [pc, #144]	@ (800930c <vTaskSuspend+0x13c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d005      	beq.n	800928c <vTaskSuspend+0xbc>
            {
                /* Reset the next expected unblock time in case it referred to the
                 * task that is now in the Suspended state. */
                taskENTER_CRITICAL();
 8009280:	f001 fe60 	bl	800af44 <vPortEnterCritical>
                {
                    prvResetNextTaskUnblockTime();
 8009284:	f000 fefc 	bl	800a080 <prvResetNextTaskUnblockTime>
                }
                taskEXIT_CRITICAL();
 8009288:	f001 fe8e 	bl	800afa8 <vPortExitCritical>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( pxTCB == pxCurrentTCB )
 800928c:	4b1b      	ldr	r3, [pc, #108]	@ (80092fc <vTaskSuspend+0x12c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	429a      	cmp	r2, r3
 8009294:	d12a      	bne.n	80092ec <vTaskSuspend+0x11c>
            {
                if( xSchedulerRunning != pdFALSE )
 8009296:	4b1d      	ldr	r3, [pc, #116]	@ (800930c <vTaskSuspend+0x13c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d018      	beq.n	80092d0 <vTaskSuspend+0x100>
                {
                    /* The current task has just been suspended. */
                    configASSERT( uxSchedulerSuspended == 0 );
 800929e:	4b1c      	ldr	r3, [pc, #112]	@ (8009310 <vTaskSuspend+0x140>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00b      	beq.n	80092be <vTaskSuspend+0xee>
    __asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	60bb      	str	r3, [r7, #8]
}
 80092b8:	bf00      	nop
 80092ba:	bf00      	nop
 80092bc:	e7fd      	b.n	80092ba <vTaskSuspend+0xea>
                    portYIELD_WITHIN_API();
 80092be:	4b15      	ldr	r3, [pc, #84]	@ (8009314 <vTaskSuspend+0x144>)
 80092c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092c4:	601a      	str	r2, [r3, #0]
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	e00d      	b.n	80092ec <vTaskSuspend+0x11c>
                     * must be adjusted to point to a different task. */

                    /* Use a temp variable as a distinct sequence point for reading
                     * volatile variables prior to a comparison to ensure compliance
                     * with MISRA C 2012 Rule 13.2. */
                    uxCurrentListLength = listCURRENT_LIST_LENGTH( &xSuspendedTaskList );
 80092d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009308 <vTaskSuspend+0x138>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	60fb      	str	r3, [r7, #12]

                    if( uxCurrentListLength == uxCurrentNumberOfTasks )
 80092d6:	4b10      	ldr	r3, [pc, #64]	@ (8009318 <vTaskSuspend+0x148>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d103      	bne.n	80092e8 <vTaskSuspend+0x118>
                    {
                        /* No other tasks are ready, so set pxCurrentTCB back to
                         * NULL so when the next task is created pxCurrentTCB will
                         * be set to point to it no matter what its relative priority
                         * is. */
                        pxCurrentTCB = NULL;
 80092e0:	4b06      	ldr	r3, [pc, #24]	@ (80092fc <vTaskSuspend+0x12c>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	e001      	b.n	80092ec <vTaskSuspend+0x11c>
                    }
                    else
                    {
                        vTaskSwitchContext();
 80092e8:	f000 fbe6 	bl	8009ab8 <vTaskSwitchContext>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskSuspend();
 80092ec:	20ca      	movs	r0, #202	@ 0xca
 80092ee:	f003 faf9 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80092f2:	bf00      	nop
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	200015fc 	.word	0x200015fc
 8009300:	20001600 	.word	0x20001600
 8009304:	200016dc 	.word	0x200016dc
 8009308:	200016c0 	.word	0x200016c0
 800930c:	200016e0 	.word	0x200016e0
 8009310:	200016fc 	.word	0x200016fc
 8009314:	e000ed04 	.word	0xe000ed04
 8009318:	200016d4 	.word	0x200016d4

0800931c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8009324:	2300      	movs	r3, #0
 8009326:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	60fb      	str	r3, [r7, #12]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10b      	bne.n	800934a <prvTaskIsTaskSuspended+0x2e>
    __asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	60bb      	str	r3, [r7, #8]
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop
 8009348:	e7fd      	b.n	8009346 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	4a14      	ldr	r2, [pc, #80]	@ (80093a0 <prvTaskIsTaskSuspended+0x84>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d11e      	bne.n	8009392 <prvTaskIsTaskSuspended+0x76>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009358:	4a12      	ldr	r2, [pc, #72]	@ (80093a4 <prvTaskIsTaskSuspended+0x88>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d019      	beq.n	8009392 <prvTaskIsTaskSuspended+0x76>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because it is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009362:	2b00      	cmp	r3, #0
 8009364:	d115      	bne.n	8009392 <prvTaskIsTaskSuspended+0x76>
                        /* The task does not appear on the event list item of
                         * and of the RTOS objects, but could still be in the
                         * blocked state if it is waiting on its notification
                         * rather than waiting on an object.  If not, is
                         * suspended. */
                        xReturn = pdTRUE;
 8009366:	2301      	movs	r3, #1
 8009368:	617b      	str	r3, [r7, #20]

                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800936a:	2300      	movs	r3, #0
 800936c:	613b      	str	r3, [r7, #16]
 800936e:	e00d      	b.n	800938c <prvTaskIsTaskSuspended+0x70>
                        {
                            if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	4413      	add	r3, r2
 8009376:	3354      	adds	r3, #84	@ 0x54
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b01      	cmp	r3, #1
 800937e:	d102      	bne.n	8009386 <prvTaskIsTaskSuspended+0x6a>
                            {
                                xReturn = pdFALSE;
 8009380:	2300      	movs	r3, #0
 8009382:	617b      	str	r3, [r7, #20]
                                break;
 8009384:	e005      	b.n	8009392 <prvTaskIsTaskSuspended+0x76>
                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	3301      	adds	r3, #1
 800938a:	613b      	str	r3, [r7, #16]
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	ddee      	ble.n	8009370 <prvTaskIsTaskSuspended+0x54>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009392:	697b      	ldr	r3, [r7, #20]
    }
 8009394:	4618      	mov	r0, r3
 8009396:	371c      	adds	r7, #28
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	200016c0 	.word	0x200016c0
 80093a4:	20001694 	.word	0x20001694

080093a8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskResume( xTaskToResume );

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10b      	bne.n	80093d2 <vTaskResume+0x2a>
    __asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	60fb      	str	r3, [r7, #12]
}
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
 80093d0:	e7fd      	b.n	80093ce <vTaskResume+0x26>

        #if ( configNUMBER_OF_CORES == 1 )

            /* The parameter cannot be NULL as it is impossible to resume the
             * currently executing task. */
            if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80093d2:	4b39      	ldr	r3, [pc, #228]	@ (80094b8 <vTaskResume+0x110>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d065      	beq.n	80094a8 <vTaskResume+0x100>
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d062      	beq.n	80094a8 <vTaskResume+0x100>
             * to check their run state here. Therefore, we get into a critical
             * section and check if the task is actually suspended or not. */
            if( pxTCB != NULL )
        #endif
        {
            taskENTER_CRITICAL();
 80093e2:	f001 fdaf 	bl	800af44 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80093e6:	6978      	ldr	r0, [r7, #20]
 80093e8:	f7ff ff98 	bl	800931c <prvTaskIsTaskSuspended>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d058      	beq.n	80094a4 <vTaskResume+0xfc>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	3304      	adds	r3, #4
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff f832 	bl	8008460 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	4618      	mov	r0, r3
 8009400:	f003 fba4 	bl	800cb4c <SEGGER_SYSVIEW_OnTaskStartReady>
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009408:	2201      	movs	r2, #1
 800940a:	409a      	lsls	r2, r3
 800940c:	4b2b      	ldr	r3, [pc, #172]	@ (80094bc <vTaskResume+0x114>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4313      	orrs	r3, r2
 8009412:	4a2a      	ldr	r2, [pc, #168]	@ (80094bc <vTaskResume+0x114>)
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800941a:	4929      	ldr	r1, [pc, #164]	@ (80094c0 <vTaskResume+0x118>)
 800941c:	4613      	mov	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	440b      	add	r3, r1
 8009426:	3304      	adds	r3, #4
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	613b      	str	r3, [r7, #16]
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	609a      	str	r2, [r3, #8]
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	689a      	ldr	r2, [r3, #8]
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	60da      	str	r2, [r3, #12]
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	3204      	adds	r2, #4
 8009442:	605a      	str	r2, [r3, #4]
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	1d1a      	adds	r2, r3, #4
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	609a      	str	r2, [r3, #8]
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009450:	4613      	mov	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4413      	add	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4a19      	ldr	r2, [pc, #100]	@ (80094c0 <vTaskResume+0x118>)
 800945a:	441a      	add	r2, r3
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	615a      	str	r2, [r3, #20]
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009464:	4916      	ldr	r1, [pc, #88]	@ (80094c0 <vTaskResume+0x118>)
 8009466:	4613      	mov	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009476:	1c59      	adds	r1, r3, #1
 8009478:	4811      	ldr	r0, [pc, #68]	@ (80094c0 <vTaskResume+0x118>)
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4403      	add	r3, r0
 8009484:	6019      	str	r1, [r3, #0]

                    /* This yield may not cause the task just resumed to run,
                     * but will leave the lists in the correct state for the
                     * next yield. */
                    taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8009486:	4b0c      	ldr	r3, [pc, #48]	@ (80094b8 <vTaskResume+0x110>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009490:	429a      	cmp	r2, r3
 8009492:	d207      	bcs.n	80094a4 <vTaskResume+0xfc>
 8009494:	4b0b      	ldr	r3, [pc, #44]	@ (80094c4 <vTaskResume+0x11c>)
 8009496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80094a4:	f001 fd80 	bl	800afa8 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskResume();
 80094a8:	20cb      	movs	r0, #203	@ 0xcb
 80094aa:	f003 fa1b 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80094ae:	bf00      	nop
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	200015fc 	.word	0x200015fc
 80094bc:	200016dc 	.word	0x200016dc
 80094c0:	20001600 	.word	0x20001600
 80094c4:	e000ed04 	.word	0xe000ed04

080094c8 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08a      	sub	sp, #40	@ 0x28
 80094cc:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80094ce:	2301      	movs	r3, #1
 80094d0:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80094d6:	2300      	movs	r3, #0
 80094d8:	617b      	str	r3, [r7, #20]
 80094da:	e011      	b.n	8009500 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80094dc:	4a1c      	ldr	r2, [pc, #112]	@ (8009550 <prvCreateIdleTasks+0x88>)
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	4413      	add	r3, r2
 80094e2:	7819      	ldrb	r1, [r3, #0]
 80094e4:	1d3a      	adds	r2, r7, #4
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	4413      	add	r3, r2
 80094ea:	460a      	mov	r2, r1
 80094ec:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80094ee:	1d3a      	adds	r2, r7, #4
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	4413      	add	r3, r2
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d006      	beq.n	8009508 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	3301      	adds	r3, #1
 80094fe:	617b      	str	r3, [r7, #20]
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2b09      	cmp	r3, #9
 8009504:	ddea      	ble.n	80094dc <prvCreateIdleTasks+0x14>
 8009506:	e000      	b.n	800950a <prvCreateIdleTasks+0x42>
        {
            break;
 8009508:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800950a:	2300      	movs	r3, #0
 800950c:	61bb      	str	r3, [r7, #24]
 800950e:	e015      	b.n	800953c <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8009510:	4b10      	ldr	r3, [pc, #64]	@ (8009554 <prvCreateIdleTasks+0x8c>)
 8009512:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4a0f      	ldr	r2, [pc, #60]	@ (8009558 <prvCreateIdleTasks+0x90>)
 800951a:	4413      	add	r3, r2
 800951c:	1d39      	adds	r1, r7, #4
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	2300      	movs	r3, #0
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	2300      	movs	r3, #0
 8009526:	2282      	movs	r2, #130	@ 0x82
 8009528:	6938      	ldr	r0, [r7, #16]
 800952a:	f7ff fcaa 	bl	8008e82 <xTaskCreate>
 800952e:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d006      	beq.n	8009544 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	3301      	adds	r3, #1
 800953a:	61bb      	str	r3, [r7, #24]
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	2b00      	cmp	r3, #0
 8009540:	dde6      	ble.n	8009510 <prvCreateIdleTasks+0x48>
 8009542:	e000      	b.n	8009546 <prvCreateIdleTasks+0x7e>
        {
            break;
 8009544:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8009546:	69fb      	ldr	r3, [r7, #28]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3720      	adds	r7, #32
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	0800e2c0 	.word	0x0800e2c0
 8009554:	08009f55 	.word	0x08009f55
 8009558:	200016f8 	.word	0x200016f8

0800955c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8009562:	f7ff ffb1 	bl	80094c8 <prvCreateIdleTasks>
 8009566:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d102      	bne.n	8009574 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800956e:	f001 f8cf 	bl	800a710 <xTimerCreateTimerTask>
 8009572:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d124      	bne.n	80095c4 <vTaskStartScheduler+0x68>
    __asm volatile
 800957a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	60bb      	str	r3, [r7, #8]
}
 800958c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800958e:	4b1a      	ldr	r3, [pc, #104]	@ (80095f8 <vTaskStartScheduler+0x9c>)
 8009590:	f04f 32ff 	mov.w	r2, #4294967295
 8009594:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009596:	4b19      	ldr	r3, [pc, #100]	@ (80095fc <vTaskStartScheduler+0xa0>)
 8009598:	2201      	movs	r2, #1
 800959a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800959c:	4b18      	ldr	r3, [pc, #96]	@ (8009600 <vTaskStartScheduler+0xa4>)
 800959e:	2200      	movs	r2, #0
 80095a0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80095a2:	4b18      	ldr	r3, [pc, #96]	@ (8009604 <vTaskStartScheduler+0xa8>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	4b18      	ldr	r3, [pc, #96]	@ (8009608 <vTaskStartScheduler+0xac>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d102      	bne.n	80095b4 <vTaskStartScheduler+0x58>
 80095ae:	f003 fa2d 	bl	800ca0c <SEGGER_SYSVIEW_OnIdle>
 80095b2:	e004      	b.n	80095be <vTaskStartScheduler+0x62>
 80095b4:	4b14      	ldr	r3, [pc, #80]	@ (8009608 <vTaskStartScheduler+0xac>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f003 fa85 	bl	800cac8 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80095be:	f001 fbd1 	bl	800ad64 <xPortStartScheduler>
 80095c2:	e00f      	b.n	80095e4 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ca:	d10b      	bne.n	80095e4 <vTaskStartScheduler+0x88>
    __asm volatile
 80095cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	607b      	str	r3, [r7, #4]
}
 80095de:	bf00      	nop
 80095e0:	bf00      	nop
 80095e2:	e7fd      	b.n	80095e0 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80095e4:	4b09      	ldr	r3, [pc, #36]	@ (800960c <vTaskStartScheduler+0xb0>)
 80095e6:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 80095e8:	20cd      	movs	r0, #205	@ 0xcd
 80095ea:	f003 f97b 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 80095ee:	bf00      	nop
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	200016f4 	.word	0x200016f4
 80095fc:	200016e0 	.word	0x200016e0
 8009600:	200016d8 	.word	0x200016d8
 8009604:	200016f8 	.word	0x200016f8
 8009608:	200015fc 	.word	0x200015fc
 800960c:	20000024 	.word	0x20000024

08009610 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8009614:	4b04      	ldr	r3, [pc, #16]	@ (8009628 <vTaskSuspendAll+0x18>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3301      	adds	r3, #1
 800961a:	4a03      	ldr	r2, [pc, #12]	@ (8009628 <vTaskSuspendAll+0x18>)
 800961c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800961e:	20cf      	movs	r0, #207	@ 0xcf
 8009620:	f003 f960 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8009624:	bf00      	nop
 8009626:	bd80      	pop	{r7, pc}
 8009628:	200016fc 	.word	0x200016fc

0800962c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009636:	2300      	movs	r3, #0
 8009638:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800963a:	f001 fc83 	bl	800af44 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800963e:	2300      	movs	r3, #0
 8009640:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8009642:	4b7a      	ldr	r3, [pc, #488]	@ (800982c <xTaskResumeAll+0x200>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10b      	bne.n	8009662 <xTaskResumeAll+0x36>
    __asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	603b      	str	r3, [r7, #0]
}
 800965c:	bf00      	nop
 800965e:	bf00      	nop
 8009660:	e7fd      	b.n	800965e <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8009662:	4b72      	ldr	r3, [pc, #456]	@ (800982c <xTaskResumeAll+0x200>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3b01      	subs	r3, #1
 8009668:	4a70      	ldr	r2, [pc, #448]	@ (800982c <xTaskResumeAll+0x200>)
 800966a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800966c:	4b6f      	ldr	r3, [pc, #444]	@ (800982c <xTaskResumeAll+0x200>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	f040 80ce 	bne.w	8009812 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009676:	4b6e      	ldr	r3, [pc, #440]	@ (8009830 <xTaskResumeAll+0x204>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 80c9 	beq.w	8009812 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009680:	e092      	b.n	80097a8 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009682:	4b6c      	ldr	r3, [pc, #432]	@ (8009834 <xTaskResumeAll+0x208>)
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800968e:	60fb      	str	r3, [r7, #12]
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	69fa      	ldr	r2, [r7, #28]
 8009696:	6a12      	ldr	r2, [r2, #32]
 8009698:	609a      	str	r2, [r3, #8]
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	69fa      	ldr	r2, [r7, #28]
 80096a0:	69d2      	ldr	r2, [r2, #28]
 80096a2:	605a      	str	r2, [r3, #4]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	3318      	adds	r3, #24
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d103      	bne.n	80096b8 <xTaskResumeAll+0x8c>
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	6a1a      	ldr	r2, [r3, #32]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	605a      	str	r2, [r3, #4]
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	2200      	movs	r2, #0
 80096bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	1e5a      	subs	r2, r3, #1
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	60bb      	str	r3, [r7, #8]
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	69fa      	ldr	r2, [r7, #28]
 80096d4:	68d2      	ldr	r2, [r2, #12]
 80096d6:	609a      	str	r2, [r3, #8]
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	69fa      	ldr	r2, [r7, #28]
 80096de:	6892      	ldr	r2, [r2, #8]
 80096e0:	605a      	str	r2, [r3, #4]
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	3304      	adds	r3, #4
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d103      	bne.n	80096f6 <xTaskResumeAll+0xca>
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	68da      	ldr	r2, [r3, #12]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	605a      	str	r2, [r3, #4]
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	2200      	movs	r2, #0
 80096fa:	615a      	str	r2, [r3, #20]
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	1e5a      	subs	r2, r3, #1
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	4618      	mov	r0, r3
 800970a:	f003 fa1f 	bl	800cb4c <SEGGER_SYSVIEW_OnTaskStartReady>
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009712:	2201      	movs	r2, #1
 8009714:	409a      	lsls	r2, r3
 8009716:	4b48      	ldr	r3, [pc, #288]	@ (8009838 <xTaskResumeAll+0x20c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4313      	orrs	r3, r2
 800971c:	4a46      	ldr	r2, [pc, #280]	@ (8009838 <xTaskResumeAll+0x20c>)
 800971e:	6013      	str	r3, [r2, #0]
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009724:	4945      	ldr	r1, [pc, #276]	@ (800983c <xTaskResumeAll+0x210>)
 8009726:	4613      	mov	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	440b      	add	r3, r1
 8009730:	3304      	adds	r3, #4
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	607b      	str	r3, [r7, #4]
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	609a      	str	r2, [r3, #8]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	689a      	ldr	r2, [r3, #8]
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	60da      	str	r2, [r3, #12]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	69fa      	ldr	r2, [r7, #28]
 800974a:	3204      	adds	r2, #4
 800974c:	605a      	str	r2, [r3, #4]
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	1d1a      	adds	r2, r3, #4
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	609a      	str	r2, [r3, #8]
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800975a:	4613      	mov	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4a36      	ldr	r2, [pc, #216]	@ (800983c <xTaskResumeAll+0x210>)
 8009764:	441a      	add	r2, r3
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	615a      	str	r2, [r3, #20]
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800976e:	4933      	ldr	r1, [pc, #204]	@ (800983c <xTaskResumeAll+0x210>)
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	440b      	add	r3, r1
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	69fa      	ldr	r2, [r7, #28]
 800977e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009780:	1c59      	adds	r1, r3, #1
 8009782:	482e      	ldr	r0, [pc, #184]	@ (800983c <xTaskResumeAll+0x210>)
 8009784:	4613      	mov	r3, r2
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4403      	add	r3, r0
 800978e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009794:	4b2a      	ldr	r3, [pc, #168]	@ (8009840 <xTaskResumeAll+0x214>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979a:	429a      	cmp	r2, r3
 800979c:	d904      	bls.n	80097a8 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800979e:	4a29      	ldr	r2, [pc, #164]	@ (8009844 <xTaskResumeAll+0x218>)
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	2101      	movs	r1, #1
 80097a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097a8:	4b22      	ldr	r3, [pc, #136]	@ (8009834 <xTaskResumeAll+0x208>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f47f af68 	bne.w	8009682 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80097b8:	f000 fc62 	bl	800a080 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80097bc:	4b22      	ldr	r3, [pc, #136]	@ (8009848 <xTaskResumeAll+0x21c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d012      	beq.n	80097ee <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80097c8:	f000 f854 	bl	8009874 <xTaskIncrementTick>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d004      	beq.n	80097dc <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80097d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009844 <xTaskResumeAll+0x218>)
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	2101      	movs	r1, #1
 80097d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	3b01      	subs	r3, #1
 80097e0:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1ef      	bne.n	80097c8 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 80097e8:	4b17      	ldr	r3, [pc, #92]	@ (8009848 <xTaskResumeAll+0x21c>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80097ee:	4a15      	ldr	r2, [pc, #84]	@ (8009844 <xTaskResumeAll+0x218>)
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00b      	beq.n	8009812 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80097fa:	2301      	movs	r3, #1
 80097fc:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80097fe:	4b10      	ldr	r3, [pc, #64]	@ (8009840 <xTaskResumeAll+0x214>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4b12      	ldr	r3, [pc, #72]	@ (800984c <xTaskResumeAll+0x220>)
 8009804:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009808:	601a      	str	r2, [r3, #0]
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009812:	f001 fbc9 	bl	800afa8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	4619      	mov	r1, r3
 800981a:	20d0      	movs	r0, #208	@ 0xd0
 800981c:	f003 f89e 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8009820:	69bb      	ldr	r3, [r7, #24]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3720      	adds	r7, #32
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	200016fc 	.word	0x200016fc
 8009830:	200016d4 	.word	0x200016d4
 8009834:	20001694 	.word	0x20001694
 8009838:	200016dc 	.word	0x200016dc
 800983c:	20001600 	.word	0x20001600
 8009840:	200015fc 	.word	0x200015fc
 8009844:	200016e8 	.word	0x200016e8
 8009848:	200016e4 	.word	0x200016e4
 800984c:	e000ed04 	.word	0xe000ed04

08009850 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8009856:	4b06      	ldr	r3, [pc, #24]	@ (8009870 <xTaskGetTickCount+0x20>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 800985c:	6879      	ldr	r1, [r7, #4]
 800985e:	20d1      	movs	r0, #209	@ 0xd1
 8009860:	f003 f87c 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8009864:	687b      	ldr	r3, [r7, #4]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	200016d8 	.word	0x200016d8

08009874 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08a      	sub	sp, #40	@ 0x28
 8009878:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800987a:	2300      	movs	r3, #0
 800987c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800987e:	4b83      	ldr	r3, [pc, #524]	@ (8009a8c <xTaskIncrementTick+0x218>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	f040 80f3 	bne.w	8009a6e <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009888:	4b81      	ldr	r3, [pc, #516]	@ (8009a90 <xTaskIncrementTick+0x21c>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3301      	adds	r3, #1
 800988e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009890:	4a7f      	ldr	r2, [pc, #508]	@ (8009a90 <xTaskIncrementTick+0x21c>)
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d121      	bne.n	80098e0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800989c:	4b7d      	ldr	r3, [pc, #500]	@ (8009a94 <xTaskIncrementTick+0x220>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00b      	beq.n	80098be <xTaskIncrementTick+0x4a>
    __asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	607b      	str	r3, [r7, #4]
}
 80098b8:	bf00      	nop
 80098ba:	bf00      	nop
 80098bc:	e7fd      	b.n	80098ba <xTaskIncrementTick+0x46>
 80098be:	4b75      	ldr	r3, [pc, #468]	@ (8009a94 <xTaskIncrementTick+0x220>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	61fb      	str	r3, [r7, #28]
 80098c4:	4b74      	ldr	r3, [pc, #464]	@ (8009a98 <xTaskIncrementTick+0x224>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a72      	ldr	r2, [pc, #456]	@ (8009a94 <xTaskIncrementTick+0x220>)
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	4a72      	ldr	r2, [pc, #456]	@ (8009a98 <xTaskIncrementTick+0x224>)
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	6013      	str	r3, [r2, #0]
 80098d2:	4b72      	ldr	r3, [pc, #456]	@ (8009a9c <xTaskIncrementTick+0x228>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3301      	adds	r3, #1
 80098d8:	4a70      	ldr	r2, [pc, #448]	@ (8009a9c <xTaskIncrementTick+0x228>)
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	f000 fbd0 	bl	800a080 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80098e0:	4b6f      	ldr	r3, [pc, #444]	@ (8009aa0 <xTaskIncrementTick+0x22c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6a3a      	ldr	r2, [r7, #32]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	f0c0 80ac 	bcc.w	8009a44 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098ec:	4b69      	ldr	r3, [pc, #420]	@ (8009a94 <xTaskIncrementTick+0x220>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d104      	bne.n	8009900 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80098f6:	4b6a      	ldr	r3, [pc, #424]	@ (8009aa0 <xTaskIncrementTick+0x22c>)
 80098f8:	f04f 32ff 	mov.w	r2, #4294967295
 80098fc:	601a      	str	r2, [r3, #0]
                    break;
 80098fe:	e0a1      	b.n	8009a44 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009900:	4b64      	ldr	r3, [pc, #400]	@ (8009a94 <xTaskIncrementTick+0x220>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8009910:	6a3a      	ldr	r2, [r7, #32]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	429a      	cmp	r2, r3
 8009916:	d203      	bcs.n	8009920 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009918:	4a61      	ldr	r2, [pc, #388]	@ (8009aa0 <xTaskIncrementTick+0x22c>)
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	6013      	str	r3, [r2, #0]
                        break;
 800991e:	e091      	b.n	8009a44 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	613b      	str	r3, [r7, #16]
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	69ba      	ldr	r2, [r7, #24]
 800992c:	68d2      	ldr	r2, [r2, #12]
 800992e:	609a      	str	r2, [r3, #8]
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	69ba      	ldr	r2, [r7, #24]
 8009936:	6892      	ldr	r2, [r2, #8]
 8009938:	605a      	str	r2, [r3, #4]
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	685a      	ldr	r2, [r3, #4]
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	3304      	adds	r3, #4
 8009942:	429a      	cmp	r2, r3
 8009944:	d103      	bne.n	800994e <xTaskIncrementTick+0xda>
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	68da      	ldr	r2, [r3, #12]
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	605a      	str	r2, [r3, #4]
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	2200      	movs	r2, #0
 8009952:	615a      	str	r2, [r3, #20]
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	1e5a      	subs	r2, r3, #1
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009962:	2b00      	cmp	r3, #0
 8009964:	d01e      	beq.n	80099a4 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	69db      	ldr	r3, [r3, #28]
 8009970:	69ba      	ldr	r2, [r7, #24]
 8009972:	6a12      	ldr	r2, [r2, #32]
 8009974:	609a      	str	r2, [r3, #8]
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	69ba      	ldr	r2, [r7, #24]
 800997c:	69d2      	ldr	r2, [r2, #28]
 800997e:	605a      	str	r2, [r3, #4]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	3318      	adds	r3, #24
 8009988:	429a      	cmp	r2, r3
 800998a:	d103      	bne.n	8009994 <xTaskIncrementTick+0x120>
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	6a1a      	ldr	r2, [r3, #32]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	605a      	str	r2, [r3, #4]
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	2200      	movs	r2, #0
 8009998:	629a      	str	r2, [r3, #40]	@ 0x28
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	1e5a      	subs	r2, r3, #1
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f003 f8d0 	bl	800cb4c <SEGGER_SYSVIEW_OnTaskStartReady>
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b0:	2201      	movs	r2, #1
 80099b2:	409a      	lsls	r2, r3
 80099b4:	4b3b      	ldr	r3, [pc, #236]	@ (8009aa4 <xTaskIncrementTick+0x230>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	4a3a      	ldr	r2, [pc, #232]	@ (8009aa4 <xTaskIncrementTick+0x230>)
 80099bc:	6013      	str	r3, [r2, #0]
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099c2:	4939      	ldr	r1, [pc, #228]	@ (8009aa8 <xTaskIncrementTick+0x234>)
 80099c4:	4613      	mov	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	440b      	add	r3, r1
 80099ce:	3304      	adds	r3, #4
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	60bb      	str	r3, [r7, #8]
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	609a      	str	r2, [r3, #8]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	689a      	ldr	r2, [r3, #8]
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	60da      	str	r2, [r3, #12]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	69ba      	ldr	r2, [r7, #24]
 80099e8:	3204      	adds	r2, #4
 80099ea:	605a      	str	r2, [r3, #4]
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	1d1a      	adds	r2, r3, #4
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	609a      	str	r2, [r3, #8]
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099f8:	4613      	mov	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4a29      	ldr	r2, [pc, #164]	@ (8009aa8 <xTaskIncrementTick+0x234>)
 8009a02:	441a      	add	r2, r3
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	615a      	str	r2, [r3, #20]
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a0c:	4926      	ldr	r1, [pc, #152]	@ (8009aa8 <xTaskIncrementTick+0x234>)
 8009a0e:	4613      	mov	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	440b      	add	r3, r1
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	69ba      	ldr	r2, [r7, #24]
 8009a1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009a1e:	1c59      	adds	r1, r3, #1
 8009a20:	4821      	ldr	r0, [pc, #132]	@ (8009aa8 <xTaskIncrementTick+0x234>)
 8009a22:	4613      	mov	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4403      	add	r3, r0
 8009a2c:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a32:	4b1e      	ldr	r3, [pc, #120]	@ (8009aac <xTaskIncrementTick+0x238>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	f67f af57 	bls.w	80098ec <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a42:	e753      	b.n	80098ec <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8009a44:	4b19      	ldr	r3, [pc, #100]	@ (8009aac <xTaskIncrementTick+0x238>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a4a:	4917      	ldr	r1, [pc, #92]	@ (8009aa8 <xTaskIncrementTick+0x234>)
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	440b      	add	r3, r1
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d901      	bls.n	8009a60 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8009a60:	4b13      	ldr	r3, [pc, #76]	@ (8009ab0 <xTaskIncrementTick+0x23c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d007      	beq.n	8009a78 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a6c:	e004      	b.n	8009a78 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8009a6e:	4b11      	ldr	r3, [pc, #68]	@ (8009ab4 <xTaskIncrementTick+0x240>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3301      	adds	r3, #1
 8009a74:	4a0f      	ldr	r2, [pc, #60]	@ (8009ab4 <xTaskIncrementTick+0x240>)
 8009a76:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8009a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	20db      	movs	r0, #219	@ 0xdb
 8009a7e:	f002 ff6d 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8009a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3728      	adds	r7, #40	@ 0x28
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	200016fc 	.word	0x200016fc
 8009a90:	200016d8 	.word	0x200016d8
 8009a94:	2000168c 	.word	0x2000168c
 8009a98:	20001690 	.word	0x20001690
 8009a9c:	200016ec 	.word	0x200016ec
 8009aa0:	200016f4 	.word	0x200016f4
 8009aa4:	200016dc 	.word	0x200016dc
 8009aa8:	20001600 	.word	0x20001600
 8009aac:	200015fc 	.word	0x200015fc
 8009ab0:	200016e8 	.word	0x200016e8
 8009ab4:	200016e4 	.word	0x200016e4

08009ab8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8009abe:	4b2e      	ldr	r3, [pc, #184]	@ (8009b78 <vTaskSwitchContext+0xc0>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d003      	beq.n	8009ace <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8009ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8009b7c <vTaskSwitchContext+0xc4>)
 8009ac8:	2201      	movs	r2, #1
 8009aca:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8009acc:	e04f      	b.n	8009b6e <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8009ace:	4b2b      	ldr	r3, [pc, #172]	@ (8009b7c <vTaskSwitchContext+0xc4>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8009ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8009b80 <vTaskSwitchContext+0xc8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	fab3 f383 	clz	r3, r3
 8009ae0:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8009ae2:	7afb      	ldrb	r3, [r7, #11]
 8009ae4:	f1c3 031f 	rsb	r3, r3, #31
 8009ae8:	617b      	str	r3, [r7, #20]
 8009aea:	4926      	ldr	r1, [pc, #152]	@ (8009b84 <vTaskSwitchContext+0xcc>)
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	4613      	mov	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	440b      	add	r3, r1
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10b      	bne.n	8009b16 <vTaskSwitchContext+0x5e>
    __asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	607b      	str	r3, [r7, #4]
}
 8009b10:	bf00      	nop
 8009b12:	bf00      	nop
 8009b14:	e7fd      	b.n	8009b12 <vTaskSwitchContext+0x5a>
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4413      	add	r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4a18      	ldr	r2, [pc, #96]	@ (8009b84 <vTaskSwitchContext+0xcc>)
 8009b22:	4413      	add	r3, r2
 8009b24:	613b      	str	r3, [r7, #16]
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	605a      	str	r2, [r3, #4]
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	685a      	ldr	r2, [r3, #4]
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	3308      	adds	r3, #8
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d103      	bne.n	8009b44 <vTaskSwitchContext+0x8c>
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	605a      	str	r2, [r3, #4]
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8009b88 <vTaskSwitchContext+0xd0>)
 8009b4c:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b8c <vTaskSwitchContext+0xd4>)
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	4b0d      	ldr	r3, [pc, #52]	@ (8009b88 <vTaskSwitchContext+0xd0>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d102      	bne.n	8009b60 <vTaskSwitchContext+0xa8>
 8009b5a:	f002 ff57 	bl	800ca0c <SEGGER_SYSVIEW_OnIdle>
 8009b5e:	e004      	b.n	8009b6a <vTaskSwitchContext+0xb2>
 8009b60:	4b09      	ldr	r3, [pc, #36]	@ (8009b88 <vTaskSwitchContext+0xd0>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f002 ffaf 	bl	800cac8 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8009b6a:	4b07      	ldr	r3, [pc, #28]	@ (8009b88 <vTaskSwitchContext+0xd0>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
    }
 8009b6e:	bf00      	nop
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	200016fc 	.word	0x200016fc
 8009b7c:	200016e8 	.word	0x200016e8
 8009b80:	200016dc 	.word	0x200016dc
 8009b84:	20001600 	.word	0x20001600
 8009b88:	200015fc 	.word	0x200015fc
 8009b8c:	200016f8 	.word	0x200016f8

08009b90 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10b      	bne.n	8009bb8 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	60fb      	str	r3, [r7, #12]
}
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	e7fd      	b.n	8009bb4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bb8:	4b08      	ldr	r3, [pc, #32]	@ (8009bdc <vTaskPlaceOnEventList+0x4c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3318      	adds	r3, #24
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7fe fc12 	bl	80083ea <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	6838      	ldr	r0, [r7, #0]
 8009bca:	f000 fd13 	bl	800a5f4 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8009bce:	20e1      	movs	r0, #225	@ 0xe1
 8009bd0:	f002 fe88 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8009bd4:	bf00      	nop
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	200015fc 	.word	0x200015fc

08009be0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d10b      	bne.n	8009c0a <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	613b      	str	r3, [r7, #16]
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop
 8009c08:	e7fd      	b.n	8009c06 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	617b      	str	r3, [r7, #20]
 8009c10:	4b17      	ldr	r3, [pc, #92]	@ (8009c70 <vTaskPlaceOnEventListRestricted+0x90>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	61da      	str	r2, [r3, #28]
 8009c18:	4b15      	ldr	r3, [pc, #84]	@ (8009c70 <vTaskPlaceOnEventListRestricted+0x90>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	697a      	ldr	r2, [r7, #20]
 8009c1e:	6892      	ldr	r2, [r2, #8]
 8009c20:	621a      	str	r2, [r3, #32]
 8009c22:	4b13      	ldr	r3, [pc, #76]	@ (8009c70 <vTaskPlaceOnEventListRestricted+0x90>)
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	3218      	adds	r2, #24
 8009c2c:	605a      	str	r2, [r3, #4]
 8009c2e:	4b10      	ldr	r3, [pc, #64]	@ (8009c70 <vTaskPlaceOnEventListRestricted+0x90>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f103 0218 	add.w	r2, r3, #24
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	609a      	str	r2, [r3, #8]
 8009c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c70 <vTaskPlaceOnEventListRestricted+0x90>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	1c5a      	adds	r2, r3, #1
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8009c52:	f04f 33ff 	mov.w	r3, #4294967295
 8009c56:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c58:	6879      	ldr	r1, [r7, #4]
 8009c5a:	68b8      	ldr	r0, [r7, #8]
 8009c5c:	f000 fcca 	bl	800a5f4 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8009c60:	20e3      	movs	r0, #227	@ 0xe3
 8009c62:	f002 fe3f 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8009c66:	bf00      	nop
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	200015fc 	.word	0x200015fc

08009c74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08a      	sub	sp, #40	@ 0x28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10b      	bne.n	8009ca2 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	60fb      	str	r3, [r7, #12]
}
 8009c9c:	bf00      	nop
 8009c9e:	bf00      	nop
 8009ca0:	e7fd      	b.n	8009c9e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8009ca2:	6a3b      	ldr	r3, [r7, #32]
 8009ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca6:	61fb      	str	r3, [r7, #28]
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	69db      	ldr	r3, [r3, #28]
 8009cac:	6a3a      	ldr	r2, [r7, #32]
 8009cae:	6a12      	ldr	r2, [r2, #32]
 8009cb0:	609a      	str	r2, [r3, #8]
 8009cb2:	6a3b      	ldr	r3, [r7, #32]
 8009cb4:	6a1b      	ldr	r3, [r3, #32]
 8009cb6:	6a3a      	ldr	r2, [r7, #32]
 8009cb8:	69d2      	ldr	r2, [r2, #28]
 8009cba:	605a      	str	r2, [r3, #4]
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	3318      	adds	r3, #24
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d103      	bne.n	8009cd0 <xTaskRemoveFromEventList+0x5c>
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	6a1a      	ldr	r2, [r3, #32]
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	605a      	str	r2, [r3, #4]
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	1e5a      	subs	r2, r3, #1
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009ce0:	4b4e      	ldr	r3, [pc, #312]	@ (8009e1c <xTaskRemoveFromEventList+0x1a8>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d164      	bne.n	8009db2 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8009ce8:	6a3b      	ldr	r3, [r7, #32]
 8009cea:	695b      	ldr	r3, [r3, #20]
 8009cec:	617b      	str	r3, [r7, #20]
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	6a3a      	ldr	r2, [r7, #32]
 8009cf4:	68d2      	ldr	r2, [r2, #12]
 8009cf6:	609a      	str	r2, [r3, #8]
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	6a3a      	ldr	r2, [r7, #32]
 8009cfe:	6892      	ldr	r2, [r2, #8]
 8009d00:	605a      	str	r2, [r3, #4]
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	3304      	adds	r3, #4
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d103      	bne.n	8009d16 <xTaskRemoveFromEventList+0xa2>
 8009d0e:	6a3b      	ldr	r3, [r7, #32]
 8009d10:	68da      	ldr	r2, [r3, #12]
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	605a      	str	r2, [r3, #4]
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	615a      	str	r2, [r3, #20]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	1e5a      	subs	r2, r3, #1
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f002 ff0f 	bl	800cb4c <SEGGER_SYSVIEW_OnTaskStartReady>
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d32:	2201      	movs	r2, #1
 8009d34:	409a      	lsls	r2, r3
 8009d36:	4b3a      	ldr	r3, [pc, #232]	@ (8009e20 <xTaskRemoveFromEventList+0x1ac>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	4a38      	ldr	r2, [pc, #224]	@ (8009e20 <xTaskRemoveFromEventList+0x1ac>)
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d44:	4937      	ldr	r1, [pc, #220]	@ (8009e24 <xTaskRemoveFromEventList+0x1b0>)
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	440b      	add	r3, r1
 8009d50:	3304      	adds	r3, #4
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	613b      	str	r3, [r7, #16]
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	609a      	str	r2, [r3, #8]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	689a      	ldr	r2, [r3, #8]
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	60da      	str	r2, [r3, #12]
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	6a3a      	ldr	r2, [r7, #32]
 8009d6a:	3204      	adds	r2, #4
 8009d6c:	605a      	str	r2, [r3, #4]
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	1d1a      	adds	r2, r3, #4
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	609a      	str	r2, [r3, #8]
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4a28      	ldr	r2, [pc, #160]	@ (8009e24 <xTaskRemoveFromEventList+0x1b0>)
 8009d84:	441a      	add	r2, r3
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	615a      	str	r2, [r3, #20]
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d8e:	4925      	ldr	r1, [pc, #148]	@ (8009e24 <xTaskRemoveFromEventList+0x1b0>)
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	440b      	add	r3, r1
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6a3a      	ldr	r2, [r7, #32]
 8009d9e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009da0:	1c59      	adds	r1, r3, #1
 8009da2:	4820      	ldr	r0, [pc, #128]	@ (8009e24 <xTaskRemoveFromEventList+0x1b0>)
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4403      	add	r3, r0
 8009dae:	6019      	str	r1, [r3, #0]
 8009db0:	e01b      	b.n	8009dea <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009db2:	4b1d      	ldr	r3, [pc, #116]	@ (8009e28 <xTaskRemoveFromEventList+0x1b4>)
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	61bb      	str	r3, [r7, #24]
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	69ba      	ldr	r2, [r7, #24]
 8009dbc:	61da      	str	r2, [r3, #28]
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	689a      	ldr	r2, [r3, #8]
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	621a      	str	r2, [r3, #32]
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	6a3a      	ldr	r2, [r7, #32]
 8009dcc:	3218      	adds	r2, #24
 8009dce:	605a      	str	r2, [r3, #4]
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	f103 0218 	add.w	r2, r3, #24
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	609a      	str	r2, [r3, #8]
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	4a12      	ldr	r2, [pc, #72]	@ (8009e28 <xTaskRemoveFromEventList+0x1b4>)
 8009dde:	629a      	str	r2, [r3, #40]	@ 0x28
 8009de0:	4b11      	ldr	r3, [pc, #68]	@ (8009e28 <xTaskRemoveFromEventList+0x1b4>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	3301      	adds	r3, #1
 8009de6:	4a10      	ldr	r2, [pc, #64]	@ (8009e28 <xTaskRemoveFromEventList+0x1b4>)
 8009de8:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009dea:	6a3b      	ldr	r3, [r7, #32]
 8009dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dee:	4b0f      	ldr	r3, [pc, #60]	@ (8009e2c <xTaskRemoveFromEventList+0x1b8>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d905      	bls.n	8009e04 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8009dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8009e30 <xTaskRemoveFromEventList+0x1bc>)
 8009dfe:	2201      	movs	r2, #1
 8009e00:	601a      	str	r2, [r3, #0]
 8009e02:	e001      	b.n	8009e08 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8009e04:	2300      	movs	r3, #0
 8009e06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8009e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	20e4      	movs	r0, #228	@ 0xe4
 8009e0e:	f002 fda5 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8009e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3728      	adds	r7, #40	@ 0x28
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	200016fc 	.word	0x200016fc
 8009e20:	200016dc 	.word	0x200016dc
 8009e24:	20001600 	.word	0x20001600
 8009e28:	20001694 	.word	0x20001694
 8009e2c:	200015fc 	.word	0x200015fc
 8009e30:	200016e8 	.word	0x200016e8

08009e34 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e3c:	4b07      	ldr	r3, [pc, #28]	@ (8009e5c <vTaskInternalSetTimeOutState+0x28>)
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009e44:	4b06      	ldr	r3, [pc, #24]	@ (8009e60 <vTaskInternalSetTimeOutState+0x2c>)
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8009e4c:	20e7      	movs	r0, #231	@ 0xe7
 8009e4e:	f002 fd49 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8009e52:	bf00      	nop
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	200016ec 	.word	0x200016ec
 8009e60:	200016d8 	.word	0x200016d8

08009e64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b088      	sub	sp, #32
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10b      	bne.n	8009e8c <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8009e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	613b      	str	r3, [r7, #16]
}
 8009e86:	bf00      	nop
 8009e88:	bf00      	nop
 8009e8a:	e7fd      	b.n	8009e88 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10b      	bne.n	8009eaa <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8009e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	60fb      	str	r3, [r7, #12]
}
 8009ea4:	bf00      	nop
 8009ea6:	bf00      	nop
 8009ea8:	e7fd      	b.n	8009ea6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8009eaa:	f001 f84b 	bl	800af44 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8009eae:	4b21      	ldr	r3, [pc, #132]	@ (8009f34 <xTaskCheckForTimeOut+0xd0>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	69ba      	ldr	r2, [r7, #24]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec6:	d102      	bne.n	8009ece <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	61fb      	str	r3, [r7, #28]
 8009ecc:	e026      	b.n	8009f1c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	4b19      	ldr	r3, [pc, #100]	@ (8009f38 <xTaskCheckForTimeOut+0xd4>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d00a      	beq.n	8009ef0 <xTaskCheckForTimeOut+0x8c>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	69ba      	ldr	r2, [r7, #24]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d305      	bcc.n	8009ef0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	e015      	b.n	8009f1c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d20b      	bcs.n	8009f12 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	1ad2      	subs	r2, r2, r3
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7ff ff94 	bl	8009e34 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	61fb      	str	r3, [r7, #28]
 8009f10:	e004      	b.n	8009f1c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8009f1c:	f001 f844 	bl	800afa8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	4619      	mov	r1, r3
 8009f24:	20e8      	movs	r0, #232	@ 0xe8
 8009f26:	f002 fd19 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8009f2a:	69fb      	ldr	r3, [r7, #28]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3720      	adds	r7, #32
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	200016d8 	.word	0x200016d8
 8009f38:	200016ec 	.word	0x200016ec

08009f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8009f40:	4b03      	ldr	r3, [pc, #12]	@ (8009f50 <vTaskMissedYield+0x14>)
 8009f42:	2201      	movs	r2, #1
 8009f44:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8009f46:	20e9      	movs	r0, #233	@ 0xe9
 8009f48:	f002 fccc 	bl	800c8e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8009f4c:	bf00      	nop
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	200016e8 	.word	0x200016e8

08009f54 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009f5c:	f000 f852 	bl	800a004 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8009f60:	4b06      	ldr	r3, [pc, #24]	@ (8009f7c <prvIdleTask+0x28>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d9f9      	bls.n	8009f5c <prvIdleTask+0x8>
            {
                taskYIELD();
 8009f68:	4b05      	ldr	r3, [pc, #20]	@ (8009f80 <prvIdleTask+0x2c>)
 8009f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8009f78:	e7f0      	b.n	8009f5c <prvIdleTask+0x8>
 8009f7a:	bf00      	nop
 8009f7c:	20001600 	.word	0x20001600
 8009f80:	e000ed04 	.word	0xe000ed04

08009f84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	607b      	str	r3, [r7, #4]
 8009f8e:	e00c      	b.n	8009faa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	4613      	mov	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4a12      	ldr	r2, [pc, #72]	@ (8009fe4 <prvInitialiseTaskLists+0x60>)
 8009f9c:	4413      	add	r3, r2
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe f9cc 	bl	800833c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	607b      	str	r3, [r7, #4]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b04      	cmp	r3, #4
 8009fae:	d9ef      	bls.n	8009f90 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009fb0:	480d      	ldr	r0, [pc, #52]	@ (8009fe8 <prvInitialiseTaskLists+0x64>)
 8009fb2:	f7fe f9c3 	bl	800833c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8009fb6:	480d      	ldr	r0, [pc, #52]	@ (8009fec <prvInitialiseTaskLists+0x68>)
 8009fb8:	f7fe f9c0 	bl	800833c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009fbc:	480c      	ldr	r0, [pc, #48]	@ (8009ff0 <prvInitialiseTaskLists+0x6c>)
 8009fbe:	f7fe f9bd 	bl	800833c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8009fc2:	480c      	ldr	r0, [pc, #48]	@ (8009ff4 <prvInitialiseTaskLists+0x70>)
 8009fc4:	f7fe f9ba 	bl	800833c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8009fc8:	480b      	ldr	r0, [pc, #44]	@ (8009ff8 <prvInitialiseTaskLists+0x74>)
 8009fca:	f7fe f9b7 	bl	800833c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009fce:	4b0b      	ldr	r3, [pc, #44]	@ (8009ffc <prvInitialiseTaskLists+0x78>)
 8009fd0:	4a05      	ldr	r2, [pc, #20]	@ (8009fe8 <prvInitialiseTaskLists+0x64>)
 8009fd2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fd4:	4b0a      	ldr	r3, [pc, #40]	@ (800a000 <prvInitialiseTaskLists+0x7c>)
 8009fd6:	4a05      	ldr	r2, [pc, #20]	@ (8009fec <prvInitialiseTaskLists+0x68>)
 8009fd8:	601a      	str	r2, [r3, #0]
}
 8009fda:	bf00      	nop
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20001600 	.word	0x20001600
 8009fe8:	20001664 	.word	0x20001664
 8009fec:	20001678 	.word	0x20001678
 8009ff0:	20001694 	.word	0x20001694
 8009ff4:	200016a8 	.word	0x200016a8
 8009ff8:	200016c0 	.word	0x200016c0
 8009ffc:	2000168c 	.word	0x2000168c
 800a000:	20001690 	.word	0x20001690

0800a004 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a00a:	e019      	b.n	800a040 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800a00c:	f000 ff9a 	bl	800af44 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a010:	4b10      	ldr	r3, [pc, #64]	@ (800a054 <prvCheckTasksWaitingTermination+0x50>)
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	3304      	adds	r3, #4
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fe fa1f 	bl	8008460 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800a022:	4b0d      	ldr	r3, [pc, #52]	@ (800a058 <prvCheckTasksWaitingTermination+0x54>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3b01      	subs	r3, #1
 800a028:	4a0b      	ldr	r2, [pc, #44]	@ (800a058 <prvCheckTasksWaitingTermination+0x54>)
 800a02a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800a02c:	4b0b      	ldr	r3, [pc, #44]	@ (800a05c <prvCheckTasksWaitingTermination+0x58>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	3b01      	subs	r3, #1
 800a032:	4a0a      	ldr	r2, [pc, #40]	@ (800a05c <prvCheckTasksWaitingTermination+0x58>)
 800a034:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800a036:	f000 ffb7 	bl	800afa8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f810 	bl	800a060 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a040:	4b06      	ldr	r3, [pc, #24]	@ (800a05c <prvCheckTasksWaitingTermination+0x58>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1e1      	bne.n	800a00c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800a048:	bf00      	nop
 800a04a:	bf00      	nop
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	200016a8 	.word	0x200016a8
 800a058:	200016d4 	.word	0x200016d4
 800a05c:	200016bc 	.word	0x200016bc

0800a060 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a06c:	4618      	mov	r0, r3
 800a06e:	f001 f987 	bl	800b380 <vPortFree>
            vPortFree( pxTCB );
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 f984 	bl	800b380 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a078:	bf00      	nop
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a080:	b480      	push	{r7}
 800a082:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a084:	4b0a      	ldr	r3, [pc, #40]	@ (800a0b0 <prvResetNextTaskUnblockTime+0x30>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d104      	bne.n	800a098 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a08e:	4b09      	ldr	r3, [pc, #36]	@ (800a0b4 <prvResetNextTaskUnblockTime+0x34>)
 800a090:	f04f 32ff 	mov.w	r2, #4294967295
 800a094:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a096:	e005      	b.n	800a0a4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a098:	4b05      	ldr	r3, [pc, #20]	@ (800a0b0 <prvResetNextTaskUnblockTime+0x30>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a04      	ldr	r2, [pc, #16]	@ (800a0b4 <prvResetNextTaskUnblockTime+0x34>)
 800a0a2:	6013      	str	r3, [r2, #0]
}
 800a0a4:	bf00      	nop
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	2000168c 	.word	0x2000168c
 800a0b4:	200016f4 	.word	0x200016f4

0800a0b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800a0be:	4b0d      	ldr	r3, [pc, #52]	@ (800a0f4 <xTaskGetSchedulerState+0x3c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d102      	bne.n	800a0cc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	607b      	str	r3, [r7, #4]
 800a0ca:	e008      	b.n	800a0de <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a0cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a0f8 <xTaskGetSchedulerState+0x40>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	607b      	str	r3, [r7, #4]
 800a0d8:	e001      	b.n	800a0de <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	20f5      	movs	r0, #245	@ 0xf5
 800a0e4:	f002 fc3a 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800a0e8:	687b      	ldr	r3, [r7, #4]
    }
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	200016e0 	.word	0x200016e0
 800a0f8:	200016fc 	.word	0x200016fc

0800a0fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b088      	sub	sp, #32
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800a108:	2300      	movs	r3, #0
 800a10a:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f000 8094 	beq.w	800a23c <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800a114:	4b4e      	ldr	r3, [pc, #312]	@ (800a250 <xTaskPriorityDisinherit+0x154>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d00b      	beq.n	800a136 <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	613b      	str	r3, [r7, #16]
}
 800a130:	bf00      	nop
 800a132:	bf00      	nop
 800a134:	e7fd      	b.n	800a132 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10b      	bne.n	800a156 <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	60fb      	str	r3, [r7, #12]
}
 800a150:	bf00      	nop
 800a152:	bf00      	nop
 800a154:	e7fd      	b.n	800a152 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a15a:	1e5a      	subs	r2, r3, #1
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a168:	429a      	cmp	r2, r3
 800a16a:	d067      	beq.n	800a23c <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a170:	2b00      	cmp	r3, #0
 800a172:	d163      	bne.n	800a23c <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	3304      	adds	r3, #4
 800a178:	4618      	mov	r0, r3
 800a17a:	f7fe f971 	bl	8008460 <uxListRemove>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10a      	bne.n	800a19a <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a188:	2201      	movs	r2, #1
 800a18a:	fa02 f303 	lsl.w	r3, r2, r3
 800a18e:	43da      	mvns	r2, r3
 800a190:	4b30      	ldr	r3, [pc, #192]	@ (800a254 <xTaskPriorityDisinherit+0x158>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4013      	ands	r3, r2
 800a196:	4a2f      	ldr	r2, [pc, #188]	@ (800a254 <xTaskPriorityDisinherit+0x158>)
 800a198:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a6:	f1c3 0205 	rsb	r2, r3, #5
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f002 fccb 	bl	800cb4c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	409a      	lsls	r2, r3
 800a1be:	4b25      	ldr	r3, [pc, #148]	@ (800a254 <xTaskPriorityDisinherit+0x158>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	4a23      	ldr	r2, [pc, #140]	@ (800a254 <xTaskPriorityDisinherit+0x158>)
 800a1c6:	6013      	str	r3, [r2, #0]
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1cc:	4922      	ldr	r1, [pc, #136]	@ (800a258 <xTaskPriorityDisinherit+0x15c>)
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	440b      	add	r3, r1
 800a1d8:	3304      	adds	r3, #4
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	617b      	str	r3, [r7, #20]
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	697a      	ldr	r2, [r7, #20]
 800a1e2:	609a      	str	r2, [r3, #8]
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	689a      	ldr	r2, [r3, #8]
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	60da      	str	r2, [r3, #12]
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	3204      	adds	r2, #4
 800a1f4:	605a      	str	r2, [r3, #4]
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	1d1a      	adds	r2, r3, #4
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	609a      	str	r2, [r3, #8]
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a202:	4613      	mov	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	4413      	add	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4a13      	ldr	r2, [pc, #76]	@ (800a258 <xTaskPriorityDisinherit+0x15c>)
 800a20c:	441a      	add	r2, r3
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	615a      	str	r2, [r3, #20]
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a216:	4910      	ldr	r1, [pc, #64]	@ (800a258 <xTaskPriorityDisinherit+0x15c>)
 800a218:	4613      	mov	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	440b      	add	r3, r1
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	69ba      	ldr	r2, [r7, #24]
 800a226:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a228:	1c59      	adds	r1, r3, #1
 800a22a:	480b      	ldr	r0, [pc, #44]	@ (800a258 <xTaskPriorityDisinherit+0x15c>)
 800a22c:	4613      	mov	r3, r2
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4403      	add	r3, r0
 800a236:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800a238:	2301      	movs	r3, #1
 800a23a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	4619      	mov	r1, r3
 800a240:	20f7      	movs	r0, #247	@ 0xf7
 800a242:	f002 fb8b 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800a246:	69fb      	ldr	r3, [r7, #28]
    }
 800a248:	4618      	mov	r0, r3
 800a24a:	3720      	adds	r7, #32
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	200015fc 	.word	0x200015fc
 800a254:	200016dc 	.word	0x200016dc
 800a258:	20001600 	.word	0x20001600

0800a25c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
 800a268:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 800a26a:	2300      	movs	r3, #0
 800a26c:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00b      	beq.n	800a28c <xTaskGenericNotifyWait+0x30>
    __asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	613b      	str	r3, [r7, #16]
}
 800a286:	bf00      	nop
 800a288:	bf00      	nop
 800a28a:	e7fd      	b.n	800a288 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 800a28c:	f7ff f9c0 	bl	8009610 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 800a290:	f000 fe58 	bl	800af44 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800a294:	4b3b      	ldr	r3, [pc, #236]	@ (800a384 <xTaskGenericNotifyWait+0x128>)
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4413      	add	r3, r2
 800a29c:	3354      	adds	r3, #84	@ 0x54
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d018      	beq.n	800a2d8 <xTaskGenericNotifyWait+0x7c>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 800a2a6:	4b37      	ldr	r3, [pc, #220]	@ (800a384 <xTaskGenericNotifyWait+0x128>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	3214      	adds	r2, #20
 800a2ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	43d2      	mvns	r2, r2
 800a2b6:	4011      	ands	r1, r2
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	3214      	adds	r2, #20
 800a2bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 800a2c0:	4b30      	ldr	r3, [pc, #192]	@ (800a384 <xTaskGenericNotifyWait+0x128>)
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	3354      	adds	r3, #84	@ 0x54
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 800a2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <xTaskGenericNotifyWait+0x7c>
                    {
                        xShouldBlock = pdTRUE;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800a2d8:	f000 fe66 	bl	800afa8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d103      	bne.n	800a2ea <xTaskGenericNotifyWait+0x8e>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2e6:	f000 f985 	bl	800a5f4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800a2ea:	f7ff f99f 	bl	800962c <xTaskResumeAll>
 800a2ee:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d10a      	bne.n	800a30c <xTaskGenericNotifyWait+0xb0>
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d107      	bne.n	800a30c <xTaskGenericNotifyWait+0xb0>
        {
            taskYIELD_WITHIN_API();
 800a2fc:	4b22      	ldr	r3, [pc, #136]	@ (800a388 <xTaskGenericNotifyWait+0x12c>)
 800a2fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800a30c:	f000 fe1a 	bl	800af44 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d007      	beq.n	800a326 <xTaskGenericNotifyWait+0xca>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800a316:	4b1b      	ldr	r3, [pc, #108]	@ (800a384 <xTaskGenericNotifyWait+0x128>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	3214      	adds	r2, #20
 800a31e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800a326:	4b17      	ldr	r3, [pc, #92]	@ (800a384 <xTaskGenericNotifyWait+0x128>)
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	4413      	add	r3, r2
 800a32e:	3354      	adds	r3, #84	@ 0x54
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	2b02      	cmp	r3, #2
 800a336:	d002      	beq.n	800a33e <xTaskGenericNotifyWait+0xe2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800a338:	2300      	movs	r3, #0
 800a33a:	61fb      	str	r3, [r7, #28]
 800a33c:	e00e      	b.n	800a35c <xTaskGenericNotifyWait+0x100>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 800a33e:	4b11      	ldr	r3, [pc, #68]	@ (800a384 <xTaskGenericNotifyWait+0x128>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	3214      	adds	r2, #20
 800a346:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	43d2      	mvns	r2, r2
 800a34e:	4011      	ands	r1, r2
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	3214      	adds	r2, #20
 800a354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800a358:	2301      	movs	r3, #1
 800a35a:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 800a35c:	4b09      	ldr	r3, [pc, #36]	@ (800a384 <xTaskGenericNotifyWait+0x128>)
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	4413      	add	r3, r2
 800a364:	3354      	adds	r3, #84	@ 0x54
 800a366:	2200      	movs	r2, #0
 800a368:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800a36a:	f000 fe1d 	bl	800afa8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	4619      	mov	r1, r3
 800a372:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a376:	f002 faf1 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800a37a:	69fb      	ldr	r3, [r7, #28]
    }
 800a37c:	4618      	mov	r0, r3
 800a37e:	3720      	adds	r7, #32
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	200015fc 	.word	0x200015fc
 800a388:	e000ed04 	.word	0xe000ed04

0800a38c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08e      	sub	sp, #56	@ 0x38
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
 800a398:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800a39a:	2301      	movs	r3, #1
 800a39c:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00b      	beq.n	800a3bc <xTaskGenericNotify+0x30>
    __asm volatile
 800a3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a8:	f383 8811 	msr	BASEPRI, r3
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	623b      	str	r3, [r7, #32]
}
 800a3b6:	bf00      	nop
 800a3b8:	bf00      	nop
 800a3ba:	e7fd      	b.n	800a3b8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10b      	bne.n	800a3da <xTaskGenericNotify+0x4e>
    __asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	61fb      	str	r3, [r7, #28]
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop
 800a3d8:	e7fd      	b.n	800a3d6 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 800a3de:	f000 fdb1 	bl	800af44 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800a3e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d006      	beq.n	800a3f6 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	3214      	adds	r2, #20
 800a3ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a3f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3f4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800a3f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	3354      	adds	r3, #84	@ 0x54
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800a404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	4413      	add	r3, r2
 800a40a:	3354      	adds	r3, #84	@ 0x54
 800a40c:	2202      	movs	r2, #2
 800a40e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800a410:	78fb      	ldrb	r3, [r7, #3]
 800a412:	2b04      	cmp	r3, #4
 800a414:	d83b      	bhi.n	800a48e <xTaskGenericNotify+0x102>
 800a416:	a201      	add	r2, pc, #4	@ (adr r2, 800a41c <xTaskGenericNotify+0x90>)
 800a418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41c:	0800a4af 	.word	0x0800a4af
 800a420:	0800a431 	.word	0x0800a431
 800a424:	0800a44d 	.word	0x0800a44d
 800a428:	0800a465 	.word	0x0800a465
 800a42c:	0800a473 	.word	0x0800a473
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800a430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	3214      	adds	r2, #20
 800a436:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	ea42 0103 	orr.w	r1, r2, r3
 800a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	3214      	adds	r2, #20
 800a446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a44a:	e033      	b.n	800a4b4 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800a44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	3214      	adds	r2, #20
 800a452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a456:	1c59      	adds	r1, r3, #1
 800a458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	3214      	adds	r2, #20
 800a45e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a462:	e027      	b.n	800a4b4 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800a464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	3214      	adds	r2, #20
 800a46a:	6879      	ldr	r1, [r7, #4]
 800a46c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a470:	e020      	b.n	800a4b4 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a476:	2b02      	cmp	r3, #2
 800a478:	d006      	beq.n	800a488 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800a47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	3214      	adds	r2, #20
 800a480:	6879      	ldr	r1, [r7, #4]
 800a482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800a486:	e015      	b.n	800a4b4 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 800a488:	2300      	movs	r3, #0
 800a48a:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800a48c:	e012      	b.n	800a4b4 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800a48e:	4b54      	ldr	r3, [pc, #336]	@ (800a5e0 <xTaskGenericNotify+0x254>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00d      	beq.n	800a4b2 <xTaskGenericNotify+0x126>
    __asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	61bb      	str	r3, [r7, #24]
}
 800a4a8:	bf00      	nop
 800a4aa:	bf00      	nop
 800a4ac:	e7fd      	b.n	800a4aa <xTaskGenericNotify+0x11e>
                    break;
 800a4ae:	bf00      	nop
 800a4b0:	e000      	b.n	800a4b4 <xTaskGenericNotify+0x128>

                    break;
 800a4b2:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a4b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	f040 8083 	bne.w	800a5c4 <xTaskGenericNotify+0x238>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c0:	695b      	ldr	r3, [r3, #20]
 800a4c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ca:	68d2      	ldr	r2, [r2, #12]
 800a4cc:	609a      	str	r2, [r3, #8]
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4d4:	6892      	ldr	r2, [r2, #8]
 800a4d6:	605a      	str	r2, [r3, #4]
 800a4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4de:	3304      	adds	r3, #4
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d103      	bne.n	800a4ec <xTaskGenericNotify+0x160>
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e6:	68da      	ldr	r2, [r3, #12]
 800a4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ea:	605a      	str	r2, [r3, #4]
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	615a      	str	r2, [r3, #20]
 800a4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	1e5a      	subs	r2, r3, #1
 800a4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fa:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fe:	4618      	mov	r0, r3
 800a500:	f002 fb24 	bl	800cb4c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a508:	2201      	movs	r2, #1
 800a50a:	409a      	lsls	r2, r3
 800a50c:	4b35      	ldr	r3, [pc, #212]	@ (800a5e4 <xTaskGenericNotify+0x258>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4313      	orrs	r3, r2
 800a512:	4a34      	ldr	r2, [pc, #208]	@ (800a5e4 <xTaskGenericNotify+0x258>)
 800a514:	6013      	str	r3, [r2, #0]
 800a516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a51a:	4933      	ldr	r1, [pc, #204]	@ (800a5e8 <xTaskGenericNotify+0x25c>)
 800a51c:	4613      	mov	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	440b      	add	r3, r1
 800a526:	3304      	adds	r3, #4
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a530:	609a      	str	r2, [r3, #8]
 800a532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a534:	689a      	ldr	r2, [r3, #8]
 800a536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a538:	60da      	str	r2, [r3, #12]
 800a53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a540:	3204      	adds	r2, #4
 800a542:	605a      	str	r2, [r3, #4]
 800a544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a546:	1d1a      	adds	r2, r3, #4
 800a548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54a:	609a      	str	r2, [r3, #8]
 800a54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a550:	4613      	mov	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4a23      	ldr	r2, [pc, #140]	@ (800a5e8 <xTaskGenericNotify+0x25c>)
 800a55a:	441a      	add	r2, r3
 800a55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55e:	615a      	str	r2, [r3, #20]
 800a560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a564:	4920      	ldr	r1, [pc, #128]	@ (800a5e8 <xTaskGenericNotify+0x25c>)
 800a566:	4613      	mov	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	440b      	add	r3, r1
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a574:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a576:	1c59      	adds	r1, r3, #1
 800a578:	481b      	ldr	r0, [pc, #108]	@ (800a5e8 <xTaskGenericNotify+0x25c>)
 800a57a:	4613      	mov	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4403      	add	r3, r0
 800a584:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00b      	beq.n	800a5a6 <xTaskGenericNotify+0x21a>
    __asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	617b      	str	r3, [r7, #20]
}
 800a5a0:	bf00      	nop
 800a5a2:	bf00      	nop
 800a5a4:	e7fd      	b.n	800a5a2 <xTaskGenericNotify+0x216>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 800a5a6:	4b11      	ldr	r3, [pc, #68]	@ (800a5ec <xTaskGenericNotify+0x260>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d207      	bcs.n	800a5c4 <xTaskGenericNotify+0x238>
 800a5b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a5f0 <xTaskGenericNotify+0x264>)
 800a5b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a5c4:	f000 fcf0 	bl	800afa8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );
 800a5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	f240 1001 	movw	r0, #257	@ 0x101
 800a5d0:	f002 f9c4 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800a5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3738      	adds	r7, #56	@ 0x38
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	200016d8 	.word	0x200016d8
 800a5e4:	200016dc 	.word	0x200016dc
 800a5e8:	20001600 	.word	0x20001600
 800a5ec:	200015fc 	.word	0x200015fc
 800a5f0:	e000ed04 	.word	0xe000ed04

0800a5f4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b088      	sub	sp, #32
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800a5fe:	4b3d      	ldr	r3, [pc, #244]	@ (800a6f4 <prvAddCurrentTaskToDelayedList+0x100>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800a604:	4b3c      	ldr	r3, [pc, #240]	@ (800a6f8 <prvAddCurrentTaskToDelayedList+0x104>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800a60a:	4b3c      	ldr	r3, [pc, #240]	@ (800a6fc <prvAddCurrentTaskToDelayedList+0x108>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a610:	4b3b      	ldr	r3, [pc, #236]	@ (800a700 <prvAddCurrentTaskToDelayedList+0x10c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3304      	adds	r3, #4
 800a616:	4618      	mov	r0, r3
 800a618:	f7fd ff22 	bl	8008460 <uxListRemove>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10b      	bne.n	800a63a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a622:	4b37      	ldr	r3, [pc, #220]	@ (800a700 <prvAddCurrentTaskToDelayedList+0x10c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a628:	2201      	movs	r2, #1
 800a62a:	fa02 f303 	lsl.w	r3, r2, r3
 800a62e:	43da      	mvns	r2, r3
 800a630:	4b34      	ldr	r3, [pc, #208]	@ (800a704 <prvAddCurrentTaskToDelayedList+0x110>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4013      	ands	r3, r2
 800a636:	4a33      	ldr	r2, [pc, #204]	@ (800a704 <prvAddCurrentTaskToDelayedList+0x110>)
 800a638:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a640:	d124      	bne.n	800a68c <prvAddCurrentTaskToDelayedList+0x98>
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d021      	beq.n	800a68c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a648:	4b2f      	ldr	r3, [pc, #188]	@ (800a708 <prvAddCurrentTaskToDelayedList+0x114>)
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	613b      	str	r3, [r7, #16]
 800a64e:	4b2c      	ldr	r3, [pc, #176]	@ (800a700 <prvAddCurrentTaskToDelayedList+0x10c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	609a      	str	r2, [r3, #8]
 800a656:	4b2a      	ldr	r3, [pc, #168]	@ (800a700 <prvAddCurrentTaskToDelayedList+0x10c>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	6892      	ldr	r2, [r2, #8]
 800a65e:	60da      	str	r2, [r3, #12]
 800a660:	4b27      	ldr	r3, [pc, #156]	@ (800a700 <prvAddCurrentTaskToDelayedList+0x10c>)
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	3204      	adds	r2, #4
 800a66a:	605a      	str	r2, [r3, #4]
 800a66c:	4b24      	ldr	r3, [pc, #144]	@ (800a700 <prvAddCurrentTaskToDelayedList+0x10c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	1d1a      	adds	r2, r3, #4
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	609a      	str	r2, [r3, #8]
 800a676:	4b22      	ldr	r3, [pc, #136]	@ (800a700 <prvAddCurrentTaskToDelayedList+0x10c>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a23      	ldr	r2, [pc, #140]	@ (800a708 <prvAddCurrentTaskToDelayedList+0x114>)
 800a67c:	615a      	str	r2, [r3, #20]
 800a67e:	4b22      	ldr	r3, [pc, #136]	@ (800a708 <prvAddCurrentTaskToDelayedList+0x114>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3301      	adds	r3, #1
 800a684:	4a20      	ldr	r2, [pc, #128]	@ (800a708 <prvAddCurrentTaskToDelayedList+0x114>)
 800a686:	6013      	str	r3, [r2, #0]
 800a688:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800a68a:	e02e      	b.n	800a6ea <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800a68c:	69fa      	ldr	r2, [r7, #28]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4413      	add	r3, r2
 800a692:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a694:	4b1a      	ldr	r3, [pc, #104]	@ (800a700 <prvAddCurrentTaskToDelayedList+0x10c>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d20d      	bcs.n	800a6c0 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800a6a4:	4b16      	ldr	r3, [pc, #88]	@ (800a700 <prvAddCurrentTaskToDelayedList+0x10c>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2104      	movs	r1, #4
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f002 fa90 	bl	800cbd0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800a6b0:	4b13      	ldr	r3, [pc, #76]	@ (800a700 <prvAddCurrentTaskToDelayedList+0x10c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6978      	ldr	r0, [r7, #20]
 800a6ba:	f7fd fe96 	bl	80083ea <vListInsert>
}
 800a6be:	e014      	b.n	800a6ea <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 800a6c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a700 <prvAddCurrentTaskToDelayedList+0x10c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2104      	movs	r1, #4
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f002 fa82 	bl	800cbd0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800a6cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a700 <prvAddCurrentTaskToDelayedList+0x10c>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	69b8      	ldr	r0, [r7, #24]
 800a6d6:	f7fd fe88 	bl	80083ea <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800a6da:	4b0c      	ldr	r3, [pc, #48]	@ (800a70c <prvAddCurrentTaskToDelayedList+0x118>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d202      	bcs.n	800a6ea <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 800a6e4:	4a09      	ldr	r2, [pc, #36]	@ (800a70c <prvAddCurrentTaskToDelayedList+0x118>)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6013      	str	r3, [r2, #0]
}
 800a6ea:	bf00      	nop
 800a6ec:	3720      	adds	r7, #32
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	200016d8 	.word	0x200016d8
 800a6f8:	2000168c 	.word	0x2000168c
 800a6fc:	20001690 	.word	0x20001690
 800a700:	200015fc 	.word	0x200015fc
 800a704:	200016dc 	.word	0x200016dc
 800a708:	200016c0 	.word	0x200016c0
 800a70c:	200016f4 	.word	0x200016f4

0800a710 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800a716:	2300      	movs	r3, #0
 800a718:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800a71a:	f000 fa5b 	bl	800abd4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800a71e:	4b15      	ldr	r3, [pc, #84]	@ (800a774 <xTimerCreateTimerTask+0x64>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00b      	beq.n	800a73e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800a726:	4b14      	ldr	r3, [pc, #80]	@ (800a778 <xTimerCreateTimerTask+0x68>)
 800a728:	9301      	str	r3, [sp, #4]
 800a72a:	2302      	movs	r3, #2
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	2300      	movs	r3, #0
 800a730:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a734:	4911      	ldr	r1, [pc, #68]	@ (800a77c <xTimerCreateTimerTask+0x6c>)
 800a736:	4812      	ldr	r0, [pc, #72]	@ (800a780 <xTimerCreateTimerTask+0x70>)
 800a738:	f7fe fba3 	bl	8008e82 <xTaskCreate>
 800a73c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10b      	bne.n	800a75c <xTimerCreateTimerTask+0x4c>
    __asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	603b      	str	r3, [r7, #0]
}
 800a756:	bf00      	nop
 800a758:	bf00      	nop
 800a75a:	e7fd      	b.n	800a758 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4619      	mov	r1, r3
 800a760:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800a764:	f002 f8fa 	bl	800c95c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800a768:	687b      	ldr	r3, [r7, #4]
    }
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20001730 	.word	0x20001730
 800a778:	20001734 	.word	0x20001734
 800a77c:	0800e2c8 	.word	0x0800e2c8
 800a780:	0800a829 	.word	0x0800a829

0800a784 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a790:	e008      	b.n	800a7a4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	4413      	add	r3, r2
 800a79a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6a1b      	ldr	r3, [r3, #32]
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	699a      	ldr	r2, [r3, #24]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	18d1      	adds	r1, r2, r3
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 f8df 	bl	800a974 <prvInsertTimerInActiveList>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1ea      	bne.n	800a792 <prvReloadTimer+0xe>
        }
    }
 800a7bc:	bf00      	nop
 800a7be:	bf00      	nop
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
	...

0800a7c8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7d2:	4b14      	ldr	r3, [pc, #80]	@ (800a824 <prvProcessExpiredTimer+0x5c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fd fe3d 	bl	8008460 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d005      	beq.n	800a800 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	6879      	ldr	r1, [r7, #4]
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f7ff ffc3 	bl	800a784 <prvReloadTimer>
 800a7fe:	e008      	b.n	800a812 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a806:	f023 0301 	bic.w	r3, r3, #1
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	4798      	blx	r3
    }
 800a81a:	bf00      	nop
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	20001728 	.word	0x20001728

0800a828 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a830:	f107 0308 	add.w	r3, r7, #8
 800a834:	4618      	mov	r0, r3
 800a836:	f000 f859 	bl	800a8ec <prvGetNextExpireTime>
 800a83a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	4619      	mov	r1, r3
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f000 f805 	bl	800a850 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a846:	f000 f8d7 	bl	800a9f8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a84a:	bf00      	nop
 800a84c:	e7f0      	b.n	800a830 <prvTimerTask+0x8>
	...

0800a850 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a85a:	f7fe fed9 	bl	8009610 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a85e:	f107 0308 	add.w	r3, r7, #8
 800a862:	4618      	mov	r0, r3
 800a864:	f000 f866 	bl	800a934 <prvSampleTimeNow>
 800a868:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d130      	bne.n	800a8d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d10a      	bne.n	800a88c <prvProcessTimerOrBlockTask+0x3c>
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d806      	bhi.n	800a88c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a87e:	f7fe fed5 	bl	800962c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a882:	68f9      	ldr	r1, [r7, #12]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff ff9f 	bl	800a7c8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a88a:	e024      	b.n	800a8d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d008      	beq.n	800a8a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a892:	4b13      	ldr	r3, [pc, #76]	@ (800a8e0 <prvProcessTimerOrBlockTask+0x90>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d101      	bne.n	800a8a0 <prvProcessTimerOrBlockTask+0x50>
 800a89c:	2301      	movs	r3, #1
 800a89e:	e000      	b.n	800a8a2 <prvProcessTimerOrBlockTask+0x52>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a8a4:	4b0f      	ldr	r3, [pc, #60]	@ (800a8e4 <prvProcessTimerOrBlockTask+0x94>)
 800a8a6:	6818      	ldr	r0, [r3, #0]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	f7fe fa73 	bl	8008d9c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a8b6:	f7fe feb9 	bl	800962c <xTaskResumeAll>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10a      	bne.n	800a8d6 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800a8c0:	4b09      	ldr	r3, [pc, #36]	@ (800a8e8 <prvProcessTimerOrBlockTask+0x98>)
 800a8c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8c6:	601a      	str	r2, [r3, #0]
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	f3bf 8f6f 	isb	sy
    }
 800a8d0:	e001      	b.n	800a8d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800a8d2:	f7fe feab 	bl	800962c <xTaskResumeAll>
    }
 800a8d6:	bf00      	nop
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	2000172c 	.word	0x2000172c
 800a8e4:	20001730 	.word	0x20001730
 800a8e8:	e000ed04 	.word	0xe000ed04

0800a8ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a8f4:	4b0e      	ldr	r3, [pc, #56]	@ (800a930 <prvGetNextExpireTime+0x44>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <prvGetNextExpireTime+0x16>
 800a8fe:	2201      	movs	r2, #1
 800a900:	e000      	b.n	800a904 <prvGetNextExpireTime+0x18>
 800a902:	2200      	movs	r2, #0
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d105      	bne.n	800a91c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a910:	4b07      	ldr	r3, [pc, #28]	@ (800a930 <prvGetNextExpireTime+0x44>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	60fb      	str	r3, [r7, #12]
 800a91a:	e001      	b.n	800a920 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800a920:	68fb      	ldr	r3, [r7, #12]
    }
 800a922:	4618      	mov	r0, r3
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	20001728 	.word	0x20001728

0800a934 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800a93c:	f7fe ff88 	bl	8009850 <xTaskGetTickCount>
 800a940:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800a942:	4b0b      	ldr	r3, [pc, #44]	@ (800a970 <prvSampleTimeNow+0x3c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d205      	bcs.n	800a958 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800a94c:	f000 f91c 	bl	800ab88 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	e002      	b.n	800a95e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a95e:	4a04      	ldr	r2, [pc, #16]	@ (800a970 <prvSampleTimeNow+0x3c>)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a964:	68fb      	ldr	r3, [r7, #12]
    }
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	20001738 	.word	0x20001738

0800a974 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
 800a980:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800a982:	2300      	movs	r3, #0
 800a984:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	429a      	cmp	r2, r3
 800a998:	d812      	bhi.n	800a9c0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	1ad2      	subs	r2, r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d302      	bcc.n	800a9ae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	617b      	str	r3, [r7, #20]
 800a9ac:	e01b      	b.n	800a9e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a9ae:	4b10      	ldr	r3, [pc, #64]	@ (800a9f0 <prvInsertTimerInActiveList+0x7c>)
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	3304      	adds	r3, #4
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	4610      	mov	r0, r2
 800a9ba:	f7fd fd16 	bl	80083ea <vListInsert>
 800a9be:	e012      	b.n	800a9e6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d206      	bcs.n	800a9d6 <prvInsertTimerInActiveList+0x62>
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d302      	bcc.n	800a9d6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	617b      	str	r3, [r7, #20]
 800a9d4:	e007      	b.n	800a9e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9d6:	4b07      	ldr	r3, [pc, #28]	@ (800a9f4 <prvInsertTimerInActiveList+0x80>)
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	3304      	adds	r3, #4
 800a9de:	4619      	mov	r1, r3
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	f7fd fd02 	bl	80083ea <vListInsert>
            }
        }

        return xProcessTimerNow;
 800a9e6:	697b      	ldr	r3, [r7, #20]
    }
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3718      	adds	r7, #24
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	2000172c 	.word	0x2000172c
 800a9f4:	20001728 	.word	0x20001728

0800a9f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b088      	sub	sp, #32
 800a9fc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800a9fe:	f107 0308 	add.w	r3, r7, #8
 800aa02:	2200      	movs	r2, #0
 800aa04:	601a      	str	r2, [r3, #0]
 800aa06:	605a      	str	r2, [r3, #4]
 800aa08:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800aa0a:	e0a9      	b.n	800ab60 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f2c0 80a6 	blt.w	800ab60 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	695b      	ldr	r3, [r3, #20]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d004      	beq.n	800aa2a <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	3304      	adds	r3, #4
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fd fd1b 	bl	8008460 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa2a:	1d3b      	adds	r3, r7, #4
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff ff81 	bl	800a934 <prvSampleTimeNow>
 800aa32:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	2b08      	cmp	r3, #8
 800aa3a:	f200 808e 	bhi.w	800ab5a <prvProcessReceivedCommands+0x162>
 800aa3e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa44 <prvProcessReceivedCommands+0x4c>)
 800aa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa44:	0800aa69 	.word	0x0800aa69
 800aa48:	0800aa69 	.word	0x0800aa69
 800aa4c:	0800aad1 	.word	0x0800aad1
 800aa50:	0800aae5 	.word	0x0800aae5
 800aa54:	0800ab31 	.word	0x0800ab31
 800aa58:	0800aa69 	.word	0x0800aa69
 800aa5c:	0800aa69 	.word	0x0800aa69
 800aa60:	0800aad1 	.word	0x0800aad1
 800aa64:	0800aae5 	.word	0x0800aae5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa6e:	f043 0301 	orr.w	r3, r3, #1
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	18d1      	adds	r1, r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	69ba      	ldr	r2, [r7, #24]
 800aa86:	69f8      	ldr	r0, [r7, #28]
 800aa88:	f7ff ff74 	bl	800a974 <prvInsertTimerInActiveList>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d065      	beq.n	800ab5e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa98:	f003 0304 	and.w	r3, r3, #4
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d009      	beq.n	800aab4 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	699b      	ldr	r3, [r3, #24]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	69ba      	ldr	r2, [r7, #24]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	69f8      	ldr	r0, [r7, #28]
 800aaae:	f7ff fe69 	bl	800a784 <prvReloadTimer>
 800aab2:	e008      	b.n	800aac6 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaba:	f023 0301 	bic.w	r3, r3, #1
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	69f8      	ldr	r0, [r7, #28]
 800aacc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800aace:	e046      	b.n	800ab5e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aad6:	f023 0301 	bic.w	r3, r3, #1
 800aada:	b2da      	uxtb	r2, r3
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800aae2:	e03d      	b.n	800ab60 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaea:	f043 0301 	orr.w	r3, r3, #1
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10b      	bne.n	800ab1c <prvProcessReceivedCommands+0x124>
    __asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	617b      	str	r3, [r7, #20]
}
 800ab16:	bf00      	nop
 800ab18:	bf00      	nop
 800ab1a:	e7fd      	b.n	800ab18 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	699a      	ldr	r2, [r3, #24]
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	18d1      	adds	r1, r2, r3
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	69ba      	ldr	r2, [r7, #24]
 800ab28:	69f8      	ldr	r0, [r7, #28]
 800ab2a:	f7ff ff23 	bl	800a974 <prvInsertTimerInActiveList>
                        break;
 800ab2e:	e017      	b.n	800ab60 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab36:	f003 0302 	and.w	r3, r3, #2
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d103      	bne.n	800ab46 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 800ab3e:	69f8      	ldr	r0, [r7, #28]
 800ab40:	f000 fc1e 	bl	800b380 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800ab44:	e00c      	b.n	800ab60 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab4c:	f023 0301 	bic.w	r3, r3, #1
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800ab58:	e002      	b.n	800ab60 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 800ab5a:	bf00      	nop
 800ab5c:	e000      	b.n	800ab60 <prvProcessReceivedCommands+0x168>
                        break;
 800ab5e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800ab60:	4b08      	ldr	r3, [pc, #32]	@ (800ab84 <prvProcessReceivedCommands+0x18c>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f107 0108 	add.w	r1, r7, #8
 800ab68:	2200      	movs	r2, #0
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fd fec8 	bl	8008900 <xQueueReceive>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f47f af4a 	bne.w	800aa0c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800ab78:	bf00      	nop
 800ab7a:	bf00      	nop
 800ab7c:	3720      	adds	r7, #32
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20001730 	.word	0x20001730

0800ab88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab8e:	e009      	b.n	800aba4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab90:	4b0e      	ldr	r3, [pc, #56]	@ (800abcc <prvSwitchTimerLists+0x44>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800ab9a:	f04f 31ff 	mov.w	r1, #4294967295
 800ab9e:	6838      	ldr	r0, [r7, #0]
 800aba0:	f7ff fe12 	bl	800a7c8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aba4:	4b09      	ldr	r3, [pc, #36]	@ (800abcc <prvSwitchTimerLists+0x44>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1f0      	bne.n	800ab90 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800abae:	4b07      	ldr	r3, [pc, #28]	@ (800abcc <prvSwitchTimerLists+0x44>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800abb4:	4b06      	ldr	r3, [pc, #24]	@ (800abd0 <prvSwitchTimerLists+0x48>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a04      	ldr	r2, [pc, #16]	@ (800abcc <prvSwitchTimerLists+0x44>)
 800abba:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800abbc:	4a04      	ldr	r2, [pc, #16]	@ (800abd0 <prvSwitchTimerLists+0x48>)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6013      	str	r3, [r2, #0]
    }
 800abc2:	bf00      	nop
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	20001728 	.word	0x20001728
 800abd0:	2000172c 	.word	0x2000172c

0800abd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800abd4:	b580      	push	{r7, lr}
 800abd6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800abd8:	f000 f9b4 	bl	800af44 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800abdc:	4b12      	ldr	r3, [pc, #72]	@ (800ac28 <prvCheckForValidListAndQueue+0x54>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d11d      	bne.n	800ac20 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800abe4:	4811      	ldr	r0, [pc, #68]	@ (800ac2c <prvCheckForValidListAndQueue+0x58>)
 800abe6:	f7fd fba9 	bl	800833c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800abea:	4811      	ldr	r0, [pc, #68]	@ (800ac30 <prvCheckForValidListAndQueue+0x5c>)
 800abec:	f7fd fba6 	bl	800833c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800abf0:	4b10      	ldr	r3, [pc, #64]	@ (800ac34 <prvCheckForValidListAndQueue+0x60>)
 800abf2:	4a0e      	ldr	r2, [pc, #56]	@ (800ac2c <prvCheckForValidListAndQueue+0x58>)
 800abf4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800abf6:	4b10      	ldr	r3, [pc, #64]	@ (800ac38 <prvCheckForValidListAndQueue+0x64>)
 800abf8:	4a0d      	ldr	r2, [pc, #52]	@ (800ac30 <prvCheckForValidListAndQueue+0x5c>)
 800abfa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 800abfc:	2200      	movs	r2, #0
 800abfe:	210c      	movs	r1, #12
 800ac00:	200a      	movs	r0, #10
 800ac02:	f7fd fcf3 	bl	80085ec <xQueueGenericCreate>
 800ac06:	4603      	mov	r3, r0
 800ac08:	4a07      	ldr	r2, [pc, #28]	@ (800ac28 <prvCheckForValidListAndQueue+0x54>)
 800ac0a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800ac0c:	4b06      	ldr	r3, [pc, #24]	@ (800ac28 <prvCheckForValidListAndQueue+0x54>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d005      	beq.n	800ac20 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac14:	4b04      	ldr	r3, [pc, #16]	@ (800ac28 <prvCheckForValidListAndQueue+0x54>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4908      	ldr	r1, [pc, #32]	@ (800ac3c <prvCheckForValidListAndQueue+0x68>)
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fe f86e 	bl	8008cfc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800ac20:	f000 f9c2 	bl	800afa8 <vPortExitCritical>
    }
 800ac24:	bf00      	nop
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	20001730 	.word	0x20001730
 800ac2c:	20001700 	.word	0x20001700
 800ac30:	20001714 	.word	0x20001714
 800ac34:	20001728 	.word	0x20001728
 800ac38:	2000172c 	.word	0x2000172c
 800ac3c:	0800e2d0 	.word	0x0800e2d0

0800ac40 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	3b04      	subs	r3, #4
 800ac50:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ac58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	3b04      	subs	r3, #4
 800ac5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	f023 0201 	bic.w	r2, r3, #1
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	3b04      	subs	r3, #4
 800ac6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800ac70:	4a0c      	ldr	r2, [pc, #48]	@ (800aca4 <pxPortInitialiseStack+0x64>)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	3b14      	subs	r3, #20
 800ac7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	3b04      	subs	r3, #4
 800ac86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f06f 0202 	mvn.w	r2, #2
 800ac8e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	3b20      	subs	r3, #32
 800ac94:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800ac96:	68fb      	ldr	r3, [r7, #12]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr
 800aca4:	0800aca9 	.word	0x0800aca9

0800aca8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800acb2:	4b13      	ldr	r3, [pc, #76]	@ (800ad00 <prvTaskExitError+0x58>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acba:	d00b      	beq.n	800acd4 <prvTaskExitError+0x2c>
    __asm volatile
 800acbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	60fb      	str	r3, [r7, #12]
}
 800acce:	bf00      	nop
 800acd0:	bf00      	nop
 800acd2:	e7fd      	b.n	800acd0 <prvTaskExitError+0x28>
    __asm volatile
 800acd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	60bb      	str	r3, [r7, #8]
}
 800ace6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800ace8:	bf00      	nop
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d0fc      	beq.n	800acea <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800acf0:	bf00      	nop
 800acf2:	bf00      	nop
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	20000028 	.word	0x20000028
	...

0800ad10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800ad10:	4b07      	ldr	r3, [pc, #28]	@ (800ad30 <pxCurrentTCBConst2>)
 800ad12:	6819      	ldr	r1, [r3, #0]
 800ad14:	6808      	ldr	r0, [r1, #0]
 800ad16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1a:	f380 8809 	msr	PSP, r0
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f04f 0000 	mov.w	r0, #0
 800ad26:	f380 8811 	msr	BASEPRI, r0
 800ad2a:	4770      	bx	lr
 800ad2c:	f3af 8000 	nop.w

0800ad30 <pxCurrentTCBConst2>:
 800ad30:	200015fc 	.word	0x200015fc
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 800ad34:	bf00      	nop
 800ad36:	bf00      	nop

0800ad38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800ad38:	4808      	ldr	r0, [pc, #32]	@ (800ad5c <prvPortStartFirstTask+0x24>)
 800ad3a:	6800      	ldr	r0, [r0, #0]
 800ad3c:	6800      	ldr	r0, [r0, #0]
 800ad3e:	f380 8808 	msr	MSP, r0
 800ad42:	f04f 0000 	mov.w	r0, #0
 800ad46:	f380 8814 	msr	CONTROL, r0
 800ad4a:	b662      	cpsie	i
 800ad4c:	b661      	cpsie	f
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	df00      	svc	0
 800ad58:	bf00      	nop
 800ad5a:	0000      	.short	0x0000
 800ad5c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 800ad60:	bf00      	nop
 800ad62:	bf00      	nop

0800ad64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b08c      	sub	sp, #48	@ 0x30
 800ad68:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad6a:	4b69      	ldr	r3, [pc, #420]	@ (800af10 <xPortStartScheduler+0x1ac>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a69      	ldr	r2, [pc, #420]	@ (800af14 <xPortStartScheduler+0x1b0>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d10b      	bne.n	800ad8c <xPortStartScheduler+0x28>
    __asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad86:	bf00      	nop
 800ad88:	bf00      	nop
 800ad8a:	e7fd      	b.n	800ad88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad8c:	4b60      	ldr	r3, [pc, #384]	@ (800af10 <xPortStartScheduler+0x1ac>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a61      	ldr	r2, [pc, #388]	@ (800af18 <xPortStartScheduler+0x1b4>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d10b      	bne.n	800adae <xPortStartScheduler+0x4a>
    __asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	623b      	str	r3, [r7, #32]
}
 800ada8:	bf00      	nop
 800adaa:	bf00      	nop
 800adac:	e7fd      	b.n	800adaa <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800adae:	4b5b      	ldr	r3, [pc, #364]	@ (800af1c <xPortStartScheduler+0x1b8>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 800adb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb6:	332c      	adds	r3, #44	@ 0x2c
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a59      	ldr	r2, [pc, #356]	@ (800af20 <xPortStartScheduler+0x1bc>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d00b      	beq.n	800add8 <xPortStartScheduler+0x74>
    __asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	61fb      	str	r3, [r7, #28]
}
 800add2:	bf00      	nop
 800add4:	bf00      	nop
 800add6:	e7fd      	b.n	800add4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800add8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adda:	3338      	adds	r3, #56	@ 0x38
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a51      	ldr	r2, [pc, #324]	@ (800af24 <xPortStartScheduler+0x1c0>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d00b      	beq.n	800adfc <xPortStartScheduler+0x98>
    __asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	61bb      	str	r3, [r7, #24]
}
 800adf6:	bf00      	nop
 800adf8:	bf00      	nop
 800adfa:	e7fd      	b.n	800adf8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae00:	4b49      	ldr	r3, [pc, #292]	@ (800af28 <xPortStartScheduler+0x1c4>)
 800ae02:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 800ae04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0e:	22ff      	movs	r2, #255	@ 0xff
 800ae10:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae1a:	79fb      	ldrb	r3, [r7, #7]
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	4b41      	ldr	r3, [pc, #260]	@ (800af2c <xPortStartScheduler+0x1c8>)
 800ae26:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800ae28:	4b40      	ldr	r3, [pc, #256]	@ (800af2c <xPortStartScheduler+0x1c8>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10b      	bne.n	800ae48 <xPortStartScheduler+0xe4>
    __asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	617b      	str	r3, [r7, #20]
}
 800ae42:	bf00      	nop
 800ae44:	bf00      	nop
 800ae46:	e7fd      	b.n	800ae44 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800ae48:	79fb      	ldrb	r3, [r7, #7]
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	43db      	mvns	r3, r3
 800ae4e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d013      	beq.n	800ae7e <xPortStartScheduler+0x11a>
    __asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	613b      	str	r3, [r7, #16]
}
 800ae68:	bf00      	nop
 800ae6a:	bf00      	nop
 800ae6c:	e7fd      	b.n	800ae6a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	3301      	adds	r3, #1
 800ae72:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae74:	79fb      	ldrb	r3, [r7, #7]
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae7e:	79fb      	ldrb	r3, [r7, #7]
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae86:	2b80      	cmp	r3, #128	@ 0x80
 800ae88:	d0f1      	beq.n	800ae6e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	2b08      	cmp	r3, #8
 800ae8e:	d103      	bne.n	800ae98 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800ae90:	4b27      	ldr	r3, [pc, #156]	@ (800af30 <xPortStartScheduler+0x1cc>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	e004      	b.n	800aea2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	f1c3 0307 	rsb	r3, r3, #7
 800ae9e:	4a24      	ldr	r2, [pc, #144]	@ (800af30 <xPortStartScheduler+0x1cc>)
 800aea0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aea2:	4b23      	ldr	r3, [pc, #140]	@ (800af30 <xPortStartScheduler+0x1cc>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	021b      	lsls	r3, r3, #8
 800aea8:	4a21      	ldr	r2, [pc, #132]	@ (800af30 <xPortStartScheduler+0x1cc>)
 800aeaa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aeac:	4b20      	ldr	r3, [pc, #128]	@ (800af30 <xPortStartScheduler+0x1cc>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aeb4:	4a1e      	ldr	r2, [pc, #120]	@ (800af30 <xPortStartScheduler+0x1cc>)
 800aeb6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
 800aeba:	b2da      	uxtb	r2, r3
 800aebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aebe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800aec0:	4b1c      	ldr	r3, [pc, #112]	@ (800af34 <xPortStartScheduler+0x1d0>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a1b      	ldr	r2, [pc, #108]	@ (800af34 <xPortStartScheduler+0x1d0>)
 800aec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aeca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800aecc:	4b19      	ldr	r3, [pc, #100]	@ (800af34 <xPortStartScheduler+0x1d0>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a18      	ldr	r2, [pc, #96]	@ (800af34 <xPortStartScheduler+0x1d0>)
 800aed2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aed6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800aed8:	4b17      	ldr	r3, [pc, #92]	@ (800af38 <xPortStartScheduler+0x1d4>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800aede:	f000 f8ed 	bl	800b0bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800aee2:	4b16      	ldr	r3, [pc, #88]	@ (800af3c <xPortStartScheduler+0x1d8>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800aee8:	f000 f90c 	bl	800b104 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aeec:	4b14      	ldr	r3, [pc, #80]	@ (800af40 <xPortStartScheduler+0x1dc>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a13      	ldr	r2, [pc, #76]	@ (800af40 <xPortStartScheduler+0x1dc>)
 800aef2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aef6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800aef8:	f7ff ff1e 	bl	800ad38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800aefc:	f7fe fddc 	bl	8009ab8 <vTaskSwitchContext>
    prvTaskExitError();
 800af00:	f7ff fed2 	bl	800aca8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3730      	adds	r7, #48	@ 0x30
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	e000ed00 	.word	0xe000ed00
 800af14:	410fc271 	.word	0x410fc271
 800af18:	410fc270 	.word	0x410fc270
 800af1c:	e000ed08 	.word	0xe000ed08
 800af20:	0800ad11 	.word	0x0800ad11
 800af24:	0800b001 	.word	0x0800b001
 800af28:	e000e400 	.word	0xe000e400
 800af2c:	2000173c 	.word	0x2000173c
 800af30:	20001740 	.word	0x20001740
 800af34:	e000ed20 	.word	0xe000ed20
 800af38:	e000ed1c 	.word	0xe000ed1c
 800af3c:	20000028 	.word	0x20000028
 800af40:	e000ef34 	.word	0xe000ef34

0800af44 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
    __asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	607b      	str	r3, [r7, #4]
}
 800af5c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800af5e:	4b10      	ldr	r3, [pc, #64]	@ (800afa0 <vPortEnterCritical+0x5c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3301      	adds	r3, #1
 800af64:	4a0e      	ldr	r2, [pc, #56]	@ (800afa0 <vPortEnterCritical+0x5c>)
 800af66:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800af68:	4b0d      	ldr	r3, [pc, #52]	@ (800afa0 <vPortEnterCritical+0x5c>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d110      	bne.n	800af92 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af70:	4b0c      	ldr	r3, [pc, #48]	@ (800afa4 <vPortEnterCritical+0x60>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00b      	beq.n	800af92 <vPortEnterCritical+0x4e>
    __asm volatile
 800af7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	603b      	str	r3, [r7, #0]
}
 800af8c:	bf00      	nop
 800af8e:	bf00      	nop
 800af90:	e7fd      	b.n	800af8e <vPortEnterCritical+0x4a>
    }
}
 800af92:	bf00      	nop
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	20000028 	.word	0x20000028
 800afa4:	e000ed04 	.word	0xe000ed04

0800afa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800afae:	4b12      	ldr	r3, [pc, #72]	@ (800aff8 <vPortExitCritical+0x50>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10b      	bne.n	800afce <vPortExitCritical+0x26>
    __asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	607b      	str	r3, [r7, #4]
}
 800afc8:	bf00      	nop
 800afca:	bf00      	nop
 800afcc:	e7fd      	b.n	800afca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800afce:	4b0a      	ldr	r3, [pc, #40]	@ (800aff8 <vPortExitCritical+0x50>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	4a08      	ldr	r2, [pc, #32]	@ (800aff8 <vPortExitCritical+0x50>)
 800afd6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800afd8:	4b07      	ldr	r3, [pc, #28]	@ (800aff8 <vPortExitCritical+0x50>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d105      	bne.n	800afec <vPortExitCritical+0x44>
 800afe0:	2300      	movs	r3, #0
 800afe2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800afea:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr
 800aff8:	20000028 	.word	0x20000028
 800affc:	00000000 	.word	0x00000000

0800b000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800b000:	f3ef 8009 	mrs	r0, PSP
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	4b15      	ldr	r3, [pc, #84]	@ (800b060 <pxCurrentTCBConst>)
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	f01e 0f10 	tst.w	lr, #16
 800b010:	bf08      	it	eq
 800b012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01a:	6010      	str	r0, [r2, #0]
 800b01c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b020:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b024:	f380 8811 	msr	BASEPRI, r0
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	f3bf 8f6f 	isb	sy
 800b030:	f7fe fd42 	bl	8009ab8 <vTaskSwitchContext>
 800b034:	f04f 0000 	mov.w	r0, #0
 800b038:	f380 8811 	msr	BASEPRI, r0
 800b03c:	bc09      	pop	{r0, r3}
 800b03e:	6819      	ldr	r1, [r3, #0]
 800b040:	6808      	ldr	r0, [r1, #0]
 800b042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b046:	f01e 0f10 	tst.w	lr, #16
 800b04a:	bf08      	it	eq
 800b04c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b050:	f380 8809 	msr	PSP, r0
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	f3af 8000 	nop.w

0800b060 <pxCurrentTCBConst>:
 800b060:	200015fc 	.word	0x200015fc
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800b064:	bf00      	nop
 800b066:	bf00      	nop

0800b068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
    __asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	607b      	str	r3, [r7, #4]
}
 800b080:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 800b082:	f001 fbb5 	bl	800c7f0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800b086:	f7fe fbf5 	bl	8009874 <xTaskIncrementTick>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d006      	beq.n	800b09e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 800b090:	f001 fc0c 	bl	800c8ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b094:	4b08      	ldr	r3, [pc, #32]	@ (800b0b8 <SysTick_Handler+0x50>)
 800b096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	e001      	b.n	800b0a2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800b09e:	f001 fbe9 	bl	800c874 <SEGGER_SYSVIEW_RecordExitISR>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	603b      	str	r3, [r7, #0]
    __asm volatile
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	f383 8811 	msr	BASEPRI, r3
}
 800b0ac:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800b0ae:	bf00      	nop
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	e000ed04 	.word	0xe000ed04

0800b0bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800b0bc:	b480      	push	{r7}
 800b0be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b0c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b0f0 <vPortSetupTimerInterrupt+0x34>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b0c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b0f4 <vPortSetupTimerInterrupt+0x38>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b0cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b0f8 <vPortSetupTimerInterrupt+0x3c>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a0a      	ldr	r2, [pc, #40]	@ (800b0fc <vPortSetupTimerInterrupt+0x40>)
 800b0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d6:	099b      	lsrs	r3, r3, #6
 800b0d8:	4a09      	ldr	r2, [pc, #36]	@ (800b100 <vPortSetupTimerInterrupt+0x44>)
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b0de:	4b04      	ldr	r3, [pc, #16]	@ (800b0f0 <vPortSetupTimerInterrupt+0x34>)
 800b0e0:	2207      	movs	r2, #7
 800b0e2:	601a      	str	r2, [r3, #0]
}
 800b0e4:	bf00      	nop
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	e000e010 	.word	0xe000e010
 800b0f4:	e000e018 	.word	0xe000e018
 800b0f8:	20000000 	.word	0x20000000
 800b0fc:	10624dd3 	.word	0x10624dd3
 800b100:	e000e014 	.word	0xe000e014

0800b104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800b104:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b114 <vPortEnableVFP+0x10>
 800b108:	6801      	ldr	r1, [r0, #0]
 800b10a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b10e:	6001      	str	r1, [r0, #0]
 800b110:	4770      	bx	lr
 800b112:	0000      	.short	0x0000
 800b114:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800b118:	bf00      	nop
 800b11a:	bf00      	nop

0800b11c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08e      	sub	sp, #56	@ 0x38
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800b124:	2300      	movs	r3, #0
 800b126:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d022      	beq.n	800b174 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800b12e:	2308      	movs	r3, #8
 800b130:	43db      	mvns	r3, r3
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	429a      	cmp	r2, r3
 800b136:	d81b      	bhi.n	800b170 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800b138:	2208      	movs	r2, #8
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4413      	add	r3, r2
 800b13e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f003 0307 	and.w	r3, r3, #7
 800b146:	2b00      	cmp	r3, #0
 800b148:	d014      	beq.n	800b174 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f003 0307 	and.w	r3, r3, #7
 800b150:	f1c3 0308 	rsb	r3, r3, #8
 800b154:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800b156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b158:	43db      	mvns	r3, r3
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d804      	bhi.n	800b16a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b164:	4413      	add	r3, r2
 800b166:	607b      	str	r3, [r7, #4]
 800b168:	e004      	b.n	800b174 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	607b      	str	r3, [r7, #4]
 800b16e:	e001      	b.n	800b174 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 800b170:	2300      	movs	r3, #0
 800b172:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 800b174:	f7fe fa4c 	bl	8009610 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800b178:	4b7a      	ldr	r3, [pc, #488]	@ (800b364 <pvPortMalloc+0x248>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d101      	bne.n	800b184 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 800b180:	f000 f978 	bl	800b474 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	f2c0 80d3 	blt.w	800b332 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f000 80cf 	beq.w	800b332 <pvPortMalloc+0x216>
 800b194:	4b74      	ldr	r3, [pc, #464]	@ (800b368 <pvPortMalloc+0x24c>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	f200 80c9 	bhi.w	800b332 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800b1a0:	4b72      	ldr	r3, [pc, #456]	@ (800b36c <pvPortMalloc+0x250>)
 800b1a2:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 800b1a4:	4b71      	ldr	r3, [pc, #452]	@ (800b36c <pvPortMalloc+0x250>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800b1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ac:	4a70      	ldr	r2, [pc, #448]	@ (800b370 <pvPortMalloc+0x254>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d305      	bcc.n	800b1be <pvPortMalloc+0xa2>
 800b1b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1b4:	4a6f      	ldr	r2, [pc, #444]	@ (800b374 <pvPortMalloc+0x258>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d801      	bhi.n	800b1be <pvPortMalloc+0xa2>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e000      	b.n	800b1c0 <pvPortMalloc+0xa4>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d129      	bne.n	800b218 <pvPortMalloc+0xfc>
    __asm volatile
 800b1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c8:	f383 8811 	msr	BASEPRI, r3
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f3bf 8f4f 	dsb	sy
 800b1d4:	623b      	str	r3, [r7, #32]
}
 800b1d6:	bf00      	nop
 800b1d8:	bf00      	nop
 800b1da:	e7fd      	b.n	800b1d8 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 800b1dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1de:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 800b1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800b1e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1e8:	4a61      	ldr	r2, [pc, #388]	@ (800b370 <pvPortMalloc+0x254>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d305      	bcc.n	800b1fa <pvPortMalloc+0xde>
 800b1ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f0:	4a60      	ldr	r2, [pc, #384]	@ (800b374 <pvPortMalloc+0x258>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d801      	bhi.n	800b1fa <pvPortMalloc+0xde>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e000      	b.n	800b1fc <pvPortMalloc+0xe0>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10b      	bne.n	800b218 <pvPortMalloc+0xfc>
    __asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	61fb      	str	r3, [r7, #28]
}
 800b212:	bf00      	nop
 800b214:	bf00      	nop
 800b216:	e7fd      	b.n	800b214 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800b218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d903      	bls.n	800b22a <pvPortMalloc+0x10e>
 800b222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1d8      	bne.n	800b1dc <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800b22a:	4b4e      	ldr	r3, [pc, #312]	@ (800b364 <pvPortMalloc+0x248>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b230:	429a      	cmp	r2, r3
 800b232:	d07e      	beq.n	800b332 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 800b234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2208      	movs	r2, #8
 800b23a:	4413      	add	r3, r2
 800b23c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 800b23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b240:	4a4b      	ldr	r2, [pc, #300]	@ (800b370 <pvPortMalloc+0x254>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d305      	bcc.n	800b252 <pvPortMalloc+0x136>
 800b246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b248:	4a4a      	ldr	r2, [pc, #296]	@ (800b374 <pvPortMalloc+0x258>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d801      	bhi.n	800b252 <pvPortMalloc+0x136>
 800b24e:	2301      	movs	r3, #1
 800b250:	e000      	b.n	800b254 <pvPortMalloc+0x138>
 800b252:	2300      	movs	r3, #0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10b      	bne.n	800b270 <pvPortMalloc+0x154>
    __asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	61bb      	str	r3, [r7, #24]
}
 800b26a:	bf00      	nop
 800b26c:	bf00      	nop
 800b26e:	e7fd      	b.n	800b26c <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b276:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800b278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d90b      	bls.n	800b29a <pvPortMalloc+0x17e>
    __asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	617b      	str	r3, [r7, #20]
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop
 800b298:	e7fd      	b.n	800b296 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b29a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	1ad2      	subs	r2, r2, r3
 800b2a2:	2308      	movs	r3, #8
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d924      	bls.n	800b2f4 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b2aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b4:	f003 0307 	and.w	r3, r3, #7
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00b      	beq.n	800b2d4 <pvPortMalloc+0x1b8>
    __asm volatile
 800b2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c0:	f383 8811 	msr	BASEPRI, r3
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	613b      	str	r3, [r7, #16]
}
 800b2ce:	bf00      	nop
 800b2d0:	bf00      	nop
 800b2d2:	e7fd      	b.n	800b2d0 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	1ad2      	subs	r2, r2, r3
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2de:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800b2e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ec:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2f2:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b368 <pvPortMalloc+0x24c>)
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	4a1a      	ldr	r2, [pc, #104]	@ (800b368 <pvPortMalloc+0x24c>)
 800b300:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b302:	4b19      	ldr	r3, [pc, #100]	@ (800b368 <pvPortMalloc+0x24c>)
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	4b1c      	ldr	r3, [pc, #112]	@ (800b378 <pvPortMalloc+0x25c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d203      	bcs.n	800b316 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b30e:	4b16      	ldr	r3, [pc, #88]	@ (800b368 <pvPortMalloc+0x24c>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a19      	ldr	r2, [pc, #100]	@ (800b378 <pvPortMalloc+0x25c>)
 800b314:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800b316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b320:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800b322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b324:	2200      	movs	r2, #0
 800b326:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800b328:	4b14      	ldr	r3, [pc, #80]	@ (800b37c <pvPortMalloc+0x260>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	3301      	adds	r3, #1
 800b32e:	4a13      	ldr	r2, [pc, #76]	@ (800b37c <pvPortMalloc+0x260>)
 800b330:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800b332:	f7fe f97b 	bl	800962c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b338:	f003 0307 	and.w	r3, r3, #7
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00b      	beq.n	800b358 <pvPortMalloc+0x23c>
    __asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	60fb      	str	r3, [r7, #12]
}
 800b352:	bf00      	nop
 800b354:	bf00      	nop
 800b356:	e7fd      	b.n	800b354 <pvPortMalloc+0x238>
    return pvReturn;
 800b358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3738      	adds	r7, #56	@ 0x38
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	2001434c 	.word	0x2001434c
 800b368:	20014350 	.word	0x20014350
 800b36c:	20014344 	.word	0x20014344
 800b370:	20001744 	.word	0x20001744
 800b374:	20014343 	.word	0x20014343
 800b378:	20014354 	.word	0x20014354
 800b37c:	20014358 	.word	0x20014358

0800b380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b088      	sub	sp, #32
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d064      	beq.n	800b45c <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800b392:	2308      	movs	r3, #8
 800b394:	425b      	negs	r3, r3
 800b396:	69fa      	ldr	r2, [r7, #28]
 800b398:	4413      	add	r3, r2
 800b39a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	4a30      	ldr	r2, [pc, #192]	@ (800b464 <vPortFree+0xe4>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d305      	bcc.n	800b3b4 <vPortFree+0x34>
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	4a2f      	ldr	r2, [pc, #188]	@ (800b468 <vPortFree+0xe8>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d801      	bhi.n	800b3b4 <vPortFree+0x34>
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e000      	b.n	800b3b6 <vPortFree+0x36>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10b      	bne.n	800b3d2 <vPortFree+0x52>
    __asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	617b      	str	r3, [r7, #20]
}
 800b3cc:	bf00      	nop
 800b3ce:	bf00      	nop
 800b3d0:	e7fd      	b.n	800b3ce <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	db0b      	blt.n	800b3f2 <vPortFree+0x72>
    __asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	613b      	str	r3, [r7, #16]
}
 800b3ec:	bf00      	nop
 800b3ee:	bf00      	nop
 800b3f0:	e7fd      	b.n	800b3ee <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00b      	beq.n	800b412 <vPortFree+0x92>
    __asm volatile
 800b3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3fe:	f383 8811 	msr	BASEPRI, r3
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	60fb      	str	r3, [r7, #12]
}
 800b40c:	bf00      	nop
 800b40e:	bf00      	nop
 800b410:	e7fd      	b.n	800b40e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	0fdb      	lsrs	r3, r3, #31
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d01c      	beq.n	800b45c <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d118      	bne.n	800b45c <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800b436:	f7fe f8eb 	bl	8009610 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	685a      	ldr	r2, [r3, #4]
 800b43e:	4b0b      	ldr	r3, [pc, #44]	@ (800b46c <vPortFree+0xec>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4413      	add	r3, r2
 800b444:	4a09      	ldr	r2, [pc, #36]	@ (800b46c <vPortFree+0xec>)
 800b446:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b448:	69b8      	ldr	r0, [r7, #24]
 800b44a:	f000 f86d 	bl	800b528 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800b44e:	4b08      	ldr	r3, [pc, #32]	@ (800b470 <vPortFree+0xf0>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	3301      	adds	r3, #1
 800b454:	4a06      	ldr	r2, [pc, #24]	@ (800b470 <vPortFree+0xf0>)
 800b456:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800b458:	f7fe f8e8 	bl	800962c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800b45c:	bf00      	nop
 800b45e:	3720      	adds	r7, #32
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	20001744 	.word	0x20001744
 800b468:	20014343 	.word	0x20014343
 800b46c:	20014350 	.word	0x20014350
 800b470:	2001435c 	.word	0x2001435c

0800b474 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b47a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800b47e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800b480:	4b24      	ldr	r3, [pc, #144]	@ (800b514 <prvHeapInit+0xa0>)
 800b482:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f003 0307 	and.w	r3, r3, #7
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00c      	beq.n	800b4a8 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	3307      	adds	r3, #7
 800b492:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f023 0307 	bic.w	r3, r3, #7
 800b49a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	4a1c      	ldr	r2, [pc, #112]	@ (800b514 <prvHeapInit+0xa0>)
 800b4a4:	4413      	add	r3, r2
 800b4a6:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	4a1b      	ldr	r2, [pc, #108]	@ (800b518 <prvHeapInit+0xa4>)
 800b4ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800b4ae:	4b1a      	ldr	r3, [pc, #104]	@ (800b518 <prvHeapInit+0xa4>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 800b4bc:	2208      	movs	r2, #8
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	1a9b      	subs	r3, r3, r2
 800b4c2:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f023 0307 	bic.w	r3, r3, #7
 800b4ca:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a13      	ldr	r2, [pc, #76]	@ (800b51c <prvHeapInit+0xa8>)
 800b4d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800b4d2:	4b12      	ldr	r3, [pc, #72]	@ (800b51c <prvHeapInit+0xa8>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800b4da:	4b10      	ldr	r3, [pc, #64]	@ (800b51c <prvHeapInit+0xa8>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	1ad2      	subs	r2, r2, r3
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800b4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b51c <prvHeapInit+0xa8>)
 800b4f2:	681a      	ldr	r2, [r3, #0]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	4a08      	ldr	r2, [pc, #32]	@ (800b520 <prvHeapInit+0xac>)
 800b4fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	4a07      	ldr	r2, [pc, #28]	@ (800b524 <prvHeapInit+0xb0>)
 800b506:	6013      	str	r3, [r2, #0]
}
 800b508:	bf00      	nop
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	20001744 	.word	0x20001744
 800b518:	20014344 	.word	0x20014344
 800b51c:	2001434c 	.word	0x2001434c
 800b520:	20014354 	.word	0x20014354
 800b524:	20014350 	.word	0x20014350

0800b528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800b528:	b480      	push	{r7}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800b530:	4b36      	ldr	r3, [pc, #216]	@ (800b60c <prvInsertBlockIntoFreeList+0xe4>)
 800b532:	617b      	str	r3, [r7, #20]
 800b534:	e002      	b.n	800b53c <prvInsertBlockIntoFreeList+0x14>
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	617b      	str	r3, [r7, #20]
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	429a      	cmp	r2, r3
 800b544:	d8f7      	bhi.n	800b536 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	4a30      	ldr	r2, [pc, #192]	@ (800b60c <prvInsertBlockIntoFreeList+0xe4>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d018      	beq.n	800b580 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	4a2f      	ldr	r2, [pc, #188]	@ (800b610 <prvInsertBlockIntoFreeList+0xe8>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d305      	bcc.n	800b562 <prvInsertBlockIntoFreeList+0x3a>
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	4a2e      	ldr	r2, [pc, #184]	@ (800b614 <prvInsertBlockIntoFreeList+0xec>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d801      	bhi.n	800b562 <prvInsertBlockIntoFreeList+0x3a>
 800b55e:	2301      	movs	r3, #1
 800b560:	e000      	b.n	800b564 <prvInsertBlockIntoFreeList+0x3c>
 800b562:	2300      	movs	r3, #0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10b      	bne.n	800b580 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800b568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56c:	f383 8811 	msr	BASEPRI, r3
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	60fb      	str	r3, [r7, #12]
}
 800b57a:	bf00      	nop
 800b57c:	bf00      	nop
 800b57e:	e7fd      	b.n	800b57c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	693a      	ldr	r2, [r7, #16]
 800b58a:	4413      	add	r3, r2
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d108      	bne.n	800b5a4 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	441a      	add	r2, r3
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	693a      	ldr	r2, [r7, #16]
 800b5ae:	441a      	add	r2, r3
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d118      	bne.n	800b5ea <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	4b16      	ldr	r3, [pc, #88]	@ (800b618 <prvInsertBlockIntoFreeList+0xf0>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d00d      	beq.n	800b5e0 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685a      	ldr	r2, [r3, #4]
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	441a      	add	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	601a      	str	r2, [r3, #0]
 800b5de:	e008      	b.n	800b5f2 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800b5e0:	4b0d      	ldr	r3, [pc, #52]	@ (800b618 <prvInsertBlockIntoFreeList+0xf0>)
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	601a      	str	r2, [r3, #0]
 800b5e8:	e003      	b.n	800b5f2 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800b5f2:	697a      	ldr	r2, [r7, #20]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d002      	beq.n	800b600 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b600:	bf00      	nop
 800b602:	371c      	adds	r7, #28
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	20014344 	.word	0x20014344
 800b610:	20001744 	.word	0x20001744
 800b614:	20014343 	.word	0x20014343
 800b618:	2001434c 	.word	0x2001434c

0800b61c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af02      	add	r7, sp, #8
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800b62a:	2205      	movs	r2, #5
 800b62c:	492b      	ldr	r1, [pc, #172]	@ (800b6dc <SYSVIEW_AddTask+0xc0>)
 800b62e:	68b8      	ldr	r0, [r7, #8]
 800b630:	f001 fdca 	bl	800d1c8 <memcmp>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d04b      	beq.n	800b6d2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800b63a:	4b29      	ldr	r3, [pc, #164]	@ (800b6e0 <SYSVIEW_AddTask+0xc4>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b07      	cmp	r3, #7
 800b640:	d903      	bls.n	800b64a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800b642:	4828      	ldr	r0, [pc, #160]	@ (800b6e4 <SYSVIEW_AddTask+0xc8>)
 800b644:	f001 fc1a 	bl	800ce7c <SEGGER_SYSVIEW_Warn>
    return;
 800b648:	e044      	b.n	800b6d4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800b64a:	4b25      	ldr	r3, [pc, #148]	@ (800b6e0 <SYSVIEW_AddTask+0xc4>)
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	4926      	ldr	r1, [pc, #152]	@ (800b6e8 <SYSVIEW_AddTask+0xcc>)
 800b650:	4613      	mov	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4413      	add	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	440b      	add	r3, r1
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800b65e:	4b20      	ldr	r3, [pc, #128]	@ (800b6e0 <SYSVIEW_AddTask+0xc4>)
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	4921      	ldr	r1, [pc, #132]	@ (800b6e8 <SYSVIEW_AddTask+0xcc>)
 800b664:	4613      	mov	r3, r2
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	4413      	add	r3, r2
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	440b      	add	r3, r1
 800b66e:	3304      	adds	r3, #4
 800b670:	68ba      	ldr	r2, [r7, #8]
 800b672:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800b674:	4b1a      	ldr	r3, [pc, #104]	@ (800b6e0 <SYSVIEW_AddTask+0xc4>)
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	491b      	ldr	r1, [pc, #108]	@ (800b6e8 <SYSVIEW_AddTask+0xcc>)
 800b67a:	4613      	mov	r3, r2
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	4413      	add	r3, r2
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	440b      	add	r3, r1
 800b684:	3308      	adds	r3, #8
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800b68a:	4b15      	ldr	r3, [pc, #84]	@ (800b6e0 <SYSVIEW_AddTask+0xc4>)
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	4916      	ldr	r1, [pc, #88]	@ (800b6e8 <SYSVIEW_AddTask+0xcc>)
 800b690:	4613      	mov	r3, r2
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	4413      	add	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	440b      	add	r3, r1
 800b69a:	330c      	adds	r3, #12
 800b69c:	683a      	ldr	r2, [r7, #0]
 800b69e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800b6a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b6e0 <SYSVIEW_AddTask+0xc4>)
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	4910      	ldr	r1, [pc, #64]	@ (800b6e8 <SYSVIEW_AddTask+0xcc>)
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4413      	add	r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	440b      	add	r3, r1
 800b6b0:	3310      	adds	r3, #16
 800b6b2:	69ba      	ldr	r2, [r7, #24]
 800b6b4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800b6b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b6e0 <SYSVIEW_AddTask+0xc4>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	4a08      	ldr	r2, [pc, #32]	@ (800b6e0 <SYSVIEW_AddTask+0xc4>)
 800b6be:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	68b9      	ldr	r1, [r7, #8]
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f000 f80e 	bl	800b6ec <SYSVIEW_SendTaskInfo>
 800b6d0:	e000      	b.n	800b6d4 <SYSVIEW_AddTask+0xb8>
    return;
 800b6d2:	bf00      	nop

}
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	0800e2d8 	.word	0x0800e2d8
 800b6e0:	20014400 	.word	0x20014400
 800b6e4:	0800e2e0 	.word	0x0800e2e0
 800b6e8:	20014360 	.word	0x20014360

0800b6ec <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08a      	sub	sp, #40	@ 0x28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
 800b6f8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800b6fa:	f107 0310 	add.w	r3, r7, #16
 800b6fe:	2218      	movs	r2, #24
 800b700:	2100      	movs	r1, #0
 800b702:	4618      	mov	r0, r3
 800b704:	f001 fd70 	bl	800d1e8 <memset>
  TaskInfo.TaskID     = TaskID;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 800b718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800b71c:	f107 0310 	add.w	r3, r7, #16
 800b720:	4618      	mov	r0, r3
 800b722:	f000 ff3b 	bl	800c59c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800b726:	bf00      	nop
 800b728:	3728      	adds	r7, #40	@ 0x28
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
	...

0800b730 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800b736:	4b1e      	ldr	r3, [pc, #120]	@ (800b7b0 <USART2_IRQHandler+0x80>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f003 0320 	and.w	r3, r3, #32
 800b742:	2b00      	cmp	r3, #0
 800b744:	d011      	beq.n	800b76a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800b746:	4b1b      	ldr	r3, [pc, #108]	@ (800b7b4 <USART2_IRQHandler+0x84>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f003 030b 	and.w	r3, r3, #11
 800b754:	2b00      	cmp	r3, #0
 800b756:	d108      	bne.n	800b76a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800b758:	4b17      	ldr	r3, [pc, #92]	@ (800b7b8 <USART2_IRQHandler+0x88>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d004      	beq.n	800b76a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800b760:	4b15      	ldr	r3, [pc, #84]	@ (800b7b8 <USART2_IRQHandler+0x88>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	79fa      	ldrb	r2, [r7, #7]
 800b766:	4610      	mov	r0, r2
 800b768:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b770:	2b00      	cmp	r3, #0
 800b772:	d01a      	beq.n	800b7aa <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800b774:	4b11      	ldr	r3, [pc, #68]	@ (800b7bc <USART2_IRQHandler+0x8c>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d015      	beq.n	800b7a8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800b77c:	4b0f      	ldr	r3, [pc, #60]	@ (800b7bc <USART2_IRQHandler+0x8c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	1dfa      	adds	r2, r7, #7
 800b782:	4610      	mov	r0, r2
 800b784:	4798      	blx	r3
 800b786:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d106      	bne.n	800b79c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800b78e:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c0 <USART2_IRQHandler+0x90>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a0b      	ldr	r2, [pc, #44]	@ (800b7c0 <USART2_IRQHandler+0x90>)
 800b794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b798:	6013      	str	r3, [r2, #0]
 800b79a:	e006      	b.n	800b7aa <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800b79c:	4b04      	ldr	r3, [pc, #16]	@ (800b7b0 <USART2_IRQHandler+0x80>)
 800b79e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800b7a0:	79fa      	ldrb	r2, [r7, #7]
 800b7a2:	4b04      	ldr	r3, [pc, #16]	@ (800b7b4 <USART2_IRQHandler+0x84>)
 800b7a4:	601a      	str	r2, [r3, #0]
 800b7a6:	e000      	b.n	800b7aa <USART2_IRQHandler+0x7a>
      return;
 800b7a8:	bf00      	nop
    }
  }
}
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	40004400 	.word	0x40004400
 800b7b4:	40004404 	.word	0x40004404
 800b7b8:	20014404 	.word	0x20014404
 800b7bc:	20014408 	.word	0x20014408
 800b7c0:	4000440c 	.word	0x4000440c

0800b7c4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800b7c4:	b480      	push	{r7}
 800b7c6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800b7c8:	4b05      	ldr	r3, [pc, #20]	@ (800b7e0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a04      	ldr	r2, [pc, #16]	@ (800b7e0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800b7ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7d2:	6013      	str	r3, [r2, #0]
}
 800b7d4:	bf00      	nop
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	4000440c 	.word	0x4000440c

0800b7e4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800b7ea:	4b26      	ldr	r3, [pc, #152]	@ (800b884 <_DoInit+0xa0>)
 800b7ec:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800b7ee:	22a8      	movs	r2, #168	@ 0xa8
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	6838      	ldr	r0, [r7, #0]
 800b7f4:	f001 fcf8 	bl	800d1e8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	2203      	movs	r2, #3
 800b7fc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2203      	movs	r2, #3
 800b802:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	4a20      	ldr	r2, [pc, #128]	@ (800b888 <_DoInit+0xa4>)
 800b808:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	4a1f      	ldr	r2, [pc, #124]	@ (800b88c <_DoInit+0xa8>)
 800b80e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b816:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2200      	movs	r2, #0
 800b81c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2200      	movs	r2, #0
 800b822:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	2200      	movs	r2, #0
 800b828:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	4a16      	ldr	r2, [pc, #88]	@ (800b888 <_DoInit+0xa4>)
 800b82e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	4a17      	ldr	r2, [pc, #92]	@ (800b890 <_DoInit+0xac>)
 800b834:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	2210      	movs	r2, #16
 800b83a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	2200      	movs	r2, #0
 800b840:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	2200      	movs	r2, #0
 800b846:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2200      	movs	r2, #0
 800b84c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800b84e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800b852:	2300      	movs	r3, #0
 800b854:	607b      	str	r3, [r7, #4]
 800b856:	e00c      	b.n	800b872 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f1c3 030f 	rsb	r3, r3, #15
 800b85e:	4a0d      	ldr	r2, [pc, #52]	@ (800b894 <_DoInit+0xb0>)
 800b860:	5cd1      	ldrb	r1, [r2, r3]
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4413      	add	r3, r2
 800b868:	460a      	mov	r2, r1
 800b86a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3301      	adds	r3, #1
 800b870:	607b      	str	r3, [r7, #4]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2b0f      	cmp	r3, #15
 800b876:	d9ef      	bls.n	800b858 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800b878:	f3bf 8f5f 	dmb	sy
}
 800b87c:	bf00      	nop
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	2001440c 	.word	0x2001440c
 800b888:	0800e330 	.word	0x0800e330
 800b88c:	200144b4 	.word	0x200144b4
 800b890:	200148b4 	.word	0x200148b4
 800b894:	0800e354 	.word	0x0800e354

0800b898 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800b898:	b580      	push	{r7, lr}
 800b89a:	b08a      	sub	sp, #40	@ 0x28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800b8b4:	69ba      	ldr	r2, [r7, #24]
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d905      	bls.n	800b8c8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800b8bc:	69ba      	ldr	r2, [r7, #24]
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8c6:	e007      	b.n	800b8d8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	689a      	ldr	r2, [r3, #8]
 800b8cc:	69b9      	ldr	r1, [r7, #24]
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	1acb      	subs	r3, r1, r3
 800b8d2:	4413      	add	r3, r2
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	689a      	ldr	r2, [r3, #8]
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	bf28      	it	cs
 800b8e6:	4613      	movcs	r3, r2
 800b8e8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800b8ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	bf28      	it	cs
 800b8f2:	4613      	movcs	r3, r2
 800b8f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800b900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b902:	68b9      	ldr	r1, [r7, #8]
 800b904:	6978      	ldr	r0, [r7, #20]
 800b906:	f001 fcd8 	bl	800d2ba <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800b90a:	6a3a      	ldr	r2, [r7, #32]
 800b90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90e:	4413      	add	r3, r2
 800b910:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b916:	4413      	add	r3, r2
 800b918:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800b922:	69fa      	ldr	r2, [r7, #28]
 800b924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b926:	4413      	add	r3, r2
 800b928:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	69fa      	ldr	r2, [r7, #28]
 800b930:	429a      	cmp	r2, r3
 800b932:	d101      	bne.n	800b938 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800b934:	2300      	movs	r3, #0
 800b936:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b938:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	69fa      	ldr	r2, [r7, #28]
 800b940:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1b2      	bne.n	800b8ae <_WriteBlocking+0x16>
  return NumBytesWritten;
 800b948:	6a3b      	ldr	r3, [r7, #32]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3728      	adds	r7, #40	@ 0x28
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800b952:	b580      	push	{r7, lr}
 800b954:	b088      	sub	sp, #32
 800b956:	af00      	add	r7, sp, #0
 800b958:	60f8      	str	r0, [r7, #12]
 800b95a:	60b9      	str	r1, [r7, #8]
 800b95c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	689a      	ldr	r2, [r3, #8]
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800b96e:	69ba      	ldr	r2, [r7, #24]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	429a      	cmp	r2, r3
 800b974:	d911      	bls.n	800b99a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	685a      	ldr	r2, [r3, #4]
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	4413      	add	r3, r2
 800b97e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	6938      	ldr	r0, [r7, #16]
 800b986:	f001 fc98 	bl	800d2ba <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b98a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800b98e:	69fa      	ldr	r2, [r7, #28]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	441a      	add	r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800b998:	e01f      	b.n	800b9da <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	685a      	ldr	r2, [r3, #4]
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	68b9      	ldr	r1, [r7, #8]
 800b9ac:	6938      	ldr	r0, [r7, #16]
 800b9ae:	f001 fc84 	bl	800d2ba <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	1ad3      	subs	r3, r2, r3
 800b9b8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6938      	ldr	r0, [r7, #16]
 800b9cc:	f001 fc75 	bl	800d2ba <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b9d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	697a      	ldr	r2, [r7, #20]
 800b9d8:	60da      	str	r2, [r3, #12]
}
 800b9da:	bf00      	nop
 800b9dc:	3720      	adds	r7, #32
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800b9e2:	b480      	push	{r7}
 800b9e4:	b087      	sub	sp, #28
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d808      	bhi.n	800ba10 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	689a      	ldr	r2, [r3, #8]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	1ad2      	subs	r2, r2, r3
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	4413      	add	r3, r2
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	617b      	str	r3, [r7, #20]
 800ba0e:	e004      	b.n	800ba1a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	3b01      	subs	r3, #1
 800ba18:	617b      	str	r3, [r7, #20]
  }
  return r;
 800ba1a:	697b      	ldr	r3, [r7, #20]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	371c      	adds	r7, #28
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b08c      	sub	sp, #48	@ 0x30
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800ba34:	4b3e      	ldr	r3, [pc, #248]	@ (800bb30 <SEGGER_RTT_ReadNoLock+0x108>)
 800ba36:	623b      	str	r3, [r7, #32]
 800ba38:	6a3b      	ldr	r3, [r7, #32]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b53      	cmp	r3, #83	@ 0x53
 800ba40:	d001      	beq.n	800ba46 <SEGGER_RTT_ReadNoLock+0x1e>
 800ba42:	f7ff fecf 	bl	800b7e4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	4413      	add	r3, r2
 800ba4e:	00db      	lsls	r3, r3, #3
 800ba50:	3360      	adds	r3, #96	@ 0x60
 800ba52:	4a37      	ldr	r2, [pc, #220]	@ (800bb30 <SEGGER_RTT_ReadNoLock+0x108>)
 800ba54:	4413      	add	r3, r2
 800ba56:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	691b      	ldr	r3, [r3, #16]
 800ba60:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800ba6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d92b      	bls.n	800bacc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	689a      	ldr	r2, [r3, #8]
 800ba78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4293      	cmp	r3, r2
 800ba84:	bf28      	it	cs
 800ba86:	4613      	movcs	r3, r2
 800ba88:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	685a      	ldr	r2, [r3, #4]
 800ba8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba90:	4413      	add	r3, r2
 800ba92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800ba94:	697a      	ldr	r2, [r7, #20]
 800ba96:	6939      	ldr	r1, [r7, #16]
 800ba98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba9a:	f001 fc0e 	bl	800d2ba <memcpy>
    NumBytesRead += NumBytesRem;
 800ba9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	4413      	add	r3, r2
 800baa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800baa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	4413      	add	r3, r2
 800baac:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800bab6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	4413      	add	r3, r2
 800babc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d101      	bne.n	800bacc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800bac8:	2300      	movs	r3, #0
 800baca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800bacc:	69ba      	ldr	r2, [r7, #24]
 800bace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800bad4:	697a      	ldr	r2, [r7, #20]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4293      	cmp	r3, r2
 800bada:	bf28      	it	cs
 800badc:	4613      	movcs	r3, r2
 800bade:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d019      	beq.n	800bb1a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	685a      	ldr	r2, [r3, #4]
 800baea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baec:	4413      	add	r3, r2
 800baee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800baf0:	697a      	ldr	r2, [r7, #20]
 800baf2:	6939      	ldr	r1, [r7, #16]
 800baf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800baf6:	f001 fbe0 	bl	800d2ba <memcpy>
    NumBytesRead += NumBytesRem;
 800bafa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	4413      	add	r3, r2
 800bb00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800bb02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	4413      	add	r3, r2
 800bb08:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800bb12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	4413      	add	r3, r2
 800bb18:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800bb1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d002      	beq.n	800bb26 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb24:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800bb26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3730      	adds	r7, #48	@ 0x30
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	2001440c 	.word	0x2001440c

0800bb34 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b088      	sub	sp, #32
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	1c5a      	adds	r2, r3, #1
 800bb48:	4613      	mov	r3, r2
 800bb4a:	005b      	lsls	r3, r3, #1
 800bb4c:	4413      	add	r3, r2
 800bb4e:	00db      	lsls	r3, r3, #3
 800bb50:	4a1f      	ldr	r2, [pc, #124]	@ (800bbd0 <SEGGER_RTT_WriteNoLock+0x9c>)
 800bb52:	4413      	add	r3, r2
 800bb54:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	695b      	ldr	r3, [r3, #20]
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d029      	beq.n	800bbb2 <SEGGER_RTT_WriteNoLock+0x7e>
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d82e      	bhi.n	800bbc0 <SEGGER_RTT_WriteNoLock+0x8c>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d002      	beq.n	800bb6c <SEGGER_RTT_WriteNoLock+0x38>
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d013      	beq.n	800bb92 <SEGGER_RTT_WriteNoLock+0x5e>
 800bb6a:	e029      	b.n	800bbc0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800bb6c:	6978      	ldr	r0, [r7, #20]
 800bb6e:	f7ff ff38 	bl	800b9e2 <_GetAvailWriteSpace>
 800bb72:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d202      	bcs.n	800bb82 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800bb80:	e021      	b.n	800bbc6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	69b9      	ldr	r1, [r7, #24]
 800bb8a:	6978      	ldr	r0, [r7, #20]
 800bb8c:	f7ff fee1 	bl	800b952 <_WriteNoCheck>
    break;
 800bb90:	e019      	b.n	800bbc6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800bb92:	6978      	ldr	r0, [r7, #20]
 800bb94:	f7ff ff25 	bl	800b9e2 <_GetAvailWriteSpace>
 800bb98:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	bf28      	it	cs
 800bba2:	4613      	movcs	r3, r2
 800bba4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800bba6:	69fa      	ldr	r2, [r7, #28]
 800bba8:	69b9      	ldr	r1, [r7, #24]
 800bbaa:	6978      	ldr	r0, [r7, #20]
 800bbac:	f7ff fed1 	bl	800b952 <_WriteNoCheck>
    break;
 800bbb0:	e009      	b.n	800bbc6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	69b9      	ldr	r1, [r7, #24]
 800bbb6:	6978      	ldr	r0, [r7, #20]
 800bbb8:	f7ff fe6e 	bl	800b898 <_WriteBlocking>
 800bbbc:	61f8      	str	r0, [r7, #28]
    break;
 800bbbe:	e002      	b.n	800bbc6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	61fb      	str	r3, [r7, #28]
    break;
 800bbc4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800bbc6:	69fb      	ldr	r3, [r7, #28]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3720      	adds	r7, #32
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	2001440c 	.word	0x2001440c

0800bbd4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800bbe0:	4b0e      	ldr	r3, [pc, #56]	@ (800bc1c <SEGGER_RTT_Write+0x48>)
 800bbe2:	61fb      	str	r3, [r7, #28]
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	2b53      	cmp	r3, #83	@ 0x53
 800bbec:	d001      	beq.n	800bbf2 <SEGGER_RTT_Write+0x1e>
 800bbee:	f7ff fdf9 	bl	800b7e4 <_DoInit>
  SEGGER_RTT_LOCK();
 800bbf2:	f3ef 8311 	mrs	r3, BASEPRI
 800bbf6:	f04f 0120 	mov.w	r1, #32
 800bbfa:	f381 8811 	msr	BASEPRI, r1
 800bbfe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	68b9      	ldr	r1, [r7, #8]
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f7ff ff95 	bl	800bb34 <SEGGER_RTT_WriteNoLock>
 800bc0a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800bc12:	697b      	ldr	r3, [r7, #20]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3720      	adds	r7, #32
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	2001440c 	.word	0x2001440c

0800bc20 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800bc20:	b480      	push	{r7}
 800bc22:	b087      	sub	sp, #28
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	1c5a      	adds	r2, r3, #1
 800bc34:	60fa      	str	r2, [r7, #12]
 800bc36:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b80      	cmp	r3, #128	@ 0x80
 800bc3c:	d90a      	bls.n	800bc54 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800bc3e:	2380      	movs	r3, #128	@ 0x80
 800bc40:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800bc42:	e007      	b.n	800bc54 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	1c53      	adds	r3, r2, #1
 800bc48:	60bb      	str	r3, [r7, #8]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	1c59      	adds	r1, r3, #1
 800bc4e:	60f9      	str	r1, [r7, #12]
 800bc50:	7812      	ldrb	r2, [r2, #0]
 800bc52:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	1e5a      	subs	r2, r3, #1
 800bc58:	607a      	str	r2, [r7, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d003      	beq.n	800bc66 <_EncodeStr+0x46>
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1ee      	bne.n	800bc44 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	b2da      	uxtb	r2, r3
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800bc72:	68fb      	ldr	r3, [r7, #12]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	371c      	adds	r7, #28
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	3307      	adds	r3, #7
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bc9e:	4b34      	ldr	r3, [pc, #208]	@ (800bd70 <_HandleIncomingPacket+0xd8>)
 800bca0:	7e1b      	ldrb	r3, [r3, #24]
 800bca2:	4618      	mov	r0, r3
 800bca4:	1cfb      	adds	r3, r7, #3
 800bca6:	2201      	movs	r2, #1
 800bca8:	4619      	mov	r1, r3
 800bcaa:	f7ff febd 	bl	800ba28 <SEGGER_RTT_ReadNoLock>
 800bcae:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d057      	beq.n	800bd66 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800bcb6:	78fb      	ldrb	r3, [r7, #3]
 800bcb8:	2b80      	cmp	r3, #128	@ 0x80
 800bcba:	d031      	beq.n	800bd20 <_HandleIncomingPacket+0x88>
 800bcbc:	2b80      	cmp	r3, #128	@ 0x80
 800bcbe:	dc40      	bgt.n	800bd42 <_HandleIncomingPacket+0xaa>
 800bcc0:	2b07      	cmp	r3, #7
 800bcc2:	dc15      	bgt.n	800bcf0 <_HandleIncomingPacket+0x58>
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	dd3c      	ble.n	800bd42 <_HandleIncomingPacket+0xaa>
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	2b06      	cmp	r3, #6
 800bccc:	d839      	bhi.n	800bd42 <_HandleIncomingPacket+0xaa>
 800bcce:	a201      	add	r2, pc, #4	@ (adr r2, 800bcd4 <_HandleIncomingPacket+0x3c>)
 800bcd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd4:	0800bcf7 	.word	0x0800bcf7
 800bcd8:	0800bcfd 	.word	0x0800bcfd
 800bcdc:	0800bd03 	.word	0x0800bd03
 800bce0:	0800bd09 	.word	0x0800bd09
 800bce4:	0800bd0f 	.word	0x0800bd0f
 800bce8:	0800bd15 	.word	0x0800bd15
 800bcec:	0800bd1b 	.word	0x0800bd1b
 800bcf0:	2b7f      	cmp	r3, #127	@ 0x7f
 800bcf2:	d033      	beq.n	800bd5c <_HandleIncomingPacket+0xc4>
 800bcf4:	e025      	b.n	800bd42 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800bcf6:	f000 fad5 	bl	800c2a4 <SEGGER_SYSVIEW_Start>
      break;
 800bcfa:	e034      	b.n	800bd66 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800bcfc:	f000 fb8e 	bl	800c41c <SEGGER_SYSVIEW_Stop>
      break;
 800bd00:	e031      	b.n	800bd66 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800bd02:	f000 fd43 	bl	800c78c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800bd06:	e02e      	b.n	800bd66 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800bd08:	f000 fd2c 	bl	800c764 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800bd0c:	e02b      	b.n	800bd66 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800bd0e:	f000 fbab 	bl	800c468 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800bd12:	e028      	b.n	800bd66 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800bd14:	f001 f874 	bl	800ce00 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800bd18:	e025      	b.n	800bd66 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800bd1a:	f001 f853 	bl	800cdc4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800bd1e:	e022      	b.n	800bd66 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bd20:	4b13      	ldr	r3, [pc, #76]	@ (800bd70 <_HandleIncomingPacket+0xd8>)
 800bd22:	7e1b      	ldrb	r3, [r3, #24]
 800bd24:	4618      	mov	r0, r3
 800bd26:	1cfb      	adds	r3, r7, #3
 800bd28:	2201      	movs	r2, #1
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	f7ff fe7c 	bl	800ba28 <SEGGER_RTT_ReadNoLock>
 800bd30:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d013      	beq.n	800bd60 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800bd38:	78fb      	ldrb	r3, [r7, #3]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f000 ffb8 	bl	800ccb0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800bd40:	e00e      	b.n	800bd60 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800bd42:	78fb      	ldrb	r3, [r7, #3]
 800bd44:	b25b      	sxtb	r3, r3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	da0c      	bge.n	800bd64 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bd4a:	4b09      	ldr	r3, [pc, #36]	@ (800bd70 <_HandleIncomingPacket+0xd8>)
 800bd4c:	7e1b      	ldrb	r3, [r3, #24]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	1cfb      	adds	r3, r7, #3
 800bd52:	2201      	movs	r2, #1
 800bd54:	4619      	mov	r1, r3
 800bd56:	f7ff fe67 	bl	800ba28 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800bd5a:	e003      	b.n	800bd64 <_HandleIncomingPacket+0xcc>
      break;
 800bd5c:	bf00      	nop
 800bd5e:	e002      	b.n	800bd66 <_HandleIncomingPacket+0xce>
      break;
 800bd60:	bf00      	nop
 800bd62:	e000      	b.n	800bd66 <_HandleIncomingPacket+0xce>
      break;
 800bd64:	bf00      	nop
    }
  }
}
 800bd66:	bf00      	nop
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	200148c4 	.word	0x200148c4

0800bd74 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b08c      	sub	sp, #48	@ 0x30
 800bd78:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800bd7e:	1d3b      	adds	r3, r7, #4
 800bd80:	3301      	adds	r3, #1
 800bd82:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd88:	4b32      	ldr	r3, [pc, #200]	@ (800be54 <_TrySendOverflowPacket+0xe0>)
 800bd8a:	695b      	ldr	r3, [r3, #20]
 800bd8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd8e:	e00b      	b.n	800bda8 <_TrySendOverflowPacket+0x34>
 800bd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd96:	1c59      	adds	r1, r3, #1
 800bd98:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800bd9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bd9e:	b2d2      	uxtb	r2, r2
 800bda0:	701a      	strb	r2, [r3, #0]
 800bda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda4:	09db      	lsrs	r3, r3, #7
 800bda6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdaa:	2b7f      	cmp	r3, #127	@ 0x7f
 800bdac:	d8f0      	bhi.n	800bd90 <_TrySendOverflowPacket+0x1c>
 800bdae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb0:	1c5a      	adds	r2, r3, #1
 800bdb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bdb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bdb6:	b2d2      	uxtb	r2, r2
 800bdb8:	701a      	strb	r2, [r3, #0]
 800bdba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdbc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800bdbe:	4b26      	ldr	r3, [pc, #152]	@ (800be58 <_TrySendOverflowPacket+0xe4>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800bdc4:	4b23      	ldr	r3, [pc, #140]	@ (800be54 <_TrySendOverflowPacket+0xe0>)
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	69ba      	ldr	r2, [r7, #24]
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	623b      	str	r3, [r7, #32]
 800bdd6:	e00b      	b.n	800bdf0 <_TrySendOverflowPacket+0x7c>
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	b2da      	uxtb	r2, r3
 800bddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdde:	1c59      	adds	r1, r3, #1
 800bde0:	6279      	str	r1, [r7, #36]	@ 0x24
 800bde2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bde6:	b2d2      	uxtb	r2, r2
 800bde8:	701a      	strb	r2, [r3, #0]
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	09db      	lsrs	r3, r3, #7
 800bdee:	623b      	str	r3, [r7, #32]
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	2b7f      	cmp	r3, #127	@ 0x7f
 800bdf4:	d8f0      	bhi.n	800bdd8 <_TrySendOverflowPacket+0x64>
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf8:	1c5a      	adds	r2, r3, #1
 800bdfa:	627a      	str	r2, [r7, #36]	@ 0x24
 800bdfc:	6a3a      	ldr	r2, [r7, #32]
 800bdfe:	b2d2      	uxtb	r2, r2
 800be00:	701a      	strb	r2, [r3, #0]
 800be02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be04:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800be06:	4b13      	ldr	r3, [pc, #76]	@ (800be54 <_TrySendOverflowPacket+0xe0>)
 800be08:	785b      	ldrb	r3, [r3, #1]
 800be0a:	4618      	mov	r0, r3
 800be0c:	1d3b      	adds	r3, r7, #4
 800be0e:	69fa      	ldr	r2, [r7, #28]
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	461a      	mov	r2, r3
 800be14:	1d3b      	adds	r3, r7, #4
 800be16:	4619      	mov	r1, r3
 800be18:	f7f4 f9e2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800be1c:	4603      	mov	r3, r0
 800be1e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800be20:	f7ff fcd0 	bl	800b7c4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d009      	beq.n	800be3e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800be2a:	4a0a      	ldr	r2, [pc, #40]	@ (800be54 <_TrySendOverflowPacket+0xe0>)
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800be30:	4b08      	ldr	r3, [pc, #32]	@ (800be54 <_TrySendOverflowPacket+0xe0>)
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	3b01      	subs	r3, #1
 800be36:	b2da      	uxtb	r2, r3
 800be38:	4b06      	ldr	r3, [pc, #24]	@ (800be54 <_TrySendOverflowPacket+0xe0>)
 800be3a:	701a      	strb	r2, [r3, #0]
 800be3c:	e004      	b.n	800be48 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800be3e:	4b05      	ldr	r3, [pc, #20]	@ (800be54 <_TrySendOverflowPacket+0xe0>)
 800be40:	695b      	ldr	r3, [r3, #20]
 800be42:	3301      	adds	r3, #1
 800be44:	4a03      	ldr	r2, [pc, #12]	@ (800be54 <_TrySendOverflowPacket+0xe0>)
 800be46:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800be48:	693b      	ldr	r3, [r7, #16]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3730      	adds	r7, #48	@ 0x30
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	200148c4 	.word	0x200148c4
 800be58:	e0001004 	.word	0xe0001004

0800be5c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08a      	sub	sp, #40	@ 0x28
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800be68:	4b96      	ldr	r3, [pc, #600]	@ (800c0c4 <_SendPacket+0x268>)
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d010      	beq.n	800be92 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800be70:	4b94      	ldr	r3, [pc, #592]	@ (800c0c4 <_SendPacket+0x268>)
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	f000 8130 	beq.w	800c0da <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800be7a:	4b92      	ldr	r3, [pc, #584]	@ (800c0c4 <_SendPacket+0x268>)
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d109      	bne.n	800be96 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800be82:	f7ff ff77 	bl	800bd74 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800be86:	4b8f      	ldr	r3, [pc, #572]	@ (800c0c4 <_SendPacket+0x268>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	f040 8127 	bne.w	800c0de <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 800be90:	e001      	b.n	800be96 <_SendPacket+0x3a>
    goto Send;
 800be92:	bf00      	nop
 800be94:	e000      	b.n	800be98 <_SendPacket+0x3c>
Send:
 800be96:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b1f      	cmp	r3, #31
 800be9c:	d809      	bhi.n	800beb2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800be9e:	4b89      	ldr	r3, [pc, #548]	@ (800c0c4 <_SendPacket+0x268>)
 800bea0:	69da      	ldr	r2, [r3, #28]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	fa22 f303 	lsr.w	r3, r2, r3
 800bea8:	f003 0301 	and.w	r3, r3, #1
 800beac:	2b00      	cmp	r3, #0
 800beae:	f040 8118 	bne.w	800c0e2 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b17      	cmp	r3, #23
 800beb6:	d807      	bhi.n	800bec8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	3b01      	subs	r3, #1
 800bebc:	60fb      	str	r3, [r7, #12]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	701a      	strb	r2, [r3, #0]
 800bec6:	e0c4      	b.n	800c052 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	1ad3      	subs	r3, r2, r3
 800bece:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	2b7f      	cmp	r3, #127	@ 0x7f
 800bed4:	d912      	bls.n	800befc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	09da      	lsrs	r2, r3, #7
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	3b01      	subs	r3, #1
 800bede:	60fb      	str	r3, [r7, #12]
 800bee0:	b2d2      	uxtb	r2, r2
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	3a01      	subs	r2, #1
 800beee:	60fa      	str	r2, [r7, #12]
 800bef0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	701a      	strb	r2, [r3, #0]
 800befa:	e006      	b.n	800bf0a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	3b01      	subs	r3, #1
 800bf00:	60fb      	str	r3, [r7, #12]
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2b7e      	cmp	r3, #126	@ 0x7e
 800bf0e:	d807      	bhi.n	800bf20 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	3b01      	subs	r3, #1
 800bf14:	60fb      	str	r3, [r7, #12]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	701a      	strb	r2, [r3, #0]
 800bf1e:	e098      	b.n	800c052 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf26:	d212      	bcs.n	800bf4e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	09da      	lsrs	r2, r3, #7
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	60fb      	str	r3, [r7, #12]
 800bf32:	b2d2      	uxtb	r2, r2
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	3a01      	subs	r2, #1
 800bf40:	60fa      	str	r2, [r7, #12]
 800bf42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bf46:	b2da      	uxtb	r2, r3
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	701a      	strb	r2, [r3, #0]
 800bf4c:	e081      	b.n	800c052 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf54:	d21d      	bcs.n	800bf92 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	0b9a      	lsrs	r2, r3, #14
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	b2d2      	uxtb	r2, r2
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	09db      	lsrs	r3, r3, #7
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	3a01      	subs	r2, #1
 800bf70:	60fa      	str	r2, [r7, #12]
 800bf72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bf76:	b2da      	uxtb	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	3a01      	subs	r2, #1
 800bf84:	60fa      	str	r2, [r7, #12]
 800bf86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bf8a:	b2da      	uxtb	r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	701a      	strb	r2, [r3, #0]
 800bf90:	e05f      	b.n	800c052 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf98:	d228      	bcs.n	800bfec <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	0d5a      	lsrs	r2, r3, #21
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	60fb      	str	r3, [r7, #12]
 800bfa4:	b2d2      	uxtb	r2, r2
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	0b9b      	lsrs	r3, r3, #14
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	3a01      	subs	r2, #1
 800bfb4:	60fa      	str	r2, [r7, #12]
 800bfb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bfba:	b2da      	uxtb	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	09db      	lsrs	r3, r3, #7
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	3a01      	subs	r2, #1
 800bfca:	60fa      	str	r2, [r7, #12]
 800bfcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	3a01      	subs	r2, #1
 800bfde:	60fa      	str	r2, [r7, #12]
 800bfe0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bfe4:	b2da      	uxtb	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	701a      	strb	r2, [r3, #0]
 800bfea:	e032      	b.n	800c052 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	0f1a      	lsrs	r2, r3, #28
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	3b01      	subs	r3, #1
 800bff4:	60fb      	str	r3, [r7, #12]
 800bff6:	b2d2      	uxtb	r2, r2
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	0d5b      	lsrs	r3, r3, #21
 800c000:	b2db      	uxtb	r3, r3
 800c002:	68fa      	ldr	r2, [r7, #12]
 800c004:	3a01      	subs	r2, #1
 800c006:	60fa      	str	r2, [r7, #12]
 800c008:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c00c:	b2da      	uxtb	r2, r3
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	0b9b      	lsrs	r3, r3, #14
 800c016:	b2db      	uxtb	r3, r3
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	3a01      	subs	r2, #1
 800c01c:	60fa      	str	r2, [r7, #12]
 800c01e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c022:	b2da      	uxtb	r2, r3
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	09db      	lsrs	r3, r3, #7
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	3a01      	subs	r2, #1
 800c032:	60fa      	str	r2, [r7, #12]
 800c034:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	b2db      	uxtb	r3, r3
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	3a01      	subs	r2, #1
 800c046:	60fa      	str	r2, [r7, #12]
 800c048:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c052:	4b1d      	ldr	r3, [pc, #116]	@ (800c0c8 <_SendPacket+0x26c>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c058:	4b1a      	ldr	r3, [pc, #104]	@ (800c0c4 <_SendPacket+0x268>)
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	69ba      	ldr	r2, [r7, #24]
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	627b      	str	r3, [r7, #36]	@ 0x24
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	623b      	str	r3, [r7, #32]
 800c06a:	e00b      	b.n	800c084 <_SendPacket+0x228>
 800c06c:	6a3b      	ldr	r3, [r7, #32]
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c072:	1c59      	adds	r1, r3, #1
 800c074:	6279      	str	r1, [r7, #36]	@ 0x24
 800c076:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c07a:	b2d2      	uxtb	r2, r2
 800c07c:	701a      	strb	r2, [r3, #0]
 800c07e:	6a3b      	ldr	r3, [r7, #32]
 800c080:	09db      	lsrs	r3, r3, #7
 800c082:	623b      	str	r3, [r7, #32]
 800c084:	6a3b      	ldr	r3, [r7, #32]
 800c086:	2b7f      	cmp	r3, #127	@ 0x7f
 800c088:	d8f0      	bhi.n	800c06c <_SendPacket+0x210>
 800c08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08c:	1c5a      	adds	r2, r3, #1
 800c08e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c090:	6a3a      	ldr	r2, [r7, #32]
 800c092:	b2d2      	uxtb	r2, r2
 800c094:	701a      	strb	r2, [r3, #0]
 800c096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c098:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800c09a:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c4 <_SendPacket+0x268>)
 800c09c:	785b      	ldrb	r3, [r3, #1]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	1ad3      	subs	r3, r2, r3
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	68f9      	ldr	r1, [r7, #12]
 800c0aa:	f7f4 f899 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c0ae:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800c0b0:	f7ff fb88 	bl	800b7c4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d008      	beq.n	800c0cc <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c0ba:	4a02      	ldr	r2, [pc, #8]	@ (800c0c4 <_SendPacket+0x268>)
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	60d3      	str	r3, [r2, #12]
 800c0c0:	e010      	b.n	800c0e4 <_SendPacket+0x288>
 800c0c2:	bf00      	nop
 800c0c4:	200148c4 	.word	0x200148c4
 800c0c8:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800c0cc:	4b19      	ldr	r3, [pc, #100]	@ (800c134 <_SendPacket+0x2d8>)
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	b2da      	uxtb	r2, r3
 800c0d4:	4b17      	ldr	r3, [pc, #92]	@ (800c134 <_SendPacket+0x2d8>)
 800c0d6:	701a      	strb	r2, [r3, #0]
 800c0d8:	e004      	b.n	800c0e4 <_SendPacket+0x288>
    goto SendDone;
 800c0da:	bf00      	nop
 800c0dc:	e002      	b.n	800c0e4 <_SendPacket+0x288>
      goto SendDone;
 800c0de:	bf00      	nop
 800c0e0:	e000      	b.n	800c0e4 <_SendPacket+0x288>
      goto SendDone;
 800c0e2:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800c0e4:	4b13      	ldr	r3, [pc, #76]	@ (800c134 <_SendPacket+0x2d8>)
 800c0e6:	7e1b      	ldrb	r3, [r3, #24]
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4a13      	ldr	r2, [pc, #76]	@ (800c138 <_SendPacket+0x2dc>)
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	005b      	lsls	r3, r3, #1
 800c0f0:	440b      	add	r3, r1
 800c0f2:	00db      	lsls	r3, r3, #3
 800c0f4:	4413      	add	r3, r2
 800c0f6:	336c      	adds	r3, #108	@ 0x6c
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c134 <_SendPacket+0x2d8>)
 800c0fc:	7e1b      	ldrb	r3, [r3, #24]
 800c0fe:	4618      	mov	r0, r3
 800c100:	490d      	ldr	r1, [pc, #52]	@ (800c138 <_SendPacket+0x2dc>)
 800c102:	4603      	mov	r3, r0
 800c104:	005b      	lsls	r3, r3, #1
 800c106:	4403      	add	r3, r0
 800c108:	00db      	lsls	r3, r3, #3
 800c10a:	440b      	add	r3, r1
 800c10c:	3370      	adds	r3, #112	@ 0x70
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	429a      	cmp	r2, r3
 800c112:	d00b      	beq.n	800c12c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800c114:	4b07      	ldr	r3, [pc, #28]	@ (800c134 <_SendPacket+0x2d8>)
 800c116:	789b      	ldrb	r3, [r3, #2]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d107      	bne.n	800c12c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800c11c:	4b05      	ldr	r3, [pc, #20]	@ (800c134 <_SendPacket+0x2d8>)
 800c11e:	2201      	movs	r2, #1
 800c120:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800c122:	f7ff fdb9 	bl	800bc98 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800c126:	4b03      	ldr	r3, [pc, #12]	@ (800c134 <_SendPacket+0x2d8>)
 800c128:	2200      	movs	r2, #0
 800c12a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800c12c:	bf00      	nop
 800c12e:	3728      	adds	r7, #40	@ 0x28
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	200148c4 	.word	0x200148c4
 800c138:	2001440c 	.word	0x2001440c

0800c13c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c144:	f3ef 8311 	mrs	r3, BASEPRI
 800c148:	f04f 0120 	mov.w	r1, #32
 800c14c:	f381 8811 	msr	BASEPRI, r1
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	4808      	ldr	r0, [pc, #32]	@ (800c174 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800c154:	f7ff fd94 	bl	800bc80 <_PreparePacket>
 800c158:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	68b9      	ldr	r1, [r7, #8]
 800c15e:	68b8      	ldr	r0, [r7, #8]
 800c160:	f7ff fe7c 	bl	800be5c <_SendPacket>
  RECORD_END();
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f383 8811 	msr	BASEPRI, r3
}
 800c16a:	bf00      	nop
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	200148f4 	.word	0x200148f4

0800c178 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800c178:	b580      	push	{r7, lr}
 800c17a:	b088      	sub	sp, #32
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c182:	f3ef 8311 	mrs	r3, BASEPRI
 800c186:	f04f 0120 	mov.w	r1, #32
 800c18a:	f381 8811 	msr	BASEPRI, r1
 800c18e:	617b      	str	r3, [r7, #20]
 800c190:	4816      	ldr	r0, [pc, #88]	@ (800c1ec <SEGGER_SYSVIEW_RecordU32+0x74>)
 800c192:	f7ff fd75 	bl	800bc80 <_PreparePacket>
 800c196:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	61fb      	str	r3, [r7, #28]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	61bb      	str	r3, [r7, #24]
 800c1a4:	e00b      	b.n	800c1be <SEGGER_SYSVIEW_RecordU32+0x46>
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	1c59      	adds	r1, r3, #1
 800c1ae:	61f9      	str	r1, [r7, #28]
 800c1b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c1b4:	b2d2      	uxtb	r2, r2
 800c1b6:	701a      	strb	r2, [r3, #0]
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	09db      	lsrs	r3, r3, #7
 800c1bc:	61bb      	str	r3, [r7, #24]
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1c2:	d8f0      	bhi.n	800c1a6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	61fa      	str	r2, [r7, #28]
 800c1ca:	69ba      	ldr	r2, [r7, #24]
 800c1cc:	b2d2      	uxtb	r2, r2
 800c1ce:	701a      	strb	r2, [r3, #0]
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	68f9      	ldr	r1, [r7, #12]
 800c1d8:	6938      	ldr	r0, [r7, #16]
 800c1da:	f7ff fe3f 	bl	800be5c <_SendPacket>
  RECORD_END();
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	f383 8811 	msr	BASEPRI, r3
}
 800c1e4:	bf00      	nop
 800c1e6:	3720      	adds	r7, #32
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	200148f4 	.word	0x200148f4

0800c1f0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b08c      	sub	sp, #48	@ 0x30
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c1fc:	f3ef 8311 	mrs	r3, BASEPRI
 800c200:	f04f 0120 	mov.w	r1, #32
 800c204:	f381 8811 	msr	BASEPRI, r1
 800c208:	61fb      	str	r3, [r7, #28]
 800c20a:	4825      	ldr	r0, [pc, #148]	@ (800c2a0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800c20c:	f7ff fd38 	bl	800bc80 <_PreparePacket>
 800c210:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c21e:	e00b      	b.n	800c238 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800c220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c222:	b2da      	uxtb	r2, r3
 800c224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c226:	1c59      	adds	r1, r3, #1
 800c228:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c22a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c22e:	b2d2      	uxtb	r2, r2
 800c230:	701a      	strb	r2, [r3, #0]
 800c232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c234:	09db      	lsrs	r3, r3, #7
 800c236:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c23c:	d8f0      	bhi.n	800c220 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800c23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c244:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c246:	b2d2      	uxtb	r2, r2
 800c248:	701a      	strb	r2, [r3, #0]
 800c24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c24c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	627b      	str	r3, [r7, #36]	@ 0x24
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	623b      	str	r3, [r7, #32]
 800c256:	e00b      	b.n	800c270 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800c258:	6a3b      	ldr	r3, [r7, #32]
 800c25a:	b2da      	uxtb	r2, r3
 800c25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25e:	1c59      	adds	r1, r3, #1
 800c260:	6279      	str	r1, [r7, #36]	@ 0x24
 800c262:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c266:	b2d2      	uxtb	r2, r2
 800c268:	701a      	strb	r2, [r3, #0]
 800c26a:	6a3b      	ldr	r3, [r7, #32]
 800c26c:	09db      	lsrs	r3, r3, #7
 800c26e:	623b      	str	r3, [r7, #32]
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	2b7f      	cmp	r3, #127	@ 0x7f
 800c274:	d8f0      	bhi.n	800c258 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800c276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c278:	1c5a      	adds	r2, r3, #1
 800c27a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c27c:	6a3a      	ldr	r2, [r7, #32]
 800c27e:	b2d2      	uxtb	r2, r2
 800c280:	701a      	strb	r2, [r3, #0]
 800c282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c284:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	6979      	ldr	r1, [r7, #20]
 800c28a:	69b8      	ldr	r0, [r7, #24]
 800c28c:	f7ff fde6 	bl	800be5c <_SendPacket>
  RECORD_END();
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	f383 8811 	msr	BASEPRI, r3
}
 800c296:	bf00      	nop
 800c298:	3730      	adds	r7, #48	@ 0x30
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	200148f4 	.word	0x200148f4

0800c2a4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b08c      	sub	sp, #48	@ 0x30
 800c2a8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800c2aa:	4b59      	ldr	r3, [pc, #356]	@ (800c410 <SEGGER_SYSVIEW_Start+0x16c>)
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800c2b0:	f3ef 8311 	mrs	r3, BASEPRI
 800c2b4:	f04f 0120 	mov.w	r1, #32
 800c2b8:	f381 8811 	msr	BASEPRI, r1
 800c2bc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800c2be:	4b54      	ldr	r3, [pc, #336]	@ (800c410 <SEGGER_SYSVIEW_Start+0x16c>)
 800c2c0:	785b      	ldrb	r3, [r3, #1]
 800c2c2:	220a      	movs	r2, #10
 800c2c4:	4953      	ldr	r1, [pc, #332]	@ (800c414 <SEGGER_SYSVIEW_Start+0x170>)
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7f3 ff8a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800c2d2:	f7ff fa77 	bl	800b7c4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800c2d6:	200a      	movs	r0, #10
 800c2d8:	f7ff ff30 	bl	800c13c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c2dc:	f3ef 8311 	mrs	r3, BASEPRI
 800c2e0:	f04f 0120 	mov.w	r1, #32
 800c2e4:	f381 8811 	msr	BASEPRI, r1
 800c2e8:	60bb      	str	r3, [r7, #8]
 800c2ea:	484b      	ldr	r0, [pc, #300]	@ (800c418 <SEGGER_SYSVIEW_Start+0x174>)
 800c2ec:	f7ff fcc8 	bl	800bc80 <_PreparePacket>
 800c2f0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2fa:	4b45      	ldr	r3, [pc, #276]	@ (800c410 <SEGGER_SYSVIEW_Start+0x16c>)
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c300:	e00b      	b.n	800c31a <SEGGER_SYSVIEW_Start+0x76>
 800c302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c304:	b2da      	uxtb	r2, r3
 800c306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c308:	1c59      	adds	r1, r3, #1
 800c30a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c30c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c310:	b2d2      	uxtb	r2, r2
 800c312:	701a      	strb	r2, [r3, #0]
 800c314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c316:	09db      	lsrs	r3, r3, #7
 800c318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c31c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c31e:	d8f0      	bhi.n	800c302 <SEGGER_SYSVIEW_Start+0x5e>
 800c320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c322:	1c5a      	adds	r2, r3, #1
 800c324:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c328:	b2d2      	uxtb	r2, r2
 800c32a:	701a      	strb	r2, [r3, #0]
 800c32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c32e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	627b      	str	r3, [r7, #36]	@ 0x24
 800c334:	4b36      	ldr	r3, [pc, #216]	@ (800c410 <SEGGER_SYSVIEW_Start+0x16c>)
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	623b      	str	r3, [r7, #32]
 800c33a:	e00b      	b.n	800c354 <SEGGER_SYSVIEW_Start+0xb0>
 800c33c:	6a3b      	ldr	r3, [r7, #32]
 800c33e:	b2da      	uxtb	r2, r3
 800c340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c342:	1c59      	adds	r1, r3, #1
 800c344:	6279      	str	r1, [r7, #36]	@ 0x24
 800c346:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c34a:	b2d2      	uxtb	r2, r2
 800c34c:	701a      	strb	r2, [r3, #0]
 800c34e:	6a3b      	ldr	r3, [r7, #32]
 800c350:	09db      	lsrs	r3, r3, #7
 800c352:	623b      	str	r3, [r7, #32]
 800c354:	6a3b      	ldr	r3, [r7, #32]
 800c356:	2b7f      	cmp	r3, #127	@ 0x7f
 800c358:	d8f0      	bhi.n	800c33c <SEGGER_SYSVIEW_Start+0x98>
 800c35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35c:	1c5a      	adds	r2, r3, #1
 800c35e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c360:	6a3a      	ldr	r2, [r7, #32]
 800c362:	b2d2      	uxtb	r2, r2
 800c364:	701a      	strb	r2, [r3, #0]
 800c366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c368:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	61fb      	str	r3, [r7, #28]
 800c36e:	4b28      	ldr	r3, [pc, #160]	@ (800c410 <SEGGER_SYSVIEW_Start+0x16c>)
 800c370:	691b      	ldr	r3, [r3, #16]
 800c372:	61bb      	str	r3, [r7, #24]
 800c374:	e00b      	b.n	800c38e <SEGGER_SYSVIEW_Start+0xea>
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	b2da      	uxtb	r2, r3
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	1c59      	adds	r1, r3, #1
 800c37e:	61f9      	str	r1, [r7, #28]
 800c380:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c384:	b2d2      	uxtb	r2, r2
 800c386:	701a      	strb	r2, [r3, #0]
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	09db      	lsrs	r3, r3, #7
 800c38c:	61bb      	str	r3, [r7, #24]
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	2b7f      	cmp	r3, #127	@ 0x7f
 800c392:	d8f0      	bhi.n	800c376 <SEGGER_SYSVIEW_Start+0xd2>
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	1c5a      	adds	r2, r3, #1
 800c398:	61fa      	str	r2, [r7, #28]
 800c39a:	69ba      	ldr	r2, [r7, #24]
 800c39c:	b2d2      	uxtb	r2, r2
 800c39e:	701a      	strb	r2, [r3, #0]
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	617b      	str	r3, [r7, #20]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	613b      	str	r3, [r7, #16]
 800c3ac:	e00b      	b.n	800c3c6 <SEGGER_SYSVIEW_Start+0x122>
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	1c59      	adds	r1, r3, #1
 800c3b6:	6179      	str	r1, [r7, #20]
 800c3b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c3bc:	b2d2      	uxtb	r2, r2
 800c3be:	701a      	strb	r2, [r3, #0]
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	09db      	lsrs	r3, r3, #7
 800c3c4:	613b      	str	r3, [r7, #16]
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3ca:	d8f0      	bhi.n	800c3ae <SEGGER_SYSVIEW_Start+0x10a>
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	1c5a      	adds	r2, r3, #1
 800c3d0:	617a      	str	r2, [r7, #20]
 800c3d2:	693a      	ldr	r2, [r7, #16]
 800c3d4:	b2d2      	uxtb	r2, r2
 800c3d6:	701a      	strb	r2, [r3, #0]
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c3dc:	2218      	movs	r2, #24
 800c3de:	6839      	ldr	r1, [r7, #0]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f7ff fd3b 	bl	800be5c <_SendPacket>
      RECORD_END();
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c3ec:	4b08      	ldr	r3, [pc, #32]	@ (800c410 <SEGGER_SYSVIEW_Start+0x16c>)
 800c3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800c3f4:	4b06      	ldr	r3, [pc, #24]	@ (800c410 <SEGGER_SYSVIEW_Start+0x16c>)
 800c3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3f8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800c3fa:	f000 f9c7 	bl	800c78c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800c3fe:	f000 f9b1 	bl	800c764 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800c402:	f000 fcfd 	bl	800ce00 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800c406:	bf00      	nop
 800c408:	3730      	adds	r7, #48	@ 0x30
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	200148c4 	.word	0x200148c4
 800c414:	0800e368 	.word	0x0800e368
 800c418:	200148f4 	.word	0x200148f4

0800c41c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c422:	f3ef 8311 	mrs	r3, BASEPRI
 800c426:	f04f 0120 	mov.w	r1, #32
 800c42a:	f381 8811 	msr	BASEPRI, r1
 800c42e:	607b      	str	r3, [r7, #4]
 800c430:	480b      	ldr	r0, [pc, #44]	@ (800c460 <SEGGER_SYSVIEW_Stop+0x44>)
 800c432:	f7ff fc25 	bl	800bc80 <_PreparePacket>
 800c436:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800c438:	4b0a      	ldr	r3, [pc, #40]	@ (800c464 <SEGGER_SYSVIEW_Stop+0x48>)
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d007      	beq.n	800c450 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800c440:	220b      	movs	r2, #11
 800c442:	6839      	ldr	r1, [r7, #0]
 800c444:	6838      	ldr	r0, [r7, #0]
 800c446:	f7ff fd09 	bl	800be5c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800c44a:	4b06      	ldr	r3, [pc, #24]	@ (800c464 <SEGGER_SYSVIEW_Stop+0x48>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f383 8811 	msr	BASEPRI, r3
}
 800c456:	bf00      	nop
 800c458:	3708      	adds	r7, #8
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	200148f4 	.word	0x200148f4
 800c464:	200148c4 	.word	0x200148c4

0800c468 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800c468:	b580      	push	{r7, lr}
 800c46a:	b08c      	sub	sp, #48	@ 0x30
 800c46c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c46e:	f3ef 8311 	mrs	r3, BASEPRI
 800c472:	f04f 0120 	mov.w	r1, #32
 800c476:	f381 8811 	msr	BASEPRI, r1
 800c47a:	60fb      	str	r3, [r7, #12]
 800c47c:	4845      	ldr	r0, [pc, #276]	@ (800c594 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800c47e:	f7ff fbff 	bl	800bc80 <_PreparePacket>
 800c482:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c48c:	4b42      	ldr	r3, [pc, #264]	@ (800c598 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c492:	e00b      	b.n	800c4ac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800c494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c496:	b2da      	uxtb	r2, r3
 800c498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c49a:	1c59      	adds	r1, r3, #1
 800c49c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c49e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c4a2:	b2d2      	uxtb	r2, r2
 800c4a4:	701a      	strb	r2, [r3, #0]
 800c4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a8:	09db      	lsrs	r3, r3, #7
 800c4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4b0:	d8f0      	bhi.n	800c494 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800c4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b4:	1c5a      	adds	r2, r3, #1
 800c4b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c4b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4ba:	b2d2      	uxtb	r2, r2
 800c4bc:	701a      	strb	r2, [r3, #0]
 800c4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4c6:	4b34      	ldr	r3, [pc, #208]	@ (800c598 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	623b      	str	r3, [r7, #32]
 800c4cc:	e00b      	b.n	800c4e6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800c4ce:	6a3b      	ldr	r3, [r7, #32]
 800c4d0:	b2da      	uxtb	r2, r3
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d4:	1c59      	adds	r1, r3, #1
 800c4d6:	6279      	str	r1, [r7, #36]	@ 0x24
 800c4d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c4dc:	b2d2      	uxtb	r2, r2
 800c4de:	701a      	strb	r2, [r3, #0]
 800c4e0:	6a3b      	ldr	r3, [r7, #32]
 800c4e2:	09db      	lsrs	r3, r3, #7
 800c4e4:	623b      	str	r3, [r7, #32]
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4ea:	d8f0      	bhi.n	800c4ce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ee:	1c5a      	adds	r2, r3, #1
 800c4f0:	627a      	str	r2, [r7, #36]	@ 0x24
 800c4f2:	6a3a      	ldr	r2, [r7, #32]
 800c4f4:	b2d2      	uxtb	r2, r2
 800c4f6:	701a      	strb	r2, [r3, #0]
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	61fb      	str	r3, [r7, #28]
 800c500:	4b25      	ldr	r3, [pc, #148]	@ (800c598 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	61bb      	str	r3, [r7, #24]
 800c506:	e00b      	b.n	800c520 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	b2da      	uxtb	r2, r3
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	1c59      	adds	r1, r3, #1
 800c510:	61f9      	str	r1, [r7, #28]
 800c512:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c516:	b2d2      	uxtb	r2, r2
 800c518:	701a      	strb	r2, [r3, #0]
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	09db      	lsrs	r3, r3, #7
 800c51e:	61bb      	str	r3, [r7, #24]
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	2b7f      	cmp	r3, #127	@ 0x7f
 800c524:	d8f0      	bhi.n	800c508 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800c526:	69fb      	ldr	r3, [r7, #28]
 800c528:	1c5a      	adds	r2, r3, #1
 800c52a:	61fa      	str	r2, [r7, #28]
 800c52c:	69ba      	ldr	r2, [r7, #24]
 800c52e:	b2d2      	uxtb	r2, r2
 800c530:	701a      	strb	r2, [r3, #0]
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	617b      	str	r3, [r7, #20]
 800c53a:	2300      	movs	r3, #0
 800c53c:	613b      	str	r3, [r7, #16]
 800c53e:	e00b      	b.n	800c558 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	b2da      	uxtb	r2, r3
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	1c59      	adds	r1, r3, #1
 800c548:	6179      	str	r1, [r7, #20]
 800c54a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c54e:	b2d2      	uxtb	r2, r2
 800c550:	701a      	strb	r2, [r3, #0]
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	09db      	lsrs	r3, r3, #7
 800c556:	613b      	str	r3, [r7, #16]
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c55c:	d8f0      	bhi.n	800c540 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	1c5a      	adds	r2, r3, #1
 800c562:	617a      	str	r2, [r7, #20]
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	b2d2      	uxtb	r2, r2
 800c568:	701a      	strb	r2, [r3, #0]
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c56e:	2218      	movs	r2, #24
 800c570:	6879      	ldr	r1, [r7, #4]
 800c572:	68b8      	ldr	r0, [r7, #8]
 800c574:	f7ff fc72 	bl	800be5c <_SendPacket>
  RECORD_END();
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c57e:	4b06      	ldr	r3, [pc, #24]	@ (800c598 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c582:	2b00      	cmp	r3, #0
 800c584:	d002      	beq.n	800c58c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800c586:	4b04      	ldr	r3, [pc, #16]	@ (800c598 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c58a:	4798      	blx	r3
  }
}
 800c58c:	bf00      	nop
 800c58e:	3730      	adds	r7, #48	@ 0x30
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	200148f4 	.word	0x200148f4
 800c598:	200148c4 	.word	0x200148c4

0800c59c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b092      	sub	sp, #72	@ 0x48
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800c5a4:	f3ef 8311 	mrs	r3, BASEPRI
 800c5a8:	f04f 0120 	mov.w	r1, #32
 800c5ac:	f381 8811 	msr	BASEPRI, r1
 800c5b0:	617b      	str	r3, [r7, #20]
 800c5b2:	486a      	ldr	r0, [pc, #424]	@ (800c75c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800c5b4:	f7ff fb64 	bl	800bc80 <_PreparePacket>
 800c5b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	4b66      	ldr	r3, [pc, #408]	@ (800c760 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5ce:	e00b      	b.n	800c5e8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800c5d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5d6:	1c59      	adds	r1, r3, #1
 800c5d8:	6479      	str	r1, [r7, #68]	@ 0x44
 800c5da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c5de:	b2d2      	uxtb	r2, r2
 800c5e0:	701a      	strb	r2, [r3, #0]
 800c5e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5e4:	09db      	lsrs	r3, r3, #7
 800c5e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5ea:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5ec:	d8f0      	bhi.n	800c5d0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800c5ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5f0:	1c5a      	adds	r2, r3, #1
 800c5f2:	647a      	str	r2, [r7, #68]	@ 0x44
 800c5f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c5f6:	b2d2      	uxtb	r2, r2
 800c5f8:	701a      	strb	r2, [r3, #0]
 800c5fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c608:	e00b      	b.n	800c622 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800c60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c60c:	b2da      	uxtb	r2, r3
 800c60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c610:	1c59      	adds	r1, r3, #1
 800c612:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800c614:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c618:	b2d2      	uxtb	r2, r2
 800c61a:	701a      	strb	r2, [r3, #0]
 800c61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c61e:	09db      	lsrs	r3, r3, #7
 800c620:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c624:	2b7f      	cmp	r3, #127	@ 0x7f
 800c626:	d8f0      	bhi.n	800c60a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800c628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c62a:	1c5a      	adds	r2, r3, #1
 800c62c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c62e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c630:	b2d2      	uxtb	r2, r2
 800c632:	701a      	strb	r2, [r3, #0]
 800c634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c636:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	2220      	movs	r2, #32
 800c63e:	4619      	mov	r1, r3
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f7ff faed 	bl	800bc20 <_EncodeStr>
 800c646:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800c648:	2209      	movs	r2, #9
 800c64a:	68f9      	ldr	r1, [r7, #12]
 800c64c:	6938      	ldr	r0, [r7, #16]
 800c64e:	f7ff fc05 	bl	800be5c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	637b      	str	r3, [r7, #52]	@ 0x34
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	4b40      	ldr	r3, [pc, #256]	@ (800c760 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c660:	691b      	ldr	r3, [r3, #16]
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	633b      	str	r3, [r7, #48]	@ 0x30
 800c666:	e00b      	b.n	800c680 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800c668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c66a:	b2da      	uxtb	r2, r3
 800c66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c66e:	1c59      	adds	r1, r3, #1
 800c670:	6379      	str	r1, [r7, #52]	@ 0x34
 800c672:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c676:	b2d2      	uxtb	r2, r2
 800c678:	701a      	strb	r2, [r3, #0]
 800c67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c67c:	09db      	lsrs	r3, r3, #7
 800c67e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c682:	2b7f      	cmp	r3, #127	@ 0x7f
 800c684:	d8f0      	bhi.n	800c668 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800c686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c688:	1c5a      	adds	r2, r3, #1
 800c68a:	637a      	str	r2, [r7, #52]	@ 0x34
 800c68c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c68e:	b2d2      	uxtb	r2, r2
 800c690:	701a      	strb	r2, [r3, #0]
 800c692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c694:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6a0:	e00b      	b.n	800c6ba <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800c6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a8:	1c59      	adds	r1, r3, #1
 800c6aa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c6ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c6b0:	b2d2      	uxtb	r2, r2
 800c6b2:	701a      	strb	r2, [r3, #0]
 800c6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b6:	09db      	lsrs	r3, r3, #7
 800c6b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6bc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6be:	d8f0      	bhi.n	800c6a2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800c6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c2:	1c5a      	adds	r2, r3, #1
 800c6c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c6c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6c8:	b2d2      	uxtb	r2, r2
 800c6ca:	701a      	strb	r2, [r3, #0]
 800c6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	623b      	str	r3, [r7, #32]
 800c6da:	e00b      	b.n	800c6f4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800c6dc:	6a3b      	ldr	r3, [r7, #32]
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e2:	1c59      	adds	r1, r3, #1
 800c6e4:	6279      	str	r1, [r7, #36]	@ 0x24
 800c6e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c6ea:	b2d2      	uxtb	r2, r2
 800c6ec:	701a      	strb	r2, [r3, #0]
 800c6ee:	6a3b      	ldr	r3, [r7, #32]
 800c6f0:	09db      	lsrs	r3, r3, #7
 800c6f2:	623b      	str	r3, [r7, #32]
 800c6f4:	6a3b      	ldr	r3, [r7, #32]
 800c6f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6f8:	d8f0      	bhi.n	800c6dc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fc:	1c5a      	adds	r2, r3, #1
 800c6fe:	627a      	str	r2, [r7, #36]	@ 0x24
 800c700:	6a3a      	ldr	r2, [r7, #32]
 800c702:	b2d2      	uxtb	r2, r2
 800c704:	701a      	strb	r2, [r3, #0]
 800c706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c708:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	61fb      	str	r3, [r7, #28]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	695b      	ldr	r3, [r3, #20]
 800c712:	61bb      	str	r3, [r7, #24]
 800c714:	e00b      	b.n	800c72e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	1c59      	adds	r1, r3, #1
 800c71e:	61f9      	str	r1, [r7, #28]
 800c720:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c724:	b2d2      	uxtb	r2, r2
 800c726:	701a      	strb	r2, [r3, #0]
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	09db      	lsrs	r3, r3, #7
 800c72c:	61bb      	str	r3, [r7, #24]
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	2b7f      	cmp	r3, #127	@ 0x7f
 800c732:	d8f0      	bhi.n	800c716 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	1c5a      	adds	r2, r3, #1
 800c738:	61fa      	str	r2, [r7, #28]
 800c73a:	69ba      	ldr	r2, [r7, #24]
 800c73c:	b2d2      	uxtb	r2, r2
 800c73e:	701a      	strb	r2, [r3, #0]
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800c744:	2215      	movs	r2, #21
 800c746:	68f9      	ldr	r1, [r7, #12]
 800c748:	6938      	ldr	r0, [r7, #16]
 800c74a:	f7ff fb87 	bl	800be5c <_SendPacket>
  RECORD_END();
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	f383 8811 	msr	BASEPRI, r3
}
 800c754:	bf00      	nop
 800c756:	3748      	adds	r7, #72	@ 0x48
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	200148f4 	.word	0x200148f4
 800c760:	200148c4 	.word	0x200148c4

0800c764 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800c764:	b580      	push	{r7, lr}
 800c766:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800c768:	4b07      	ldr	r3, [pc, #28]	@ (800c788 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c76a:	6a1b      	ldr	r3, [r3, #32]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d008      	beq.n	800c782 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800c770:	4b05      	ldr	r3, [pc, #20]	@ (800c788 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c772:	6a1b      	ldr	r3, [r3, #32]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d003      	beq.n	800c782 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800c77a:	4b03      	ldr	r3, [pc, #12]	@ (800c788 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	4798      	blx	r3
  }
}
 800c782:	bf00      	nop
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	200148c4 	.word	0x200148c4

0800c78c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800c78c:	b590      	push	{r4, r7, lr}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800c792:	4b15      	ldr	r3, [pc, #84]	@ (800c7e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c794:	6a1b      	ldr	r3, [r3, #32]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d01a      	beq.n	800c7d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800c79a:	4b13      	ldr	r3, [pc, #76]	@ (800c7e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c79c:	6a1b      	ldr	r3, [r3, #32]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d015      	beq.n	800c7d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800c7a4:	4b10      	ldr	r3, [pc, #64]	@ (800c7e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c7a6:	6a1b      	ldr	r3, [r3, #32]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4798      	blx	r3
 800c7ac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c7b0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800c7b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c7b6:	f04f 0200 	mov.w	r2, #0
 800c7ba:	f04f 0300 	mov.w	r3, #0
 800c7be:	000a      	movs	r2, r1
 800c7c0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c7c2:	4613      	mov	r3, r2
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	200d      	movs	r0, #13
 800c7ca:	f7ff fd11 	bl	800c1f0 <SEGGER_SYSVIEW_RecordU32x2>
 800c7ce:	e006      	b.n	800c7de <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800c7d0:	4b06      	ldr	r3, [pc, #24]	@ (800c7ec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	200c      	movs	r0, #12
 800c7d8:	f7ff fcce 	bl	800c178 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800c7dc:	bf00      	nop
 800c7de:	bf00      	nop
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd90      	pop	{r4, r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	200148c4 	.word	0x200148c4
 800c7ec:	e0001004 	.word	0xe0001004

0800c7f0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c7f6:	f3ef 8311 	mrs	r3, BASEPRI
 800c7fa:	f04f 0120 	mov.w	r1, #32
 800c7fe:	f381 8811 	msr	BASEPRI, r1
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	4819      	ldr	r0, [pc, #100]	@ (800c86c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800c806:	f7ff fa3b 	bl	800bc80 <_PreparePacket>
 800c80a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800c810:	4b17      	ldr	r3, [pc, #92]	@ (800c870 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c818:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	617b      	str	r3, [r7, #20]
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	613b      	str	r3, [r7, #16]
 800c822:	e00b      	b.n	800c83c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	b2da      	uxtb	r2, r3
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	1c59      	adds	r1, r3, #1
 800c82c:	6179      	str	r1, [r7, #20]
 800c82e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c832:	b2d2      	uxtb	r2, r2
 800c834:	701a      	strb	r2, [r3, #0]
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	09db      	lsrs	r3, r3, #7
 800c83a:	613b      	str	r3, [r7, #16]
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c840:	d8f0      	bhi.n	800c824 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	617a      	str	r2, [r7, #20]
 800c848:	693a      	ldr	r2, [r7, #16]
 800c84a:	b2d2      	uxtb	r2, r2
 800c84c:	701a      	strb	r2, [r3, #0]
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800c852:	2202      	movs	r2, #2
 800c854:	6879      	ldr	r1, [r7, #4]
 800c856:	68b8      	ldr	r0, [r7, #8]
 800c858:	f7ff fb00 	bl	800be5c <_SendPacket>
  RECORD_END();
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f383 8811 	msr	BASEPRI, r3
}
 800c862:	bf00      	nop
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	200148f4 	.word	0x200148f4
 800c870:	e000ed04 	.word	0xe000ed04

0800c874 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c87a:	f3ef 8311 	mrs	r3, BASEPRI
 800c87e:	f04f 0120 	mov.w	r1, #32
 800c882:	f381 8811 	msr	BASEPRI, r1
 800c886:	607b      	str	r3, [r7, #4]
 800c888:	4807      	ldr	r0, [pc, #28]	@ (800c8a8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800c88a:	f7ff f9f9 	bl	800bc80 <_PreparePacket>
 800c88e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800c890:	2203      	movs	r2, #3
 800c892:	6839      	ldr	r1, [r7, #0]
 800c894:	6838      	ldr	r0, [r7, #0]
 800c896:	f7ff fae1 	bl	800be5c <_SendPacket>
  RECORD_END();
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f383 8811 	msr	BASEPRI, r3
}
 800c8a0:	bf00      	nop
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	200148f4 	.word	0x200148f4

0800c8ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c8b2:	f3ef 8311 	mrs	r3, BASEPRI
 800c8b6:	f04f 0120 	mov.w	r1, #32
 800c8ba:	f381 8811 	msr	BASEPRI, r1
 800c8be:	607b      	str	r3, [r7, #4]
 800c8c0:	4807      	ldr	r0, [pc, #28]	@ (800c8e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800c8c2:	f7ff f9dd 	bl	800bc80 <_PreparePacket>
 800c8c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800c8c8:	2212      	movs	r2, #18
 800c8ca:	6839      	ldr	r1, [r7, #0]
 800c8cc:	6838      	ldr	r0, [r7, #0]
 800c8ce:	f7ff fac5 	bl	800be5c <_SendPacket>
  RECORD_END();
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f383 8811 	msr	BASEPRI, r3
}
 800c8d8:	bf00      	nop
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	200148f4 	.word	0x200148f4

0800c8e4 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b088      	sub	sp, #32
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c8ec:	f3ef 8311 	mrs	r3, BASEPRI
 800c8f0:	f04f 0120 	mov.w	r1, #32
 800c8f4:	f381 8811 	msr	BASEPRI, r1
 800c8f8:	617b      	str	r3, [r7, #20]
 800c8fa:	4817      	ldr	r0, [pc, #92]	@ (800c958 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 800c8fc:	f7ff f9c0 	bl	800bc80 <_PreparePacket>
 800c900:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	61fb      	str	r3, [r7, #28]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	61bb      	str	r3, [r7, #24]
 800c90e:	e00b      	b.n	800c928 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	b2da      	uxtb	r2, r3
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	1c59      	adds	r1, r3, #1
 800c918:	61f9      	str	r1, [r7, #28]
 800c91a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c91e:	b2d2      	uxtb	r2, r2
 800c920:	701a      	strb	r2, [r3, #0]
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	09db      	lsrs	r3, r3, #7
 800c926:	61bb      	str	r3, [r7, #24]
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c92c:	d8f0      	bhi.n	800c910 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	1c5a      	adds	r2, r3, #1
 800c932:	61fa      	str	r2, [r7, #28]
 800c934:	69ba      	ldr	r2, [r7, #24]
 800c936:	b2d2      	uxtb	r2, r2
 800c938:	701a      	strb	r2, [r3, #0]
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800c93e:	221c      	movs	r2, #28
 800c940:	68f9      	ldr	r1, [r7, #12]
 800c942:	6938      	ldr	r0, [r7, #16]
 800c944:	f7ff fa8a 	bl	800be5c <_SendPacket>
  RECORD_END();
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	f383 8811 	msr	BASEPRI, r3
}
 800c94e:	bf00      	nop
 800c950:	3720      	adds	r7, #32
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	200148f4 	.word	0x200148f4

0800c95c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b08a      	sub	sp, #40	@ 0x28
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c966:	f3ef 8311 	mrs	r3, BASEPRI
 800c96a:	f04f 0120 	mov.w	r1, #32
 800c96e:	f381 8811 	msr	BASEPRI, r1
 800c972:	617b      	str	r3, [r7, #20]
 800c974:	4824      	ldr	r0, [pc, #144]	@ (800ca08 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 800c976:	f7ff f983 	bl	800bc80 <_PreparePacket>
 800c97a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	627b      	str	r3, [r7, #36]	@ 0x24
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	623b      	str	r3, [r7, #32]
 800c988:	e00b      	b.n	800c9a2 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800c98a:	6a3b      	ldr	r3, [r7, #32]
 800c98c:	b2da      	uxtb	r2, r3
 800c98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c990:	1c59      	adds	r1, r3, #1
 800c992:	6279      	str	r1, [r7, #36]	@ 0x24
 800c994:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c998:	b2d2      	uxtb	r2, r2
 800c99a:	701a      	strb	r2, [r3, #0]
 800c99c:	6a3b      	ldr	r3, [r7, #32]
 800c99e:	09db      	lsrs	r3, r3, #7
 800c9a0:	623b      	str	r3, [r7, #32]
 800c9a2:	6a3b      	ldr	r3, [r7, #32]
 800c9a4:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9a6:	d8f0      	bhi.n	800c98a <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 800c9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9aa:	1c5a      	adds	r2, r3, #1
 800c9ac:	627a      	str	r2, [r7, #36]	@ 0x24
 800c9ae:	6a3a      	ldr	r2, [r7, #32]
 800c9b0:	b2d2      	uxtb	r2, r2
 800c9b2:	701a      	strb	r2, [r3, #0]
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	61fb      	str	r3, [r7, #28]
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	61bb      	str	r3, [r7, #24]
 800c9c0:	e00b      	b.n	800c9da <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	1c59      	adds	r1, r3, #1
 800c9ca:	61f9      	str	r1, [r7, #28]
 800c9cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c9d0:	b2d2      	uxtb	r2, r2
 800c9d2:	701a      	strb	r2, [r3, #0]
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	09db      	lsrs	r3, r3, #7
 800c9d8:	61bb      	str	r3, [r7, #24]
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9de:	d8f0      	bhi.n	800c9c2 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	1c5a      	adds	r2, r3, #1
 800c9e4:	61fa      	str	r2, [r7, #28]
 800c9e6:	69ba      	ldr	r2, [r7, #24]
 800c9e8:	b2d2      	uxtb	r2, r2
 800c9ea:	701a      	strb	r2, [r3, #0]
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800c9f0:	221c      	movs	r2, #28
 800c9f2:	68f9      	ldr	r1, [r7, #12]
 800c9f4:	6938      	ldr	r0, [r7, #16]
 800c9f6:	f7ff fa31 	bl	800be5c <_SendPacket>
  RECORD_END();
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	f383 8811 	msr	BASEPRI, r3
}
 800ca00:	bf00      	nop
 800ca02:	3728      	adds	r7, #40	@ 0x28
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	200148f4 	.word	0x200148f4

0800ca0c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ca12:	f3ef 8311 	mrs	r3, BASEPRI
 800ca16:	f04f 0120 	mov.w	r1, #32
 800ca1a:	f381 8811 	msr	BASEPRI, r1
 800ca1e:	607b      	str	r3, [r7, #4]
 800ca20:	4807      	ldr	r0, [pc, #28]	@ (800ca40 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800ca22:	f7ff f92d 	bl	800bc80 <_PreparePacket>
 800ca26:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800ca28:	2211      	movs	r2, #17
 800ca2a:	6839      	ldr	r1, [r7, #0]
 800ca2c:	6838      	ldr	r0, [r7, #0]
 800ca2e:	f7ff fa15 	bl	800be5c <_SendPacket>
  RECORD_END();
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f383 8811 	msr	BASEPRI, r3
}
 800ca38:	bf00      	nop
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	200148f4 	.word	0x200148f4

0800ca44 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b088      	sub	sp, #32
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ca4c:	f3ef 8311 	mrs	r3, BASEPRI
 800ca50:	f04f 0120 	mov.w	r1, #32
 800ca54:	f381 8811 	msr	BASEPRI, r1
 800ca58:	617b      	str	r3, [r7, #20]
 800ca5a:	4819      	ldr	r0, [pc, #100]	@ (800cac0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800ca5c:	f7ff f910 	bl	800bc80 <_PreparePacket>
 800ca60:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ca66:	4b17      	ldr	r3, [pc, #92]	@ (800cac4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	61fb      	str	r3, [r7, #28]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	61bb      	str	r3, [r7, #24]
 800ca78:	e00b      	b.n	800ca92 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	1c59      	adds	r1, r3, #1
 800ca82:	61f9      	str	r1, [r7, #28]
 800ca84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ca88:	b2d2      	uxtb	r2, r2
 800ca8a:	701a      	strb	r2, [r3, #0]
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	09db      	lsrs	r3, r3, #7
 800ca90:	61bb      	str	r3, [r7, #24]
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca96:	d8f0      	bhi.n	800ca7a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	1c5a      	adds	r2, r3, #1
 800ca9c:	61fa      	str	r2, [r7, #28]
 800ca9e:	69ba      	ldr	r2, [r7, #24]
 800caa0:	b2d2      	uxtb	r2, r2
 800caa2:	701a      	strb	r2, [r3, #0]
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800caa8:	2208      	movs	r2, #8
 800caaa:	68f9      	ldr	r1, [r7, #12]
 800caac:	6938      	ldr	r0, [r7, #16]
 800caae:	f7ff f9d5 	bl	800be5c <_SendPacket>
  RECORD_END();
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	f383 8811 	msr	BASEPRI, r3
}
 800cab8:	bf00      	nop
 800caba:	3720      	adds	r7, #32
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	200148f4 	.word	0x200148f4
 800cac4:	200148c4 	.word	0x200148c4

0800cac8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cad0:	f3ef 8311 	mrs	r3, BASEPRI
 800cad4:	f04f 0120 	mov.w	r1, #32
 800cad8:	f381 8811 	msr	BASEPRI, r1
 800cadc:	617b      	str	r3, [r7, #20]
 800cade:	4819      	ldr	r0, [pc, #100]	@ (800cb44 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800cae0:	f7ff f8ce 	bl	800bc80 <_PreparePacket>
 800cae4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800caea:	4b17      	ldr	r3, [pc, #92]	@ (800cb48 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	1ad3      	subs	r3, r2, r3
 800caf2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	61fb      	str	r3, [r7, #28]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	61bb      	str	r3, [r7, #24]
 800cafc:	e00b      	b.n	800cb16 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	1c59      	adds	r1, r3, #1
 800cb06:	61f9      	str	r1, [r7, #28]
 800cb08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cb0c:	b2d2      	uxtb	r2, r2
 800cb0e:	701a      	strb	r2, [r3, #0]
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	09db      	lsrs	r3, r3, #7
 800cb14:	61bb      	str	r3, [r7, #24]
 800cb16:	69bb      	ldr	r3, [r7, #24]
 800cb18:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb1a:	d8f0      	bhi.n	800cafe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	1c5a      	adds	r2, r3, #1
 800cb20:	61fa      	str	r2, [r7, #28]
 800cb22:	69ba      	ldr	r2, [r7, #24]
 800cb24:	b2d2      	uxtb	r2, r2
 800cb26:	701a      	strb	r2, [r3, #0]
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800cb2c:	2204      	movs	r2, #4
 800cb2e:	68f9      	ldr	r1, [r7, #12]
 800cb30:	6938      	ldr	r0, [r7, #16]
 800cb32:	f7ff f993 	bl	800be5c <_SendPacket>
  RECORD_END();
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	f383 8811 	msr	BASEPRI, r3
}
 800cb3c:	bf00      	nop
 800cb3e:	3720      	adds	r7, #32
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	200148f4 	.word	0x200148f4
 800cb48:	200148c4 	.word	0x200148c4

0800cb4c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b088      	sub	sp, #32
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cb54:	f3ef 8311 	mrs	r3, BASEPRI
 800cb58:	f04f 0120 	mov.w	r1, #32
 800cb5c:	f381 8811 	msr	BASEPRI, r1
 800cb60:	617b      	str	r3, [r7, #20]
 800cb62:	4819      	ldr	r0, [pc, #100]	@ (800cbc8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800cb64:	f7ff f88c 	bl	800bc80 <_PreparePacket>
 800cb68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cb6e:	4b17      	ldr	r3, [pc, #92]	@ (800cbcc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800cb70:	691b      	ldr	r3, [r3, #16]
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	61fb      	str	r3, [r7, #28]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	61bb      	str	r3, [r7, #24]
 800cb80:	e00b      	b.n	800cb9a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	b2da      	uxtb	r2, r3
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	1c59      	adds	r1, r3, #1
 800cb8a:	61f9      	str	r1, [r7, #28]
 800cb8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cb90:	b2d2      	uxtb	r2, r2
 800cb92:	701a      	strb	r2, [r3, #0]
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	09db      	lsrs	r3, r3, #7
 800cb98:	61bb      	str	r3, [r7, #24]
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb9e:	d8f0      	bhi.n	800cb82 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	1c5a      	adds	r2, r3, #1
 800cba4:	61fa      	str	r2, [r7, #28]
 800cba6:	69ba      	ldr	r2, [r7, #24]
 800cba8:	b2d2      	uxtb	r2, r2
 800cbaa:	701a      	strb	r2, [r3, #0]
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800cbb0:	2206      	movs	r2, #6
 800cbb2:	68f9      	ldr	r1, [r7, #12]
 800cbb4:	6938      	ldr	r0, [r7, #16]
 800cbb6:	f7ff f951 	bl	800be5c <_SendPacket>
  RECORD_END();
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	f383 8811 	msr	BASEPRI, r3
}
 800cbc0:	bf00      	nop
 800cbc2:	3720      	adds	r7, #32
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	200148f4 	.word	0x200148f4
 800cbcc:	200148c4 	.word	0x200148c4

0800cbd0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b08a      	sub	sp, #40	@ 0x28
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800cbda:	f3ef 8311 	mrs	r3, BASEPRI
 800cbde:	f04f 0120 	mov.w	r1, #32
 800cbe2:	f381 8811 	msr	BASEPRI, r1
 800cbe6:	617b      	str	r3, [r7, #20]
 800cbe8:	4827      	ldr	r0, [pc, #156]	@ (800cc88 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800cbea:	f7ff f849 	bl	800bc80 <_PreparePacket>
 800cbee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cbf4:	4b25      	ldr	r3, [pc, #148]	@ (800cc8c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	1ad3      	subs	r3, r2, r3
 800cbfc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	623b      	str	r3, [r7, #32]
 800cc06:	e00b      	b.n	800cc20 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800cc08:	6a3b      	ldr	r3, [r7, #32]
 800cc0a:	b2da      	uxtb	r2, r3
 800cc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0e:	1c59      	adds	r1, r3, #1
 800cc10:	6279      	str	r1, [r7, #36]	@ 0x24
 800cc12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cc16:	b2d2      	uxtb	r2, r2
 800cc18:	701a      	strb	r2, [r3, #0]
 800cc1a:	6a3b      	ldr	r3, [r7, #32]
 800cc1c:	09db      	lsrs	r3, r3, #7
 800cc1e:	623b      	str	r3, [r7, #32]
 800cc20:	6a3b      	ldr	r3, [r7, #32]
 800cc22:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc24:	d8f0      	bhi.n	800cc08 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800cc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc28:	1c5a      	adds	r2, r3, #1
 800cc2a:	627a      	str	r2, [r7, #36]	@ 0x24
 800cc2c:	6a3a      	ldr	r2, [r7, #32]
 800cc2e:	b2d2      	uxtb	r2, r2
 800cc30:	701a      	strb	r2, [r3, #0]
 800cc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	61fb      	str	r3, [r7, #28]
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	61bb      	str	r3, [r7, #24]
 800cc3e:	e00b      	b.n	800cc58 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	b2da      	uxtb	r2, r3
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	1c59      	adds	r1, r3, #1
 800cc48:	61f9      	str	r1, [r7, #28]
 800cc4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cc4e:	b2d2      	uxtb	r2, r2
 800cc50:	701a      	strb	r2, [r3, #0]
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	09db      	lsrs	r3, r3, #7
 800cc56:	61bb      	str	r3, [r7, #24]
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc5c:	d8f0      	bhi.n	800cc40 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	1c5a      	adds	r2, r3, #1
 800cc62:	61fa      	str	r2, [r7, #28]
 800cc64:	69ba      	ldr	r2, [r7, #24]
 800cc66:	b2d2      	uxtb	r2, r2
 800cc68:	701a      	strb	r2, [r3, #0]
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800cc6e:	2207      	movs	r2, #7
 800cc70:	68f9      	ldr	r1, [r7, #12]
 800cc72:	6938      	ldr	r0, [r7, #16]
 800cc74:	f7ff f8f2 	bl	800be5c <_SendPacket>
  RECORD_END();
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	f383 8811 	msr	BASEPRI, r3
}
 800cc7e:	bf00      	nop
 800cc80:	3728      	adds	r7, #40	@ 0x28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	200148f4 	.word	0x200148f4
 800cc8c:	200148c4 	.word	0x200148c4

0800cc90 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800cc98:	4b04      	ldr	r3, [pc, #16]	@ (800ccac <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800cc9a:	691b      	ldr	r3, [r3, #16]
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	1ad3      	subs	r3, r2, r3
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	200148c4 	.word	0x200148c4

0800ccb0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b08c      	sub	sp, #48	@ 0x30
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800ccba:	4b40      	ldr	r3, [pc, #256]	@ (800cdbc <SEGGER_SYSVIEW_SendModule+0x10c>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d077      	beq.n	800cdb2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800ccc2:	4b3e      	ldr	r3, [pc, #248]	@ (800cdbc <SEGGER_SYSVIEW_SendModule+0x10c>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800ccc8:	2300      	movs	r3, #0
 800ccca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cccc:	e008      	b.n	800cce0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800ccce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800ccd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d007      	beq.n	800ccea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800ccda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccdc:	3301      	adds	r3, #1
 800ccde:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cce0:	79fb      	ldrb	r3, [r7, #7]
 800cce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d3f2      	bcc.n	800ccce <SEGGER_SYSVIEW_SendModule+0x1e>
 800cce8:	e000      	b.n	800ccec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800ccea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800ccec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d055      	beq.n	800cd9e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ccf2:	f3ef 8311 	mrs	r3, BASEPRI
 800ccf6:	f04f 0120 	mov.w	r1, #32
 800ccfa:	f381 8811 	msr	BASEPRI, r1
 800ccfe:	617b      	str	r3, [r7, #20]
 800cd00:	482f      	ldr	r0, [pc, #188]	@ (800cdc0 <SEGGER_SYSVIEW_SendModule+0x110>)
 800cd02:	f7fe ffbd 	bl	800bc80 <_PreparePacket>
 800cd06:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd10:	79fb      	ldrb	r3, [r7, #7]
 800cd12:	623b      	str	r3, [r7, #32]
 800cd14:	e00b      	b.n	800cd2e <SEGGER_SYSVIEW_SendModule+0x7e>
 800cd16:	6a3b      	ldr	r3, [r7, #32]
 800cd18:	b2da      	uxtb	r2, r3
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1c:	1c59      	adds	r1, r3, #1
 800cd1e:	6279      	str	r1, [r7, #36]	@ 0x24
 800cd20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cd24:	b2d2      	uxtb	r2, r2
 800cd26:	701a      	strb	r2, [r3, #0]
 800cd28:	6a3b      	ldr	r3, [r7, #32]
 800cd2a:	09db      	lsrs	r3, r3, #7
 800cd2c:	623b      	str	r3, [r7, #32]
 800cd2e:	6a3b      	ldr	r3, [r7, #32]
 800cd30:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd32:	d8f0      	bhi.n	800cd16 <SEGGER_SYSVIEW_SendModule+0x66>
 800cd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd36:	1c5a      	adds	r2, r3, #1
 800cd38:	627a      	str	r2, [r7, #36]	@ 0x24
 800cd3a:	6a3a      	ldr	r2, [r7, #32]
 800cd3c:	b2d2      	uxtb	r2, r2
 800cd3e:	701a      	strb	r2, [r3, #0]
 800cd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd42:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	61fb      	str	r3, [r7, #28]
 800cd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	61bb      	str	r3, [r7, #24]
 800cd4e:	e00b      	b.n	800cd68 <SEGGER_SYSVIEW_SendModule+0xb8>
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	b2da      	uxtb	r2, r3
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	1c59      	adds	r1, r3, #1
 800cd58:	61f9      	str	r1, [r7, #28]
 800cd5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cd5e:	b2d2      	uxtb	r2, r2
 800cd60:	701a      	strb	r2, [r3, #0]
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	09db      	lsrs	r3, r3, #7
 800cd66:	61bb      	str	r3, [r7, #24]
 800cd68:	69bb      	ldr	r3, [r7, #24]
 800cd6a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd6c:	d8f0      	bhi.n	800cd50 <SEGGER_SYSVIEW_SendModule+0xa0>
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	1c5a      	adds	r2, r3, #1
 800cd72:	61fa      	str	r2, [r7, #28]
 800cd74:	69ba      	ldr	r2, [r7, #24]
 800cd76:	b2d2      	uxtb	r2, r2
 800cd78:	701a      	strb	r2, [r3, #0]
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2280      	movs	r2, #128	@ 0x80
 800cd84:	4619      	mov	r1, r3
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f7fe ff4a 	bl	800bc20 <_EncodeStr>
 800cd8c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800cd8e:	2216      	movs	r2, #22
 800cd90:	68f9      	ldr	r1, [r7, #12]
 800cd92:	6938      	ldr	r0, [r7, #16]
 800cd94:	f7ff f862 	bl	800be5c <_SendPacket>
      RECORD_END();
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800cd9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d006      	beq.n	800cdb2 <SEGGER_SYSVIEW_SendModule+0x102>
 800cda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800cdac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	4798      	blx	r3
    }
  }
}
 800cdb2:	bf00      	nop
 800cdb4:	3730      	adds	r7, #48	@ 0x30
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	200148ec 	.word	0x200148ec
 800cdc0:	200148f4 	.word	0x200148f4

0800cdc4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800cdca:	4b0c      	ldr	r3, [pc, #48]	@ (800cdfc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00f      	beq.n	800cdf2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800cdd2:	4b0a      	ldr	r3, [pc, #40]	@ (800cdfc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d002      	beq.n	800cde6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1f2      	bne.n	800cdd8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800cdf2:	bf00      	nop
 800cdf4:	3708      	adds	r7, #8
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	200148ec 	.word	0x200148ec

0800ce00 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b086      	sub	sp, #24
 800ce04:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800ce06:	f3ef 8311 	mrs	r3, BASEPRI
 800ce0a:	f04f 0120 	mov.w	r1, #32
 800ce0e:	f381 8811 	msr	BASEPRI, r1
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	4817      	ldr	r0, [pc, #92]	@ (800ce74 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800ce16:	f7fe ff33 	bl	800bc80 <_PreparePacket>
 800ce1a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	617b      	str	r3, [r7, #20]
 800ce24:	4b14      	ldr	r3, [pc, #80]	@ (800ce78 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	613b      	str	r3, [r7, #16]
 800ce2a:	e00b      	b.n	800ce44 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	1c59      	adds	r1, r3, #1
 800ce34:	6179      	str	r1, [r7, #20]
 800ce36:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ce3a:	b2d2      	uxtb	r2, r2
 800ce3c:	701a      	strb	r2, [r3, #0]
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	09db      	lsrs	r3, r3, #7
 800ce42:	613b      	str	r3, [r7, #16]
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce48:	d8f0      	bhi.n	800ce2c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	1c5a      	adds	r2, r3, #1
 800ce4e:	617a      	str	r2, [r7, #20]
 800ce50:	693a      	ldr	r2, [r7, #16]
 800ce52:	b2d2      	uxtb	r2, r2
 800ce54:	701a      	strb	r2, [r3, #0]
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800ce5a:	221b      	movs	r2, #27
 800ce5c:	6879      	ldr	r1, [r7, #4]
 800ce5e:	68b8      	ldr	r0, [r7, #8]
 800ce60:	f7fe fffc 	bl	800be5c <_SendPacket>
  RECORD_END();
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f383 8811 	msr	BASEPRI, r3
}
 800ce6a:	bf00      	nop
 800ce6c:	3718      	adds	r7, #24
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	200148f4 	.word	0x200148f4
 800ce78:	200148f0 	.word	0x200148f0

0800ce7c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b08a      	sub	sp, #40	@ 0x28
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ce84:	f3ef 8311 	mrs	r3, BASEPRI
 800ce88:	f04f 0120 	mov.w	r1, #32
 800ce8c:	f381 8811 	msr	BASEPRI, r1
 800ce90:	617b      	str	r3, [r7, #20]
 800ce92:	4827      	ldr	r0, [pc, #156]	@ (800cf30 <SEGGER_SYSVIEW_Warn+0xb4>)
 800ce94:	f7fe fef4 	bl	800bc80 <_PreparePacket>
 800ce98:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ce9a:	2280      	movs	r2, #128	@ 0x80
 800ce9c:	6879      	ldr	r1, [r7, #4]
 800ce9e:	6938      	ldr	r0, [r7, #16]
 800cea0:	f7fe febe 	bl	800bc20 <_EncodeStr>
 800cea4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceaa:	2301      	movs	r3, #1
 800ceac:	623b      	str	r3, [r7, #32]
 800ceae:	e00b      	b.n	800cec8 <SEGGER_SYSVIEW_Warn+0x4c>
 800ceb0:	6a3b      	ldr	r3, [r7, #32]
 800ceb2:	b2da      	uxtb	r2, r3
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb6:	1c59      	adds	r1, r3, #1
 800ceb8:	6279      	str	r1, [r7, #36]	@ 0x24
 800ceba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cebe:	b2d2      	uxtb	r2, r2
 800cec0:	701a      	strb	r2, [r3, #0]
 800cec2:	6a3b      	ldr	r3, [r7, #32]
 800cec4:	09db      	lsrs	r3, r3, #7
 800cec6:	623b      	str	r3, [r7, #32]
 800cec8:	6a3b      	ldr	r3, [r7, #32]
 800ceca:	2b7f      	cmp	r3, #127	@ 0x7f
 800cecc:	d8f0      	bhi.n	800ceb0 <SEGGER_SYSVIEW_Warn+0x34>
 800cece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced0:	1c5a      	adds	r2, r3, #1
 800ced2:	627a      	str	r2, [r7, #36]	@ 0x24
 800ced4:	6a3a      	ldr	r2, [r7, #32]
 800ced6:	b2d2      	uxtb	r2, r2
 800ced8:	701a      	strb	r2, [r3, #0]
 800ceda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cedc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	61fb      	str	r3, [r7, #28]
 800cee2:	2300      	movs	r3, #0
 800cee4:	61bb      	str	r3, [r7, #24]
 800cee6:	e00b      	b.n	800cf00 <SEGGER_SYSVIEW_Warn+0x84>
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	b2da      	uxtb	r2, r3
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	1c59      	adds	r1, r3, #1
 800cef0:	61f9      	str	r1, [r7, #28]
 800cef2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cef6:	b2d2      	uxtb	r2, r2
 800cef8:	701a      	strb	r2, [r3, #0]
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	09db      	lsrs	r3, r3, #7
 800cefe:	61bb      	str	r3, [r7, #24]
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf04:	d8f0      	bhi.n	800cee8 <SEGGER_SYSVIEW_Warn+0x6c>
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	1c5a      	adds	r2, r3, #1
 800cf0a:	61fa      	str	r2, [r7, #28]
 800cf0c:	69ba      	ldr	r2, [r7, #24]
 800cf0e:	b2d2      	uxtb	r2, r2
 800cf10:	701a      	strb	r2, [r3, #0]
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800cf16:	221a      	movs	r2, #26
 800cf18:	68f9      	ldr	r1, [r7, #12]
 800cf1a:	6938      	ldr	r0, [r7, #16]
 800cf1c:	f7fe ff9e 	bl	800be5c <_SendPacket>
  RECORD_END();
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	f383 8811 	msr	BASEPRI, r3
}
 800cf26:	bf00      	nop
 800cf28:	3728      	adds	r7, #40	@ 0x28
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	200148f4 	.word	0x200148f4

0800cf34 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800cf42:	683a      	ldr	r2, [r7, #0]
 800cf44:	6879      	ldr	r1, [r7, #4]
 800cf46:	2000      	movs	r0, #0
 800cf48:	f7fe fe44 	bl	800bbd4 <SEGGER_RTT_Write>
  return len;
 800cf4c:	683b      	ldr	r3, [r7, #0]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
	...

0800cf58 <std>:
 800cf58:	2300      	movs	r3, #0
 800cf5a:	b510      	push	{r4, lr}
 800cf5c:	4604      	mov	r4, r0
 800cf5e:	e9c0 3300 	strd	r3, r3, [r0]
 800cf62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf66:	6083      	str	r3, [r0, #8]
 800cf68:	8181      	strh	r1, [r0, #12]
 800cf6a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cf6c:	81c2      	strh	r2, [r0, #14]
 800cf6e:	6183      	str	r3, [r0, #24]
 800cf70:	4619      	mov	r1, r3
 800cf72:	2208      	movs	r2, #8
 800cf74:	305c      	adds	r0, #92	@ 0x5c
 800cf76:	f000 f937 	bl	800d1e8 <memset>
 800cf7a:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb0 <std+0x58>)
 800cf7c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cf7e:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb4 <std+0x5c>)
 800cf80:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cf82:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb8 <std+0x60>)
 800cf84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf86:	4b0d      	ldr	r3, [pc, #52]	@ (800cfbc <std+0x64>)
 800cf88:	6323      	str	r3, [r4, #48]	@ 0x30
 800cf8a:	4b0d      	ldr	r3, [pc, #52]	@ (800cfc0 <std+0x68>)
 800cf8c:	6224      	str	r4, [r4, #32]
 800cf8e:	429c      	cmp	r4, r3
 800cf90:	d006      	beq.n	800cfa0 <std+0x48>
 800cf92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cf96:	4294      	cmp	r4, r2
 800cf98:	d002      	beq.n	800cfa0 <std+0x48>
 800cf9a:	33d0      	adds	r3, #208	@ 0xd0
 800cf9c:	429c      	cmp	r4, r3
 800cf9e:	d105      	bne.n	800cfac <std+0x54>
 800cfa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cfa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfa8:	f000 b984 	b.w	800d2b4 <__retarget_lock_init_recursive>
 800cfac:	bd10      	pop	{r4, pc}
 800cfae:	bf00      	nop
 800cfb0:	0800d101 	.word	0x0800d101
 800cfb4:	0800d123 	.word	0x0800d123
 800cfb8:	0800d15b 	.word	0x0800d15b
 800cfbc:	0800d17f 	.word	0x0800d17f
 800cfc0:	200149d8 	.word	0x200149d8

0800cfc4 <stdio_exit_handler>:
 800cfc4:	4a02      	ldr	r2, [pc, #8]	@ (800cfd0 <stdio_exit_handler+0xc>)
 800cfc6:	4903      	ldr	r1, [pc, #12]	@ (800cfd4 <stdio_exit_handler+0x10>)
 800cfc8:	4803      	ldr	r0, [pc, #12]	@ (800cfd8 <stdio_exit_handler+0x14>)
 800cfca:	f000 b869 	b.w	800d0a0 <_fwalk_sglue>
 800cfce:	bf00      	nop
 800cfd0:	2000002c 	.word	0x2000002c
 800cfd4:	0800de21 	.word	0x0800de21
 800cfd8:	2000003c 	.word	0x2000003c

0800cfdc <cleanup_stdio>:
 800cfdc:	6841      	ldr	r1, [r0, #4]
 800cfde:	4b0c      	ldr	r3, [pc, #48]	@ (800d010 <cleanup_stdio+0x34>)
 800cfe0:	4299      	cmp	r1, r3
 800cfe2:	b510      	push	{r4, lr}
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	d001      	beq.n	800cfec <cleanup_stdio+0x10>
 800cfe8:	f000 ff1a 	bl	800de20 <_fflush_r>
 800cfec:	68a1      	ldr	r1, [r4, #8]
 800cfee:	4b09      	ldr	r3, [pc, #36]	@ (800d014 <cleanup_stdio+0x38>)
 800cff0:	4299      	cmp	r1, r3
 800cff2:	d002      	beq.n	800cffa <cleanup_stdio+0x1e>
 800cff4:	4620      	mov	r0, r4
 800cff6:	f000 ff13 	bl	800de20 <_fflush_r>
 800cffa:	68e1      	ldr	r1, [r4, #12]
 800cffc:	4b06      	ldr	r3, [pc, #24]	@ (800d018 <cleanup_stdio+0x3c>)
 800cffe:	4299      	cmp	r1, r3
 800d000:	d004      	beq.n	800d00c <cleanup_stdio+0x30>
 800d002:	4620      	mov	r0, r4
 800d004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d008:	f000 bf0a 	b.w	800de20 <_fflush_r>
 800d00c:	bd10      	pop	{r4, pc}
 800d00e:	bf00      	nop
 800d010:	200149d8 	.word	0x200149d8
 800d014:	20014a40 	.word	0x20014a40
 800d018:	20014aa8 	.word	0x20014aa8

0800d01c <global_stdio_init.part.0>:
 800d01c:	b510      	push	{r4, lr}
 800d01e:	4b0b      	ldr	r3, [pc, #44]	@ (800d04c <global_stdio_init.part.0+0x30>)
 800d020:	4c0b      	ldr	r4, [pc, #44]	@ (800d050 <global_stdio_init.part.0+0x34>)
 800d022:	4a0c      	ldr	r2, [pc, #48]	@ (800d054 <global_stdio_init.part.0+0x38>)
 800d024:	601a      	str	r2, [r3, #0]
 800d026:	4620      	mov	r0, r4
 800d028:	2200      	movs	r2, #0
 800d02a:	2104      	movs	r1, #4
 800d02c:	f7ff ff94 	bl	800cf58 <std>
 800d030:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d034:	2201      	movs	r2, #1
 800d036:	2109      	movs	r1, #9
 800d038:	f7ff ff8e 	bl	800cf58 <std>
 800d03c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d040:	2202      	movs	r2, #2
 800d042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d046:	2112      	movs	r1, #18
 800d048:	f7ff bf86 	b.w	800cf58 <std>
 800d04c:	20014b10 	.word	0x20014b10
 800d050:	200149d8 	.word	0x200149d8
 800d054:	0800cfc5 	.word	0x0800cfc5

0800d058 <__sfp_lock_acquire>:
 800d058:	4801      	ldr	r0, [pc, #4]	@ (800d060 <__sfp_lock_acquire+0x8>)
 800d05a:	f000 b92c 	b.w	800d2b6 <__retarget_lock_acquire_recursive>
 800d05e:	bf00      	nop
 800d060:	20014b19 	.word	0x20014b19

0800d064 <__sfp_lock_release>:
 800d064:	4801      	ldr	r0, [pc, #4]	@ (800d06c <__sfp_lock_release+0x8>)
 800d066:	f000 b927 	b.w	800d2b8 <__retarget_lock_release_recursive>
 800d06a:	bf00      	nop
 800d06c:	20014b19 	.word	0x20014b19

0800d070 <__sinit>:
 800d070:	b510      	push	{r4, lr}
 800d072:	4604      	mov	r4, r0
 800d074:	f7ff fff0 	bl	800d058 <__sfp_lock_acquire>
 800d078:	6a23      	ldr	r3, [r4, #32]
 800d07a:	b11b      	cbz	r3, 800d084 <__sinit+0x14>
 800d07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d080:	f7ff bff0 	b.w	800d064 <__sfp_lock_release>
 800d084:	4b04      	ldr	r3, [pc, #16]	@ (800d098 <__sinit+0x28>)
 800d086:	6223      	str	r3, [r4, #32]
 800d088:	4b04      	ldr	r3, [pc, #16]	@ (800d09c <__sinit+0x2c>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1f5      	bne.n	800d07c <__sinit+0xc>
 800d090:	f7ff ffc4 	bl	800d01c <global_stdio_init.part.0>
 800d094:	e7f2      	b.n	800d07c <__sinit+0xc>
 800d096:	bf00      	nop
 800d098:	0800cfdd 	.word	0x0800cfdd
 800d09c:	20014b10 	.word	0x20014b10

0800d0a0 <_fwalk_sglue>:
 800d0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a4:	4607      	mov	r7, r0
 800d0a6:	4688      	mov	r8, r1
 800d0a8:	4614      	mov	r4, r2
 800d0aa:	2600      	movs	r6, #0
 800d0ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0b0:	f1b9 0901 	subs.w	r9, r9, #1
 800d0b4:	d505      	bpl.n	800d0c2 <_fwalk_sglue+0x22>
 800d0b6:	6824      	ldr	r4, [r4, #0]
 800d0b8:	2c00      	cmp	r4, #0
 800d0ba:	d1f7      	bne.n	800d0ac <_fwalk_sglue+0xc>
 800d0bc:	4630      	mov	r0, r6
 800d0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0c2:	89ab      	ldrh	r3, [r5, #12]
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d907      	bls.n	800d0d8 <_fwalk_sglue+0x38>
 800d0c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	d003      	beq.n	800d0d8 <_fwalk_sglue+0x38>
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	4638      	mov	r0, r7
 800d0d4:	47c0      	blx	r8
 800d0d6:	4306      	orrs	r6, r0
 800d0d8:	3568      	adds	r5, #104	@ 0x68
 800d0da:	e7e9      	b.n	800d0b0 <_fwalk_sglue+0x10>

0800d0dc <iprintf>:
 800d0dc:	b40f      	push	{r0, r1, r2, r3}
 800d0de:	b507      	push	{r0, r1, r2, lr}
 800d0e0:	4906      	ldr	r1, [pc, #24]	@ (800d0fc <iprintf+0x20>)
 800d0e2:	ab04      	add	r3, sp, #16
 800d0e4:	6808      	ldr	r0, [r1, #0]
 800d0e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ea:	6881      	ldr	r1, [r0, #8]
 800d0ec:	9301      	str	r3, [sp, #4]
 800d0ee:	f000 fb6d 	bl	800d7cc <_vfiprintf_r>
 800d0f2:	b003      	add	sp, #12
 800d0f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0f8:	b004      	add	sp, #16
 800d0fa:	4770      	bx	lr
 800d0fc:	20000038 	.word	0x20000038

0800d100 <__sread>:
 800d100:	b510      	push	{r4, lr}
 800d102:	460c      	mov	r4, r1
 800d104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d108:	f000 f898 	bl	800d23c <_read_r>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	bfab      	itete	ge
 800d110:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d112:	89a3      	ldrhlt	r3, [r4, #12]
 800d114:	181b      	addge	r3, r3, r0
 800d116:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d11a:	bfac      	ite	ge
 800d11c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d11e:	81a3      	strhlt	r3, [r4, #12]
 800d120:	bd10      	pop	{r4, pc}

0800d122 <__swrite>:
 800d122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d126:	461f      	mov	r7, r3
 800d128:	898b      	ldrh	r3, [r1, #12]
 800d12a:	05db      	lsls	r3, r3, #23
 800d12c:	4605      	mov	r5, r0
 800d12e:	460c      	mov	r4, r1
 800d130:	4616      	mov	r6, r2
 800d132:	d505      	bpl.n	800d140 <__swrite+0x1e>
 800d134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d138:	2302      	movs	r3, #2
 800d13a:	2200      	movs	r2, #0
 800d13c:	f000 f86c 	bl	800d218 <_lseek_r>
 800d140:	89a3      	ldrh	r3, [r4, #12]
 800d142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d146:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d14a:	81a3      	strh	r3, [r4, #12]
 800d14c:	4632      	mov	r2, r6
 800d14e:	463b      	mov	r3, r7
 800d150:	4628      	mov	r0, r5
 800d152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d156:	f7ff beed 	b.w	800cf34 <_write_r>

0800d15a <__sseek>:
 800d15a:	b510      	push	{r4, lr}
 800d15c:	460c      	mov	r4, r1
 800d15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d162:	f000 f859 	bl	800d218 <_lseek_r>
 800d166:	1c43      	adds	r3, r0, #1
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	bf15      	itete	ne
 800d16c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d16e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d172:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d176:	81a3      	strheq	r3, [r4, #12]
 800d178:	bf18      	it	ne
 800d17a:	81a3      	strhne	r3, [r4, #12]
 800d17c:	bd10      	pop	{r4, pc}

0800d17e <__sclose>:
 800d17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d182:	f000 b839 	b.w	800d1f8 <_close_r>
	...

0800d188 <_vsiprintf_r>:
 800d188:	b500      	push	{lr}
 800d18a:	b09b      	sub	sp, #108	@ 0x6c
 800d18c:	9100      	str	r1, [sp, #0]
 800d18e:	9104      	str	r1, [sp, #16]
 800d190:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d194:	9105      	str	r1, [sp, #20]
 800d196:	9102      	str	r1, [sp, #8]
 800d198:	4905      	ldr	r1, [pc, #20]	@ (800d1b0 <_vsiprintf_r+0x28>)
 800d19a:	9103      	str	r1, [sp, #12]
 800d19c:	4669      	mov	r1, sp
 800d19e:	f000 f9ef 	bl	800d580 <_svfiprintf_r>
 800d1a2:	9b00      	ldr	r3, [sp, #0]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	701a      	strb	r2, [r3, #0]
 800d1a8:	b01b      	add	sp, #108	@ 0x6c
 800d1aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1ae:	bf00      	nop
 800d1b0:	ffff0208 	.word	0xffff0208

0800d1b4 <vsiprintf>:
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	460a      	mov	r2, r1
 800d1b8:	4601      	mov	r1, r0
 800d1ba:	4802      	ldr	r0, [pc, #8]	@ (800d1c4 <vsiprintf+0x10>)
 800d1bc:	6800      	ldr	r0, [r0, #0]
 800d1be:	f7ff bfe3 	b.w	800d188 <_vsiprintf_r>
 800d1c2:	bf00      	nop
 800d1c4:	20000038 	.word	0x20000038

0800d1c8 <memcmp>:
 800d1c8:	b510      	push	{r4, lr}
 800d1ca:	3901      	subs	r1, #1
 800d1cc:	4402      	add	r2, r0
 800d1ce:	4290      	cmp	r0, r2
 800d1d0:	d101      	bne.n	800d1d6 <memcmp+0xe>
 800d1d2:	2000      	movs	r0, #0
 800d1d4:	e005      	b.n	800d1e2 <memcmp+0x1a>
 800d1d6:	7803      	ldrb	r3, [r0, #0]
 800d1d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d1dc:	42a3      	cmp	r3, r4
 800d1de:	d001      	beq.n	800d1e4 <memcmp+0x1c>
 800d1e0:	1b18      	subs	r0, r3, r4
 800d1e2:	bd10      	pop	{r4, pc}
 800d1e4:	3001      	adds	r0, #1
 800d1e6:	e7f2      	b.n	800d1ce <memcmp+0x6>

0800d1e8 <memset>:
 800d1e8:	4402      	add	r2, r0
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d100      	bne.n	800d1f2 <memset+0xa>
 800d1f0:	4770      	bx	lr
 800d1f2:	f803 1b01 	strb.w	r1, [r3], #1
 800d1f6:	e7f9      	b.n	800d1ec <memset+0x4>

0800d1f8 <_close_r>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	4d06      	ldr	r5, [pc, #24]	@ (800d214 <_close_r+0x1c>)
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	4604      	mov	r4, r0
 800d200:	4608      	mov	r0, r1
 800d202:	602b      	str	r3, [r5, #0]
 800d204:	f7f4 f86d 	bl	80012e2 <_close>
 800d208:	1c43      	adds	r3, r0, #1
 800d20a:	d102      	bne.n	800d212 <_close_r+0x1a>
 800d20c:	682b      	ldr	r3, [r5, #0]
 800d20e:	b103      	cbz	r3, 800d212 <_close_r+0x1a>
 800d210:	6023      	str	r3, [r4, #0]
 800d212:	bd38      	pop	{r3, r4, r5, pc}
 800d214:	20014b14 	.word	0x20014b14

0800d218 <_lseek_r>:
 800d218:	b538      	push	{r3, r4, r5, lr}
 800d21a:	4d07      	ldr	r5, [pc, #28]	@ (800d238 <_lseek_r+0x20>)
 800d21c:	4604      	mov	r4, r0
 800d21e:	4608      	mov	r0, r1
 800d220:	4611      	mov	r1, r2
 800d222:	2200      	movs	r2, #0
 800d224:	602a      	str	r2, [r5, #0]
 800d226:	461a      	mov	r2, r3
 800d228:	f7f4 f882 	bl	8001330 <_lseek>
 800d22c:	1c43      	adds	r3, r0, #1
 800d22e:	d102      	bne.n	800d236 <_lseek_r+0x1e>
 800d230:	682b      	ldr	r3, [r5, #0]
 800d232:	b103      	cbz	r3, 800d236 <_lseek_r+0x1e>
 800d234:	6023      	str	r3, [r4, #0]
 800d236:	bd38      	pop	{r3, r4, r5, pc}
 800d238:	20014b14 	.word	0x20014b14

0800d23c <_read_r>:
 800d23c:	b538      	push	{r3, r4, r5, lr}
 800d23e:	4d07      	ldr	r5, [pc, #28]	@ (800d25c <_read_r+0x20>)
 800d240:	4604      	mov	r4, r0
 800d242:	4608      	mov	r0, r1
 800d244:	4611      	mov	r1, r2
 800d246:	2200      	movs	r2, #0
 800d248:	602a      	str	r2, [r5, #0]
 800d24a:	461a      	mov	r2, r3
 800d24c:	f7f4 f82c 	bl	80012a8 <_read>
 800d250:	1c43      	adds	r3, r0, #1
 800d252:	d102      	bne.n	800d25a <_read_r+0x1e>
 800d254:	682b      	ldr	r3, [r5, #0]
 800d256:	b103      	cbz	r3, 800d25a <_read_r+0x1e>
 800d258:	6023      	str	r3, [r4, #0]
 800d25a:	bd38      	pop	{r3, r4, r5, pc}
 800d25c:	20014b14 	.word	0x20014b14

0800d260 <__errno>:
 800d260:	4b01      	ldr	r3, [pc, #4]	@ (800d268 <__errno+0x8>)
 800d262:	6818      	ldr	r0, [r3, #0]
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop
 800d268:	20000038 	.word	0x20000038

0800d26c <__libc_init_array>:
 800d26c:	b570      	push	{r4, r5, r6, lr}
 800d26e:	4d0d      	ldr	r5, [pc, #52]	@ (800d2a4 <__libc_init_array+0x38>)
 800d270:	4c0d      	ldr	r4, [pc, #52]	@ (800d2a8 <__libc_init_array+0x3c>)
 800d272:	1b64      	subs	r4, r4, r5
 800d274:	10a4      	asrs	r4, r4, #2
 800d276:	2600      	movs	r6, #0
 800d278:	42a6      	cmp	r6, r4
 800d27a:	d109      	bne.n	800d290 <__libc_init_array+0x24>
 800d27c:	4d0b      	ldr	r5, [pc, #44]	@ (800d2ac <__libc_init_array+0x40>)
 800d27e:	4c0c      	ldr	r4, [pc, #48]	@ (800d2b0 <__libc_init_array+0x44>)
 800d280:	f000 ff6e 	bl	800e160 <_init>
 800d284:	1b64      	subs	r4, r4, r5
 800d286:	10a4      	asrs	r4, r4, #2
 800d288:	2600      	movs	r6, #0
 800d28a:	42a6      	cmp	r6, r4
 800d28c:	d105      	bne.n	800d29a <__libc_init_array+0x2e>
 800d28e:	bd70      	pop	{r4, r5, r6, pc}
 800d290:	f855 3b04 	ldr.w	r3, [r5], #4
 800d294:	4798      	blx	r3
 800d296:	3601      	adds	r6, #1
 800d298:	e7ee      	b.n	800d278 <__libc_init_array+0xc>
 800d29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d29e:	4798      	blx	r3
 800d2a0:	3601      	adds	r6, #1
 800d2a2:	e7f2      	b.n	800d28a <__libc_init_array+0x1e>
 800d2a4:	0800e3b0 	.word	0x0800e3b0
 800d2a8:	0800e3b0 	.word	0x0800e3b0
 800d2ac:	0800e3b0 	.word	0x0800e3b0
 800d2b0:	0800e3b4 	.word	0x0800e3b4

0800d2b4 <__retarget_lock_init_recursive>:
 800d2b4:	4770      	bx	lr

0800d2b6 <__retarget_lock_acquire_recursive>:
 800d2b6:	4770      	bx	lr

0800d2b8 <__retarget_lock_release_recursive>:
 800d2b8:	4770      	bx	lr

0800d2ba <memcpy>:
 800d2ba:	440a      	add	r2, r1
 800d2bc:	4291      	cmp	r1, r2
 800d2be:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2c2:	d100      	bne.n	800d2c6 <memcpy+0xc>
 800d2c4:	4770      	bx	lr
 800d2c6:	b510      	push	{r4, lr}
 800d2c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2d0:	4291      	cmp	r1, r2
 800d2d2:	d1f9      	bne.n	800d2c8 <memcpy+0xe>
 800d2d4:	bd10      	pop	{r4, pc}
	...

0800d2d8 <_free_r>:
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	4605      	mov	r5, r0
 800d2dc:	2900      	cmp	r1, #0
 800d2de:	d041      	beq.n	800d364 <_free_r+0x8c>
 800d2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2e4:	1f0c      	subs	r4, r1, #4
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	bfb8      	it	lt
 800d2ea:	18e4      	addlt	r4, r4, r3
 800d2ec:	f000 f8e0 	bl	800d4b0 <__malloc_lock>
 800d2f0:	4a1d      	ldr	r2, [pc, #116]	@ (800d368 <_free_r+0x90>)
 800d2f2:	6813      	ldr	r3, [r2, #0]
 800d2f4:	b933      	cbnz	r3, 800d304 <_free_r+0x2c>
 800d2f6:	6063      	str	r3, [r4, #4]
 800d2f8:	6014      	str	r4, [r2, #0]
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d300:	f000 b8dc 	b.w	800d4bc <__malloc_unlock>
 800d304:	42a3      	cmp	r3, r4
 800d306:	d908      	bls.n	800d31a <_free_r+0x42>
 800d308:	6820      	ldr	r0, [r4, #0]
 800d30a:	1821      	adds	r1, r4, r0
 800d30c:	428b      	cmp	r3, r1
 800d30e:	bf01      	itttt	eq
 800d310:	6819      	ldreq	r1, [r3, #0]
 800d312:	685b      	ldreq	r3, [r3, #4]
 800d314:	1809      	addeq	r1, r1, r0
 800d316:	6021      	streq	r1, [r4, #0]
 800d318:	e7ed      	b.n	800d2f6 <_free_r+0x1e>
 800d31a:	461a      	mov	r2, r3
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	b10b      	cbz	r3, 800d324 <_free_r+0x4c>
 800d320:	42a3      	cmp	r3, r4
 800d322:	d9fa      	bls.n	800d31a <_free_r+0x42>
 800d324:	6811      	ldr	r1, [r2, #0]
 800d326:	1850      	adds	r0, r2, r1
 800d328:	42a0      	cmp	r0, r4
 800d32a:	d10b      	bne.n	800d344 <_free_r+0x6c>
 800d32c:	6820      	ldr	r0, [r4, #0]
 800d32e:	4401      	add	r1, r0
 800d330:	1850      	adds	r0, r2, r1
 800d332:	4283      	cmp	r3, r0
 800d334:	6011      	str	r1, [r2, #0]
 800d336:	d1e0      	bne.n	800d2fa <_free_r+0x22>
 800d338:	6818      	ldr	r0, [r3, #0]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	6053      	str	r3, [r2, #4]
 800d33e:	4408      	add	r0, r1
 800d340:	6010      	str	r0, [r2, #0]
 800d342:	e7da      	b.n	800d2fa <_free_r+0x22>
 800d344:	d902      	bls.n	800d34c <_free_r+0x74>
 800d346:	230c      	movs	r3, #12
 800d348:	602b      	str	r3, [r5, #0]
 800d34a:	e7d6      	b.n	800d2fa <_free_r+0x22>
 800d34c:	6820      	ldr	r0, [r4, #0]
 800d34e:	1821      	adds	r1, r4, r0
 800d350:	428b      	cmp	r3, r1
 800d352:	bf04      	itt	eq
 800d354:	6819      	ldreq	r1, [r3, #0]
 800d356:	685b      	ldreq	r3, [r3, #4]
 800d358:	6063      	str	r3, [r4, #4]
 800d35a:	bf04      	itt	eq
 800d35c:	1809      	addeq	r1, r1, r0
 800d35e:	6021      	streq	r1, [r4, #0]
 800d360:	6054      	str	r4, [r2, #4]
 800d362:	e7ca      	b.n	800d2fa <_free_r+0x22>
 800d364:	bd38      	pop	{r3, r4, r5, pc}
 800d366:	bf00      	nop
 800d368:	20014b20 	.word	0x20014b20

0800d36c <sbrk_aligned>:
 800d36c:	b570      	push	{r4, r5, r6, lr}
 800d36e:	4e0f      	ldr	r6, [pc, #60]	@ (800d3ac <sbrk_aligned+0x40>)
 800d370:	460c      	mov	r4, r1
 800d372:	6831      	ldr	r1, [r6, #0]
 800d374:	4605      	mov	r5, r0
 800d376:	b911      	cbnz	r1, 800d37e <sbrk_aligned+0x12>
 800d378:	f000 fe28 	bl	800dfcc <_sbrk_r>
 800d37c:	6030      	str	r0, [r6, #0]
 800d37e:	4621      	mov	r1, r4
 800d380:	4628      	mov	r0, r5
 800d382:	f000 fe23 	bl	800dfcc <_sbrk_r>
 800d386:	1c43      	adds	r3, r0, #1
 800d388:	d103      	bne.n	800d392 <sbrk_aligned+0x26>
 800d38a:	f04f 34ff 	mov.w	r4, #4294967295
 800d38e:	4620      	mov	r0, r4
 800d390:	bd70      	pop	{r4, r5, r6, pc}
 800d392:	1cc4      	adds	r4, r0, #3
 800d394:	f024 0403 	bic.w	r4, r4, #3
 800d398:	42a0      	cmp	r0, r4
 800d39a:	d0f8      	beq.n	800d38e <sbrk_aligned+0x22>
 800d39c:	1a21      	subs	r1, r4, r0
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f000 fe14 	bl	800dfcc <_sbrk_r>
 800d3a4:	3001      	adds	r0, #1
 800d3a6:	d1f2      	bne.n	800d38e <sbrk_aligned+0x22>
 800d3a8:	e7ef      	b.n	800d38a <sbrk_aligned+0x1e>
 800d3aa:	bf00      	nop
 800d3ac:	20014b1c 	.word	0x20014b1c

0800d3b0 <_malloc_r>:
 800d3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b4:	1ccd      	adds	r5, r1, #3
 800d3b6:	f025 0503 	bic.w	r5, r5, #3
 800d3ba:	3508      	adds	r5, #8
 800d3bc:	2d0c      	cmp	r5, #12
 800d3be:	bf38      	it	cc
 800d3c0:	250c      	movcc	r5, #12
 800d3c2:	2d00      	cmp	r5, #0
 800d3c4:	4606      	mov	r6, r0
 800d3c6:	db01      	blt.n	800d3cc <_malloc_r+0x1c>
 800d3c8:	42a9      	cmp	r1, r5
 800d3ca:	d904      	bls.n	800d3d6 <_malloc_r+0x26>
 800d3cc:	230c      	movs	r3, #12
 800d3ce:	6033      	str	r3, [r6, #0]
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d4ac <_malloc_r+0xfc>
 800d3da:	f000 f869 	bl	800d4b0 <__malloc_lock>
 800d3de:	f8d8 3000 	ldr.w	r3, [r8]
 800d3e2:	461c      	mov	r4, r3
 800d3e4:	bb44      	cbnz	r4, 800d438 <_malloc_r+0x88>
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	f7ff ffbf 	bl	800d36c <sbrk_aligned>
 800d3ee:	1c43      	adds	r3, r0, #1
 800d3f0:	4604      	mov	r4, r0
 800d3f2:	d158      	bne.n	800d4a6 <_malloc_r+0xf6>
 800d3f4:	f8d8 4000 	ldr.w	r4, [r8]
 800d3f8:	4627      	mov	r7, r4
 800d3fa:	2f00      	cmp	r7, #0
 800d3fc:	d143      	bne.n	800d486 <_malloc_r+0xd6>
 800d3fe:	2c00      	cmp	r4, #0
 800d400:	d04b      	beq.n	800d49a <_malloc_r+0xea>
 800d402:	6823      	ldr	r3, [r4, #0]
 800d404:	4639      	mov	r1, r7
 800d406:	4630      	mov	r0, r6
 800d408:	eb04 0903 	add.w	r9, r4, r3
 800d40c:	f000 fdde 	bl	800dfcc <_sbrk_r>
 800d410:	4581      	cmp	r9, r0
 800d412:	d142      	bne.n	800d49a <_malloc_r+0xea>
 800d414:	6821      	ldr	r1, [r4, #0]
 800d416:	1a6d      	subs	r5, r5, r1
 800d418:	4629      	mov	r1, r5
 800d41a:	4630      	mov	r0, r6
 800d41c:	f7ff ffa6 	bl	800d36c <sbrk_aligned>
 800d420:	3001      	adds	r0, #1
 800d422:	d03a      	beq.n	800d49a <_malloc_r+0xea>
 800d424:	6823      	ldr	r3, [r4, #0]
 800d426:	442b      	add	r3, r5
 800d428:	6023      	str	r3, [r4, #0]
 800d42a:	f8d8 3000 	ldr.w	r3, [r8]
 800d42e:	685a      	ldr	r2, [r3, #4]
 800d430:	bb62      	cbnz	r2, 800d48c <_malloc_r+0xdc>
 800d432:	f8c8 7000 	str.w	r7, [r8]
 800d436:	e00f      	b.n	800d458 <_malloc_r+0xa8>
 800d438:	6822      	ldr	r2, [r4, #0]
 800d43a:	1b52      	subs	r2, r2, r5
 800d43c:	d420      	bmi.n	800d480 <_malloc_r+0xd0>
 800d43e:	2a0b      	cmp	r2, #11
 800d440:	d917      	bls.n	800d472 <_malloc_r+0xc2>
 800d442:	1961      	adds	r1, r4, r5
 800d444:	42a3      	cmp	r3, r4
 800d446:	6025      	str	r5, [r4, #0]
 800d448:	bf18      	it	ne
 800d44a:	6059      	strne	r1, [r3, #4]
 800d44c:	6863      	ldr	r3, [r4, #4]
 800d44e:	bf08      	it	eq
 800d450:	f8c8 1000 	streq.w	r1, [r8]
 800d454:	5162      	str	r2, [r4, r5]
 800d456:	604b      	str	r3, [r1, #4]
 800d458:	4630      	mov	r0, r6
 800d45a:	f000 f82f 	bl	800d4bc <__malloc_unlock>
 800d45e:	f104 000b 	add.w	r0, r4, #11
 800d462:	1d23      	adds	r3, r4, #4
 800d464:	f020 0007 	bic.w	r0, r0, #7
 800d468:	1ac2      	subs	r2, r0, r3
 800d46a:	bf1c      	itt	ne
 800d46c:	1a1b      	subne	r3, r3, r0
 800d46e:	50a3      	strne	r3, [r4, r2]
 800d470:	e7af      	b.n	800d3d2 <_malloc_r+0x22>
 800d472:	6862      	ldr	r2, [r4, #4]
 800d474:	42a3      	cmp	r3, r4
 800d476:	bf0c      	ite	eq
 800d478:	f8c8 2000 	streq.w	r2, [r8]
 800d47c:	605a      	strne	r2, [r3, #4]
 800d47e:	e7eb      	b.n	800d458 <_malloc_r+0xa8>
 800d480:	4623      	mov	r3, r4
 800d482:	6864      	ldr	r4, [r4, #4]
 800d484:	e7ae      	b.n	800d3e4 <_malloc_r+0x34>
 800d486:	463c      	mov	r4, r7
 800d488:	687f      	ldr	r7, [r7, #4]
 800d48a:	e7b6      	b.n	800d3fa <_malloc_r+0x4a>
 800d48c:	461a      	mov	r2, r3
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	42a3      	cmp	r3, r4
 800d492:	d1fb      	bne.n	800d48c <_malloc_r+0xdc>
 800d494:	2300      	movs	r3, #0
 800d496:	6053      	str	r3, [r2, #4]
 800d498:	e7de      	b.n	800d458 <_malloc_r+0xa8>
 800d49a:	230c      	movs	r3, #12
 800d49c:	6033      	str	r3, [r6, #0]
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f000 f80c 	bl	800d4bc <__malloc_unlock>
 800d4a4:	e794      	b.n	800d3d0 <_malloc_r+0x20>
 800d4a6:	6005      	str	r5, [r0, #0]
 800d4a8:	e7d6      	b.n	800d458 <_malloc_r+0xa8>
 800d4aa:	bf00      	nop
 800d4ac:	20014b20 	.word	0x20014b20

0800d4b0 <__malloc_lock>:
 800d4b0:	4801      	ldr	r0, [pc, #4]	@ (800d4b8 <__malloc_lock+0x8>)
 800d4b2:	f7ff bf00 	b.w	800d2b6 <__retarget_lock_acquire_recursive>
 800d4b6:	bf00      	nop
 800d4b8:	20014b18 	.word	0x20014b18

0800d4bc <__malloc_unlock>:
 800d4bc:	4801      	ldr	r0, [pc, #4]	@ (800d4c4 <__malloc_unlock+0x8>)
 800d4be:	f7ff befb 	b.w	800d2b8 <__retarget_lock_release_recursive>
 800d4c2:	bf00      	nop
 800d4c4:	20014b18 	.word	0x20014b18

0800d4c8 <__ssputs_r>:
 800d4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4cc:	688e      	ldr	r6, [r1, #8]
 800d4ce:	461f      	mov	r7, r3
 800d4d0:	42be      	cmp	r6, r7
 800d4d2:	680b      	ldr	r3, [r1, #0]
 800d4d4:	4682      	mov	sl, r0
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	4690      	mov	r8, r2
 800d4da:	d82d      	bhi.n	800d538 <__ssputs_r+0x70>
 800d4dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d4e4:	d026      	beq.n	800d534 <__ssputs_r+0x6c>
 800d4e6:	6965      	ldr	r5, [r4, #20]
 800d4e8:	6909      	ldr	r1, [r1, #16]
 800d4ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4ee:	eba3 0901 	sub.w	r9, r3, r1
 800d4f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4f6:	1c7b      	adds	r3, r7, #1
 800d4f8:	444b      	add	r3, r9
 800d4fa:	106d      	asrs	r5, r5, #1
 800d4fc:	429d      	cmp	r5, r3
 800d4fe:	bf38      	it	cc
 800d500:	461d      	movcc	r5, r3
 800d502:	0553      	lsls	r3, r2, #21
 800d504:	d527      	bpl.n	800d556 <__ssputs_r+0x8e>
 800d506:	4629      	mov	r1, r5
 800d508:	f7ff ff52 	bl	800d3b0 <_malloc_r>
 800d50c:	4606      	mov	r6, r0
 800d50e:	b360      	cbz	r0, 800d56a <__ssputs_r+0xa2>
 800d510:	6921      	ldr	r1, [r4, #16]
 800d512:	464a      	mov	r2, r9
 800d514:	f7ff fed1 	bl	800d2ba <memcpy>
 800d518:	89a3      	ldrh	r3, [r4, #12]
 800d51a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d51e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d522:	81a3      	strh	r3, [r4, #12]
 800d524:	6126      	str	r6, [r4, #16]
 800d526:	6165      	str	r5, [r4, #20]
 800d528:	444e      	add	r6, r9
 800d52a:	eba5 0509 	sub.w	r5, r5, r9
 800d52e:	6026      	str	r6, [r4, #0]
 800d530:	60a5      	str	r5, [r4, #8]
 800d532:	463e      	mov	r6, r7
 800d534:	42be      	cmp	r6, r7
 800d536:	d900      	bls.n	800d53a <__ssputs_r+0x72>
 800d538:	463e      	mov	r6, r7
 800d53a:	6820      	ldr	r0, [r4, #0]
 800d53c:	4632      	mov	r2, r6
 800d53e:	4641      	mov	r1, r8
 800d540:	f000 fd2a 	bl	800df98 <memmove>
 800d544:	68a3      	ldr	r3, [r4, #8]
 800d546:	1b9b      	subs	r3, r3, r6
 800d548:	60a3      	str	r3, [r4, #8]
 800d54a:	6823      	ldr	r3, [r4, #0]
 800d54c:	4433      	add	r3, r6
 800d54e:	6023      	str	r3, [r4, #0]
 800d550:	2000      	movs	r0, #0
 800d552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d556:	462a      	mov	r2, r5
 800d558:	f000 fd48 	bl	800dfec <_realloc_r>
 800d55c:	4606      	mov	r6, r0
 800d55e:	2800      	cmp	r0, #0
 800d560:	d1e0      	bne.n	800d524 <__ssputs_r+0x5c>
 800d562:	6921      	ldr	r1, [r4, #16]
 800d564:	4650      	mov	r0, sl
 800d566:	f7ff feb7 	bl	800d2d8 <_free_r>
 800d56a:	230c      	movs	r3, #12
 800d56c:	f8ca 3000 	str.w	r3, [sl]
 800d570:	89a3      	ldrh	r3, [r4, #12]
 800d572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d576:	81a3      	strh	r3, [r4, #12]
 800d578:	f04f 30ff 	mov.w	r0, #4294967295
 800d57c:	e7e9      	b.n	800d552 <__ssputs_r+0x8a>
	...

0800d580 <_svfiprintf_r>:
 800d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d584:	4698      	mov	r8, r3
 800d586:	898b      	ldrh	r3, [r1, #12]
 800d588:	061b      	lsls	r3, r3, #24
 800d58a:	b09d      	sub	sp, #116	@ 0x74
 800d58c:	4607      	mov	r7, r0
 800d58e:	460d      	mov	r5, r1
 800d590:	4614      	mov	r4, r2
 800d592:	d510      	bpl.n	800d5b6 <_svfiprintf_r+0x36>
 800d594:	690b      	ldr	r3, [r1, #16]
 800d596:	b973      	cbnz	r3, 800d5b6 <_svfiprintf_r+0x36>
 800d598:	2140      	movs	r1, #64	@ 0x40
 800d59a:	f7ff ff09 	bl	800d3b0 <_malloc_r>
 800d59e:	6028      	str	r0, [r5, #0]
 800d5a0:	6128      	str	r0, [r5, #16]
 800d5a2:	b930      	cbnz	r0, 800d5b2 <_svfiprintf_r+0x32>
 800d5a4:	230c      	movs	r3, #12
 800d5a6:	603b      	str	r3, [r7, #0]
 800d5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ac:	b01d      	add	sp, #116	@ 0x74
 800d5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b2:	2340      	movs	r3, #64	@ 0x40
 800d5b4:	616b      	str	r3, [r5, #20]
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5ba:	2320      	movs	r3, #32
 800d5bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5c4:	2330      	movs	r3, #48	@ 0x30
 800d5c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d764 <_svfiprintf_r+0x1e4>
 800d5ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5ce:	f04f 0901 	mov.w	r9, #1
 800d5d2:	4623      	mov	r3, r4
 800d5d4:	469a      	mov	sl, r3
 800d5d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5da:	b10a      	cbz	r2, 800d5e0 <_svfiprintf_r+0x60>
 800d5dc:	2a25      	cmp	r2, #37	@ 0x25
 800d5de:	d1f9      	bne.n	800d5d4 <_svfiprintf_r+0x54>
 800d5e0:	ebba 0b04 	subs.w	fp, sl, r4
 800d5e4:	d00b      	beq.n	800d5fe <_svfiprintf_r+0x7e>
 800d5e6:	465b      	mov	r3, fp
 800d5e8:	4622      	mov	r2, r4
 800d5ea:	4629      	mov	r1, r5
 800d5ec:	4638      	mov	r0, r7
 800d5ee:	f7ff ff6b 	bl	800d4c8 <__ssputs_r>
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	f000 80a7 	beq.w	800d746 <_svfiprintf_r+0x1c6>
 800d5f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5fa:	445a      	add	r2, fp
 800d5fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5fe:	f89a 3000 	ldrb.w	r3, [sl]
 800d602:	2b00      	cmp	r3, #0
 800d604:	f000 809f 	beq.w	800d746 <_svfiprintf_r+0x1c6>
 800d608:	2300      	movs	r3, #0
 800d60a:	f04f 32ff 	mov.w	r2, #4294967295
 800d60e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d612:	f10a 0a01 	add.w	sl, sl, #1
 800d616:	9304      	str	r3, [sp, #16]
 800d618:	9307      	str	r3, [sp, #28]
 800d61a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d61e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d620:	4654      	mov	r4, sl
 800d622:	2205      	movs	r2, #5
 800d624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d628:	484e      	ldr	r0, [pc, #312]	@ (800d764 <_svfiprintf_r+0x1e4>)
 800d62a:	f7f2 fe39 	bl	80002a0 <memchr>
 800d62e:	9a04      	ldr	r2, [sp, #16]
 800d630:	b9d8      	cbnz	r0, 800d66a <_svfiprintf_r+0xea>
 800d632:	06d0      	lsls	r0, r2, #27
 800d634:	bf44      	itt	mi
 800d636:	2320      	movmi	r3, #32
 800d638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d63c:	0711      	lsls	r1, r2, #28
 800d63e:	bf44      	itt	mi
 800d640:	232b      	movmi	r3, #43	@ 0x2b
 800d642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d646:	f89a 3000 	ldrb.w	r3, [sl]
 800d64a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d64c:	d015      	beq.n	800d67a <_svfiprintf_r+0xfa>
 800d64e:	9a07      	ldr	r2, [sp, #28]
 800d650:	4654      	mov	r4, sl
 800d652:	2000      	movs	r0, #0
 800d654:	f04f 0c0a 	mov.w	ip, #10
 800d658:	4621      	mov	r1, r4
 800d65a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d65e:	3b30      	subs	r3, #48	@ 0x30
 800d660:	2b09      	cmp	r3, #9
 800d662:	d94b      	bls.n	800d6fc <_svfiprintf_r+0x17c>
 800d664:	b1b0      	cbz	r0, 800d694 <_svfiprintf_r+0x114>
 800d666:	9207      	str	r2, [sp, #28]
 800d668:	e014      	b.n	800d694 <_svfiprintf_r+0x114>
 800d66a:	eba0 0308 	sub.w	r3, r0, r8
 800d66e:	fa09 f303 	lsl.w	r3, r9, r3
 800d672:	4313      	orrs	r3, r2
 800d674:	9304      	str	r3, [sp, #16]
 800d676:	46a2      	mov	sl, r4
 800d678:	e7d2      	b.n	800d620 <_svfiprintf_r+0xa0>
 800d67a:	9b03      	ldr	r3, [sp, #12]
 800d67c:	1d19      	adds	r1, r3, #4
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	9103      	str	r1, [sp, #12]
 800d682:	2b00      	cmp	r3, #0
 800d684:	bfbb      	ittet	lt
 800d686:	425b      	neglt	r3, r3
 800d688:	f042 0202 	orrlt.w	r2, r2, #2
 800d68c:	9307      	strge	r3, [sp, #28]
 800d68e:	9307      	strlt	r3, [sp, #28]
 800d690:	bfb8      	it	lt
 800d692:	9204      	strlt	r2, [sp, #16]
 800d694:	7823      	ldrb	r3, [r4, #0]
 800d696:	2b2e      	cmp	r3, #46	@ 0x2e
 800d698:	d10a      	bne.n	800d6b0 <_svfiprintf_r+0x130>
 800d69a:	7863      	ldrb	r3, [r4, #1]
 800d69c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d69e:	d132      	bne.n	800d706 <_svfiprintf_r+0x186>
 800d6a0:	9b03      	ldr	r3, [sp, #12]
 800d6a2:	1d1a      	adds	r2, r3, #4
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	9203      	str	r2, [sp, #12]
 800d6a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6ac:	3402      	adds	r4, #2
 800d6ae:	9305      	str	r3, [sp, #20]
 800d6b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d774 <_svfiprintf_r+0x1f4>
 800d6b4:	7821      	ldrb	r1, [r4, #0]
 800d6b6:	2203      	movs	r2, #3
 800d6b8:	4650      	mov	r0, sl
 800d6ba:	f7f2 fdf1 	bl	80002a0 <memchr>
 800d6be:	b138      	cbz	r0, 800d6d0 <_svfiprintf_r+0x150>
 800d6c0:	9b04      	ldr	r3, [sp, #16]
 800d6c2:	eba0 000a 	sub.w	r0, r0, sl
 800d6c6:	2240      	movs	r2, #64	@ 0x40
 800d6c8:	4082      	lsls	r2, r0
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	3401      	adds	r4, #1
 800d6ce:	9304      	str	r3, [sp, #16]
 800d6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6d4:	4824      	ldr	r0, [pc, #144]	@ (800d768 <_svfiprintf_r+0x1e8>)
 800d6d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6da:	2206      	movs	r2, #6
 800d6dc:	f7f2 fde0 	bl	80002a0 <memchr>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d036      	beq.n	800d752 <_svfiprintf_r+0x1d2>
 800d6e4:	4b21      	ldr	r3, [pc, #132]	@ (800d76c <_svfiprintf_r+0x1ec>)
 800d6e6:	bb1b      	cbnz	r3, 800d730 <_svfiprintf_r+0x1b0>
 800d6e8:	9b03      	ldr	r3, [sp, #12]
 800d6ea:	3307      	adds	r3, #7
 800d6ec:	f023 0307 	bic.w	r3, r3, #7
 800d6f0:	3308      	adds	r3, #8
 800d6f2:	9303      	str	r3, [sp, #12]
 800d6f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6f6:	4433      	add	r3, r6
 800d6f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6fa:	e76a      	b.n	800d5d2 <_svfiprintf_r+0x52>
 800d6fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d700:	460c      	mov	r4, r1
 800d702:	2001      	movs	r0, #1
 800d704:	e7a8      	b.n	800d658 <_svfiprintf_r+0xd8>
 800d706:	2300      	movs	r3, #0
 800d708:	3401      	adds	r4, #1
 800d70a:	9305      	str	r3, [sp, #20]
 800d70c:	4619      	mov	r1, r3
 800d70e:	f04f 0c0a 	mov.w	ip, #10
 800d712:	4620      	mov	r0, r4
 800d714:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d718:	3a30      	subs	r2, #48	@ 0x30
 800d71a:	2a09      	cmp	r2, #9
 800d71c:	d903      	bls.n	800d726 <_svfiprintf_r+0x1a6>
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d0c6      	beq.n	800d6b0 <_svfiprintf_r+0x130>
 800d722:	9105      	str	r1, [sp, #20]
 800d724:	e7c4      	b.n	800d6b0 <_svfiprintf_r+0x130>
 800d726:	fb0c 2101 	mla	r1, ip, r1, r2
 800d72a:	4604      	mov	r4, r0
 800d72c:	2301      	movs	r3, #1
 800d72e:	e7f0      	b.n	800d712 <_svfiprintf_r+0x192>
 800d730:	ab03      	add	r3, sp, #12
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	462a      	mov	r2, r5
 800d736:	4b0e      	ldr	r3, [pc, #56]	@ (800d770 <_svfiprintf_r+0x1f0>)
 800d738:	a904      	add	r1, sp, #16
 800d73a:	4638      	mov	r0, r7
 800d73c:	f3af 8000 	nop.w
 800d740:	1c42      	adds	r2, r0, #1
 800d742:	4606      	mov	r6, r0
 800d744:	d1d6      	bne.n	800d6f4 <_svfiprintf_r+0x174>
 800d746:	89ab      	ldrh	r3, [r5, #12]
 800d748:	065b      	lsls	r3, r3, #25
 800d74a:	f53f af2d 	bmi.w	800d5a8 <_svfiprintf_r+0x28>
 800d74e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d750:	e72c      	b.n	800d5ac <_svfiprintf_r+0x2c>
 800d752:	ab03      	add	r3, sp, #12
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	462a      	mov	r2, r5
 800d758:	4b05      	ldr	r3, [pc, #20]	@ (800d770 <_svfiprintf_r+0x1f0>)
 800d75a:	a904      	add	r1, sp, #16
 800d75c:	4638      	mov	r0, r7
 800d75e:	f000 f9bb 	bl	800dad8 <_printf_i>
 800d762:	e7ed      	b.n	800d740 <_svfiprintf_r+0x1c0>
 800d764:	0800e372 	.word	0x0800e372
 800d768:	0800e37c 	.word	0x0800e37c
 800d76c:	00000000 	.word	0x00000000
 800d770:	0800d4c9 	.word	0x0800d4c9
 800d774:	0800e378 	.word	0x0800e378

0800d778 <__sfputc_r>:
 800d778:	6893      	ldr	r3, [r2, #8]
 800d77a:	3b01      	subs	r3, #1
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	b410      	push	{r4}
 800d780:	6093      	str	r3, [r2, #8]
 800d782:	da08      	bge.n	800d796 <__sfputc_r+0x1e>
 800d784:	6994      	ldr	r4, [r2, #24]
 800d786:	42a3      	cmp	r3, r4
 800d788:	db01      	blt.n	800d78e <__sfputc_r+0x16>
 800d78a:	290a      	cmp	r1, #10
 800d78c:	d103      	bne.n	800d796 <__sfputc_r+0x1e>
 800d78e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d792:	f000 bb6d 	b.w	800de70 <__swbuf_r>
 800d796:	6813      	ldr	r3, [r2, #0]
 800d798:	1c58      	adds	r0, r3, #1
 800d79a:	6010      	str	r0, [r2, #0]
 800d79c:	7019      	strb	r1, [r3, #0]
 800d79e:	4608      	mov	r0, r1
 800d7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7a4:	4770      	bx	lr

0800d7a6 <__sfputs_r>:
 800d7a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7a8:	4606      	mov	r6, r0
 800d7aa:	460f      	mov	r7, r1
 800d7ac:	4614      	mov	r4, r2
 800d7ae:	18d5      	adds	r5, r2, r3
 800d7b0:	42ac      	cmp	r4, r5
 800d7b2:	d101      	bne.n	800d7b8 <__sfputs_r+0x12>
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	e007      	b.n	800d7c8 <__sfputs_r+0x22>
 800d7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7bc:	463a      	mov	r2, r7
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f7ff ffda 	bl	800d778 <__sfputc_r>
 800d7c4:	1c43      	adds	r3, r0, #1
 800d7c6:	d1f3      	bne.n	800d7b0 <__sfputs_r+0xa>
 800d7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d7cc <_vfiprintf_r>:
 800d7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d0:	460d      	mov	r5, r1
 800d7d2:	b09d      	sub	sp, #116	@ 0x74
 800d7d4:	4614      	mov	r4, r2
 800d7d6:	4698      	mov	r8, r3
 800d7d8:	4606      	mov	r6, r0
 800d7da:	b118      	cbz	r0, 800d7e4 <_vfiprintf_r+0x18>
 800d7dc:	6a03      	ldr	r3, [r0, #32]
 800d7de:	b90b      	cbnz	r3, 800d7e4 <_vfiprintf_r+0x18>
 800d7e0:	f7ff fc46 	bl	800d070 <__sinit>
 800d7e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7e6:	07d9      	lsls	r1, r3, #31
 800d7e8:	d405      	bmi.n	800d7f6 <_vfiprintf_r+0x2a>
 800d7ea:	89ab      	ldrh	r3, [r5, #12]
 800d7ec:	059a      	lsls	r2, r3, #22
 800d7ee:	d402      	bmi.n	800d7f6 <_vfiprintf_r+0x2a>
 800d7f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7f2:	f7ff fd60 	bl	800d2b6 <__retarget_lock_acquire_recursive>
 800d7f6:	89ab      	ldrh	r3, [r5, #12]
 800d7f8:	071b      	lsls	r3, r3, #28
 800d7fa:	d501      	bpl.n	800d800 <_vfiprintf_r+0x34>
 800d7fc:	692b      	ldr	r3, [r5, #16]
 800d7fe:	b99b      	cbnz	r3, 800d828 <_vfiprintf_r+0x5c>
 800d800:	4629      	mov	r1, r5
 800d802:	4630      	mov	r0, r6
 800d804:	f000 fb72 	bl	800deec <__swsetup_r>
 800d808:	b170      	cbz	r0, 800d828 <_vfiprintf_r+0x5c>
 800d80a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d80c:	07dc      	lsls	r4, r3, #31
 800d80e:	d504      	bpl.n	800d81a <_vfiprintf_r+0x4e>
 800d810:	f04f 30ff 	mov.w	r0, #4294967295
 800d814:	b01d      	add	sp, #116	@ 0x74
 800d816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d81a:	89ab      	ldrh	r3, [r5, #12]
 800d81c:	0598      	lsls	r0, r3, #22
 800d81e:	d4f7      	bmi.n	800d810 <_vfiprintf_r+0x44>
 800d820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d822:	f7ff fd49 	bl	800d2b8 <__retarget_lock_release_recursive>
 800d826:	e7f3      	b.n	800d810 <_vfiprintf_r+0x44>
 800d828:	2300      	movs	r3, #0
 800d82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d82c:	2320      	movs	r3, #32
 800d82e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d832:	f8cd 800c 	str.w	r8, [sp, #12]
 800d836:	2330      	movs	r3, #48	@ 0x30
 800d838:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d9e8 <_vfiprintf_r+0x21c>
 800d83c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d840:	f04f 0901 	mov.w	r9, #1
 800d844:	4623      	mov	r3, r4
 800d846:	469a      	mov	sl, r3
 800d848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d84c:	b10a      	cbz	r2, 800d852 <_vfiprintf_r+0x86>
 800d84e:	2a25      	cmp	r2, #37	@ 0x25
 800d850:	d1f9      	bne.n	800d846 <_vfiprintf_r+0x7a>
 800d852:	ebba 0b04 	subs.w	fp, sl, r4
 800d856:	d00b      	beq.n	800d870 <_vfiprintf_r+0xa4>
 800d858:	465b      	mov	r3, fp
 800d85a:	4622      	mov	r2, r4
 800d85c:	4629      	mov	r1, r5
 800d85e:	4630      	mov	r0, r6
 800d860:	f7ff ffa1 	bl	800d7a6 <__sfputs_r>
 800d864:	3001      	adds	r0, #1
 800d866:	f000 80a7 	beq.w	800d9b8 <_vfiprintf_r+0x1ec>
 800d86a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d86c:	445a      	add	r2, fp
 800d86e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d870:	f89a 3000 	ldrb.w	r3, [sl]
 800d874:	2b00      	cmp	r3, #0
 800d876:	f000 809f 	beq.w	800d9b8 <_vfiprintf_r+0x1ec>
 800d87a:	2300      	movs	r3, #0
 800d87c:	f04f 32ff 	mov.w	r2, #4294967295
 800d880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d884:	f10a 0a01 	add.w	sl, sl, #1
 800d888:	9304      	str	r3, [sp, #16]
 800d88a:	9307      	str	r3, [sp, #28]
 800d88c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d890:	931a      	str	r3, [sp, #104]	@ 0x68
 800d892:	4654      	mov	r4, sl
 800d894:	2205      	movs	r2, #5
 800d896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d89a:	4853      	ldr	r0, [pc, #332]	@ (800d9e8 <_vfiprintf_r+0x21c>)
 800d89c:	f7f2 fd00 	bl	80002a0 <memchr>
 800d8a0:	9a04      	ldr	r2, [sp, #16]
 800d8a2:	b9d8      	cbnz	r0, 800d8dc <_vfiprintf_r+0x110>
 800d8a4:	06d1      	lsls	r1, r2, #27
 800d8a6:	bf44      	itt	mi
 800d8a8:	2320      	movmi	r3, #32
 800d8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8ae:	0713      	lsls	r3, r2, #28
 800d8b0:	bf44      	itt	mi
 800d8b2:	232b      	movmi	r3, #43	@ 0x2b
 800d8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8b8:	f89a 3000 	ldrb.w	r3, [sl]
 800d8bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8be:	d015      	beq.n	800d8ec <_vfiprintf_r+0x120>
 800d8c0:	9a07      	ldr	r2, [sp, #28]
 800d8c2:	4654      	mov	r4, sl
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	f04f 0c0a 	mov.w	ip, #10
 800d8ca:	4621      	mov	r1, r4
 800d8cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8d0:	3b30      	subs	r3, #48	@ 0x30
 800d8d2:	2b09      	cmp	r3, #9
 800d8d4:	d94b      	bls.n	800d96e <_vfiprintf_r+0x1a2>
 800d8d6:	b1b0      	cbz	r0, 800d906 <_vfiprintf_r+0x13a>
 800d8d8:	9207      	str	r2, [sp, #28]
 800d8da:	e014      	b.n	800d906 <_vfiprintf_r+0x13a>
 800d8dc:	eba0 0308 	sub.w	r3, r0, r8
 800d8e0:	fa09 f303 	lsl.w	r3, r9, r3
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	9304      	str	r3, [sp, #16]
 800d8e8:	46a2      	mov	sl, r4
 800d8ea:	e7d2      	b.n	800d892 <_vfiprintf_r+0xc6>
 800d8ec:	9b03      	ldr	r3, [sp, #12]
 800d8ee:	1d19      	adds	r1, r3, #4
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	9103      	str	r1, [sp, #12]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	bfbb      	ittet	lt
 800d8f8:	425b      	neglt	r3, r3
 800d8fa:	f042 0202 	orrlt.w	r2, r2, #2
 800d8fe:	9307      	strge	r3, [sp, #28]
 800d900:	9307      	strlt	r3, [sp, #28]
 800d902:	bfb8      	it	lt
 800d904:	9204      	strlt	r2, [sp, #16]
 800d906:	7823      	ldrb	r3, [r4, #0]
 800d908:	2b2e      	cmp	r3, #46	@ 0x2e
 800d90a:	d10a      	bne.n	800d922 <_vfiprintf_r+0x156>
 800d90c:	7863      	ldrb	r3, [r4, #1]
 800d90e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d910:	d132      	bne.n	800d978 <_vfiprintf_r+0x1ac>
 800d912:	9b03      	ldr	r3, [sp, #12]
 800d914:	1d1a      	adds	r2, r3, #4
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	9203      	str	r2, [sp, #12]
 800d91a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d91e:	3402      	adds	r4, #2
 800d920:	9305      	str	r3, [sp, #20]
 800d922:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d9f8 <_vfiprintf_r+0x22c>
 800d926:	7821      	ldrb	r1, [r4, #0]
 800d928:	2203      	movs	r2, #3
 800d92a:	4650      	mov	r0, sl
 800d92c:	f7f2 fcb8 	bl	80002a0 <memchr>
 800d930:	b138      	cbz	r0, 800d942 <_vfiprintf_r+0x176>
 800d932:	9b04      	ldr	r3, [sp, #16]
 800d934:	eba0 000a 	sub.w	r0, r0, sl
 800d938:	2240      	movs	r2, #64	@ 0x40
 800d93a:	4082      	lsls	r2, r0
 800d93c:	4313      	orrs	r3, r2
 800d93e:	3401      	adds	r4, #1
 800d940:	9304      	str	r3, [sp, #16]
 800d942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d946:	4829      	ldr	r0, [pc, #164]	@ (800d9ec <_vfiprintf_r+0x220>)
 800d948:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d94c:	2206      	movs	r2, #6
 800d94e:	f7f2 fca7 	bl	80002a0 <memchr>
 800d952:	2800      	cmp	r0, #0
 800d954:	d03f      	beq.n	800d9d6 <_vfiprintf_r+0x20a>
 800d956:	4b26      	ldr	r3, [pc, #152]	@ (800d9f0 <_vfiprintf_r+0x224>)
 800d958:	bb1b      	cbnz	r3, 800d9a2 <_vfiprintf_r+0x1d6>
 800d95a:	9b03      	ldr	r3, [sp, #12]
 800d95c:	3307      	adds	r3, #7
 800d95e:	f023 0307 	bic.w	r3, r3, #7
 800d962:	3308      	adds	r3, #8
 800d964:	9303      	str	r3, [sp, #12]
 800d966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d968:	443b      	add	r3, r7
 800d96a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d96c:	e76a      	b.n	800d844 <_vfiprintf_r+0x78>
 800d96e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d972:	460c      	mov	r4, r1
 800d974:	2001      	movs	r0, #1
 800d976:	e7a8      	b.n	800d8ca <_vfiprintf_r+0xfe>
 800d978:	2300      	movs	r3, #0
 800d97a:	3401      	adds	r4, #1
 800d97c:	9305      	str	r3, [sp, #20]
 800d97e:	4619      	mov	r1, r3
 800d980:	f04f 0c0a 	mov.w	ip, #10
 800d984:	4620      	mov	r0, r4
 800d986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d98a:	3a30      	subs	r2, #48	@ 0x30
 800d98c:	2a09      	cmp	r2, #9
 800d98e:	d903      	bls.n	800d998 <_vfiprintf_r+0x1cc>
 800d990:	2b00      	cmp	r3, #0
 800d992:	d0c6      	beq.n	800d922 <_vfiprintf_r+0x156>
 800d994:	9105      	str	r1, [sp, #20]
 800d996:	e7c4      	b.n	800d922 <_vfiprintf_r+0x156>
 800d998:	fb0c 2101 	mla	r1, ip, r1, r2
 800d99c:	4604      	mov	r4, r0
 800d99e:	2301      	movs	r3, #1
 800d9a0:	e7f0      	b.n	800d984 <_vfiprintf_r+0x1b8>
 800d9a2:	ab03      	add	r3, sp, #12
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	462a      	mov	r2, r5
 800d9a8:	4b12      	ldr	r3, [pc, #72]	@ (800d9f4 <_vfiprintf_r+0x228>)
 800d9aa:	a904      	add	r1, sp, #16
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	f3af 8000 	nop.w
 800d9b2:	4607      	mov	r7, r0
 800d9b4:	1c78      	adds	r0, r7, #1
 800d9b6:	d1d6      	bne.n	800d966 <_vfiprintf_r+0x19a>
 800d9b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9ba:	07d9      	lsls	r1, r3, #31
 800d9bc:	d405      	bmi.n	800d9ca <_vfiprintf_r+0x1fe>
 800d9be:	89ab      	ldrh	r3, [r5, #12]
 800d9c0:	059a      	lsls	r2, r3, #22
 800d9c2:	d402      	bmi.n	800d9ca <_vfiprintf_r+0x1fe>
 800d9c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9c6:	f7ff fc77 	bl	800d2b8 <__retarget_lock_release_recursive>
 800d9ca:	89ab      	ldrh	r3, [r5, #12]
 800d9cc:	065b      	lsls	r3, r3, #25
 800d9ce:	f53f af1f 	bmi.w	800d810 <_vfiprintf_r+0x44>
 800d9d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9d4:	e71e      	b.n	800d814 <_vfiprintf_r+0x48>
 800d9d6:	ab03      	add	r3, sp, #12
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	462a      	mov	r2, r5
 800d9dc:	4b05      	ldr	r3, [pc, #20]	@ (800d9f4 <_vfiprintf_r+0x228>)
 800d9de:	a904      	add	r1, sp, #16
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	f000 f879 	bl	800dad8 <_printf_i>
 800d9e6:	e7e4      	b.n	800d9b2 <_vfiprintf_r+0x1e6>
 800d9e8:	0800e372 	.word	0x0800e372
 800d9ec:	0800e37c 	.word	0x0800e37c
 800d9f0:	00000000 	.word	0x00000000
 800d9f4:	0800d7a7 	.word	0x0800d7a7
 800d9f8:	0800e378 	.word	0x0800e378

0800d9fc <_printf_common>:
 800d9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da00:	4616      	mov	r6, r2
 800da02:	4698      	mov	r8, r3
 800da04:	688a      	ldr	r2, [r1, #8]
 800da06:	690b      	ldr	r3, [r1, #16]
 800da08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da0c:	4293      	cmp	r3, r2
 800da0e:	bfb8      	it	lt
 800da10:	4613      	movlt	r3, r2
 800da12:	6033      	str	r3, [r6, #0]
 800da14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da18:	4607      	mov	r7, r0
 800da1a:	460c      	mov	r4, r1
 800da1c:	b10a      	cbz	r2, 800da22 <_printf_common+0x26>
 800da1e:	3301      	adds	r3, #1
 800da20:	6033      	str	r3, [r6, #0]
 800da22:	6823      	ldr	r3, [r4, #0]
 800da24:	0699      	lsls	r1, r3, #26
 800da26:	bf42      	ittt	mi
 800da28:	6833      	ldrmi	r3, [r6, #0]
 800da2a:	3302      	addmi	r3, #2
 800da2c:	6033      	strmi	r3, [r6, #0]
 800da2e:	6825      	ldr	r5, [r4, #0]
 800da30:	f015 0506 	ands.w	r5, r5, #6
 800da34:	d106      	bne.n	800da44 <_printf_common+0x48>
 800da36:	f104 0a19 	add.w	sl, r4, #25
 800da3a:	68e3      	ldr	r3, [r4, #12]
 800da3c:	6832      	ldr	r2, [r6, #0]
 800da3e:	1a9b      	subs	r3, r3, r2
 800da40:	42ab      	cmp	r3, r5
 800da42:	dc26      	bgt.n	800da92 <_printf_common+0x96>
 800da44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da48:	6822      	ldr	r2, [r4, #0]
 800da4a:	3b00      	subs	r3, #0
 800da4c:	bf18      	it	ne
 800da4e:	2301      	movne	r3, #1
 800da50:	0692      	lsls	r2, r2, #26
 800da52:	d42b      	bmi.n	800daac <_printf_common+0xb0>
 800da54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da58:	4641      	mov	r1, r8
 800da5a:	4638      	mov	r0, r7
 800da5c:	47c8      	blx	r9
 800da5e:	3001      	adds	r0, #1
 800da60:	d01e      	beq.n	800daa0 <_printf_common+0xa4>
 800da62:	6823      	ldr	r3, [r4, #0]
 800da64:	6922      	ldr	r2, [r4, #16]
 800da66:	f003 0306 	and.w	r3, r3, #6
 800da6a:	2b04      	cmp	r3, #4
 800da6c:	bf02      	ittt	eq
 800da6e:	68e5      	ldreq	r5, [r4, #12]
 800da70:	6833      	ldreq	r3, [r6, #0]
 800da72:	1aed      	subeq	r5, r5, r3
 800da74:	68a3      	ldr	r3, [r4, #8]
 800da76:	bf0c      	ite	eq
 800da78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da7c:	2500      	movne	r5, #0
 800da7e:	4293      	cmp	r3, r2
 800da80:	bfc4      	itt	gt
 800da82:	1a9b      	subgt	r3, r3, r2
 800da84:	18ed      	addgt	r5, r5, r3
 800da86:	2600      	movs	r6, #0
 800da88:	341a      	adds	r4, #26
 800da8a:	42b5      	cmp	r5, r6
 800da8c:	d11a      	bne.n	800dac4 <_printf_common+0xc8>
 800da8e:	2000      	movs	r0, #0
 800da90:	e008      	b.n	800daa4 <_printf_common+0xa8>
 800da92:	2301      	movs	r3, #1
 800da94:	4652      	mov	r2, sl
 800da96:	4641      	mov	r1, r8
 800da98:	4638      	mov	r0, r7
 800da9a:	47c8      	blx	r9
 800da9c:	3001      	adds	r0, #1
 800da9e:	d103      	bne.n	800daa8 <_printf_common+0xac>
 800daa0:	f04f 30ff 	mov.w	r0, #4294967295
 800daa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daa8:	3501      	adds	r5, #1
 800daaa:	e7c6      	b.n	800da3a <_printf_common+0x3e>
 800daac:	18e1      	adds	r1, r4, r3
 800daae:	1c5a      	adds	r2, r3, #1
 800dab0:	2030      	movs	r0, #48	@ 0x30
 800dab2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dab6:	4422      	add	r2, r4
 800dab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dabc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dac0:	3302      	adds	r3, #2
 800dac2:	e7c7      	b.n	800da54 <_printf_common+0x58>
 800dac4:	2301      	movs	r3, #1
 800dac6:	4622      	mov	r2, r4
 800dac8:	4641      	mov	r1, r8
 800daca:	4638      	mov	r0, r7
 800dacc:	47c8      	blx	r9
 800dace:	3001      	adds	r0, #1
 800dad0:	d0e6      	beq.n	800daa0 <_printf_common+0xa4>
 800dad2:	3601      	adds	r6, #1
 800dad4:	e7d9      	b.n	800da8a <_printf_common+0x8e>
	...

0800dad8 <_printf_i>:
 800dad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dadc:	7e0f      	ldrb	r7, [r1, #24]
 800dade:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dae0:	2f78      	cmp	r7, #120	@ 0x78
 800dae2:	4691      	mov	r9, r2
 800dae4:	4680      	mov	r8, r0
 800dae6:	460c      	mov	r4, r1
 800dae8:	469a      	mov	sl, r3
 800daea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800daee:	d807      	bhi.n	800db00 <_printf_i+0x28>
 800daf0:	2f62      	cmp	r7, #98	@ 0x62
 800daf2:	d80a      	bhi.n	800db0a <_printf_i+0x32>
 800daf4:	2f00      	cmp	r7, #0
 800daf6:	f000 80d2 	beq.w	800dc9e <_printf_i+0x1c6>
 800dafa:	2f58      	cmp	r7, #88	@ 0x58
 800dafc:	f000 80b9 	beq.w	800dc72 <_printf_i+0x19a>
 800db00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800db08:	e03a      	b.n	800db80 <_printf_i+0xa8>
 800db0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db0e:	2b15      	cmp	r3, #21
 800db10:	d8f6      	bhi.n	800db00 <_printf_i+0x28>
 800db12:	a101      	add	r1, pc, #4	@ (adr r1, 800db18 <_printf_i+0x40>)
 800db14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db18:	0800db71 	.word	0x0800db71
 800db1c:	0800db85 	.word	0x0800db85
 800db20:	0800db01 	.word	0x0800db01
 800db24:	0800db01 	.word	0x0800db01
 800db28:	0800db01 	.word	0x0800db01
 800db2c:	0800db01 	.word	0x0800db01
 800db30:	0800db85 	.word	0x0800db85
 800db34:	0800db01 	.word	0x0800db01
 800db38:	0800db01 	.word	0x0800db01
 800db3c:	0800db01 	.word	0x0800db01
 800db40:	0800db01 	.word	0x0800db01
 800db44:	0800dc85 	.word	0x0800dc85
 800db48:	0800dbaf 	.word	0x0800dbaf
 800db4c:	0800dc3f 	.word	0x0800dc3f
 800db50:	0800db01 	.word	0x0800db01
 800db54:	0800db01 	.word	0x0800db01
 800db58:	0800dca7 	.word	0x0800dca7
 800db5c:	0800db01 	.word	0x0800db01
 800db60:	0800dbaf 	.word	0x0800dbaf
 800db64:	0800db01 	.word	0x0800db01
 800db68:	0800db01 	.word	0x0800db01
 800db6c:	0800dc47 	.word	0x0800dc47
 800db70:	6833      	ldr	r3, [r6, #0]
 800db72:	1d1a      	adds	r2, r3, #4
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	6032      	str	r2, [r6, #0]
 800db78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db80:	2301      	movs	r3, #1
 800db82:	e09d      	b.n	800dcc0 <_printf_i+0x1e8>
 800db84:	6833      	ldr	r3, [r6, #0]
 800db86:	6820      	ldr	r0, [r4, #0]
 800db88:	1d19      	adds	r1, r3, #4
 800db8a:	6031      	str	r1, [r6, #0]
 800db8c:	0606      	lsls	r6, r0, #24
 800db8e:	d501      	bpl.n	800db94 <_printf_i+0xbc>
 800db90:	681d      	ldr	r5, [r3, #0]
 800db92:	e003      	b.n	800db9c <_printf_i+0xc4>
 800db94:	0645      	lsls	r5, r0, #25
 800db96:	d5fb      	bpl.n	800db90 <_printf_i+0xb8>
 800db98:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db9c:	2d00      	cmp	r5, #0
 800db9e:	da03      	bge.n	800dba8 <_printf_i+0xd0>
 800dba0:	232d      	movs	r3, #45	@ 0x2d
 800dba2:	426d      	negs	r5, r5
 800dba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dba8:	4859      	ldr	r0, [pc, #356]	@ (800dd10 <_printf_i+0x238>)
 800dbaa:	230a      	movs	r3, #10
 800dbac:	e011      	b.n	800dbd2 <_printf_i+0xfa>
 800dbae:	6821      	ldr	r1, [r4, #0]
 800dbb0:	6833      	ldr	r3, [r6, #0]
 800dbb2:	0608      	lsls	r0, r1, #24
 800dbb4:	f853 5b04 	ldr.w	r5, [r3], #4
 800dbb8:	d402      	bmi.n	800dbc0 <_printf_i+0xe8>
 800dbba:	0649      	lsls	r1, r1, #25
 800dbbc:	bf48      	it	mi
 800dbbe:	b2ad      	uxthmi	r5, r5
 800dbc0:	2f6f      	cmp	r7, #111	@ 0x6f
 800dbc2:	4853      	ldr	r0, [pc, #332]	@ (800dd10 <_printf_i+0x238>)
 800dbc4:	6033      	str	r3, [r6, #0]
 800dbc6:	bf14      	ite	ne
 800dbc8:	230a      	movne	r3, #10
 800dbca:	2308      	moveq	r3, #8
 800dbcc:	2100      	movs	r1, #0
 800dbce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dbd2:	6866      	ldr	r6, [r4, #4]
 800dbd4:	60a6      	str	r6, [r4, #8]
 800dbd6:	2e00      	cmp	r6, #0
 800dbd8:	bfa2      	ittt	ge
 800dbda:	6821      	ldrge	r1, [r4, #0]
 800dbdc:	f021 0104 	bicge.w	r1, r1, #4
 800dbe0:	6021      	strge	r1, [r4, #0]
 800dbe2:	b90d      	cbnz	r5, 800dbe8 <_printf_i+0x110>
 800dbe4:	2e00      	cmp	r6, #0
 800dbe6:	d04b      	beq.n	800dc80 <_printf_i+0x1a8>
 800dbe8:	4616      	mov	r6, r2
 800dbea:	fbb5 f1f3 	udiv	r1, r5, r3
 800dbee:	fb03 5711 	mls	r7, r3, r1, r5
 800dbf2:	5dc7      	ldrb	r7, [r0, r7]
 800dbf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dbf8:	462f      	mov	r7, r5
 800dbfa:	42bb      	cmp	r3, r7
 800dbfc:	460d      	mov	r5, r1
 800dbfe:	d9f4      	bls.n	800dbea <_printf_i+0x112>
 800dc00:	2b08      	cmp	r3, #8
 800dc02:	d10b      	bne.n	800dc1c <_printf_i+0x144>
 800dc04:	6823      	ldr	r3, [r4, #0]
 800dc06:	07df      	lsls	r7, r3, #31
 800dc08:	d508      	bpl.n	800dc1c <_printf_i+0x144>
 800dc0a:	6923      	ldr	r3, [r4, #16]
 800dc0c:	6861      	ldr	r1, [r4, #4]
 800dc0e:	4299      	cmp	r1, r3
 800dc10:	bfde      	ittt	le
 800dc12:	2330      	movle	r3, #48	@ 0x30
 800dc14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc1c:	1b92      	subs	r2, r2, r6
 800dc1e:	6122      	str	r2, [r4, #16]
 800dc20:	f8cd a000 	str.w	sl, [sp]
 800dc24:	464b      	mov	r3, r9
 800dc26:	aa03      	add	r2, sp, #12
 800dc28:	4621      	mov	r1, r4
 800dc2a:	4640      	mov	r0, r8
 800dc2c:	f7ff fee6 	bl	800d9fc <_printf_common>
 800dc30:	3001      	adds	r0, #1
 800dc32:	d14a      	bne.n	800dcca <_printf_i+0x1f2>
 800dc34:	f04f 30ff 	mov.w	r0, #4294967295
 800dc38:	b004      	add	sp, #16
 800dc3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc3e:	6823      	ldr	r3, [r4, #0]
 800dc40:	f043 0320 	orr.w	r3, r3, #32
 800dc44:	6023      	str	r3, [r4, #0]
 800dc46:	4833      	ldr	r0, [pc, #204]	@ (800dd14 <_printf_i+0x23c>)
 800dc48:	2778      	movs	r7, #120	@ 0x78
 800dc4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc4e:	6823      	ldr	r3, [r4, #0]
 800dc50:	6831      	ldr	r1, [r6, #0]
 800dc52:	061f      	lsls	r7, r3, #24
 800dc54:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc58:	d402      	bmi.n	800dc60 <_printf_i+0x188>
 800dc5a:	065f      	lsls	r7, r3, #25
 800dc5c:	bf48      	it	mi
 800dc5e:	b2ad      	uxthmi	r5, r5
 800dc60:	6031      	str	r1, [r6, #0]
 800dc62:	07d9      	lsls	r1, r3, #31
 800dc64:	bf44      	itt	mi
 800dc66:	f043 0320 	orrmi.w	r3, r3, #32
 800dc6a:	6023      	strmi	r3, [r4, #0]
 800dc6c:	b11d      	cbz	r5, 800dc76 <_printf_i+0x19e>
 800dc6e:	2310      	movs	r3, #16
 800dc70:	e7ac      	b.n	800dbcc <_printf_i+0xf4>
 800dc72:	4827      	ldr	r0, [pc, #156]	@ (800dd10 <_printf_i+0x238>)
 800dc74:	e7e9      	b.n	800dc4a <_printf_i+0x172>
 800dc76:	6823      	ldr	r3, [r4, #0]
 800dc78:	f023 0320 	bic.w	r3, r3, #32
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	e7f6      	b.n	800dc6e <_printf_i+0x196>
 800dc80:	4616      	mov	r6, r2
 800dc82:	e7bd      	b.n	800dc00 <_printf_i+0x128>
 800dc84:	6833      	ldr	r3, [r6, #0]
 800dc86:	6825      	ldr	r5, [r4, #0]
 800dc88:	6961      	ldr	r1, [r4, #20]
 800dc8a:	1d18      	adds	r0, r3, #4
 800dc8c:	6030      	str	r0, [r6, #0]
 800dc8e:	062e      	lsls	r6, r5, #24
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	d501      	bpl.n	800dc98 <_printf_i+0x1c0>
 800dc94:	6019      	str	r1, [r3, #0]
 800dc96:	e002      	b.n	800dc9e <_printf_i+0x1c6>
 800dc98:	0668      	lsls	r0, r5, #25
 800dc9a:	d5fb      	bpl.n	800dc94 <_printf_i+0x1bc>
 800dc9c:	8019      	strh	r1, [r3, #0]
 800dc9e:	2300      	movs	r3, #0
 800dca0:	6123      	str	r3, [r4, #16]
 800dca2:	4616      	mov	r6, r2
 800dca4:	e7bc      	b.n	800dc20 <_printf_i+0x148>
 800dca6:	6833      	ldr	r3, [r6, #0]
 800dca8:	1d1a      	adds	r2, r3, #4
 800dcaa:	6032      	str	r2, [r6, #0]
 800dcac:	681e      	ldr	r6, [r3, #0]
 800dcae:	6862      	ldr	r2, [r4, #4]
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	f7f2 faf4 	bl	80002a0 <memchr>
 800dcb8:	b108      	cbz	r0, 800dcbe <_printf_i+0x1e6>
 800dcba:	1b80      	subs	r0, r0, r6
 800dcbc:	6060      	str	r0, [r4, #4]
 800dcbe:	6863      	ldr	r3, [r4, #4]
 800dcc0:	6123      	str	r3, [r4, #16]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dcc8:	e7aa      	b.n	800dc20 <_printf_i+0x148>
 800dcca:	6923      	ldr	r3, [r4, #16]
 800dccc:	4632      	mov	r2, r6
 800dcce:	4649      	mov	r1, r9
 800dcd0:	4640      	mov	r0, r8
 800dcd2:	47d0      	blx	sl
 800dcd4:	3001      	adds	r0, #1
 800dcd6:	d0ad      	beq.n	800dc34 <_printf_i+0x15c>
 800dcd8:	6823      	ldr	r3, [r4, #0]
 800dcda:	079b      	lsls	r3, r3, #30
 800dcdc:	d413      	bmi.n	800dd06 <_printf_i+0x22e>
 800dcde:	68e0      	ldr	r0, [r4, #12]
 800dce0:	9b03      	ldr	r3, [sp, #12]
 800dce2:	4298      	cmp	r0, r3
 800dce4:	bfb8      	it	lt
 800dce6:	4618      	movlt	r0, r3
 800dce8:	e7a6      	b.n	800dc38 <_printf_i+0x160>
 800dcea:	2301      	movs	r3, #1
 800dcec:	4632      	mov	r2, r6
 800dcee:	4649      	mov	r1, r9
 800dcf0:	4640      	mov	r0, r8
 800dcf2:	47d0      	blx	sl
 800dcf4:	3001      	adds	r0, #1
 800dcf6:	d09d      	beq.n	800dc34 <_printf_i+0x15c>
 800dcf8:	3501      	adds	r5, #1
 800dcfa:	68e3      	ldr	r3, [r4, #12]
 800dcfc:	9903      	ldr	r1, [sp, #12]
 800dcfe:	1a5b      	subs	r3, r3, r1
 800dd00:	42ab      	cmp	r3, r5
 800dd02:	dcf2      	bgt.n	800dcea <_printf_i+0x212>
 800dd04:	e7eb      	b.n	800dcde <_printf_i+0x206>
 800dd06:	2500      	movs	r5, #0
 800dd08:	f104 0619 	add.w	r6, r4, #25
 800dd0c:	e7f5      	b.n	800dcfa <_printf_i+0x222>
 800dd0e:	bf00      	nop
 800dd10:	0800e383 	.word	0x0800e383
 800dd14:	0800e394 	.word	0x0800e394

0800dd18 <__sflush_r>:
 800dd18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd20:	0716      	lsls	r6, r2, #28
 800dd22:	4605      	mov	r5, r0
 800dd24:	460c      	mov	r4, r1
 800dd26:	d454      	bmi.n	800ddd2 <__sflush_r+0xba>
 800dd28:	684b      	ldr	r3, [r1, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	dc02      	bgt.n	800dd34 <__sflush_r+0x1c>
 800dd2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	dd48      	ble.n	800ddc6 <__sflush_r+0xae>
 800dd34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd36:	2e00      	cmp	r6, #0
 800dd38:	d045      	beq.n	800ddc6 <__sflush_r+0xae>
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dd40:	682f      	ldr	r7, [r5, #0]
 800dd42:	6a21      	ldr	r1, [r4, #32]
 800dd44:	602b      	str	r3, [r5, #0]
 800dd46:	d030      	beq.n	800ddaa <__sflush_r+0x92>
 800dd48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dd4a:	89a3      	ldrh	r3, [r4, #12]
 800dd4c:	0759      	lsls	r1, r3, #29
 800dd4e:	d505      	bpl.n	800dd5c <__sflush_r+0x44>
 800dd50:	6863      	ldr	r3, [r4, #4]
 800dd52:	1ad2      	subs	r2, r2, r3
 800dd54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dd56:	b10b      	cbz	r3, 800dd5c <__sflush_r+0x44>
 800dd58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dd5a:	1ad2      	subs	r2, r2, r3
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd60:	6a21      	ldr	r1, [r4, #32]
 800dd62:	4628      	mov	r0, r5
 800dd64:	47b0      	blx	r6
 800dd66:	1c43      	adds	r3, r0, #1
 800dd68:	89a3      	ldrh	r3, [r4, #12]
 800dd6a:	d106      	bne.n	800dd7a <__sflush_r+0x62>
 800dd6c:	6829      	ldr	r1, [r5, #0]
 800dd6e:	291d      	cmp	r1, #29
 800dd70:	d82b      	bhi.n	800ddca <__sflush_r+0xb2>
 800dd72:	4a2a      	ldr	r2, [pc, #168]	@ (800de1c <__sflush_r+0x104>)
 800dd74:	410a      	asrs	r2, r1
 800dd76:	07d6      	lsls	r6, r2, #31
 800dd78:	d427      	bmi.n	800ddca <__sflush_r+0xb2>
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	6062      	str	r2, [r4, #4]
 800dd7e:	04d9      	lsls	r1, r3, #19
 800dd80:	6922      	ldr	r2, [r4, #16]
 800dd82:	6022      	str	r2, [r4, #0]
 800dd84:	d504      	bpl.n	800dd90 <__sflush_r+0x78>
 800dd86:	1c42      	adds	r2, r0, #1
 800dd88:	d101      	bne.n	800dd8e <__sflush_r+0x76>
 800dd8a:	682b      	ldr	r3, [r5, #0]
 800dd8c:	b903      	cbnz	r3, 800dd90 <__sflush_r+0x78>
 800dd8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800dd90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd92:	602f      	str	r7, [r5, #0]
 800dd94:	b1b9      	cbz	r1, 800ddc6 <__sflush_r+0xae>
 800dd96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd9a:	4299      	cmp	r1, r3
 800dd9c:	d002      	beq.n	800dda4 <__sflush_r+0x8c>
 800dd9e:	4628      	mov	r0, r5
 800dda0:	f7ff fa9a 	bl	800d2d8 <_free_r>
 800dda4:	2300      	movs	r3, #0
 800dda6:	6363      	str	r3, [r4, #52]	@ 0x34
 800dda8:	e00d      	b.n	800ddc6 <__sflush_r+0xae>
 800ddaa:	2301      	movs	r3, #1
 800ddac:	4628      	mov	r0, r5
 800ddae:	47b0      	blx	r6
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	1c50      	adds	r0, r2, #1
 800ddb4:	d1c9      	bne.n	800dd4a <__sflush_r+0x32>
 800ddb6:	682b      	ldr	r3, [r5, #0]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d0c6      	beq.n	800dd4a <__sflush_r+0x32>
 800ddbc:	2b1d      	cmp	r3, #29
 800ddbe:	d001      	beq.n	800ddc4 <__sflush_r+0xac>
 800ddc0:	2b16      	cmp	r3, #22
 800ddc2:	d11e      	bne.n	800de02 <__sflush_r+0xea>
 800ddc4:	602f      	str	r7, [r5, #0]
 800ddc6:	2000      	movs	r0, #0
 800ddc8:	e022      	b.n	800de10 <__sflush_r+0xf8>
 800ddca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddce:	b21b      	sxth	r3, r3
 800ddd0:	e01b      	b.n	800de0a <__sflush_r+0xf2>
 800ddd2:	690f      	ldr	r7, [r1, #16]
 800ddd4:	2f00      	cmp	r7, #0
 800ddd6:	d0f6      	beq.n	800ddc6 <__sflush_r+0xae>
 800ddd8:	0793      	lsls	r3, r2, #30
 800ddda:	680e      	ldr	r6, [r1, #0]
 800dddc:	bf08      	it	eq
 800ddde:	694b      	ldreq	r3, [r1, #20]
 800dde0:	600f      	str	r7, [r1, #0]
 800dde2:	bf18      	it	ne
 800dde4:	2300      	movne	r3, #0
 800dde6:	eba6 0807 	sub.w	r8, r6, r7
 800ddea:	608b      	str	r3, [r1, #8]
 800ddec:	f1b8 0f00 	cmp.w	r8, #0
 800ddf0:	dde9      	ble.n	800ddc6 <__sflush_r+0xae>
 800ddf2:	6a21      	ldr	r1, [r4, #32]
 800ddf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ddf6:	4643      	mov	r3, r8
 800ddf8:	463a      	mov	r2, r7
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	47b0      	blx	r6
 800ddfe:	2800      	cmp	r0, #0
 800de00:	dc08      	bgt.n	800de14 <__sflush_r+0xfc>
 800de02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de0a:	81a3      	strh	r3, [r4, #12]
 800de0c:	f04f 30ff 	mov.w	r0, #4294967295
 800de10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de14:	4407      	add	r7, r0
 800de16:	eba8 0800 	sub.w	r8, r8, r0
 800de1a:	e7e7      	b.n	800ddec <__sflush_r+0xd4>
 800de1c:	dfbffffe 	.word	0xdfbffffe

0800de20 <_fflush_r>:
 800de20:	b538      	push	{r3, r4, r5, lr}
 800de22:	690b      	ldr	r3, [r1, #16]
 800de24:	4605      	mov	r5, r0
 800de26:	460c      	mov	r4, r1
 800de28:	b913      	cbnz	r3, 800de30 <_fflush_r+0x10>
 800de2a:	2500      	movs	r5, #0
 800de2c:	4628      	mov	r0, r5
 800de2e:	bd38      	pop	{r3, r4, r5, pc}
 800de30:	b118      	cbz	r0, 800de3a <_fflush_r+0x1a>
 800de32:	6a03      	ldr	r3, [r0, #32]
 800de34:	b90b      	cbnz	r3, 800de3a <_fflush_r+0x1a>
 800de36:	f7ff f91b 	bl	800d070 <__sinit>
 800de3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d0f3      	beq.n	800de2a <_fflush_r+0xa>
 800de42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800de44:	07d0      	lsls	r0, r2, #31
 800de46:	d404      	bmi.n	800de52 <_fflush_r+0x32>
 800de48:	0599      	lsls	r1, r3, #22
 800de4a:	d402      	bmi.n	800de52 <_fflush_r+0x32>
 800de4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de4e:	f7ff fa32 	bl	800d2b6 <__retarget_lock_acquire_recursive>
 800de52:	4628      	mov	r0, r5
 800de54:	4621      	mov	r1, r4
 800de56:	f7ff ff5f 	bl	800dd18 <__sflush_r>
 800de5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de5c:	07da      	lsls	r2, r3, #31
 800de5e:	4605      	mov	r5, r0
 800de60:	d4e4      	bmi.n	800de2c <_fflush_r+0xc>
 800de62:	89a3      	ldrh	r3, [r4, #12]
 800de64:	059b      	lsls	r3, r3, #22
 800de66:	d4e1      	bmi.n	800de2c <_fflush_r+0xc>
 800de68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de6a:	f7ff fa25 	bl	800d2b8 <__retarget_lock_release_recursive>
 800de6e:	e7dd      	b.n	800de2c <_fflush_r+0xc>

0800de70 <__swbuf_r>:
 800de70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de72:	460e      	mov	r6, r1
 800de74:	4614      	mov	r4, r2
 800de76:	4605      	mov	r5, r0
 800de78:	b118      	cbz	r0, 800de82 <__swbuf_r+0x12>
 800de7a:	6a03      	ldr	r3, [r0, #32]
 800de7c:	b90b      	cbnz	r3, 800de82 <__swbuf_r+0x12>
 800de7e:	f7ff f8f7 	bl	800d070 <__sinit>
 800de82:	69a3      	ldr	r3, [r4, #24]
 800de84:	60a3      	str	r3, [r4, #8]
 800de86:	89a3      	ldrh	r3, [r4, #12]
 800de88:	071a      	lsls	r2, r3, #28
 800de8a:	d501      	bpl.n	800de90 <__swbuf_r+0x20>
 800de8c:	6923      	ldr	r3, [r4, #16]
 800de8e:	b943      	cbnz	r3, 800dea2 <__swbuf_r+0x32>
 800de90:	4621      	mov	r1, r4
 800de92:	4628      	mov	r0, r5
 800de94:	f000 f82a 	bl	800deec <__swsetup_r>
 800de98:	b118      	cbz	r0, 800dea2 <__swbuf_r+0x32>
 800de9a:	f04f 37ff 	mov.w	r7, #4294967295
 800de9e:	4638      	mov	r0, r7
 800dea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dea2:	6823      	ldr	r3, [r4, #0]
 800dea4:	6922      	ldr	r2, [r4, #16]
 800dea6:	1a98      	subs	r0, r3, r2
 800dea8:	6963      	ldr	r3, [r4, #20]
 800deaa:	b2f6      	uxtb	r6, r6
 800deac:	4283      	cmp	r3, r0
 800deae:	4637      	mov	r7, r6
 800deb0:	dc05      	bgt.n	800debe <__swbuf_r+0x4e>
 800deb2:	4621      	mov	r1, r4
 800deb4:	4628      	mov	r0, r5
 800deb6:	f7ff ffb3 	bl	800de20 <_fflush_r>
 800deba:	2800      	cmp	r0, #0
 800debc:	d1ed      	bne.n	800de9a <__swbuf_r+0x2a>
 800debe:	68a3      	ldr	r3, [r4, #8]
 800dec0:	3b01      	subs	r3, #1
 800dec2:	60a3      	str	r3, [r4, #8]
 800dec4:	6823      	ldr	r3, [r4, #0]
 800dec6:	1c5a      	adds	r2, r3, #1
 800dec8:	6022      	str	r2, [r4, #0]
 800deca:	701e      	strb	r6, [r3, #0]
 800decc:	6962      	ldr	r2, [r4, #20]
 800dece:	1c43      	adds	r3, r0, #1
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d004      	beq.n	800dede <__swbuf_r+0x6e>
 800ded4:	89a3      	ldrh	r3, [r4, #12]
 800ded6:	07db      	lsls	r3, r3, #31
 800ded8:	d5e1      	bpl.n	800de9e <__swbuf_r+0x2e>
 800deda:	2e0a      	cmp	r6, #10
 800dedc:	d1df      	bne.n	800de9e <__swbuf_r+0x2e>
 800dede:	4621      	mov	r1, r4
 800dee0:	4628      	mov	r0, r5
 800dee2:	f7ff ff9d 	bl	800de20 <_fflush_r>
 800dee6:	2800      	cmp	r0, #0
 800dee8:	d0d9      	beq.n	800de9e <__swbuf_r+0x2e>
 800deea:	e7d6      	b.n	800de9a <__swbuf_r+0x2a>

0800deec <__swsetup_r>:
 800deec:	b538      	push	{r3, r4, r5, lr}
 800deee:	4b29      	ldr	r3, [pc, #164]	@ (800df94 <__swsetup_r+0xa8>)
 800def0:	4605      	mov	r5, r0
 800def2:	6818      	ldr	r0, [r3, #0]
 800def4:	460c      	mov	r4, r1
 800def6:	b118      	cbz	r0, 800df00 <__swsetup_r+0x14>
 800def8:	6a03      	ldr	r3, [r0, #32]
 800defa:	b90b      	cbnz	r3, 800df00 <__swsetup_r+0x14>
 800defc:	f7ff f8b8 	bl	800d070 <__sinit>
 800df00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df04:	0719      	lsls	r1, r3, #28
 800df06:	d422      	bmi.n	800df4e <__swsetup_r+0x62>
 800df08:	06da      	lsls	r2, r3, #27
 800df0a:	d407      	bmi.n	800df1c <__swsetup_r+0x30>
 800df0c:	2209      	movs	r2, #9
 800df0e:	602a      	str	r2, [r5, #0]
 800df10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df14:	81a3      	strh	r3, [r4, #12]
 800df16:	f04f 30ff 	mov.w	r0, #4294967295
 800df1a:	e033      	b.n	800df84 <__swsetup_r+0x98>
 800df1c:	0758      	lsls	r0, r3, #29
 800df1e:	d512      	bpl.n	800df46 <__swsetup_r+0x5a>
 800df20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df22:	b141      	cbz	r1, 800df36 <__swsetup_r+0x4a>
 800df24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df28:	4299      	cmp	r1, r3
 800df2a:	d002      	beq.n	800df32 <__swsetup_r+0x46>
 800df2c:	4628      	mov	r0, r5
 800df2e:	f7ff f9d3 	bl	800d2d8 <_free_r>
 800df32:	2300      	movs	r3, #0
 800df34:	6363      	str	r3, [r4, #52]	@ 0x34
 800df36:	89a3      	ldrh	r3, [r4, #12]
 800df38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800df3c:	81a3      	strh	r3, [r4, #12]
 800df3e:	2300      	movs	r3, #0
 800df40:	6063      	str	r3, [r4, #4]
 800df42:	6923      	ldr	r3, [r4, #16]
 800df44:	6023      	str	r3, [r4, #0]
 800df46:	89a3      	ldrh	r3, [r4, #12]
 800df48:	f043 0308 	orr.w	r3, r3, #8
 800df4c:	81a3      	strh	r3, [r4, #12]
 800df4e:	6923      	ldr	r3, [r4, #16]
 800df50:	b94b      	cbnz	r3, 800df66 <__swsetup_r+0x7a>
 800df52:	89a3      	ldrh	r3, [r4, #12]
 800df54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800df58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df5c:	d003      	beq.n	800df66 <__swsetup_r+0x7a>
 800df5e:	4621      	mov	r1, r4
 800df60:	4628      	mov	r0, r5
 800df62:	f000 f897 	bl	800e094 <__smakebuf_r>
 800df66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df6a:	f013 0201 	ands.w	r2, r3, #1
 800df6e:	d00a      	beq.n	800df86 <__swsetup_r+0x9a>
 800df70:	2200      	movs	r2, #0
 800df72:	60a2      	str	r2, [r4, #8]
 800df74:	6962      	ldr	r2, [r4, #20]
 800df76:	4252      	negs	r2, r2
 800df78:	61a2      	str	r2, [r4, #24]
 800df7a:	6922      	ldr	r2, [r4, #16]
 800df7c:	b942      	cbnz	r2, 800df90 <__swsetup_r+0xa4>
 800df7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800df82:	d1c5      	bne.n	800df10 <__swsetup_r+0x24>
 800df84:	bd38      	pop	{r3, r4, r5, pc}
 800df86:	0799      	lsls	r1, r3, #30
 800df88:	bf58      	it	pl
 800df8a:	6962      	ldrpl	r2, [r4, #20]
 800df8c:	60a2      	str	r2, [r4, #8]
 800df8e:	e7f4      	b.n	800df7a <__swsetup_r+0x8e>
 800df90:	2000      	movs	r0, #0
 800df92:	e7f7      	b.n	800df84 <__swsetup_r+0x98>
 800df94:	20000038 	.word	0x20000038

0800df98 <memmove>:
 800df98:	4288      	cmp	r0, r1
 800df9a:	b510      	push	{r4, lr}
 800df9c:	eb01 0402 	add.w	r4, r1, r2
 800dfa0:	d902      	bls.n	800dfa8 <memmove+0x10>
 800dfa2:	4284      	cmp	r4, r0
 800dfa4:	4623      	mov	r3, r4
 800dfa6:	d807      	bhi.n	800dfb8 <memmove+0x20>
 800dfa8:	1e43      	subs	r3, r0, #1
 800dfaa:	42a1      	cmp	r1, r4
 800dfac:	d008      	beq.n	800dfc0 <memmove+0x28>
 800dfae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dfb6:	e7f8      	b.n	800dfaa <memmove+0x12>
 800dfb8:	4402      	add	r2, r0
 800dfba:	4601      	mov	r1, r0
 800dfbc:	428a      	cmp	r2, r1
 800dfbe:	d100      	bne.n	800dfc2 <memmove+0x2a>
 800dfc0:	bd10      	pop	{r4, pc}
 800dfc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dfca:	e7f7      	b.n	800dfbc <memmove+0x24>

0800dfcc <_sbrk_r>:
 800dfcc:	b538      	push	{r3, r4, r5, lr}
 800dfce:	4d06      	ldr	r5, [pc, #24]	@ (800dfe8 <_sbrk_r+0x1c>)
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	4608      	mov	r0, r1
 800dfd6:	602b      	str	r3, [r5, #0]
 800dfd8:	f7f3 f9b8 	bl	800134c <_sbrk>
 800dfdc:	1c43      	adds	r3, r0, #1
 800dfde:	d102      	bne.n	800dfe6 <_sbrk_r+0x1a>
 800dfe0:	682b      	ldr	r3, [r5, #0]
 800dfe2:	b103      	cbz	r3, 800dfe6 <_sbrk_r+0x1a>
 800dfe4:	6023      	str	r3, [r4, #0]
 800dfe6:	bd38      	pop	{r3, r4, r5, pc}
 800dfe8:	20014b14 	.word	0x20014b14

0800dfec <_realloc_r>:
 800dfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff0:	4680      	mov	r8, r0
 800dff2:	4615      	mov	r5, r2
 800dff4:	460c      	mov	r4, r1
 800dff6:	b921      	cbnz	r1, 800e002 <_realloc_r+0x16>
 800dff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dffc:	4611      	mov	r1, r2
 800dffe:	f7ff b9d7 	b.w	800d3b0 <_malloc_r>
 800e002:	b92a      	cbnz	r2, 800e010 <_realloc_r+0x24>
 800e004:	f7ff f968 	bl	800d2d8 <_free_r>
 800e008:	2400      	movs	r4, #0
 800e00a:	4620      	mov	r0, r4
 800e00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e010:	f000 f89e 	bl	800e150 <_malloc_usable_size_r>
 800e014:	4285      	cmp	r5, r0
 800e016:	4606      	mov	r6, r0
 800e018:	d802      	bhi.n	800e020 <_realloc_r+0x34>
 800e01a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e01e:	d8f4      	bhi.n	800e00a <_realloc_r+0x1e>
 800e020:	4629      	mov	r1, r5
 800e022:	4640      	mov	r0, r8
 800e024:	f7ff f9c4 	bl	800d3b0 <_malloc_r>
 800e028:	4607      	mov	r7, r0
 800e02a:	2800      	cmp	r0, #0
 800e02c:	d0ec      	beq.n	800e008 <_realloc_r+0x1c>
 800e02e:	42b5      	cmp	r5, r6
 800e030:	462a      	mov	r2, r5
 800e032:	4621      	mov	r1, r4
 800e034:	bf28      	it	cs
 800e036:	4632      	movcs	r2, r6
 800e038:	f7ff f93f 	bl	800d2ba <memcpy>
 800e03c:	4621      	mov	r1, r4
 800e03e:	4640      	mov	r0, r8
 800e040:	f7ff f94a 	bl	800d2d8 <_free_r>
 800e044:	463c      	mov	r4, r7
 800e046:	e7e0      	b.n	800e00a <_realloc_r+0x1e>

0800e048 <__swhatbuf_r>:
 800e048:	b570      	push	{r4, r5, r6, lr}
 800e04a:	460c      	mov	r4, r1
 800e04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e050:	2900      	cmp	r1, #0
 800e052:	b096      	sub	sp, #88	@ 0x58
 800e054:	4615      	mov	r5, r2
 800e056:	461e      	mov	r6, r3
 800e058:	da0d      	bge.n	800e076 <__swhatbuf_r+0x2e>
 800e05a:	89a3      	ldrh	r3, [r4, #12]
 800e05c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e060:	f04f 0100 	mov.w	r1, #0
 800e064:	bf14      	ite	ne
 800e066:	2340      	movne	r3, #64	@ 0x40
 800e068:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e06c:	2000      	movs	r0, #0
 800e06e:	6031      	str	r1, [r6, #0]
 800e070:	602b      	str	r3, [r5, #0]
 800e072:	b016      	add	sp, #88	@ 0x58
 800e074:	bd70      	pop	{r4, r5, r6, pc}
 800e076:	466a      	mov	r2, sp
 800e078:	f000 f848 	bl	800e10c <_fstat_r>
 800e07c:	2800      	cmp	r0, #0
 800e07e:	dbec      	blt.n	800e05a <__swhatbuf_r+0x12>
 800e080:	9901      	ldr	r1, [sp, #4]
 800e082:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e086:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e08a:	4259      	negs	r1, r3
 800e08c:	4159      	adcs	r1, r3
 800e08e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e092:	e7eb      	b.n	800e06c <__swhatbuf_r+0x24>

0800e094 <__smakebuf_r>:
 800e094:	898b      	ldrh	r3, [r1, #12]
 800e096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e098:	079d      	lsls	r5, r3, #30
 800e09a:	4606      	mov	r6, r0
 800e09c:	460c      	mov	r4, r1
 800e09e:	d507      	bpl.n	800e0b0 <__smakebuf_r+0x1c>
 800e0a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e0a4:	6023      	str	r3, [r4, #0]
 800e0a6:	6123      	str	r3, [r4, #16]
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	6163      	str	r3, [r4, #20]
 800e0ac:	b003      	add	sp, #12
 800e0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0b0:	ab01      	add	r3, sp, #4
 800e0b2:	466a      	mov	r2, sp
 800e0b4:	f7ff ffc8 	bl	800e048 <__swhatbuf_r>
 800e0b8:	9f00      	ldr	r7, [sp, #0]
 800e0ba:	4605      	mov	r5, r0
 800e0bc:	4639      	mov	r1, r7
 800e0be:	4630      	mov	r0, r6
 800e0c0:	f7ff f976 	bl	800d3b0 <_malloc_r>
 800e0c4:	b948      	cbnz	r0, 800e0da <__smakebuf_r+0x46>
 800e0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ca:	059a      	lsls	r2, r3, #22
 800e0cc:	d4ee      	bmi.n	800e0ac <__smakebuf_r+0x18>
 800e0ce:	f023 0303 	bic.w	r3, r3, #3
 800e0d2:	f043 0302 	orr.w	r3, r3, #2
 800e0d6:	81a3      	strh	r3, [r4, #12]
 800e0d8:	e7e2      	b.n	800e0a0 <__smakebuf_r+0xc>
 800e0da:	89a3      	ldrh	r3, [r4, #12]
 800e0dc:	6020      	str	r0, [r4, #0]
 800e0de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0e2:	81a3      	strh	r3, [r4, #12]
 800e0e4:	9b01      	ldr	r3, [sp, #4]
 800e0e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e0ea:	b15b      	cbz	r3, 800e104 <__smakebuf_r+0x70>
 800e0ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	f000 f81d 	bl	800e130 <_isatty_r>
 800e0f6:	b128      	cbz	r0, 800e104 <__smakebuf_r+0x70>
 800e0f8:	89a3      	ldrh	r3, [r4, #12]
 800e0fa:	f023 0303 	bic.w	r3, r3, #3
 800e0fe:	f043 0301 	orr.w	r3, r3, #1
 800e102:	81a3      	strh	r3, [r4, #12]
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	431d      	orrs	r5, r3
 800e108:	81a5      	strh	r5, [r4, #12]
 800e10a:	e7cf      	b.n	800e0ac <__smakebuf_r+0x18>

0800e10c <_fstat_r>:
 800e10c:	b538      	push	{r3, r4, r5, lr}
 800e10e:	4d07      	ldr	r5, [pc, #28]	@ (800e12c <_fstat_r+0x20>)
 800e110:	2300      	movs	r3, #0
 800e112:	4604      	mov	r4, r0
 800e114:	4608      	mov	r0, r1
 800e116:	4611      	mov	r1, r2
 800e118:	602b      	str	r3, [r5, #0]
 800e11a:	f7f3 f8ee 	bl	80012fa <_fstat>
 800e11e:	1c43      	adds	r3, r0, #1
 800e120:	d102      	bne.n	800e128 <_fstat_r+0x1c>
 800e122:	682b      	ldr	r3, [r5, #0]
 800e124:	b103      	cbz	r3, 800e128 <_fstat_r+0x1c>
 800e126:	6023      	str	r3, [r4, #0]
 800e128:	bd38      	pop	{r3, r4, r5, pc}
 800e12a:	bf00      	nop
 800e12c:	20014b14 	.word	0x20014b14

0800e130 <_isatty_r>:
 800e130:	b538      	push	{r3, r4, r5, lr}
 800e132:	4d06      	ldr	r5, [pc, #24]	@ (800e14c <_isatty_r+0x1c>)
 800e134:	2300      	movs	r3, #0
 800e136:	4604      	mov	r4, r0
 800e138:	4608      	mov	r0, r1
 800e13a:	602b      	str	r3, [r5, #0]
 800e13c:	f7f3 f8ed 	bl	800131a <_isatty>
 800e140:	1c43      	adds	r3, r0, #1
 800e142:	d102      	bne.n	800e14a <_isatty_r+0x1a>
 800e144:	682b      	ldr	r3, [r5, #0]
 800e146:	b103      	cbz	r3, 800e14a <_isatty_r+0x1a>
 800e148:	6023      	str	r3, [r4, #0]
 800e14a:	bd38      	pop	{r3, r4, r5, pc}
 800e14c:	20014b14 	.word	0x20014b14

0800e150 <_malloc_usable_size_r>:
 800e150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e154:	1f18      	subs	r0, r3, #4
 800e156:	2b00      	cmp	r3, #0
 800e158:	bfbc      	itt	lt
 800e15a:	580b      	ldrlt	r3, [r1, r0]
 800e15c:	18c0      	addlt	r0, r0, r3
 800e15e:	4770      	bx	lr

0800e160 <_init>:
 800e160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e162:	bf00      	nop
 800e164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e166:	bc08      	pop	{r3}
 800e168:	469e      	mov	lr, r3
 800e16a:	4770      	bx	lr

0800e16c <_fini>:
 800e16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16e:	bf00      	nop
 800e170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e172:	bc08      	pop	{r3}
 800e174:	469e      	mov	lr, r3
 800e176:	4770      	bx	lr
